#procedure momsubs(TOPO,MOMS,DOTS)
#ifndef `SUBTOPO'
	#define SUBTOPO ""
#endif
#switch `TOPO'
*--#[ no2 :
#case Mno2
#procedure SimpleDotno2()
if (count(Mno2,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p1.p4^n? = i13^n;
	id Q.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 111
* path: (1, 8, 11)
#case 211
* path: (2, 3, 11)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p5.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p7.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p8.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p - p3.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p11.p + p3.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p11.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(p2.p3,-i10/2+i2/2+i3/2,i,i10,i2,i3,Mno2,dotrewrite-no2-0)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno2,dotrewrite-no2-1)
	#call replace(p3.p11,-i11/2-i3/2+i4/2,i,i11,i3,i4,Mno2,dotrewrite-no2-2)
	#call replace(p8.p11,i11/2-i7/2+i8/2,i,i11,i7,i8,Mno2,dotrewrite-no2-3)
	#call replace(p2.p8,-i1/2+i12-i2/2+i9/2,i,i1,i12,i2,i9,Mno2,dotrewrite-no2-4)
	#call replace(Q.p11,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno2,dotrewrite-no2-5)
	#call replace(p3.p8,`Q2'/2-i11/2-i13+i4/2-i5/2+i7/2-i8/2,i,i11,i13,i4,i5,i7,i8,Mno2,dotrewrite-no2-6)
	#call replace(p2.p11,-`Q2'/2-i1/2+i10/2+i12+i13-i2/2-i3/2+i5/2-i6/2+i8/2+i9/2,i,i1,i10,i12,i13,i2,i3,i5,i6,i8,i9,Mno2,dotrewrite-no2-7)
#endif
#break
#case 14
* path: (1, 8, 11, 4)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p5.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p7.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p2.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p8.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p11.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p11.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno2,dotrewrite-no2-0)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno2,dotrewrite-no2-1)
	#call replace(p4.p11,i11/2-i3/2+i4/2,i,i11,i3,i4,Mno2,dotrewrite-no2-2)
	#call replace(p8.p11,i11/2-i7/2+i8/2,i,i11,i7,i8,Mno2,dotrewrite-no2-3)
	#call replace(p2.p8,-i1/2+i12-i2/2+i9/2,i,i1,i12,i2,i9,Mno2,dotrewrite-no2-4)
	#call replace(p4.p8,`Q2'/2-i13+i4/2-i5/2,i,i13,i4,i5,Mno2,dotrewrite-no2-5)
	#call replace(Q.p11,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno2,dotrewrite-no2-6)
	#call replace(p2.p4,-`Q2'/2-i1/2+i12+i13+i5/2-i6/2+i8/2+i9/2,i,i1,i12,i13,i5,i6,i8,i9,Mno2,dotrewrite-no2-7)
	#call replace(p2.p11,-`Q2'/2-i1/2+i10/2+i12+i13-i2/2-i3/2+i5/2-i6/2+i8/2+i9/2,i,i1,i10,i12,i13,i2,i3,i5,i6,i8,i9,Mno2,dotrewrite-no2-8)
#endif
#break
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p5.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p + p11.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p8.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p8.p - p7.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p10.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p7.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	if (count(Mno2,1)) id Q.p10 = i12 - i14;
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno2,dotrewrite-no2-1)
	#call replace(p7.p8,-i11/2+i7/2+i8/2,i,i11,i7,i8,Mno2,dotrewrite-no2-2)
	#call replace(p2.p10,i10/2+i2/2-i3/2,i,i10,i2,i3,Mno2,dotrewrite-no2-3)
	#call replace(p7.p10,-i10/2+i6/2-i7/2,i,i10,i6,i7,Mno2,dotrewrite-no2-4)
	#call replace(p2.p8,-i1/2+i12-i2/2+i9/2,i,i1,i12,i2,i9,Mno2,dotrewrite-no2-5)
	#call replace(Q.p7,-i1/2+i14-i4/2+i5/2+i8/2,i,i1,i14,i4,i5,i8,Mno2,dotrewrite-no2-6)
	#call replace(p2.p7,`Q2'/2-i10/2-i13+i3/2-i5/2+i6/2-i8/2,i,i10,i13,i3,i5,i6,i8,Mno2,dotrewrite-no2-7)
	#call replace(p8.p10,-`Q2'/2-i1/2+i11/2+i12+i13-i2/2-i4/2+i5/2-i7/2+i8/2+i9/2,i,i1,i11,i12,i13,i2,i4,i5,i7,i8,i9,Mno2,dotrewrite-no2-8)
#endif
#break
#case Q6
* path: (0, 1, 9, 6)
#case 16
* path: (1, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p3.p + p4.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p10.p + p2.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p5.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p7.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p9.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p9.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno2,dotrewrite-no2-0)
	#call replace(p6.p7,i10/2-i6/2-i7/2,i,i10,i6,i7,Mno2,dotrewrite-no2-1)
	#call replace(p1.p9,-i1/2+i2/2-i9/2,i,i1,i2,i9,Mno2,dotrewrite-no2-2)
	#call replace(p6.p9,i5/2-i6/2-i9/2,i,i5,i6,i9,Mno2,dotrewrite-no2-3)
	#call replace(Q.p9,-`Q2'/2-i1/2+i12+i8/2,i,i1,i12,i8,Mno2,dotrewrite-no2-4)
	#call replace(Q.p6,i1/2-i12+i4/2-i5/2-i8/2,i,i1,i12,i4,i5,i8,Mno2,dotrewrite-no2-5)
	#call replace(p1.p6,-`Q2'/2+i13-i2/2+i8/2+i9/2,i,i13,i2,i8,i9,Mno2,dotrewrite-no2-6)
	#call replace(Q.p7,-i1/2+i14-i4/2+i5/2+i8/2,i,i1,i14,i4,i5,i8,Mno2,dotrewrite-no2-7)
	#call replace(p1.p7,-i1/2+i11/2+i14-i4/2+i5/2-i7/2,i,i1,i11,i14,i4,i5,i7,Mno2,dotrewrite-no2-8)
	#call replace(p7.p9,`Q2'/2+i1/2-i10/2-i11/2-i13-i14+i3/2+i4/2-i5+i6/2+i7/2-i8/2,i,i1,i10,i11,i13,i14,i3,i4,i5,i6,i7,i8,Mno2,dotrewrite-no2-9)
#endif
#break
#case 17
* path: (1, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p3.p + p4.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p10.p + p2.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p9.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p5.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p7.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno2,dotrewrite-no2-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno2,dotrewrite-no2-1)
	#call replace(p6.p7,i10/2-i6/2-i7/2,i,i10,i6,i7,Mno2,dotrewrite-no2-2)
	#call replace(Q.p6,i1/2-i12+i4/2-i5/2-i8/2,i,i1,i12,i4,i5,i8,Mno2,dotrewrite-no2-3)
	#call replace(p1.p6,-`Q2'/2+i13-i2/2+i8/2+i9/2,i,i13,i2,i8,i9,Mno2,dotrewrite-no2-4)
	#call replace(Q.p7,-i1/2+i14-i4/2+i5/2+i8/2,i,i1,i14,i4,i5,i8,Mno2,dotrewrite-no2-5)
	#call replace(p4.p7,`Q2'/2-i11/2-i13+i3/2-i5/2,i,i11,i13,i3,i5,Mno2,dotrewrite-no2-6)
	#call replace(p4.p6,i1/2-i12+i4/2+i6/2-i8/2-i9/2,i,i1,i12,i4,i6,i8,i9,Mno2,dotrewrite-no2-7)
	#call replace(p1.p7,-i1/2+i11/2+i14-i4/2+i5/2-i7/2,i,i1,i11,i14,i4,i5,i7,Mno2,dotrewrite-no2-8)
#endif
#break
#case Q10
* path: (0, 1, 2, 10)
#case 110
* path: (1, 2, 10)
#case 210
* path: (2, 10)
#case 26
* path: (2, 10, 6)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p3.p + p4.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p5.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p9.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p10.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p10.p - p6.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p1.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	if (count(Mno2,1)) id Q.p10 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno2,dotrewrite-no2-1)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mno2,dotrewrite-no2-2)
	#call replace(p2.p10,i10/2+i2/2-i3/2,i,i10,i2,i3,Mno2,dotrewrite-no2-3)
	#call replace(p6.p10,-i10/2-i6/2+i7/2,i,i10,i6,i7,Mno2,dotrewrite-no2-4)
	#call replace(Q.p6,i1/2-i12+i4/2-i5/2-i8/2,i,i1,i12,i4,i5,i8,Mno2,dotrewrite-no2-5)
	#call replace(p1.p6,-`Q2'/2+i13-i2/2+i8/2+i9/2,i,i13,i2,i8,i9,Mno2,dotrewrite-no2-6)
	#call replace(p2.p6,-`Q2'/2+i13-i2/2+i5/2-i6/2+i8/2,i,i13,i2,i5,i6,i8,Mno2,dotrewrite-no2-7)
	#call replace(p1.p10,`Q2'/2+i1/2-i11/2-i13-i14+i2/2+i4/2-i5/2+i7/2-i8/2-i9/2,i,i1,i11,i13,i14,i2,i4,i5,i7,i8,i9,Mno2,dotrewrite-no2-8)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case Q5
* path: (0, 1, 9, 5)
#case 19
* path: (1, 9)
#case 15
* path: (1, 9, 5)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p10.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p2.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p3.p + p4.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p9.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p5.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p9.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno2,dotrewrite-no2-0)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno2,dotrewrite-no2-1)
	#call replace(p1.p9,-i1/2+i2/2-i9/2,i,i1,i2,i9,Mno2,dotrewrite-no2-2)
	#call replace(p5.p9,-i5/2+i6/2-i9/2,i,i5,i6,i9,Mno2,dotrewrite-no2-3)
	#call replace(p1.p5,`Q2'/2+i1/2-i13-i8/2,i,i1,i13,i8,Mno2,dotrewrite-no2-4)
	#call replace(p3.p5,i11/2+i14-i3/2-i4/2,i,i11,i14,i3,i4,Mno2,dotrewrite-no2-5)
	#call replace(Q.p9,-`Q2'/2-i1/2+i12+i8/2,i,i1,i12,i8,Mno2,dotrewrite-no2-6)
	#call replace(p1.p3,-`Q2'/2+i11/2+i13+i14-i4/2+i5/2-i7/2+i8/2,i,i11,i13,i14,i4,i5,i7,i8,Mno2,dotrewrite-no2-7)
	#call replace(p3.p9,`Q2'/2-i10/2-i11/2-i13-i14+i2/2+i3/2+i4/2-i5/2+i7/2-i8/2,i,i10,i11,i13,i14,i2,i3,i4,i5,i7,i8,Mno2,dotrewrite-no2-8)
#endif
#break
#case 26
* path: (2, 9, 6)
#case 910
* path: (9, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p11.p + p7.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p3.p + p4.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p5.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p9.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p10.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p9.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p10.p - p6.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	if (count(Mno2,1)) id Q.p10 = i12 - i14;
	#call replace(p2.p9,-i1/2+i2/2+i9/2,i,i1,i2,i9,Mno2,dotrewrite-no2-1)
	#call replace(p6.p9,i5/2-i6/2-i9/2,i,i5,i6,i9,Mno2,dotrewrite-no2-2)
	#call replace(p2.p10,i10/2+i2/2-i3/2,i,i10,i2,i3,Mno2,dotrewrite-no2-3)
	#call replace(p6.p10,-i10/2-i6/2+i7/2,i,i10,i6,i7,Mno2,dotrewrite-no2-4)
	#call replace(Q.p9,-`Q2'/2-i1/2+i12+i8/2,i,i1,i12,i8,Mno2,dotrewrite-no2-5)
	#call replace(Q.p6,i1/2-i12+i4/2-i5/2-i8/2,i,i1,i12,i4,i5,i8,Mno2,dotrewrite-no2-6)
	#call replace(p2.p6,-`Q2'/2+i13-i2/2+i5/2-i6/2+i8/2,i,i13,i2,i5,i6,i8,Mno2,dotrewrite-no2-7)
	#call replace(p9.p10,-`Q2'/2-i1/2+i10/2+i11/2+i13+i14-i3/2-i4/2+i5/2-i7/2+i8/2+i9/2,i,i1,i10,i11,i13,i14,i3,i4,i5,i7,i8,i9,Mno2,dotrewrite-no2-8)
#endif
#break
#case 29
* path: (2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p11.p + p7.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p3.p + p4.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p10.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p9.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p - p3.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p5.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p9.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(p2.p3,-i10/2+i2/2+i3/2,i,i10,i2,i3,Mno2,dotrewrite-no2-0)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno2,dotrewrite-no2-1)
	#call replace(p2.p9,-i1/2+i2/2+i9/2,i,i1,i2,i9,Mno2,dotrewrite-no2-2)
	#call replace(p5.p9,-i5/2+i6/2-i9/2,i,i5,i6,i9,Mno2,dotrewrite-no2-3)
	#call replace(p3.p5,i11/2+i14-i3/2-i4/2,i,i11,i14,i3,i4,Mno2,dotrewrite-no2-4)
	#call replace(Q.p9,-`Q2'/2-i1/2+i12+i8/2,i,i1,i12,i8,Mno2,dotrewrite-no2-5)
	#call replace(p2.p5,`Q2'/2+i1/2-i13-i5/2+i6/2-i8/2-i9/2,i,i1,i13,i5,i6,i8,i9,Mno2,dotrewrite-no2-6)
	#call replace(p3.p9,`Q2'/2-i10/2-i11/2-i13-i14+i2/2+i3/2+i4/2-i5/2+i7/2-i8/2,i,i10,i11,i13,i14,i2,i3,i4,i5,i7,i8,Mno2,dotrewrite-no2-7)
#endif
#break
#case 911
* path: (9, 1, 8, 11)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p10.p + p3.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p7.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p11.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p8.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p5.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p9.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p11.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno2,dotrewrite-no2-0)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno2,dotrewrite-no2-1)
	#call replace(p5.p9,-i5/2+i6/2-i9/2,i,i5,i6,i9,Mno2,dotrewrite-no2-2)
	#call replace(p8.p11,i11/2-i7/2+i8/2,i,i11,i7,i8,Mno2,dotrewrite-no2-3)
	#call replace(Q.p9,-`Q2'/2-i1/2+i12+i8/2,i,i1,i12,i8,Mno2,dotrewrite-no2-4)
	#call replace(Q.p11,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno2,dotrewrite-no2-5)
	#call replace(p5.p8,-i1/2+i13-i4/2+i5/2+i8/2,i,i1,i13,i4,i5,i8,Mno2,dotrewrite-no2-6)
	#call replace(p8.p9,-`Q2'/2+i12-i2/2+i8/2+i9/2,i,i12,i2,i8,i9,Mno2,dotrewrite-no2-7)
	#call replace(p5.p11,`Q2'/2-i11/2-i14+i3/2-i5/2,i,i11,i14,i3,i5,Mno2,dotrewrite-no2-8)
	#call replace(p9.p11,-`Q2'-i1/2+i10/2+i11/2+i12+i13+i14-i2/2-i3/2-i4/2+i5-i6/2-i7/2+i8+i9/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i5,i6,i7,i8,i9,Mno2,dotrewrite-no2-9)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 2, 3, 4)
#case 18
* path: (1, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Mno2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p10.p;
	.sort:momrewrite-Mno2-7;
	if (count(Mno2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p9.p;
	.sort:momrewrite-Mno2-6;
	if (count(Mno2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p - p3.p;
	.sort:momrewrite-Mno2-5;
	if (count(Mno2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p - p3.p;
	.sort:momrewrite-Mno2-4;
	if (count(Mno2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno2-3;
	if (count(Mno2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno2-2;
	if (count(Mno2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p1.p;
	.sort:momrewrite-Mno2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno2()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno2,dotrewrite-no2-0)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mno2,dotrewrite-no2-1)
	#call replace(p2.p3,-i10/2+i2/2+i3/2,i,i10,i2,i3,Mno2,dotrewrite-no2-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno2,dotrewrite-no2-3)
	#call replace(p3.p4,-i11/2+i3/2+i4/2,i,i11,i3,i4,Mno2,dotrewrite-no2-4)
	#call replace(p1.p3,-`Q2'/2+i11/2+i13+i14-i4/2+i5/2-i7/2+i8/2,i,i11,i13,i14,i4,i5,i7,i8,Mno2,dotrewrite-no2-5)
	#call replace(p2.p4,-`Q2'/2-i1/2+i12+i13+i5/2-i6/2+i8/2+i9/2,i,i1,i12,i13,i5,i6,i8,i9,Mno2,dotrewrite-no2-6)
#endif
#break
#endswitch
#break
*--#] no2 : 
*--#[ no1 :
#case Mno1
#procedure SimpleDotno1()
if (count(Mno1,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id p2.p4^n? = i12^n;
	id Q.p2^n? = i13^n;
	id Q.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 18
* path: (1, 8)
#case 19
* path: (1, 8, 9)
#case 28
* path: (2, 1, 8)
#case 29
* path: (2, 9)
#case 44
* path: (4,)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p + p7.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p4.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p8.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p9.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p9.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno1,dotrewrite-no1-1)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno1,dotrewrite-no1-2)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-3)
	#call replace(p8.p9,-i7/2+i8/2+i9/2,i,i7,i8,i9,Mno1,dotrewrite-no1-4)
	#call replace(p2.p8,-i1/2+i11/2+i13-i2/2,i,i1,i11,i13,i2,Mno1,dotrewrite-no1-5)
	#call replace(p4.p9,-i10/2-i12+i3/2+i4/2,i,i10,i12,i3,i4,Mno1,dotrewrite-no1-6)
	#call replace(p4.p8,-i1/2+i11/2-i12+i13+i4/2-i6/2+i8/2,i,i1,i11,i12,i13,i4,i6,i8,Mno1,dotrewrite-no1-7)
#endif
#break
#case Q7
* path: (0, 4, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p + p7.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p10.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p10.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno1,dotrewrite-no1-0)
	#call replace(p4.p10,i10/2-i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-1)
	#call replace(p7.p10,i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-2)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-3)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-4)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno1,dotrewrite-no1-5)
	#call replace(p2.p7,-i1/2+i11/2+i13-i3/2+i9/2,i,i1,i11,i13,i3,i9,Mno1,dotrewrite-no1-6)
	#call replace(p4.p7,-i1/2+i10/2+i11/2+i13-i3/2-i6/2+i8/2,i,i1,i10,i11,i13,i3,i6,i8,Mno1,dotrewrite-no1-7)
#endif
#break
#case 110
* path: (1, 2, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p - p1.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p10.p + p3.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno1,dotrewrite-no1-0)
	#call replace(p1.p2,i1/2-i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-2)
	#call replace(p3.p10,-i10/2-i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-3)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-4)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-5)
	#call replace(p1.p3,i1/2-i11/2-i13+i14+i2/2+i7/2-i8/2-i9/2,i,i1,i11,i13,i14,i2,i7,i8,i9,Mno1,dotrewrite-no1-6)
	#call replace(p1.p10,`Q2'/2+i12-i14-i2/2-i5/2+i6/2-i7/2+i9/2,i,i12,i14,i2,i5,i6,i7,i9,Mno1,dotrewrite-no1-7)
#endif
#break
#case Q10
* path: (0, 4, 10)
#case 410
* path: (4, 10)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p + p7.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p10.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p10.p + p6.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno1,dotrewrite-no1-0)
	#call replace(p4.p10,i10/2-i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-1)
	#call replace(p6.p10,-i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-2)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-3)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-4)
	#call replace(Q.p6,-i1/2+i13-i4/2+i5/2+i8/2,i,i1,i13,i4,i5,i8,Mno1,dotrewrite-no1-5)
	#call replace(p2.p6,-i1/2+i11/2-i12+i13+i2/2,i,i1,i11,i12,i13,i2,Mno1,dotrewrite-no1-6)
	#call replace(p4.p6,-i1/2+i11/2+i13-i4/2-i6/2+i8/2,i,i1,i11,i13,i4,i6,i8,Mno1,dotrewrite-no1-7)
#endif
#break
#case 210
* path: (2, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p + p7.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p10.p + p3.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p10.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-0)
	#call replace(p3.p10,-i10/2-i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-1)
	#call replace(p7.p10,i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-2)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-3)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-4)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno1,dotrewrite-no1-5)
	#call replace(p2.p7,-i1/2+i11/2+i13-i3/2+i9/2,i,i1,i11,i13,i3,i9,Mno1,dotrewrite-no1-6)
	#call replace(p3.p7,-i1/2+i11/2+i13-i3/2-i7/2+i8/2,i,i1,i11,i13,i3,i7,i8,Mno1,dotrewrite-no1-7)
#endif
#break
#case Q9
* path: (0, 4, 3, 9)
#case Q8
* path: (0, 4, 3, 9, 8)
#case 38
* path: (3, 9, 8)
#case 49
* path: (4, 3, 9)
#case 48
* path: (4, 3, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p + p7.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p8.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p3.p - p9.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p9.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno1,dotrewrite-no1-1)
	#call replace(p3.p4,-i10/2+i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-2)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno1,dotrewrite-no1-3)
	#call replace(p3.p9,-i2/2+i3/2+i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-4)
	#call replace(p8.p9,-i7/2+i8/2+i9/2,i,i7,i8,i9,Mno1,dotrewrite-no1-5)
	#call replace(p4.p9,-i10/2-i12+i3/2+i4/2,i,i10,i12,i3,i4,Mno1,dotrewrite-no1-6)
	#call replace(p3.p8,-i1/2+i11/2+i13-i2/2-i7/2+i8/2+i9/2,i,i1,i11,i13,i2,i7,i8,i9,Mno1,dotrewrite-no1-7)
	#call replace(p4.p8,-i1/2+i11/2-i12+i13+i4/2-i6/2+i8/2,i,i1,i11,i12,i13,i4,i6,i8,Mno1,dotrewrite-no1-8)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p4.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p - p1.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id p2.p5 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno1,dotrewrite-no1-1)
	#call replace(p1.p2,i1/2-i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-2)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-3)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno1,dotrewrite-no1-4)
	#call replace(p3.p5,i10/2+i14-i3/2-i4/2,i,i10,i14,i3,i4,Mno1,dotrewrite-no1-5)
	#call replace(p1.p5,i11/2-i12+i13+i5/2-i6/2,i,i11,i12,i13,i5,i6,Mno1,dotrewrite-no1-6)
	#call replace(p1.p3,i1/2-i11/2-i13+i14+i2/2+i7/2-i8/2-i9/2,i,i1,i11,i13,i14,i2,i7,i8,i9,Mno1,dotrewrite-no1-7)
#endif
#break
#case 911
* path: (9, 2, 11)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p + p7.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p4.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p9.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id p2.p5 = -i12 + i13;
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno1,dotrewrite-no1-2)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-3)
	#call replace(p2.p11,-i1/2+i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-4)
	#call replace(p5.p11,-i11/2-i5/2+i6/2,i,i11,i5,i6,Mno1,dotrewrite-no1-5)
	#call replace(Q.p11,-`Q2'/2-i1/2+i13+i8/2,i,i1,i13,i8,Mno1,dotrewrite-no1-6)
	#call replace(p5.p9,i10/2+i12-i13+i14-i3/2-i4/2,i,i10,i12,i13,i14,i3,i4,Mno1,dotrewrite-no1-7)
	#call replace(p9.p11,i13-i14-i2/2+i3/2-i7/2+i8/2,i,i13,i14,i2,i3,i7,i8,Mno1,dotrewrite-no1-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p4.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p - p1.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p9.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id p2.p5 = -i12 + i13;
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno1,dotrewrite-no1-2)
	#call replace(p1.p2,i1/2-i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-3)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno1,dotrewrite-no1-4)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-5)
	#call replace(p1.p5,i11/2-i12+i13+i5/2-i6/2,i,i11,i12,i13,i5,i6,Mno1,dotrewrite-no1-6)
	#call replace(p1.p9,-i13+i14+i7/2-i8/2-i9/2,i,i13,i14,i7,i8,i9,Mno1,dotrewrite-no1-7)
	#call replace(p5.p9,i10/2+i12-i13+i14-i3/2-i4/2,i,i10,i12,i13,i14,i3,i4,Mno1,dotrewrite-no1-8)
#endif
#break
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 211
* path: (2, 11)
#case 33
* path: (3,)
#case 311
* path: (3, 2, 11)
#case 411
* path: (4, 5, 11)
#case 1111
* path: (11,)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p + p7.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p4.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id p2.p5 = -i12 + i13;
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-1)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno1,dotrewrite-no1-2)
	#call replace(p2.p11,-i1/2+i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-3)
	#call replace(p5.p11,-i11/2-i5/2+i6/2,i,i11,i5,i6,Mno1,dotrewrite-no1-4)
	#call replace(p3.p5,i10/2+i14-i3/2-i4/2,i,i10,i14,i3,i4,Mno1,dotrewrite-no1-5)
	#call replace(Q.p11,-`Q2'/2-i1/2+i13+i8/2,i,i1,i13,i8,Mno1,dotrewrite-no1-6)
	#call replace(p3.p11,-i1/2+i11/2+i13-i14+i3/2-i7/2+i8/2,i,i1,i11,i13,i14,i3,i7,i8,Mno1,dotrewrite-no1-7)
#endif
#break
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p3.p + p10.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p9.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p10.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p9.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-1)
	#call replace(p7.p9,-i7/2+i8/2-i9/2,i,i7,i8,i9,Mno1,dotrewrite-no1-2)
	#call replace(p7.p10,i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-3)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-4)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno1,dotrewrite-no1-6)
	#call replace(p2.p7,-i1/2+i11/2+i13-i3/2+i9/2,i,i1,i11,i13,i3,i9,Mno1,dotrewrite-no1-7)
	#call replace(p9.p10,-i10/2-i12+i2/2+i4/2-i9/2,i,i10,i12,i2,i4,i9,Mno1,dotrewrite-no1-8)
#endif
#break
#case 26
* path: (2, 11, 6)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p + p7.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p10.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p11.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p10.p + p6.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(p6.p10,-i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-0)
	#call replace(p2.p11,-i1/2+i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-1)
	#call replace(p6.p11,i11/2-i5/2+i6/2,i,i11,i5,i6,Mno1,dotrewrite-no1-2)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-3)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-4)
	#call replace(Q.p11,-`Q2'/2-i1/2+i13+i8/2,i,i1,i13,i8,Mno1,dotrewrite-no1-5)
	#call replace(Q.p6,-i1/2+i13-i4/2+i5/2+i8/2,i,i1,i13,i4,i5,i8,Mno1,dotrewrite-no1-6)
	#call replace(p2.p6,-i1/2+i11/2-i12+i13+i2/2,i,i1,i11,i12,i13,i2,Mno1,dotrewrite-no1-7)
	#call replace(p10.p11,-`Q2'/2+i14-i3/2+i5/2-i6/2+i7/2,i,i14,i3,i5,i6,i7,Mno1,dotrewrite-no1-8)
#endif
#break
#case Q11
* path: (0, 1, 11)
#case Q5
* path: (0, 1, 11, 5)
#case 111
* path: (1, 11)
#case 15
* path: (1, 11, 5)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p3.p + p4.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p9.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p + p11.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno1,dotrewrite-no1-1)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno1,dotrewrite-no1-2)
	#call replace(p1.p11,-i1/2-i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-3)
	#call replace(p5.p11,-i11/2-i5/2+i6/2,i,i11,i5,i6,Mno1,dotrewrite-no1-4)
	#call replace(Q.p11,-`Q2'/2-i1/2+i13+i8/2,i,i1,i13,i8,Mno1,dotrewrite-no1-5)
	#call replace(p1.p5,i11/2-i12+i13+i5/2-i6/2,i,i11,i12,i13,i5,i6,Mno1,dotrewrite-no1-6)
	#call replace(p1.p9,-i13+i14+i7/2-i8/2-i9/2,i,i13,i14,i7,i8,i9,Mno1,dotrewrite-no1-7)
	#call replace(p5.p9,i10/2+i12-i13+i14-i3/2-i4/2,i,i10,i12,i13,i14,i3,i4,Mno1,dotrewrite-no1-8)
	#call replace(p9.p11,i13-i14-i2/2+i3/2-i7/2+i8/2,i,i13,i14,i2,i3,i7,i8,Mno1,dotrewrite-no1-9)
#endif
#break
#case Q4
* path: (0, 1, 2, 3, 4)
#case 14
* path: (1, 2, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p10.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p11.p + p5.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p - p1.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno1,dotrewrite-no1-0)
	#call replace(p1.p2,i1/2-i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno1,dotrewrite-no1-3)
	#call replace(p3.p4,-i10/2+i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-4)
	#call replace(p1.p3,i1/2-i11/2-i13+i14+i2/2+i7/2-i8/2-i9/2,i,i1,i11,i13,i14,i2,i7,i8,i9,Mno1,dotrewrite-no1-5)
	#call replace(p1.p4,`Q2'/2+i1/2-i11/2+i12-i13-i5/2+i6/2-i8/2,i,i1,i11,i12,i13,i5,i6,i8,Mno1,dotrewrite-no1-6)
#endif
#break
#case 16
* path: (1, 11, 6)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p10.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p - p6.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p + p11.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p11.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno1,dotrewrite-no1-0)
	#call replace(p6.p7,-i10/2+i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-1)
	#call replace(p1.p11,-i1/2-i11/2+i2/2,i,i1,i11,i2,Mno1,dotrewrite-no1-2)
	#call replace(p6.p11,i11/2-i5/2+i6/2,i,i11,i5,i6,Mno1,dotrewrite-no1-3)
	#call replace(Q.p11,-`Q2'/2-i1/2+i13+i8/2,i,i1,i13,i8,Mno1,dotrewrite-no1-4)
	#call replace(Q.p6,-i1/2+i13-i4/2+i5/2+i8/2,i,i1,i13,i4,i5,i8,Mno1,dotrewrite-no1-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno1,dotrewrite-no1-6)
	#call replace(p7.p11,-`Q2'/2+i11/2+i14-i3/2+i7/2,i,i11,i14,i3,i7,Mno1,dotrewrite-no1-7)
	#call replace(p1.p6,-i1/2-i12+i13+i2/2+i5/2-i6/2,i,i1,i12,i13,i2,i5,i6,Mno1,dotrewrite-no1-8)
	#call replace(p1.p7,`Q2'/2-i1/2+i13-i14-i7/2+i9/2,i,i1,i13,i14,i7,i9,Mno1,dotrewrite-no1-9)
#endif
#break
#case 17
* path: (1, 8, 7)
#case 110
* path: (1, 8, 7, 10)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p3.p + p10.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p9.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p8.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p10.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p7.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno1,dotrewrite-no1-0)
	#call replace(p7.p8,i7/2+i8/2-i9/2,i,i7,i8,i9,Mno1,dotrewrite-no1-1)
	#call replace(p7.p10,i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-2)
	#call replace(p2.p8,-i1/2+i11/2+i13-i2/2,i,i1,i11,i13,i2,Mno1,dotrewrite-no1-3)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-4)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno1,dotrewrite-no1-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno1,dotrewrite-no1-6)
	#call replace(p2.p7,-i1/2+i11/2+i13-i3/2+i9/2,i,i1,i11,i13,i3,i9,Mno1,dotrewrite-no1-7)
	#call replace(p8.p10,-i12+i2/2+i4/2-i6/2+i7/2-i9/2,i,i12,i2,i4,i6,i7,i9,Mno1,dotrewrite-no1-8)
#endif
#break
#case 39
* path: (3, 9)
#case 37
* path: (3, 9, 7)
#case 310
* path: (3, 10)
#case 910
* path: (9, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p11.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p3.p - p9.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p10.p + p3.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p10.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p9.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	if (count(Mno1,1)) id Q.p9 = -i13 + i14;
	#call replace(p3.p9,-i2/2+i3/2+i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-1)
	#call replace(p7.p9,-i7/2+i8/2-i9/2,i,i7,i8,i9,Mno1,dotrewrite-no1-2)
	#call replace(p3.p10,-i10/2-i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-3)
	#call replace(p7.p10,i10/2-i6/2+i7/2,i,i10,i6,i7,Mno1,dotrewrite-no1-4)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno1,dotrewrite-no1-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno1,dotrewrite-no1-6)
	#call replace(p9.p10,-i10/2-i12+i2/2+i4/2-i9/2,i,i10,i12,i2,i4,i9,Mno1,dotrewrite-no1-7)
	#call replace(p3.p7,-i1/2+i11/2+i13-i3/2-i7/2+i8/2,i,i1,i11,i13,i3,i7,i8,Mno1,dotrewrite-no1-8)
#endif
#break
#default
#case Q3
* path: (0, 4, 3)
#case Q2
* path: (0, 4, 3, 2)
#case 24
* path: (2, 3, 4)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Mno1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p6.p;
	.sort:momrewrite-Mno1-7;
	if (count(Mno1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p + p7.p;
	.sort:momrewrite-Mno1-6;
	if (count(Mno1,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p + p8.p;
	.sort:momrewrite-Mno1-5;
	if (count(Mno1,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p8.p;
	.sort:momrewrite-Mno1-4;
	if (count(Mno1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno1-3;
	if (count(Mno1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno1-2;
	if (count(Mno1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mno1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno1()
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno1,dotrewrite-no1-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno1,dotrewrite-no1-1)
	#call replace(p3.p4,-i10/2+i3/2+i4/2,i,i10,i3,i4,Mno1,dotrewrite-no1-2)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno1,dotrewrite-no1-3)
	#call replace(p2.p8,-i1/2+i11/2+i13-i2/2,i,i1,i11,i13,i2,Mno1,dotrewrite-no1-4)
	#call replace(p3.p8,-i1/2+i11/2+i13-i2/2-i7/2+i8/2+i9/2,i,i1,i11,i13,i2,i7,i8,i9,Mno1,dotrewrite-no1-5)
	#call replace(p4.p8,-i1/2+i11/2-i12+i13+i4/2-i6/2+i8/2,i,i1,i11,i12,i13,i4,i6,i8,Mno1,dotrewrite-no1-6)
#endif
#break
#endswitch
#break
*--#] no1 : 
*--#[ haha :
#case Mhaha
#procedure SimpleDothaha()
if (count(Mhaha,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p2^n? = i12^n;
	id Q.p5^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q11
* path: (0, 1, 7, 11)
#case 111
* path: (1, 7, 11)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p - p11.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p7.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p11.p - p7.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mhaha,dotrewrite-haha-1)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-2)
	#call replace(Q.p11,-`Q2'+i12-i13,i,i12,i13,Mhaha,dotrewrite-haha-3)
	#call replace(p7.p11,i11/2+i7/2-i8/2,i,i11,i7,i8,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p7,-`Q2'/2-i1/2+i12+i6/2,i,i1,i12,i6,Mhaha,dotrewrite-haha-5)
	#call replace(p4.p7,-i12-i14+i2/2+i3/2-i9/2,i,i12,i14,i2,i3,i9,Mhaha,dotrewrite-haha-6)
	#call replace(p1.p11,-`Q2'/2-i13+i2/2-i5/2-i7/2+i8/2,i,i13,i2,i5,i7,i8,Mhaha,dotrewrite-haha-7)
	#call replace(p4.p11,`Q2'/2+i10/2-i12+i2/2-i5/2-i9/2,i,i10,i12,i2,i5,i9,Mhaha,dotrewrite-haha-8)
#endif
#break
#case 110
* path: (1, 2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - Q.p + p3.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p11.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p10.p - p9.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mhaha,dotrewrite-haha-2)
	#call replace(p9.p10,-i10/2+i11/2-i9/2,i,i10,i11,i9,Mhaha,dotrewrite-haha-3)
	#call replace(Q.p9,`Q2'/2-i12+i3/2-i4/2,i,i12,i3,i4,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p10,`Q2'/2+i13-i3/2+i4/2,i,i13,i3,i4,Mhaha,dotrewrite-haha-5)
	#call replace(p1.p9,`Q2'/2+i14-i2/2-i6/2+i7/2,i,i14,i2,i6,i7,Mhaha,dotrewrite-haha-6)
	#call replace(p1.p10,i13-i14+i5/2+i6/2-i8/2,i,i13,i14,i5,i6,i8,Mhaha,dotrewrite-haha-7)
	#call replace(p2.p10,`Q2'/2-i11/2+i13-i3/2+i5/2+i9/2,i,i11,i13,i3,i5,i9,Mhaha,dotrewrite-haha-8)
#endif
#break
#case 28
* path: (2, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p8.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p - p11.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p7.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p8.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mhaha,dotrewrite-haha-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-1)
	#call replace(p7.p8,i11/2-i7/2-i8/2,i,i11,i7,i8,Mhaha,dotrewrite-haha-2)
	#call replace(p2.p4,-i12+i2/2+i3/2-i9/2,i,i12,i2,i3,i9,Mhaha,dotrewrite-haha-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i12+i6/2,i,i1,i12,i6,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p8,-`Q2'/2+i1/2-i13-i6/2,i,i1,i13,i6,Mhaha,dotrewrite-haha-5)
	#call replace(p4.p7,-i12-i14+i2/2+i3/2-i9/2,i,i12,i14,i2,i3,i9,Mhaha,dotrewrite-haha-6)
	#call replace(p4.p8,`Q2'/2+i10/2+i14-i3/2-i5/2,i,i10,i14,i3,i5,Mhaha,dotrewrite-haha-7)
	#call replace(p2.p8,-`Q2'/2+i1/2+i11/2-i13-i5/2-i7/2,i,i1,i11,i13,i5,i7,Mhaha,dotrewrite-haha-8)
#endif
#break
#case 110
* path: (1, 6, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p11.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p9.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p + Q.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p10.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p11.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(p5.p10,i10/2-i4/2+i5/2,i,i10,i4,i5,Mhaha,dotrewrite-haha-1)
	#call replace(Q.p11,-`Q2'+i12-i13,i,i12,i13,Mhaha,dotrewrite-haha-2)
	#call replace(p10.p11,-i10/2-i11/2+i9/2,i,i10,i11,i9,Mhaha,dotrewrite-haha-3)
	#call replace(p1.p5,i13+i5/2+i6/2-i8/2,i,i13,i5,i6,i8,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p10,`Q2'/2+i13-i3/2+i4/2,i,i13,i3,i4,Mhaha,dotrewrite-haha-5)
	#call replace(p1.p10,i13-i14+i5/2+i6/2-i8/2,i,i13,i14,i5,i6,i8,Mhaha,dotrewrite-haha-6)
	#call replace(p5.p11,`Q2'/2-i11/2-i12+i2/2-i5/2,i,i11,i12,i2,i5,Mhaha,dotrewrite-haha-7)
	#call replace(p1.p11,-`Q2'/2-i13+i2/2-i5/2-i7/2+i8/2,i,i13,i2,i5,i7,i8,Mhaha,dotrewrite-haha-8)
#endif
#break
#case 710
* path: (7, 11, 10)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p8.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - Q.p + p3.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p7.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p11.p - p7.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p11.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-0)
	#call replace(Q.p11,-`Q2'+i12-i13,i,i12,i13,Mhaha,dotrewrite-haha-1)
	#call replace(p7.p11,i11/2+i7/2-i8/2,i,i11,i7,i8,Mhaha,dotrewrite-haha-2)
	#call replace(p10.p11,-i10/2-i11/2+i9/2,i,i10,i11,i9,Mhaha,dotrewrite-haha-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i12+i6/2,i,i1,i12,i6,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p10,`Q2'/2+i13-i3/2+i4/2,i,i13,i3,i4,Mhaha,dotrewrite-haha-5)
	#call replace(p2.p11,-`Q2'/2+i11/2-i13+i2/2-i5/2,i,i11,i13,i2,i5,Mhaha,dotrewrite-haha-6)
	#call replace(p2.p10,`Q2'/2-i11/2+i13-i3/2+i5/2+i9/2,i,i11,i13,i3,i5,i9,Mhaha,dotrewrite-haha-7)
	#call replace(p7.p10,`Q2'/2-i11/2+i14-i3/2-i6/2+i8/2+i9/2,i,i11,i14,i3,i6,i8,i9,Mhaha,dotrewrite-haha-8)
#endif
#break
#case 27
* path: (2, 7)
#case 211
* path: (2, 7, 11)
#case 79
* path: (7, 2, 9)
#case 711
* path: (7, 11)
#case 1111
* path: (11,)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p8.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - Q.p + p3.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p7.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p11.p - p9.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p11.p - p7.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-0)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mhaha,dotrewrite-haha-1)
	#call replace(Q.p11,-`Q2'+i12-i13,i,i12,i13,Mhaha,dotrewrite-haha-2)
	#call replace(p7.p11,i11/2+i7/2-i8/2,i,i11,i7,i8,Mhaha,dotrewrite-haha-3)
	#call replace(p9.p11,i10/2-i11/2-i9/2,i,i10,i11,i9,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p7,-`Q2'/2-i1/2+i12+i6/2,i,i1,i12,i6,Mhaha,dotrewrite-haha-5)
	#call replace(Q.p9,`Q2'/2-i12+i3/2-i4/2,i,i12,i3,i4,Mhaha,dotrewrite-haha-6)
	#call replace(p2.p11,-`Q2'/2+i11/2-i13+i2/2-i5/2,i,i11,i13,i2,i5,Mhaha,dotrewrite-haha-7)
	#call replace(p7.p9,-`Q2'/2-i14+i3/2+i6/2-i7/2-i9/2,i,i14,i3,i6,i7,i9,Mhaha,dotrewrite-haha-8)
#endif
#break
#case Q9
* path: (0, 1, 2, 9)
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - Q.p + p3.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p11.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p11.p - p9.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mhaha,dotrewrite-haha-2)
	#call replace(Q.p11,-`Q2'+i12-i13,i,i12,i13,Mhaha,dotrewrite-haha-3)
	#call replace(p9.p11,i10/2-i11/2-i9/2,i,i10,i11,i9,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p9,`Q2'/2-i12+i3/2-i4/2,i,i12,i3,i4,Mhaha,dotrewrite-haha-5)
	#call replace(p1.p9,`Q2'/2+i14-i2/2-i6/2+i7/2,i,i14,i2,i6,i7,Mhaha,dotrewrite-haha-6)
	#call replace(p2.p11,-`Q2'/2+i11/2-i13+i2/2-i5/2,i,i11,i13,i2,i5,Mhaha,dotrewrite-haha-7)
	#call replace(p1.p11,-`Q2'/2-i13+i2/2-i5/2-i7/2+i8/2,i,i13,i2,i5,i7,i8,Mhaha,dotrewrite-haha-8)
#endif
#break
#case 18
* path: (1, 6, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p + p10.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p - p11.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p8.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p7.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mhaha,dotrewrite-haha-1)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-2)
	#call replace(p7.p8,i11/2-i7/2-i8/2,i,i11,i7,i8,Mhaha,dotrewrite-haha-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i12+i6/2,i,i1,i12,i6,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p8,-`Q2'/2+i1/2-i13-i6/2,i,i1,i13,i6,Mhaha,dotrewrite-haha-5)
	#call replace(p4.p7,-i12-i14+i2/2+i3/2-i9/2,i,i12,i14,i2,i3,i9,Mhaha,dotrewrite-haha-6)
	#call replace(p1.p8,-`Q2'/2+i1/2-i13-i5/2+i8/2,i,i1,i13,i5,i8,Mhaha,dotrewrite-haha-7)
	#call replace(p4.p8,`Q2'/2+i10/2+i14-i3/2-i5/2,i,i10,i14,i3,i5,Mhaha,dotrewrite-haha-8)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p11.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p9.p - p10.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p + p5.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - Q.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mhaha,dotrewrite-haha-2)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mhaha,dotrewrite-haha-3)
	#call replace(p1.p3,`Q2'/2+i1/2+i14-i6/2,i,i1,i14,i6,Mhaha,dotrewrite-haha-4)
	#call replace(p1.p5,i13+i5/2+i6/2-i8/2,i,i13,i5,i6,i8,Mhaha,dotrewrite-haha-5)
	#call replace(p3.p5,-i10/2+i13+i4/2+i5/2,i,i10,i13,i4,i5,Mhaha,dotrewrite-haha-6)
	#call replace(p2.p5,`Q2'/2-i11/2-i12+i13+i2/2+i5/2,i,i11,i12,i13,i2,i5,Mhaha,dotrewrite-haha-7)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p11.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p9.p - p10.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p - p4.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p7.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mhaha,dotrewrite-haha-1)
	#call replace(p4.p5,-i10/2+i4/2+i5/2,i,i10,i4,i5,Mhaha,dotrewrite-haha-2)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-3)
	#call replace(p1.p5,i13+i5/2+i6/2-i8/2,i,i13,i5,i6,i8,Mhaha,dotrewrite-haha-4)
	#call replace(Q.p7,-`Q2'/2-i1/2+i12+i6/2,i,i1,i12,i6,Mhaha,dotrewrite-haha-5)
	#call replace(p4.p7,-i12-i14+i2/2+i3/2-i9/2,i,i12,i14,i2,i3,i9,Mhaha,dotrewrite-haha-6)
	#call replace(p5.p7,`Q2'/2-i11/2-i12+i2/2-i6/2+i8/2,i,i11,i12,i2,i6,i8,Mhaha,dotrewrite-haha-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 3, 4)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Mhaha,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p11.p;
	.sort:momrewrite-Mhaha-7;
	if (count(Mhaha,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p9.p - p10.p;
	.sort:momrewrite-Mhaha-6;
	if (count(Mhaha,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p3.p;
	.sort:momrewrite-Mhaha-5;
	if (count(Mhaha,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p - p4.p;
	.sort:momrewrite-Mhaha-4;
	if (count(Mhaha,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mhaha-3;
	if (count(Mhaha,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mhaha-2;
	if (count(Mhaha,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mhaha-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDothaha()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mhaha,dotrewrite-haha-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mhaha,dotrewrite-haha-1)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mhaha,dotrewrite-haha-2)
	#call replace(p4.p5,-i10/2+i4/2+i5/2,i,i10,i4,i5,Mhaha,dotrewrite-haha-3)
	#call replace(p2.p4,-i12+i2/2+i3/2-i9/2,i,i12,i2,i3,i9,Mhaha,dotrewrite-haha-4)
	#call replace(p1.p5,i13+i5/2+i6/2-i8/2,i,i13,i5,i6,i8,Mhaha,dotrewrite-haha-5)
	#call replace(p2.p5,`Q2'/2-i11/2-i12+i13+i2/2+i5/2,i,i11,i12,i13,i2,i5,Mhaha,dotrewrite-haha-6)
#endif
#break
#endswitch
#break
*--#] haha : 
*--#[ la4 :
#case Mla4
#procedure SimpleDotla4()
if (count(Mla4,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id p3.p7^n? = i12^n;
	id p4.p5^n? = i13^n;
	id p4.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 6)
#case 39
* path: (3, 6, 9)
#case 310
* path: (3, 6, 10)
#case 46
* path: (4, 3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p6.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p6.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mla4,dotrewrite-la4-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mla4,dotrewrite-la4-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mla4,dotrewrite-la4-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mla4,dotrewrite-la4-3)
	#call replace(Q.p6,i10/2+i3/2-i5/2-i9/2,i,i10,i3,i5,i9,Mla4,dotrewrite-la4-4)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Mla4,dotrewrite-la4-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-6)
	#call replace(p6.p7,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Mla4,dotrewrite-la4-7)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 110
* path: (1, 3, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p6.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p6.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	if (count(Mla4,1)) id p1.p7 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mla4,dotrewrite-la4-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mla4,dotrewrite-la4-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mla4,dotrewrite-la4-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mla4,dotrewrite-la4-4)
	#call replace(Q.p6,i10/2+i3/2-i5/2-i9/2,i,i10,i3,i5,i9,Mla4,dotrewrite-la4-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-6)
	#call replace(p6.p7,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Mla4,dotrewrite-la4-7)
	#call replace(p1.p6,i1/2-i13-i4/2-i5/2+i6/2,i,i1,i13,i4,i5,i6,Mla4,dotrewrite-la4-8)
#endif
#break
#case 110
* path: (1, 4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p4.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p9.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + Q.p - p10.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p9.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mla4,dotrewrite-la4-0)
	#call replace(p4.p9,-i2/2+i4/2+i9/2,i,i2,i4,i9,Mla4,dotrewrite-la4-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mla4,dotrewrite-la4-2)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mla4,dotrewrite-la4-3)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Mla4,dotrewrite-la4-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mla4,dotrewrite-la4-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-6)
	#call replace(p7.p9,-i10/2+i11/2-i12+i5/2-i8/2,i,i10,i11,i12,i5,i8,Mla4,dotrewrite-la4-7)
	#call replace(p4.p10,i1/2-i13-i2/2-i3/2+i9/2,i,i1,i13,i2,i3,i9,Mla4,dotrewrite-la4-8)
#endif
#break
#case 110
* path: (1, 2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = - p2.p + p9.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p9.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + Q.p - p10.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p9.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	if (count(Mla4,1)) id p1.p7 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mla4,dotrewrite-la4-1)
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mla4,dotrewrite-la4-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mla4,dotrewrite-la4-3)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mla4,dotrewrite-la4-4)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Mla4,dotrewrite-la4-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-6)
	#call replace(p1.p9,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Mla4,dotrewrite-la4-7)
	#call replace(p7.p9,-i10/2+i11/2-i12+i5/2-i8/2,i,i10,i11,i12,i5,i8,Mla4,dotrewrite-la4-8)
	#call replace(p1.p10,`Q2'/2+i1/2-i13-i2/2-i3/2-i5/2+i6/2,i,i1,i13,i2,i3,i5,i6,Mla4,dotrewrite-la4-9)
#endif
#break
#case 111
* path: (1, 2, 9, 10, 11)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p9.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p9.p - p2.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + Q.p - p10.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p9.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p7.p?!{p7,[P+p7],[P-p7],p3,p4} = + p11.p - p10.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mla4,dotrewrite-la4-0)
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mla4,dotrewrite-la4-1)
	#call replace(p2.p9,i2/2-i4/2+i9/2,i,i2,i4,i9,Mla4,dotrewrite-la4-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mla4,dotrewrite-la4-3)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Mla4,dotrewrite-la4-4)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mla4,dotrewrite-la4-5)
	#call replace(p10.p11,i10/2+i11/2-i7/2,i,i10,i11,i7,Mla4,dotrewrite-la4-6)
	#call replace(p2.p10,-i1/2+i10/2+i13+i2/2+i3/2-i6/2,i,i1,i10,i13,i2,i3,i6,Mla4,dotrewrite-la4-7)
	#call replace(p9.p11,i11/2-i12+i5/2-i6/2-i8/2+i9/2,i,i11,i12,i5,i6,i8,i9,Mla4,dotrewrite-la4-8)
	#call replace(p2.p11,-i1/2+i11/2-i12+i13-i14+i2/2+i3/2+i5/2-i6/2-i8/2,i,i1,i11,i12,i13,i14,i2,i3,i5,i6,i8,Mla4,dotrewrite-la4-9)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = - p2.p + p9.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p9.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	if (count(Mla4,1)) id p1.p7 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mla4,dotrewrite-la4-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mla4,dotrewrite-la4-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mla4,dotrewrite-la4-3)
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mla4,dotrewrite-la4-4)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mla4,dotrewrite-la4-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-6)
	#call replace(p1.p9,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Mla4,dotrewrite-la4-7)
	#call replace(p5.p9,`Q2'/2-i10/2-i3/2+i6/2,i,i10,i3,i6,Mla4,dotrewrite-la4-8)
	#call replace(p7.p9,-i10/2+i11/2-i12+i5/2-i8/2,i,i10,i11,i12,i5,i8,Mla4,dotrewrite-la4-9)
#endif
#break
#case Q8
* path: (0, 1, 3, 5, 8)
#case 18
* path: (1, 3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p7.p?!{p7,[P+p7],[P-p7],p3,p4} = + p5.p - p8.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mla4,dotrewrite-la4-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mla4,dotrewrite-la4-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mla4,dotrewrite-la4-2)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mla4,dotrewrite-la4-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mla4,dotrewrite-la4-4)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mla4,dotrewrite-la4-5)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mla4,dotrewrite-la4-6)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mla4,dotrewrite-la4-7)
	#call replace(p3.p8,-i12+i3/2+i5/2-i6/2,i,i12,i3,i5,i6,Mla4,dotrewrite-la4-8)
	#call replace(p1.p8,-i12+i13-i14+i3/2+i5/2-i6/2,i,i12,i13,i14,i3,i5,i6,Mla4,dotrewrite-la4-9)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 19
* path: (1, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p2.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p1.p - p4.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	if (count(Mla4,1)) id p1.p7 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mla4,dotrewrite-la4-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mla4,dotrewrite-la4-2)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mla4,dotrewrite-la4-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mla4,dotrewrite-la4-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mla4,dotrewrite-la4-5)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mla4,dotrewrite-la4-6)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-7)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 1, 3, 5, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 17
* path: (1, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	if (count(Mla4,1)) id p1.p7 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mla4,dotrewrite-la4-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mla4,dotrewrite-la4-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mla4,dotrewrite-la4-3)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mla4,dotrewrite-la4-4)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mla4,dotrewrite-la4-5)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mla4,dotrewrite-la4-6)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mla4,dotrewrite-la4-7)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-8)
#endif
#break
#default
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 39
* path: (3, 4, 9)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Mla4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mla4-7;
	if (count(Mla4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mla4-6;
	if (count(Mla4,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mla4-5;
	if (count(Mla4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mla4-4;
	if (count(Mla4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mla4-3;
	if (count(Mla4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mla4-2;
	if (count(Mla4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mla4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotla4()
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mla4,dotrewrite-la4-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mla4,dotrewrite-la4-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mla4,dotrewrite-la4-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mla4,dotrewrite-la4-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mla4,dotrewrite-la4-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mla4,dotrewrite-la4-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mla4,dotrewrite-la4-6)
#endif
#break
#endswitch
#break
*--#] la4 : 
*--#[ j1 :
#case Mj1
#procedure SimpleDotj1()
if (count(Mj1,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p7^n? = i13^n;
	id p1.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p5.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p4.p - p8.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-1)
	#call replace(p4.p5,i10/2-i4/2-i5/2,i,i10,i4,i5,Mj1,dotrewrite-j1-2)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj1,dotrewrite-j1-4)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj1,dotrewrite-j1-5)
	#call replace(p5.p8,i10/2-i4/2+i7/2-i9/2,i,i10,i4,i7,i9,Mj1,dotrewrite-j1-6)
	#call replace(Q.p8,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Mj1,dotrewrite-j1-7)
	#call replace(p3.p8,i1/2-i14-i3/2+i7/2-i8/2,i,i1,i14,i3,i7,i8,Mj1,dotrewrite-j1-8)
#endif
#break
#case Q8
* path: (0, 1, 4, 8)
#case 18
* path: (1, 4, 8)
#case 48
* path: (4, 8)
#case 410
* path: (4, 8, 10)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p4.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p10.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p4.p - p8.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p8.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-2)
	#call replace(p1.p10,i1/2+i10/2-i6/2,i,i1,i10,i6,Mj1,dotrewrite-j1-3)
	#call replace(p4.p10,i10/2+i4/2-i5/2,i,i10,i4,i5,Mj1,dotrewrite-j1-4)
	#call replace(p8.p10,i10/2+i8/2-i9/2,i,i10,i8,i9,Mj1,dotrewrite-j1-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj1,dotrewrite-j1-6)
	#call replace(p1.p8,i1/2-i14-i3/2+i4/2,i,i1,i14,i3,i4,Mj1,dotrewrite-j1-7)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-8)
	#call replace(Q.p8,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Mj1,dotrewrite-j1-9)
#endif
#break
#case Q2
* path: (0, 2)
#case Q10
* path: (0, 2, 10)
#case 22
* path: (2,)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p9.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p10.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p2.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	if (count(Mj1,1)) id p2.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj1,dotrewrite-j1-1)
	#call replace(p2.p10,-i10/2+i11/2-i2/2,i,i10,i11,i2,Mj1,dotrewrite-j1-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj1,dotrewrite-j1-3)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-5)
	#call replace(p3.p10,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Mj1,dotrewrite-j1-6)
	#call replace(p7.p10,i4/2-i5/2-i8/2+i9/2,i,i4,i5,i8,i9,Mj1,dotrewrite-j1-7)
#endif
#break
#case 78
* path: (7, 8)
#case 710
* path: (7, 8, 10)
#case 88
* path: (8,)
#case 810
* path: (8, 10)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p9.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p10.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p8.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p7.p8,i4/2-i7/2-i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-1)
	#call replace(p1.p10,i1/2+i10/2-i6/2,i,i1,i10,i6,Mj1,dotrewrite-j1-2)
	#call replace(p8.p10,i10/2+i8/2-i9/2,i,i10,i8,i9,Mj1,dotrewrite-j1-3)
	#call replace(p1.p8,i1/2-i14-i3/2+i4/2,i,i1,i14,i3,i4,Mj1,dotrewrite-j1-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-5)
	#call replace(p7.p10,i4/2-i5/2-i8/2+i9/2,i,i4,i5,i8,i9,Mj1,dotrewrite-j1-6)
	#call replace(Q.p8,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Mj1,dotrewrite-j1-7)
#endif
#break
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p7.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p7.p8,i4/2-i7/2-i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-1)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-2)
	#call replace(p8.p9,i10/2-i8/2-i9/2,i,i10,i8,i9,Mj1,dotrewrite-j1-3)
	#call replace(p1.p8,i1/2-i14-i3/2+i4/2,i,i1,i14,i3,i4,Mj1,dotrewrite-j1-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Mj1,dotrewrite-j1-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12+i13-i6/2,i,i11,i12,i13,i6,Mj1,dotrewrite-j1-6)
	#call replace(p1.p9,i10/2+i14+i3/2-i4/2-i6/2,i,i10,i14,i3,i4,i6,Mj1,dotrewrite-j1-7)
#endif
#break
#case Q6
* path: (0, 2, 11, 6)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p8.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p6.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	if (count(Mj1,1)) id p2.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj1,dotrewrite-j1-1)
	#call replace(Q.p6,`Q2'/2-i11/2+i6/2,i,i11,i6,Mj1,dotrewrite-j1-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj1,dotrewrite-j1-4)
	#call replace(p2.p6,`Q2'/2-i1/2+i10/2-i11/2,i,i1,i10,i11,Mj1,dotrewrite-j1-5)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-6)
	#call replace(p6.p7,i14-i4/2+i5/2+i8/2-i9/2,i,i14,i4,i5,i8,i9,Mj1,dotrewrite-j1-7)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p5.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p7.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-1)
	#call replace(p4.p5,i10/2-i4/2-i5/2,i,i10,i4,i5,Mj1,dotrewrite-j1-2)
	#call replace(p4.p7,i4/2+i7/2-i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-3)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj1,dotrewrite-j1-5)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj1,dotrewrite-j1-6)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#case 310
* path: (3, 1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p9.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p10.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p10.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(p1.p10,i1/2+i10/2-i6/2,i,i1,i10,i6,Mj1,dotrewrite-j1-2)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-3)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-4)
	#call replace(p3.p10,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Mj1,dotrewrite-j1-5)
	#call replace(p7.p10,i4/2-i5/2-i8/2+i9/2,i,i4,i5,i8,i9,Mj1,dotrewrite-j1-6)
#endif
#break
#case 49
* path: (4, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p8.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p7.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p7.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(p4.p7,i4/2+i7/2-i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-2)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj1,dotrewrite-j1-4)
	#call replace(p4.p9,i10/2-i5/2+i7/2-i8/2,i,i10,i5,i7,i8,Mj1,dotrewrite-j1-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12+i13-i6/2,i,i11,i12,i13,i6,Mj1,dotrewrite-j1-6)
	#call replace(p1.p9,i10/2+i14+i3/2-i4/2-i6/2,i,i10,i14,i3,i4,i6,Mj1,dotrewrite-j1-7)
#endif
#break
#case 25
* path: (2, 11, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p8.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p6.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	if (count(Mj1,1)) id p2.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj1,dotrewrite-j1-1)
	#call replace(Q.p6,`Q2'/2-i11/2+i6/2,i,i11,i6,Mj1,dotrewrite-j1-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-3)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-4)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj1,dotrewrite-j1-5)
	#call replace(p2.p6,`Q2'/2-i1/2+i10/2-i11/2,i,i1,i10,i11,Mj1,dotrewrite-j1-6)
	#call replace(p6.p7,i14-i4/2+i5/2+i8/2-i9/2,i,i14,i4,i5,i8,i9,Mj1,dotrewrite-j1-7)
	#call replace(p2.p5,-`Q2'/2-i10/2+i11/2+i12-i3/2+i4/2,i,i10,i11,i12,i3,i4,Mj1,dotrewrite-j1-8)
#endif
#break
#case Q9
* path: (0, 2, 10, 9)
#case 29
* path: (2, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p2.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p7.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	if (count(Mj1,1)) id p2.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj1,dotrewrite-j1-1)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-2)
	#call replace(p2.p10,-i10/2+i11/2-i2/2,i,i10,i11,i2,Mj1,dotrewrite-j1-3)
	#call replace(p9.p10,i10/2-i8/2+i9/2,i,i10,i8,i9,Mj1,dotrewrite-j1-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-5)
	#call replace(p7.p10,i4/2-i5/2-i8/2+i9/2,i,i4,i5,i8,i9,Mj1,dotrewrite-j1-6)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12+i13-i6/2,i,i11,i12,i13,i6,Mj1,dotrewrite-j1-7)
	#call replace(p2.p9,-`Q2'/2-i10/2+i11/2+i12+i13-i14-i3/2+i4/2,i,i10,i11,i12,i13,i14,i3,i4,Mj1,dotrewrite-j1-8)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p6.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p6.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(Q.p6,`Q2'/2-i11/2+i6/2,i,i11,i6,Mj1,dotrewrite-j1-2)
	#call replace(p1.p6,i1/2-i10/2+i6/2,i,i1,i10,i6,Mj1,dotrewrite-j1-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-4)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-5)
	#call replace(p6.p7,i14-i4/2+i5/2+i8/2-i9/2,i,i14,i4,i5,i8,i9,Mj1,dotrewrite-j1-6)
#endif
#break
#case 111
* path: (1, 2, 11)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p9.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p10.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p + p11.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p11.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i6/2,i,i11,i6,Mj1,dotrewrite-j1-2)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-3)
	#call replace(p1.p11,`Q2'/2+i10/2-i2/2-i6/2,i,i10,i2,i6,Mj1,dotrewrite-j1-4)
	#call replace(p3.p11,i12-i3/2+i5/2-i6/2,i,i12,i3,i5,i6,Mj1,dotrewrite-j1-5)
	#call replace(p7.p11,i13-i14+i4/2-i5/2-i8/2+i9/2,i,i13,i14,i4,i5,i8,i9,Mj1,dotrewrite-j1-6)
#endif
#break
#case 19
* path: (1, 2, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p7.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p10.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-1)
	#call replace(p1.p10,i1/2+i10/2-i6/2,i,i1,i10,i6,Mj1,dotrewrite-j1-2)
	#call replace(p9.p10,i10/2-i8/2+i9/2,i,i10,i8,i9,Mj1,dotrewrite-j1-3)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-4)
	#call replace(p7.p10,i4/2-i5/2-i8/2+i9/2,i,i4,i5,i8,i9,Mj1,dotrewrite-j1-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12+i13-i6/2,i,i11,i12,i13,i6,Mj1,dotrewrite-j1-6)
	#call replace(p1.p9,i10/2+i14+i3/2-i4/2-i6/2,i,i10,i14,i3,i4,i6,Mj1,dotrewrite-j1-7)
#endif
#break
#case Q11
* path: (0, 2, 11)
#case 211
* path: (2, 11)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p9.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p10.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p2.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p11.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	if (count(Mj1,1)) id p2.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj1,dotrewrite-j1-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i6/2,i,i11,i6,Mj1,dotrewrite-j1-2)
	#call replace(p2.p11,-i10/2+i11/2+i2/2,i,i10,i11,i2,Mj1,dotrewrite-j1-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj1,dotrewrite-j1-4)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-5)
	#call replace(p3.p11,i12-i3/2+i5/2-i6/2,i,i12,i3,i5,i6,Mj1,dotrewrite-j1-6)
	#call replace(p7.p11,i13-i14+i4/2-i5/2-i8/2+i9/2,i,i13,i14,i4,i5,i8,i9,Mj1,dotrewrite-j1-7)
#endif
#break
#case 19
* path: (1, 3, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p8.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p9.p - p5.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-2)
	#call replace(p5.p9,i5/2-i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-3)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj1,dotrewrite-j1-4)
	#call replace(p1.p5,i10/2+i3/2-i4/2-i6/2,i,i10,i3,i4,i6,Mj1,dotrewrite-j1-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12+i13-i6/2,i,i11,i12,i13,i6,Mj1,dotrewrite-j1-6)
	#call replace(p1.p9,i10/2+i14+i3/2-i4/2-i6/2,i,i10,i14,i3,i4,i6,Mj1,dotrewrite-j1-7)
	#call replace(p3.p9,i14+i3/2-i4/2+i5/2-i6/2-i7/2+i8/2,i,i14,i3,i4,i5,i6,i7,i8,Mj1,dotrewrite-j1-8)
#endif
#break
#case 28
* path: (2, 10, 8)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p9.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p2.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p8.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	if (count(Mj1,1)) id p2.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj1,dotrewrite-j1-1)
	#call replace(p7.p8,i4/2-i7/2-i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-2)
	#call replace(p2.p10,-i10/2+i11/2-i2/2,i,i10,i11,i2,Mj1,dotrewrite-j1-3)
	#call replace(p8.p10,i10/2+i8/2-i9/2,i,i10,i8,i9,Mj1,dotrewrite-j1-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj1,dotrewrite-j1-5)
	#call replace(p7.p10,i4/2-i5/2-i8/2+i9/2,i,i4,i5,i8,i9,Mj1,dotrewrite-j1-6)
	#call replace(Q.p8,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Mj1,dotrewrite-j1-7)
	#call replace(p2.p8,`Q2'/2-i12-i13+i14-i2/2+i3/2-i4/2,i,i12,i13,i14,i2,i3,i4,Mj1,dotrewrite-j1-8)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 24
* path: (2, 1, 4)
#case 27
* path: (2, 1, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p5.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p7.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(p4.p5,i10/2-i4/2-i5/2,i,i10,i4,i5,Mj1,dotrewrite-j1-2)
	#call replace(p4.p7,i4/2+i7/2-i8/2,i,i4,i7,i8,Mj1,dotrewrite-j1-3)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj1,dotrewrite-j1-5)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj1,dotrewrite-j1-6)
	#call replace(p1.p5,i10/2+i3/2-i4/2-i6/2,i,i10,i3,i4,i6,Mj1,dotrewrite-j1-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mj1,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj1-7;
	if (count(Mj1,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p8.p;
	.sort:momrewrite-Mj1-6;
	if (count(Mj1,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Mj1-5;
	if (count(Mj1,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj1-4;
	if (count(Mj1,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj1-3;
	if (count(Mj1,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj1-2;
	if (count(Mj1,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Mj1-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj1()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj1,dotrewrite-j1-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj1,dotrewrite-j1-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj1,dotrewrite-j1-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Mj1,dotrewrite-j1-3)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj1,dotrewrite-j1-4)
	#call replace(p1.p5,i10/2+i3/2-i4/2-i6/2,i,i10,i3,i4,i6,Mj1,dotrewrite-j1-5)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Mj1,dotrewrite-j1-6)
#endif
#break
#endswitch
#break
*--#] j1 : 
*--#[ j6 :
#case Mj6
#procedure SimpleDotj6()
if (count(Mj6,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p3.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p7.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj6,dotrewrite-j6-1)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mj6,dotrewrite-j6-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj6,dotrewrite-j6-3)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj6,dotrewrite-j6-4)
	#call replace(p4.p8,-i10/2+i13-i14+i2/2+i8/2,i,i10,i13,i14,i2,i8,Mj6,dotrewrite-j6-5)
	#call replace(p5.p8,i10/2-i13+i14-i2/2+i7/2-i9/2,i,i10,i13,i14,i2,i7,i9,Mj6,dotrewrite-j6-6)
#endif
#break
#case 19
* path: (1, 4, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p8} = + p1.p - p4.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p7.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p7.p - p9.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Mj6,dotrewrite-j6-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Mj6,dotrewrite-j6-3)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Mj6,dotrewrite-j6-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj6,dotrewrite-j6-5)
	#call replace(Q.p7,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj6,dotrewrite-j6-6)
	#call replace(Q.p9,i1/2+i11/2-i13-i2/2-i6/2,i,i1,i11,i13,i2,i6,Mj6,dotrewrite-j6-7)
	#call replace(p1.p9,i1/2+i10/2-i13-i2/2-i6/2+i7/2-i8/2,i,i1,i10,i13,i2,i6,i7,i8,Mj6,dotrewrite-j6-8)
	#call replace(p4.p9,i10/2-i13+i14-i2/2+i4/2-i5/2+i7/2-i8/2,i,i10,i13,i14,i2,i4,i5,i7,i8,Mj6,dotrewrite-j6-9)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p8} = + p1.p - p4.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p7.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p8.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Mj6,dotrewrite-j6-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Mj6,dotrewrite-j6-3)
	#call replace(p7.p8,i7/2+i8/2-i9/2,i,i7,i8,i9,Mj6,dotrewrite-j6-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj6,dotrewrite-j6-5)
	#call replace(Q.p7,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj6,dotrewrite-j6-6)
	#call replace(p1.p8,-i10/2+i13+i2/2+i8/2,i,i10,i13,i2,i8,Mj6,dotrewrite-j6-7)
	#call replace(p4.p8,-i10/2+i13-i14+i2/2+i8/2,i,i10,i13,i14,i2,i8,Mj6,dotrewrite-j6-8)
#endif
#break
#case 110
* path: (1, 2, 10)
#case 111
* path: (1, 2, 10, 11)
#case 310
* path: (3, 1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p11.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p11.p - p2.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p10.p - p2.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p11.p - p10.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p2.p10,i10/2+i2/2-i8/2,i,i10,i2,i8,Mj6,dotrewrite-j6-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i6/2,i,i11,i6,Mj6,dotrewrite-j6-2)
	#call replace(p2.p11,i11/2+i2/2-i7/2,i,i11,i2,i7,Mj6,dotrewrite-j6-3)
	#call replace(p10.p11,i10/2+i11/2-i9/2,i,i10,i11,i9,Mj6,dotrewrite-j6-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj6,dotrewrite-j6-5)
	#call replace(Q.p10,`Q2'/2-i1/2+i13+i2/2,i,i1,i13,i2,Mj6,dotrewrite-j6-6)
	#call replace(p3.p11,i12-i3/2+i5/2-i6/2,i,i12,i3,i5,i6,Mj6,dotrewrite-j6-7)
	#call replace(p3.p10,-i1/2+i12+i14-i3/2+i4/2,i,i1,i12,i14,i3,i4,Mj6,dotrewrite-j6-8)
#endif
#break
#case 19
* path: (1, 2, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p9.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p10.p - p2.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p2.p10,i10/2+i2/2-i8/2,i,i10,i2,i8,Mj6,dotrewrite-j6-1)
	#call replace(p9.p10,-i10/2+i11/2-i9/2,i,i10,i11,i9,Mj6,dotrewrite-j6-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj6,dotrewrite-j6-3)
	#call replace(p2.p9,-i10/2+i11/2-i7/2+i8/2,i,i10,i11,i7,i8,Mj6,dotrewrite-j6-4)
	#call replace(Q.p10,`Q2'/2-i1/2+i13+i2/2,i,i1,i13,i2,Mj6,dotrewrite-j6-5)
	#call replace(Q.p9,i1/2+i11/2-i13-i2/2-i6/2,i,i1,i11,i13,i2,i6,Mj6,dotrewrite-j6-6)
	#call replace(p3.p9,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Mj6,dotrewrite-j6-7)
	#call replace(p3.p10,-i1/2+i12+i14-i3/2+i4/2,i,i1,i12,i14,i3,i4,Mj6,dotrewrite-j6-8)
#endif
#break
#case 39
* path: (3, 4, 7, 9)
#case 49
* path: (4, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p7.p - p9.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Mj6,dotrewrite-j6-1)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Mj6,dotrewrite-j6-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj6,dotrewrite-j6-3)
	#call replace(Q.p7,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj6,dotrewrite-j6-4)
	#call replace(p3.p7,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Mj6,dotrewrite-j6-5)
	#call replace(Q.p9,i1/2+i11/2-i13-i2/2-i6/2,i,i1,i11,i13,i2,i6,Mj6,dotrewrite-j6-6)
	#call replace(p3.p9,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Mj6,dotrewrite-j6-7)
	#call replace(p4.p9,i10/2-i13+i14-i2/2+i4/2-i5/2+i7/2-i8/2,i,i10,i13,i14,i2,i4,i5,i7,i8,Mj6,dotrewrite-j6-8)
#endif
#break
#case Q5
* path: (0, 1, 4, 5)
#case 15
* path: (1, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p7.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p8} = + p1.p - p4.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-1)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mj6,dotrewrite-j6-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj6,dotrewrite-j6-3)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj6,dotrewrite-j6-4)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Mj6,dotrewrite-j6-5)
	#call replace(p1.p8,-i10/2+i13+i2/2+i8/2,i,i10,i13,i2,i8,Mj6,dotrewrite-j6-6)
	#call replace(p4.p8,-i10/2+i13-i14+i2/2+i8/2,i,i10,i13,i14,i2,i8,Mj6,dotrewrite-j6-7)
	#call replace(p5.p8,i10/2-i13+i14-i2/2+i7/2-i9/2,i,i10,i13,i14,i2,i7,i9,Mj6,dotrewrite-j6-8)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p7.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj6,dotrewrite-j6-2)
	#call replace(Q.p5,-`Q2'/2+i11/2+i12-i6/2,i,i11,i12,i6,Mj6,dotrewrite-j6-3)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Mj6,dotrewrite-j6-4)
	#call replace(p1.p8,-i10/2+i13+i2/2+i8/2,i,i10,i13,i2,i8,Mj6,dotrewrite-j6-5)
	#call replace(p5.p8,i10/2-i13+i14-i2/2+i7/2-i9/2,i,i10,i13,i14,i2,i7,i9,Mj6,dotrewrite-j6-6)
#endif
#break
#case 19
* path: (1, 2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p8.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p2.p8,i10/2-i2/2-i8/2,i,i10,i2,i8,Mj6,dotrewrite-j6-1)
	#call replace(p8.p9,i7/2-i8/2-i9/2,i,i7,i8,i9,Mj6,dotrewrite-j6-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj6,dotrewrite-j6-3)
	#call replace(p2.p9,-i10/2+i11/2-i7/2+i8/2,i,i10,i11,i7,i8,Mj6,dotrewrite-j6-4)
	#call replace(Q.p9,i1/2+i11/2-i13-i2/2-i6/2,i,i1,i11,i13,i2,i6,Mj6,dotrewrite-j6-5)
	#call replace(p3.p9,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Mj6,dotrewrite-j6-6)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 48
* path: (4, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p8.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Mj6,dotrewrite-j6-1)
	#call replace(p7.p8,i7/2+i8/2-i9/2,i,i7,i8,i9,Mj6,dotrewrite-j6-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj6,dotrewrite-j6-3)
	#call replace(Q.p7,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj6,dotrewrite-j6-4)
	#call replace(p3.p7,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Mj6,dotrewrite-j6-5)
	#call replace(p4.p8,-i10/2+i13-i14+i2/2+i8/2,i,i10,i13,i14,i2,i8,Mj6,dotrewrite-j6-6)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p7.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p6.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p6.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-1)
	#call replace(Q.p6,`Q2'/2-i11/2+i6/2,i,i11,i6,Mj6,dotrewrite-j6-2)
	#call replace(p1.p6,i1/2+i6/2-i7/2,i,i1,i6,i7,Mj6,dotrewrite-j6-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj6,dotrewrite-j6-4)
	#call replace(p1.p8,-i10/2+i13+i2/2+i8/2,i,i10,i13,i2,i8,Mj6,dotrewrite-j6-5)
	#call replace(p6.p8,-i10/2+i13+i2/2-i7/2+i9/2,i,i10,i13,i2,i7,i9,Mj6,dotrewrite-j6-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 38
* path: (3, 1, 2, 8)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mj6,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p9.p + p10.p;
	.sort:momrewrite-Mj6-7;
	if (count(Mj6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p2.p;
	.sort:momrewrite-Mj6-6;
	if (count(Mj6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Mj6-5;
	if (count(Mj6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj6-4;
	if (count(Mj6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj6-3;
	if (count(Mj6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p7.p;
	.sort:momrewrite-Mj6-2;
	if (count(Mj6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p8.p;
	.sort:momrewrite-Mj6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj6,dotrewrite-j6-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj6,dotrewrite-j6-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Mj6,dotrewrite-j6-2)
	#call replace(p7.p8,i7/2+i8/2-i9/2,i,i7,i8,i9,Mj6,dotrewrite-j6-3)
	#call replace(Q.p7,i1/2+i11/2-i2/2-i6/2,i,i1,i11,i2,i6,Mj6,dotrewrite-j6-4)
	#call replace(p3.p7,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Mj6,dotrewrite-j6-5)
	#call replace(p1.p8,-i10/2+i13+i2/2+i8/2,i,i10,i13,i2,i8,Mj6,dotrewrite-j6-6)
#endif
#break
#endswitch
#break
*--#] j6 : 
*--#[ j2 :
#case Mj2
#procedure SimpleDotj2()
if (count(Mj2,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p5^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 310
* path: (3, 4, 10)
#case 510
* path: (5, 3, 4, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-1)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 59
* path: (5, 6, 9)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-3)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Mj2,dotrewrite-j2-4)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-5)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 410
* path: (4, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p10.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p1.p10,i1/2+i10/2-i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-2)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-4)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-5)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p7.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-3)
	#call replace(p6.p7,-i6/2-i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-4)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Mj2,dotrewrite-j2-5)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-6)
	#call replace(p1.p7,-i1/2+i10/2+i14-i8/2,i,i1,i10,i14,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case Q9
* path: (0, 8, 7, 9)
#case 89
* path: (8, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p + p9.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p + p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-1)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-2)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-3)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-4)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-5)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-6)
	#call replace(p1.p7,-i1/2+i10/2+i14-i8/2,i,i1,i10,i14,i8,Mj2,dotrewrite-j2-7)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-8)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Mj2,dotrewrite-j2-9)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-1)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-2)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-4)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case Q6
* path: (0, 8, 5, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 5, 8)
#case 611
* path: (6, 5, 8, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-3)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-5)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Mj2,dotrewrite-j2-6)
	#call replace(p6.p8,i3/2-i5/2+i7/2-i9/2,i,i3,i5,i7,i9,Mj2,dotrewrite-j2-7)
#endif
#break
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id Q.p6 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-3)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-4)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-6)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-7)
	#call replace(p4.p6,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Mj2,dotrewrite-j2-8)
#endif
#break
#case Q11
* path: (0, 2, 11)
#case Q2
* path: (0, 11, 2)
#case 211
* path: (2, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p2.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj2,dotrewrite-j2-3)
	#call replace(p2.p11,-i10/2+i11/2+i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj2,dotrewrite-j2-5)
	#call replace(p3.p11,i12-i3/2-i8/2+i9/2,i,i12,i3,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#case 48
* path: (4, 3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-1)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-2)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-5)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-6)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Mj2,dotrewrite-j2-7)
#endif
#break
#case 710
* path: (7, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p10.p + p8.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p + p9.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p + p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-0)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-1)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-2)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-3)
	#call replace(p8.p10,i1/2-i10/2-i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-4)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-5)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-6)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-7)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-8)
	#call replace(p7.p10,-i1/2+i10/2+i14-i5/2+i7/2,i,i1,i10,i14,i5,i7,Mj2,dotrewrite-j2-9)
#endif
#break
#case Q10
* path: (0, 11, 10)
#case 1011
* path: (10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p11.p - p10.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-0)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj2,dotrewrite-j2-1)
	#call replace(p10.p11,i10/2+i11/2-i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-2)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-3)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Mj2,dotrewrite-j2-4)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p11,i12-i3/2-i8/2+i9/2,i,i12,i3,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#case 711
* path: (7, 8, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p + p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-2)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-3)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-4)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-5)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-6)
	#call replace(p1.p7,-i1/2+i10/2+i14-i8/2,i,i1,i10,i14,i8,Mj2,dotrewrite-j2-7)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Mj2,dotrewrite-j2-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p2.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p2.p10,-i10/2+i11/2-i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj2,dotrewrite-j2-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 29
* path: (2, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p2.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p2.p10,-i10/2+i11/2-i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-2)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-3)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-4)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-5)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-7)
	#call replace(p2.p9,-`Q2'/2-i10/2+i11/2+i12-i3/2+i4/2,i,i10,i11,i12,i3,i4,Mj2,dotrewrite-j2-8)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 26
* path: (2, 1, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-3)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-4)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Mj2,dotrewrite-j2-7)
	#call replace(p6.p8,i3/2-i5/2+i7/2-i9/2,i,i3,i5,i7,i9,Mj2,dotrewrite-j2-8)
#endif
#break
#case 810
* path: (8, 11, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p9.p + p10.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p10.p + p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-0)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-3)
	#call replace(p8.p10,i1/2-i10/2-i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 610
* path: (6, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id Q.p6 = i12 - i13;
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-1)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-2)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-3)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-4)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-5)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-6)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Mj2,dotrewrite-j2-7)
	#call replace(p6.p10,i1/2-i14-i4/2+i5/2-i7/2+i9/2,i,i1,i14,i4,i5,i7,i9,Mj2,dotrewrite-j2-8)
#endif
#break
#case 110
* path: (1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p10.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p1.p10,i1/2+i10/2-i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-3)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-4)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Mj2,dotrewrite-j2-5)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-6)
#endif
#break
#case 47
* path: (4, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-0)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-2)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Mj2,dotrewrite-j2-6)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-7)
	#call replace(p4.p7,-i1/2+i10/2+i14-i5/2+i6/2-i9/2,i,i1,i10,i14,i5,i6,i9,Mj2,dotrewrite-j2-8)
#endif
#break
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p10.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p10,i1/2+i10/2-i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-1)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-2)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-3)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Mj2,dotrewrite-j2-4)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-5)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-3)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-4)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Mj2,dotrewrite-j2-5)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-6)
#endif
#break
#case 911
* path: (9, 10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p11.p - p10.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-0)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj2,dotrewrite-j2-1)
	#call replace(p10.p11,i10/2+i11/2-i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-2)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-3)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-5)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj2,dotrewrite-j2-7)
	#call replace(p9.p11,-`Q2'/2+i11/2+i12-i3/2+i9/2,i,i11,i12,i3,i9,Mj2,dotrewrite-j2-8)
#endif
#break
#case Q4
* path: (0, 11, 10, 4)
#case 411
* path: (4, 10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p11.p - p10.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-0)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj2,dotrewrite-j2-1)
	#call replace(p10.p11,i10/2+i11/2-i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-4)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-5)
	#call replace(p5.p10,i14-i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj2,dotrewrite-j2-7)
	#call replace(p4.p11,`Q2'/2+i10/2-i12-i2/2+i3/2-i9/2,i,i10,i12,i2,i3,i9,Mj2,dotrewrite-j2-8)
#endif
#break
#case Q9
* path: (0, 1, 4, 9)
#case 19
* path: (1, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-4)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-5)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#case Q11
* path: (0, 11)
#case Q1
* path: (0, 11, 2, 1)
#case 111
* path: (1, 2, 11)
#case 311
* path: (3, 1, 2, 11)
#case 1111
* path: (11,)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p + p11.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj2,dotrewrite-j2-3)
	#call replace(p1.p11,`Q2'/2+i10/2-i2/2-i8/2,i,i10,i2,i8,Mj2,dotrewrite-j2-4)
	#call replace(p3.p11,i12-i3/2-i8/2+i9/2,i,i12,i3,i8,i9,Mj2,dotrewrite-j2-5)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj2,dotrewrite-j2-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 11, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 11, 8)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	if (count(Mj2,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-3)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-5)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj2,dotrewrite-j2-6)
	#call replace(p2.p8,`Q2'/2-i1/2+i10/2-i11/2,i,i1,i10,i11,Mj2,dotrewrite-j2-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-2)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj2,dotrewrite-j2-5)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj2,dotrewrite-j2-6)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Mj2,dotrewrite-j2-7)
#endif
#break
#case 27
* path: (2, 10, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p2.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-1)
	#call replace(p2.p10,-i10/2+i11/2-i2/2,i,i10,i11,i2,Mj2,dotrewrite-j2-2)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Mj2,dotrewrite-j2-3)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-4)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-5)
	#call replace(Q.p10,i1/2+i11/2-i2/2-i8/2,i,i1,i11,i2,i8,Mj2,dotrewrite-j2-6)
	#call replace(p7.p10,-i1/2+i10/2+i14-i5/2+i7/2,i,i1,i10,i14,i5,i7,Mj2,dotrewrite-j2-7)
	#call replace(p2.p7,-`Q2'/2+i1/2-i10/2+i11/2+i13-i14,i,i1,i10,i11,i13,i14,Mj2,dotrewrite-j2-8)
	#call replace(p2.p9,-`Q2'/2-i10/2+i11/2+i12-i3/2+i4/2,i,i10,i11,i12,i3,i4,Mj2,dotrewrite-j2-9)
#endif
#break
#case Q7
* path: (0, 1, 3, 5, 7)
#case 17
* path: (1, 3, 5, 7)
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-3)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-4)
	#call replace(p1.p7,-i1/2+i10/2+i14-i8/2,i,i1,i10,i14,i8,Mj2,dotrewrite-j2-5)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Mj2,dotrewrite-j2-6)
#endif
#break
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p2.p + p10.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-1)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj2,dotrewrite-j2-2)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj2,dotrewrite-j2-3)
	#call replace(p1.p7,-i1/2+i10/2+i14-i8/2,i,i1,i10,i14,i8,Mj2,dotrewrite-j2-4)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj2,dotrewrite-j2-5)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Mj2,dotrewrite-j2-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj2,dotrewrite-j2-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case Q3
* path: (0, 8, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 11, 8)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 511
* path: (5, 8, 11)
#case 88
* path: (8,)
#case 811
* path: (8, 11)
#if ( `MOMS' > 0 )
	if (count(Mj2,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Mj2-7;
	if (count(Mj2,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj2-6;
	if (count(Mj2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj2-5;
	if (count(Mj2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj2-4;
	if (count(Mj2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj2-3;
	if (count(Mj2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj2-2;
	if (count(Mj2,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj2,dotrewrite-j2-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj2,dotrewrite-j2-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj2,dotrewrite-j2-2)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj2,dotrewrite-j2-3)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Mj2,dotrewrite-j2-4)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj2,dotrewrite-j2-5)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj2,dotrewrite-j2-6)
#endif
#break
#endswitch
#break
*--#] j2 : 
*--#[ j5 :
#case Mj5
#procedure SimpleDotj5()
if (count(Mj5,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p7^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-1)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-3)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-4)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-6)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-7)
	#call replace(p2.p7,-i10/2+i11/2-i13+i5/2-i8/2,i,i10,i11,i13,i5,i8,Mj5,dotrewrite-j5-8)
	#call replace(p2.p6,-`Q2'/2+i10/2+i12-i3/2+i4/2-i9/2,i,i10,i12,i3,i4,i9,Mj5,dotrewrite-j5-9)
#endif
#break
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p4.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	if (count(Mj5,1)) id p4.p7 = i13 - i14;
	#call replace(p4.p9,i4/2-i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-2)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-3)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-7)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-8)
	#call replace(p4.p10,`Q2'/2-i12-i2/2+i3/2-i6/2+i9/2,i,i12,i2,i3,i6,i9,Mj5,dotrewrite-j5-9)
#endif
#break
#case Q6
* path: (0, 8, 5, 6)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p5.p - p8.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-3)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj5,dotrewrite-j5-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-5)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-6)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i9/2,i,i3,i4,i5,i9,Mj5,dotrewrite-j5-7)
	#call replace(p1.p8,i1/2-i13+i5/2-i9/2,i,i1,i13,i5,i9,Mj5,dotrewrite-j5-8)
	#call replace(p6.p8,-i14+i3/2-i6/2+i7/2-i8/2,i,i14,i3,i6,i7,i8,Mj5,dotrewrite-j5-9)
#endif
#break
#case 56
* path: (5, 6)
#case 67
* path: (6, 5, 7)
#case 611
* path: (6, 5, 7, 11)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-5)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i9/2,i,i3,i4,i5,i9,Mj5,dotrewrite-j5-6)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-7)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-8)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-1)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj5,dotrewrite-j5-2)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Mj5,dotrewrite-j5-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-6)
	#call replace(p2.p7,-i10/2+i11/2-i13+i5/2-i8/2,i,i10,i11,i13,i5,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-0)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-1)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-2)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-3)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-5)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Mj5,dotrewrite-j5-6)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p6.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	if (count(Mj5,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-2)
	#call replace(p4.p6,-i4/2-i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-6)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case 610
* path: (6, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-4)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-5)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-7)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-8)
	#call replace(p6.p10,-`Q2'/2+i10/2+i12-i3/2+i6/2,i,i10,i12,i3,i6,Mj5,dotrewrite-j5-9)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p4.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	if (count(Mj5,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(p4.p9,i4/2-i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-3)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-5)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Mj5,dotrewrite-j5-6)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-3)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i9/2,i,i3,i4,i5,i9,Mj5,dotrewrite-j5-4)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-5)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-6)
#endif
#break
#case Q4
* path: (0, 8, 5, 3, 4)
#case 48
* path: (4, 3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p5.p - p8.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-2)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj5,dotrewrite-j5-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-5)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i9/2,i,i1,i3,i6,i9,Mj5,dotrewrite-j5-6)
	#call replace(p3.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Mj5,dotrewrite-j5-7)
	#call replace(p4.p8,i1/2-i13+i14-i3/2+i6/2-i9/2,i,i1,i13,i14,i3,i6,i9,Mj5,dotrewrite-j5-8)
#endif
#break
#case Q8
* path: (0, 8)
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#case 810
* path: (8, 7, 10)
#case 811
* path: (8, 11)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p8.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj5,dotrewrite-j5-2)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-3)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-4)
	#call replace(p1.p8,i1/2-i13+i5/2-i9/2,i,i1,i13,i5,i9,Mj5,dotrewrite-j5-5)
	#call replace(p3.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Mj5,dotrewrite-j5-6)
#endif
#break
#case 79
* path: (7, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-0)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-1)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-2)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Mj5,dotrewrite-j5-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-6)
	#call replace(p3.p10,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj5,dotrewrite-j5-7)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	if (count(Mj5,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-5)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i9/2,i,i1,i3,i6,i9,Mj5,dotrewrite-j5-6)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	if (count(Mj5,1)) id p4.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-2)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-3)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-4)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-6)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i9/2,i,i1,i3,i6,i9,Mj5,dotrewrite-j5-7)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-8)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p9.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(p1.p9,i1/2-i5/2+i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-2)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Mj5,dotrewrite-j5-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-6)
#endif
#break
#case Q9
* path: (0, 11, 10, 9)
#case 911
* path: (9, 10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p11.p - p10.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-0)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj5,dotrewrite-j5-2)
	#call replace(p10.p11,i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Mj5,dotrewrite-j5-5)
	#call replace(p3.p10,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj5,dotrewrite-j5-6)
	#call replace(p3.p11,i12+i14-i3/2-i5/2+i6/2,i,i12,i14,i3,i5,i6,Mj5,dotrewrite-j5-7)
	#call replace(p9.p11,i10/2+i13-i2/2-i5/2-i7/2+i8/2+i9/2,i,i10,i13,i2,i5,i7,i8,i9,Mj5,dotrewrite-j5-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q7
* path: (0, 2, 10, 7)
#case 210
* path: (2, 10)
#case 27
* path: (2, 10, 7)
#case 28
* path: (2, 10, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-2)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj5,dotrewrite-j5-4)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-5)
	#call replace(p3.p10,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj5,dotrewrite-j5-6)
	#call replace(p2.p7,-i10/2+i11/2-i13+i5/2-i8/2,i,i10,i11,i13,i5,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj5,dotrewrite-j5-4)
	#call replace(p2.p5,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Mj5,dotrewrite-j5-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-6)
	#call replace(p2.p7,-i10/2+i11/2-i13+i5/2-i8/2,i,i10,i11,i13,i5,i8,Mj5,dotrewrite-j5-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#case 17
* path: (1, 2, 10, 7)
#case 310
* path: (3, 1, 2, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-2)
	#call replace(p7.p10,-i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-3)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-4)
	#call replace(p1.p10,`Q2'/2-i2/2-i5/2+i9/2,i,i2,i5,i9,Mj5,dotrewrite-j5-5)
	#call replace(p3.p10,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj5,dotrewrite-j5-6)
#endif
#break
#case Q10
* path: (0, 11, 10)
#case Q1
* path: (0, 11, 10, 2, 1)
#case 111
* path: (1, 2, 10, 11)
#case 1011
* path: (10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p11.p - p10.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-2)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj5,dotrewrite-j5-3)
	#call replace(p10.p11,i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-4)
	#call replace(p1.p10,`Q2'/2-i2/2-i5/2+i9/2,i,i2,i5,i9,Mj5,dotrewrite-j5-5)
	#call replace(p3.p10,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj5,dotrewrite-j5-6)
	#call replace(p1.p11,`Q2'/2+i13-i2/2-i5/2+i9/2,i,i13,i2,i5,i9,Mj5,dotrewrite-j5-7)
	#call replace(p3.p11,i12+i14-i3/2-i5/2+i6/2,i,i12,i14,i3,i5,i6,Mj5,dotrewrite-j5-8)
#endif
#break
#case 89
* path: (8, 5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p5.p + p9.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p5.p - p8.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-1)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj5,dotrewrite-j5-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-3)
	#call replace(p5.p9,i1/2-i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-4)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-5)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-7)
	#call replace(p6.p8,-i14+i3/2-i6/2+i7/2-i8/2,i,i14,i3,i6,i7,i8,Mj5,dotrewrite-j5-8)
	#call replace(p8.p9,i1/2-i13+i7/2-i8/2-i9/2,i,i1,i13,i7,i8,i9,Mj5,dotrewrite-j5-9)
#endif
#break
#case Q8
* path: (0, 1, 3, 5, 8)
#case Q5
* path: (0, 8, 5)
#case Q3
* path: (0, 8, 5, 3)
#case 18
* path: (1, 3, 5, 8)
#case 38
* path: (3, 5, 8)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p5.p - p8.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-2)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-4)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj5,dotrewrite-j5-5)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-6)
	#call replace(p1.p8,i1/2-i13+i5/2-i9/2,i,i1,i13,i5,i9,Mj5,dotrewrite-j5-7)
	#call replace(p3.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Mj5,dotrewrite-j5-8)
#endif
#break
#case Q11
* path: (0, 11)
#case 711
* path: (7, 11)
#case 1111
* path: (11,)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p7.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj5,dotrewrite-j5-2)
	#call replace(p7.p11,-i10/2+i11/2+i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-3)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-4)
	#call replace(p1.p11,`Q2'/2+i13-i2/2-i5/2+i9/2,i,i13,i2,i5,i9,Mj5,dotrewrite-j5-5)
	#call replace(p3.p11,i12+i14-i3/2-i5/2+i6/2,i,i12,i14,i3,i5,i6,Mj5,dotrewrite-j5-6)
#endif
#break
#case Q11
* path: (0, 2, 10, 11)
#case Q2
* path: (0, 11, 10, 2)
#case 211
* path: (2, 10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p11.p - p10.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-2)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj5,dotrewrite-j5-3)
	#call replace(p10.p11,i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj5,dotrewrite-j5-5)
	#call replace(p3.p10,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj5,dotrewrite-j5-6)
	#call replace(p3.p11,i12+i14-i3/2-i5/2+i6/2,i,i12,i14,i3,i5,i6,Mj5,dotrewrite-j5-7)
	#call replace(p2.p11,i11/2-i13+i2/2+i5/2-i8/2-i9/2,i,i11,i13,i2,i5,i8,i9,Mj5,dotrewrite-j5-8)
#endif
#break
#case 411
* path: (4, 9, 10, 11)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p4.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p3} = + p11.p - p10.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(p4.p9,i4/2-i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Mj5,dotrewrite-j5-1)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Mj5,dotrewrite-j5-2)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj5,dotrewrite-j5-3)
	#call replace(p10.p11,i10/2+i11/2-i7/2,i,i10,i11,i7,Mj5,dotrewrite-j5-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj5,dotrewrite-j5-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-6)
	#call replace(p4.p10,`Q2'/2-i12-i2/2+i3/2-i6/2+i9/2,i,i12,i2,i3,i6,i9,Mj5,dotrewrite-j5-7)
	#call replace(p9.p11,i10/2+i13-i2/2-i5/2-i7/2+i8/2+i9/2,i,i10,i13,i2,i5,i7,i8,i9,Mj5,dotrewrite-j5-8)
	#call replace(p4.p11,`Q2'/2-i12+i13-i14-i2/2+i3/2-i6/2+i9/2,i,i12,i13,i14,i2,i3,i6,i9,Mj5,dotrewrite-j5-9)
#endif
#break
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p5.p + p9.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-2)
	#call replace(p5.p9,i1/2-i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-3)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Mj5,dotrewrite-j5-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i5/2,i,i10,i12,i5,Mj5,dotrewrite-j5-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-6)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Mj5,dotrewrite-j5-7)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Mj5,dotrewrite-j5-8)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Mj5,dotrewrite-j5-9)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 311
* path: (3, 5, 7, 11)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 510
* path: (5, 7, 10)
#case 511
* path: (5, 7, 11)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mj5,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p + p10.p;
	.sort:momrewrite-Mj5-7;
	if (count(Mj5,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Mj5-6;
	if (count(Mj5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj5-5;
	if (count(Mj5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj5-4;
	if (count(Mj5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj5-3;
	if (count(Mj5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj5-2;
	if (count(Mj5,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Mj5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj5,dotrewrite-j5-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj5,dotrewrite-j5-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Mj5,dotrewrite-j5-2)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Mj5,dotrewrite-j5-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj5,dotrewrite-j5-4)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj5,dotrewrite-j5-5)
	#call replace(Q.p7,-i10/2+i11/2+i5/2-i8/2,i,i10,i11,i5,i8,Mj5,dotrewrite-j5-6)
#endif
#break
#endswitch
#break
*--#] j5 : 
*--#[ j11 :
#case Mj11
#procedure SimpleDotj11()
if (count(Mj11,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p4.p5^n? = i13^n;
	id p4.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 511
* path: (5, 6, 11)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p7.p?!{p7,[P+p7],[P-p7],p4} = - p9.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p2.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p6.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-0)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj11,dotrewrite-j11-1)
	#call replace(p6.p11,-i10/2+i11/2+i6/2,i,i10,i11,i6,Mj11,dotrewrite-j11-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-3)
	#call replace(Q.p6,`Q2'/2-i12+i3/2-i9/2,i,i12,i3,i9,Mj11,dotrewrite-j11-4)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Mj11,dotrewrite-j11-5)
	#call replace(p5.p11,i12-i5/2+i7/2-i8/2,i,i12,i5,i7,i8,Mj11,dotrewrite-j11-6)
	#call replace(p4.p11,i1/2-i13+i14-i2/2-i3/2+i9/2,i,i1,i13,i14,i2,i3,i9,Mj11,dotrewrite-j11-7)
#endif
#break
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mj11,dotrewrite-j11-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj11,dotrewrite-j11-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-5)
	#call replace(p3.p7,-`Q2'/2-i10/2+i11/2+i12+i7/2-i8/2+i9/2,i,i10,i11,i12,i7,i8,i9,Mj11,dotrewrite-j11-6)
#endif
#break
#case 510
* path: (5, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p7.p?!{p7,[P+p7],[P-p7],p4} = - p9.p + p10.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p2.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p6.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-0)
	#call replace(p6.p10,-i10/2+i11/2-i6/2,i,i10,i11,i6,Mj11,dotrewrite-j11-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-2)
	#call replace(Q.p6,`Q2'/2-i12+i3/2-i9/2,i,i12,i3,i9,Mj11,dotrewrite-j11-3)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Mj11,dotrewrite-j11-4)
	#call replace(p4.p10,i14-i2/2+i4/2+i9/2,i,i14,i2,i4,i9,Mj11,dotrewrite-j11-5)
	#call replace(Q.p10,i11/2+i12-i3/2-i8/2+i9/2,i,i11,i12,i3,i8,i9,Mj11,dotrewrite-j11-6)
	#call replace(p5.p10,i12-i3/2+i6/2+i7/2-i8/2,i,i12,i3,i6,i7,i8,Mj11,dotrewrite-j11-7)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 17
* path: (1, 2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p + p9.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p9.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p9.p - p2.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj11,dotrewrite-j11-0)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-1)
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mj11,dotrewrite-j11-2)
	#call replace(p2.p9,i2/2-i4/2+i9/2,i,i2,i4,i9,Mj11,dotrewrite-j11-3)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Mj11,dotrewrite-j11-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-5)
	#call replace(p2.p7,i10/2-i14-i7/2-i9/2,i,i10,i14,i7,i9,Mj11,dotrewrite-j11-6)
	#call replace(p5.p9,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj11,dotrewrite-j11-7)
	#call replace(p2.p5,i12-i13-i3/2-i5/2+i6/2,i,i12,i13,i3,i5,i6,Mj11,dotrewrite-j11-8)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p2.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-0)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-2)
	#call replace(Q.p6,`Q2'/2-i12+i3/2-i9/2,i,i12,i3,i9,Mj11,dotrewrite-j11-3)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Mj11,dotrewrite-j11-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-5)
	#call replace(p6.p7,-`Q2'/2-i10/2+i11/2+i12-i5/2+i9/2,i,i10,i11,i12,i5,i9,Mj11,dotrewrite-j11-6)
#endif
#break
#case Q8
* path: (0, 1, 3, 5, 8)
#case Q1
* path: (0, 8, 5, 3, 1)
#case 18
* path: (1, 3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p7.p?!{p7,[P+p7],[P-p7],p4} = + p5.p - p8.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj11,dotrewrite-j11-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mj11,dotrewrite-j11-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj11,dotrewrite-j11-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-3)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj11,dotrewrite-j11-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-5)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mj11,dotrewrite-j11-6)
	#call replace(p3.p8,`Q2'/2+i10/2-i11/2-i12+i3/2+i5/2-i6/2-i7/2+i8/2-i9/2,i,i10,i11,i12,i3,i5,i6,i7,i8,i9,Mj11,dotrewrite-j11-7)
	#call replace(p1.p8,`Q2'/2+i10/2-i11/2-i12+i13-i14+i3/2+i5/2-i6/2-i7/2+i8/2-i9/2,i,i10,i11,i12,i13,i14,i3,i5,i6,i7,i8,i9,Mj11,dotrewrite-j11-8)
#endif
#break
#case Q3
* path: (0, 8, 5, 3)
#case Q4
* path: (0, 8, 5, 3, 4)
#case 38
* path: (3, 5, 8)
#case 48
* path: (4, 3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p7.p?!{p7,[P+p7],[P-p7],p4} = + p5.p - p8.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	if (count(Mj11,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mj11,dotrewrite-j11-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj11,dotrewrite-j11-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-3)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj11,dotrewrite-j11-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-5)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-6)
	#call replace(p3.p8,`Q2'/2+i10/2-i11/2-i12+i3/2+i5/2-i6/2-i7/2+i8/2-i9/2,i,i10,i11,i12,i3,i5,i6,i7,i8,i9,Mj11,dotrewrite-j11-7)
#endif
#break
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p4.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj11,dotrewrite-j11-0)
	#call replace(p2.p4,-i2/2-i4/2+i9/2,i,i2,i4,i9,Mj11,dotrewrite-j11-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-3)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-4)
	#call replace(p2.p7,i10/2-i14-i7/2-i9/2,i,i10,i14,i7,i9,Mj11,dotrewrite-j11-5)
	#call replace(p2.p5,i12-i13-i3/2-i5/2+i6/2,i,i12,i13,i3,i5,i6,Mj11,dotrewrite-j11-6)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case 58
* path: (5, 8)
#case 511
* path: (5, 8, 11)
#case 88
* path: (8,)
#case 811
* path: (8, 11)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p4.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p9.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p7.p?!{p7,[P+p7],[P-p7],p4} = + p5.p - p8.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	if (count(Mj11,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj11,dotrewrite-j11-1)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-2)
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mj11,dotrewrite-j11-3)
	#call replace(p4.p9,-i2/2+i4/2+i9/2,i,i2,i4,i9,Mj11,dotrewrite-j11-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-5)
	#call replace(p5.p9,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj11,dotrewrite-j11-6)
	#call replace(p8.p9,-i10/2+i12-i3/2-i5/2+i6/2+i7/2+i9/2,i,i10,i12,i3,i5,i6,i7,i9,Mj11,dotrewrite-j11-7)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p3.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj11,dotrewrite-j11-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i9/2,i,i3,i9,Mj11,dotrewrite-j11-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj11,dotrewrite-j11-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj11,dotrewrite-j11-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-4)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mj11,dotrewrite-j11-5)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-6)
	#call replace(p3.p7,-`Q2'/2-i10/2+i11/2+i12+i7/2-i8/2+i9/2,i,i10,i11,i12,i7,i8,i9,Mj11,dotrewrite-j11-7)
	#call replace(p1.p7,-`Q2'/2-i10/2+i11/2+i12+i14+i7/2-i8/2+i9/2,i,i10,i11,i12,i14,i7,i8,i9,Mj11,dotrewrite-j11-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p7.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p2.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj11,dotrewrite-j11-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj11,dotrewrite-j11-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-3)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Mj11,dotrewrite-j11-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-5)
	#call replace(p1.p7,-`Q2'/2-i10/2+i11/2+i12+i14+i7/2-i8/2+i9/2,i,i10,i11,i12,i14,i7,i8,i9,Mj11,dotrewrite-j11-6)
#endif
#break
#default
#case 39
* path: (3, 4, 9)
#case 44
* path: (4,)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Mj11,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p6.p + p10.p;
	.sort:momrewrite-Mj11-7;
	if (count(Mj11,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mj11-6;
	if (count(Mj11,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj11-5;
	if (count(Mj11,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p + p9.p;
	.sort:momrewrite-Mj11-4;
	if (count(Mj11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p4.p;
	.sort:momrewrite-Mj11-3;
	if (count(Mj11,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p9.p;
	.sort:momrewrite-Mj11-2;
	if (count(Mj11,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj11()
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj11,dotrewrite-j11-0)
	#call replace(Q.p9,`Q2'/2-i3/2+i9/2,i,i3,i9,Mj11,dotrewrite-j11-1)
	#call replace(p4.p9,-i2/2+i4/2+i9/2,i,i2,i4,i9,Mj11,dotrewrite-j11-2)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Mj11,dotrewrite-j11-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i9/2,i,i1,i2,i3,i9,Mj11,dotrewrite-j11-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj11,dotrewrite-j11-5)
	#call replace(p5.p9,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Mj11,dotrewrite-j11-6)
#endif
#break
#endswitch
#break
*--#] j11 : 
*--#[ no3 :
#case Mno3
#procedure SimpleDotno3()
if (count(Mno3,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p6^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p11.p + p7.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p - p5.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mno3,dotrewrite-no3-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Mno3,dotrewrite-no3-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Mno3,dotrewrite-no3-3)
	#call replace(p5.p10,i10/2-i11/2+i5/2,i,i10,i11,i5,Mno3,dotrewrite-no3-4)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-5)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mno3,dotrewrite-no3-6)
	#call replace(p5.p6,i12-i14-i2/2-i6/2+i7/2,i,i12,i14,i2,i6,i7,Mno3,dotrewrite-no3-7)
	#call replace(p2.p10,-i10/2+i11/2-i12+i14+i4/2-i5/2+i8/2-i9/2,i,i10,i11,i12,i14,i4,i5,i8,i9,Mno3,dotrewrite-no3-8)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p10.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mno3,dotrewrite-no3-1)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Mno3,dotrewrite-no3-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Mno3,dotrewrite-no3-3)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mno3,dotrewrite-no3-5)
	#call replace(p5.p6,i12-i14-i2/2-i6/2+i7/2,i,i12,i14,i2,i6,i7,Mno3,dotrewrite-no3-6)
	#call replace(p5.p8,-i10/2+i11/2-i12+i14+i2/2-i5/2+i6/2-i7/2,i,i10,i11,i12,i14,i2,i5,i6,i7,Mno3,dotrewrite-no3-7)
#endif
#break
#case 67
* path: (6, 7)
#case 69
* path: (6, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p11.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p - p6.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p7.p - p9.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p4.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mno3,dotrewrite-no3-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Mno3,dotrewrite-no3-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Mno3,dotrewrite-no3-3)
	#call replace(p7.p9,-i11/2+i7/2+i9/2,i,i11,i7,i9,Mno3,dotrewrite-no3-4)
	#call replace(Q.p7,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Mno3,dotrewrite-no3-5)
	#call replace(Q.p9,`Q2'/2+i13-i3/2+i4/2,i,i13,i3,i4,Mno3,dotrewrite-no3-6)
	#call replace(p4.p7,-i12+i14+i2/2+i4/2-i5/2,i,i12,i14,i2,i4,i5,Mno3,dotrewrite-no3-7)
	#call replace(p6.p9,i10/2+i12-i14-i6/2-i8/2,i,i10,i12,i14,i6,i8,Mno3,dotrewrite-no3-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 3, 4)
#case 26
* path: (2, 6)
#case 210
* path: (2, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p9.p + p7.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id p4.p6 = i12 - i14;
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mno3,dotrewrite-no3-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mno3,dotrewrite-no3-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Mno3,dotrewrite-no3-4)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Mno3,dotrewrite-no3-5)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-6)
	#call replace(p4.p10,-i12+i14+i4/2+i8/2-i9/2,i,i12,i14,i4,i8,i9,Mno3,dotrewrite-no3-7)
	#call replace(p2.p10,-i10/2+i11/2-i12+i14+i4/2-i5/2+i8/2-i9/2,i,i10,i11,i12,i14,i4,i5,i8,i9,Mno3,dotrewrite-no3-8)
#endif
#break
#case 55
* path: (5,)
#case 510
* path: (5, 10)
#case 56
* path: (5, 10, 6)
#case 66
* path: (6,)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p - p5.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mno3,dotrewrite-no3-1)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Mno3,dotrewrite-no3-2)
	#call replace(p5.p10,i10/2-i11/2+i5/2,i,i10,i11,i5,Mno3,dotrewrite-no3-3)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mno3,dotrewrite-no3-5)
	#call replace(p5.p6,i12-i14-i2/2-i6/2+i7/2,i,i12,i14,i2,i6,i7,Mno3,dotrewrite-no3-6)
	#call replace(p3.p10,-i13-i14-i4/2-i8/2+i9/2,i,i13,i14,i4,i8,i9,Mno3,dotrewrite-no3-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p10.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mno3,dotrewrite-no3-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mno3,dotrewrite-no3-2)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Mno3,dotrewrite-no3-3)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-4)
	#call replace(p1.p6,i12-i2/2-i6/2+i7/2,i,i12,i2,i6,i7,Mno3,dotrewrite-no3-5)
	#call replace(p3.p10,-i13-i14-i4/2-i8/2+i9/2,i,i13,i14,i4,i8,i9,Mno3,dotrewrite-no3-6)
	#call replace(p1.p10,i10/2-i11/2-i13-i14-i4/2+i5/2-i8/2+i9/2,i,i10,i11,i13,i14,i4,i5,i8,i9,Mno3,dotrewrite-no3-7)
#endif
#break
#case 1011
* path: (10, 11)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p11.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id p4.p6 = i12 - i14;
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mno3,dotrewrite-no3-2)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-3)
	#call replace(p10.p11,i10/2+i11/2-i5/2,i,i10,i11,i5,Mno3,dotrewrite-no3-4)
	#call replace(p4.p10,-i12+i14+i4/2+i8/2-i9/2,i,i12,i14,i4,i8,i9,Mno3,dotrewrite-no3-5)
	#call replace(Q.p11,-i1/2-i12-i13+i2/2+i3/2-i4/2,i,i1,i12,i13,i2,i3,i4,Mno3,dotrewrite-no3-6)
	#call replace(p4.p11,-i12+i14+i2/2-i5/2+i8/2-i9/2,i,i12,i14,i2,i5,i8,i9,Mno3,dotrewrite-no3-7)
	#call replace(p6.p11,-i10/2-i12+i14+i2/2-i7/2+i8/2,i,i10,i12,i14,i2,i7,i8,Mno3,dotrewrite-no3-8)
#endif
#break
#case Q8
* path: (0, 2, 6, 8)
#case 18
* path: (1, 2, 6, 8)
#case 28
* path: (2, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p9.p + p7.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mno3,dotrewrite-no3-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mno3,dotrewrite-no3-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Mno3,dotrewrite-no3-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Mno3,dotrewrite-no3-4)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Mno3,dotrewrite-no3-5)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-6)
	#call replace(p2.p8,i10/2-i11/2+i12-i14-i2/2-i4/2+i5/2-i6/2+i7/2-i8/2+i9/2,i,i10,i11,i12,i14,i2,i4,i5,i6,i7,i8,i9,Mno3,dotrewrite-no3-7)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q10
* path: (0, 1, 5, 10)
#case 15
* path: (1, 5)
#case 110
* path: (1, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p - p5.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mno3,dotrewrite-no3-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Mno3,dotrewrite-no3-2)
	#call replace(p5.p10,i10/2-i11/2+i5/2,i,i10,i11,i5,Mno3,dotrewrite-no3-3)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mno3,dotrewrite-no3-5)
	#call replace(p1.p6,i12-i2/2-i6/2+i7/2,i,i12,i2,i6,i7,Mno3,dotrewrite-no3-6)
	#call replace(p5.p6,i12-i14-i2/2-i6/2+i7/2,i,i12,i14,i2,i6,i7,Mno3,dotrewrite-no3-7)
	#call replace(p1.p10,i10/2-i11/2-i13-i14-i4/2+i5/2-i8/2+i9/2,i,i10,i11,i13,i14,i4,i5,i8,i9,Mno3,dotrewrite-no3-8)
#endif
#break
#case 611
* path: (6, 7, 11)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p11.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p10.p - p6.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p11.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	if (count(Mno3,1)) id Q.p10 = -i12 - i13;
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Mno3,dotrewrite-no3-1)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-2)
	#call replace(p7.p11,i11/2+i7/2-i9/2,i,i11,i7,i9,Mno3,dotrewrite-no3-3)
	#call replace(p10.p11,i10/2+i11/2-i5/2,i,i10,i11,i5,Mno3,dotrewrite-no3-4)
	#call replace(Q.p7,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Mno3,dotrewrite-no3-5)
	#call replace(Q.p11,-i1/2-i12-i13+i2/2+i3/2-i4/2,i,i1,i12,i13,i2,i3,i4,Mno3,dotrewrite-no3-6)
	#call replace(p6.p11,-i10/2-i12+i14+i2/2-i7/2+i8/2,i,i10,i12,i14,i2,i7,i8,Mno3,dotrewrite-no3-7)
	#call replace(p7.p10,i11/2-i12+i14+i4/2-i5/2+i6/2-i9/2,i,i11,i12,i14,i4,i5,i6,i9,Mno3,dotrewrite-no3-8)
#endif
#break
#case 18
* path: (1, 3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p10.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mno3,dotrewrite-no3-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mno3,dotrewrite-no3-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Mno3,dotrewrite-no3-2)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-3)
	#call replace(p1.p6,i12-i2/2-i6/2+i7/2,i,i12,i2,i6,i7,Mno3,dotrewrite-no3-4)
	#call replace(p3.p8,i13+i4/2+i8/2-i9/2,i,i13,i4,i8,i9,Mno3,dotrewrite-no3-5)
	#call replace(p1.p8,-i10/2+i11/2-i12+i13+i14+i2/2+i4/2-i5/2+i6/2-i7/2+i8/2-i9/2,i,i10,i11,i12,i13,i14,i2,i4,i5,i6,i7,i8,i9,Mno3,dotrewrite-no3-6)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Mno3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Mno3-7;
	if (count(Mno3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p + p11.p;
	.sort:momrewrite-Mno3-6;
	if (count(Mno3,1)) id p11.p?!{p11,[P+p11],[P-p11]} = - p5.p + p10.p;
	.sort:momrewrite-Mno3-5;
	if (count(Mno3,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Mno3-4;
	if (count(Mno3,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Mno3-3;
	if (count(Mno3,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Mno3-2;
	if (count(Mno3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mno3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno3()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mno3,dotrewrite-no3-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Mno3,dotrewrite-no3-1)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Mno3,dotrewrite-no3-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mno3,dotrewrite-no3-3)
	#call replace(p3.p8,i13+i4/2+i8/2-i9/2,i,i13,i4,i8,i9,Mno3,dotrewrite-no3-4)
	#call replace(p5.p6,i12-i14-i2/2-i6/2+i7/2,i,i12,i14,i2,i6,i7,Mno3,dotrewrite-no3-5)
	#call replace(p5.p8,-i10/2+i11/2-i12+i14+i2/2-i5/2+i6/2-i7/2,i,i10,i11,i12,i14,i2,i5,i6,i7,Mno3,dotrewrite-no3-6)
#endif
#break
#endswitch
#break
*--#] no3 : 
*--#[ j4 :
#case Mj4
#procedure SimpleDotj4()
if (count(Mj4,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p11.p11^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p5^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 310
* path: (3, 4, 10)
#case 410
* path: (4, 10)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p4.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-1)
	#call replace(p4.p10,-i10/2+i11/2-i4/2,i,i10,i11,i4,Mj4,dotrewrite-j4-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj4,dotrewrite-j4-4)
	#call replace(Q.p10,-i1/2+i11/2+i12+i2/2-i8/2,i,i1,i11,i12,i2,i8,Mj4,dotrewrite-j4-5)
	#call replace(p3.p10,-i1/2+i12+i4/2-i8/2+i9/2,i,i1,i12,i4,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p5.p10,i13-i14+i3/2-i6/2+i7/2-i8/2,i,i13,i14,i3,i6,i7,i8,Mj4,dotrewrite-j4-7)
#endif
#break
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Mj4,dotrewrite-j4-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj4,dotrewrite-j4-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj4,dotrewrite-j4-7)
#endif
#break
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-3)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Mj4,dotrewrite-j4-4)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj4,dotrewrite-j4-7)
	#call replace(p2.p6,-i1/2+i12-i13+i14-i3/2+i4/2,i,i1,i12,i13,i14,i3,i4,Mj4,dotrewrite-j4-8)
#endif
#break
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj4,dotrewrite-j4-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj4,dotrewrite-j4-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj4,dotrewrite-j4-5)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p2.p7,i1/2+i10/2-i12+i13-i14-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i12,i13,i14,i2,i3,i4,i9,Mj4,dotrewrite-j4-7)
#endif
#break
#case 36
* path: (3, 6)
#case 39
* path: (3, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Mj4,dotrewrite-j4-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-4)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-5)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj4,dotrewrite-j4-6)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-7)
	#call replace(p2.p6,-i1/2+i12-i13+i14-i3/2+i4/2,i,i1,i12,i13,i14,i3,i4,Mj4,dotrewrite-j4-8)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case Q3
* path: (0, 8, 5, 3)
#case 38
* path: (3, 5, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj4,dotrewrite-j4-3)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj4,dotrewrite-j4-5)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj4,dotrewrite-j4-6)
	#call replace(p2.p8,-i1/2-i10/2+i12+i2/2-i3/2+i4/2+i9/2,i,i1,i10,i12,i2,i3,i4,i9,Mj4,dotrewrite-j4-7)
#endif
#break
#case Q6
* path: (0, 8, 5, 6)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-3)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj4,dotrewrite-j4-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj4,dotrewrite-j4-5)
	#call replace(p6.p8,i3/2-i5/2+i7/2-i9/2,i,i3,i5,i7,i9,Mj4,dotrewrite-j4-6)
	#call replace(p2.p6,-i1/2+i12-i13+i14-i3/2+i4/2,i,i1,i12,i13,i14,i3,i4,Mj4,dotrewrite-j4-7)
	#call replace(p2.p8,-i1/2-i10/2+i12+i2/2-i3/2+i4/2+i9/2,i,i1,i10,i12,i2,i3,i4,i9,Mj4,dotrewrite-j4-8)
#endif
#break
#case 17
* path: (1, 2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj4,dotrewrite-j4-2)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Mj4,dotrewrite-j4-3)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj4,dotrewrite-j4-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj4,dotrewrite-j4-7)
	#call replace(p2.p7,i1/2+i10/2-i12+i13-i14-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i12,i13,i14,i2,i3,i4,i9,Mj4,dotrewrite-j4-8)
#endif
#break
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-3)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-5)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-6)
	#call replace(p4.p6,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Mj4,dotrewrite-j4-7)
	#call replace(p4.p9,-`Q2'/2-i10/2+i11/2+i12+i2/2-i3/2,i,i10,i11,i12,i2,i3,Mj4,dotrewrite-j4-8)
#endif
#break
#case Q8
* path: (0, 1, 3, 5, 8)
#case 18
* path: (1, 3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + Q.p - p8.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj4,dotrewrite-j4-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(Q.p8,`Q2'/2-i11/2+i8/2,i,i11,i8,Mj4,dotrewrite-j4-3)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-4)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Mj4,dotrewrite-j4-5)
	#call replace(p1.p8,`Q2'/2+i1/2+i10/2-i11/2-i12-i2/2+i3/2-i4/2+i8/2-i9/2,i,i1,i10,i11,i12,i2,i3,i4,i8,i9,Mj4,dotrewrite-j4-6)
#endif
#break
#case 37
* path: (3, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p7.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p6.p7,-i6/2-i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj4,dotrewrite-j4-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj4,dotrewrite-j4-5)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p2.p6,-i1/2+i12-i13+i14-i3/2+i4/2,i,i1,i12,i13,i14,i3,i4,Mj4,dotrewrite-j4-7)
	#call replace(p2.p7,i1/2+i10/2-i12+i13-i14-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i12,i13,i14,i2,i3,i4,i9,Mj4,dotrewrite-j4-8)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-4)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-5)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Mj4,dotrewrite-j4-6)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-7)
	#call replace(p1.p9,-`Q2'/2-i10/2+i11/2+i12+i2/2-i8/2+i9/2,i,i10,i11,i12,i2,i8,i9,Mj4,dotrewrite-j4-8)
#endif
#break
#case 47
* path: (4, 10, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p10.p + p4.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Mj4,dotrewrite-j4-0)
	#call replace(p4.p10,-i10/2+i11/2-i4/2,i,i10,i11,i4,Mj4,dotrewrite-j4-1)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Mj4,dotrewrite-j4-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-3)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj4,dotrewrite-j4-4)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-5)
	#call replace(Q.p10,-i1/2+i11/2+i12+i2/2-i8/2,i,i1,i11,i12,i2,i8,Mj4,dotrewrite-j4-6)
	#call replace(p4.p9,-`Q2'/2-i10/2+i11/2+i12+i2/2-i3/2,i,i10,i11,i12,i2,i3,Mj4,dotrewrite-j4-7)
	#call replace(p7.p10,i1/2+i10/2-i12+i13-i14-i2/2+i3/2-i4/2-i6/2+i7/2,i,i1,i10,i12,i13,i14,i2,i3,i4,i6,i7,Mj4,dotrewrite-j4-8)
	#call replace(p4.p7,-`Q2'/2-i1/2-i10/2+i11/2+i12+i14+i2/2-i3/2+i4/2-i5/2+i6/2,i,i1,i10,i11,i12,i14,i2,i3,i4,i5,i6,Mj4,dotrewrite-j4-9)
#endif
#break
#case Q11
* path: (0, 11)
#case Q4
* path: (0, 11, 4)
#case Q3
* path: (0, 11, 4, 3)
#case 34
* path: (3, 4)
#case 311
* path: (3, 4, 11)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 411
* path: (4, 11)
#case 48
* path: (4, 11, 8)
#case 511
* path: (5, 8, 11)
#case 811
* path: (8, 11)
#case 1111
* path: (11,)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p4.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj4,dotrewrite-j4-2)
	#call replace(p4.p11,-i10/2+i11/2+i4/2,i,i10,i11,i4,Mj4,dotrewrite-j4-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-4)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj4,dotrewrite-j4-5)
	#call replace(p3.p11,i12-i3/2-i8/2+i9/2,i,i12,i3,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj4,dotrewrite-j4-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id p2.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Mj4,dotrewrite-j4-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Mj4,dotrewrite-j4-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Mj4,dotrewrite-j4-4)
	#call replace(Q.p10,-i1/2+i11/2+i12+i2/2-i8/2,i,i1,i11,i12,i2,i8,Mj4,dotrewrite-j4-5)
	#call replace(p3.p10,-i1/2+i12+i4/2-i8/2+i9/2,i,i1,i12,i4,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p5.p10,i13-i14+i3/2-i6/2+i7/2-i8/2,i,i13,i14,i3,i6,i7,i8,Mj4,dotrewrite-j4-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q11
* path: (0, 1, 4, 11)
#case Q1
* path: (0, 11, 4, 1)
#case 14
* path: (1, 4)
#case 111
* path: (1, 4, 11)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p4.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj4,dotrewrite-j4-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-1)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj4,dotrewrite-j4-2)
	#call replace(p4.p11,-i10/2+i11/2+i4/2,i,i10,i11,i4,Mj4,dotrewrite-j4-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-4)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj4,dotrewrite-j4-5)
	#call replace(p5.p11,i13-i5/2+i7/2-i8/2,i,i13,i5,i7,i8,Mj4,dotrewrite-j4-6)
	#call replace(p1.p11,-i10/2+i11/2+i12-i3/2+i4/2-i8/2+i9/2,i,i10,i11,i12,i3,i4,i8,i9,Mj4,dotrewrite-j4-7)
#endif
#break
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Mj4,dotrewrite-j4-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Mj4,dotrewrite-j4-4)
	#call replace(Q.p7,-`Q2'/2+i11/2+i13-i8/2,i,i11,i13,i8,Mj4,dotrewrite-j4-5)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p4.p7,-`Q2'/2-i1/2-i10/2+i11/2+i12+i14+i2/2-i3/2+i4/2-i5/2+i6/2,i,i1,i10,i11,i12,i14,i2,i3,i4,i5,i6,Mj4,dotrewrite-j4-7)
#endif
#break
#case 611
* path: (6, 3, 4, 11)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p11.p - p4.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p11.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	if (count(Mj4,1)) id Q.p6 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(Q.p11,`Q2'/2+i11/2-i8/2,i,i11,i8,Mj4,dotrewrite-j4-3)
	#call replace(p4.p11,-i10/2+i11/2+i4/2,i,i10,i11,i4,Mj4,dotrewrite-j4-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Mj4,dotrewrite-j4-5)
	#call replace(p3.p11,i12-i3/2-i8/2+i9/2,i,i12,i3,i8,i9,Mj4,dotrewrite-j4-6)
	#call replace(p4.p6,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Mj4,dotrewrite-j4-7)
	#call replace(p6.p11,i12-i13-i3/2+i5/2-i7/2+i9/2,i,i12,i13,i3,i5,i7,i9,Mj4,dotrewrite-j4-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Mj4,1)) id p11.p?!{p11,[P+p11],[P-p11]} = + p4.p + p10.p;
	.sort:momrewrite-Mj4-7;
	if (count(Mj4,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Mj4-6;
	if (count(Mj4,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Mj4-5;
	if (count(Mj4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Mj4-4;
	if (count(Mj4,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Mj4-3;
	if (count(Mj4,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Mj4-2;
	if (count(Mj4,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Mj4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotj4()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Mj4,dotrewrite-j4-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Mj4,dotrewrite-j4-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Mj4,dotrewrite-j4-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Mj4,dotrewrite-j4-3)
	#call replace(Q.p9,-`Q2'/2+i11/2+i12-i8/2,i,i11,i12,i8,Mj4,dotrewrite-j4-4)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Mj4,dotrewrite-j4-5)
	#call replace(p1.p9,-`Q2'/2-i10/2+i11/2+i12+i2/2-i8/2+i9/2,i,i10,i11,i12,i2,i8,i9,Mj4,dotrewrite-j4-6)
#endif
#break
#endswitch
#break
*--#] j4 : 
*--#[ no6 :
#case Mno6
#procedure SimpleDotno6()
if (count(Mno6,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p1.p2^n? = i11^n;
	id p2.p4^n? = i12^n;
	id Q.p2^n? = i13^n;
	id Q.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 18
* path: (1, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 1, 8)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p8.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p9.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id p2.p8 = -i11 + i13;
	if (count(Mno6,1)) id Q.p9 = i13 - i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno6,dotrewrite-no6-2)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno6,dotrewrite-no6-3)
	#call replace(p2.p9,i2/2-i3/2+i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-4)
	#call replace(p8.p9,i7/2-i8/2-i9/2,i,i7,i8,i9,Mno6,dotrewrite-no6-5)
	#call replace(p4.p9,i10/2+i12-i3/2-i4/2,i,i10,i12,i3,i4,Mno6,dotrewrite-no6-6)
	#call replace(p4.p8,-i11-i12+i13+i2/2+i4/2-i6/2+i8/2,i,i11,i12,i13,i2,i4,i6,i8,Mno6,dotrewrite-no6-7)
#endif
#break
#case 210
* path: (2, 3, 10)
#case 310
* path: (3, 10)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p8.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p10.p + p3.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p3.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id p2.p8 = -i11 + i13;
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-1)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno6,dotrewrite-no6-2)
	#call replace(p3.p10,-i10/2-i3/2+i4/2,i,i10,i3,i4,Mno6,dotrewrite-no6-3)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno6,dotrewrite-no6-4)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno6,dotrewrite-no6-5)
	#call replace(p3.p8,-i11+i13-i7/2+i8/2+i9/2,i,i11,i13,i7,i8,i9,Mno6,dotrewrite-no6-6)
	#call replace(p8.p10,-i12+i2/2+i4/2-i6/2+i7/2-i9/2,i,i12,i2,i4,i6,i7,i9,Mno6,dotrewrite-no6-7)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p9.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id Q.p9 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno6,dotrewrite-no6-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno6,dotrewrite-no6-2)
	#call replace(p2.p9,i2/2-i3/2+i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-3)
	#call replace(p4.p9,i10/2+i12-i3/2-i4/2,i,i10,i12,i3,i4,Mno6,dotrewrite-no6-4)
	#call replace(p1.p9,i13-i14-i7/2+i8/2+i9/2,i,i13,i14,i7,i8,i9,Mno6,dotrewrite-no6-5)
	#call replace(p1.p4,`Q2'/2+i11+i12-i13-i2/2-i5/2+i6/2-i8/2,i,i11,i12,i13,i2,i5,i6,i8,Mno6,dotrewrite-no6-6)
#endif
#break
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p8.p + Q.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p9.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p2.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p - p10.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p10.p - p6.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno6,dotrewrite-no6-0)
	#call replace(p4.p10,i10/2-i3/2+i4/2,i,i10,i3,i4,Mno6,dotrewrite-no6-1)
	#call replace(p6.p10,i10/2+i6/2-i7/2,i,i10,i6,i7,Mno6,dotrewrite-no6-2)
	#call replace(p2.p6,i11+i12-i13-i2,i,i11,i12,i13,i2,Mno6,dotrewrite-no6-3)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno6,dotrewrite-no6-4)
	#call replace(p2.p10,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mno6,dotrewrite-no6-5)
	#call replace(Q.p6,i1/2-i13+i4/2-i5/2-i8/2,i,i1,i13,i4,i5,i8,Mno6,dotrewrite-no6-6)
	#call replace(p4.p6,i11-i13-i2/2+i4/2+i6/2-i8/2,i,i11,i13,i2,i4,i6,i8,Mno6,dotrewrite-no6-7)
#endif
#break
#case Q3
* path: (0, 4, 3)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p8.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p3.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id p2.p8 = -i11 + i13;
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno6,dotrewrite-no6-2)
	#call replace(p3.p4,-i10/2+i3/2+i4/2,i,i10,i3,i4,Mno6,dotrewrite-no6-3)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno6,dotrewrite-no6-4)
	#call replace(p3.p8,-i11+i13-i7/2+i8/2+i9/2,i,i11,i13,i7,i8,i9,Mno6,dotrewrite-no6-5)
	#call replace(p4.p8,-i11-i12+i13+i2/2+i4/2-i6/2+i8/2,i,i11,i12,i13,i2,i4,i6,i8,Mno6,dotrewrite-no6-6)
#endif
#break
#case 17
* path: (1, 8, 7)
#case 27
* path: (2, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p10.p + p3.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p9.p + p2.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p8.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p7.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p8.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id p2.p8 = -i11 + i13;
	#call replace(p6.p7,i10/2-i6/2-i7/2,i,i10,i6,i7,Mno6,dotrewrite-no6-1)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno6,dotrewrite-no6-2)
	#call replace(p7.p8,i7/2+i8/2-i9/2,i,i7,i8,i9,Mno6,dotrewrite-no6-3)
	#call replace(p2.p6,i11+i12-i13-i2,i,i11,i12,i13,i2,Mno6,dotrewrite-no6-4)
	#call replace(Q.p6,i1/2-i13+i4/2-i5/2-i8/2,i,i1,i13,i4,i5,i8,Mno6,dotrewrite-no6-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno6,dotrewrite-no6-6)
	#call replace(p2.p7,-i11+i13+i2/2-i3/2+i9/2,i,i11,i13,i2,i3,i9,Mno6,dotrewrite-no6-7)
	#call replace(p6.p8,-i12+i2/2+i4/2-i6/2-i8/2,i,i12,i2,i4,i6,i8,Mno6,dotrewrite-no6-8)
#endif
#break
#case 37
* path: (3, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p8.p + Q.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + Q.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p4} = + p3.p + p9.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p10.p + p3.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p7.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p9.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id Q.p9 = i13 - i14;
	#call replace(p3.p9,i2/2-i3/2-i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-1)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Mno6,dotrewrite-no6-2)
	#call replace(p3.p10,-i10/2-i3/2+i4/2,i,i10,i3,i4,Mno6,dotrewrite-no6-3)
	#call replace(p7.p10,i10/2-i6/2+i7/2,i,i10,i6,i7,Mno6,dotrewrite-no6-4)
	#call replace(Q.p10,`Q2'/2-i14+i4/2-i5/2,i,i14,i4,i5,Mno6,dotrewrite-no6-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13-i14+i8/2,i,i1,i13,i14,i8,Mno6,dotrewrite-no6-6)
	#call replace(p9.p10,i10/2+i12-i2/2-i4/2+i9/2,i,i10,i12,i2,i4,i9,Mno6,dotrewrite-no6-7)
	#call replace(p3.p7,-i11+i13+i2/2-i3/2-i7/2+i8/2,i,i11,i13,i2,i3,i7,i8,Mno6,dotrewrite-no6-8)
#endif
#break
#case Q9
* path: (0, 4, 3, 9)
#case 39
* path: (3, 9)
#case 38
* path: (3, 9, 8)
#case 48
* path: (4, 3, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p8.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p4} = + p3.p + p9.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id Q.p9 = i13 - i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno6,dotrewrite-no6-1)
	#call replace(p3.p4,-i10/2+i3/2+i4/2,i,i10,i3,i4,Mno6,dotrewrite-no6-2)
	#call replace(Q.p8,`Q2'/2-i1/2+i8/2,i,i1,i8,Mno6,dotrewrite-no6-3)
	#call replace(p3.p9,i2/2-i3/2-i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-4)
	#call replace(p8.p9,i7/2-i8/2-i9/2,i,i7,i8,i9,Mno6,dotrewrite-no6-5)
	#call replace(p4.p9,i10/2+i12-i3/2-i4/2,i,i10,i12,i3,i4,Mno6,dotrewrite-no6-6)
	#call replace(p3.p8,-i11+i13-i7/2+i8/2+i9/2,i,i11,i13,i7,i8,i9,Mno6,dotrewrite-no6-7)
	#call replace(p4.p8,-i11-i12+i13+i2/2+i4/2-i6/2+i8/2,i,i11,i12,i13,i2,i4,i6,i8,Mno6,dotrewrite-no6-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q5
* path: (0, 1, 5)
#case Q4
* path: (0, 1, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p5.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p3.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	if (count(Mno6,1)) id p2.p5 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno6,dotrewrite-no6-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-2)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Mno6,dotrewrite-no6-3)
	#call replace(p3.p5,i10/2+i14-i3/2-i4/2,i,i10,i14,i3,i4,Mno6,dotrewrite-no6-4)
	#call replace(p1.p3,i11-i13+i14+i7/2-i8/2-i9/2,i,i11,i13,i14,i7,i8,i9,Mno6,dotrewrite-no6-5)
	#call replace(p1.p5,i1/2-i11-i12+i13+i2/2+i5/2-i6/2,i,i1,i11,i12,i13,i2,i5,i6,Mno6,dotrewrite-no6-6)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Mno6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p10.p;
	.sort:momrewrite-Mno6-6;
	if (count(Mno6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p9.p;
	.sort:momrewrite-Mno6-5;
	if (count(Mno6,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p - p3.p;
	.sort:momrewrite-Mno6-4;
	if (count(Mno6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Mno6-3;
	if (count(Mno6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Mno6-2;
	if (count(Mno6,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p3.p;
	.sort:momrewrite-Mno6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotno6()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Mno6,dotrewrite-no6-0)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mno6,dotrewrite-no6-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Mno6,dotrewrite-no6-2)
	#call replace(p3.p4,-i10/2+i3/2+i4/2,i,i10,i3,i4,Mno6,dotrewrite-no6-3)
	#call replace(p1.p3,i11-i13+i14+i7/2-i8/2-i9/2,i,i11,i13,i14,i7,i8,i9,Mno6,dotrewrite-no6-4)
	#call replace(p1.p4,`Q2'/2+i11+i12-i13-i2/2-i5/2+i6/2-i8/2,i,i11,i12,i13,i2,i5,i6,i8,Mno6,dotrewrite-no6-5)
#endif
#break
#endswitch
#break
*--#] no6 : 
*--#[ lala :
#case Mlala
#procedure SimpleDotlala()
if (count(Mlala,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p5^n? = i10^n;
	id Q.p2^n? = i11^n;
	id p1.p4^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p5} = + p2.p + p9.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p4.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p4.p9 = i12 - i14;
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-1)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-2)
	#call replace(p2.p9,i1/2-i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i6/2,i,i1,i11,i6,Mlala,dotrewrite-lala-4)
	#call replace(p2.p5,`Q2'/2+i10-i11+i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Mlala,dotrewrite-lala-5)
	#call replace(p5.p9,-`Q2'/2-i10+i11+i13-i2/2-i5/2+i8/2,i,i10,i11,i13,i2,i5,i8,Mlala,dotrewrite-lala-6)
#endif
#break
#case Q9
* path: (0, 3, 2, 9)
#case 39
* path: (3, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p5.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p5} = + p2.p + p9.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p3.p - Q.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p2.p3 = i11 + i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-1)
	#call replace(p2.p9,i1/2-i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-2)
	#call replace(p3.p5,i10+i4/2+i5/2-i7/2,i,i10,i4,i5,i7,Mlala,dotrewrite-lala-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i6/2,i,i1,i11,i6,Mlala,dotrewrite-lala-4)
	#call replace(p2.p5,`Q2'/2+i10-i11+i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Mlala,dotrewrite-lala-5)
	#call replace(p3.p9,`Q2'/2+i1/2-i11+i12-i14-i6/2,i,i1,i11,i12,i14,i6,Mlala,dotrewrite-lala-6)
	#call replace(p5.p9,-`Q2'/2-i10+i11+i13-i2/2-i5/2+i8/2,i,i10,i11,i13,i2,i5,i8,Mlala,dotrewrite-lala-7)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p - p9.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p9.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p4.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p4.p9 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-1)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-2)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-3)
	#call replace(p1.p9,i1/2-i2/2+i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i6/2,i,i1,i11,i6,Mlala,dotrewrite-lala-5)
	#call replace(p5.p9,-`Q2'/2-i10+i11+i13-i2/2-i5/2+i8/2,i,i10,i11,i13,i2,i5,i8,Mlala,dotrewrite-lala-6)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 13
* path: (1, 2, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p5.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p3.p - Q.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p2.p3 = i11 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-1)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-3)
	#call replace(p1.p3,`Q2'/2+i1/2+i12-i6/2,i,i1,i12,i6,Mlala,dotrewrite-lala-4)
	#call replace(p3.p5,i10+i4/2+i5/2-i7/2,i,i10,i4,i5,i7,Mlala,dotrewrite-lala-5)
	#call replace(p2.p5,`Q2'/2+i10-i11+i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Mlala,dotrewrite-lala-6)
#endif
#break
#case Q8
* path: (0, 3, 8)
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p5.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p3.p - Q.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p - Q.p - p8.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p2.p3 = i11 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-1)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-3)
	#call replace(Q.p8,-`Q2'-i10+i11,i,i10,i11,Mlala,dotrewrite-lala-4)
	#call replace(p1.p3,`Q2'/2+i1/2+i12-i6/2,i,i1,i12,i6,Mlala,dotrewrite-lala-5)
	#call replace(p1.p8,-`Q2'/2-i13+i2/2+i6/2-i9/2,i,i13,i2,i6,i9,Mlala,dotrewrite-lala-6)
	#call replace(p2.p8,-`Q2'/2-i10+i2/2-i5/2+i8/2,i,i10,i2,i5,i8,Mlala,dotrewrite-lala-7)
	#call replace(p3.p8,-`Q2'/2-i10+i11+i14-i3/2-i5/2+i7/2,i,i10,i11,i14,i3,i5,i7,Mlala,dotrewrite-lala-8)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 18
* path: (1, 6, 8)
#case 28
* path: (2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p5.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p - Q.p - p8.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-0)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-1)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-2)
	#call replace(Q.p8,-`Q2'-i10+i11,i,i10,i11,Mlala,dotrewrite-lala-3)
	#call replace(p1.p8,-`Q2'/2-i13+i2/2+i6/2-i9/2,i,i13,i2,i6,i9,Mlala,dotrewrite-lala-4)
	#call replace(p2.p8,-`Q2'/2-i10+i2/2-i5/2+i8/2,i,i10,i2,i5,i8,Mlala,dotrewrite-lala-5)
	#call replace(p4.p8,`Q2'/2+i14-i3/2-i5/2+i7/2,i,i14,i3,i5,i7,Mlala,dotrewrite-lala-6)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = - p9.p + p1.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p + Q.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p - p6.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p5.p - p7.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p1.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-1)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-2)
	#call replace(Q.p8,-`Q2'-i10+i11,i,i10,i11,Mlala,dotrewrite-lala-3)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Mlala,dotrewrite-lala-4)
	#call replace(p1.p8,-`Q2'/2-i13+i2/2+i6/2-i9/2,i,i13,i2,i6,i9,Mlala,dotrewrite-lala-5)
	#call replace(p5.p8,`Q2'/2-i11+i2/2-i5/2-i8/2,i,i11,i2,i5,i8,Mlala,dotrewrite-lala-6)
	#call replace(p7.p8,-i11-i14+i2/2+i3/2-i7/2-i8/2,i,i11,i14,i2,i3,i7,i8,Mlala,dotrewrite-lala-7)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p + Q.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p5.p - p7.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p1.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-1)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-2)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-3)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Mlala,dotrewrite-lala-4)
	#call replace(p2.p5,`Q2'/2+i10-i11+i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Mlala,dotrewrite-lala-5)
	#call replace(p2.p7,`Q2'/2+i10-i11-i14+i2/2+i5/2-i8/2,i,i10,i11,i14,i2,i5,i8,Mlala,dotrewrite-lala-6)
#endif
#break
#case 79
* path: (7, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p - p9.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p5} = + p2.p + p9.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p4.p + p7.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p4.p9 = i12 - i14;
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-2)
	#call replace(p2.p9,i1/2-i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-3)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Mlala,dotrewrite-lala-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i6/2,i,i1,i11,i6,Mlala,dotrewrite-lala-5)
	#call replace(p2.p7,`Q2'/2+i10-i11-i14+i2/2+i5/2-i8/2,i,i10,i11,i14,i2,i5,i8,Mlala,dotrewrite-lala-6)
	#call replace(p7.p9,-`Q2'/2-i10+i11-i12+i13+i14-i2/2-i5/2+i8/2,i,i10,i11,i12,i13,i14,i2,i5,i8,Mlala,dotrewrite-lala-7)
#endif
#break
#case Q6
* path: (0, 3, 8, 6)
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p5.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p5} = + Q.p - p6.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p3.p - Q.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p - Q.p - p8.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p2.p3 = i11 + i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Mlala,dotrewrite-lala-2)
	#call replace(Q.p8,-`Q2'-i10+i11,i,i10,i11,Mlala,dotrewrite-lala-3)
	#call replace(p2.p6,-i1/2+i11-i2/2+i9/2,i,i1,i11,i2,i9,Mlala,dotrewrite-lala-4)
	#call replace(p3.p6,-i1/2-i12+i3/2-i4/2+i6/2,i,i1,i12,i3,i4,i6,Mlala,dotrewrite-lala-5)
	#call replace(p2.p8,-`Q2'/2-i10+i2/2-i5/2+i8/2,i,i10,i2,i5,i8,Mlala,dotrewrite-lala-6)
	#call replace(p3.p8,-`Q2'/2-i10+i11+i14-i3/2-i5/2+i7/2,i,i10,i11,i14,i3,i5,i7,Mlala,dotrewrite-lala-7)
	#call replace(p6.p8,-`Q2'/2-i10+i11+i13-i2/2-i6/2+i9/2,i,i10,i11,i13,i2,i6,i9,Mlala,dotrewrite-lala-8)
#endif
#break
#case Q7
* path: (0, 1, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p - p9.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p4.p + p7.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p1.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-1)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-2)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-3)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-4)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Mlala,dotrewrite-lala-5)
	#call replace(p2.p7,`Q2'/2+i10-i11-i14+i2/2+i5/2-i8/2,i,i10,i11,i14,i2,i5,i8,Mlala,dotrewrite-lala-6)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p4.p + p7.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p3.p - Q.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p3.p - p7.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	if (count(Mlala,1)) id p2.p3 = i11 + i14;
	if (count(Mlala,1)) id p1.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-2)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-3)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-4)
	#call replace(p1.p3,`Q2'/2+i1/2+i12-i6/2,i,i1,i12,i6,Mlala,dotrewrite-lala-5)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Mlala,dotrewrite-lala-6)
	#call replace(p3.p7,`Q2'/2+i10-i3/2+i5/2-i7/2,i,i10,i3,i5,i7,Mlala,dotrewrite-lala-7)
	#call replace(p2.p7,`Q2'/2+i10-i11-i14+i2/2+i5/2-i8/2,i,i10,i11,i14,i2,i5,i8,Mlala,dotrewrite-lala-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 3, 4)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Mlala,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p4.p;
	.sort:momrewrite-Mlala-5;
	if (count(Mlala,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Mlala-4;
	if (count(Mlala,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p4.p;
	.sort:momrewrite-Mlala-3;
	if (count(Mlala,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p2.p;
	.sort:momrewrite-Mlala-2;
	if (count(Mlala,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Mlala-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlala()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlala,dotrewrite-lala-0)
	#call replace(p1.p2,i1/2+i2/2-i9/2,i,i1,i2,i9,Mlala,dotrewrite-lala-1)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Mlala,dotrewrite-lala-2)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Mlala,dotrewrite-lala-3)
	#call replace(p2.p5,`Q2'/2+i10-i11+i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Mlala,dotrewrite-lala-4)
#endif
#break
#endswitch
#break
*--#] lala : 
*--#[ nono :
#case Mnono
#procedure SimpleDotnono()
if (count(Mnono,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p2.p8^n? = i10^n;
	id p6.p7^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p7.p9^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 28
* path: (2, 8)
#case 24
* path: (2, 8, 4)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p6.p?!{p6,[P+p6],[P-p6],p7} = - p1.p + Q.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p9.p?!{p9,[P+p9],[P-p9],p7} = - p2.p + p3.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p8.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + p2.p + p8.p - p7.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnono,dotrewrite-nono-0)
	#call replace(p2.p7,i10-i13+i2,i,i10,i13,i2,Mnono,dotrewrite-nono-1)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Mnono,dotrewrite-nono-2)
	#call replace(p2.p4,i12-i2/2-i3/2+i9/2,i,i12,i2,i3,i9,Mnono,dotrewrite-nono-3)
	#call replace(p7.p8,-i1/2+i13-i2/2+i7/2+i8/2,i,i1,i13,i2,i7,i8,Mnono,dotrewrite-nono-4)
	#call replace(Q.p7,-i1/2+i10+i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Mnono,dotrewrite-nono-5)
	#call replace(p4.p7,-i1/2+i11+i13-i14-i2/2-i7/2+i8/2,i,i1,i11,i13,i14,i2,i7,i8,Mnono,dotrewrite-nono-6)
	#call replace(Q.p8,`Q2'/2+i10+i11-i12+i2/2-i6/2-i7/2+i8/2,i,i10,i11,i12,i2,i6,i7,i8,Mnono,dotrewrite-nono-7)
#endif
#break
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q7
* path: (0, 3, 2, 7)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 37
* path: (3, 2, 7)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p4.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p8.p?!{p8,[P+p8],[P-p8],p2} = - p2.p + p7.p + p1.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p9.p?!{p9,[P+p9],[P-p9],p7} = + p3.p - p2.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	if (count(Mnono,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnono,dotrewrite-nono-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mnono,dotrewrite-nono-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Mnono,dotrewrite-nono-3)
	#call replace(p2.p7,i10-i13+i2,i,i10,i13,i2,Mnono,dotrewrite-nono-4)
	#call replace(p3.p7,i10-i13+i14+i2,i,i10,i13,i14,i2,Mnono,dotrewrite-nono-5)
	#call replace(Q.p7,-i1/2+i10+i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Mnono,dotrewrite-nono-6)
	#call replace(p3.p6,-i11+i12-i13+i14-i5/2+i6/2+i7/2+i9/2,i,i11,i12,i13,i14,i5,i6,i7,i9,Mnono,dotrewrite-nono-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q7
* path: (0, 1, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p4.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p6.p?!{p6,[P+p6],[P-p6],p7} = + Q.p - p1.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p8.p?!{p8,[P+p8],[P-p8],p2} = + p1.p + p7.p - p2.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnono,dotrewrite-nono-0)
	#call replace(p2.p7,i10-i13+i2,i,i10,i13,i2,Mnono,dotrewrite-nono-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mnono,dotrewrite-nono-2)
	#call replace(Q.p9,`Q2'/2-i12+i3/2-i4/2,i,i12,i3,i4,Mnono,dotrewrite-nono-3)
	#call replace(p1.p7,-i1/2+i10+i2/2-i7/2+i8/2,i,i1,i10,i2,i7,i8,Mnono,dotrewrite-nono-4)
	#call replace(Q.p7,-i1/2+i10+i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Mnono,dotrewrite-nono-5)
	#call replace(p1.p9,`Q2'/2+i11-i12-i14+i3/2-i4/2+i5/2-i6/2-i7/2-i9/2,i,i11,i12,i14,i3,i4,i5,i6,i7,i9,Mnono,dotrewrite-nono-6)
#endif
#break
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p9.p?!{p9,[P+p9],[P-p9],p7} = - p2.p + p3.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p7.p?!{p7,[P+p7],[P-p7],p6,p9} = + p8.p + p2.p - p1.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p8.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	if (count(Mnono,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Mnono,dotrewrite-nono-1)
	#call replace(p5.p8,i4/2-i5/2-i8/2,i,i4,i5,i8,Mnono,dotrewrite-nono-2)
	#call replace(p2.p5,-i10+i12-i2/2-i3/2+i9/2,i,i10,i12,i2,i3,i9,Mnono,dotrewrite-nono-3)
	#call replace(p5.p6,-i14+i5/2+i6/2-i7/2-i9/2,i,i14,i5,i6,i7,i9,Mnono,dotrewrite-nono-4)
	#call replace(p6.p8,`Q2'/2-i1/2+i11-i12+i13-i6/2,i,i1,i11,i12,i13,i6,Mnono,dotrewrite-nono-5)
	#call replace(Q.p8,`Q2'/2+i10+i11-i12+i2/2-i6/2-i7/2+i8/2,i,i10,i11,i12,i2,i6,i7,i8,Mnono,dotrewrite-nono-6)
	#call replace(Q.p5,-i10-i11+i12-i2/2-i3/2+i4/2+i6/2+i7/2-i8/2,i,i10,i11,i12,i2,i3,i4,i6,i7,i8,Mnono,dotrewrite-nono-7)
#endif
#break
#case 15
* path: (1, 6, 5)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p9.p?!{p9,[P+p9],[P-p9],p7} = - p2.p + p3.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p + p5.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p8.p?!{p8,[P+p8],[P-p8],p2} = - p2.p + p7.p + p1.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	if (count(Mnono,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Mnono,dotrewrite-nono-1)
	#call replace(p2.p7,i10-i13+i2,i,i10,i13,i2,Mnono,dotrewrite-nono-2)
	#call replace(p5.p7,i11-i14-i7,i,i11,i14,i7,Mnono,dotrewrite-nono-3)
	#call replace(p2.p5,-i10+i12-i2/2-i3/2+i9/2,i,i10,i12,i2,i3,i9,Mnono,dotrewrite-nono-4)
	#call replace(p5.p6,-i14+i5/2+i6/2-i7/2-i9/2,i,i14,i5,i6,i7,i9,Mnono,dotrewrite-nono-5)
	#call replace(Q.p7,-i1/2+i10+i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Mnono,dotrewrite-nono-6)
	#call replace(Q.p5,-i10-i11+i12-i2/2-i3/2+i4/2+i6/2+i7/2-i8/2,i,i10,i11,i12,i2,i3,i4,i6,i7,i8,Mnono,dotrewrite-nono-7)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case Q1
* path: (0, 3, 2, 1)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p4.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p6.p?!{p6,[P+p6],[P-p6],p7} = + Q.p - p1.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p9.p?!{p9,[P+p9],[P-p9],p7} = + p3.p - p2.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p8.p?!{p8,[P+p8],[P-p8],p2} = + p1.p + p7.p - p2.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnono,dotrewrite-nono-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnono,dotrewrite-nono-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Mnono,dotrewrite-nono-2)
	#call replace(p2.p7,i10-i13+i2,i,i10,i13,i2,Mnono,dotrewrite-nono-3)
	#call replace(p3.p7,i10-i13+i14+i2,i,i10,i13,i14,i2,Mnono,dotrewrite-nono-4)
	#call replace(p1.p7,-i1/2+i10+i2/2-i7/2+i8/2,i,i1,i10,i2,i7,i8,Mnono,dotrewrite-nono-5)
	#call replace(Q.p7,-i1/2+i10+i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Mnono,dotrewrite-nono-6)
	#call replace(p1.p3,`Q2'/2+i11-i12+i13-i14+i3/2-i4/2+i5/2-i6/2-i7/2-i9/2,i,i11,i12,i13,i14,i3,i4,i5,i6,i7,i9,Mnono,dotrewrite-nono-7)
#endif
#break
#default
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 29
* path: (2, 9)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mnono,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p4.p;
	.sort:momrewrite-Mnono-5;
	if (count(Mnono,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnono-4;
	if (count(Mnono,1)) id p8.p?!{p8,[P+p8],[P-p8],p2} = - p2.p + p7.p + p1.p;
	.sort:momrewrite-Mnono-3;
	if (count(Mnono,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Mnono-2;
	if (count(Mnono,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Mnono-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnono()
	if (count(Mnono,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Mnono,dotrewrite-nono-1)
	#call replace(p2.p7,i10-i13+i2,i,i10,i13,i2,Mnono,dotrewrite-nono-2)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Mnono,dotrewrite-nono-3)
	#call replace(Q.p9,`Q2'/2-i12+i3/2-i4/2,i,i12,i3,i4,Mnono,dotrewrite-nono-4)
	#call replace(Q.p7,-i1/2+i10+i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Mnono,dotrewrite-nono-5)
	#call replace(p6.p9,-i11+i14-i5/2+i6/2+i7/2+i9/2,i,i11,i14,i5,i6,i7,i9,Mnono,dotrewrite-nono-6)
#endif
#break
#endswitch
#break
*--#] nono : 
*--#[ cross :
#case Mcross
#procedure SimpleDotcross()
if (count(Mcross,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 18
* path: (1, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p8.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	if (count(Mcross,1)) id Q.p8 = i11 - i12;
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-1)
	#call replace(p3.p8,i3/2-i4/2+i8/2,i,i3,i4,i8,Mcross,dotrewrite-cross-2)
	#call replace(p1.p3,-`Q2'/2-i1/2+i11-i3/2+i5/2+i9,i,i1,i11,i3,i5,i9,Mcross,dotrewrite-cross-3)
	#call replace(p1.p8,-`Q2'/2-i1/2+i11-i13-i3/2+i5/2+i9,i,i1,i11,i13,i3,i5,i9,Mcross,dotrewrite-cross-4)
	#call replace(p2.p8,`Q2'/2-i10-i12+i14+i2/2+i4/2-i6/2,i,i10,i12,i14,i2,i4,i6,Mcross,dotrewrite-cross-5)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p8.p + p6.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = + p1.p - p7.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p4.p + p8.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	if (count(Mcross,1)) id Q.p7 = -i10 + i9;
	if (count(Mcross,1)) id Q.p8 = i11 - i12;
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-2)
	#call replace(p4.p8,i3/2-i4/2-i8/2,i,i3,i4,i8,Mcross,dotrewrite-cross-3)
	#call replace(p4.p7,`Q2'/2-i10-i12+i13+i2/2+i4/2-i6/2,i,i10,i12,i13,i2,i4,i6,Mcross,dotrewrite-cross-4)
	#call replace(p1.p8,-`Q2'/2-i1/2+i11-i13-i3/2+i5/2+i9,i,i1,i11,i13,i3,i5,i9,Mcross,dotrewrite-cross-5)
	#call replace(p7.p8,-`Q2'-i1/2+i10+i11+i12-i13-i14-i2/2-i3/2-i4/2+i5/2+i6/2+i9,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i5,i6,i9,Mcross,dotrewrite-cross-6)
#endif
#break
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p3.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-0)
	#call replace(Q.p6,`Q2'-i10-i12,i,i10,i12,Mcross,dotrewrite-cross-1)
	#call replace(p1.p6,-i1/2-i13-i2/2+i7/2+i9,i,i1,i13,i2,i7,i9,Mcross,dotrewrite-cross-2)
	#call replace(p2.p6,`Q2'/2-i12-i2/2+i4/2-i6/2,i,i12,i2,i4,i6,Mcross,dotrewrite-cross-3)
	#call replace(p3.p6,i11-i14-i3/2-i4/2+i8/2,i,i11,i14,i3,i4,i8,Mcross,dotrewrite-cross-4)
	#call replace(p1.p3,-`Q2'/2-i1/2+i11-i3/2+i5/2+i9,i,i1,i11,i3,i5,i9,Mcross,dotrewrite-cross-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = + p1.p - p7.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p4.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	if (count(Mcross,1)) id Q.p7 = -i10 + i9;
	#call replace(p3.p4,i3/2+i4/2-i8/2,i,i3,i4,i8,Mcross,dotrewrite-cross-1)
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-2)
	#call replace(p1.p3,-`Q2'/2-i1/2+i11-i3/2+i5/2+i9,i,i1,i11,i3,i5,i9,Mcross,dotrewrite-cross-3)
	#call replace(p3.p7,-`Q2'/2-i1/2+i11-i14-i3/2+i5/2+i9,i,i1,i11,i14,i3,i5,i9,Mcross,dotrewrite-cross-4)
	#call replace(p4.p7,`Q2'/2-i10-i12+i13+i2/2+i4/2-i6/2,i,i10,i12,i13,i2,i4,i6,Mcross,dotrewrite-cross-5)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p8.p + p4.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p - p5.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p1.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = + Q.p - p4.p - p6.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	#call replace(Q.p5,`Q2'-i11-i9,i,i11,i9,Mcross,dotrewrite-cross-0)
	#call replace(Q.p6,`Q2'-i10-i12,i,i10,i12,Mcross,dotrewrite-cross-1)
	#call replace(p1.p5,`Q2'/2-i1/2-i11+i3/2-i5/2,i,i1,i11,i3,i5,Mcross,dotrewrite-cross-2)
	#call replace(p4.p5,i12-i13-i3/2-i4/2+i8/2,i,i12,i13,i3,i4,i8,Mcross,dotrewrite-cross-3)
	#call replace(p1.p6,-i1/2-i13-i2/2+i7/2+i9,i,i1,i13,i2,i7,i9,Mcross,dotrewrite-cross-4)
	#call replace(p4.p6,`Q2'/2-i10+i2/2-i4/2-i6/2,i,i10,i2,i4,i6,Mcross,dotrewrite-cross-5)
	#call replace(p5.p6,`Q2'+i1/2-i10-i11-i12+i13+i14+i2/2+i3/2+i4/2-i7/2-i8/2-i9,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i7,i8,i9,Mcross,dotrewrite-cross-6)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p8.p + p4.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p - p5.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = + p1.p - p7.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	if (count(Mcross,1)) id Q.p7 = -i10 + i9;
	#call replace(Q.p5,`Q2'-i11-i9,i,i11,i9,Mcross,dotrewrite-cross-1)
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-2)
	#call replace(p1.p5,`Q2'/2-i1/2-i11+i3/2-i5/2,i,i1,i11,i3,i5,Mcross,dotrewrite-cross-3)
	#call replace(p4.p5,i12-i13-i3/2-i4/2+i8/2,i,i12,i13,i3,i4,i8,Mcross,dotrewrite-cross-4)
	#call replace(p4.p7,`Q2'/2-i10-i12+i13+i2/2+i4/2-i6/2,i,i10,i12,i13,i2,i4,i6,Mcross,dotrewrite-cross-5)
	#call replace(p5.p7,`Q2'/2-i10-i11+i14+i2/2+i3/2-i5/2-i7/2,i,i10,i11,i14,i2,i3,i5,i7,Mcross,dotrewrite-cross-6)
#endif
#break
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p8.p + p4.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p - p5.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-0)
	#call replace(Q.p5,`Q2'-i11-i9,i,i11,i9,Mcross,dotrewrite-cross-1)
	#call replace(p1.p5,`Q2'/2-i1/2-i11+i3/2-i5/2,i,i1,i11,i3,i5,Mcross,dotrewrite-cross-2)
	#call replace(p2.p5,-i1/2+i10-i14-i2/2+i7/2,i,i1,i10,i14,i2,i7,Mcross,dotrewrite-cross-3)
	#call replace(p4.p5,i12-i13-i3/2-i4/2+i8/2,i,i12,i13,i3,i4,i8,Mcross,dotrewrite-cross-4)
	#call replace(p2.p4,-`Q2'/2+i10+i12-i2/2-i4/2+i6/2,i,i10,i12,i2,i4,i6,Mcross,dotrewrite-cross-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Mcross,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Mcross-4;
	if (count(Mcross,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p4.p;
	.sort:momrewrite-Mcross-3;
	if (count(Mcross,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Mcross-2;
	if (count(Mcross,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mcross-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotcross()
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mcross,dotrewrite-cross-0)
	#call replace(p3.p4,i3/2+i4/2-i8/2,i,i3,i4,i8,Mcross,dotrewrite-cross-1)
	#call replace(p1.p3,-`Q2'/2-i1/2+i11-i3/2+i5/2+i9,i,i1,i11,i3,i5,i9,Mcross,dotrewrite-cross-2)
	#call replace(p2.p4,-`Q2'/2+i10+i12-i2/2-i4/2+i6/2,i,i10,i12,i2,i4,i6,Mcross,dotrewrite-cross-3)
#endif
#break
#endswitch
#break
*--#] cross : 
*--#[ bebe :
#case Mbebe
#procedure SimpleDotbebe()
if (count(Mbebe,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p4^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p6^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 2, 5)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p - p6.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Mbebe,dotrewrite-bebe-0)
	#call replace(Q.p5,`Q2'-i10-i9,i,i10,i9,Mbebe,dotrewrite-bebe-1)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Mbebe,dotrewrite-bebe-2)
	#call replace(p1.p5,`Q2'/2+i1/2-i12-i14-i3/2,i,i1,i12,i14,i3,Mbebe,dotrewrite-bebe-3)
	#call replace(p2.p5,`Q2'/2-i10-i2/2+i4/2-i5/2,i,i10,i2,i4,i5,Mbebe,dotrewrite-bebe-4)
	#call replace(p1.p6,i1/2-i12+i13+i2/2+i6/2-i8/2,i,i1,i12,i13,i2,i6,i8,Mbebe,dotrewrite-bebe-5)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p2} = - p7.p + p5.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p + p3.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Mbebe,dotrewrite-bebe-0)
	#call replace(p2.p8,i12-i13-i2,i,i12,i13,i2,Mbebe,dotrewrite-bebe-1)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i3/2-i9,i,i1,i11,i3,i9,Mbebe,dotrewrite-bebe-2)
	#call replace(p1.p8,i1/2-i13-i2/2-i6/2+i8/2,i,i1,i13,i2,i6,i8,Mbebe,dotrewrite-bebe-3)
	#call replace(p2.p4,-`Q2'/2+i10-i2/2-i4/2+i5/2+i9,i,i10,i2,i4,i5,i9,Mbebe,dotrewrite-bebe-4)
	#call replace(p4.p8,`Q2'/2-i10-i11+i13+i14+i2/2+i4/2+i6/2-i7/2-i9,i,i10,i11,i13,i14,i2,i4,i6,i7,i9,Mbebe,dotrewrite-bebe-5)
#endif
#break
#case 58
* path: (5, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p4} = - p3.p + Q.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p8.p + p4.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(Q.p5,`Q2'-i10-i9,i,i10,i9,Mbebe,dotrewrite-bebe-0)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Mbebe,dotrewrite-bebe-1)
	#call replace(p2.p8,i12-i13-i2,i,i12,i13,i2,Mbebe,dotrewrite-bebe-2)
	#call replace(p2.p5,`Q2'/2-i10-i2/2+i4/2-i5/2,i,i10,i2,i4,i5,Mbebe,dotrewrite-bebe-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i3/2-i9,i,i1,i11,i3,i9,Mbebe,dotrewrite-bebe-4)
	#call replace(p6.p8,i1/2-i12+i2/2-i6/2-i8/2,i,i1,i12,i2,i6,i8,Mbebe,dotrewrite-bebe-5)
	#call replace(p5.p8,i1/2+i10-i12-i14+i2/2-i3/2-i4/2-i6/2+i7/2,i,i1,i10,i12,i14,i2,i3,i4,i6,i7,Mbebe,dotrewrite-bebe-6)
#endif
#break
#case 17
* path: (1, 3, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = - p5.p + Q.p - p2.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p7.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p - p6.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Mbebe,dotrewrite-bebe-0)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Mbebe,dotrewrite-bebe-1)
	#call replace(Q.p7,`Q2'-i10-i11-i9,i,i10,i11,i9,Mbebe,dotrewrite-bebe-2)
	#call replace(p1.p6,i1/2-i12+i13+i2/2+i6/2-i8/2,i,i1,i12,i13,i2,i6,i8,Mbebe,dotrewrite-bebe-3)
	#call replace(p2.p7,`Q2'/2-i10-i13-i2/2+i4/2-i5/2,i,i10,i13,i2,i4,i5,Mbebe,dotrewrite-bebe-4)
	#call replace(p1.p7,`Q2'/2-i13-i14-i2/2-i3/2-i6/2+i8/2,i,i13,i14,i2,i3,i6,i8,Mbebe,dotrewrite-bebe-5)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p4} = - p3.p + Q.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p8.p + p4.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = - p5.p + Q.p - p2.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p7.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Mbebe,dotrewrite-bebe-0)
	#call replace(p2.p8,i12-i13-i2,i,i12,i13,i2,Mbebe,dotrewrite-bebe-1)
	#call replace(Q.p7,`Q2'-i10-i11-i9,i,i10,i11,i9,Mbebe,dotrewrite-bebe-2)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i3/2-i9,i,i1,i11,i3,i9,Mbebe,dotrewrite-bebe-3)
	#call replace(p6.p8,i1/2-i12+i2/2-i6/2-i8/2,i,i1,i12,i2,i6,i8,Mbebe,dotrewrite-bebe-4)
	#call replace(p2.p7,`Q2'/2-i10-i13-i2/2+i4/2-i5/2,i,i10,i13,i2,i4,i5,Mbebe,dotrewrite-bebe-5)
	#call replace(p7.p8,i10-i14-i3/2-i4/2+i7/2+i8/2,i,i10,i14,i3,i4,i7,i8,Mbebe,dotrewrite-bebe-6)
#endif
#break
#case 27
* path: (2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p2} = - p7.p + p5.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p - p3.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Mbebe,dotrewrite-bebe-0)
	#call replace(Q.p7,`Q2'-i10-i11-i9,i,i10,i11,i9,Mbebe,dotrewrite-bebe-1)
	#call replace(p2.p4,-`Q2'/2+i10-i2/2-i4/2+i5/2+i9,i,i10,i2,i4,i5,i9,Mbebe,dotrewrite-bebe-2)
	#call replace(p2.p7,`Q2'/2-i10-i13-i2/2+i4/2-i5/2,i,i10,i13,i2,i4,i5,Mbebe,dotrewrite-bebe-3)
	#call replace(p1.p7,`Q2'/2-i13-i14-i2/2-i3/2-i6/2+i8/2,i,i13,i14,i2,i3,i6,i8,Mbebe,dotrewrite-bebe-4)
	#call replace(p4.p7,`Q2'/2-i11+i13+i2/2-i4/2+i6/2-i7/2-i9,i,i11,i13,i2,i4,i6,i7,i9,Mbebe,dotrewrite-bebe-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 2, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mbebe,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Mbebe-4;
	if (count(Mbebe,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Mbebe-3;
	if (count(Mbebe,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Mbebe-2;
	if (count(Mbebe,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p - p6.p;
	.sort:momrewrite-Mbebe-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbebe()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Mbebe,dotrewrite-bebe-0)
	#call replace(p4.p6,i11-i13-i5/2-i6/2+i7/2,i,i11,i13,i5,i6,i7,Mbebe,dotrewrite-bebe-1)
	#call replace(p2.p4,-`Q2'/2+i10-i2/2-i4/2+i5/2+i9,i,i10,i2,i4,i5,i9,Mbebe,dotrewrite-bebe-2)
	#call replace(p1.p6,i1/2-i12+i13+i2/2+i6/2-i8/2,i,i1,i12,i13,i2,i6,i8,Mbebe,dotrewrite-bebe-3)
#endif
#break
#endswitch
#break
*--#] bebe : 
*--#[ bubu :
#case Mbubu
#procedure SimpleDotbubu()
if (count(Mbubu,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p8^n? = i11^n;
	id p2.p3^n? = i12^n;
	id p2.p9^n? = i13^n;
	id p3.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p - p8.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p3.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p2.p + p5.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id Q.p5 = -i10 + i11;
	if (count(Mbubu,1)) id p3.p5 = -i12 + i14;
	#call replace(p2.p5,-i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-2)
	#call replace(p3.p9,i3/2-i6/2+i9/2,i,i3,i6,i9,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p9,-`Q2'/2-i11+i4/2-i7/2,i,i11,i4,i7,Mbubu,dotrewrite-bubu-4)
	#call replace(p5.p9,-i13+i7/2-i8/2-i9/2,i,i13,i7,i8,i9,Mbubu,dotrewrite-bubu-5)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-6)
#endif
#break
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3,p9} = + p8.p - p5.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p7.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p9.p?!{p9,[P+p9],[P-p9],p2} = - p7.p - p8.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id Q.p5 = -i10 + i11;
	if (count(Mbubu,1)) id p3.p5 = -i12 + i14;
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Mbubu,dotrewrite-bubu-2)
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-3)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Mbubu,dotrewrite-bubu-4)
	#call replace(p3.p7,-i14-i3/2+i6/2-i9/2,i,i14,i3,i6,i9,Mbubu,dotrewrite-bubu-5)
	#call replace(p5.p7,i13+i2/2-i5/2-i7/2+i9/2,i,i13,i2,i5,i7,i9,Mbubu,dotrewrite-bubu-6)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-7)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p - p8.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p2.p + p5.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p8} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id Q.p5 = -i10 + i11;
	#call replace(p1.p2,i10+i12+i2,i,i10,i12,i2,Mbubu,dotrewrite-bubu-1)
	#call replace(p2.p5,-i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-2)
	#call replace(Q.p9,-`Q2'/2-i11+i4/2-i7/2,i,i11,i4,i7,Mbubu,dotrewrite-bubu-3)
	#call replace(p5.p9,-i13+i7/2-i8/2-i9/2,i,i13,i7,i8,i9,Mbubu,dotrewrite-bubu-4)
	#call replace(Q.p1,`Q2'/2+i1/2-i12-i2/2-i3/2,i,i1,i12,i2,i3,Mbubu,dotrewrite-bubu-5)
	#call replace(p1.p5,-i10+i11-i12+i14-i2/2-i5/2+i8/2,i,i10,i11,i12,i14,i2,i5,i8,Mbubu,dotrewrite-bubu-6)
	#call replace(p1.p9,-`Q2'/2-i11+i13+i3/2+i4/2-i6/2-i7/2+i9/2,i,i11,i13,i3,i4,i6,i7,i9,Mbubu,dotrewrite-bubu-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q8
* path: (0, 7, 8)
#case 27
* path: (2, 8, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p7.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p2.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p9.p?!{p9,[P+p9],[P-p9],p2} = - p7.p - p8.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Mbubu,dotrewrite-bubu-0)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-1)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Mbubu,dotrewrite-bubu-2)
	#call replace(p2.p7,-i13-i2/2+i5/2-i8/2,i,i13,i2,i5,i8,Mbubu,dotrewrite-bubu-3)
	#call replace(p3.p7,-i14-i3/2+i6/2-i9/2,i,i14,i3,i6,i9,Mbubu,dotrewrite-bubu-4)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case Q1
* path: (0, 4, 1)
#case Q2
* path: (0, 4, 1, 2)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p9.p?!{p9,[P+p9],[P-p9],p2} = - p8.p - p7.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p2.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p8} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	#call replace(p1.p2,i10+i12+i2,i,i10,i12,i2,Mbubu,dotrewrite-bubu-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Mbubu,dotrewrite-bubu-1)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-2)
	#call replace(p4.p8,i11+i7/2+i8/2-i9/2,i,i11,i7,i8,i9,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p1,`Q2'/2+i1/2-i12-i2/2-i3/2,i,i1,i12,i2,i3,Mbubu,dotrewrite-bubu-4)
	#call replace(p2.p4,i10+i13+i2/2-i5/2+i8/2,i,i10,i13,i2,i5,i8,Mbubu,dotrewrite-bubu-5)
	#call replace(p1.p8,i11+i14+i2/2-i5/2+i8/2,i,i11,i14,i2,i5,i8,Mbubu,dotrewrite-bubu-6)
	#call replace(p1.p4,i1/2-i12+i13+i14+i4/2-i5/2-i6/2-i7/2+i8/2+i9/2,i,i1,i12,i13,i14,i4,i5,i6,i7,i8,i9,Mbubu,dotrewrite-bubu-7)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p9.p?!{p9,[P+p9],[P-p9],p2} = - p8.p - p7.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3,p9} = + p8.p - p5.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id Q.p5 = -i10 + i11;
	if (count(Mbubu,1)) id p3.p5 = -i12 + i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Mbubu,dotrewrite-bubu-2)
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-3)
	#call replace(p4.p8,i11+i7/2+i8/2-i9/2,i,i11,i7,i8,i9,Mbubu,dotrewrite-bubu-4)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-5)
	#call replace(p4.p5,-i10+i11-i13-i2/2+i5/2+i7/2-i9/2,i,i10,i11,i13,i2,i5,i7,i9,Mbubu,dotrewrite-bubu-6)
	#call replace(p3.p4,-`Q2'/2+i1/2-i10-i12+i14-i2/2-i6/2+i9/2,i,i1,i10,i12,i14,i2,i6,i9,Mbubu,dotrewrite-bubu-7)
#endif
#break
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p9.p?!{p9,[P+p9],[P-p9],p2} = - p8.p - p7.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p2.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Mbubu,dotrewrite-bubu-0)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-1)
	#call replace(p4.p8,i11+i7/2+i8/2-i9/2,i,i11,i7,i8,i9,Mbubu,dotrewrite-bubu-2)
	#call replace(p2.p4,i10+i13+i2/2-i5/2+i8/2,i,i10,i13,i2,i5,i8,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-4)
	#call replace(p3.p4,-`Q2'/2+i1/2-i10-i12+i14-i2/2-i6/2+i9/2,i,i1,i10,i12,i14,i2,i6,i9,Mbubu,dotrewrite-bubu-5)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p9.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p2.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p9.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p8} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	#call replace(p1.p2,i10+i12+i2,i,i10,i12,i2,Mbubu,dotrewrite-bubu-0)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-1)
	#call replace(p8.p9,i7/2-i8/2-i9/2,i,i7,i8,i9,Mbubu,dotrewrite-bubu-2)
	#call replace(Q.p9,-`Q2'/2-i11+i4/2-i7/2,i,i11,i4,i7,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p1,`Q2'/2+i1/2-i12-i2/2-i3/2,i,i1,i12,i2,i3,Mbubu,dotrewrite-bubu-4)
	#call replace(p1.p8,i11+i14+i2/2-i5/2+i8/2,i,i11,i14,i2,i5,i8,Mbubu,dotrewrite-bubu-5)
	#call replace(p1.p9,-`Q2'/2-i11+i13+i3/2+i4/2-i6/2-i7/2+i9/2,i,i11,i13,i3,i4,i6,i7,i9,Mbubu,dotrewrite-bubu-6)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p - p8.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p9.p?!{p9,[P+p9],[P-p9],p2} = + p3.p + p6.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p2.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p8} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id p2.p6 = -i12 + i13;
	#call replace(p1.p2,i10+i12+i2,i,i10,i12,i2,Mbubu,dotrewrite-bubu-1)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-2)
	#call replace(p6.p8,-i14+i7/2-i8/2-i9/2,i,i14,i7,i8,i9,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p1,`Q2'/2+i1/2-i12-i2/2-i3/2,i,i1,i12,i2,i3,Mbubu,dotrewrite-bubu-4)
	#call replace(p1.p8,i11+i14+i2/2-i5/2+i8/2,i,i11,i14,i2,i5,i8,Mbubu,dotrewrite-bubu-5)
	#call replace(Q.p6,-i1/2+i10-i11+i12+i2/2+i3/2+i4/2-i7/2,i,i1,i10,i11,i12,i2,i3,i4,i7,Mbubu,dotrewrite-bubu-6)
	#call replace(p1.p6,-i1/2+i10-i11+i13+i2/2+i4/2-i6/2-i7/2+i9/2,i,i1,i10,i11,i13,i2,i4,i6,i7,i9,Mbubu,dotrewrite-bubu-7)
#endif
#break
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p - p8.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p8} = + p9.p - p6.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3} = + p2.p + p5.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id Q.p5 = -i10 + i11;
	if (count(Mbubu,1)) id p2.p6 = -i12 + i13;
	#call replace(p2.p5,-i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-2)
	#call replace(p6.p9,-i3/2+i6/2+i9/2,i,i3,i6,i9,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p9,-`Q2'/2-i11+i4/2-i7/2,i,i11,i4,i7,Mbubu,dotrewrite-bubu-4)
	#call replace(p5.p9,-i13+i7/2-i8/2-i9/2,i,i13,i7,i8,i9,Mbubu,dotrewrite-bubu-5)
	#call replace(p5.p6,i12-i13-i14+i7/2-i8/2-i9/2,i,i12,i13,i14,i7,i8,i9,Mbubu,dotrewrite-bubu-6)
	#call replace(Q.p6,-i1/2+i10-i11+i12+i2/2+i3/2+i4/2-i7/2,i,i1,i10,i11,i12,i2,i3,i4,i7,Mbubu,dotrewrite-bubu-7)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3,p9} = + p8.p - p5.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p3.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p9.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	if (count(Mbubu,1)) id Q.p5 = -i10 + i11;
	if (count(Mbubu,1)) id p3.p5 = -i12 + i14;
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-2)
	#call replace(p3.p9,i3/2-i6/2+i9/2,i,i3,i6,i9,Mbubu,dotrewrite-bubu-3)
	#call replace(p8.p9,i7/2-i8/2-i9/2,i,i7,i8,i9,Mbubu,dotrewrite-bubu-4)
	#call replace(Q.p9,-`Q2'/2-i11+i4/2-i7/2,i,i11,i4,i7,Mbubu,dotrewrite-bubu-5)
	#call replace(p5.p9,-i13+i7/2-i8/2-i9/2,i,i13,i7,i8,i9,Mbubu,dotrewrite-bubu-6)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-7)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 29
* path: (2, 3, 9)
#case 28
* path: (2, 8)
#case 88
* path: (8,)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Mbubu,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + Q.p;
	.sort:momrewrite-Mbubu-5;
	if (count(Mbubu,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p2.p;
	.sort:momrewrite-Mbubu-4;
	if (count(Mbubu,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p3.p;
	.sort:momrewrite-Mbubu-3;
	if (count(Mbubu,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p9.p;
	.sort:momrewrite-Mbubu-2;
	if (count(Mbubu,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Mbubu-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbubu()
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Mbubu,dotrewrite-bubu-0)
	#call replace(p3.p9,i3/2-i6/2+i9/2,i,i3,i6,i9,Mbubu,dotrewrite-bubu-1)
	#call replace(p8.p9,i7/2-i8/2-i9/2,i,i7,i8,i9,Mbubu,dotrewrite-bubu-2)
	#call replace(Q.p9,-`Q2'/2-i11+i4/2-i7/2,i,i11,i4,i7,Mbubu,dotrewrite-bubu-3)
	#call replace(Q.p3,-`Q2'/2+i1/2-i10-i12-i2/2-i3/2,i,i1,i10,i12,i2,i3,Mbubu,dotrewrite-bubu-4)
#endif
#break
#endswitch
#break
*--#] bubu : 
*--#[ lastar5 :
#case Mlastar5
#procedure SimpleDotlastar5()
if (count(Mlastar5,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 4, 5, 6)
#case 46
* path: (4, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Mlastar5,dotrewrite-lastar5-2)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-3)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p4.p6,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p8.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p8.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p4.p8,-i4/2+i5/2-i8/2,i,i4,i5,i8,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Mlastar5,dotrewrite-lastar5-3)
	#call replace(Q.p8,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p1.p8,-i1/2-i2/2+i7/2+i9,i,i1,i2,i7,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mlastar5,dotrewrite-lastar5-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-3)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p2.p4,`Q2'/2-i3/2-i5/2+i8/2,i,i3,i5,i8,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p7.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mlastar5,dotrewrite-lastar5-3)
	#call replace(Q.p7,-i1/2+i2/2-i5/2+i6/2,i,i1,i2,i5,i6,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p3.p7,i2/2+i3/2-i8/2-i9,i,i2,i3,i8,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case Q8
* path: (0, 1, 2, 8)
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p8.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mlastar5,dotrewrite-lastar5-3)
	#call replace(Q.p8,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p1.p8,-i1/2-i2/2+i7/2+i9,i,i1,i2,i7,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p7.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p3.p5,-`Q2'/2+i2/2+i4/2-i8/2,i,i2,i4,i8,Mlastar5,dotrewrite-lastar5-3)
	#call replace(Q.p7,-i1/2+i2/2-i5/2+i6/2,i,i1,i2,i5,i6,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p3.p7,i2/2+i3/2-i8/2-i9,i,i2,i3,i8,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p7.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Mlastar5,dotrewrite-lastar5-2)
	#call replace(Q.p7,-i1/2+i2/2-i5/2+i6/2,i,i1,i2,i5,i6,Mlastar5,dotrewrite-lastar5-3)
	#call replace(p3.p7,i2/2+i3/2-i8/2-i9,i,i2,i3,i8,i9,Mlastar5,dotrewrite-lastar5-4)
#endif
#break
#case 78
* path: (7, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p7.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p8.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mlastar5,dotrewrite-lastar5-2)
	#call replace(Q.p7,-i1/2+i2/2-i5/2+i6/2,i,i1,i2,i5,i6,Mlastar5,dotrewrite-lastar5-3)
	#call replace(Q.p8,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p7.p8,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case 47
* path: (4, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p7.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Mlastar5,dotrewrite-lastar5-3)
	#call replace(Q.p7,-i1/2+i2/2-i5/2+i6/2,i,i1,i2,i5,i6,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p4.p7,-i1/2-i3/2-i5/2+i6/2+i8/2+i9,i,i1,i3,i5,i6,i8,i9,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-1)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Mlastar5,dotrewrite-lastar5-3)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Mlastar5,dotrewrite-lastar5-4)
	#call replace(p1.p5,-`Q2'/2+i2/2+i6/2-i7/2,i,i2,i6,i7,Mlastar5,dotrewrite-lastar5-5)
#endif
#break
#case 15
* path: (1, 6, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-1)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-2)
	#call replace(p1.p5,-`Q2'/2+i2/2+i6/2-i7/2,i,i2,i6,i7,Mlastar5,dotrewrite-lastar5-3)
	#call replace(p3.p5,-`Q2'/2+i2/2+i4/2-i8/2,i,i2,i4,i8,Mlastar5,dotrewrite-lastar5-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 2, 3, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Mlastar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mlastar5-5;
	if (count(Mlastar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Mlastar5-4;
	if (count(Mlastar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mlastar5-3;
	if (count(Mlastar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mlastar5-2;
	if (count(Mlastar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Mlastar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotlastar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mlastar5,dotrewrite-lastar5-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Mlastar5,dotrewrite-lastar5-1)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mlastar5,dotrewrite-lastar5-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mlastar5,dotrewrite-lastar5-3)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Mlastar5,dotrewrite-lastar5-4)
#endif
#break
#endswitch
#break
*--#] lastar5 : 
*--#[ nostar0 :
#case Mnostar0
#procedure SimpleDotnostar0()
if (count(Mnostar0,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar0,dotrewrite-nostar0-1)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Mnostar0,dotrewrite-nostar0-2)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar0,dotrewrite-nostar0-3)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar0,dotrewrite-nostar0-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar0,dotrewrite-nostar0-2)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar0,dotrewrite-nostar0-3)
	#call replace(p1.p4,-i2/2-i3/2+i4/2-i5/2+i7/2+i8/2+i9,i,i2,i3,i4,i5,i7,i8,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p5.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Mnostar0,dotrewrite-nostar0-1)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar0,dotrewrite-nostar0-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar0,dotrewrite-nostar0-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar0,dotrewrite-nostar0-1)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar0,dotrewrite-nostar0-2)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar0,dotrewrite-nostar0-3)
	#call replace(p1.p8,`Q2'/2+i3/2-i4/2+i5/2-i6/2-i8/2-i9,i,i3,i4,i5,i6,i8,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#case 15
* path: (1, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Mnostar0,dotrewrite-nostar0-1)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar0,dotrewrite-nostar0-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar0,dotrewrite-nostar0-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar0,dotrewrite-nostar0-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnostar0,dotrewrite-nostar0-2)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar0,dotrewrite-nostar0-3)
	#call replace(p1.p3,`Q2'/2+i1/2+i2/2+i3/2-i4/2+i5/2-i6/2-i7/2-i8/2-i9,i,i1,i2,i3,i4,i5,i6,i7,i8,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#default
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Mnostar0,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar0-5;
	if (count(Mnostar0,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar0-4;
	if (count(Mnostar0,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar0-3;
	if (count(Mnostar0,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar0-2;
	if (count(Mnostar0,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Mnostar0-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar0()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar0,dotrewrite-nostar0-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar0,dotrewrite-nostar0-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Mnostar0,dotrewrite-nostar0-2)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar0,dotrewrite-nostar0-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar0,dotrewrite-nostar0-4)
#endif
#break
#endswitch
#break
*--#] nostar0 : 
*--#[ nostar5 :
#case Mnostar5
#procedure SimpleDotnostar5()
if (count(Mnostar5,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 4, 5, 6)
#case 46
* path: (4, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p8.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-2)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Mnostar5,dotrewrite-nostar5-3)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar5,dotrewrite-nostar5-4)
	#call replace(p4.p6,-`Q2'/2-i2/2-i5/2+i7/2+i8/2+i9,i,i2,i5,i7,i8,i9,Mnostar5,dotrewrite-nostar5-5)
#endif
#break
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p8.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p8.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Mnostar5,dotrewrite-nostar5-2)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar5,dotrewrite-nostar5-4)
	#call replace(p4.p8,`Q2'/2+i2/2-i4/2-i8/2-i9,i,i2,i4,i8,i9,Mnostar5,dotrewrite-nostar5-5)
#endif
#break
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Mnostar5,dotrewrite-nostar5-2)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-2)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p1.p4,-i2/2-i3/2+i4/2-i5/2+i7/2+i8/2+i9,i,i2,i3,i4,i5,i7,i8,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case 78
* path: (7, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar5,dotrewrite-nostar5-1)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar5,dotrewrite-nostar5-2)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p7.p8,-`Q2'/2-i2/2+i4/2-i5/2+i6/2+i9,i,i2,i4,i5,i6,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case 25
* path: (2, 7, 5)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p5.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar5,dotrewrite-nostar5-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar5,dotrewrite-nostar5-2)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p1.p8,`Q2'/2+i3/2-i4/2+i5/2-i6/2-i8/2-i9,i,i3,i4,i5,i6,i8,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q4
* path: (0, 1, 7, 4)
#case 17
* path: (1, 7)
#case 14
* path: (1, 7, 4)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p7.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Mnostar5,dotrewrite-nostar5-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar5,dotrewrite-nostar5-4)
	#call replace(p1.p4,-i2/2-i3/2+i4/2-i5/2+i7/2+i8/2+i9,i,i2,i3,i4,i5,i7,i8,i9,Mnostar5,dotrewrite-nostar5-5)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p8.p + p5.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar5,dotrewrite-nostar5-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case 15
* path: (1, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar5,dotrewrite-nostar5-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-2)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar5,dotrewrite-nostar5-3)
	#call replace(p1.p3,`Q2'/2+i1/2+i2/2+i3/2-i4/2+i5/2-i6/2-i7/2-i8/2-i9,i,i1,i2,i3,i4,i5,i6,i7,i8,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#default
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mnostar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar5-5;
	if (count(Mnostar5,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar5-4;
	if (count(Mnostar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar5-3;
	if (count(Mnostar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar5-2;
	if (count(Mnostar5,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Mnostar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar5()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar5,dotrewrite-nostar5-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar5,dotrewrite-nostar5-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Mnostar5,dotrewrite-nostar5-2)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar5,dotrewrite-nostar5-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar5,dotrewrite-nostar5-4)
#endif
#break
#endswitch
#break
*--#] nostar5 : 
*--#[ nostar6 :
#case Mnostar6
#procedure SimpleDotnostar6()
if (count(Mnostar6,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar6,dotrewrite-nostar6-1)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p3.p6,i1/2+i2/2+i5/2-i6/2-i7/2-i8/2-i9,i,i1,i2,i5,i6,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case Q4
* path: (0, 6, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p8.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Mnostar6,dotrewrite-nostar6-3)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar6,dotrewrite-nostar6-4)
	#call replace(p4.p6,-`Q2'/2-i2/2-i5/2+i7/2+i8/2+i9,i,i2,i5,i7,i8,i9,Mnostar6,dotrewrite-nostar6-5)
#endif
#break
#case Q8
* path: (0, 3, 8)
#case Q6
* path: (0, 3, 8, 6)
#case 38
* path: (3, 8)
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p8.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-0)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-1)
	#call replace(p3.p8,-i2/2+i3/2+i8/2,i,i2,i3,i8,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Mnostar6,dotrewrite-nostar6-3)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar6,dotrewrite-nostar6-4)
	#call replace(p3.p6,i1/2+i2/2+i5/2-i6/2-i7/2-i8/2-i9,i,i1,i2,i5,i6,i7,i8,i9,Mnostar6,dotrewrite-nostar6-5)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 28
* path: (2, 8)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar6,dotrewrite-nostar6-1)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p1.p4,-i2/2-i3/2+i4/2-i5/2+i7/2+i8/2+i9,i,i2,i3,i4,i5,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p5.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar6,dotrewrite-nostar6-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar6,dotrewrite-nostar6-2)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p1.p8,`Q2'/2+i3/2-i4/2+i5/2-i6/2-i8/2-i9,i,i3,i4,i5,i6,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case 35
* path: (3, 4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p8.p + p5.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar6,dotrewrite-nostar6-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p8.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Mnostar6,dotrewrite-nostar6-1)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mnostar6,dotrewrite-nostar6-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 15
* path: (1, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p8.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p2.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Mnostar6,dotrewrite-nostar6-1)
	#call replace(p2.p6,i1/2+i2/2-i7/2-i9,i,i1,i2,i7,i9,Mnostar6,dotrewrite-nostar6-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p2.p5,i1/2+i3/2-i7/2-i8/2-i9,i,i1,i3,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case Q1
* path: (0, 3, 2, 1)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Mnostar6,dotrewrite-nostar6-3)
	#call replace(p1.p3,`Q2'/2+i1/2+i2/2+i3/2-i4/2+i5/2-i6/2-i7/2-i8/2-i9,i,i1,i2,i3,i4,i5,i6,i7,i8,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#default
#case 22
* path: (2,)
#case 24
* path: (2, 3, 4)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Mnostar6,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Mnostar6-5;
	if (count(Mnostar6,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Mnostar6-4;
	if (count(Mnostar6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Mnostar6-3;
	if (count(Mnostar6,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Mnostar6-2;
	if (count(Mnostar6,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Mnostar6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotnostar6()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mnostar6,dotrewrite-nostar6-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Mnostar6,dotrewrite-nostar6-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Mnostar6,dotrewrite-nostar6-2)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Mnostar6,dotrewrite-nostar6-3)
	#call replace(Q.p7,-`Q2'/2-i1/2+i6/2+i9,i,i1,i6,i9,Mnostar6,dotrewrite-nostar6-4)
#endif
#break
#endswitch
#break
*--#] nostar6 : 
*--#[ bustar5 :
#case Mbustar5
#procedure SimpleDotbustar5()
if (count(Mbustar5,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 3)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p5.p - p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p7.p + p3.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + Q.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p4.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-0)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p3.p4,-i1/2+i2/2-i5/2+i6/2+i8,i,i1,i2,i5,i6,i8,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2+i8+i9,i,i1,i2,i3,i8,i9,Mbustar5,dotrewrite-bustar5-4)
#endif
#break
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p5.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + Q.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p1.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - p5.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	if (count(Mbustar5,1)) id Q.p2 = -i8 - i9;
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2+i9,i,i2,i3,i4,i7,i9,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p1.p2,-i1/2-i2/2+i3/2+i6/2-i7/2-i9,i,i1,i2,i3,i6,i7,i9,Mbustar5,dotrewrite-bustar5-4)
#endif
#break
#case Q2
* path: (0, 2)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p5.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + Q.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p2.p - p4.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p4.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	if (count(Mbustar5,1)) id Q.p2 = -i8 - i9;
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-1)
	#call replace(p2.p4,-i2/2-i4/2+i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-2)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p1.p2,-i1/2-i2/2+i3/2+i6/2-i7/2-i9,i,i1,i2,i3,i6,i7,i9,Mbustar5,dotrewrite-bustar5-4)
#endif
#break
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 47
* path: (4, 5, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p6.p + p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p5.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p7.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-0)
	#call replace(Q.p7,`Q2'/2-i6/2+i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-1)
	#call replace(p5.p7,i3/2-i5/2-i7/2,i,i3,i5,i7,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p4.p7,-i1/2+i4/2+i6/2+i8,i,i1,i4,i6,i8,Mbustar5,dotrewrite-bustar5-3)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case Q3
* path: (0, 7, 3)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p6.p + p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p5.p - p4.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p - p7.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(Q.p7,`Q2'/2-i6/2+i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-0)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p4.p7,-i1/2+i4/2+i6/2+i8,i,i1,i4,i6,i8,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p3.p4,-i1/2+i2/2-i5/2+i6/2+i8,i,i1,i2,i5,i6,i8,Mbustar5,dotrewrite-bustar5-4)
#endif
#break
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p5.p - p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p7.p + p3.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p6.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(Q.p6,`Q2'/2+i6/2-i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-0)
	#call replace(p1.p6,i1/2-i4/2+i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-2)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p3.p6,`Q2'/2-i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Mbustar5,dotrewrite-bustar5-4)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2+i8+i9,i,i1,i2,i3,i8,i9,Mbustar5,dotrewrite-bustar5-5)
#endif
#break
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p5.p - p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p + p1.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p - p7.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(Q.p7,`Q2'/2-i6/2+i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-0)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-2)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p1.p7,`Q2'/2-i1/2+i4/2-i7/2+i8,i,i1,i4,i7,i8,Mbustar5,dotrewrite-bustar5-4)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2+i8+i9,i,i1,i2,i3,i8,i9,Mbustar5,dotrewrite-bustar5-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q1
* path: (0, 6, 1)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p5.p - p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p5.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p6.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(Q.p6,`Q2'/2+i6/2-i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-0)
	#call replace(p1.p6,i1/2-i4/2+i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p5.p6,-i3/2+i5/2+i7/2+i9,i,i3,i5,i7,i9,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2+i9,i,i2,i3,i4,i7,i9,Mbustar5,dotrewrite-bustar5-4)
#endif
#break
#case Q3
* path: (0, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p6.p + p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p5.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Mbustar5,dotrewrite-bustar5-0)
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p3.p4,-i1/2+i2/2-i5/2+i6/2+i8,i,i1,i2,i5,i6,i8,Mbustar5,dotrewrite-bustar5-3)
#endif
#break
#case 27
* path: (2, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p6.p + p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p5.p - p2.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p - p7.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	if (count(Mbustar5,1)) id Q.p2 = -i8 - i9;
	#call replace(Q.p7,`Q2'/2-i6/2+i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-1)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Mbustar5,dotrewrite-bustar5-2)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p2.p3,i1/2-i2/2-i3/2-i6/2+i7/2-i8,i,i1,i2,i3,i6,i7,i8,Mbustar5,dotrewrite-bustar5-4)
	#call replace(p2.p7,i1/2-i3/2-i4/2+i5/2-i6/2+i7/2-i8,i,i1,i3,i4,i5,i6,i7,i8,Mbustar5,dotrewrite-bustar5-5)
#endif
#break
#case Q2
* path: (0, 6, 1, 2)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p5.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p4.p - p2.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p6.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	if (count(Mbustar5,1)) id Q.p2 = -i8 - i9;
	#call replace(Q.p6,`Q2'/2+i6/2-i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-1)
	#call replace(p1.p6,i1/2-i4/2+i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-2)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p1.p2,-i1/2-i2/2+i3/2+i6/2-i7/2-i9,i,i1,i2,i3,i6,i7,i9,Mbustar5,dotrewrite-bustar5-4)
	#call replace(p2.p6,-i1/2+i3/2+i4/2-i5/2+i6/2-i7/2-i9,i,i1,i3,i4,i5,i6,i7,i9,Mbustar5,dotrewrite-bustar5-5)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p6.p + p4.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - p5.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	if (count(Mbustar5,1)) id Q.p2 = -i8 - i9;
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-1)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Mbustar5,dotrewrite-bustar5-2)
	#call replace(Q.p3,`Q2'/2-i6/2+i7/2+i9,i,i6,i7,i9,Mbustar5,dotrewrite-bustar5-3)
	#call replace(p2.p3,i1/2-i2/2-i3/2-i6/2+i7/2-i8,i,i1,i2,i3,i6,i7,i8,Mbustar5,dotrewrite-bustar5-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p5.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + Q.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p5.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p4.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-0)
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-1)
	#call replace(Q.p1,`Q2'/2+i6/2-i7/2+i8,i,i6,i7,i8,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2+i9,i,i2,i3,i4,i7,i9,Mbustar5,dotrewrite-bustar5-3)
#endif
#break
#default
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 4, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Mbustar5,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p5.p;
	.sort:momrewrite-Mbustar5-4;
	if (count(Mbustar5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p6.p;
	.sort:momrewrite-Mbustar5-3;
	if (count(Mbustar5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p5.p;
	.sort:momrewrite-Mbustar5-2;
	if (count(Mbustar5,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Mbustar5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotbustar5()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Mbustar5,dotrewrite-bustar5-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i7/2,i,i6,i7,Mbustar5,dotrewrite-bustar5-1)
	#call replace(p4.p6,i1/2-i4/2-i6/2,i,i1,i4,i6,Mbustar5,dotrewrite-bustar5-2)
	#call replace(p5.p6,-i3/2+i5/2+i7/2+i9,i,i3,i5,i7,i9,Mbustar5,dotrewrite-bustar5-3)
#endif
#break
#endswitch
#break
*--#] bustar5 : 
*--#[ fastar2 :
#case Mfastar2
#procedure SimpleDotfastar2()
if (count(Mfastar2,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p3^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar2,dotrewrite-fastar2-1)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i9,i,i2,i3,i7,i9,Mfastar2,dotrewrite-fastar2-2)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p4.p5,i1/2+i3/2-i4/2-i5/2-i8,i,i1,i3,i4,i5,i8,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar2,dotrewrite-fastar2-1)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i8,i,i2,i3,i7,i8,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar2,dotrewrite-fastar2-1)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar2,dotrewrite-fastar2-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p6.p7,i1/2+i3/2-i6/2-i7/2-i8,i,i1,i3,i6,i7,i8,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar2,dotrewrite-fastar2-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-1)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar2,dotrewrite-fastar2-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p6.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar2,dotrewrite-fastar2-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-1)
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i8,i,i2,i3,i7,i8,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 14
* path: (1, 5, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar2,dotrewrite-fastar2-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i9,i,i2,i3,i7,i9,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case Q6
* path: (0, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-0)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-1)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i9,i,i2,i3,i7,i9,Mfastar2,dotrewrite-fastar2-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p4.p6,-`Q2'/2-i1/2-i2/2-i3/2+i5/2+i7/2+i8+i9,i,i1,i2,i3,i5,i7,i8,i9,Mfastar2,dotrewrite-fastar2-4)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar2,dotrewrite-fastar2-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Mfastar2,dotrewrite-fastar2-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar2,dotrewrite-fastar2-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Mfastar2,dotrewrite-fastar2-4)
	#call replace(p4.p7,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Mfastar2,dotrewrite-fastar2-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Mfastar2,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar2-4;
	if (count(Mfastar2,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar2-3;
	if (count(Mfastar2,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Mfastar2-2;
	if (count(Mfastar2,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Mfastar2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar2()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar2,dotrewrite-fastar2-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar2,dotrewrite-fastar2-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar2,dotrewrite-fastar2-2)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar2,dotrewrite-fastar2-3)
#endif
#break
#endswitch
#break
*--#] fastar2 : 
*--#[ fastar3 :
#case Mfastar3
#procedure SimpleDotfastar3()
if (count(Mfastar3,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p3^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#case 36
* path: (3, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i8,i,i2,i3,i7,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p5.p7,-`Q2'/2-i1/2-i2/2-i3/2+i4/2+i6/2+i8+i9,i,i1,i2,i3,i4,i6,i8,i9,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 14
* path: (1, 5, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i9,i,i2,i3,i7,i9,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case Q6
* path: (0, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i9,i,i2,i3,i7,i9,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p4.p6,-`Q2'/2-i1/2-i2/2-i3/2+i5/2+i7/2+i8+i9,i,i1,i2,i3,i5,i7,i8,i9,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Mfastar3,dotrewrite-fastar3-4)
	#call replace(p4.p7,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Mfastar3,dotrewrite-fastar3-5)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i9,i,i2,i3,i7,i9,Mfastar3,dotrewrite-fastar3-2)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p4.p5,i1/2+i3/2-i4/2-i5/2-i8,i,i1,i3,i4,i5,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-1)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p6.p7,i1/2+i3/2-i6/2-i7/2-i8,i,i1,i3,i6,i7,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p6.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p3.p5,-`Q2'/2-i3/2+i4/2+i8,i,i3,i4,i8,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i8,i,i2,i3,i7,i8,Mfastar3,dotrewrite-fastar3-4)
	#call replace(p5.p6,`Q2'/2+i2/2-i5/2-i6/2-i9,i,i2,i5,i6,i9,Mfastar3,dotrewrite-fastar3-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p6.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-1)
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i9,i,i1,i5,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i8,i,i2,i3,i7,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#case Q5
* path: (0, 5)
#case 35
* path: (3, 4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-2)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Mfastar3,dotrewrite-fastar3-3)
	#call replace(p3.p5,-`Q2'/2-i3/2+i4/2+i8,i,i3,i4,i8,Mfastar3,dotrewrite-fastar3-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Mfastar3,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Mfastar3-4;
	if (count(Mfastar3,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Mfastar3-3;
	if (count(Mfastar3,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Mfastar3-2;
	if (count(Mfastar3,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Mfastar3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotfastar3()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Mfastar3,dotrewrite-fastar3-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Mfastar3,dotrewrite-fastar3-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Mfastar3,dotrewrite-fastar3-2)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Mfastar3,dotrewrite-fastar3-3)
#endif
#break
#endswitch
#break
*--#] fastar3 : 
*--#[ t1star05 :
#case Mt1star05
#procedure SimpleDott1star05()
if (count(Mt1star05,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mt1star05,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Mt1star05-3;
	if (count(Mt1star05,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Mt1star05-2;
	if (count(Mt1star05,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star05-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star05()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star05,dotrewrite-t1star05-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star05,dotrewrite-t1star05-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star05,dotrewrite-t1star05-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Mt1star05,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star05-3;
	if (count(Mt1star05,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star05-2;
	if (count(Mt1star05,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Mt1star05-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star05()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star05,dotrewrite-t1star05-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star05,dotrewrite-t1star05-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star05,dotrewrite-t1star05-2)
#endif
#break
#endswitch
#break
*--#] t1star05 : 
*--#[ t1star24 :
#case Mt1star24
#procedure SimpleDott1star24()
if (count(Mt1star24,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mt1star24,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Mt1star24-3;
	if (count(Mt1star24,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Mt1star24-2;
	if (count(Mt1star24,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star24-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star24()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star24,dotrewrite-t1star24-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star24,dotrewrite-t1star24-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star24,dotrewrite-t1star24-2)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Mt1star24,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star24-3;
	if (count(Mt1star24,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Mt1star24-2;
	if (count(Mt1star24,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star24-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star24()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star24,dotrewrite-t1star24-0)
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Mt1star24,dotrewrite-t1star24-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star24,dotrewrite-t1star24-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Mt1star24,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star24-3;
	if (count(Mt1star24,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star24-2;
	if (count(Mt1star24,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Mt1star24-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star24()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star24,dotrewrite-t1star24-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star24,dotrewrite-t1star24-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star24,dotrewrite-t1star24-2)
#endif
#break
#endswitch
#break
*--#] t1star24 : 
*--#[ t1star34 :
#case Mt1star34
#procedure SimpleDott1star34()
if (count(Mt1star34,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Mt1star34,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Mt1star34-3;
	if (count(Mt1star34,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Mt1star34-2;
	if (count(Mt1star34,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Mt1star34-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star34()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Mt1star34,dotrewrite-t1star34-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Mt1star34,dotrewrite-t1star34-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star34,dotrewrite-t1star34-2)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Mt1star34,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Mt1star34-3;
	if (count(Mt1star34,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Mt1star34-2;
	if (count(Mt1star34,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Mt1star34-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star34()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Mt1star34,dotrewrite-t1star34-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star34,dotrewrite-t1star34-1)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Mt1star34,dotrewrite-t1star34-2)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mt1star34,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Mt1star34-3;
	if (count(Mt1star34,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Mt1star34-2;
	if (count(Mt1star34,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star34-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star34()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star34,dotrewrite-t1star34-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star34,dotrewrite-t1star34-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star34,dotrewrite-t1star34-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Mt1star34,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star34-3;
	if (count(Mt1star34,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star34-2;
	if (count(Mt1star34,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Mt1star34-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star34()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star34,dotrewrite-t1star34-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star34,dotrewrite-t1star34-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star34,dotrewrite-t1star34-2)
#endif
#break
#endswitch
#break
*--#] t1star34 : 
*--#[ t1star45 :
#case Mt1star45
#procedure SimpleDott1star45()
if (count(Mt1star45,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Mt1star45,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Mt1star45-3;
	if (count(Mt1star45,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Mt1star45-2;
	if (count(Mt1star45,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Mt1star45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star45()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Mt1star45,dotrewrite-t1star45-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star45,dotrewrite-t1star45-1)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Mt1star45,dotrewrite-t1star45-2)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Mt1star45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star45-3;
	if (count(Mt1star45,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Mt1star45-2;
	if (count(Mt1star45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star45()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star45,dotrewrite-t1star45-0)
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Mt1star45,dotrewrite-t1star45-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star45,dotrewrite-t1star45-2)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Mt1star45,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Mt1star45-3;
	if (count(Mt1star45,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Mt1star45-2;
	if (count(Mt1star45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p5.p;
	.sort:momrewrite-Mt1star45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star45()
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star45,dotrewrite-t1star45-0)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Mt1star45,dotrewrite-t1star45-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star45,dotrewrite-t1star45-2)
#endif
#break
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Mt1star45,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Mt1star45-3;
	if (count(Mt1star45,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Mt1star45-2;
	if (count(Mt1star45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Mt1star45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star45()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Mt1star45,dotrewrite-t1star45-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Mt1star45,dotrewrite-t1star45-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star45,dotrewrite-t1star45-2)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mt1star45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Mt1star45-3;
	if (count(Mt1star45,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Mt1star45-2;
	if (count(Mt1star45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star45()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star45,dotrewrite-t1star45-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star45,dotrewrite-t1star45-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star45,dotrewrite-t1star45-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Mt1star45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star45-3;
	if (count(Mt1star45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star45-2;
	if (count(Mt1star45,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Mt1star45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star45()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star45,dotrewrite-t1star45-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star45,dotrewrite-t1star45-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star45,dotrewrite-t1star45-2)
#endif
#break
#endswitch
#break
*--#] t1star45 : 
*--#[ t1star55 :
#case Mt1star55
#procedure SimpleDott1star55()
if (count(Mt1star55,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Mt1star55,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Mt1star55-3;
	if (count(Mt1star55,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Mt1star55-2;
	if (count(Mt1star55,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star55-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star55()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star55,dotrewrite-t1star55-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star55,dotrewrite-t1star55-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Mt1star55,dotrewrite-t1star55-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Mt1star55,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Mt1star55-3;
	if (count(Mt1star55,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Mt1star55-2;
	if (count(Mt1star55,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Mt1star55-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDott1star55()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Mt1star55,dotrewrite-t1star55-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Mt1star55,dotrewrite-t1star55-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Mt1star55,dotrewrite-t1star55-2)
#endif
#break
#endswitch
#break
*--#] t1star55 : 
*--#[ d20 :
#case Md20
#procedure SimpleDotd20()
if (count(Md20,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md20,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md20-2;
	if (count(Md20,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p - p4.p;
	.sort:momrewrite-Md20-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd20()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md20,dotrewrite-d20-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i5,i,i1,i2,i5,Md20,dotrewrite-d20-1)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md20,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md20-2;
	if (count(Md20,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p2.p - p4.p;
	.sort:momrewrite-Md20-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd20()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md20,dotrewrite-d20-0)
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md20,dotrewrite-d20-1)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i5,i,i1,i2,i5,Md20,dotrewrite-d20-2)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md20,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p2.p - p4.p;
	.sort:momrewrite-Md20-2;
	if (count(Md20,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md20-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd20()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md20,dotrewrite-d20-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i5,i,i1,i2,i5,Md20,dotrewrite-d20-1)
	#call replace(p1.p4,-`Q2'/2+i1/2-i3/2+i4/2-i5,i,i1,i3,i4,i5,Md20,dotrewrite-d20-2)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md20,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p2.p;
	.sort:momrewrite-Md20-2;
	if (count(Md20,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md20-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd20()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md20,dotrewrite-d20-0)
	#call replace(p1.p3,i2/2+i3/2-i4/2+i5,i,i2,i3,i4,i5,Md20,dotrewrite-d20-1)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md20,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md20-2;
	if (count(Md20,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md20-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd20()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md20,dotrewrite-d20-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md20,dotrewrite-d20-1)
#endif
#break
#endswitch
#break
*--#] d20 : 
*--#[ d5 :
#case Md5
#procedure SimpleDotd5()
if (count(Md5,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md5,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd5()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md5,dotrewrite-d5-0)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md5,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md5-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd5()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md5,dotrewrite-d5-0)
#endif
#break
#endswitch
#break
*--#] d5 : 
*--#[ d8 :
#case Md8
#procedure SimpleDotd8()
if (count(Md8,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id Q.p1^n? = i4^n;
	id p1.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md8,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md8-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd8()
	#call replace(p1.p2,-i1+i4-i5,i,i1,i4,i5,Md8,dotrewrite-d8-0)
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i5,i,i1,i2,i3,i5,Md8,dotrewrite-d8-1)
#endif
#break
#default
#case Q3
* path: (0, 3)
#case 13
* path: (1, 0, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md8,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md8-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd8()
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i4+i5,i,i1,i2,i3,i4,i5,Md8,dotrewrite-d8-0)
#endif
#break
#endswitch
#break
*--#] d8 : 
*--#[ d2 :
#case Md2
#procedure SimpleDotd2()
if (count(Md2,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md2,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd2()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md2,dotrewrite-d2-0)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md2,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md2-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd2()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md2,dotrewrite-d2-0)
#endif
#break
#endswitch
#break
*--#] d2 : 
*--#[ d19 :
#case Md19
#procedure SimpleDotd19()
if (count(Md19,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md19,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p2.p;
	.sort:momrewrite-Md19-2;
	if (count(Md19,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md19-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd19()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md19,dotrewrite-d19-0)
	#call replace(p1.p3,i2/2+i3/2-i4/2+i5,i,i2,i3,i4,i5,Md19,dotrewrite-d19-1)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md19,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md19-2;
	if (count(Md19,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md19-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd19()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md19,dotrewrite-d19-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md19,dotrewrite-d19-1)
#endif
#break
#endswitch
#break
*--#] d19 : 
*--#[ d16 :
#case Md16
#procedure SimpleDotd16()
if (count(Md16,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Md16,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md16-2;
	if (count(Md16,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p;
	.sort:momrewrite-Md16-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd16()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md16,dotrewrite-d16-0)
	#call replace(p1.p2,-i2/2-i3/2+i4/2+i5,i,i2,i3,i4,i5,Md16,dotrewrite-d16-1)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md16,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p3.p;
	.sort:momrewrite-Md16-2;
	if (count(Md16,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p3.p - p4.p;
	.sort:momrewrite-Md16-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd16()
	#call replace(Q.p3,-`Q2'/2+i1/2-i3/2,i,i1,i3,Md16,dotrewrite-d16-0)
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md16,dotrewrite-d16-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i3/2-i5,i,i1,i3,i5,Md16,dotrewrite-d16-2)
#endif
#break
#case Q4
* path: (0, 4)
#case 24
* path: (2, 0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md16,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + Q.p;
	.sort:momrewrite-Md16-2;
	if (count(Md16,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md16-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd16()
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md16,dotrewrite-d16-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i3/2-i5,i,i1,i3,i5,Md16,dotrewrite-d16-1)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md16,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p4.p - p3.p;
	.sort:momrewrite-Md16-2;
	if (count(Md16,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p;
	.sort:momrewrite-Md16-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd16()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md16,dotrewrite-d16-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i3/2-i5,i,i1,i3,i5,Md16,dotrewrite-d16-1)
	#call replace(p1.p4,`Q2'/2-i1/2+i2/2-i4/2-i5,i,i1,i2,i4,i5,Md16,dotrewrite-d16-2)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md16,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p3.p;
	.sort:momrewrite-Md16-2;
	if (count(Md16,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md16-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd16()
	#call replace(Q.p3,-`Q2'/2+i1/2-i3/2,i,i1,i3,Md16,dotrewrite-d16-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md16,dotrewrite-d16-1)
#endif
#break
#endswitch
#break
*--#] d16 : 
*--#[ d18 :
#case Md18
#procedure SimpleDotd18()
if (count(Md18,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md18,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p1.p;
	.sort:momrewrite-Md18-2;
	if (count(Md18,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p;
	.sort:momrewrite-Md18-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd18()
	#call replace(Q.p3,`Q2'/2-i1/2+i3/2,i,i1,i3,Md18,dotrewrite-d18-0)
	#call replace(p2.p3,-i1/2-i2/2+i4/2+i5,i,i1,i2,i4,i5,Md18,dotrewrite-d18-1)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md18,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p4.p + p1.p;
	.sort:momrewrite-Md18-2;
	if (count(Md18,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p;
	.sort:momrewrite-Md18-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd18()
	#call replace(Q.p3,`Q2'/2-i1/2+i3/2,i,i1,i3,Md18,dotrewrite-d18-0)
	#call replace(Q.p4,`Q2'/2+i1/2-i3/2-i5,i,i1,i3,i5,Md18,dotrewrite-d18-1)
	#call replace(p3.p4,`Q2'/2+i2/2-i3/2-i4/2-i5,i,i2,i3,i4,i5,Md18,dotrewrite-d18-2)
#endif
#break
#case Q4
* path: (0, 4)
#case 24
* path: (2, 0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md18,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p;
	.sort:momrewrite-Md18-2;
	if (count(Md18,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p4.p;
	.sort:momrewrite-Md18-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd18()
	#call replace(p2.p4,i1/2-i2/2-i4/2,i,i1,i2,i4,Md18,dotrewrite-d18-0)
	#call replace(Q.p4,`Q2'/2+i1/2-i3/2-i5,i,i1,i3,i5,Md18,dotrewrite-d18-1)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md18,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md18-2;
	if (count(Md18,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Md18-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd18()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md18,dotrewrite-d18-0)
	#call replace(p1.p4,i1/2-i2/2+i4/2,i,i1,i2,i4,Md18,dotrewrite-d18-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i3/2-i5,i,i1,i3,i5,Md18,dotrewrite-d18-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md18,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Md18-2;
	if (count(Md18,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p;
	.sort:momrewrite-Md18-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd18()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md18,dotrewrite-d18-0)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md18,dotrewrite-d18-1)
#endif
#break
#endswitch
#break
*--#] d18 : 
*--#[ d10 :
#case Md10
#procedure SimpleDotd10()
if (count(Md10,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id Q.p1^n? = i4^n;
	id p1.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md10,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md10-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd10()
	#call replace(p1.p2,-i1+i4-i5,i,i1,i4,i5,Md10,dotrewrite-d10-0)
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i5,i,i1,i2,i3,i5,Md10,dotrewrite-d10-1)
#endif
#break
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md10,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p3} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md10-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd10()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i5,i,i1,i2,i3,i5,Md10,dotrewrite-d10-0)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i4,i,i1,i2,i3,i4,Md10,dotrewrite-d10-1)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i4+i5,i,i1,i2,i3,i4,i5,Md10,dotrewrite-d10-2)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md10,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md10-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd10()
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i4+i5,i,i1,i2,i3,i4,i5,Md10,dotrewrite-d10-0)
#endif
#break
#endswitch
#break
*--#] d10 : 
*--#[ d25 :
#case Md25
#procedure SimpleDotd25()
if (count(Md25,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p1.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md25,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p4.p;
	.sort:momrewrite-Md25-2;
	if (count(Md25,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md25-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd25()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md25,dotrewrite-d25-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md25,dotrewrite-d25-1)
	#call replace(p3.p4,-i1/2-i2/2+i3/2+i4/2+i5,i,i1,i2,i3,i4,i5,Md25,dotrewrite-d25-2)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md25,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md25-2;
	if (count(Md25,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md25-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd25()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md25,dotrewrite-d25-0)
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md25,dotrewrite-d25-1)
	#call replace(p1.p3,`Q2'/2+i1/2-i4/2-i5,i,i1,i4,i5,Md25,dotrewrite-d25-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 14
* path: (1, 0, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md25,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md25-2;
	if (count(Md25,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md25-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd25()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md25,dotrewrite-d25-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md25,dotrewrite-d25-1)
#endif
#break
#endswitch
#break
*--#] d25 : 
*--#[ d4 :
#case Md4
#procedure SimpleDotd4()
if (count(Md4,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md4,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd4()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md4,dotrewrite-d4-0)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md4,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md4-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd4()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md4,dotrewrite-d4-0)
#endif
#break
#endswitch
#break
*--#] d4 : 
*--#[ d15 :
#case Md15
#procedure SimpleDotd15()
if (count(Md15,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md15,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md15-2;
	if (count(Md15,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p - p4.p;
	.sort:momrewrite-Md15-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd15()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md15,dotrewrite-d15-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i5,i,i1,i2,i5,Md15,dotrewrite-d15-1)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md15,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md15-2;
	if (count(Md15,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p2.p - p4.p;
	.sort:momrewrite-Md15-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd15()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md15,dotrewrite-d15-0)
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md15,dotrewrite-d15-1)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i5,i,i1,i2,i5,Md15,dotrewrite-d15-2)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md15,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p2.p - p4.p;
	.sort:momrewrite-Md15-2;
	if (count(Md15,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md15-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd15()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md15,dotrewrite-d15-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i5,i,i1,i2,i5,Md15,dotrewrite-d15-1)
	#call replace(p1.p4,-`Q2'/2+i1/2-i3/2+i4/2-i5,i,i1,i3,i4,i5,Md15,dotrewrite-d15-2)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md15,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p2.p;
	.sort:momrewrite-Md15-2;
	if (count(Md15,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md15-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd15()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md15,dotrewrite-d15-0)
	#call replace(p1.p3,i2/2+i3/2-i4/2+i5,i,i2,i3,i4,i5,Md15,dotrewrite-d15-1)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md15,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md15-2;
	if (count(Md15,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md15-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd15()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md15,dotrewrite-d15-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md15,dotrewrite-d15-1)
#endif
#break
#endswitch
#break
*--#] d15 : 
*--#[ d6 :
#case Md6
#procedure SimpleDotd6()
if (count(Md6,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md6,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd6()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md6,dotrewrite-d6-0)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md6,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md6-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd6()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md6,dotrewrite-d6-0)
#endif
#break
#endswitch
#break
*--#] d6 : 
*--#[ d11 :
#case Md11
#procedure SimpleDotd11()
if (count(Md11,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id Q.p1^n? = i4^n;
	id p1.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md11,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd11()
	#call replace(p1.p2,-i1+i4-i5,i,i1,i4,i5,Md11,dotrewrite-d11-0)
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i5,i,i1,i2,i3,i5,Md11,dotrewrite-d11-1)
#endif
#break
#default
#case Q3
* path: (0, 3)
#case 13
* path: (1, 0, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md11,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md11-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd11()
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i4+i5,i,i1,i2,i3,i4,i5,Md11,dotrewrite-d11-0)
#endif
#break
#endswitch
#break
*--#] d11 : 
*--#[ d7 :
#case Md7
#procedure SimpleDotd7()
if (count(Md7,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md7,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md7-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd7()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md7,dotrewrite-d7-0)
#endif
#break
#endswitch
#break
*--#] d7 : 
*--#[ d93 :
#case Md93
#procedure SimpleDotd93()
if (count(Md93,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p5^n? = i7^n;
	id p1.p5^n? = i8^n;
	id p2.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md93,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p + p4.p;
	.sort:momrewrite-Md93-3;
	if (count(Md93,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md93-2;
	if (count(Md93,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p - p5.p;
	.sort:momrewrite-Md93-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd93()
	if (count(Md93,1)) id p3.p5 = i7 - i9;
	if (count(Md93,1)) id p4.p5 = -i7 + i8;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md93,dotrewrite-d93-2)
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md93,dotrewrite-d93-3)
	#call replace(p3.p4,-i3/2-i4/2-i5/2+i6/2-i8+i9,i,i3,i4,i5,i6,i8,i9,Md93,dotrewrite-d93-4)
#endif
#break
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md93,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md93-3;
	if (count(Md93,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md93-2;
	if (count(Md93,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p + p5.p + p6.p;
	.sort:momrewrite-Md93-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd93()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md93,dotrewrite-d93-0)
	#call replace(p5.p6,-i5-i8+i9,i,i5,i8,i9,Md93,dotrewrite-d93-1)
	#call replace(Q.p6,-i1/2+i2/2-i3/2+i4/2-i7,i,i1,i2,i3,i4,i7,Md93,dotrewrite-d93-2)
	#call replace(p1.p6,-i1/2+i2/2+i5/2-i6/2-i9,i,i1,i2,i5,i6,i9,Md93,dotrewrite-d93-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md93,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md93-3;
	if (count(Md93,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md93-2;
	if (count(Md93,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p - p5.p;
	.sort:momrewrite-Md93-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd93()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md93,dotrewrite-d93-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md93,dotrewrite-d93-1)
	#call replace(p1.p2,i1/2+i2/2+i5/2-i6/2+i8-i9,i,i1,i2,i5,i6,i8,i9,Md93,dotrewrite-d93-2)
#endif
#break
#endswitch
#break
*--#] d93 : 
*--#[ d76 :
#case Md76
#procedure SimpleDotd76()
if (count(Md76,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md76,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + p1.p + p5.p;
	.sort:momrewrite-Md76-3;
	if (count(Md76,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p4.p;
	.sort:momrewrite-Md76-2;
	if (count(Md76,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p - p5.p;
	.sort:momrewrite-Md76-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd76()
	if (count(Md76,1)) id p3.p4 = -i7 + i8;
	if (count(Md76,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md76,dotrewrite-d76-2)
	#call replace(p4.p5,-i3/2-i4/2-i5/2+i6/2+i7-i9,i,i3,i4,i5,i6,i7,i9,Md76,dotrewrite-d76-3)
	#call replace(Q.p5,-i1/2+i2/2+i3/2+i4/2-i6/2-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md76,dotrewrite-d76-4)
#endif
#break
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md76,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md76-3;
	if (count(Md76,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md76-2;
	if (count(Md76,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md76-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd76()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md76,dotrewrite-d76-0)
	#call replace(p3.p6,-i3+i7-i9,i,i3,i7,i9,Md76,dotrewrite-d76-1)
	#call replace(Q.p6,`Q2'/2-i2/2-i3/2+i6/2-i9,i,i2,i3,i6,i9,Md76,dotrewrite-d76-2)
	#call replace(p1.p6,`Q2'/2-i2/2-i4/2+i5/2-i8,i,i2,i4,i5,i8,Md76,dotrewrite-d76-3)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md76,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md76-3;
	if (count(Md76,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p5.p;
	.sort:momrewrite-Md76-2;
	if (count(Md76,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md76-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd76()
	if (count(Md76,1)) id p3.p5 = -i8 + i9;
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Md76,dotrewrite-d76-1)
	#call replace(Q.p2,`Q2'/2+i2/2+i3/2-i6/2-i7+i9,i,i2,i3,i6,i7,i9,Md76,dotrewrite-d76-2)
	#call replace(Q.p5,-i1/2+i2/2+i3/2+i4/2-i6/2-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md76,dotrewrite-d76-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md76,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p3.p + Q.p;
	.sort:momrewrite-Md76-3;
	if (count(Md76,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + p1.p + p5.p;
	.sort:momrewrite-Md76-2;
	if (count(Md76,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md76-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd76()
	if (count(Md76,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md76,dotrewrite-d76-1)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md76,dotrewrite-d76-2)
	#call replace(Q.p5,-i1/2+i2/2+i3/2+i4/2-i6/2-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md76,dotrewrite-d76-3)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md76,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md76-3;
	if (count(Md76,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p4.p;
	.sort:momrewrite-Md76-2;
	if (count(Md76,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md76-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd76()
	if (count(Md76,1)) id p3.p4 = -i7 + i8;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md76,dotrewrite-d76-1)
	#call replace(p3.p6,-i3+i7-i9,i,i3,i7,i9,Md76,dotrewrite-d76-2)
	#call replace(Q.p6,`Q2'/2-i2/2-i3/2+i6/2-i9,i,i2,i3,i6,i9,Md76,dotrewrite-d76-3)
	#call replace(p4.p6,i3/2-i4/2+i5/2-i6/2-i8+i9,i,i3,i4,i5,i6,i8,i9,Md76,dotrewrite-d76-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md76,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md76-3;
	if (count(Md76,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md76-2;
	if (count(Md76,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md76-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd76()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md76,dotrewrite-d76-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md76,dotrewrite-d76-1)
	#call replace(Q.p2,`Q2'/2+i2/2+i3/2-i6/2-i7+i9,i,i2,i3,i6,i7,i9,Md76,dotrewrite-d76-2)
#endif
#break
#endswitch
#break
*--#] d76 : 
*--#[ d69 :
#case Md69
#procedure SimpleDotd69()
if (count(Md69,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md69,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md69-3;
	if (count(Md69,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p4.p;
	.sort:momrewrite-Md69-2;
	if (count(Md69,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md69-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd69()
	if (count(Md69,1)) id p3.p4 = i8 - i9;
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md69,dotrewrite-d69-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md69,dotrewrite-d69-2)
	#call replace(p2.p4,-i1/2-i2/2+i5/2+i7,i,i1,i2,i5,i7,Md69,dotrewrite-d69-3)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md69,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md69-3;
	if (count(Md69,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p5.p + p1.p;
	.sort:momrewrite-Md69-2;
	if (count(Md69,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p4.p;
	.sort:momrewrite-Md69-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd69()
	if (count(Md69,1)) id p3.p4 = i8 - i9;
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md69,dotrewrite-d69-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md69,dotrewrite-d69-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md69,dotrewrite-d69-3)
	#call replace(p4.p5,`Q2'/2+i2/2-i4/2-i5/2-i7,i,i2,i4,i5,i7,Md69,dotrewrite-d69-4)
#endif
#break
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md69,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md69-3;
	if (count(Md69,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p + p6.p;
	.sort:momrewrite-Md69-2;
	if (count(Md69,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md69-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd69()
	if (count(Md69,1)) id Q.p6 = i7 - i8;
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md69,dotrewrite-d69-1)
	#call replace(p3.p6,i2/2-i3/2-i6/2,i,i2,i3,i6,Md69,dotrewrite-d69-2)
	#call replace(p1.p6,i1/2+i2/2-i5/2-i9,i,i1,i2,i5,i9,Md69,dotrewrite-d69-3)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md69,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + Q.p;
	.sort:momrewrite-Md69-3;
	if (count(Md69,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p5.p;
	.sort:momrewrite-Md69-2;
	if (count(Md69,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md69-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd69()
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md69,dotrewrite-d69-0)
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md69,dotrewrite-d69-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md69,dotrewrite-d69-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md69,dotrewrite-d69-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md69,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md69-3;
	if (count(Md69,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p5.p;
	.sort:momrewrite-Md69-2;
	if (count(Md69,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md69-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd69()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md69,dotrewrite-d69-0)
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md69,dotrewrite-d69-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md69,dotrewrite-d69-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md69,dotrewrite-d69-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 4, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md69,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md69-3;
	if (count(Md69,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md69-2;
	if (count(Md69,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md69-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd69()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md69,dotrewrite-d69-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md69,dotrewrite-d69-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md69,dotrewrite-d69-2)
#endif
#break
#endswitch
#break
*--#] d69 : 
*--#[ d83 :
#case Md83
#procedure SimpleDotd83()
if (count(Md83,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 5)
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p3} = + p2.p - p5.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	if (count(Md83,1)) id Q.p5 = i7 - i8;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md83,dotrewrite-d83-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md83,dotrewrite-d83-2)
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-3)
	#call replace(p3.p5,i2/2+i3/2-i6/2-i9,i,i2,i3,i6,i9,Md83,dotrewrite-d83-4)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p6.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	if (count(Md83,1)) id p1.p4 = i8 - i9;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md83,dotrewrite-d83-1)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md83,dotrewrite-d83-2)
	#call replace(p1.p6,-i1/2-i2/2+i5/2+i9,i,i1,i2,i5,i9,Md83,dotrewrite-d83-3)
	#call replace(p4.p6,`Q2'/2+i2/2-i4/2-i6/2-i7,i,i2,i4,i6,i7,Md83,dotrewrite-d83-4)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p6.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md83,dotrewrite-d83-0)
	#call replace(p3.p6,-i2/2+i3/2+i6/2,i,i2,i3,i6,Md83,dotrewrite-d83-1)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md83,dotrewrite-d83-2)
	#call replace(p1.p6,-i1/2-i2/2+i5/2+i9,i,i1,i2,i5,i9,Md83,dotrewrite-d83-3)
#endif
#break
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	if (count(Md83,1)) id p1.p4 = i8 - i9;
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md83,dotrewrite-d83-2)
	#call replace(p2.p4,-i2/2-i3/2+i6/2+i7,i,i2,i3,i6,i7,Md83,dotrewrite-d83-3)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p6.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-0)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md83,dotrewrite-d83-1)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md83,dotrewrite-d83-2)
	#call replace(p1.p6,-i1/2-i2/2+i5/2+i9,i,i1,i2,i5,i9,Md83,dotrewrite-d83-3)
#endif
#break
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p5.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	if (count(Md83,1)) id Q.p5 = i7 - i8;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md83,dotrewrite-d83-1)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-2)
	#call replace(p3.p5,i2/2+i3/2-i6/2-i9,i,i2,i3,i6,i9,Md83,dotrewrite-d83-3)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p3} = + p2.p - p5.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p6.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	if (count(Md83,1)) id Q.p5 = i7 - i8;
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-1)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md83,dotrewrite-d83-2)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md83,dotrewrite-d83-3)
	#call replace(p5.p6,i1/2+i3/2-i5/2-i6/2-i9,i,i1,i3,i5,i6,i9,Md83,dotrewrite-d83-4)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p5.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	if (count(Md83,1)) id p1.p4 = i8 - i9;
	if (count(Md83,1)) id Q.p5 = i7 - i8;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md83,dotrewrite-d83-2)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-3)
	#call replace(p4.p5,-i2/2-i3/2+i6/2+i7-i8+i9,i,i2,i3,i6,i7,i8,i9,Md83,dotrewrite-d83-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q3
* path: (0, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md83,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md83-3;
	if (count(Md83,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md83-2;
	if (count(Md83,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md83-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd83()
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md83,dotrewrite-d83-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md83,dotrewrite-d83-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md83,dotrewrite-d83-2)
#endif
#break
#endswitch
#break
*--#] d83 : 
*--#[ d75 :
#case Md75
#procedure SimpleDotd75()
if (count(Md75,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md75,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md75-3;
	if (count(Md75,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md75-2;
	if (count(Md75,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md75-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd75()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md75,dotrewrite-d75-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md75,dotrewrite-d75-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md75,dotrewrite-d75-2)
	#call replace(p2.p4,-i2/2-i3/2+i6/2+i7,i,i2,i3,i6,i7,Md75,dotrewrite-d75-3)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md75,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md75-3;
	if (count(Md75,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = + Q.p - p5.p;
	.sort:momrewrite-Md75-2;
	if (count(Md75,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md75-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd75()
	if (count(Md75,1)) id p2.p5 = i7 - i8;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md75,dotrewrite-d75-1)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md75,dotrewrite-d75-2)
	#call replace(p2.p4,-i2/2-i3/2+i6/2+i7,i,i2,i3,i6,i7,Md75,dotrewrite-d75-3)
	#call replace(p4.p5,-i1/2-i3/2+i4/2+i5/2+i9,i,i1,i3,i4,i5,i9,Md75,dotrewrite-d75-4)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md75,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md75-3;
	if (count(Md75,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p6.p;
	.sort:momrewrite-Md75-2;
	if (count(Md75,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md75-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd75()
	if (count(Md75,1)) id p1.p6 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md75,dotrewrite-d75-1)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md75,dotrewrite-d75-2)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md75,dotrewrite-d75-3)
#endif
#break
#case Q5
* path: (0, 5)
#case 25
* path: (2, 5)
#case 35
* path: (3, 2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md75,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = + Q.p - p5.p;
	.sort:momrewrite-Md75-3;
	if (count(Md75,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md75-2;
	if (count(Md75,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md75-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd75()
	if (count(Md75,1)) id p2.p5 = i7 - i8;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md75,dotrewrite-d75-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md75,dotrewrite-d75-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md75,dotrewrite-d75-3)
	#call replace(p3.p5,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Md75,dotrewrite-d75-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md75,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md75-3;
	if (count(Md75,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md75-2;
	if (count(Md75,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md75-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd75()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md75,dotrewrite-d75-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md75,dotrewrite-d75-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md75,dotrewrite-d75-2)
#endif
#break
#endswitch
#break
*--#] d75 : 
*--#[ d70 :
#case Md70
#procedure SimpleDotd70()
if (count(Md70,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p1.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md70,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md70-3;
	if (count(Md70,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p5.p;
	.sort:momrewrite-Md70-2;
	if (count(Md70,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md70-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd70()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md70,dotrewrite-d70-0)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md70,dotrewrite-d70-1)
	#call replace(p2.p5,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Md70,dotrewrite-d70-2)
	#call replace(p3.p5,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md70,dotrewrite-d70-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md70,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md70-3;
	if (count(Md70,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md70-2;
	if (count(Md70,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p;
	.sort:momrewrite-Md70-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd70()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md70,dotrewrite-d70-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md70,dotrewrite-d70-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md70,dotrewrite-d70-2)
#endif
#break
#endswitch
#break
*--#] d70 : 
*--#[ d24 :
#case Md24
#procedure SimpleDotd24()
if (count(Md24,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p1.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md24,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p4.p;
	.sort:momrewrite-Md24-2;
	if (count(Md24,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md24-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd24()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md24,dotrewrite-d24-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md24,dotrewrite-d24-1)
	#call replace(p2.p4,`Q2'/2+i2/2-i3/2-i5,i,i2,i3,i5,Md24,dotrewrite-d24-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md24,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md24-2;
	if (count(Md24,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md24-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd24()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md24,dotrewrite-d24-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md24,dotrewrite-d24-1)
#endif
#break
#endswitch
#break
*--#] d24 : 
*--#[ d3 :
#case Md3
#procedure SimpleDotd3()
if (count(Md3,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md3,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md3-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd3()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md3,dotrewrite-d3-0)
#endif
#break
#endswitch
#break
*--#] d3 : 
*--#[ d22 :
#case Md22
#procedure SimpleDotd22()
if (count(Md22,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p1^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md22,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + p2.p;
	.sort:momrewrite-Md22-2;
	if (count(Md22,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md22-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd22()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md22,dotrewrite-d22-0)
	#call replace(p1.p3,-i1/2-i2/2+i4/2+i5,i,i1,i2,i4,i5,Md22,dotrewrite-d22-1)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md22,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md22-2;
	if (count(Md22,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p1.p;
	.sort:momrewrite-Md22-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd22()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md22,dotrewrite-d22-0)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md22,dotrewrite-d22-1)
#endif
#break
#endswitch
#break
*--#] d22 : 
*--#[ d42 :
#case Md42
#procedure SimpleDotd42()
if (count(Md42,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p2^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md42,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = + Q.p - p4.p;
	.sort:momrewrite-Md42-2;
	if (count(Md42,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md42-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd42()
	if (count(Md42,1)) id p2.p4 = i6 - i8;
	if (count(Md42,1)) id p3.p4 = i7 - i9;
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md42,dotrewrite-d42-2)
	#call replace(p2.p3,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7,i,i2,i3,i5,i6,i7,Md42,dotrewrite-d42-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md42,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md42-2;
	if (count(Md42,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md42-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd42()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md42,dotrewrite-d42-0)
	#call replace(p2.p3,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7,i,i2,i3,i5,i6,i7,Md42,dotrewrite-d42-1)
#endif
#break
#endswitch
#break
*--#] d42 : 
*--#[ d9 :
#case Md9
#procedure SimpleDotd9()
if (count(Md9,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id Q.p1^n? = i4^n;
	id p1.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md9,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md9-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd9()
	#call replace(p1.p2,-i1+i4-i5,i,i1,i4,i5,Md9,dotrewrite-d9-0)
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i5,i,i1,i2,i3,i5,Md9,dotrewrite-d9-1)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md9,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md9-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd9()
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i4+i5,i,i1,i2,i3,i4,i5,Md9,dotrewrite-d9-0)
#endif
#break
#endswitch
#break
*--#] d9 : 
*--#[ d51 :
#case Md51
#procedure SimpleDotd51()
if (count(Md51,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p5^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md51,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md51-2;
	if (count(Md51,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md51-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd51()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md51,dotrewrite-d51-0)
	#call replace(Q.p4,`Q2'/2+i2/2-i3/2-i6-i7,i,i2,i3,i6,i7,Md51,dotrewrite-d51-1)
	#call replace(p2.p4,-i1/2+i2/2+i4/2-i5/2-i9,i,i1,i2,i4,i5,i9,Md51,dotrewrite-d51-2)
	#call replace(p4.p5,i1/2+i2/2-i4/2-i5/2-i8,i,i1,i2,i4,i5,i8,Md51,dotrewrite-d51-3)
	#call replace(p2.p5,i1/2+i2/2-i4/2+i5/2-i8+i9,i,i1,i2,i4,i5,i8,i9,Md51,dotrewrite-d51-4)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md51,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p1.p - p4.p + p2.p;
	.sort:momrewrite-Md51-2;
	if (count(Md51,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md51-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd51()
	if (count(Md51,1)) id p1.p3 = i7 - i8;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md51,dotrewrite-d51-1)
	#call replace(p1.p4,-i1+i8-i9,i,i1,i8,i9,Md51,dotrewrite-d51-2)
	#call replace(Q.p4,`Q2'/2+i2/2-i3/2-i6-i7,i,i2,i3,i6,i7,Md51,dotrewrite-d51-3)
	#call replace(p3.p4,`Q2'/2+i1/2-i3/2-i4/2+i5/2-i6-i7+i9,i,i1,i3,i4,i5,i6,i7,i9,Md51,dotrewrite-d51-4)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md51,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md51-2;
	if (count(Md51,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p - p1.p - p4.p;
	.sort:momrewrite-Md51-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd51()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md51,dotrewrite-d51-0)
	#call replace(p1.p4,-i1+i8-i9,i,i1,i8,i9,Md51,dotrewrite-d51-1)
	#call replace(Q.p4,`Q2'/2+i2/2-i3/2-i6-i7,i,i2,i3,i6,i7,Md51,dotrewrite-d51-2)
	#call replace(p2.p4,-i1/2+i2/2+i4/2-i5/2-i9,i,i1,i2,i4,i5,i9,Md51,dotrewrite-d51-3)
#endif
#break
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md51,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + p2.p - p5.p;
	.sort:momrewrite-Md51-2;
	if (count(Md51,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md51-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd51()
	if (count(Md51,1)) id p1.p3 = i7 - i8;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md51,dotrewrite-d51-1)
	#call replace(p3.p5,-i1/2-i2/2+i4/2-i5/2+i6+i8-i9,i,i1,i2,i4,i5,i6,i8,i9,Md51,dotrewrite-d51-2)
#endif
#break
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md51,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md51-2;
	if (count(Md51,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p1.p + p4.p + p5.p;
	.sort:momrewrite-Md51-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd51()
	#call replace(p1.p4,-i1+i8-i9,i,i1,i8,i9,Md51,dotrewrite-d51-0)
	#call replace(Q.p4,`Q2'/2+i2/2-i3/2-i6-i7,i,i2,i3,i6,i7,Md51,dotrewrite-d51-1)
	#call replace(p4.p5,i1/2+i2/2-i4/2-i5/2-i8,i,i1,i2,i4,i5,i8,Md51,dotrewrite-d51-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md51,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md51-2;
	if (count(Md51,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p1.p - p5.p;
	.sort:momrewrite-Md51-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd51()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md51,dotrewrite-d51-0)
	#call replace(p2.p5,i1/2+i2/2-i4/2+i5/2-i8+i9,i,i1,i2,i4,i5,i8,i9,Md51,dotrewrite-d51-1)
#endif
#break
#endswitch
#break
*--#] d51 : 
*--#[ d52 :
#case Md52
#procedure SimpleDotd52()
if (count(Md52,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p2^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md52,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p3} = + p2.p - p4.p;
	.sort:momrewrite-Md52-2;
	if (count(Md52,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md52-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd52()
	if (count(Md52,1)) id Q.p4 = i6 - i8;
	#call replace(p2.p4,-i1/2+i2/2+i4/2,i,i1,i2,i4,Md52,dotrewrite-d52-1)
	#call replace(p2.p3,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7,i,i2,i3,i5,i6,i7,Md52,dotrewrite-d52-2)
	#call replace(p3.p4,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7-i9,i,i2,i3,i5,i6,i7,i9,Md52,dotrewrite-d52-3)
#endif
#break
#case 35
* path: (3, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md52,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + p2.p;
	.sort:momrewrite-Md52-2;
	if (count(Md52,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p3.p - p5.p;
	.sort:momrewrite-Md52-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd52()
	#call replace(Q.p5,`Q2'-i6-i7,i,i6,i7,Md52,dotrewrite-d52-0)
	#call replace(p1.p5,-i1/2-i2/2+i4/2+i8-i9,i,i1,i2,i4,i8,i9,Md52,dotrewrite-d52-1)
	#call replace(p3.p5,`Q2'/2+i2/2-i3/2-i5/2-i6,i,i2,i3,i5,i6,Md52,dotrewrite-d52-2)
#endif
#break
#case Q4
* path: (0, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md52,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p + Q.p;
	.sort:momrewrite-Md52-2;
	if (count(Md52,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p4.p;
	.sort:momrewrite-Md52-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd52()
	if (count(Md52,1)) id Q.p4 = i6 - i8;
	#call replace(p1.p4,-i1/2+i2/2-i4/2,i,i1,i2,i4,Md52,dotrewrite-d52-1)
	#call replace(p3.p4,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7-i9,i,i2,i3,i5,i6,i7,i9,Md52,dotrewrite-d52-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md52,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p1.p;
	.sort:momrewrite-Md52-2;
	if (count(Md52,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md52-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd52()
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md52,dotrewrite-d52-0)
	#call replace(p2.p3,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7,i,i2,i3,i5,i6,i7,Md52,dotrewrite-d52-1)
#endif
#break
#endswitch
#break
*--#] d52 : 
*--#[ d27 :
#case Md27
#procedure SimpleDotd27()
if (count(Md27,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p3^n? = i5^n;
	id Q.p4^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md27,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + Q.p - p1.p - p2.p - p3.p;
	.sort:momrewrite-Md27-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd27()
	#call replace(Q.p2,`Q2'-i5-i6-i7,i,i5,i6,i7,Md27,dotrewrite-d27-0)
	#call replace(p1.p2,-i1+i7-i8-i9,i,i1,i7,i8,i9,Md27,dotrewrite-d27-1)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2+i4/2-i6-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md27,dotrewrite-d27-2)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md27,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p - p4.p;
	.sort:momrewrite-Md27-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd27()
	#call replace(p3.p4,-`Q2'/2-i1/2+i2/2-i3/2-i4/2+i5+i6+i7-i8-i9,i,i1,i2,i3,i4,i5,i6,i7,i8,i9,Md27,dotrewrite-d27-0)
#endif
#break
#endswitch
#break
*--#] d27 : 
*--#[ d36 :
#case Md36
#procedure SimpleDotd36()
if (count(Md36,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p5^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p2.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 24
* path: (2, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md36,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p;
	.sort:momrewrite-Md36-2;
	if (count(Md36,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + p2.p + p4.p + p5.p;
	.sort:momrewrite-Md36-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd36()
	#call replace(p2.p4,-i2+i8-i9,i,i2,i8,i9,Md36,dotrewrite-d36-0)
	#call replace(Q.p4,`Q2'/2+i1/2-i3/2-i6-i7,i,i1,i3,i6,i7,Md36,dotrewrite-d36-1)
	#call replace(p4.p5,i1/2+i2/2-i4/2-i5/2-i8,i,i1,i2,i4,i5,i8,Md36,dotrewrite-d36-2)
#endif
#break
#case Q3
* path: (0, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md36,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p5.p + p1.p;
	.sort:momrewrite-Md36-2;
	if (count(Md36,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p3.p;
	.sort:momrewrite-Md36-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd36()
	if (count(Md36,1)) id p2.p3 = i7 - i8;
	#call replace(Q.p3,`Q2'/2-i1/2+i3/2,i,i1,i3,Md36,dotrewrite-d36-1)
	#call replace(p3.p5,-i1/2-i2/2+i4/2-i5/2+i6+i8-i9,i,i1,i2,i4,i5,i6,i8,i9,Md36,dotrewrite-d36-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md36,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Md36-2;
	if (count(Md36,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p5.p;
	.sort:momrewrite-Md36-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd36()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md36,dotrewrite-d36-0)
	#call replace(p1.p5,i1/2+i2/2-i4/2+i5/2-i8+i9,i,i1,i2,i4,i5,i8,i9,Md36,dotrewrite-d36-1)
#endif
#break
#endswitch
#break
*--#] d36 : 
*--#[ d35 :
#case Md35
#procedure SimpleDotd35()
if (count(Md35,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p5^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p2.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 24
* path: (2, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md35,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + p3.p + Q.p;
	.sort:momrewrite-Md35-2;
	if (count(Md35,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p - p5.p;
	.sort:momrewrite-Md35-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd35()
	#call replace(p2.p4,-i2+i7-i8-i9,i,i2,i7,i8,i9,Md35,dotrewrite-d35-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i3/2-i6-i7,i,i1,i3,i6,i7,Md35,dotrewrite-d35-1)
	#call replace(p4.p5,i2/2+i3/2-i4/2-i5/2-i7+i8,i,i2,i3,i4,i5,i7,i8,Md35,dotrewrite-d35-2)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md35,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p3.p;
	.sort:momrewrite-Md35-2;
	if (count(Md35,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p - p5.p;
	.sort:momrewrite-Md35-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd35()
	if (count(Md35,1)) id p2.p3 = -i7 + i8;
	#call replace(Q.p3,-`Q2'/2+i1/2-i3/2,i,i1,i3,Md35,dotrewrite-d35-1)
	#call replace(p3.p5,-i2/2-i3/2+i4/2-i5/2+i7-i8-i9,i,i2,i3,i4,i5,i7,i8,i9,Md35,dotrewrite-d35-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Md35,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p5.p - p3.p;
	.sort:momrewrite-Md35-2;
	if (count(Md35,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p;
	.sort:momrewrite-Md35-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd35()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md35,dotrewrite-d35-0)
	#call replace(p1.p5,-i2/2-i3/2+i4/2-i5/2+i6+i7-i8-i9,i,i2,i3,i4,i5,i6,i7,i8,i9,Md35,dotrewrite-d35-1)
#endif
#break
#endswitch
#break
*--#] d35 : 
*--#[ d98 :
#case Md98
#procedure SimpleDotd98()
if (count(Md98,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id p1.p4^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 2, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md98,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p4.p - Q.p;
	.sort:momrewrite-Md98-3;
	if (count(Md98,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p6.p;
	.sort:momrewrite-Md98-2;
	if (count(Md98,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md98-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd98()
	if (count(Md98,1)) id p4.p6 = -i8 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md98,dotrewrite-d98-1)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md98,dotrewrite-d98-2)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md98,dotrewrite-d98-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md98,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md98-3;
	if (count(Md98,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p6.p;
	.sort:momrewrite-Md98-2;
	if (count(Md98,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md98-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd98()
	if (count(Md98,1)) id p4.p6 = -i8 + i9;
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Md98,dotrewrite-d98-1)
	#call replace(Q.p1,`Q2'/2+i1/2+i4/2-i5/2+i7-i8,i,i1,i4,i5,i7,i8,Md98,dotrewrite-d98-2)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md98,dotrewrite-d98-3)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q3
* path: (0, 4, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md98,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md98-3;
	if (count(Md98,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p3.p;
	.sort:momrewrite-Md98-2;
	if (count(Md98,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p + p4.p + p5.p;
	.sort:momrewrite-Md98-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd98()
	if (count(Md98,1)) id p3.p4 = i7 - i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md98,dotrewrite-d98-1)
	#call replace(p4.p5,-i4-i7+i8,i,i4,i7,i8,Md98,dotrewrite-d98-2)
	#call replace(Q.p5,-`Q2'/2+i1/2+i4/2-i5/2-i8,i,i1,i4,i5,i8,Md98,dotrewrite-d98-3)
	#call replace(p3.p5,-i3/2+i4/2-i5/2+i6/2-i8+i9,i,i3,i4,i5,i6,i8,i9,Md98,dotrewrite-d98-4)
#endif
#break
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md98,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p6.p;
	.sort:momrewrite-Md98-3;
	if (count(Md98,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p3.p;
	.sort:momrewrite-Md98-2;
	if (count(Md98,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p - p6.p;
	.sort:momrewrite-Md98-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd98()
	if (count(Md98,1)) id p3.p4 = i7 - i9;
	if (count(Md98,1)) id p4.p6 = -i8 + i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md98,dotrewrite-d98-2)
	#call replace(p3.p6,-i3/2-i4/2+i5/2-i6/2-i7+i8,i,i3,i4,i5,i6,i7,i8,Md98,dotrewrite-d98-3)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md98,dotrewrite-d98-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 44
* path: (4,)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md98,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md98-3;
	if (count(Md98,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md98-2;
	if (count(Md98,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md98-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd98()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md98,dotrewrite-d98-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md98,dotrewrite-d98-1)
	#call replace(Q.p1,`Q2'/2+i1/2+i4/2-i5/2+i7-i8,i,i1,i4,i5,i7,i8,Md98,dotrewrite-d98-2)
#endif
#break
#endswitch
#break
*--#] d98 : 
*--#[ d89 :
#case Md89
#procedure SimpleDotd89()
if (count(Md89,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md89,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md89-3;
	if (count(Md89,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p4.p;
	.sort:momrewrite-Md89-2;
	if (count(Md89,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md89-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd89()
	if (count(Md89,1)) id p3.p4 = i8 - i9;
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md89,dotrewrite-d89-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md89,dotrewrite-d89-2)
	#call replace(p2.p4,-i1/2-i2/2+i5/2+i7,i,i1,i2,i5,i7,Md89,dotrewrite-d89-3)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md89,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md89-3;
	if (count(Md89,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p5.p + p1.p;
	.sort:momrewrite-Md89-2;
	if (count(Md89,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p4.p;
	.sort:momrewrite-Md89-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd89()
	if (count(Md89,1)) id p3.p4 = i8 - i9;
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md89,dotrewrite-d89-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md89,dotrewrite-d89-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md89,dotrewrite-d89-3)
	#call replace(p4.p5,`Q2'/2+i2/2-i4/2-i5/2-i7,i,i2,i4,i5,i7,Md89,dotrewrite-d89-4)
#endif
#break
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md89,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md89-3;
	if (count(Md89,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p + p6.p;
	.sort:momrewrite-Md89-2;
	if (count(Md89,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md89-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd89()
	if (count(Md89,1)) id Q.p6 = i7 - i8;
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md89,dotrewrite-d89-1)
	#call replace(p3.p6,i2/2-i3/2-i6/2,i,i2,i3,i6,Md89,dotrewrite-d89-2)
	#call replace(p1.p6,i1/2+i2/2-i5/2-i9,i,i1,i2,i5,i9,Md89,dotrewrite-d89-3)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md89,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + Q.p;
	.sort:momrewrite-Md89-3;
	if (count(Md89,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p5.p;
	.sort:momrewrite-Md89-2;
	if (count(Md89,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md89-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd89()
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md89,dotrewrite-d89-0)
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md89,dotrewrite-d89-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md89,dotrewrite-d89-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md89,dotrewrite-d89-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md89,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md89-3;
	if (count(Md89,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p5.p;
	.sort:momrewrite-Md89-2;
	if (count(Md89,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md89-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd89()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md89,dotrewrite-d89-0)
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md89,dotrewrite-d89-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md89,dotrewrite-d89-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md89,dotrewrite-d89-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 4, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md89,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md89-3;
	if (count(Md89,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md89-2;
	if (count(Md89,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md89-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd89()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md89,dotrewrite-d89-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md89,dotrewrite-d89-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md89,dotrewrite-d89-2)
#endif
#break
#endswitch
#break
*--#] d89 : 
*--#[ d110 :
#case Md110
#procedure SimpleDotd110()
if (count(Md110,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md110,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md110-3;
	if (count(Md110,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md110-2;
	if (count(Md110,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md110-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd110()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md110,dotrewrite-d110-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md110,dotrewrite-d110-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md110,dotrewrite-d110-2)
	#call replace(p2.p4,-i2/2-i3/2+i6/2+i7,i,i2,i3,i6,i7,Md110,dotrewrite-d110-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md110,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md110-3;
	if (count(Md110,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p6.p;
	.sort:momrewrite-Md110-2;
	if (count(Md110,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md110-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd110()
	if (count(Md110,1)) id p1.p6 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md110,dotrewrite-d110-1)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md110,dotrewrite-d110-2)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md110,dotrewrite-d110-3)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md110,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md110-3;
	if (count(Md110,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md110-2;
	if (count(Md110,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md110-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd110()
	if (count(Md110,1)) id p1.p6 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md110,dotrewrite-d110-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md110,dotrewrite-d110-2)
	#call replace(p3.p6,-i2/2+i3/2+i6/2,i,i2,i3,i6,Md110,dotrewrite-d110-3)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md110,dotrewrite-d110-4)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md110,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md110-3;
	if (count(Md110,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md110-2;
	if (count(Md110,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md110-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd110()
	if (count(Md110,1)) id p1.p6 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md110,dotrewrite-d110-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md110,dotrewrite-d110-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md110,dotrewrite-d110-3)
	#call replace(Q.p6,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md110,dotrewrite-d110-4)
	#call replace(p4.p6,`Q2'/2+i2/2-i4/2-i6/2-i7,i,i2,i4,i6,i7,Md110,dotrewrite-d110-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md110,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md110-3;
	if (count(Md110,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md110-2;
	if (count(Md110,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md110-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd110()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md110,dotrewrite-d110-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md110,dotrewrite-d110-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md110,dotrewrite-d110-2)
#endif
#break
#endswitch
#break
*--#] d110 : 
*--#[ d34 :
#case Md34
#procedure SimpleDotd34()
if (count(Md34,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p2^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 35
* path: (3, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md34,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md34-2;
	if (count(Md34,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + Q.p - p3.p - p5.p;
	.sort:momrewrite-Md34-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd34()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md34,dotrewrite-d34-0)
	#call replace(Q.p5,`Q2'-i6-i7,i,i6,i7,Md34,dotrewrite-d34-1)
	#call replace(p1.p5,`Q2'/2+i1/2-i4/2-i8-i9,i,i1,i4,i8,i9,Md34,dotrewrite-d34-2)
	#call replace(p3.p5,`Q2'/2+i2/2-i3/2-i5/2-i6,i,i2,i3,i5,i6,Md34,dotrewrite-d34-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md34,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md34-2;
	if (count(Md34,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md34-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd34()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md34,dotrewrite-d34-0)
	#call replace(p2.p3,-`Q2'/2-i2/2-i3/2+i5/2+i6+i7,i,i2,i3,i5,i6,i7,Md34,dotrewrite-d34-1)
#endif
#break
#endswitch
#break
*--#] d34 : 
*--#[ d38 :
#case Md38
#procedure SimpleDotd38()
if (count(Md38,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p1^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md38,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md38-2;
	if (count(Md38,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md38-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd38()
	#call replace(Q.p4,`Q2'-i6-i7,i,i6,i7,Md38,dotrewrite-d38-0)
	#call replace(p2.p4,-i1/2-i2/2+i5/2+i8-i9,i,i1,i2,i5,i8,i9,Md38,dotrewrite-d38-1)
	#call replace(p3.p4,`Q2'/2+i1/2-i3/2-i4/2-i6,i,i1,i3,i4,i6,Md38,dotrewrite-d38-2)
#endif
#break
#case 25
* path: (2, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md38,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p1.p + Q.p;
	.sort:momrewrite-Md38-2;
	if (count(Md38,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p2.p + p5.p;
	.sort:momrewrite-Md38-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd38()
	if (count(Md38,1)) id Q.p5 = i6 - i8;
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md38,dotrewrite-d38-1)
	#call replace(p3.p5,-`Q2'/2-i1/2-i3/2+i4/2+i6+i7-i9,i,i1,i3,i4,i6,i7,i9,Md38,dotrewrite-d38-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md38,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md38-2;
	if (count(Md38,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md38-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd38()
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md38,dotrewrite-d38-0)
	#call replace(p1.p3,-`Q2'/2-i1/2-i3/2+i4/2+i6+i7,i,i1,i3,i4,i6,i7,Md38,dotrewrite-d38-1)
#endif
#break
#endswitch
#break
*--#] d38 : 
*--#[ d45 :
#case Md45
#procedure SimpleDotd45()
if (count(Md45,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 4, 3)
#if ( `MOMS' > 0 )
	if (count(Md45,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md45-3;
	if (count(Md45,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md45-2;
	if (count(Md45,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd45()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md45,dotrewrite-d45-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md45,dotrewrite-d45-1)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md45,dotrewrite-d45-2)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md45-3;
	if (count(Md45,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Md45-2;
	if (count(Md45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd45()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md45,dotrewrite-d45-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md45,dotrewrite-d45-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md45,dotrewrite-d45-2)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md45-3;
	if (count(Md45,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Md45-2;
	if (count(Md45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd45()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md45,dotrewrite-d45-0)
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Md45,dotrewrite-d45-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md45,dotrewrite-d45-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md45,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md45-3;
	if (count(Md45,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md45-2;
	if (count(Md45,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md45-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd45()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md45,dotrewrite-d45-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md45,dotrewrite-d45-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md45,dotrewrite-d45-2)
#endif
#break
#endswitch
#break
*--#] d45 : 
*--#[ d49 :
#case Md49
#procedure SimpleDotd49()
if (count(Md49,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p3^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 0, 5)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md49,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md49-2;
	if (count(Md49,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p - p5.p;
	.sort:momrewrite-Md49-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd49()
	#call replace(p2.p5,-i2+i7-i8,i,i2,i7,i8,Md49,dotrewrite-d49-0)
	#call replace(Q.p5,`Q2'/2-i1/2-i2/2+i5/2-i8,i,i1,i2,i5,i8,Md49,dotrewrite-d49-1)
	#call replace(p3.p5,i2/2-i3/2+i4/2-i5/2-i7+i8-i9,i,i2,i3,i4,i5,i7,i8,i9,Md49,dotrewrite-d49-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Md49,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p - p3.p;
	.sort:momrewrite-Md49-2;
	if (count(Md49,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md49-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd49()
	#call replace(Q.p1,`Q2'/2+i1/2+i2/2-i5/2-i7+i8,i,i1,i2,i5,i7,i8,Md49,dotrewrite-d49-0)
	#call replace(p1.p3,-i2/2+i3/2-i4/2+i5/2+i6+i7-i8,i,i2,i3,i4,i5,i6,i7,i8,Md49,dotrewrite-d49-1)
#endif
#break
#endswitch
#break
*--#] d49 : 
*--#[ d12 :
#case Md12
#procedure SimpleDotd12()
if (count(Md12,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md12,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p2.p;
	.sort:momrewrite-Md12-2;
	if (count(Md12,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md12-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd12()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md12,dotrewrite-d12-0)
	#call replace(p1.p3,i2/2+i3/2-i4/2+i5,i,i2,i3,i4,i5,Md12,dotrewrite-d12-1)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md12,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md12-2;
	if (count(Md12,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md12-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd12()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md12,dotrewrite-d12-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md12,dotrewrite-d12-1)
#endif
#break
#endswitch
#break
*--#] d12 : 
*--#[ d23 :
#case Md23
#procedure SimpleDotd23()
if (count(Md23,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p1.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md23,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md23-2;
	if (count(Md23,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md23-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd23()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md23,dotrewrite-d23-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md23,dotrewrite-d23-1)
#endif
#break
#endswitch
#break
*--#] d23 : 
*--#[ d103 :
#case Md103
#procedure SimpleDotd103()
if (count(Md103,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md103,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md103-3;
	if (count(Md103,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md103-2;
	if (count(Md103,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p6.p;
	.sort:momrewrite-Md103-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd103()
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md103,dotrewrite-d103-0)
	#call replace(p4.p6,i2/2-i4/2-i6/2,i,i2,i4,i6,Md103,dotrewrite-d103-1)
	#call replace(Q.p4,-`Q2'/2+i5/2-i6/2-i7,i,i5,i6,i7,Md103,dotrewrite-d103-2)
	#call replace(p1.p6,i1/2-i3/2+i5/2+i8,i,i1,i3,i5,i8,Md103,dotrewrite-d103-3)
	#call replace(p1.p4,-i1/2+i3/2-i5/2-i8-i9,i,i1,i3,i5,i8,i9,Md103,dotrewrite-d103-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md103,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md103-3;
	if (count(Md103,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p6.p;
	.sort:momrewrite-Md103-2;
	if (count(Md103,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p;
	.sort:momrewrite-Md103-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd103()
	#call replace(p2.p4,-i2/2-i4/2+i6/2,i,i2,i4,i6,Md103,dotrewrite-d103-0)
	#call replace(Q.p4,-`Q2'/2+i5/2-i6/2-i7,i,i5,i6,i7,Md103,dotrewrite-d103-1)
	#call replace(p1.p4,-i1/2+i3/2-i5/2-i8-i9,i,i1,i3,i5,i8,i9,Md103,dotrewrite-d103-2)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md103,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md103-3;
	if (count(Md103,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md103-2;
	if (count(Md103,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p6.p;
	.sort:momrewrite-Md103-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd103()
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md103,dotrewrite-d103-0)
	#call replace(p2.p6,-i2/2+i4/2-i6/2,i,i2,i4,i6,Md103,dotrewrite-d103-1)
	#call replace(p1.p6,i1/2-i3/2+i5/2+i8,i,i1,i3,i5,i8,Md103,dotrewrite-d103-2)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md103,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md103-3;
	if (count(Md103,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md103-2;
	if (count(Md103,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p;
	.sort:momrewrite-Md103-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd103()
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md103,dotrewrite-d103-0)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md103,dotrewrite-d103-1)
	#call replace(Q.p4,-`Q2'/2+i5/2-i6/2-i7,i,i5,i6,i7,Md103,dotrewrite-d103-2)
	#call replace(p1.p4,-i1/2+i3/2-i5/2-i8-i9,i,i1,i3,i5,i8,i9,Md103,dotrewrite-d103-3)
	#call replace(p4.p5,-`Q2'/2-i2/2+i4/2+i5/2-i7,i,i2,i4,i5,i7,Md103,dotrewrite-d103-4)
#endif
#break
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md103,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md103-3;
	if (count(Md103,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + Q.p;
	.sort:momrewrite-Md103-2;
	if (count(Md103,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p3.p;
	.sort:momrewrite-Md103-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd103()
	#call replace(p1.p3,-i1/2-i3/2+i5/2,i,i1,i3,i5,Md103,dotrewrite-d103-0)
	#call replace(Q.p3,-`Q2'/2-i5/2+i6/2-i8,i,i5,i6,i8,Md103,dotrewrite-d103-1)
	#call replace(p2.p3,-i2/2+i4/2-i6/2-i7-i9,i,i2,i4,i6,i7,i9,Md103,dotrewrite-d103-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md103,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md103-3;
	if (count(Md103,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md103-2;
	if (count(Md103,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p;
	.sort:momrewrite-Md103-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd103()
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md103,dotrewrite-d103-0)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md103,dotrewrite-d103-1)
	#call replace(p2.p5,i2/2-i4/2+i6/2+i7,i,i2,i4,i6,i7,Md103,dotrewrite-d103-2)
#endif
#break
#endswitch
#break
*--#] d103 : 
*--#[ d104 :
#case Md104
#procedure SimpleDotd104()
if (count(Md104,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md104,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p6.p + p4.p;
	.sort:momrewrite-Md104-3;
	if (count(Md104,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p5.p;
	.sort:momrewrite-Md104-2;
	if (count(Md104,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p1.p - p2.p - p5.p;
	.sort:momrewrite-Md104-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd104()
	#call replace(p1.p2,-i1+i7-i8,i,i1,i7,i8,Md104,dotrewrite-d104-0)
	#call replace(Q.p5,-`Q2'/2-i5/2+i6/2,i,i5,i6,Md104,dotrewrite-d104-1)
	#call replace(p1.p5,-i7+i8-i9,i,i7,i8,i9,Md104,dotrewrite-d104-2)
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i8,i,i1,i2,i3,i8,Md104,dotrewrite-d104-3)
	#call replace(p2.p5,i1/2-i2/2+i4/2-i5/2+i9,i,i1,i2,i4,i5,i9,Md104,dotrewrite-d104-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md104,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p1.p - p5.p;
	.sort:momrewrite-Md104-3;
	if (count(Md104,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p6.p;
	.sort:momrewrite-Md104-2;
	if (count(Md104,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - Q.p;
	.sort:momrewrite-Md104-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd104()
	if (count(Md104,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md104,dotrewrite-d104-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md104,dotrewrite-d104-2)
	#call replace(Q.p4,i1/2-i2/2+i3/2+i5/2-i6/2-i7+i8,i,i1,i2,i3,i5,i6,i7,i8,Md104,dotrewrite-d104-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 3)
#case Q6
* path: (0, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 12
* path: (1, 3, 2)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md104,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md104-3;
	if (count(Md104,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - Q.p;
	.sort:momrewrite-Md104-2;
	if (count(Md104,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md104-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd104()
	if (count(Md104,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md104,dotrewrite-d104-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md104,dotrewrite-d104-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i7+i8,i,i1,i2,i3,i7,i8,Md104,dotrewrite-d104-3)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md104,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p6.p + p3.p;
	.sort:momrewrite-Md104-3;
	if (count(Md104,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p5.p;
	.sort:momrewrite-Md104-2;
	if (count(Md104,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md104-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd104()
	#call replace(Q.p5,-`Q2'/2-i5/2+i6/2,i,i5,i6,Md104,dotrewrite-d104-0)
	#call replace(p1.p5,-i7+i8-i9,i,i7,i8,i9,Md104,dotrewrite-d104-1)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i7+i8,i,i1,i2,i3,i7,i8,Md104,dotrewrite-d104-2)
	#call replace(p3.p5,-`Q2'/2-i1/2+i2/2-i4/2+i6/2+i7-i8,i,i1,i2,i4,i6,i7,i8,Md104,dotrewrite-d104-3)
#endif
#break
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md104,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p6.p + p4.p;
	.sort:momrewrite-Md104-3;
	if (count(Md104,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p5.p;
	.sort:momrewrite-Md104-2;
	if (count(Md104,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p4.p - p5.p;
	.sort:momrewrite-Md104-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd104()
	#call replace(Q.p5,-`Q2'/2-i5/2+i6/2,i,i5,i6,Md104,dotrewrite-d104-0)
	#call replace(p1.p5,-i7+i8-i9,i,i7,i8,i9,Md104,dotrewrite-d104-1)
	#call replace(p4.p5,-i1/2+i2/2-i4/2-i5/2+i7-i8,i,i1,i2,i4,i5,i7,i8,Md104,dotrewrite-d104-2)
	#call replace(Q.p4,i1/2-i2/2+i3/2+i5/2-i6/2-i7+i8,i,i1,i2,i3,i5,i6,i7,i8,Md104,dotrewrite-d104-3)
#endif
#break
#default
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md104,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - Q.p + p6.p;
	.sort:momrewrite-Md104-3;
	if (count(Md104,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p;
	.sort:momrewrite-Md104-2;
	if (count(Md104,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md104-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd104()
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md104,dotrewrite-d104-0)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i7+i8,i,i1,i2,i3,i7,i8,Md104,dotrewrite-d104-1)
	#call replace(Q.p4,i1/2-i2/2+i3/2+i5/2-i6/2-i7+i8,i,i1,i2,i3,i5,i6,i7,i8,Md104,dotrewrite-d104-2)
#endif
#break
#endswitch
#break
*--#] d104 : 
*--#[ d58 :
#case Md58
#procedure SimpleDotd58()
if (count(Md58,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id Q.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md58,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md58-3;
	if (count(Md58,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + Q.p - p1.p;
	.sort:momrewrite-Md58-2;
	if (count(Md58,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - p5.p;
	.sort:momrewrite-Md58-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd58()
	if (count(Md58,1)) id Q.p5 = -i7 - i9;
	#call replace(Q.p1,`Q2'-i7-i8,i,i7,i8,Md58,dotrewrite-d58-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md58,dotrewrite-d58-2)
	#call replace(p1.p2,`Q2'/2-i1/2-i2/2+i3/2-i8,i,i1,i2,i3,i8,Md58,dotrewrite-d58-3)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i6/2-i7-i9,i,i2,i3,i4,i6,i7,i9,Md58,dotrewrite-d58-4)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#if ( `MOMS' > 0 )
	if (count(Md58,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p5.p - p4.p;
	.sort:momrewrite-Md58-3;
	if (count(Md58,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md58-2;
	if (count(Md58,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p + p6.p - Q.p;
	.sort:momrewrite-Md58-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd58()
	#call replace(Q.p1,`Q2'-i7-i8,i,i7,i8,Md58,dotrewrite-d58-0)
	#call replace(Q.p6,i7+i8+i9,i,i7,i8,i9,Md58,dotrewrite-d58-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md58,dotrewrite-d58-2)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2-i7,i,i1,i2,i3,i7,Md58,dotrewrite-d58-3)
	#call replace(p1.p6,`Q2'/2-i1/2+i4/2-i6/2+i9,i,i1,i4,i6,i9,Md58,dotrewrite-d58-4)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md58,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md58-3;
	if (count(Md58,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p4.p;
	.sort:momrewrite-Md58-2;
	if (count(Md58,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p4.p - p1.p;
	.sort:momrewrite-Md58-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd58()
	#call replace(Q.p1,`Q2'-i7-i8,i,i7,i8,Md58,dotrewrite-d58-0)
	#call replace(p2.p4,-i2/2-i4/2+i5/2,i,i2,i4,i5,Md58,dotrewrite-d58-1)
	#call replace(p1.p2,`Q2'/2-i1/2-i2/2+i3/2-i8,i,i1,i2,i3,i8,Md58,dotrewrite-d58-2)
	#call replace(p1.p4,-`Q2'/2+i1/2+i4/2-i6/2+i7+i8+i9,i,i1,i4,i6,i7,i8,i9,Md58,dotrewrite-d58-3)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md58,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md58-3;
	if (count(Md58,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p2.p;
	.sort:momrewrite-Md58-2;
	if (count(Md58,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p + p6.p - Q.p;
	.sort:momrewrite-Md58-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd58()
	#call replace(Q.p1,`Q2'-i7-i8,i,i7,i8,Md58,dotrewrite-d58-0)
	#call replace(Q.p6,i7+i8+i9,i,i7,i8,i9,Md58,dotrewrite-d58-1)
	#call replace(p1.p2,`Q2'/2-i1/2-i2/2+i3/2-i8,i,i1,i2,i3,i8,Md58,dotrewrite-d58-2)
	#call replace(p1.p6,`Q2'/2-i1/2+i4/2-i6/2+i9,i,i1,i4,i6,i9,Md58,dotrewrite-d58-3)
	#call replace(p2.p6,-`Q2'/2+i1/2-i3/2-i4/2+i5/2+i7+i8,i,i1,i3,i4,i5,i7,i8,Md58,dotrewrite-d58-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md58,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - p5.p;
	.sort:momrewrite-Md58-3;
	if (count(Md58,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md58-2;
	if (count(Md58,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md58-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd58()
	if (count(Md58,1)) id Q.p5 = -i7 - i9;
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md58,dotrewrite-d58-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md58,dotrewrite-d58-2)
	#call replace(p2.p3,-`Q2'/2+i1/2-i2/2-i3/2+i7+i8,i,i1,i2,i3,i7,i8,Md58,dotrewrite-d58-3)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md58,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md58-3;
	if (count(Md58,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p4.p;
	.sort:momrewrite-Md58-2;
	if (count(Md58,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md58-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd58()
	#call replace(p2.p4,-i2/2-i4/2+i5/2,i,i2,i4,i5,Md58,dotrewrite-d58-0)
	#call replace(p2.p3,-`Q2'/2+i1/2-i2/2-i3/2+i7+i8,i,i1,i2,i3,i7,i8,Md58,dotrewrite-d58-1)
	#call replace(p3.p4,`Q2'/2-i1/2+i2/2-i5/2+i6/2-i7-i8,i,i1,i2,i5,i6,i7,i8,Md58,dotrewrite-d58-2)
#endif
#break
#endswitch
#break
*--#] d58 : 
*--#[ d57 :
#case Md57
#procedure SimpleDotd57()
if (count(Md57,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case Q6
* path: (0, 6)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p4.p + p6.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p5.p - p6.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	if (count(Md57,1)) id Q.p5 = -i8 - i9;
	if (count(Md57,1)) id Q.p6 = i7 - i9;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md57,dotrewrite-d57-2)
	#call replace(p4.p6,i1/2-i4/2-i6/2,i,i1,i4,i6,Md57,dotrewrite-d57-3)
	#call replace(p5.p6,`Q2'/2-i3/2+i5/2+i6/2-i7-i8,i,i3,i5,i6,i7,i8,Md57,dotrewrite-d57-4)
#endif
#break
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p1.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - p5.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	if (count(Md57,1)) id Q.p5 = -i8 - i9;
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md57,dotrewrite-d57-1)
	#call replace(p1.p2,-`Q2'/2-i1/2-i2/2+i3/2+i7+i8,i,i1,i2,i3,i7,i8,Md57,dotrewrite-d57-2)
	#call replace(p1.p5,`Q2'/2+i2/2-i3/2-i4/2+i6/2-i7-i8,i,i2,i3,i4,i6,i7,i8,Md57,dotrewrite-d57-3)
#endif
#break
#case Q2
* path: (0, 3, 2)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p6.p + p4.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + Q.p - p3.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p4.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	#call replace(Q.p3,`Q2'-i7-i8,i,i7,i8,Md57,dotrewrite-d57-0)
	#call replace(p2.p4,-i2/2-i4/2+i5/2,i,i2,i4,i5,Md57,dotrewrite-d57-1)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i7,i,i1,i2,i3,i7,Md57,dotrewrite-d57-2)
	#call replace(p3.p4,-i1/2+i2/2-i5/2+i6/2+i9,i,i1,i2,i5,i6,i9,Md57,dotrewrite-d57-3)
#endif
#break
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - Q.p + p6.p + p3.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p4.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	#call replace(Q.p3,`Q2'-i7-i8,i,i7,i8,Md57,dotrewrite-d57-0)
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Md57,dotrewrite-d57-1)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2-i8,i,i1,i2,i3,i8,Md57,dotrewrite-d57-2)
	#call replace(p3.p4,-i1/2+i2/2-i5/2+i6/2+i9,i,i1,i2,i5,i6,i9,Md57,dotrewrite-d57-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p6.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p6.p - Q.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	if (count(Md57,1)) id Q.p6 = i7 - i9;
	#call replace(Q.p3,`Q2'-i7-i8,i,i7,i8,Md57,dotrewrite-d57-1)
	#call replace(p1.p6,i1/2-i4/2+i6/2,i,i1,i4,i6,Md57,dotrewrite-d57-2)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2-i8,i,i1,i2,i3,i8,Md57,dotrewrite-d57-3)
	#call replace(p3.p6,`Q2'/2-i3/2+i5/2-i6/2-i8-i9,i,i3,i5,i6,i8,i9,Md57,dotrewrite-d57-4)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p2.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p6.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	if (count(Md57,1)) id Q.p6 = i7 - i9;
	#call replace(p1.p6,i1/2-i4/2+i6/2,i,i1,i4,i6,Md57,dotrewrite-d57-1)
	#call replace(p1.p2,-`Q2'/2-i1/2-i2/2+i3/2+i7+i8,i,i1,i2,i3,i7,i8,Md57,dotrewrite-d57-2)
	#call replace(p2.p6,-`Q2'/2-i1/2+i3/2+i4/2-i5/2+i7+i8,i,i1,i3,i4,i5,i7,i8,Md57,dotrewrite-d57-3)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p6.p + p4.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - p5.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p5.p - p3.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	if (count(Md57,1)) id Q.p5 = -i8 - i9;
	#call replace(Q.p3,`Q2'-i7-i8,i,i7,i8,Md57,dotrewrite-d57-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md57,dotrewrite-d57-2)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i7,i,i1,i2,i3,i7,Md57,dotrewrite-d57-3)
	#call replace(p3.p5,-`Q2'/2+i3/2+i5/2-i6/2+i7-i9,i,i3,i5,i6,i7,i9,Md57,dotrewrite-d57-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md57,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p4.p;
	.sort:momrewrite-Md57-3;
	if (count(Md57,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p4.p;
	.sort:momrewrite-Md57-2;
	if (count(Md57,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md57-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd57()
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Md57,dotrewrite-d57-0)
	#call replace(p2.p4,-i2/2-i4/2+i5/2,i,i2,i4,i5,Md57,dotrewrite-d57-1)
	#call replace(p1.p2,-`Q2'/2-i1/2-i2/2+i3/2+i7+i8,i,i1,i2,i3,i7,i8,Md57,dotrewrite-d57-2)
#endif
#break
#endswitch
#break
*--#] d57 : 
*--#[ d30 :
#case Md30
#procedure SimpleDotd30()
if (count(Md30,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md30,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p - p4.p;
	.sort:momrewrite-Md30-3;
	if (count(Md30,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md30-2;
	if (count(Md30,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - Q.p;
	.sort:momrewrite-Md30-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd30()
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Md30,dotrewrite-d30-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md30,dotrewrite-d30-1)
	#call replace(Q.p3,i1/2-i2/2+i4/2-i5/2,i,i1,i2,i4,i5,Md30,dotrewrite-d30-2)
#endif
#break
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md30,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p5.p + p3.p;
	.sort:momrewrite-Md30-3;
	if (count(Md30,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p - p4.p;
	.sort:momrewrite-Md30-2;
	if (count(Md30,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p4.p;
	.sort:momrewrite-Md30-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd30()
	#call replace(Q.p4,-`Q2'/2-i4/2+i5/2,i,i4,i5,Md30,dotrewrite-d30-0)
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md30,dotrewrite-d30-1)
	#call replace(Q.p3,i1/2-i2/2+i4/2-i5/2,i,i1,i2,i4,i5,Md30,dotrewrite-d30-2)
#endif
#break
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md30,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + Q.p;
	.sort:momrewrite-Md30-3;
	if (count(Md30,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md30-2;
	if (count(Md30,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md30-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd30()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md30,dotrewrite-d30-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md30,dotrewrite-d30-1)
	#call replace(Q.p3,i1/2-i2/2+i4/2-i5/2,i,i1,i2,i4,i5,Md30,dotrewrite-d30-2)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md30,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p + p5.p;
	.sort:momrewrite-Md30-3;
	if (count(Md30,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md30-2;
	if (count(Md30,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md30-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd30()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md30,dotrewrite-d30-0)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md30,dotrewrite-d30-1)
	#call replace(Q.p3,i1/2-i2/2+i4/2-i5/2,i,i1,i2,i4,i5,Md30,dotrewrite-d30-2)
#endif
#break
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md30,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md30-3;
	if (count(Md30,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md30-2;
	if (count(Md30,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p4.p;
	.sort:momrewrite-Md30-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd30()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md30,dotrewrite-d30-0)
	#call replace(Q.p4,-`Q2'/2-i4/2+i5/2,i,i4,i5,Md30,dotrewrite-d30-1)
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md30,dotrewrite-d30-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md30,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md30-3;
	if (count(Md30,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md30-2;
	if (count(Md30,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - Q.p;
	.sort:momrewrite-Md30-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd30()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md30,dotrewrite-d30-0)
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Md30,dotrewrite-d30-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md30,dotrewrite-d30-2)
#endif
#break
#endswitch
#break
*--#] d30 : 
*--#[ d41 :
#case Md41
#procedure SimpleDotd41()
if (count(Md41,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p2^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md41,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md41-2;
	if (count(Md41,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p - Q.p - p2.p;
	.sort:momrewrite-Md41-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd41()
	#call replace(Q.p5,`Q2'+i6+i7,i,i6,i7,Md41,dotrewrite-d41-0)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md41,dotrewrite-d41-1)
	#call replace(p2.p5,-`Q2'/2+i2/2-i4/2+i5/2-i7,i,i2,i4,i5,i7,Md41,dotrewrite-d41-2)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md41,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md41-2;
	if (count(Md41,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p5.p - Q.p - p4.p;
	.sort:momrewrite-Md41-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd41()
	#call replace(Q.p5,`Q2'+i6+i7,i,i6,i7,Md41,dotrewrite-d41-0)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md41,dotrewrite-d41-1)
	#call replace(p1.p4,-i1/2+i3/2-i5/2-i8-i9,i,i1,i3,i5,i8,i9,Md41,dotrewrite-d41-2)
	#call replace(p4.p5,-`Q2'/2-i2/2+i4/2+i5/2-i6,i,i2,i4,i5,i6,Md41,dotrewrite-d41-3)
#endif
#break
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md41,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p2.p - Q.p + p5.p;
	.sort:momrewrite-Md41-2;
	if (count(Md41,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p3.p;
	.sort:momrewrite-Md41-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd41()
	#call replace(p1.p3,-i1/2-i3/2+i5/2,i,i1,i3,i5,Md41,dotrewrite-d41-0)
	#call replace(Q.p3,-`Q2'-i6-i7-i8,i,i6,i7,i8,Md41,dotrewrite-d41-1)
	#call replace(p2.p3,`Q2'/2-i2/2+i4/2-i5/2+i7-i9,i,i2,i4,i5,i7,i9,Md41,dotrewrite-d41-2)
#endif
#break
#default
#case Q4
* path: (0, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md41,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md41-2;
	if (count(Md41,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p2.p + p4.p;
	.sort:momrewrite-Md41-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd41()
	#call replace(p1.p4,-i1/2+i3/2-i5/2-i8-i9,i,i1,i3,i5,i8,i9,Md41,dotrewrite-d41-0)
	#call replace(p2.p4,-`Q2'/2-i2/2-i4/2+i5/2-i6-i7,i,i2,i4,i5,i6,i7,Md41,dotrewrite-d41-1)
#endif
#break
#endswitch
#break
*--#] d41 : 
*--#[ d39 :
#case Md39
#procedure SimpleDotd39()
if (count(Md39,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p4^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 3, 2)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md39,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md39-2;
	if (count(Md39,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p2.p - p4.p;
	.sort:momrewrite-Md39-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd39()
	#call replace(p1.p2,-i1+i7-i8,i,i1,i7,i8,Md39,dotrewrite-d39-0)
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2-i3/2-i8,i,i1,i2,i3,i8,Md39,dotrewrite-d39-1)
	#call replace(p2.p4,i1/2-i2/2-i4/2+i5/2-i7+i8-i9,i,i1,i2,i4,i5,i7,i8,i9,Md39,dotrewrite-d39-2)
#endif
#break
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md39,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md39-2;
	if (count(Md39,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - Q.p - p5.p;
	.sort:momrewrite-Md39-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd39()
	#call replace(p1.p5,-i7+i8-i9,i,i7,i8,i9,Md39,dotrewrite-d39-0)
	#call replace(p3.p5,-`Q2'/2+i3/2-i4/2+i5/2-i6,i,i3,i4,i5,i6,Md39,dotrewrite-d39-1)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i7+i8,i,i1,i2,i3,i7,i8,Md39,dotrewrite-d39-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i3/2-i6-i7+i8,i,i1,i2,i3,i6,i7,i8,Md39,dotrewrite-d39-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 45
* path: (4, 0, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md39,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p4.p - p5.p;
	.sort:momrewrite-Md39-2;
	if (count(Md39,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p + p4.p + p5.p;
	.sort:momrewrite-Md39-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd39()
	#call replace(p1.p5,-i7+i8-i9,i,i7,i8,i9,Md39,dotrewrite-d39-0)
	#call replace(p4.p5,-i1/2+i2/2-i4/2-i5/2+i7-i8,i,i1,i2,i4,i5,i7,i8,Md39,dotrewrite-d39-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i3/2-i6-i7+i8,i,i1,i2,i3,i6,i7,i8,Md39,dotrewrite-d39-2)
#endif
#break
#default
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md39,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md39-2;
	if (count(Md39,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p - p4.p;
	.sort:momrewrite-Md39-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd39()
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2+i3/2-i7+i8,i,i1,i2,i3,i7,i8,Md39,dotrewrite-d39-0)
	#call replace(p3.p4,-i1/2+i2/2+i4/2-i5/2+i6+i7-i8,i,i1,i2,i4,i5,i6,i7,i8,Md39,dotrewrite-d39-1)
#endif
#break
#endswitch
#break
*--#] d39 : 
*--#[ d17 :
#case Md17
#procedure SimpleDotd17()
if (count(Md17,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p1^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md17,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p3.p;
	.sort:momrewrite-Md17-2;
	if (count(Md17,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - Q.p;
	.sort:momrewrite-Md17-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd17()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md17,dotrewrite-d17-0)
	#call replace(p1.p4,-i1/2+i2/2-i3/2+i5,i,i1,i2,i3,i5,Md17,dotrewrite-d17-1)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 12
* path: (1, 3, 2)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md17,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p3.p;
	.sort:momrewrite-Md17-2;
	if (count(Md17,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p3.p;
	.sort:momrewrite-Md17-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd17()
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md17,dotrewrite-d17-0)
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md17,dotrewrite-d17-1)
#endif
#break
#endswitch
#break
*--#] d17 : 
*--#[ d14 :
#case Md14
#procedure SimpleDotd14()
if (count(Md14,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p1^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 12
* path: (1, 3, 2)
#if ( `MOMS' > 0 )
	if (count(Md14,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - Q.p + p4.p;
	.sort:momrewrite-Md14-2;
	if (count(Md14,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p2.p;
	.sort:momrewrite-Md14-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd14()
	#call replace(p1.p2,-i1/2-i2/2+i4/2,i,i1,i2,i4,Md14,dotrewrite-d14-0)
	#call replace(Q.p2,-`Q2'/2+i3/2-i4/2-i5,i,i3,i4,i5,Md14,dotrewrite-d14-1)
#endif
#break
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md14,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p4.p;
	.sort:momrewrite-Md14-2;
	if (count(Md14,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p3.p;
	.sort:momrewrite-Md14-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd14()
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md14,dotrewrite-d14-0)
	#call replace(p1.p3,-i1/2+i2/2-i4/2-i5,i,i1,i2,i4,i5,Md14,dotrewrite-d14-1)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md14,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p4.p;
	.sort:momrewrite-Md14-2;
	if (count(Md14,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - Q.p;
	.sort:momrewrite-Md14-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd14()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md14,dotrewrite-d14-0)
	#call replace(p1.p4,-i1/2+i2/2-i4/2,i,i1,i2,i4,Md14,dotrewrite-d14-1)
#endif
#break
#endswitch
#break
*--#] d14 : 
*--#[ d13 :
#case Md13
#procedure SimpleDotd13()
if (count(Md13,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p1.p3^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md13,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md13-2;
	if (count(Md13,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = - Q.p - p4.p;
	.sort:momrewrite-Md13-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd13()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md13,dotrewrite-d13-0)
	#call replace(Q.p4,-`Q2'/2+i3/2-i4/2,i,i3,i4,Md13,dotrewrite-d13-1)
	#call replace(p1.p4,-`Q2'/2-i1/2+i2/2-i5,i,i1,i2,i5,Md13,dotrewrite-d13-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 12
* path: (1, 3, 2)
#case 33
* path: (3,)
#case 34
* path: (3, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md13,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md13-2;
	if (count(Md13,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md13-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd13()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md13,dotrewrite-d13-0)
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md13,dotrewrite-d13-1)
#endif
#break
#endswitch
#break
*--#] d13 : 
*--#[ d136 :
#case Md136
#procedure SimpleDotd136()
if (count(Md136,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p7^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p5.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	if (count(Md136,1)) id Q.p5 = i8 - i9;
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md136,dotrewrite-d136-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md136,dotrewrite-d136-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md136,dotrewrite-d136-3)
	#call replace(p5.p6,i1/2-i2/2+i3/2-i5/2-i6/2+i9,i,i1,i2,i3,i5,i6,i9,Md136,dotrewrite-d136-4)
#endif
#break
#case Q5
* path: (0, 2, 1, 5)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	if (count(Md136,1)) id Q.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md136,dotrewrite-d136-1)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md136,dotrewrite-d136-2)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-3)
	#call replace(p1.p5,i1/2-i2/2+i3/2+i5/2-i6/2+i8,i,i1,i2,i3,i5,i6,i8,Md136,dotrewrite-d136-4)
	#call replace(p2.p5,i1/2-i2/2+i3/2+i4/2-i6/2-i7/2+i8,i,i1,i2,i3,i4,i6,i7,i8,Md136,dotrewrite-d136-5)
#endif
#break
#case 16
* path: (1, 6)
#case 14
* path: (1, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p1.p + p2.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md136,dotrewrite-d136-0)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-1)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md136,dotrewrite-d136-2)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md136,dotrewrite-d136-3)
	#call replace(p1.p6,-`Q2'/2+i1/2-i5/2+i6/2-i8+i9,i,i1,i5,i6,i8,i9,Md136,dotrewrite-d136-4)
#endif
#break
#case 13
* path: (1, 6, 3)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p1.p + p2.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p - p6.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md136,dotrewrite-d136-0)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md136,dotrewrite-d136-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md136,dotrewrite-d136-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i3/2+i7/2-i9,i,i1,i3,i7,i9,Md136,dotrewrite-d136-4)
	#call replace(p1.p6,-`Q2'/2+i1/2-i5/2+i6/2-i8+i9,i,i1,i5,i6,i8,i9,Md136,dotrewrite-d136-5)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md136,dotrewrite-d136-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md136,dotrewrite-d136-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-2)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i8,i,i3,i4,i6,i8,Md136,dotrewrite-d136-3)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md136,dotrewrite-d136-4)
#endif
#break
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	if (count(Md136,1)) id Q.p5 = i8 - i9;
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Md136,dotrewrite-d136-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md136,dotrewrite-d136-2)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-3)
	#call replace(p1.p5,i1/2-i2/2+i3/2+i5/2-i6/2+i8,i,i1,i2,i3,i5,i6,i8,Md136,dotrewrite-d136-4)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	if (count(Md136,1)) id Q.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md136,dotrewrite-d136-1)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Md136,dotrewrite-d136-2)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md136,dotrewrite-d136-3)
	#call replace(p2.p5,i1/2-i2/2+i3/2+i4/2-i6/2-i7/2+i8,i,i1,i2,i3,i4,i6,i7,i8,Md136,dotrewrite-d136-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Md136,dotrewrite-d136-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md136,dotrewrite-d136-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-2)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md136,dotrewrite-d136-3)
#endif
#break
#case 14
* path: (1, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p5.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	if (count(Md136,1)) id Q.p5 = i8 - i9;
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md136,dotrewrite-d136-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md136,dotrewrite-d136-2)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md136,dotrewrite-d136-3)
	#call replace(p1.p5,i1/2-i2/2+i3/2+i5/2-i6/2+i8,i,i1,i2,i3,i5,i6,i8,Md136,dotrewrite-d136-4)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 27
* path: (2, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md136,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md136-4;
	if (count(Md136,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md136-3;
	if (count(Md136,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md136-2;
	if (count(Md136,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md136-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd136()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md136,dotrewrite-d136-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Md136,dotrewrite-d136-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md136,dotrewrite-d136-2)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i8,i,i3,i4,i6,i8,Md136,dotrewrite-d136-3)
#endif
#break
#endswitch
#break
*--#] d136 : 
*--#[ d127 :
#case Md127
#procedure SimpleDotd127()
if (count(Md127,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p6.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p - p6.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	if (count(Md127,1)) id Q.p3 = -i8 - i9;
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-2)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-3)
	#call replace(p2.p3,i1/2-i2/2-i3/2-i5/2+i7/2-i8,i,i1,i2,i3,i5,i7,i8,Md127,dotrewrite-d127-4)
#endif
#break
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p5.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-0)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md127,dotrewrite-d127-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-2)
	#call replace(p5.p6,-i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Md127,dotrewrite-d127-3)
#endif
#break
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p6.p - p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p1.p + p2.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md127,dotrewrite-d127-0)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md127,dotrewrite-d127-2)
	#call replace(p2.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md127,dotrewrite-d127-3)
	#call replace(p2.p7,`Q2'/2-i2/2+i3/2-i7/2+i8+i9,i,i2,i3,i7,i8,i9,Md127,dotrewrite-d127-4)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case Q5
* path: (0, 7, 5)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p6.p - p4.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md127,dotrewrite-d127-1)
	#call replace(p5.p6,-i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Md127,dotrewrite-d127-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md127,dotrewrite-d127-3)
	#call replace(p6.p7,i1/2-i2/2+i3/2-i4/2+i9,i,i1,i2,i3,i4,i9,Md127,dotrewrite-d127-4)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p3.p - p4.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	if (count(Md127,1)) id Q.p3 = -i8 - i9;
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md127,dotrewrite-d127-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md127,dotrewrite-d127-3)
	#call replace(p3.p7,-i1/2+i2/2-i3/2+i5/2-i7/2-i9,i,i1,i2,i3,i5,i7,i9,Md127,dotrewrite-d127-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case 12
* path: (1, 2)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p6.p - p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-1)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-2)
	#call replace(p1.p4,i4/2+i5/2-i7/2+i8,i,i4,i5,i7,i8,Md127,dotrewrite-d127-3)
	#call replace(p2.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md127,dotrewrite-d127-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p6.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-0)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-1)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-2)
	#call replace(p2.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md127,dotrewrite-d127-3)
#endif
#break
#case Q7
* path: (0, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md127,dotrewrite-d127-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md127,dotrewrite-d127-2)
	#call replace(p6.p7,i1/2-i2/2+i3/2-i4/2+i9,i,i1,i2,i3,i4,i9,Md127,dotrewrite-d127-3)
#endif
#break
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p6.p - p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p6.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-0)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md127,dotrewrite-d127-2)
	#call replace(p6.p7,i1/2-i2/2+i3/2-i4/2+i9,i,i1,i2,i3,i4,i9,Md127,dotrewrite-d127-3)
	#call replace(p2.p7,`Q2'/2-i2/2+i3/2-i7/2+i8+i9,i,i2,i3,i7,i8,i9,Md127,dotrewrite-d127-4)
#endif
#break
#case 24
* path: (2, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p6.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p3.p - p4.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	if (count(Md127,1)) id Q.p3 = -i8 - i9;
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-1)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-2)
	#call replace(p2.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md127,dotrewrite-d127-3)
	#call replace(p2.p3,i1/2-i2/2-i3/2-i5/2+i7/2-i8,i,i1,i2,i3,i5,i7,i8,Md127,dotrewrite-d127-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p6.p - p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-1)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md127,dotrewrite-d127-3)
	#call replace(p1.p7,`Q2'/2-i1/2+i4/2-i7/2+i8,i,i1,i4,i7,i8,Md127,dotrewrite-d127-4)
	#call replace(p2.p7,`Q2'/2-i2/2+i3/2-i7/2+i8+i9,i,i2,i3,i7,i8,i9,Md127,dotrewrite-d127-5)
#endif
#break
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p3.p - p4.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p5.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	if (count(Md127,1)) id Q.p3 = -i8 - i9;
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-2)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md127,dotrewrite-d127-3)
	#call replace(p3.p5,i1/2-i2/2-i4/2-i5/2+i6/2+i7/2+i9,i,i1,i2,i4,i5,i6,i7,i9,Md127,dotrewrite-d127-4)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p - p3.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	if (count(Md127,1)) id Q.p3 = -i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-1)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-2)
	#call replace(Q.p2,`Q2'/2+i1/2-i5/2+i9,i,i1,i5,i9,Md127,dotrewrite-d127-3)
	#call replace(p2.p3,i1/2-i2/2-i3/2-i5/2+i7/2-i8,i,i1,i2,i3,i5,i7,i8,Md127,dotrewrite-d127-4)
	#call replace(p1.p3,i1/2-i2/2-i4/2-i5/2+i6/2+i7/2-i8,i,i1,i2,i4,i5,i6,i7,i8,Md127,dotrewrite-d127-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case 11
* path: (1,)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 16
* path: (1, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 56
* path: (5, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md127,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md127-4;
	if (count(Md127,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md127-3;
	if (count(Md127,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md127-2;
	if (count(Md127,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md127-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd127()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md127,dotrewrite-d127-0)
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Md127,dotrewrite-d127-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md127,dotrewrite-d127-2)
	#call replace(p1.p4,i4/2+i5/2-i7/2+i8,i,i4,i5,i7,i8,Md127,dotrewrite-d127-3)
#endif
#break
#endswitch
#break
*--#] d127 : 
*--#[ d144 :
#case Md144
#procedure SimpleDotd144()
if (count(Md144,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#case 36
* path: (3, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md144,dotrewrite-d144-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-1)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md144,dotrewrite-d144-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-1)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md144,dotrewrite-d144-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i9,i,i1,i2,i6,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-1)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i8,i,i1,i2,i6,i8,Md144,dotrewrite-d144-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md144,dotrewrite-d144-3)
	#call replace(p5.p7,-`Q2'/2-i1/2-i2/2-i3/2+i4/2+i6/2+i8+i9,i,i1,i2,i3,i4,i6,i8,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 14
* path: (1, 5, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md144,dotrewrite-d144-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md144,dotrewrite-d144-3)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i8,i,i2,i3,i7,i8,Md144,dotrewrite-d144-4)
#endif
#break
#case Q6
* path: (0, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md144,dotrewrite-d144-0)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-1)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i8,i,i2,i3,i7,i8,Md144,dotrewrite-d144-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md144,dotrewrite-d144-3)
	#call replace(p4.p6,-`Q2'/2-i1/2-i2/2-i3/2+i5/2+i7/2+i8+i9,i,i1,i2,i3,i5,i7,i8,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md144,dotrewrite-d144-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md144,dotrewrite-d144-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md144,dotrewrite-d144-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i9,i,i1,i2,i6,i9,Md144,dotrewrite-d144-4)
	#call replace(p4.p7,`Q2'/2+i2/2-i4/2-i7/2-i8,i,i2,i4,i7,i8,Md144,dotrewrite-d144-5)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md144,dotrewrite-d144-1)
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md144,dotrewrite-d144-3)
	#call replace(p1.p7,-i1/2-i2/2+i6/2+i9,i,i1,i2,i6,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md144,dotrewrite-d144-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-1)
	#call replace(p2.p4,-i2/2-i3/2+i7/2+i8,i,i2,i3,i7,i8,Md144,dotrewrite-d144-2)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i8,i,i1,i2,i6,i8,Md144,dotrewrite-d144-3)
	#call replace(p4.p5,i1/2+i3/2-i4/2-i5/2-i9,i,i1,i3,i4,i5,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-1)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md144,dotrewrite-d144-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md144,dotrewrite-d144-3)
	#call replace(p6.p7,i1/2+i3/2-i6/2-i7/2-i9,i,i1,i3,i6,i7,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p6.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md144,dotrewrite-d144-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-1)
	#call replace(p3.p5,-`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md144,dotrewrite-d144-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md144,dotrewrite-d144-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md144,dotrewrite-d144-4)
	#call replace(p5.p6,`Q2'/2+i2/2-i5/2-i6/2-i8,i,i2,i5,i6,i8,Md144,dotrewrite-d144-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p + p6.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md144,dotrewrite-d144-1)
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-2)
	#call replace(Q.p6,-`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md144,dotrewrite-d144-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md144,dotrewrite-d144-4)
#endif
#break
#case Q5
* path: (0, 5)
#case 35
* path: (3, 4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md144,dotrewrite-d144-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-2)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i8,i,i1,i2,i6,i8,Md144,dotrewrite-d144-3)
	#call replace(p3.p5,-`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md144,dotrewrite-d144-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md144,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md144-4;
	if (count(Md144,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md144-3;
	if (count(Md144,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md144-2;
	if (count(Md144,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md144-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd144()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md144,dotrewrite-d144-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md144,dotrewrite-d144-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md144,dotrewrite-d144-2)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md144,dotrewrite-d144-3)
#endif
#break
#endswitch
#break
*--#] d144 : 
*--#[ d86 :
#case Md86
#procedure SimpleDotd86()
if (count(Md86,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id p1.p4^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p + p4.p + p5.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md86,dotrewrite-d86-0)
	#call replace(p4.p5,-i4-i7+i8,i,i4,i7,i8,Md86,dotrewrite-d86-1)
	#call replace(Q.p5,-`Q2'/2+i1/2+i4/2-i5/2-i8,i,i1,i4,i5,i8,Md86,dotrewrite-d86-2)
	#call replace(p2.p5,-`Q2'/2+i1/2+i3/2-i6/2-i9,i,i1,i3,i6,i9,Md86,dotrewrite-d86-3)
#endif
#break
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + p1.p - Q.p - p5.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md86,dotrewrite-d86-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md86,dotrewrite-d86-1)
	#call replace(Q.p5,-`Q2'/2+i1/2+i4/2-i5/2-i8,i,i1,i4,i5,i8,Md86,dotrewrite-d86-2)
	#call replace(p1.p5,-`Q2'/2+i1/2-i4/2+i5/2-i7,i,i1,i4,i5,i7,Md86,dotrewrite-d86-3)
	#call replace(p2.p5,-`Q2'/2+i1/2+i3/2-i6/2-i9,i,i1,i3,i6,i9,Md86,dotrewrite-d86-4)
	#call replace(Q.p1,`Q2'/2+i1/2+i4/2-i5/2+i7-i8,i,i1,i4,i5,i7,i8,Md86,dotrewrite-d86-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p6.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	if (count(Md86,1)) id p4.p6 = -i8 + i9;
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Md86,dotrewrite-d86-1)
	#call replace(Q.p1,`Q2'/2+i1/2+i4/2-i5/2+i7-i8,i,i1,i4,i5,i7,i8,Md86,dotrewrite-d86-2)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md86,dotrewrite-d86-3)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q5
* path: (0, 3, 5)
#case Q3
* path: (0, 4, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p3.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p + p4.p + p5.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	if (count(Md86,1)) id p3.p4 = i7 - i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md86,dotrewrite-d86-1)
	#call replace(p4.p5,-i4-i7+i8,i,i4,i7,i8,Md86,dotrewrite-d86-2)
	#call replace(Q.p5,-`Q2'/2+i1/2+i4/2-i5/2-i8,i,i1,i4,i5,i8,Md86,dotrewrite-d86-3)
	#call replace(p3.p5,-i3/2+i4/2-i5/2+i6/2-i8+i9,i,i3,i4,i5,i6,i8,i9,Md86,dotrewrite-d86-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p4.p - Q.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p6.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	if (count(Md86,1)) id p4.p6 = -i8 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md86,dotrewrite-d86-1)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md86,dotrewrite-d86-2)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md86,dotrewrite-d86-3)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p6.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p + p4.p + p5.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	if (count(Md86,1)) id p4.p6 = -i8 + i9;
	#call replace(p4.p5,-i4-i7+i8,i,i4,i7,i8,Md86,dotrewrite-d86-1)
	#call replace(Q.p5,-`Q2'/2+i1/2+i4/2-i5/2-i8,i,i1,i4,i5,i8,Md86,dotrewrite-d86-2)
	#call replace(p5.p6,i3/2+i4/2-i5/2-i6/2+i7-i9,i,i3,i4,i5,i6,i7,i9,Md86,dotrewrite-d86-3)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md86,dotrewrite-d86-4)
#endif
#break
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p2.p - p6.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p3.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p - p6.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	if (count(Md86,1)) id p3.p4 = i7 - i9;
	if (count(Md86,1)) id p4.p6 = -i8 + i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md86,dotrewrite-d86-2)
	#call replace(p3.p6,-i3/2-i4/2+i5/2-i6/2-i7+i8,i,i3,i4,i5,i6,i7,i8,Md86,dotrewrite-d86-3)
	#call replace(Q.p6,-i1/2+i2/2-i3/2-i4/2+i5/2-i7+i8,i,i1,i2,i3,i4,i5,i7,i8,Md86,dotrewrite-d86-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 44
* path: (4,)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md86,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md86-3;
	if (count(Md86,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md86-2;
	if (count(Md86,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md86-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd86()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md86,dotrewrite-d86-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md86,dotrewrite-d86-1)
	#call replace(Q.p1,`Q2'/2+i1/2+i4/2-i5/2+i7-i8,i,i1,i4,i5,i7,i8,Md86,dotrewrite-d86-2)
#endif
#break
#endswitch
#break
*--#] d86 : 
*--#[ d71 :
#case Md71
#procedure SimpleDotd71()
if (count(Md71,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md71,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + p1.p + p5.p;
	.sort:momrewrite-Md71-3;
	if (count(Md71,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p4.p;
	.sort:momrewrite-Md71-2;
	if (count(Md71,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p - p5.p;
	.sort:momrewrite-Md71-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd71()
	if (count(Md71,1)) id p3.p4 = -i7 + i8;
	if (count(Md71,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md71,dotrewrite-d71-2)
	#call replace(p4.p5,-i3/2-i4/2-i5/2+i6/2+i7-i9,i,i3,i4,i5,i6,i7,i9,Md71,dotrewrite-d71-3)
	#call replace(Q.p5,-i1/2+i2/2+i3/2+i4/2-i6/2-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md71,dotrewrite-d71-4)
#endif
#break
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md71,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md71-3;
	if (count(Md71,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md71-2;
	if (count(Md71,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md71-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd71()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md71,dotrewrite-d71-0)
	#call replace(p3.p6,-i3+i7-i9,i,i3,i7,i9,Md71,dotrewrite-d71-1)
	#call replace(Q.p6,`Q2'/2-i2/2-i3/2+i6/2-i9,i,i2,i3,i6,i9,Md71,dotrewrite-d71-2)
	#call replace(p1.p6,`Q2'/2-i2/2-i4/2+i5/2-i8,i,i2,i4,i5,i8,Md71,dotrewrite-d71-3)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md71,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md71-3;
	if (count(Md71,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p5.p;
	.sort:momrewrite-Md71-2;
	if (count(Md71,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md71-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd71()
	if (count(Md71,1)) id p3.p5 = -i8 + i9;
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Md71,dotrewrite-d71-1)
	#call replace(Q.p2,`Q2'/2+i2/2+i3/2-i6/2-i7+i9,i,i2,i3,i6,i7,i9,Md71,dotrewrite-d71-2)
	#call replace(Q.p5,-i1/2+i2/2+i3/2+i4/2-i6/2-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md71,dotrewrite-d71-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md71,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p3.p + Q.p;
	.sort:momrewrite-Md71-3;
	if (count(Md71,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + p1.p + p5.p;
	.sort:momrewrite-Md71-2;
	if (count(Md71,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md71-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd71()
	if (count(Md71,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md71,dotrewrite-d71-1)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md71,dotrewrite-d71-2)
	#call replace(Q.p5,-i1/2+i2/2+i3/2+i4/2-i6/2-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md71,dotrewrite-d71-3)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md71,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md71-3;
	if (count(Md71,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p4.p;
	.sort:momrewrite-Md71-2;
	if (count(Md71,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md71-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd71()
	if (count(Md71,1)) id p3.p4 = -i7 + i8;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md71,dotrewrite-d71-1)
	#call replace(p3.p6,-i3+i7-i9,i,i3,i7,i9,Md71,dotrewrite-d71-2)
	#call replace(Q.p6,`Q2'/2-i2/2-i3/2+i6/2-i9,i,i2,i3,i6,i9,Md71,dotrewrite-d71-3)
	#call replace(p4.p6,i3/2-i4/2+i5/2-i6/2-i8+i9,i,i3,i4,i5,i6,i8,i9,Md71,dotrewrite-d71-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md71,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md71-3;
	if (count(Md71,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md71-2;
	if (count(Md71,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md71-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd71()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md71,dotrewrite-d71-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md71,dotrewrite-d71-1)
	#call replace(Q.p2,`Q2'/2+i2/2+i3/2-i6/2-i7+i9,i,i2,i3,i6,i7,i9,Md71,dotrewrite-d71-2)
#endif
#break
#endswitch
#break
*--#] d71 : 
*--#[ d73 :
#case Md73
#procedure SimpleDotd73()
if (count(Md73,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md73,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md73-3;
	if (count(Md73,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p4.p;
	.sort:momrewrite-Md73-2;
	if (count(Md73,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md73-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd73()
	if (count(Md73,1)) id p3.p4 = i8 - i9;
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md73,dotrewrite-d73-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md73,dotrewrite-d73-2)
	#call replace(p2.p4,-i1/2-i2/2+i5/2+i7,i,i1,i2,i5,i7,Md73,dotrewrite-d73-3)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md73,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md73-3;
	if (count(Md73,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p5.p + p1.p;
	.sort:momrewrite-Md73-2;
	if (count(Md73,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p4.p;
	.sort:momrewrite-Md73-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd73()
	if (count(Md73,1)) id p3.p4 = i8 - i9;
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2,i,i1,i4,Md73,dotrewrite-d73-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md73,dotrewrite-d73-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md73,dotrewrite-d73-3)
	#call replace(p4.p5,`Q2'/2+i2/2-i4/2-i5/2-i7,i,i2,i4,i5,i7,Md73,dotrewrite-d73-4)
#endif
#break
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md73,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md73-3;
	if (count(Md73,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p + p6.p;
	.sort:momrewrite-Md73-2;
	if (count(Md73,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md73-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd73()
	if (count(Md73,1)) id Q.p6 = i7 - i8;
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md73,dotrewrite-d73-1)
	#call replace(p3.p6,i2/2-i3/2-i6/2,i,i2,i3,i6,Md73,dotrewrite-d73-2)
	#call replace(p1.p6,i1/2+i2/2-i5/2-i9,i,i1,i2,i5,i9,Md73,dotrewrite-d73-3)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md73,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + Q.p;
	.sort:momrewrite-Md73-3;
	if (count(Md73,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p5.p;
	.sort:momrewrite-Md73-2;
	if (count(Md73,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md73-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd73()
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md73,dotrewrite-d73-0)
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md73,dotrewrite-d73-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md73,dotrewrite-d73-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md73,dotrewrite-d73-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md73,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md73-3;
	if (count(Md73,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p5.p;
	.sort:momrewrite-Md73-2;
	if (count(Md73,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md73-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd73()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md73,dotrewrite-d73-0)
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md73,dotrewrite-d73-1)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i7,i,i1,i4,i7,Md73,dotrewrite-d73-2)
	#call replace(p3.p5,-i2/2-i3/2+i6/2+i9,i,i2,i3,i6,i9,Md73,dotrewrite-d73-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 4, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md73,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md73-3;
	if (count(Md73,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md73-2;
	if (count(Md73,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md73-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd73()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md73,dotrewrite-d73-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md73,dotrewrite-d73-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md73,dotrewrite-d73-2)
#endif
#break
#endswitch
#break
*--#] d73 : 
*--#[ d74 :
#case Md74
#procedure SimpleDotd74()
if (count(Md74,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p1.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md74,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md74-3;
	if (count(Md74,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p5.p;
	.sort:momrewrite-Md74-2;
	if (count(Md74,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md74-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd74()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md74,dotrewrite-d74-0)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md74,dotrewrite-d74-1)
	#call replace(p2.p5,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Md74,dotrewrite-d74-2)
	#call replace(p3.p5,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md74,dotrewrite-d74-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md74,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md74-3;
	if (count(Md74,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md74-2;
	if (count(Md74,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p;
	.sort:momrewrite-Md74-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd74()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md74,dotrewrite-d74-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md74,dotrewrite-d74-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md74,dotrewrite-d74-2)
#endif
#break
#endswitch
#break
*--#] d74 : 
*--#[ d47 :
#case Md47
#procedure SimpleDotd47()
if (count(Md47,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md47,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md47-3;
	if (count(Md47,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md47-2;
	if (count(Md47,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md47-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd47()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md47,dotrewrite-d47-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md47,dotrewrite-d47-1)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md47,dotrewrite-d47-2)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md47,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md47-3;
	if (count(Md47,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Md47-2;
	if (count(Md47,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md47-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd47()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md47,dotrewrite-d47-0)
	#call replace(p2.p5,-i1/2+i2/2+i5/2,i,i1,i2,i5,Md47,dotrewrite-d47-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md47,dotrewrite-d47-2)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md47,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Md47-3;
	if (count(Md47,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md47-2;
	if (count(Md47,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p5.p;
	.sort:momrewrite-Md47-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd47()
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md47,dotrewrite-d47-0)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md47,dotrewrite-d47-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md47,dotrewrite-d47-2)
#endif
#break
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md47,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p5.p;
	.sort:momrewrite-Md47-3;
	if (count(Md47,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md47-2;
	if (count(Md47,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md47-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd47()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md47,dotrewrite-d47-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md47,dotrewrite-d47-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md47,dotrewrite-d47-2)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md47,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md47-3;
	if (count(Md47,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Md47-2;
	if (count(Md47,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md47-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd47()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md47,dotrewrite-d47-0)
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md47,dotrewrite-d47-1)
	#call replace(Q.p5,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md47,dotrewrite-d47-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md47,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md47-3;
	if (count(Md47,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md47-2;
	if (count(Md47,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md47-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd47()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md47,dotrewrite-d47-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md47,dotrewrite-d47-1)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md47,dotrewrite-d47-2)
#endif
#break
#endswitch
#break
*--#] d47 : 
*--#[ d21 :
#case Md21
#procedure SimpleDotd21()
if (count(Md21,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Md21,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md21-2;
	if (count(Md21,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p;
	.sort:momrewrite-Md21-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd21()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md21,dotrewrite-d21-0)
	#call replace(p1.p2,-i2/2-i3/2+i4/2+i5,i,i2,i3,i4,i5,Md21,dotrewrite-d21-1)
#endif
#break
#case 24
* path: (2, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md21,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + Q.p;
	.sort:momrewrite-Md21-2;
	if (count(Md21,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md21-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd21()
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md21,dotrewrite-d21-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i3/2-i5,i,i1,i3,i5,Md21,dotrewrite-d21-1)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md21,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p3.p;
	.sort:momrewrite-Md21-2;
	if (count(Md21,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md21-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd21()
	#call replace(Q.p3,-`Q2'/2+i1/2-i3/2,i,i1,i3,Md21,dotrewrite-d21-0)
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md21,dotrewrite-d21-1)
#endif
#break
#endswitch
#break
*--#] d21 : 
*--#[ d29 :
#case Md29
#procedure SimpleDotd29()
if (count(Md29,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md29,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p1.p;
	.sort:momrewrite-Md29-2;
	if (count(Md29,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p;
	.sort:momrewrite-Md29-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd29()
	#call replace(Q.p3,`Q2'/2-i1/2+i3/2,i,i1,i3,Md29,dotrewrite-d29-0)
	#call replace(p2.p3,-i1/2-i2/2+i4/2+i5,i,i1,i2,i4,i5,Md29,dotrewrite-d29-1)
#endif
#break
#case 24
* path: (2, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md29,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p;
	.sort:momrewrite-Md29-2;
	if (count(Md29,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p4.p;
	.sort:momrewrite-Md29-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd29()
	#call replace(p2.p4,i1/2-i2/2-i4/2,i,i1,i2,i4,Md29,dotrewrite-d29-0)
	#call replace(Q.p4,`Q2'/2+i1/2-i3/2-i5,i,i1,i3,i5,Md29,dotrewrite-d29-1)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md29,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Md29-2;
	if (count(Md29,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p;
	.sort:momrewrite-Md29-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd29()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md29,dotrewrite-d29-0)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md29,dotrewrite-d29-1)
#endif
#break
#endswitch
#break
*--#] d29 : 
*--#[ d64 :
#case Md64
#procedure SimpleDotd64()
if (count(Md64,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md64,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md64-3;
	if (count(Md64,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md64-2;
	if (count(Md64,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md64-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd64()
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md64,dotrewrite-d64-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i4/2-i7,i,i1,i4,i7,Md64,dotrewrite-d64-1)
	#call replace(p2.p6,-i1/2-i2/2+i5/2+i8-i9,i,i1,i2,i5,i8,i9,Md64,dotrewrite-d64-2)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md64,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p1.p;
	.sort:momrewrite-Md64-3;
	if (count(Md64,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md64-2;
	if (count(Md64,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md64-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd64()
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md64,dotrewrite-d64-0)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md64,dotrewrite-d64-1)
	#call replace(p2.p4,i1/2+i2/2-i5/2-i8,i,i1,i2,i5,i8,Md64,dotrewrite-d64-2)
#endif
#break
#case 25
* path: (2, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md64,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md64-3;
	if (count(Md64,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md64-2;
	if (count(Md64,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p5.p;
	.sort:momrewrite-Md64-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd64()
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md64,dotrewrite-d64-0)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2-i8,i,i1,i4,i8,Md64,dotrewrite-d64-1)
	#call replace(p3.p5,-i3/2-i4/2+i6/2+i7-i9,i,i3,i4,i6,i7,i9,Md64,dotrewrite-d64-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md64,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md64-3;
	if (count(Md64,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md64-2;
	if (count(Md64,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md64-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd64()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md64,dotrewrite-d64-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md64,dotrewrite-d64-1)
	#call replace(p1.p3,-i3/2-i4/2+i6/2+i7,i,i3,i4,i6,i7,Md64,dotrewrite-d64-2)
#endif
#break
#endswitch
#break
*--#] d64 : 
*--#[ d135 :
#case Md135
#procedure SimpleDotd135()
if (count(Md135,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q6
* path: (0, 6)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p7.p - p5.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p6.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-0)
	#call replace(p2.p6,i1/2-i2/2-i6/2,i,i1,i2,i6,Md135,dotrewrite-d135-1)
	#call replace(Q.p6,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Md135,dotrewrite-d135-2)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2+i8-i9,i,i1,i5,i8,i9,Md135,dotrewrite-d135-3)
	#call replace(p3.p6,`Q2'/2-i3/2+i4/2-i6/2-i9,i,i3,i4,i6,i9,Md135,dotrewrite-d135-4)
#endif
#break
#case 27
* path: (2, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-0)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md135,dotrewrite-d135-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md135,dotrewrite-d135-2)
	#call replace(p2.p4,-i1/2-i3/2+i6/2+i7/2+i8,i,i1,i3,i6,i7,i8,Md135,dotrewrite-d135-3)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p7.p - p5.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md135,dotrewrite-d135-1)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md135,dotrewrite-d135-3)
	#call replace(p1.p7,`Q2'/2-i1/2+i4/2-i7/2-i9,i,i1,i4,i7,i9,Md135,dotrewrite-d135-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q1
* path: (0, 6, 1)
#case 16
* path: (1, 6)
#case 46
* path: (4, 6)
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p6.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p1.p6,i1/2-i2/2+i6/2,i,i1,i2,i6,Md135,dotrewrite-d135-1)
	#call replace(p1.p4,-i4/2-i5/2+i7/2+i9,i,i4,i5,i7,i9,Md135,dotrewrite-d135-2)
	#call replace(Q.p6,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Md135,dotrewrite-d135-3)
	#call replace(p4.p6,i1/2+i3/2-i4/2-i5/2-i6/2-i8+i9,i,i1,i3,i4,i5,i6,i8,i9,Md135,dotrewrite-d135-4)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-0)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md135,dotrewrite-d135-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md135,dotrewrite-d135-2)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2+i8-i9,i,i1,i5,i8,i9,Md135,dotrewrite-d135-3)
	#call replace(p3.p4,-i1/2-i3/2-i4/2+i5/2+i6/2+i8,i,i1,i3,i4,i5,i6,i8,Md135,dotrewrite-d135-4)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p5.p - p7.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md135,dotrewrite-d135-2)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i8,i,i1,i2,i6,i8,Md135,dotrewrite-d135-3)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md135,dotrewrite-d135-4)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md135,dotrewrite-d135-1)
	#call replace(p2.p5,i1/2+i2/2-i6/2-i8,i,i1,i2,i6,i8,Md135,dotrewrite-d135-2)
	#call replace(p2.p4,-i1/2-i3/2+i6/2+i7/2+i8,i,i1,i3,i6,i7,i8,Md135,dotrewrite-d135-3)
#endif
#break
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p7.p - p5.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p6.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(p2.p6,i1/2-i2/2-i6/2,i,i1,i2,i6,Md135,dotrewrite-d135-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-1)
	#call replace(Q.p6,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Md135,dotrewrite-d135-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md135,dotrewrite-d135-3)
	#call replace(p6.p7,`Q2'/2-i1/2+i2/2-i3/2+i4/2-i9,i,i1,i2,i3,i4,i9,Md135,dotrewrite-d135-4)
#endif
#break
#case 24
* path: (2, 3, 4)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p4.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-0)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2+i8-i9,i,i1,i5,i8,i9,Md135,dotrewrite-d135-1)
	#call replace(p2.p4,-i1/2-i3/2+i6/2+i7/2+i8,i,i1,i3,i6,i7,i8,Md135,dotrewrite-d135-2)
	#call replace(p3.p4,-i1/2-i3/2-i4/2+i5/2+i6/2+i8,i,i1,i3,i4,i5,i6,i8,Md135,dotrewrite-d135-3)
#endif
#break
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p1.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p7.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md135,dotrewrite-d135-1)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2+i8-i9,i,i1,i5,i8,i9,Md135,dotrewrite-d135-2)
	#call replace(p3.p4,-i1/2-i3/2-i4/2+i5/2+i6/2+i8,i,i1,i3,i4,i5,i6,i8,Md135,dotrewrite-d135-3)
	#call replace(p3.p5,i1/2+i2/2+i4/2-i5/2-i6/2-i7/2-i8,i,i1,i2,i4,i5,i6,i7,i8,Md135,dotrewrite-d135-4)
#endif
#break
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p7.p - p5.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md135,dotrewrite-d135-1)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md135,dotrewrite-d135-2)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2+i8-i9,i,i1,i5,i8,i9,Md135,dotrewrite-d135-3)
	#call replace(p1.p3,`Q2'/2+i2/2+i4/2-i6/2-i7/2-i9,i,i2,i4,i6,i7,i9,Md135,dotrewrite-d135-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md135,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p7.p;
	.sort:momrewrite-Md135-4;
	if (count(Md135,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md135-3;
	if (count(Md135,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md135-2;
	if (count(Md135,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p;
	.sort:momrewrite-Md135-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd135()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md135,dotrewrite-d135-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md135,dotrewrite-d135-1)
	#call replace(p1.p4,-i4/2-i5/2+i7/2+i9,i,i4,i5,i7,i9,Md135,dotrewrite-d135-2)
	#call replace(p2.p4,-i1/2-i3/2+i6/2+i7/2+i8,i,i1,i3,i6,i7,i8,Md135,dotrewrite-d135-3)
#endif
#break
#endswitch
#break
*--#] d135 : 
*--#[ d128 :
#case Md128
#procedure SimpleDotd128()
if (count(Md128,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p7^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-0)
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md128,dotrewrite-d128-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md128,dotrewrite-d128-3)
	#call replace(p3.p5,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Md128,dotrewrite-d128-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-0)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-1)
	#call replace(Q.p2,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md128,dotrewrite-d128-2)
	#call replace(p1.p7,i5/2-i6/2-i7/2+i8,i,i5,i6,i7,i8,Md128,dotrewrite-d128-3)
	#call replace(p1.p2,-i5/2+i6/2+i7/2-i8+i9,i,i5,i6,i7,i8,i9,Md128,dotrewrite-d128-4)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-0)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md128,dotrewrite-d128-1)
	#call replace(Q.p2,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md128,dotrewrite-d128-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md128,dotrewrite-d128-3)
	#call replace(p2.p5,`Q2'/2+i2/2-i4/2+i5/2-i6/2-i9,i,i2,i4,i5,i6,i9,Md128,dotrewrite-d128-4)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p + p3.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md128,dotrewrite-d128-1)
	#call replace(Q.p2,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md128,dotrewrite-d128-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md128,dotrewrite-d128-3)
	#call replace(p1.p2,-i5/2+i6/2+i7/2-i8+i9,i,i5,i6,i7,i8,i9,Md128,dotrewrite-d128-4)
	#call replace(p2.p4,`Q2'/2-i2/2-i4/2+i7/2-i8,i,i2,i4,i7,i8,Md128,dotrewrite-d128-5)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md128,dotrewrite-d128-0)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md128,dotrewrite-d128-1)
	#call replace(Q.p5,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md128,dotrewrite-d128-2)
	#call replace(p4.p7,i2/2-i3/2-i7/2+i8,i,i2,i3,i7,i8,Md128,dotrewrite-d128-3)
	#call replace(p4.p5,-i1/2-i2/2+i4/2+i6/2+i7/2-i8+i9,i,i1,i2,i4,i6,i7,i8,i9,Md128,dotrewrite-d128-4)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-0)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md128,dotrewrite-d128-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md128,dotrewrite-d128-3)
	#call replace(p3.p6,-`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md128,dotrewrite-d128-4)
	#call replace(p3.p5,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Md128,dotrewrite-d128-5)
#endif
#break
#case Q6
* path: (0, 3, 7, 6)
#case Q6
* path: (0, 6)
#case Q7
* path: (0, 6, 7)
#case 36
* path: (3, 7, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-0)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-1)
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-2)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md128,dotrewrite-d128-3)
	#call replace(p3.p6,-`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md128,dotrewrite-d128-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#case 47
* path: (4, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md128,dotrewrite-d128-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md128,dotrewrite-d128-2)
	#call replace(p1.p7,i5/2-i6/2-i7/2+i8,i,i5,i6,i7,i8,Md128,dotrewrite-d128-3)
	#call replace(p4.p7,i2/2-i3/2-i7/2+i8,i,i2,i3,i7,i8,Md128,dotrewrite-d128-4)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p2.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-1)
	#call replace(Q.p2,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md128,dotrewrite-d128-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md128,dotrewrite-d128-3)
	#call replace(p3.p5,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Md128,dotrewrite-d128-4)
	#call replace(p2.p5,`Q2'/2+i2/2-i4/2+i5/2-i6/2-i9,i,i2,i4,i5,i6,i9,Md128,dotrewrite-d128-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-1)
	#call replace(Q.p5,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md128,dotrewrite-d128-2)
	#call replace(p1.p5,`Q2'/2-i1/2-i5/2+i7/2-i8,i,i1,i5,i7,i8,Md128,dotrewrite-d128-3)
	#call replace(p3.p5,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Md128,dotrewrite-d128-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 3, 2)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p2.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-1)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-2)
	#call replace(Q.p2,`Q2'/2+i3/2-i4/2-i8,i,i3,i4,i8,Md128,dotrewrite-d128-3)
	#call replace(p1.p2,-i5/2+i6/2+i7/2-i8+i9,i,i5,i6,i7,i8,i9,Md128,dotrewrite-d128-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 3)
#case Q7
* path: (0, 3, 7)
#case 11
* path: (1,)
#case 16
* path: (1, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md128,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md128-4;
	if (count(Md128,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p7.p;
	.sort:momrewrite-Md128-3;
	if (count(Md128,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md128-2;
	if (count(Md128,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md128-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd128()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md128,dotrewrite-d128-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md128,dotrewrite-d128-1)
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Md128,dotrewrite-d128-2)
	#call replace(p1.p7,i5/2-i6/2-i7/2+i8,i,i5,i6,i7,i8,Md128,dotrewrite-d128-3)
#endif
#break
#endswitch
#break
*--#] d128 : 
*--#[ d94 :
#case Md94
#procedure SimpleDotd94()
if (count(Md94,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p1.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md94,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p6.p;
	.sort:momrewrite-Md94-3;
	if (count(Md94,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md94-2;
	if (count(Md94,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md94-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd94()
	if (count(Md94,1)) id p2.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md94,dotrewrite-d94-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md94,dotrewrite-d94-2)
	#call replace(p2.p4,-i2/2+i3/2-i6/2+i8-i9,i,i2,i3,i6,i8,i9,Md94,dotrewrite-d94-3)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md94,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + p5.p + Q.p;
	.sort:momrewrite-Md94-3;
	if (count(Md94,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p2.p;
	.sort:momrewrite-Md94-2;
	if (count(Md94,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md94-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd94()
	#call replace(p2.p6,i2/2-i3/2+i6/2,i,i2,i3,i6,Md94,dotrewrite-d94-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md94,dotrewrite-d94-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i7,i,i1,i5,i7,Md94,dotrewrite-d94-2)
	#call replace(p2.p4,-i2/2+i3/2-i6/2+i8-i9,i,i2,i3,i6,i8,i9,Md94,dotrewrite-d94-3)
#endif
#break
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md94,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p - p5.p;
	.sort:momrewrite-Md94-3;
	if (count(Md94,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p2.p;
	.sort:momrewrite-Md94-2;
	if (count(Md94,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md94-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd94()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md94,dotrewrite-d94-0)
	#call replace(p2.p6,i2/2-i3/2+i6/2,i,i2,i3,i6,Md94,dotrewrite-d94-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i7,i,i1,i5,i7,Md94,dotrewrite-d94-2)
	#call replace(p1.p6,`Q2'/2-i1/2+i4/2-i6/2-i7,i,i1,i4,i6,i7,Md94,dotrewrite-d94-3)
#endif
#break
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md94,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p - p5.p;
	.sort:momrewrite-Md94-3;
	if (count(Md94,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md94-2;
	if (count(Md94,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p3.p;
	.sort:momrewrite-Md94-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd94()
	if (count(Md94,1)) id p2.p5 = -i8 + i9;
	#call replace(p2.p3,-i2/2-i3/2+i6/2,i,i2,i3,i6,Md94,dotrewrite-d94-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md94,dotrewrite-d94-2)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i7-i8,i,i1,i5,i7,i8,Md94,dotrewrite-d94-3)
	#call replace(p3.p5,i4/2-i5/2-i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md94,dotrewrite-d94-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 5, 6)
#case 26
* path: (2, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md94,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md94-3;
	if (count(Md94,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p2.p;
	.sort:momrewrite-Md94-2;
	if (count(Md94,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md94-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd94()
	if (count(Md94,1)) id p2.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md94,dotrewrite-d94-1)
	#call replace(p2.p6,i2/2-i3/2+i6/2,i,i2,i3,i6,Md94,dotrewrite-d94-2)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md94,dotrewrite-d94-3)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i7,i,i1,i5,i7,Md94,dotrewrite-d94-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md94,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p6.p;
	.sort:momrewrite-Md94-3;
	if (count(Md94,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md94-2;
	if (count(Md94,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md94-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd94()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md94,dotrewrite-d94-0)
	#call replace(p1.p4,-i4/2-i5/2+i6/2+i7,i,i4,i5,i6,i7,Md94,dotrewrite-d94-1)
	#call replace(p2.p4,-i2/2+i3/2-i6/2+i8-i9,i,i2,i3,i6,i8,i9,Md94,dotrewrite-d94-2)
#endif
#break
#endswitch
#break
*--#] d94 : 
*--#[ d66 :
#case Md66
#procedure SimpleDotd66()
if (count(Md66,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 13
* path: (1, 4, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md66,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p - p4.p;
	.sort:momrewrite-Md66-3;
	if (count(Md66,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md66-2;
	if (count(Md66,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p - p4.p;
	.sort:momrewrite-Md66-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd66()
	if (count(Md66,1)) id p2.p4 = i7 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md66,dotrewrite-d66-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md66,dotrewrite-d66-2)
	#call replace(p1.p4,i1/2+i2/2+i4/2-i5/2+i7-i8-i9,i,i1,i2,i4,i5,i7,i8,i9,Md66,dotrewrite-d66-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md66,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md66-3;
	if (count(Md66,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + p2.p + p5.p + p6.p;
	.sort:momrewrite-Md66-2;
	if (count(Md66,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md66-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd66()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md66,dotrewrite-d66-0)
	#call replace(p2.p5,-i2-i7+i8+i9,i,i2,i7,i8,i9,Md66,dotrewrite-d66-1)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i7,i,i1,i3,i4,i6,i7,Md66,dotrewrite-d66-2)
	#call replace(p1.p5,i1/2-i2/2-i4/2+i5/2-i7+i9,i,i1,i2,i4,i5,i7,i9,Md66,dotrewrite-d66-3)
#endif
#break
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md66,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p6.p + Q.p;
	.sort:momrewrite-Md66-3;
	if (count(Md66,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p5.p + p3.p;
	.sort:momrewrite-Md66-2;
	if (count(Md66,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p - p4.p;
	.sort:momrewrite-Md66-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd66()
	if (count(Md66,1)) id p2.p4 = i7 - i9;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md66,dotrewrite-d66-1)
	#call replace(p2.p5,-i2-i7+i8+i9,i,i2,i7,i8,i9,Md66,dotrewrite-d66-2)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i7,i,i1,i3,i4,i6,i7,Md66,dotrewrite-d66-3)
	#call replace(p4.p5,i1/2+i2/2-i4/2-i5/2-i8,i,i1,i2,i4,i5,i8,Md66,dotrewrite-d66-4)
#endif
#break
#default
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md66,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p3.p - p6.p;
	.sort:momrewrite-Md66-3;
	if (count(Md66,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md66-2;
	if (count(Md66,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md66-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd66()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md66,dotrewrite-d66-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md66,dotrewrite-d66-1)
	#call replace(p1.p3,`Q2'/2-i2/2-i4/2+i5/2-i6/2-i7+i8+i9,i,i2,i4,i5,i6,i7,i8,i9,Md66,dotrewrite-d66-2)
#endif
#break
#endswitch
#break
*--#] d66 : 
*--#[ d72 :
#case Md72
#procedure SimpleDotd72()
if (count(Md72,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md72,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md72-3;
	if (count(Md72,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p2.p + p5.p;
	.sort:momrewrite-Md72-2;
	if (count(Md72,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md72-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd72()
	if (count(Md72,1)) id Q.p5 = i7 - i8;
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md72,dotrewrite-d72-1)
	#call replace(Q.p4,`Q2'-i7+i8-i9,i,i7,i8,i9,Md72,dotrewrite-d72-2)
	#call replace(p2.p4,-i1/2-i3/2+i5/2+i6/2+i8,i,i1,i3,i5,i6,i8,Md72,dotrewrite-d72-3)
	#call replace(p4.p5,`Q2'/2+i3/2-i4/2-i5/2-i9,i,i3,i4,i5,i9,Md72,dotrewrite-d72-4)
#endif
#break
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md72,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md72-3;
	if (count(Md72,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + Q.p - p5.p - p4.p;
	.sort:momrewrite-Md72-2;
	if (count(Md72,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md72-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd72()
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md72,dotrewrite-d72-0)
	#call replace(Q.p4,`Q2'-i7+i8-i9,i,i7,i8,i9,Md72,dotrewrite-d72-1)
	#call replace(p2.p4,-i1/2-i3/2+i5/2+i6/2+i8,i,i1,i3,i5,i6,i8,Md72,dotrewrite-d72-2)
	#call replace(p1.p4,`Q2'/2-i1/2-i4/2+i6/2+i8-i9,i,i1,i4,i6,i8,i9,Md72,dotrewrite-d72-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md72,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p + p6.p;
	.sort:momrewrite-Md72-3;
	if (count(Md72,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md72-2;
	if (count(Md72,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md72-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd72()
	if (count(Md72,1)) id Q.p6 = -i8 + i9;
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md72,dotrewrite-d72-1)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md72,dotrewrite-d72-2)
	#call replace(p1.p6,-`Q2'/2-i1/2+i4/2-i6/2+i7-i8+i9,i,i1,i4,i6,i7,i8,i9,Md72,dotrewrite-d72-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md72,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md72-3;
	if (count(Md72,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p5.p;
	.sort:momrewrite-Md72-2;
	if (count(Md72,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md72-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd72()
	if (count(Md72,1)) id Q.p5 = i7 - i8;
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md72,dotrewrite-d72-1)
	#call replace(Q.p4,`Q2'-i7+i8-i9,i,i7,i8,i9,Md72,dotrewrite-d72-2)
	#call replace(p4.p5,`Q2'/2+i3/2-i4/2-i5/2-i9,i,i3,i4,i5,i9,Md72,dotrewrite-d72-3)
	#call replace(p1.p4,`Q2'/2-i1/2-i4/2+i6/2+i8-i9,i,i1,i4,i6,i8,i9,Md72,dotrewrite-d72-4)
#endif
#break
#case 13
* path: (1, 5, 3)
#if ( `MOMS' > 0 )
	if (count(Md72,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md72-3;
	if (count(Md72,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p5.p;
	.sort:momrewrite-Md72-2;
	if (count(Md72,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p5.p;
	.sort:momrewrite-Md72-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd72()
	if (count(Md72,1)) id Q.p5 = i7 - i8;
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md72,dotrewrite-d72-1)
	#call replace(p3.p5,-`Q2'/2-i3/2+i4/2-i5/2+i7-i8+i9,i,i3,i4,i5,i7,i8,i9,Md72,dotrewrite-d72-2)
	#call replace(p1.p3,-`Q2'/2+i2/2+i4/2-i5/2-i6/2+i7-i8+i9,i,i2,i4,i5,i6,i7,i8,i9,Md72,dotrewrite-d72-3)
#endif
#break
#default
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md72,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p + Q.p;
	.sort:momrewrite-Md72-3;
	if (count(Md72,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md72-2;
	if (count(Md72,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md72-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd72()
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md72,dotrewrite-d72-0)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md72,dotrewrite-d72-1)
	#call replace(p1.p3,-`Q2'/2+i2/2+i4/2-i5/2-i6/2+i7-i8+i9,i,i2,i4,i5,i6,i7,i8,i9,Md72,dotrewrite-d72-2)
#endif
#break
#endswitch
#break
*--#] d72 : 
*--#[ d43 :
#case Md43
#procedure SimpleDotd43()
if (count(Md43,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md43,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md43-3;
	if (count(Md43,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p;
	.sort:momrewrite-Md43-2;
	if (count(Md43,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md43-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd43()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md43,dotrewrite-d43-0)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md43,dotrewrite-d43-1)
	#call replace(Q.p2,i1/2+i3/2-i4/2-i5/2,i,i1,i3,i4,i5,Md43,dotrewrite-d43-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 13
* path: (1, 4, 3)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md43,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p4.p;
	.sort:momrewrite-Md43-3;
	if (count(Md43,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md43-2;
	if (count(Md43,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md43-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd43()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md43,dotrewrite-d43-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md43,dotrewrite-d43-1)
	#call replace(p1.p4,i1/2-i2/2+i4/2,i,i1,i2,i4,Md43,dotrewrite-d43-2)
#endif
#break
#endswitch
#break
*--#] d43 : 
*--#[ d26 :
#case Md26
#procedure SimpleDotd26()
if (count(Md26,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p1.p2^n? = i5^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 14
* path: (1, 0, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md26,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md26-2;
	if (count(Md26,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md26-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd26()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md26,dotrewrite-d26-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md26,dotrewrite-d26-1)
#endif
#break
#endswitch
#break
*--#] d26 : 
*--#[ d118 :
#case Md118
#procedure SimpleDotd118()
if (count(Md118,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p7^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p5.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	if (count(Md118,1)) id Q.p5 = i8 - i9;
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md118,dotrewrite-d118-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md118,dotrewrite-d118-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md118,dotrewrite-d118-3)
	#call replace(p5.p6,i1/2-i2/2+i3/2-i5/2-i6/2+i9,i,i1,i2,i3,i5,i6,i9,Md118,dotrewrite-d118-4)
#endif
#break
#case Q5
* path: (0, 2, 1, 5)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	if (count(Md118,1)) id Q.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md118,dotrewrite-d118-1)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md118,dotrewrite-d118-2)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-3)
	#call replace(p1.p5,i1/2-i2/2+i3/2+i5/2-i6/2+i8,i,i1,i2,i3,i5,i6,i8,Md118,dotrewrite-d118-4)
	#call replace(p2.p5,i1/2-i2/2+i3/2+i4/2-i6/2-i7/2+i8,i,i1,i2,i3,i4,i6,i7,i8,Md118,dotrewrite-d118-5)
#endif
#break
#case 16
* path: (1, 6)
#case 14
* path: (1, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p1.p + p2.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md118,dotrewrite-d118-0)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-1)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md118,dotrewrite-d118-2)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md118,dotrewrite-d118-3)
	#call replace(p1.p6,-`Q2'/2+i1/2-i5/2+i6/2-i8+i9,i,i1,i5,i6,i8,i9,Md118,dotrewrite-d118-4)
#endif
#break
#case 13
* path: (1, 6, 3)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p1.p + p2.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p - p6.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md118,dotrewrite-d118-0)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md118,dotrewrite-d118-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md118,dotrewrite-d118-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i3/2+i7/2-i9,i,i1,i3,i7,i9,Md118,dotrewrite-d118-4)
	#call replace(p1.p6,-`Q2'/2+i1/2-i5/2+i6/2-i8+i9,i,i1,i5,i6,i8,i9,Md118,dotrewrite-d118-5)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p - p1.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md118,dotrewrite-d118-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md118,dotrewrite-d118-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-2)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i8,i,i3,i4,i6,i8,Md118,dotrewrite-d118-3)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md118,dotrewrite-d118-4)
#endif
#break
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	if (count(Md118,1)) id Q.p5 = i8 - i9;
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Md118,dotrewrite-d118-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md118,dotrewrite-d118-2)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-3)
	#call replace(p1.p5,i1/2-i2/2+i3/2+i5/2-i6/2+i8,i,i1,i2,i3,i5,i6,i8,Md118,dotrewrite-d118-4)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	if (count(Md118,1)) id Q.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md118,dotrewrite-d118-1)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Md118,dotrewrite-d118-2)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md118,dotrewrite-d118-3)
	#call replace(p2.p5,i1/2-i2/2+i3/2+i4/2-i6/2-i7/2+i8,i,i1,i2,i3,i4,i6,i7,i8,Md118,dotrewrite-d118-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Md118,dotrewrite-d118-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md118,dotrewrite-d118-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-2)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md118,dotrewrite-d118-3)
#endif
#break
#case 14
* path: (1, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p5.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	if (count(Md118,1)) id Q.p5 = i8 - i9;
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md118,dotrewrite-d118-1)
	#call replace(Q.p1,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md118,dotrewrite-d118-2)
	#call replace(p1.p4,i3/2+i5/2-i6/2-i7/2+i8,i,i3,i5,i6,i7,i8,Md118,dotrewrite-d118-3)
	#call replace(p1.p5,i1/2-i2/2+i3/2+i5/2-i6/2+i8,i,i1,i2,i3,i5,i6,i8,Md118,dotrewrite-d118-4)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 27
* path: (2, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md118,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md118-4;
	if (count(Md118,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md118-3;
	if (count(Md118,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md118-2;
	if (count(Md118,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md118-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd118()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md118,dotrewrite-d118-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Md118,dotrewrite-d118-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md118,dotrewrite-d118-2)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i8,i,i3,i4,i6,i8,Md118,dotrewrite-d118-3)
#endif
#break
#endswitch
#break
*--#] d118 : 
*--#[ d137 :
#case Md137
#procedure SimpleDotd137()
if (count(Md137,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id p1.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p + p7.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md137,dotrewrite-d137-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md137,dotrewrite-d137-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md137,dotrewrite-d137-2)
	#call replace(p1.p7,`Q2'/2-i1/2+i4/2-i7/2+i8,i,i1,i4,i7,i8,Md137,dotrewrite-d137-3)
	#call replace(p2.p7,`Q2'/2+i2/2+i4/2-i6/2+i8-i9,i,i2,i4,i6,i8,i9,Md137,dotrewrite-d137-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md137,dotrewrite-d137-0)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md137,dotrewrite-d137-1)
	#call replace(p1.p4,i4/2+i5/2-i7/2+i8,i,i4,i5,i7,i8,Md137,dotrewrite-d137-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md137,dotrewrite-d137-3)
	#call replace(p1.p6,-`Q2'/2-i1/2-i4/2+i7/2-i8+i9,i,i1,i4,i7,i8,i9,Md137,dotrewrite-d137-4)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md137,dotrewrite-d137-0)
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md137,dotrewrite-d137-1)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md137,dotrewrite-d137-2)
	#call replace(p1.p3,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md137,dotrewrite-d137-3)
	#call replace(p1.p4,i4/2+i5/2-i7/2+i8,i,i4,i5,i7,i8,Md137,dotrewrite-d137-4)
#endif
#break
#case 37
* path: (3, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md137,dotrewrite-d137-0)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md137,dotrewrite-d137-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md137,dotrewrite-d137-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md137,dotrewrite-d137-3)
	#call replace(p3.p7,-i1/2-i2/2-i4/2+i5/2+i6/2+i9,i,i1,i2,i4,i5,i6,i9,Md137,dotrewrite-d137-4)
#endif
#break
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p - p6.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md137,dotrewrite-d137-0)
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md137,dotrewrite-d137-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md137,dotrewrite-d137-2)
	#call replace(p1.p3,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md137,dotrewrite-d137-3)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md137,dotrewrite-d137-4)
	#call replace(p1.p6,-`Q2'/2-i1/2-i4/2+i7/2-i8+i9,i,i1,i4,i7,i8,i9,Md137,dotrewrite-d137-5)
#endif
#break
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p7.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md137,dotrewrite-d137-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md137,dotrewrite-d137-1)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md137,dotrewrite-d137-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md137,dotrewrite-d137-3)
	#call replace(p6.p7,i1/2+i2/2-i6/2-i7/2-i9,i,i1,i2,i6,i7,i9,Md137,dotrewrite-d137-4)
#endif
#break
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p5.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md137,dotrewrite-d137-0)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md137,dotrewrite-d137-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md137,dotrewrite-d137-2)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md137,dotrewrite-d137-3)
	#call replace(p3.p5,i1/2+i2/2-i3/2-i5/2-i9,i,i1,i2,i3,i5,i9,Md137,dotrewrite-d137-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md137,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md137-4;
	if (count(Md137,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md137-3;
	if (count(Md137,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md137-2;
	if (count(Md137,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md137-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd137()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md137,dotrewrite-d137-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md137,dotrewrite-d137-1)
	#call replace(p1.p4,i4/2+i5/2-i7/2+i8,i,i4,i5,i7,i8,Md137,dotrewrite-d137-2)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i8,i,i3,i4,i6,i8,Md137,dotrewrite-d137-3)
#endif
#break
#endswitch
#break
*--#] d137 : 
*--#[ d77 :
#case Md77
#procedure SimpleDotd77()
if (count(Md77,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p4^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md77,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p3.p;
	.sort:momrewrite-Md77-3;
	if (count(Md77,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p2.p;
	.sort:momrewrite-Md77-2;
	if (count(Md77,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p2.p - p5.p;
	.sort:momrewrite-Md77-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd77()
	if (count(Md77,1)) id p2.p4 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md77,dotrewrite-d77-1)
	#call replace(p2.p5,-i2/2+i3/2-i5/2,i,i2,i3,i5,Md77,dotrewrite-d77-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2-i7,i,i1,i2,i7,Md77,dotrewrite-d77-3)
	#call replace(p4.p5,-i3/2-i4/2+i6/2-i8+i9,i,i3,i4,i6,i8,i9,Md77,dotrewrite-d77-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md77,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p2.p;
	.sort:momrewrite-Md77-3;
	if (count(Md77,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md77-2;
	if (count(Md77,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p;
	.sort:momrewrite-Md77-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd77()
	if (count(Md77,1)) id p2.p4 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md77,dotrewrite-d77-1)
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md77,dotrewrite-d77-2)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md77,dotrewrite-d77-3)
#endif
#break
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md77,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md77-3;
	if (count(Md77,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md77-2;
	if (count(Md77,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p + p6.p;
	.sort:momrewrite-Md77-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd77()
	if (count(Md77,1)) id Q.p6 = i7 - i8;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md77,dotrewrite-d77-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md77,dotrewrite-d77-2)
	#call replace(p1.p6,i2/2+i3/2-i5/2+i7-i9,i,i2,i3,i5,i7,i9,Md77,dotrewrite-d77-3)
#endif
#break
#case Q5
* path: (0, 5)
#case 35
* path: (3, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md77,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p2.p;
	.sort:momrewrite-Md77-3;
	if (count(Md77,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p - p5.p;
	.sort:momrewrite-Md77-2;
	if (count(Md77,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p;
	.sort:momrewrite-Md77-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd77()
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md77,dotrewrite-d77-0)
	#call replace(p3.p5,i2/2-i3/2-i5/2,i,i2,i3,i5,Md77,dotrewrite-d77-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2-i7,i,i1,i2,i7,Md77,dotrewrite-d77-2)
	#call replace(p4.p5,-i3/2-i4/2+i6/2-i8+i9,i,i3,i4,i6,i8,i9,Md77,dotrewrite-d77-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md77,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p3.p;
	.sort:momrewrite-Md77-3;
	if (count(Md77,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p5.p - p2.p;
	.sort:momrewrite-Md77-2;
	if (count(Md77,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md77-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd77()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md77,dotrewrite-d77-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2-i7,i,i1,i2,i7,Md77,dotrewrite-d77-1)
	#call replace(p1.p5,-`Q2'/2+i1/2-i3/2+i5/2-i7,i,i1,i3,i5,i7,Md77,dotrewrite-d77-2)
	#call replace(p4.p5,-i3/2-i4/2+i6/2-i8+i9,i,i3,i4,i6,i8,i9,Md77,dotrewrite-d77-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md77,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md77-3;
	if (count(Md77,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md77-2;
	if (count(Md77,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p;
	.sort:momrewrite-Md77-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd77()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md77,dotrewrite-d77-0)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md77,dotrewrite-d77-1)
	#call replace(p1.p3,i2/2+i3/2-i5/2+i7,i,i2,i3,i5,i7,Md77,dotrewrite-d77-2)
#endif
#break
#endswitch
#break
*--#] d77 : 
*--#[ d81 :
#case Md81
#procedure SimpleDotd81()
if (count(Md81,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p4.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	if (count(Md81,1)) id p2.p4 = -i7 + i8;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md81,dotrewrite-d81-1)
	#call replace(p2.p5,-i2+i7-i9,i,i2,i7,i9,Md81,dotrewrite-d81-2)
	#call replace(Q.p5,`Q2'/2-i2/2-i3/2+i5/2-i9,i,i2,i3,i5,i9,Md81,dotrewrite-d81-3)
	#call replace(p4.p5,-`Q2'/2+i1/2+i3/2-i6/2+i7-i8,i,i1,i3,i6,i7,i8,Md81,dotrewrite-d81-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md81,dotrewrite-d81-0)
	#call replace(p2.p5,-i2+i7-i9,i,i2,i7,i9,Md81,dotrewrite-d81-1)
	#call replace(Q.p5,`Q2'/2-i2/2-i3/2+i5/2-i9,i,i2,i3,i5,i9,Md81,dotrewrite-d81-2)
	#call replace(p1.p5,i1/2-i2/2+i5/2-i6/2+i7-i8-i9,i,i1,i2,i5,i6,i7,i8,i9,Md81,dotrewrite-d81-3)
#endif
#break
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p4.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	if (count(Md81,1)) id p2.p4 = -i7 + i8;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md81,dotrewrite-d81-1)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md81,dotrewrite-d81-2)
	#call replace(Q.p3,`Q2'/2+i2/2+i3/2-i5/2-i7+i9,i,i2,i3,i5,i7,i9,Md81,dotrewrite-d81-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = - p6.p - p4.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p - p2.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md81,dotrewrite-d81-0)
	#call replace(p2.p6,i7-i8-i9,i,i7,i8,i9,Md81,dotrewrite-d81-1)
	#call replace(p1.p6,-i1/2-i2/2+i5/2-i6/2+i7-i9,i,i1,i2,i5,i6,i7,i9,Md81,dotrewrite-d81-2)
	#call replace(Q.p6,-i1/2-i2/2-i3/2+i4/2+i5/2+i7-i9,i,i1,i2,i3,i4,i5,i7,i9,Md81,dotrewrite-d81-3)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + Q.p - p3.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p4.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = - p4.p - p6.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	if (count(Md81,1)) id p2.p4 = -i7 + i8;
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md81,dotrewrite-d81-1)
	#call replace(p2.p6,i7-i8-i9,i,i7,i8,i9,Md81,dotrewrite-d81-2)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md81,dotrewrite-d81-3)
	#call replace(Q.p6,-i1/2-i2/2-i3/2+i4/2+i5/2+i7-i9,i,i1,i2,i3,i4,i5,i7,i9,Md81,dotrewrite-d81-4)
#endif
#break
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p4.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	#call replace(p2.p6,i7-i8-i9,i,i7,i8,i9,Md81,dotrewrite-d81-0)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md81,dotrewrite-d81-1)
	#call replace(Q.p3,`Q2'/2+i2/2+i3/2-i5/2-i7+i9,i,i2,i3,i5,i7,i9,Md81,dotrewrite-d81-2)
	#call replace(Q.p6,-i1/2-i2/2-i3/2+i4/2+i5/2+i7-i9,i,i1,i2,i3,i4,i5,i7,i9,Md81,dotrewrite-d81-3)
#endif
#break
#default
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md81,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md81-3;
	if (count(Md81,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md81-2;
	if (count(Md81,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md81-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd81()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md81,dotrewrite-d81-0)
	#call replace(Q.p3,`Q2'/2+i2/2+i3/2-i5/2-i7+i9,i,i2,i3,i5,i7,i9,Md81,dotrewrite-d81-1)
	#call replace(p1.p3,`Q2'/2+i2/2-i4/2-i5/2+i6/2-i7+i9,i,i2,i4,i5,i6,i7,i9,Md81,dotrewrite-d81-2)
#endif
#break
#endswitch
#break
*--#] d81 : 
*--#[ d92 :
#case Md92
#procedure SimpleDotd92()
if (count(Md92,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p5^n? = i7^n;
	id p1.p5^n? = i8^n;
	id p2.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md92,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md92-3;
	if (count(Md92,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md92-2;
	if (count(Md92,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p + p5.p + p6.p;
	.sort:momrewrite-Md92-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd92()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md92,dotrewrite-d92-0)
	#call replace(p5.p6,-i5-i8+i9,i,i5,i8,i9,Md92,dotrewrite-d92-1)
	#call replace(Q.p6,-i1/2+i2/2-i3/2+i4/2-i7,i,i1,i2,i3,i4,i7,Md92,dotrewrite-d92-2)
	#call replace(p1.p6,-i1/2+i2/2+i5/2-i6/2-i9,i,i1,i2,i5,i6,i9,Md92,dotrewrite-d92-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md92,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md92-3;
	if (count(Md92,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md92-2;
	if (count(Md92,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p - p5.p;
	.sort:momrewrite-Md92-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd92()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md92,dotrewrite-d92-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md92,dotrewrite-d92-1)
	#call replace(p1.p2,i1/2+i2/2+i5/2-i6/2+i8-i9,i,i1,i2,i5,i6,i8,i9,Md92,dotrewrite-d92-2)
#endif
#break
#endswitch
#break
*--#] d92 : 
*--#[ d79 :
#case Md79
#procedure SimpleDotd79()
if (count(Md79,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md79,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md79-3;
	if (count(Md79,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md79-2;
	if (count(Md79,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md79-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd79()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md79,dotrewrite-d79-0)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md79,dotrewrite-d79-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md79,dotrewrite-d79-2)
	#call replace(p2.p5,-`Q2'/2-i2/2+i3/2+i8,i,i2,i3,i8,Md79,dotrewrite-d79-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md79,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md79-3;
	if (count(Md79,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md79-2;
	if (count(Md79,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md79-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd79()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md79,dotrewrite-d79-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md79,dotrewrite-d79-1)
	#call replace(p1.p4,-i4/2-i5/2+i6/2+i7,i,i4,i5,i6,i7,Md79,dotrewrite-d79-2)
#endif
#break
#endswitch
#break
*--#] d79 : 
*--#[ d32 :
#case Md32
#procedure SimpleDotd32()
if (count(Md32,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p2.p5^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md32,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md32-2;
	if (count(Md32,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md32-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd32()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md32,dotrewrite-d32-0)
	#call replace(p1.p4,-i1+i7-i9,i,i1,i7,i9,Md32,dotrewrite-d32-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i4/2-i5/2-i9,i,i1,i4,i5,i9,Md32,dotrewrite-d32-2)
	#call replace(p2.p4,`Q2'/2+i2/2-i3/2-i6-i8,i,i2,i3,i6,i8,Md32,dotrewrite-d32-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md32,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md32-2;
	if (count(Md32,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md32-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd32()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md32,dotrewrite-d32-0)
	#call replace(Q.p5,`Q2'/2+i1/2-i4/2+i5/2-i7+i9,i,i1,i4,i5,i7,i9,Md32,dotrewrite-d32-1)
#endif
#break
#endswitch
#break
*--#] d32 : 
*--#[ d33 :
#case Md33
#procedure SimpleDotd33()
if (count(Md33,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p5^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p3.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md33,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md33-2;
	if (count(Md33,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p - p5.p;
	.sort:momrewrite-Md33-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd33()
	if (count(Md33,1)) id p2.p3 = i7 - i8;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md33,dotrewrite-d33-1)
	#call replace(p2.p5,-i2/2-i3/2+i4/2-i5/2-i7+i8-i9,i,i2,i3,i4,i5,i7,i8,i9,Md33,dotrewrite-d33-2)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md33,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p3} = - p3.p - p4.p - p2.p;
	.sort:momrewrite-Md33-2;
	if (count(Md33,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md33-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd33()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md33,dotrewrite-d33-0)
	#call replace(p3.p4,-i3-i7+i8-i9,i,i3,i7,i8,i9,Md33,dotrewrite-d33-1)
	#call replace(Q.p4,-`Q2'/2+i1/2-i2/2-i6-i7,i,i1,i2,i6,i7,Md33,dotrewrite-d33-2)
	#call replace(p1.p4,-`Q2'/2+i1/2-i3/2+i4/2-i5/2-i6-i7-i9,i,i1,i3,i4,i5,i6,i7,i9,Md33,dotrewrite-d33-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md33,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p2.p - p5.p;
	.sort:momrewrite-Md33-2;
	if (count(Md33,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md33-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd33()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md33,dotrewrite-d33-0)
	#call replace(p1.p5,i2/2+i3/2-i4/2+i5/2+i6+i7-i8+i9,i,i2,i3,i4,i5,i6,i7,i8,i9,Md33,dotrewrite-d33-1)
#endif
#break
#endswitch
#break
*--#] d33 : 
*--#[ d28 :
#case Md28
#procedure SimpleDotd28()
if (count(Md28,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id Q.p3^n? = i5^n;
	id Q.p4^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md28,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + Q.p - p1.p - p2.p - p3.p;
	.sort:momrewrite-Md28-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd28()
	#call replace(Q.p2,`Q2'-i5-i6-i7,i,i5,i6,i7,Md28,dotrewrite-d28-0)
	#call replace(p1.p2,-i1+i7-i8-i9,i,i1,i7,i8,i9,Md28,dotrewrite-d28-1)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2+i4/2-i6-i7+i9,i,i1,i2,i3,i4,i6,i7,i9,Md28,dotrewrite-d28-2)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md28,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p - p4.p;
	.sort:momrewrite-Md28-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd28()
	#call replace(p3.p4,-`Q2'/2-i1/2+i2/2-i3/2-i4/2+i5+i6+i7-i8-i9,i,i1,i2,i3,i4,i5,i6,i7,i8,i9,Md28,dotrewrite-d28-0)
#endif
#break
#endswitch
#break
*--#] d28 : 
*--#[ d50 :
#case Md50
#procedure SimpleDotd50()
if (count(Md50,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p3^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md50,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + Q.p - p2.p;
	.sort:momrewrite-Md50-2;
	if (count(Md50,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = - p3.p - p5.p;
	.sort:momrewrite-Md50-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd50()
	if (count(Md50,1)) id p1.p5 = -i8 - i9;
	#call replace(p3.p5,i2/2-i3/2-i5/2,i,i2,i3,i5,Md50,dotrewrite-d50-1)
	#call replace(Q.p5,-`Q2'/2-i1/2-i2/2+i4/2-i6+i7-i8,i,i1,i2,i4,i6,i7,i8,Md50,dotrewrite-d50-2)
#endif
#break
#case 14
* path: (1, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md50,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p2.p;
	.sort:momrewrite-Md50-2;
	if (count(Md50,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md50-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd50()
	#call replace(p1.p4,-i1+i7-i8,i,i1,i7,i8,Md50,dotrewrite-d50-0)
	#call replace(Q.p4,`Q2'/2-i1/2-i2/2+i4/2-i8,i,i1,i2,i4,i8,Md50,dotrewrite-d50-1)
	#call replace(p3.p4,i2/2+i3/2-i5/2+i6-i9,i,i2,i3,i5,i6,i9,Md50,dotrewrite-d50-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md50,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md50-2;
	if (count(Md50,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md50-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd50()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md50,dotrewrite-d50-0)
	#call replace(Q.p2,`Q2'/2+i1/2+i2/2-i4/2-i7+i8,i,i1,i2,i4,i7,i8,Md50,dotrewrite-d50-1)
#endif
#break
#endswitch
#break
*--#] d50 : 
*--#[ d37 :
#case Md37
#procedure SimpleDotd37()
if (count(Md37,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p2^n? = i6^n;
	id Q.p1^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 15
* path: (1, 0, 5)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md37,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md37-2;
	if (count(Md37,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p5.p - p2.p;
	.sort:momrewrite-Md37-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd37()
	#call replace(p1.p5,-i1+i7-i9,i,i1,i7,i9,Md37,dotrewrite-d37-0)
	#call replace(Q.p5,`Q2'/2-i1/2-i3/2+i5/2-i9,i,i1,i3,i5,i9,Md37,dotrewrite-d37-1)
	#call replace(p2.p5,-i1/2+i2/2-i4/2+i5/2+i7-i8-i9,i,i1,i2,i4,i5,i7,i8,i9,Md37,dotrewrite-d37-2)
#endif
#break
#default
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md37,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md37-2;
	if (count(Md37,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md37-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd37()
	#call replace(Q.p3,`Q2'/2+i1/2+i3/2-i5/2-i7+i9,i,i1,i3,i5,i7,i9,Md37,dotrewrite-d37-0)
	#call replace(p2.p3,i1/2-i2/2+i4/2-i5/2+i6-i7+i9,i,i1,i2,i4,i5,i6,i7,i9,Md37,dotrewrite-d37-1)
#endif
#break
#endswitch
#break
*--#] d37 : 
*--#[ d60 :
#case Md60
#procedure SimpleDotd60()
if (count(Md60,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id Q.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md60,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p3.p - p6.p;
	.sort:momrewrite-Md60-3;
	if (count(Md60,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md60-2;
	if (count(Md60,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md60-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd60()
	if (count(Md60,1)) id Q.p6 = i8 - i9;
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md60,dotrewrite-d60-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md60,dotrewrite-d60-2)
	#call replace(p2.p6,-`Q2'/2+i1/2-i2/2-i6/2+i7+i8-i9,i,i1,i2,i6,i7,i8,i9,Md60,dotrewrite-d60-3)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md60,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p + p3.p;
	.sort:momrewrite-Md60-3;
	if (count(Md60,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p2.p - p5.p;
	.sort:momrewrite-Md60-2;
	if (count(Md60,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md60-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd60()
	if (count(Md60,1)) id Q.p5 = -i7 - i8;
	#call replace(p2.p5,-i2/2+i3/2-i5/2,i,i2,i3,i5,Md60,dotrewrite-d60-1)
	#call replace(Q.p1,`Q2'-i7-i8+i9,i,i7,i8,i9,Md60,dotrewrite-d60-2)
	#call replace(p1.p5,-`Q2'/2+i1/2-i4/2+i5/2-i9,i,i1,i4,i5,i9,Md60,dotrewrite-d60-3)
	#call replace(p1.p2,`Q2'/2-i1/2-i2/2+i6/2-i8+i9,i,i1,i2,i6,i8,i9,Md60,dotrewrite-d60-4)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md60,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md60-3;
	if (count(Md60,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p4.p + p6.p;
	.sort:momrewrite-Md60-2;
	if (count(Md60,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md60-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd60()
	#call replace(Q.p1,`Q2'-i7-i8+i9,i,i7,i8,i9,Md60,dotrewrite-d60-0)
	#call replace(p1.p2,`Q2'/2-i1/2-i2/2+i6/2-i8+i9,i,i1,i2,i6,i8,i9,Md60,dotrewrite-d60-1)
	#call replace(p1.p4,-`Q2'/2+i1/2+i4/2-i5/2+i7+i8,i,i1,i4,i5,i7,i8,Md60,dotrewrite-d60-2)
	#call replace(p2.p4,`Q2'/2-i1/2-i3/2+i5/2+i6/2-i7-i8+i9,i,i1,i3,i5,i6,i7,i8,i9,Md60,dotrewrite-d60-3)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#if ( `MOMS' > 0 )
	if (count(Md60,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p + p3.p;
	.sort:momrewrite-Md60-3;
	if (count(Md60,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p - p2.p;
	.sort:momrewrite-Md60-2;
	if (count(Md60,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p3.p - p5.p;
	.sort:momrewrite-Md60-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd60()
	if (count(Md60,1)) id Q.p5 = -i7 - i8;
	#call replace(p3.p5,i2/2-i3/2-i5/2,i,i2,i3,i5,Md60,dotrewrite-d60-1)
	#call replace(Q.p1,`Q2'-i7-i8+i9,i,i7,i8,i9,Md60,dotrewrite-d60-2)
	#call replace(p1.p3,i2/2+i4/2-i5/2-i6/2+i8,i,i2,i4,i5,i6,i8,Md60,dotrewrite-d60-3)
	#call replace(p1.p5,-`Q2'/2+i1/2-i4/2+i5/2-i9,i,i1,i4,i5,i9,Md60,dotrewrite-d60-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md60,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p + p3.p;
	.sort:momrewrite-Md60-3;
	if (count(Md60,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md60-2;
	if (count(Md60,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md60-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd60()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md60,dotrewrite-d60-0)
	#call replace(Q.p1,`Q2'-i7-i8+i9,i,i7,i8,i9,Md60,dotrewrite-d60-1)
	#call replace(p1.p3,i2/2+i4/2-i5/2-i6/2+i8,i,i2,i4,i5,i6,i8,Md60,dotrewrite-d60-2)
	#call replace(p1.p2,`Q2'/2-i1/2-i2/2+i6/2-i8+i9,i,i1,i2,i6,i8,i9,Md60,dotrewrite-d60-3)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md60,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p - p2.p;
	.sort:momrewrite-Md60-3;
	if (count(Md60,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md60-2;
	if (count(Md60,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p;
	.sort:momrewrite-Md60-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd60()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md60,dotrewrite-d60-0)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md60,dotrewrite-d60-1)
	#call replace(p2.p4,`Q2'/2-i1/2-i3/2+i5/2+i6/2-i7-i8+i9,i,i1,i3,i5,i6,i7,i8,i9,Md60,dotrewrite-d60-2)
#endif
#break
#endswitch
#break
*--#] d60 : 
*--#[ d87 :
#case Md87
#procedure SimpleDotd87()
if (count(Md87,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 16
* path: (1, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md87,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p3.p;
	.sort:momrewrite-Md87-3;
	if (count(Md87,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md87-2;
	if (count(Md87,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md87-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd87()
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Md87,dotrewrite-d87-0)
	#call replace(Q.p6,`Q2'/2+i2/2-i3/2-i8,i,i2,i3,i8,Md87,dotrewrite-d87-1)
	#call replace(p4.p6,i3/2+i4/2-i5/2+i7-i9,i,i3,i4,i5,i7,i9,Md87,dotrewrite-d87-2)
#endif
#break
#case 13
* path: (1, 4, 3)
#if ( `MOMS' > 0 )
	if (count(Md87,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md87-3;
	if (count(Md87,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md87-2;
	if (count(Md87,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md87-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd87()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md87,dotrewrite-d87-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md87,dotrewrite-d87-1)
	#call replace(p1.p3,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Md87,dotrewrite-d87-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 2, 6)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md87,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p3.p;
	.sort:momrewrite-Md87-3;
	if (count(Md87,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md87-2;
	if (count(Md87,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md87-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd87()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md87,dotrewrite-d87-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md87,dotrewrite-d87-1)
	#call replace(p2.p4,i3/2+i4/2-i5/2+i7,i,i3,i4,i5,i7,Md87,dotrewrite-d87-2)
#endif
#break
#endswitch
#break
*--#] d87 : 
*--#[ d114 :
#case Md114
#procedure SimpleDotd114()
if (count(Md114,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p2.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md114,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md114-4;
	if (count(Md114,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md114-3;
	if (count(Md114,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md114-2;
	if (count(Md114,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md114-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd114()
	if (count(Md114,1)) id p3.p5 = i8 - i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md114,dotrewrite-d114-1)
	#call replace(p3.p7,-i3/2+i4/2-i7/2,i,i3,i4,i7,Md114,dotrewrite-d114-2)
	#call replace(Q.p7,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md114,dotrewrite-d114-3)
	#call replace(p5.p7,-i4/2-i5/2+i6/2-i8+i9,i,i4,i5,i6,i8,i9,Md114,dotrewrite-d114-4)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 14
* path: (1, 5, 4)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md114,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md114-4;
	if (count(Md114,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md114-3;
	if (count(Md114,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md114-2;
	if (count(Md114,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md114-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd114()
	if (count(Md114,1)) id p3.p5 = i8 - i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md114,dotrewrite-d114-1)
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md114,dotrewrite-d114-2)
	#call replace(p3.p4,-i3/2-i4/2+i7/2,i,i3,i4,i7,Md114,dotrewrite-d114-3)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md114,dotrewrite-d114-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md114,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md114-4;
	if (count(Md114,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p3.p;
	.sort:momrewrite-Md114-3;
	if (count(Md114,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p - p7.p;
	.sort:momrewrite-Md114-2;
	if (count(Md114,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md114-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd114()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md114,dotrewrite-d114-0)
	#call replace(p2.p7,-i1/2+i2/2+i7/2,i,i1,i2,i7,Md114,dotrewrite-d114-1)
	#call replace(Q.p7,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md114,dotrewrite-d114-2)
	#call replace(p5.p7,-i4/2-i5/2+i6/2-i8+i9,i,i4,i5,i6,i8,i9,Md114,dotrewrite-d114-3)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 57
* path: (5, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md114,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md114-4;
	if (count(Md114,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md114-3;
	if (count(Md114,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p + p7.p;
	.sort:momrewrite-Md114-2;
	if (count(Md114,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md114-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd114()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md114,dotrewrite-d114-0)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Md114,dotrewrite-d114-1)
	#call replace(p1.p5,i4/2+i5/2-i6/2+i8,i,i4,i5,i6,i8,Md114,dotrewrite-d114-2)
	#call replace(Q.p7,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md114,dotrewrite-d114-3)
	#call replace(p5.p7,-i4/2-i5/2+i6/2-i8+i9,i,i4,i5,i6,i8,i9,Md114,dotrewrite-d114-4)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md114,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md114-4;
	if (count(Md114,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p4.p;
	.sort:momrewrite-Md114-3;
	if (count(Md114,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p7.p;
	.sort:momrewrite-Md114-2;
	if (count(Md114,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md114-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd114()
	#call replace(Q.p4,-`Q2'/2+i1/2-i4/2,i,i1,i4,Md114,dotrewrite-d114-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md114,dotrewrite-d114-1)
	#call replace(p4.p7,i3/2-i4/2-i7/2,i,i3,i4,i7,Md114,dotrewrite-d114-2)
	#call replace(Q.p7,-i1/2+i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md114,dotrewrite-d114-3)
	#call replace(p5.p7,-i4/2-i5/2+i6/2-i8+i9,i,i4,i5,i6,i8,i9,Md114,dotrewrite-d114-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md114,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md114-4;
	if (count(Md114,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md114-3;
	if (count(Md114,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - Q.p;
	.sort:momrewrite-Md114-2;
	if (count(Md114,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p;
	.sort:momrewrite-Md114-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd114()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md114,dotrewrite-d114-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md114,dotrewrite-d114-1)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md114,dotrewrite-d114-2)
	#call replace(p1.p5,i4/2+i5/2-i6/2+i8,i,i4,i5,i6,i8,Md114,dotrewrite-d114-3)
#endif
#break
#endswitch
#break
*--#] d114 : 
*--#[ d115 :
#case Md115
#procedure SimpleDotd115()
if (count(Md115,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#case 36
* path: (3, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p - p6.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p3.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	#call replace(Q.p2,`Q2'/2+i2/2-i4/2,i,i2,i4,Md115,dotrewrite-d115-0)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md115,dotrewrite-d115-1)
	#call replace(p2.p6,-i1/2+i2/2+i6/2,i,i1,i2,i6,Md115,dotrewrite-d115-2)
	#call replace(Q.p6,-i1/2+i2/2-i4/2+i5/2,i,i1,i2,i4,i5,Md115,dotrewrite-d115-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md115,dotrewrite-d115-4)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p2.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p6.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	if (count(Md115,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md115,dotrewrite-d115-1)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md115,dotrewrite-d115-2)
	#call replace(Q.p6,-i1/2+i2/2-i4/2+i5/2,i,i1,i2,i4,i5,Md115,dotrewrite-d115-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md115,dotrewrite-d115-4)
#endif
#break
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case Q4
* path: (0, 5, 4)
#case 14
* path: (1, 5, 4)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p2.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p4.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	if (count(Md115,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p4,`Q2'/2-i2/2+i4/2,i,i2,i4,Md115,dotrewrite-d115-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md115,dotrewrite-d115-2)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md115,dotrewrite-d115-3)
	#call replace(p3.p4,-i2/2-i3/2+i7/2+i8,i,i2,i3,i7,i8,Md115,dotrewrite-d115-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p5.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p2.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p6.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md115,dotrewrite-d115-0)
	#call replace(p1.p6,-i1/2+i2/2-i6/2,i,i1,i2,i6,Md115,dotrewrite-d115-1)
	#call replace(Q.p6,-i1/2+i2/2-i4/2+i5/2,i,i1,i2,i4,i5,Md115,dotrewrite-d115-2)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md115,dotrewrite-d115-3)
#endif
#break
#case 37
* path: (3, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p5.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p7.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md115,dotrewrite-d115-0)
	#call replace(p3.p7,i2/2-i3/2-i7/2,i,i2,i3,i7,Md115,dotrewrite-d115-1)
	#call replace(Q.p7,`Q2'/2+i2/2-i4/2-i8,i,i2,i4,i8,Md115,dotrewrite-d115-2)
	#call replace(p1.p7,i1/2+i2/2-i6/2-i9,i,i1,i2,i6,i9,Md115,dotrewrite-d115-3)
#endif
#break
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p2.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p3.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	if (count(Md115,1)) id p3.p5 = -i8 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i4/2,i,i2,i4,Md115,dotrewrite-d115-1)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md115,dotrewrite-d115-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md115,dotrewrite-d115-3)
	#call replace(p2.p5,-`Q2'/2+i1/2+i4/2-i6/2,i,i1,i4,i6,Md115,dotrewrite-d115-4)
#endif
#break
#case Q6
* path: (0, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p5.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p2.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p4.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	#call replace(Q.p4,`Q2'/2-i2/2+i4/2,i,i2,i4,Md115,dotrewrite-d115-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md115,dotrewrite-d115-1)
	#call replace(p3.p4,-i2/2-i3/2+i7/2+i8,i,i2,i3,i7,i8,Md115,dotrewrite-d115-2)
	#call replace(Q.p6,-i1/2+i2/2-i4/2+i5/2,i,i1,i2,i4,i5,Md115,dotrewrite-d115-3)
	#call replace(p3.p6,i2/2+i3/2-i7/2-i9,i,i2,i3,i7,i9,Md115,dotrewrite-d115-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md115,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p;
	.sort:momrewrite-Md115-4;
	if (count(Md115,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md115-3;
	if (count(Md115,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p;
	.sort:momrewrite-Md115-2;
	if (count(Md115,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p3.p;
	.sort:momrewrite-Md115-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd115()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md115,dotrewrite-d115-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i4/2,i,i2,i4,Md115,dotrewrite-d115-1)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md115,dotrewrite-d115-2)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md115,dotrewrite-d115-3)
#endif
#break
#endswitch
#break
*--#] d115 : 
*--#[ d119 :
#case Md119
#procedure SimpleDotd119()
if (count(Md119,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	if (count(Md119,1)) id p1.p7 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-1)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md119,dotrewrite-d119-2)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md119,dotrewrite-d119-3)
	#call replace(p1.p5,-`Q2'/2-i1/2+i6/2+i8,i,i1,i6,i8,Md119,dotrewrite-d119-4)
	#call replace(Q.p7,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Md119,dotrewrite-d119-5)
#endif
#break
#case Q7
* path: (0, 1, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p7.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	if (count(Md119,1)) id p1.p7 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-1)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md119,dotrewrite-d119-2)
	#call replace(p2.p7,-i2/2+i3/2-i7/2,i,i2,i3,i7,Md119,dotrewrite-d119-3)
	#call replace(Q.p7,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Md119,dotrewrite-d119-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p3.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md119,dotrewrite-d119-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md119,dotrewrite-d119-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md119,dotrewrite-d119-3)
	#call replace(p2.p4,`Q2'/2-i3/2-i5/2+i7/2,i,i3,i5,i7,Md119,dotrewrite-d119-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md119,dotrewrite-d119-1)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md119,dotrewrite-d119-2)
	#call replace(p1.p5,-`Q2'/2-i1/2+i6/2+i8,i,i1,i6,i8,Md119,dotrewrite-d119-3)
	#call replace(p3.p5,-`Q2'/2+i2/2+i4/2-i7/2,i,i2,i4,i7,Md119,dotrewrite-d119-4)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p - p7.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	if (count(Md119,1)) id p1.p7 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md119,dotrewrite-d119-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md119,dotrewrite-d119-3)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md119,dotrewrite-d119-4)
	#call replace(Q.p7,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Md119,dotrewrite-d119-5)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p4.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p - p7.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	if (count(Md119,1)) id p1.p7 = -i8 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md119,dotrewrite-d119-2)
	#call replace(p3.p7,-i2/2+i3/2+i7/2,i,i2,i3,i7,Md119,dotrewrite-d119-3)
	#call replace(Q.p7,-i2/2+i3/2-i4/2+i5/2,i,i2,i3,i4,i5,Md119,dotrewrite-d119-4)
#endif
#break
#case Q4
* path: (0, 1, 5, 4)
#case Q5
* path: (0, 4, 5)
#case 14
* path: (1, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md119,dotrewrite-d119-1)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md119,dotrewrite-d119-2)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md119,dotrewrite-d119-3)
	#call replace(p1.p4,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md119,dotrewrite-d119-4)
	#call replace(p1.p5,-`Q2'/2-i1/2+i6/2+i8,i,i1,i6,i8,Md119,dotrewrite-d119-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 2, 5)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md119,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md119-4;
	if (count(Md119,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md119-3;
	if (count(Md119,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md119-2;
	if (count(Md119,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p2.p;
	.sort:momrewrite-Md119-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd119()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md119,dotrewrite-d119-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md119,dotrewrite-d119-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md119,dotrewrite-d119-2)
	#call replace(p2.p3,i2/2+i3/2-i7/2,i,i2,i3,i7,Md119,dotrewrite-d119-3)
#endif
#break
#endswitch
#break
*--#] d119 : 
*--#[ d91 :
#case Md91
#procedure SimpleDotd91()
if (count(Md91,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md91,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md91-3;
	if (count(Md91,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md91-2;
	if (count(Md91,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md91-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd91()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md91,dotrewrite-d91-0)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md91,dotrewrite-d91-1)
	#call replace(Q.p6,`Q2'/2-i2/2+i4/2-i7,i,i2,i4,i7,Md91,dotrewrite-d91-2)
	#call replace(p1.p6,`Q2'/2+i1/2-i5/2-i8-i9,i,i1,i5,i8,i9,Md91,dotrewrite-d91-3)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md91,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p + p4.p;
	.sort:momrewrite-Md91-3;
	if (count(Md91,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md91-2;
	if (count(Md91,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md91-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd91()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md91,dotrewrite-d91-0)
	#call replace(Q.p4,-`Q2'/2+i2/2-i4/2,i,i2,i4,Md91,dotrewrite-d91-1)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md91,dotrewrite-d91-2)
	#call replace(p1.p4,-`Q2'/2-i1/2+i5/2+i8,i,i1,i5,i8,Md91,dotrewrite-d91-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 2, 4)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md91,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - Q.p;
	.sort:momrewrite-Md91-3;
	if (count(Md91,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md91-2;
	if (count(Md91,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md91-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd91()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md91,dotrewrite-d91-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i4/2,i,i2,i4,Md91,dotrewrite-d91-1)
	#call replace(p2.p3,-i3/2-i4/2+i6/2+i7,i,i3,i4,i6,i7,Md91,dotrewrite-d91-2)
#endif
#break
#endswitch
#break
*--#] d91 : 
*--#[ d111 :
#case Md111
#procedure SimpleDotd111()
if (count(Md111,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md111,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p6.p;
	.sort:momrewrite-Md111-3;
	if (count(Md111,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md111-2;
	if (count(Md111,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md111-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd111()
	if (count(Md111,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md111,dotrewrite-d111-1)
	#call replace(p3.p6,i2/2-i3/2-i6/2,i,i2,i3,i6,Md111,dotrewrite-d111-2)
	#call replace(Q.p6,`Q2'/2+i2/2-i4/2-i7,i,i2,i4,i7,Md111,dotrewrite-d111-3)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md111,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md111-3;
	if (count(Md111,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md111-2;
	if (count(Md111,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md111-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd111()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md111,dotrewrite-d111-0)
	#call replace(Q.p4,`Q2'/2-i2/2+i4/2,i,i2,i4,Md111,dotrewrite-d111-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i5/2-i8,i,i1,i5,i8,Md111,dotrewrite-d111-2)
	#call replace(p3.p4,-i2/2-i3/2+i6/2+i7,i,i2,i3,i6,i7,Md111,dotrewrite-d111-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md111,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p;
	.sort:momrewrite-Md111-3;
	if (count(Md111,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md111-2;
	if (count(Md111,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md111-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd111()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md111,dotrewrite-d111-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i4/2,i,i2,i4,Md111,dotrewrite-d111-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md111,dotrewrite-d111-2)
#endif
#break
#endswitch
#break
*--#] d111 : 
*--#[ d112 :
#case Md112
#procedure SimpleDotd112()
if (count(Md112,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p2.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md112,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + Q.p - p5.p;
	.sort:momrewrite-Md112-3;
	if (count(Md112,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md112-2;
	if (count(Md112,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md112-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd112()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md112,dotrewrite-d112-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md112,dotrewrite-d112-1)
	#call replace(Q.p5,`Q2'/2-i2/2+i5/2,i,i2,i5,Md112,dotrewrite-d112-2)
	#call replace(p1.p5,`Q2'/2+i1/2-i6/2-i8,i,i1,i6,i8,Md112,dotrewrite-d112-3)
	#call replace(p3.p5,`Q2'/2+i3/2-i4/2-i7,i,i3,i4,i7,Md112,dotrewrite-d112-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 16
* path: (1, 0, 6)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md112,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md112-3;
	if (count(Md112,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md112-2;
	if (count(Md112,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md112-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd112()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md112,dotrewrite-d112-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md112,dotrewrite-d112-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md112,dotrewrite-d112-2)
#endif
#break
#endswitch
#break
*--#] d112 : 
*--#[ d90 :
#case Md90
#procedure SimpleDotd90()
if (count(Md90,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q3
* path: (0, 4, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md90,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p;
	.sort:momrewrite-Md90-3;
	if (count(Md90,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md90-2;
	if (count(Md90,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md90-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd90()
	#call replace(Q.p3,`Q2'/2-i1/2+i3/2,i,i1,i3,Md90,dotrewrite-d90-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md90,dotrewrite-d90-1)
	#call replace(p2.p3,-i1/2-i2/2+i6/2+i8,i,i1,i2,i6,i8,Md90,dotrewrite-d90-2)
#endif
#break
#case 26
* path: (2, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md90,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p3.p;
	.sort:momrewrite-Md90-3;
	if (count(Md90,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p6.p;
	.sort:momrewrite-Md90-2;
	if (count(Md90,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md90-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd90()
	#call replace(p2.p6,i1/2-i2/2-i6/2,i,i1,i2,i6,Md90,dotrewrite-d90-0)
	#call replace(Q.p6,`Q2'/2+i1/2-i3/2-i8,i,i1,i3,i8,Md90,dotrewrite-d90-1)
	#call replace(p4.p6,i3/2+i4/2-i5/2+i7-i9,i,i3,i4,i5,i7,i9,Md90,dotrewrite-d90-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md90,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p3.p;
	.sort:momrewrite-Md90-3;
	if (count(Md90,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p;
	.sort:momrewrite-Md90-2;
	if (count(Md90,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p;
	.sort:momrewrite-Md90-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd90()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md90,dotrewrite-d90-0)
	#call replace(p1.p2,i1/2+i2/2-i6/2,i,i1,i2,i6,Md90,dotrewrite-d90-1)
	#call replace(p1.p4,i3/2+i4/2-i5/2+i7,i,i3,i4,i5,i7,Md90,dotrewrite-d90-2)
#endif
#break
#endswitch
#break
*--#] d90 : 
*--#[ d113 :
#case Md113
#procedure SimpleDotd113()
if (count(Md113,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 15
* path: (1, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md113,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p2.p;
	.sort:momrewrite-Md113-3;
	if (count(Md113,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Md113-2;
	if (count(Md113,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md113-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd113()
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md113,dotrewrite-d113-0)
	#call replace(Q.p5,`Q2'/2+i2/2-i4/2-i8,i,i2,i4,i8,Md113,dotrewrite-d113-1)
	#call replace(p3.p5,i2/2+i3/2-i6/2-i9,i,i2,i3,i6,i9,Md113,dotrewrite-d113-2)
#endif
#break
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md113,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p2.p;
	.sort:momrewrite-Md113-3;
	if (count(Md113,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p4.p;
	.sort:momrewrite-Md113-2;
	if (count(Md113,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md113-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd113()
	#call replace(Q.p4,`Q2'/2-i2/2+i4/2,i,i2,i4,Md113,dotrewrite-d113-0)
	#call replace(p1.p4,-i1/2-i2/2+i5/2+i8,i,i1,i2,i5,i8,Md113,dotrewrite-d113-1)
	#call replace(p3.p4,-i2/2-i3/2+i6/2+i7,i,i2,i3,i6,i7,Md113,dotrewrite-d113-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md113,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p;
	.sort:momrewrite-Md113-3;
	if (count(Md113,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md113-2;
	if (count(Md113,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p;
	.sort:momrewrite-Md113-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd113()
	#call replace(Q.p2,`Q2'/2+i2/2-i4/2,i,i2,i4,Md113,dotrewrite-d113-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md113,dotrewrite-d113-1)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md113,dotrewrite-d113-2)
#endif
#break
#endswitch
#break
*--#] d113 : 
*--#[ d88 :
#case Md88
#procedure SimpleDotd88()
if (count(Md88,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 24
* path: (2, 1, 4)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md88,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md88-3;
	if (count(Md88,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p;
	.sort:momrewrite-Md88-2;
	if (count(Md88,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md88-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd88()
	#call replace(Q.p1,`Q2'/2+i1/2-i3/2,i,i1,i3,Md88,dotrewrite-d88-0)
	#call replace(p1.p2,-i2/2-i3/2+i6/2+i8,i,i2,i3,i6,i8,Md88,dotrewrite-d88-1)
	#call replace(p1.p4,i3/2+i4/2-i5/2+i7,i,i3,i4,i5,i7,Md88,dotrewrite-d88-2)
#endif
#break
#case 26
* path: (2, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md88,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md88-3;
	if (count(Md88,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p6.p;
	.sort:momrewrite-Md88-2;
	if (count(Md88,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md88-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd88()
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md88,dotrewrite-d88-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i3/2-i8,i,i1,i3,i8,Md88,dotrewrite-d88-1)
	#call replace(p4.p6,-i3/2-i4/2+i5/2-i9,i,i3,i4,i5,i9,Md88,dotrewrite-d88-2)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md88,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p3.p;
	.sort:momrewrite-Md88-3;
	if (count(Md88,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md88-2;
	if (count(Md88,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p3.p;
	.sort:momrewrite-Md88-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd88()
	#call replace(Q.p3,-`Q2'/2+i1/2-i3/2,i,i1,i3,Md88,dotrewrite-d88-0)
	#call replace(p2.p3,-i2/2-i3/2+i6/2,i,i2,i3,i6,Md88,dotrewrite-d88-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md88,dotrewrite-d88-2)
#endif
#break
#endswitch
#break
*--#] d88 : 
*--#[ d212 :
#case Md212
#procedure SimpleDotd212()
if (count(Md212,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + p7.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p8.p - p2.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	if (count(Md212,1)) id Q.p8 = i10 + i9;
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md212,dotrewrite-d212-1)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Md212,dotrewrite-d212-2)
	#call replace(p1.p8,-i1/2-i12+i14+i4/2-i7/2,i,i1,i12,i14,i4,i7,Md212,dotrewrite-d212-3)
	#call replace(p3.p8,i10+i6/2-i7/2+i8/2+i9,i,i10,i6,i7,i8,i9,Md212,dotrewrite-d212-4)
#endif
#break
#case 14
* path: (1, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p6.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p4.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	if (count(Md212,1)) id p1.p6 = i12 - i14;
	if (count(Md212,1)) id p2.p6 = -i11 + i9;
	#call replace(p1.p4,-i1/2-i4/2+i7/2,i,i1,i4,i7,Md212,dotrewrite-d212-2)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md212,dotrewrite-d212-3)
	#call replace(p4.p6,-i12+i14-i6/2-i7/2+i8/2,i,i12,i14,i6,i7,i8,Md212,dotrewrite-d212-4)
	#call replace(Q.p4,-`Q2'/2-i10-i12+i3/2-i6/2-i9,i,i10,i12,i3,i6,i9,Md212,dotrewrite-d212-5)
	#call replace(p2.p4,i11-i13-i2/2+i5/2-i8/2-i9,i,i11,i13,i2,i5,i8,i9,Md212,dotrewrite-d212-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q7
* path: (0, 6, 7)
#case 17
* path: (1, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p1.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	if (count(Md212,1)) id p1.p6 = i12 - i14;
	if (count(Md212,1)) id p2.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md212,dotrewrite-d212-2)
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md212,dotrewrite-d212-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md212,dotrewrite-d212-4)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2-i9,i,i10,i3,i6,i9,Md212,dotrewrite-d212-5)
	#call replace(p2.p7,i11-i2/2+i5/2-i8/2-i9,i,i11,i2,i5,i8,i9,Md212,dotrewrite-d212-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 3, 6)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + p7.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p8.p - p2.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	if (count(Md212,1)) id p1.p6 = i12 - i14;
	if (count(Md212,1)) id p2.p6 = -i11 + i9;
	if (count(Md212,1)) id Q.p8 = i10 + i9;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md212,dotrewrite-d212-3)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Md212,dotrewrite-d212-4)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md212,dotrewrite-d212-5)
	#call replace(p1.p8,-i1/2-i12+i14+i4/2-i7/2,i,i1,i12,i14,i4,i7,Md212,dotrewrite-d212-6)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p2} = - p6.p + Q.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p1.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p8.p - p2.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	if (count(Md212,1)) id Q.p8 = i10 + i9;
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md212,dotrewrite-d212-1)
	#call replace(p2.p8,i2/2-i5/2+i8/2,i,i2,i5,i8,Md212,dotrewrite-d212-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md212,dotrewrite-d212-3)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2-i9,i,i10,i3,i6,i9,Md212,dotrewrite-d212-4)
	#call replace(p2.p7,i11-i2/2+i5/2-i8/2-i9,i,i11,i2,i5,i8,i9,Md212,dotrewrite-d212-5)
	#call replace(p1.p8,-i1/2-i12+i14+i4/2-i7/2,i,i1,i12,i14,i4,i7,Md212,dotrewrite-d212-6)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p6.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p1.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md212,dotrewrite-d212-0)
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md212,dotrewrite-d212-1)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2-i9,i,i10,i3,i6,i9,Md212,dotrewrite-d212-2)
	#call replace(p2.p7,i11-i2/2+i5/2-i8/2-i9,i,i11,i2,i5,i8,i9,Md212,dotrewrite-d212-3)
	#call replace(p3.p7,-`Q2'/2-i10+i3/2+i7/2-i8/2-i9,i,i10,i3,i7,i8,i9,Md212,dotrewrite-d212-4)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md212,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + p7.p;
	.sort:momrewrite-Md212-4;
	if (count(Md212,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md212-3;
	if (count(Md212,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md212-2;
	if (count(Md212,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p5.p;
	.sort:momrewrite-Md212-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd212()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md212,dotrewrite-d212-0)
	#call replace(p2.p5,-i2/2-i5/2+i8/2,i,i2,i5,i8,Md212,dotrewrite-d212-1)
	#call replace(p1.p5,-i1/2-i12-i13+i14+i4/2-i7/2,i,i1,i12,i13,i14,i4,i7,Md212,dotrewrite-d212-2)
	#call replace(p3.p5,i10-i11+i6/2-i7/2+i8/2+i9,i,i10,i11,i6,i7,i8,i9,Md212,dotrewrite-d212-3)
#endif
#break
#endswitch
#break
*--#] d212 : 
*--#[ d206 :
#case Md206
#procedure SimpleDotd206()
if (count(Md206,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p2.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id p1.p6 = i11 - i13;
	#call replace(p2.p5,i2/2+i5/2-i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md206,dotrewrite-d206-2)
	#call replace(p5.p6,-i1/2+i10+i13-i14-i3/2+i4/2-i5/2,i,i1,i10,i13,i14,i3,i4,i5,Md206,dotrewrite-d206-3)
	#call replace(p2.p6,-i1/2+i10+i13-i14-i3/2+i4/2-i5/2+i6/2-i7/2+i8/2,i,i1,i10,i13,i14,i3,i4,i5,i6,i7,i8,Md206,dotrewrite-d206-4)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p5.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id p1.p6 = i11 - i13;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md206,dotrewrite-d206-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md206,dotrewrite-d206-2)
	#call replace(p1.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md206,dotrewrite-d206-3)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2+i9,i,i10,i3,i6,i9,Md206,dotrewrite-d206-4)
	#call replace(p5.p6,-i1/2+i10+i13-i14-i3/2+i4/2-i5/2,i,i1,i10,i13,i14,i3,i4,i5,Md206,dotrewrite-d206-5)
	#call replace(p5.p7,i1/2-i10-i13+i14+i2/2+i3/2-i4/2-i8/2,i,i1,i10,i13,i14,i2,i3,i4,i8,Md206,dotrewrite-d206-6)
#endif
#break
#case 14
* path: (1, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + Q.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p5.p - p8.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p1.p + p4.p + p5.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(p1.p4,-i1+i13-i14,i,i1,i13,i14,Md206,dotrewrite-d206-2)
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-3)
	#call replace(Q.p4,`Q2'/2-i10-i11+i3/2-i6/2,i,i10,i11,i3,i6,Md206,dotrewrite-d206-4)
	#call replace(p4.p5,i1/2-i13+i3/2-i4/2-i5/2,i,i1,i13,i3,i4,i5,Md206,dotrewrite-d206-5)
	#call replace(p4.p8,i10+i12-i14+i2/2-i5/2+i6/2-i7/2-i9,i,i10,i12,i14,i2,i5,i6,i7,i9,Md206,dotrewrite-d206-6)
#endif
#break
#case Q6
* path: (0, 6)
#case Q8
* path: (0, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p5.p - p8.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id p1.p6 = i11 - i13;
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md206,dotrewrite-d206-3)
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-4)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md206,dotrewrite-d206-5)
	#call replace(p5.p6,-i1/2+i10+i13-i14-i3/2+i4/2-i5/2,i,i1,i10,i13,i14,i3,i4,i5,Md206,dotrewrite-d206-6)
#endif
#break
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = - p6.p + Q.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p + p8.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(p2.p8,-i2/2+i5/2-i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md206,dotrewrite-d206-3)
	#call replace(p1.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md206,dotrewrite-d206-4)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2+i9,i,i10,i3,i6,i9,Md206,dotrewrite-d206-5)
	#call replace(p2.p7,i1/2-i10-i13+i14+i2/2+i3/2-i4/2-i6/2+i7/2,i,i1,i10,i13,i14,i2,i3,i4,i6,i7,Md206,dotrewrite-d206-6)
#endif
#break
#case Q2
* path: (0, 3, 1, 2)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p + p8.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md206,dotrewrite-d206-2)
	#call replace(p2.p8,-i2/2+i5/2-i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-3)
	#call replace(p3.p8,i10+i6/2-i7/2+i8/2-i9,i,i10,i6,i7,i8,i9,Md206,dotrewrite-d206-4)
	#call replace(p2.p3,i1/2-i10-i13+i14+i3/2-i4/2+i5/2-i6/2+i7/2-i8/2+i9,i,i1,i10,i13,i14,i3,i4,i5,i6,i7,i8,i9,Md206,dotrewrite-d206-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p5.p - p8.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p - p5.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md206,dotrewrite-d206-2)
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-3)
	#call replace(p3.p8,i10+i6/2-i7/2+i8/2-i9,i,i10,i6,i7,i8,i9,Md206,dotrewrite-d206-4)
	#call replace(p3.p5,i1/2-i13+i14+i3/2-i4/2+i5/2,i,i1,i13,i14,i3,i4,i5,Md206,dotrewrite-d206-5)
#endif
#break
#case Q7
* path: (0, 7)
#case 17
* path: (1, 7)
#case 57
* path: (5, 1, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = - p6.p + Q.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p5.p - p8.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(p5.p8,-i2/2+i5/2+i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md206,dotrewrite-d206-3)
	#call replace(p1.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md206,dotrewrite-d206-4)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2+i9,i,i10,i3,i6,i9,Md206,dotrewrite-d206-5)
	#call replace(p5.p7,i1/2-i10-i13+i14+i2/2+i3/2-i4/2-i8/2,i,i1,i10,i13,i14,i2,i3,i4,i8,Md206,dotrewrite-d206-6)
#endif
#break
#case 26
* path: (2, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p + p8.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id p1.p6 = i11 - i13;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md206,dotrewrite-d206-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md206,dotrewrite-d206-2)
	#call replace(p1.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md206,dotrewrite-d206-3)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2+i9,i,i10,i3,i6,i9,Md206,dotrewrite-d206-4)
	#call replace(p2.p7,i1/2-i10-i13+i14+i2/2+i3/2-i4/2-i6/2+i7/2,i,i1,i10,i13,i14,i2,i3,i4,i6,i7,Md206,dotrewrite-d206-5)
	#call replace(p2.p6,-i1/2+i10+i13-i14-i3/2+i4/2-i5/2+i6/2-i7/2+i8/2,i,i1,i10,i13,i14,i3,i4,i5,i6,i7,i8,Md206,dotrewrite-d206-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p + p8.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	if (count(Md206,1)) id p1.p6 = i11 - i13;
	if (count(Md206,1)) id Q.p8 = i10 - i9;
	if (count(Md206,1)) id p1.p8 = -i12 + i14;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md206,dotrewrite-d206-3)
	#call replace(p2.p8,-i2/2+i5/2-i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-4)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md206,dotrewrite-d206-5)
	#call replace(p2.p6,-i1/2+i10+i13-i14-i3/2+i4/2-i5/2+i6/2-i7/2+i8/2,i,i1,i10,i13,i14,i3,i4,i5,i6,i7,i8,Md206,dotrewrite-d206-6)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p5.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p6.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p - p5.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md206,dotrewrite-d206-0)
	#call replace(p1.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md206,dotrewrite-d206-1)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2+i9,i,i10,i3,i6,i9,Md206,dotrewrite-d206-2)
	#call replace(p3.p5,i1/2-i13+i14+i3/2-i4/2+i5/2,i,i1,i13,i14,i3,i4,i5,Md206,dotrewrite-d206-3)
	#call replace(p3.p7,-`Q2'/2-i10+i3/2+i7/2-i8/2+i9,i,i10,i3,i7,i8,i9,Md206,dotrewrite-d206-4)
	#call replace(p5.p7,i1/2-i10-i13+i14+i2/2+i3/2-i4/2-i8/2,i,i1,i10,i13,i14,i2,i3,i4,i8,Md206,dotrewrite-d206-5)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md206,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md206-4;
	if (count(Md206,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md206-3;
	if (count(Md206,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p2.p;
	.sort:momrewrite-Md206-2;
	if (count(Md206,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p - p5.p;
	.sort:momrewrite-Md206-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd206()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md206,dotrewrite-d206-0)
	#call replace(p2.p5,i2/2+i5/2-i8/2,i,i2,i5,i8,Md206,dotrewrite-d206-1)
	#call replace(p3.p5,i1/2-i13+i14+i3/2-i4/2+i5/2,i,i1,i13,i14,i3,i4,i5,Md206,dotrewrite-d206-2)
	#call replace(p2.p3,i1/2-i10-i13+i14+i3/2-i4/2+i5/2-i6/2+i7/2-i8/2+i9,i,i1,i10,i13,i14,i3,i4,i5,i6,i7,i8,i9,Md206,dotrewrite-d206-3)
#endif
#break
#endswitch
#break
*--#] d206 : 
*--#[ d209 :
#case Md209
#procedure SimpleDotd209()
if (count(Md209,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p2.p5^n? = i9^n;
	id p3.p4^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 28
* path: (2, 3, 8)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p3} = + p7.p - p2.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = + p8.p - p3.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p7 = i11 + i13;
	if (count(Md209,1)) id Q.p8 = i12 + i14;
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-2)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md209,dotrewrite-d209-3)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md209,dotrewrite-d209-4)
	#call replace(p2.p3,-`Q2'/2+i1/2-i11-i12-i2/2-i3/2,i,i1,i11,i12,i2,i3,Md209,dotrewrite-d209-5)
	#call replace(p3.p7,-`Q2'/2+i1/2+i10-i11-i12-i2/2-i3/2,i,i1,i10,i11,i12,i2,i3,Md209,dotrewrite-d209-6)
	#call replace(p2.p8,-`Q2'/2+i1/2-i11-i12-i2/2-i3/2+i9,i,i1,i11,i12,i2,i3,i9,Md209,dotrewrite-d209-7)
#endif
#break
#case Q6
* path: (0, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p3} = - p2.p + p7.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p8.p - p5.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p8 = i12 + i14;
	#call replace(p5.p8,-i3/2+i5/2+i8/2,i,i3,i5,i8,Md209,dotrewrite-d209-1)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md209,dotrewrite-d209-2)
	#call replace(Q.p6,-i11-i12-i13-i14,i,i11,i12,i13,i14,Md209,dotrewrite-d209-3)
	#call replace(p2.p8,-`Q2'/2+i1/2-i11-i12-i2/2-i3/2+i9,i,i1,i11,i12,i2,i3,i9,Md209,dotrewrite-d209-4)
	#call replace(p2.p6,`Q2'/2-i1/2+i11+i12+i3/2+i4/2-i7/2-i9,i,i1,i11,i12,i3,i4,i7,i9,Md209,dotrewrite-d209-5)
	#call replace(p5.p6,-`Q2'/2+i1/2+i10-i11-i12-i2/2-i5/2-i6/2+i7/2,i,i1,i10,i11,i12,i2,i5,i6,i7,Md209,dotrewrite-d209-6)
#endif
#break
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p8.p - p7.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p8.p - p5.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p8 = i12 + i14;
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-1)
	#call replace(p5.p8,-i3/2+i5/2+i8/2,i,i3,i5,i8,Md209,dotrewrite-d209-2)
	#call replace(p2.p8,-`Q2'/2+i1/2-i11-i12-i2/2-i3/2+i9,i,i1,i11,i12,i2,i3,i9,Md209,dotrewrite-d209-3)
	#call replace(p4.p8,`Q2'/2-i1/2+i11+i12+i2/2+i3/2+i6/2-i7/2-i8/2-i9,i,i1,i11,i12,i2,i3,i6,i7,i8,i9,Md209,dotrewrite-d209-4)
	#call replace(p4.p5,`Q2'/2-i1/2-i10+i11+i12+i2/2+i3/2+i6/2-i7/2-i8/2-i9,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,i9,Md209,dotrewrite-d209-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = - p3.p + p8.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p3} = + p7.p - p2.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p7 = i11 + i13;
	#call replace(Q.p1,`Q2'+i11+i12,i,i11,i12,Md209,dotrewrite-d209-1)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md209,dotrewrite-d209-3)
	#call replace(Q.p6,-i11-i12-i13-i14,i,i11,i12,i13,i14,Md209,dotrewrite-d209-4)
	#call replace(p1.p2,-`Q2'/2+i1/2-i12+i2/2-i3/2,i,i1,i12,i2,i3,Md209,dotrewrite-d209-5)
	#call replace(p2.p6,`Q2'/2-i1/2+i11+i12+i3/2+i4/2-i7/2-i9,i,i1,i11,i12,i3,i4,i7,i9,Md209,dotrewrite-d209-6)
	#call replace(p1.p7,-`Q2'/2+i1/2+i10-i12+i13-i3/2-i4/2+i7/2,i,i1,i10,i12,i13,i3,i4,i7,Md209,dotrewrite-d209-7)
	#call replace(p1.p6,`Q2'-i1-i10+i11+i12-i13-i14+i2/2+i3/2+i4/2+i5/2-i7/2-i8/2-i9,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i5,i7,i8,i9,Md209,dotrewrite-d209-8)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p8.p - p7.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p5.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p3} = + p7.p - p2.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p7 = i11 + i13;
	#call replace(Q.p1,`Q2'+i11+i12,i,i11,i12,Md209,dotrewrite-d209-1)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-2)
	#call replace(p1.p2,-`Q2'/2+i1/2-i12+i2/2-i3/2,i,i1,i12,i2,i3,Md209,dotrewrite-d209-3)
	#call replace(p1.p5,i14-i3/2-i5/2+i8/2+i9,i,i14,i3,i5,i8,i9,Md209,dotrewrite-d209-4)
	#call replace(p1.p7,-`Q2'/2+i1/2+i10-i12+i13-i3/2-i4/2+i7/2,i,i1,i10,i12,i13,i3,i4,i7,Md209,dotrewrite-d209-5)
	#call replace(p5.p7,`Q2'/2-i1/2-i10+i11+i12+i2/2+i3/2+i6/2-i7/2-i8/2,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,Md209,dotrewrite-d209-6)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p5} = + p7.p - p4.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = + p8.p - p3.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p7 = i11 + i13;
	if (count(Md209,1)) id Q.p8 = i12 + i14;
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-2)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md209,dotrewrite-d209-3)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md209,dotrewrite-d209-4)
	#call replace(p3.p7,-`Q2'/2+i1/2+i10-i11-i12-i2/2-i3/2,i,i1,i10,i11,i12,i2,i3,Md209,dotrewrite-d209-5)
	#call replace(p4.p8,`Q2'/2-i1/2+i11+i12+i2/2+i3/2+i6/2-i7/2-i8/2-i9,i,i1,i11,i12,i2,i3,i6,i7,i8,i9,Md209,dotrewrite-d209-6)
#endif
#break
#case 46
* path: (4, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = - p3.p + p8.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p5} = + p7.p - p4.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	if (count(Md209,1)) id Q.p7 = i11 + i13;
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md209,dotrewrite-d209-2)
	#call replace(Q.p6,-i11-i12-i13-i14,i,i11,i12,i13,i14,Md209,dotrewrite-d209-3)
	#call replace(p3.p7,-`Q2'/2+i1/2+i10-i11-i12-i2/2-i3/2,i,i1,i10,i11,i12,i2,i3,Md209,dotrewrite-d209-4)
	#call replace(p3.p6,`Q2'/2-i1/2-i10+i11+i12+i2/2+i5/2-i8/2,i,i1,i10,i11,i12,i2,i5,i8,Md209,dotrewrite-d209-5)
	#call replace(p4.p6,-`Q2'/2+i1/2-i11-i12-i3/2-i4/2-i6/2+i8/2+i9,i,i1,i11,i12,i3,i4,i6,i8,i9,Md209,dotrewrite-d209-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p8.p - p7.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p5.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	#call replace(Q.p1,`Q2'+i11+i12,i,i11,i12,Md209,dotrewrite-d209-0)
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-1)
	#call replace(p1.p2,-`Q2'/2+i1/2-i12+i2/2-i3/2,i,i1,i12,i2,i3,Md209,dotrewrite-d209-2)
	#call replace(p1.p4,i10+i13-i2/2-i4/2+i7/2,i,i10,i13,i2,i4,i7,Md209,dotrewrite-d209-3)
	#call replace(p1.p5,i14-i3/2-i5/2+i8/2+i9,i,i14,i3,i5,i8,i9,Md209,dotrewrite-d209-4)
	#call replace(p4.p5,`Q2'/2-i1/2-i10+i11+i12+i2/2+i3/2+i6/2-i7/2-i8/2-i9,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,i9,Md209,dotrewrite-d209-5)
#endif
#break
#default
#case Q4
* path: (0, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md209,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p8.p - p7.p;
	.sort:momrewrite-Md209-4;
	if (count(Md209,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md209-3;
	if (count(Md209,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p5.p;
	.sort:momrewrite-Md209-2;
	if (count(Md209,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Md209-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd209()
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md209,dotrewrite-d209-0)
	#call replace(p3.p5,-i3/2-i5/2+i8/2,i,i3,i5,i8,Md209,dotrewrite-d209-1)
	#call replace(p2.p3,-`Q2'/2+i1/2-i11-i12-i2/2-i3/2,i,i1,i11,i12,i2,i3,Md209,dotrewrite-d209-2)
	#call replace(p4.p5,`Q2'/2-i1/2-i10+i11+i12+i2/2+i3/2+i6/2-i7/2-i8/2-i9,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,i9,Md209,dotrewrite-d209-3)
#endif
#break
#endswitch
#break
*--#] d209 : 
*--#[ d213 :
#case Md213
#procedure SimpleDotd213()
if (count(Md213,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p3.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + p5.p + p8.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	if (count(Md213,1)) id p1.p8 = i12 - i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md213,dotrewrite-d213-1)
	#call replace(p5.p8,i3/2-i5/2-i8/2,i,i3,i5,i8,Md213,dotrewrite-d213-2)
	#call replace(Q.p8,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md213,dotrewrite-d213-3)
	#call replace(p4.p8,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2+i6/2-i7/2+i8/2-i9,i,i1,i11,i12,i2,i3,i6,i7,i8,i9,Md213,dotrewrite-d213-4)
	#call replace(p4.p5,`Q2'/2+i1/2+i10+i11+i12-i2/2+i3/2-i6/2+i7/2-i8/2+i9,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,i9,Md213,dotrewrite-d213-5)
#endif
#break
#case 37
* path: (3, 1, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p8.p + p3.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p6.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	if (count(Md213,1)) id p1.p6 = i11 - i13;
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md213,dotrewrite-d213-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md213,dotrewrite-d213-2)
	#call replace(p1.p7,-i11-i12+i13+i14,i,i11,i12,i13,i14,Md213,dotrewrite-d213-3)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md213,dotrewrite-d213-4)
	#call replace(p3.p6,-`Q2'/2-i1/2-i10-i11-i12+i2/2-i3/2,i,i1,i10,i11,i12,i2,i3,Md213,dotrewrite-d213-5)
	#call replace(Q.p7,i1/2+i11+i12-i2/2+i3/2+i4/2-i6/2+i9,i,i1,i11,i12,i2,i3,i4,i6,i9,Md213,dotrewrite-d213-6)
	#call replace(p3.p7,`Q2'/2+i1/2+i10+i11+i12-i2/2+i5/2-i8/2,i,i1,i10,i11,i12,i2,i5,i8,Md213,dotrewrite-d213-7)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = - p6.p + Q.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + p5.p + p8.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	if (count(Md213,1)) id p1.p8 = i12 - i14;
	#call replace(p5.p8,i3/2-i5/2-i8/2,i,i3,i5,i8,Md213,dotrewrite-d213-1)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md213,dotrewrite-d213-2)
	#call replace(p1.p7,-i11-i12+i13+i14,i,i11,i12,i13,i14,Md213,dotrewrite-d213-3)
	#call replace(Q.p8,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md213,dotrewrite-d213-4)
	#call replace(Q.p7,i1/2+i11+i12-i2/2+i3/2+i4/2-i6/2+i9,i,i1,i11,i12,i2,i3,i4,i6,i9,Md213,dotrewrite-d213-5)
	#call replace(p5.p7,`Q2'/2+i1/2+i10+i11+i12-i2/2+i5/2-i6/2+i7/2,i,i1,i10,i11,i12,i2,i5,i6,i7,Md213,dotrewrite-d213-6)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p8.p + p3.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p6.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md213,dotrewrite-d213-0)
	#call replace(p1.p7,-i11-i12+i13+i14,i,i11,i12,i13,i14,Md213,dotrewrite-d213-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md213,dotrewrite-d213-2)
	#call replace(Q.p7,i1/2+i11+i12-i2/2+i3/2+i4/2-i6/2+i9,i,i1,i11,i12,i2,i3,i4,i6,i9,Md213,dotrewrite-d213-3)
	#call replace(p3.p7,`Q2'/2+i1/2+i10+i11+i12-i2/2+i5/2-i8/2,i,i1,i10,i11,i12,i2,i5,i8,Md213,dotrewrite-d213-4)
	#call replace(p4.p7,i1/2+i11+i12-i2/2+i3/2+i4/2+i7/2-i8/2+i9,i,i1,i11,i12,i2,i3,i4,i7,i8,i9,Md213,dotrewrite-d213-5)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + p5.p + p8.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p6.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	if (count(Md213,1)) id p1.p6 = i11 - i13;
	if (count(Md213,1)) id p1.p8 = i12 - i14;
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md213,dotrewrite-d213-2)
	#call replace(p5.p8,i3/2-i5/2-i8/2,i,i3,i5,i8,Md213,dotrewrite-d213-3)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md213,dotrewrite-d213-4)
	#call replace(Q.p8,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md213,dotrewrite-d213-5)
	#call replace(p5.p6,-`Q2'/2-i1/2-i10-i11-i12+i2/2-i3/2+i6/2-i7/2+i8/2,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,Md213,dotrewrite-d213-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 4, 6)
#case Q3
* path: (0, 3)
#case Q8
* path: (0, 3, 8)
#case Q6
* path: (0, 6)
#case Q8
* path: (0, 6, 8)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 18
* path: (1, 3, 8)
#case 16
* path: (1, 4, 6)
#case 33
* path: (3,)
#case 38
* path: (3, 8)
#case 36
* path: (3, 8, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p6.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p8.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	if (count(Md213,1)) id p1.p6 = i11 - i13;
	if (count(Md213,1)) id p1.p8 = i12 - i14;
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md213,dotrewrite-d213-2)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md213,dotrewrite-d213-3)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md213,dotrewrite-d213-4)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md213,dotrewrite-d213-5)
	#call replace(p3.p6,-`Q2'/2-i1/2-i10-i11-i12+i2/2-i3/2,i,i1,i10,i11,i12,i2,i3,Md213,dotrewrite-d213-6)
	#call replace(Q.p8,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md213,dotrewrite-d213-7)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p3.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md213,dotrewrite-d213-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md213,dotrewrite-d213-1)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md213,dotrewrite-d213-2)
	#call replace(p2.p4,-`Q2'/2-i10-i13-i4/2+i6/2,i,i10,i13,i4,i6,Md213,dotrewrite-d213-3)
	#call replace(p2.p5,-i14-i3/2-i5/2+i8/2-i9,i,i14,i3,i5,i8,i9,Md213,dotrewrite-d213-4)
	#call replace(p4.p5,`Q2'/2+i1/2+i10+i11+i12-i2/2+i3/2-i6/2+i7/2-i8/2+i9,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,i9,Md213,dotrewrite-d213-5)
#endif
#break
#default
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 5)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case Q3
* path: (0, 4, 1, 3)
#case Q5
* path: (0, 4, 5)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md213,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p;
	.sort:momrewrite-Md213-4;
	if (count(Md213,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md213-3;
	if (count(Md213,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p5.p;
	.sort:momrewrite-Md213-2;
	if (count(Md213,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md213-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd213()
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md213,dotrewrite-d213-0)
	#call replace(p3.p5,i3/2+i5/2-i8/2,i,i3,i5,i8,Md213,dotrewrite-d213-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md213,dotrewrite-d213-2)
	#call replace(p4.p5,`Q2'/2+i1/2+i10+i11+i12-i2/2+i3/2-i6/2+i7/2-i8/2+i9,i,i1,i10,i11,i12,i2,i3,i6,i7,i8,i9,Md213,dotrewrite-d213-3)
#endif
#break
#endswitch
#break
*--#] d213 : 
*--#[ d170 :
#case Md170
#procedure SimpleDotd170()
if (count(Md170,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p3.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md170,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = - p5.p + Q.p;
	.sort:momrewrite-Md170-3;
	if (count(Md170,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md170-2;
	if (count(Md170,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p3} = - Q.p - p1.p - p2.p - p7.p;
	.sort:momrewrite-Md170-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd170()
	#call replace(p1.p7,-i11+i12-i14,i,i11,i12,i14,Md170,dotrewrite-d170-0)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md170,dotrewrite-d170-1)
	#call replace(p1.p2,-i1-i12-i13+i14,i,i1,i12,i13,i14,Md170,dotrewrite-d170-2)
	#call replace(Q.p7,-`Q2'/2+i3/2-i5/2-i9,i,i3,i5,i9,Md170,dotrewrite-d170-3)
	#call replace(Q.p2,-`Q2'/2-i11-i3/2+i5/2-i8+i9,i,i11,i3,i5,i8,i9,Md170,dotrewrite-d170-4)
	#call replace(p2.p6,-i1/2-i10-i12-i13+i2/2-i3/2-i4/2+i6/2,i,i1,i10,i12,i13,i2,i3,i4,i6,Md170,dotrewrite-d170-5)
	#call replace(p2.p7,`Q2'/2+i1/2+i11+i13-i2/2+i4/2-i7/2+i8,i,i1,i11,i13,i2,i4,i7,i8,Md170,dotrewrite-d170-6)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md170,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md170-3;
	if (count(Md170,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md170-2;
	if (count(Md170,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p3} = + p6.p - p1.p - p2.p - p3.p;
	.sort:momrewrite-Md170-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd170()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md170,dotrewrite-d170-0)
	#call replace(p1.p2,-i1-i12-i13+i14,i,i1,i12,i13,i14,Md170,dotrewrite-d170-1)
	#call replace(p3.p6,i5/2+i6/2-i7/2+i9,i,i5,i6,i7,i9,Md170,dotrewrite-d170-2)
	#call replace(Q.p2,-`Q2'/2-i11-i3/2+i5/2-i8+i9,i,i11,i3,i5,i8,i9,Md170,dotrewrite-d170-3)
	#call replace(p2.p3,-i10-i12-i3+i5/2+i6/2-i7/2+i9,i,i10,i12,i3,i5,i6,i7,i9,Md170,dotrewrite-d170-4)
	#call replace(p2.p6,-i1/2-i10-i12-i13+i2/2-i3/2-i4/2+i6/2,i,i1,i10,i12,i13,i2,i3,i4,i6,Md170,dotrewrite-d170-5)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md170,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p - p5.p;
	.sort:momrewrite-Md170-3;
	if (count(Md170,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md170-2;
	if (count(Md170,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p4.p - p7.p;
	.sort:momrewrite-Md170-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd170()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md170,dotrewrite-d170-0)
	#call replace(p1.p7,-i11+i12-i14,i,i11,i12,i14,Md170,dotrewrite-d170-1)
	#call replace(Q.p7,-`Q2'/2+i3/2-i5/2-i9,i,i3,i5,i9,Md170,dotrewrite-d170-2)
	#call replace(p3.p7,-`Q2'/2+i3/2-i6/2+i7/2-i9,i,i3,i6,i7,i9,Md170,dotrewrite-d170-3)
	#call replace(p4.p7,-i1/2-i12-i13+i14+i2/2-i3/2-i4/2+i5/2-i7/2-i8+i9,i,i1,i12,i13,i14,i2,i3,i4,i5,i7,i8,i9,Md170,dotrewrite-d170-4)
#endif
#break
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md170,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p6.p - p4.p - p3.p;
	.sort:momrewrite-Md170-3;
	if (count(Md170,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p5.p;
	.sort:momrewrite-Md170-2;
	if (count(Md170,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md170-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd170()
	if (count(Md170,1)) id p1.p5 = i11 - i12;
	if (count(Md170,1)) id p4.p5 = -i10 + i8;
	#call replace(Q.p5,`Q2'/2-i3/2+i5/2,i,i3,i5,Md170,dotrewrite-d170-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md170,dotrewrite-d170-3)
	#call replace(p4.p6,i1/2+i10+i12+i13-i14-i2/2+i3/2+i4/2-i5/2+i7/2-i9,i,i1,i10,i12,i13,i14,i2,i3,i4,i5,i7,i9,Md170,dotrewrite-d170-4)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 17
* path: (1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md170,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p5.p;
	.sort:momrewrite-Md170-3;
	if (count(Md170,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p5.p - p7.p;
	.sort:momrewrite-Md170-2;
	if (count(Md170,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p4.p - p7.p;
	.sort:momrewrite-Md170-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd170()
	if (count(Md170,1)) id p1.p5 = i11 - i12;
	if (count(Md170,1)) id p4.p5 = -i10 + i8;
	#call replace(Q.p5,`Q2'/2-i3/2+i5/2,i,i3,i5,Md170,dotrewrite-d170-2)
	#call replace(p1.p7,-i11+i12-i14,i,i11,i12,i14,Md170,dotrewrite-d170-3)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md170,dotrewrite-d170-4)
	#call replace(Q.p7,-`Q2'/2+i3/2-i5/2-i9,i,i3,i5,i9,Md170,dotrewrite-d170-5)
	#call replace(p4.p7,-i1/2-i12-i13+i14+i2/2-i3/2-i4/2+i5/2-i7/2-i8+i9,i,i1,i12,i13,i14,i2,i3,i4,i5,i7,i8,i9,Md170,dotrewrite-d170-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 6)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q6
* path: (0, 3, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md170,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md170-3;
	if (count(Md170,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md170-2;
	if (count(Md170,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p - p1.p - p3.p - p4.p;
	.sort:momrewrite-Md170-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd170()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md170,dotrewrite-d170-0)
	#call replace(p3.p6,i5/2+i6/2-i7/2+i9,i,i5,i6,i7,i9,Md170,dotrewrite-d170-1)
	#call replace(p4.p6,i1/2+i10+i12+i13-i14-i2/2+i3/2+i4/2-i5/2+i7/2-i9,i,i1,i10,i12,i13,i14,i2,i3,i4,i5,i7,i9,Md170,dotrewrite-d170-2)
#endif
#break
#endswitch
#break
*--#] d170 : 
*--#[ d163 :
#case Md163
#procedure SimpleDotd163()
if (count(Md163,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p3.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md163,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md163-3;
	if (count(Md163,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p5} = + p4.p + p7.p;
	.sort:momrewrite-Md163-2;
	if (count(Md163,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md163-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd163()
	#call replace(p1.p6,-i12+i13-i14,i,i12,i13,i14,Md163,dotrewrite-d163-0)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md163,dotrewrite-d163-1)
	#call replace(p4.p5,i10+i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md163,dotrewrite-d163-2)
	#call replace(p4.p6,-i10-i3/2+i4/2-i5/2+i6/2,i,i10,i3,i4,i5,i6,Md163,dotrewrite-d163-3)
	#call replace(Q.p6,`Q2'/2+i1/2+i11+i12-i2/2+i3/2+i8-i9,i,i1,i11,i12,i2,i3,i8,i9,Md163,dotrewrite-d163-4)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md163,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md163-3;
	if (count(Md163,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md163-2;
	if (count(Md163,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md163-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd163()
	if (count(Md163,1)) id p1.p7 = i12 - i13;
	#call replace(p3.p7,i3/2-i4/2+i7/2,i,i3,i4,i7,Md163,dotrewrite-d163-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md163,dotrewrite-d163-2)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md163,dotrewrite-d163-3)
	#call replace(Q.p7,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i8,i,i1,i11,i12,i2,i3,i8,Md163,dotrewrite-d163-4)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md163,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md163-3;
	if (count(Md163,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p5} = + p4.p + p7.p;
	.sort:momrewrite-Md163-2;
	if (count(Md163,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md163-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd163()
	if (count(Md163,1)) id p1.p7 = i12 - i13;
	#call replace(p4.p7,i3/2-i4/2-i7/2,i,i3,i4,i7,Md163,dotrewrite-d163-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md163,dotrewrite-d163-2)
	#call replace(p4.p5,i10+i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md163,dotrewrite-d163-3)
	#call replace(Q.p7,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i8,i,i1,i11,i12,i2,i3,i8,Md163,dotrewrite-d163-4)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md163,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md163-3;
	if (count(Md163,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p3.p;
	.sort:momrewrite-Md163-2;
	if (count(Md163,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p5} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md163-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd163()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md163,dotrewrite-d163-0)
	#call replace(p2.p5,-i10-i14-i9,i,i10,i14,i9,Md163,dotrewrite-d163-1)
	#call replace(p4.p5,i10+i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md163,dotrewrite-d163-2)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md163,dotrewrite-d163-3)
	#call replace(p2.p4,-i13-i3/2-i4/2+i7/2-i8,i,i13,i3,i4,i7,i8,Md163,dotrewrite-d163-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 1, 5)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md163,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md163-3;
	if (count(Md163,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p;
	.sort:momrewrite-Md163-2;
	if (count(Md163,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md163-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd163()
	#call replace(p3.p4,i3/2+i4/2-i7/2,i,i3,i4,i7,Md163,dotrewrite-d163-0)
	#call replace(p4.p5,i10+i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md163,dotrewrite-d163-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md163,dotrewrite-d163-2)
#endif
#break
#endswitch
#break
*--#] d163 : 
*--#[ d153 :
#case Md153
#procedure SimpleDotd153()
if (count(Md153,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p6^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p6^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 67
* path: (6, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md153,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = - p5.p + Q.p;
	.sort:momrewrite-Md153-3;
	if (count(Md153,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md153-2;
	if (count(Md153,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md153-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd153()
	#call replace(p1.p7,-i11+i13-i14,i,i11,i13,i14,Md153,dotrewrite-d153-0)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md153,dotrewrite-d153-1)
	#call replace(Q.p7,-`Q2'/2+i4/2-i5/2-i8,i,i4,i5,i8,Md153,dotrewrite-d153-2)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md153,dotrewrite-d153-3)
	#call replace(p3.p7,`Q2'/2+i1/2-i10+i11+i12-i2/2+i3/2+i9,i,i1,i10,i11,i12,i2,i3,i9,Md153,dotrewrite-d153-4)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md153,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md153-3;
	if (count(Md153,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Md153-2;
	if (count(Md153,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p6} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md153-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd153()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md153,dotrewrite-d153-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md153,dotrewrite-d153-1)
	#call replace(p2.p6,-i10-i14-i8,i,i10,i14,i8,Md153,dotrewrite-d153-2)
	#call replace(p4.p6,i5/2+i6/2-i7/2+i8,i,i5,i6,i7,i8,Md153,dotrewrite-d153-3)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md153,dotrewrite-d153-4)
	#call replace(p2.p4,-`Q2'/2-i13-i4/2+i5/2-i9,i,i13,i4,i5,i9,Md153,dotrewrite-d153-5)
#endif
#break
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md153,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p5.p;
	.sort:momrewrite-Md153-3;
	if (count(Md153,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md153-2;
	if (count(Md153,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md153-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd153()
	if (count(Md153,1)) id p1.p5 = i11 - i13;
	#call replace(Q.p5,`Q2'/2-i4/2+i5/2,i,i4,i5,Md153,dotrewrite-d153-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md153,dotrewrite-d153-2)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md153,dotrewrite-d153-3)
	#call replace(p3.p5,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md153,dotrewrite-d153-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 4, 5)
#case Q6
* path: (0, 1, 6)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case Q6
* path: (0, 4, 6)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 15
* path: (1, 4, 5)
#case 16
* path: (1, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md153,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md153-3;
	if (count(Md153,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p;
	.sort:momrewrite-Md153-2;
	if (count(Md153,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md153-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd153()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md153,dotrewrite-d153-0)
	#call replace(p4.p6,i5/2+i6/2-i7/2+i8,i,i5,i6,i7,i8,Md153,dotrewrite-d153-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md153,dotrewrite-d153-2)
#endif
#break
#endswitch
#break
*--#] d153 : 
*--#[ d181 :
#case Md181
#procedure SimpleDotd181()
if (count(Md181,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p3.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 3, 7)
#case 17
* path: (1, 3, 7)
#case 17
* path: (1, 4, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md181,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md181-3;
	if (count(Md181,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md181-2;
	if (count(Md181,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - Q.p - p4.p - p7.p;
	.sort:momrewrite-Md181-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd181()
	if (count(Md181,1)) id p1.p7 = i12 - i14;
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md181,dotrewrite-d181-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md181,dotrewrite-d181-2)
	#call replace(Q.p7,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md181,dotrewrite-d181-3)
	#call replace(p4.p7,i1/2+i11+i12-i2/2+i3/2-i4/2+i6/2-i7/2-i8+i9,i,i1,i11,i12,i2,i3,i4,i6,i7,i8,i9,Md181,dotrewrite-d181-4)
#endif
#break
#case 12
* path: (1, 0, 2)
#case 12
* path: (1, 4, 2)
#if ( `MOMS' > 0 )
	if (count(Md181,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - Q.p - p7.p;
	.sort:momrewrite-Md181-3;
	if (count(Md181,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md181-2;
	if (count(Md181,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md181-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd181()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md181,dotrewrite-d181-0)
	#call replace(p2.p4,-i10-i13-i8,i,i10,i13,i8,Md181,dotrewrite-d181-1)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md181,dotrewrite-d181-2)
	#call replace(p2.p5,-i14-i3/2-i5/2+i7/2-i9,i,i14,i3,i5,i7,i9,Md181,dotrewrite-d181-3)
	#call replace(p4.p5,-i1/2+i10-i11-i12+i2/2-i3/2+i4/2-i6/2+i7/2+i8-i9,i,i1,i10,i11,i12,i2,i3,i4,i6,i7,i8,i9,Md181,dotrewrite-d181-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md181,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - Q.p - p7.p;
	.sort:momrewrite-Md181-3;
	if (count(Md181,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md181-2;
	if (count(Md181,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md181-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd181()
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md181,dotrewrite-d181-0)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md181,dotrewrite-d181-1)
	#call replace(p4.p5,-i1/2+i10-i11-i12+i2/2-i3/2+i4/2-i6/2+i7/2+i8-i9,i,i1,i10,i11,i12,i2,i3,i4,i6,i7,i8,i9,Md181,dotrewrite-d181-2)
#endif
#break
#endswitch
#break
*--#] d181 : 
*--#[ d184 :
#case Md184
#procedure SimpleDotd184()
if (count(Md184,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p4.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 57
* path: (5, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md184,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md184-3;
	if (count(Md184,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + p5.p + p7.p;
	.sort:momrewrite-Md184-2;
	if (count(Md184,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md184-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd184()
	if (count(Md184,1)) id p1.p7 = i12 - i14;
	if (count(Md184,1)) id p4.p7 = -i10 + i9;
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md184,dotrewrite-d184-2)
	#call replace(p5.p7,i3/2-i5/2-i7/2,i,i3,i5,i7,Md184,dotrewrite-d184-3)
	#call replace(Q.p7,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i8,i,i1,i11,i12,i2,i3,i8,Md184,dotrewrite-d184-4)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md184,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md184-3;
	if (count(Md184,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md184-2;
	if (count(Md184,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md184-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd184()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md184,dotrewrite-d184-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md184,dotrewrite-d184-1)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md184,dotrewrite-d184-2)
	#call replace(p2.p4,-`Q2'/2-i13-i4/2+i6/2-i9,i,i13,i4,i6,i9,Md184,dotrewrite-d184-3)
	#call replace(p2.p5,-i14-i3/2-i5/2+i7/2-i8,i,i14,i3,i5,i7,i8,Md184,dotrewrite-d184-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case Q3
* path: (0, 4, 1, 3)
#case Q5
* path: (0, 4, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md184,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md184-3;
	if (count(Md184,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md184-2;
	if (count(Md184,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md184-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd184()
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md184,dotrewrite-d184-0)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md184,dotrewrite-d184-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md184,dotrewrite-d184-2)
#endif
#break
#endswitch
#break
*--#] d184 : 
*--#[ d176 :
#case Md176
#procedure SimpleDotd176()
if (count(Md176,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md176,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p6.p;
	.sort:momrewrite-Md176-3;
	if (count(Md176,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md176-2;
	if (count(Md176,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p5.p - p6.p;
	.sort:momrewrite-Md176-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd176()
	if (count(Md176,1)) id p1.p6 = i11 - i13;
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md176,dotrewrite-d176-1)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md176,dotrewrite-d176-2)
	#call replace(p3.p6,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2-i9,i,i1,i11,i12,i2,i3,i9,Md176,dotrewrite-d176-3)
	#call replace(p5.p6,`Q2'/2+i1/2-i10+i11+i12-i2/2-i5/2-i6/2+i7/2+i9,i,i1,i10,i11,i12,i2,i5,i6,i7,i9,Md176,dotrewrite-d176-4)
#endif
#break
#case 57
* path: (5, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md176,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = - p6.p + Q.p;
	.sort:momrewrite-Md176-3;
	if (count(Md176,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md176-2;
	if (count(Md176,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p5.p - p7.p;
	.sort:momrewrite-Md176-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd176()
	#call replace(p1.p7,-i11-i12+i13-i14,i,i11,i12,i13,i14,Md176,dotrewrite-d176-0)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md176,dotrewrite-d176-1)
	#call replace(Q.p7,i1/2+i11+i12-i2/2+i3/2+i4/2-i6/2-i8,i,i1,i11,i12,i2,i3,i4,i6,i8,Md176,dotrewrite-d176-2)
	#call replace(p3.p7,`Q2'/2+i1/2-i10+i11+i12-i2/2-i3/2+i9,i,i1,i10,i11,i12,i2,i3,i9,Md176,dotrewrite-d176-3)
	#call replace(p5.p7,-`Q2'/2-i1/2-i11-i12+i2/2-i5/2+i6/2-i7/2-i9,i,i1,i11,i12,i2,i5,i6,i7,i9,Md176,dotrewrite-d176-4)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md176,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p3.p - p6.p;
	.sort:momrewrite-Md176-3;
	if (count(Md176,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md176-2;
	if (count(Md176,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p5} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md176-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd176()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md176,dotrewrite-d176-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md176,dotrewrite-d176-1)
	#call replace(p2.p5,-i10-i14-i8,i,i10,i14,i8,Md176,dotrewrite-d176-2)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md176,dotrewrite-d176-3)
	#call replace(p2.p4,-`Q2'/2-i13-i4/2+i6/2-i9,i,i13,i4,i6,i9,Md176,dotrewrite-d176-4)
	#call replace(p4.p5,-`Q2'/2-i1/2+i10-i11-i12+i2/2+i5/2+i6/2-i7/2+i8-i9,i,i1,i10,i11,i12,i2,i5,i6,i7,i8,i9,Md176,dotrewrite-d176-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case Q5
* path: (0, 4, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md176,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p3.p - p6.p;
	.sort:momrewrite-Md176-3;
	if (count(Md176,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md176-2;
	if (count(Md176,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md176-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd176()
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md176,dotrewrite-d176-0)
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md176,dotrewrite-d176-1)
	#call replace(p4.p5,-`Q2'/2-i1/2+i10-i11-i12+i2/2+i5/2+i6/2-i7/2+i8-i9,i,i1,i10,i11,i12,i2,i5,i6,i7,i8,i9,Md176,dotrewrite-d176-2)
#endif
#break
#endswitch
#break
*--#] d176 : 
*--#[ d102 :
#case Md102
#procedure SimpleDotd102()
if (count(Md102,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p6^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p6^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md102,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md102-2;
	if (count(Md102,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1,p3} = + p3.p - p1.p - p2.p - p4.p;
	.sort:momrewrite-Md102-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd102()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md102,dotrewrite-d102-0)
	#call replace(p1.p2,-i1+i12-i13-i14,i,i1,i12,i13,i14,Md102,dotrewrite-d102-1)
	#call replace(p2.p3,-i10-i12+i3-i9,i,i10,i12,i3,i9,Md102,dotrewrite-d102-2)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i5/2-i7-i8,i,i11,i3,i5,i7,i8,Md102,dotrewrite-d102-3)
	#call replace(p2.p4,i1/2-i10-i12+i14-i2/2+i3/2-i4/2+i6/2,i,i1,i10,i12,i14,i2,i3,i4,i6,Md102,dotrewrite-d102-4)
#endif
#break
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md102,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p - p4.p - p6.p + p3.p;
	.sort:momrewrite-Md102-2;
	if (count(Md102,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md102-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd102()
	if (count(Md102,1)) id p1.p5 = i11 - i12;
	if (count(Md102,1)) id p4.p5 = i7 - i9;
	if (count(Md102,1)) id p5.p6 = -i10 + i8;
	#call replace(Q.p5,`Q2'/2-i3/2+i5/2,i,i3,i5,Md102,dotrewrite-d102-3)
	#call replace(p4.p6,-i1/2+i10+i12-i13-i14+i2/2-i3/2-i4/2-i6/2+i9,i,i1,i10,i12,i13,i14,i2,i3,i4,i6,i9,Md102,dotrewrite-d102-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md102,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md102-2;
	if (count(Md102,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p1.p - p4.p - p6.p;
	.sort:momrewrite-Md102-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd102()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md102,dotrewrite-d102-0)
	#call replace(p4.p6,-i1/2+i10+i12-i13-i14+i2/2-i3/2-i4/2-i6/2+i9,i,i1,i10,i12,i13,i14,i2,i3,i4,i6,i9,Md102,dotrewrite-d102-1)
#endif
#break
#endswitch
#break
*--#] d102 : 
*--#[ d96 :
#case Md96
#procedure SimpleDotd96()
if (count(Md96,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md96,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p4.p - p3.p;
	.sort:momrewrite-Md96-2;
	if (count(Md96,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p5} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md96-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd96()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md96,dotrewrite-d96-0)
	#call replace(p2.p4,-i13-i7-i9,i,i13,i7,i9,Md96,dotrewrite-d96-1)
	#call replace(p2.p5,-i10-i14-i8,i,i10,i14,i8,Md96,dotrewrite-d96-2)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md96,dotrewrite-d96-3)
	#call replace(p4.p5,-i10-i3/2-i4/2-i5/2+i6/2-i9,i,i10,i3,i4,i5,i6,i9,Md96,dotrewrite-d96-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md96,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md96-2;
	if (count(Md96,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p - p5.p;
	.sort:momrewrite-Md96-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd96()
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md96,dotrewrite-d96-0)
	#call replace(p4.p5,-i10-i3/2-i4/2-i5/2+i6/2-i9,i,i10,i3,i4,i5,i6,i9,Md96,dotrewrite-d96-1)
#endif
#break
#endswitch
#break
*--#] d96 : 
*--#[ d101 :
#case Md101
#procedure SimpleDotd101()
if (count(Md101,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md101,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p5} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md101-2;
	if (count(Md101,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md101-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd101()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md101,dotrewrite-d101-0)
	#call replace(p2.p4,-i13-i7-i9,i,i13,i7,i9,Md101,dotrewrite-d101-1)
	#call replace(p2.p5,-i10-i14-i8,i,i10,i14,i8,Md101,dotrewrite-d101-2)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md101,dotrewrite-d101-3)
	#call replace(p4.p5,i1/2-i10+i11+i12-i2/2-i4/2-i5/2+i6/2-i7-i8-i9,i,i1,i10,i11,i12,i2,i4,i5,i6,i7,i8,i9,Md101,dotrewrite-d101-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md101,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md101-2;
	if (count(Md101,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - Q.p - p3.p - p4.p - p5.p;
	.sort:momrewrite-Md101-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd101()
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md101,dotrewrite-d101-0)
	#call replace(p4.p5,i1/2-i10+i11+i12-i2/2-i4/2-i5/2+i6/2-i7-i8-i9,i,i1,i10,i11,i12,i2,i4,i5,i6,i7,i8,i9,Md101,dotrewrite-d101-1)
#endif
#break
#endswitch
#break
*--#] d101 : 
*--#[ d53 :
#case Md53
#procedure SimpleDotd53()
if (count(Md53,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id Q.p3^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md53,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1,p3} = + Q.p - p1.p - p2.p - p3.p - p4.p;
	.sort:momrewrite-Md53-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd53()
	#call replace(Q.p2,`Q2'-i11-i6-i7-i8,i,i11,i6,i7,i8,Md53,dotrewrite-d53-0)
	#call replace(p1.p2,-i1+i11-i12-i13-i14,i,i1,i11,i12,i13,i14,Md53,dotrewrite-d53-1)
	#call replace(p2.p3,-i10-i12-i3+i6-i9,i,i10,i12,i3,i6,i9,Md53,dotrewrite-d53-2)
	#call replace(p2.p4,`Q2'/2+i1/2+i10-i11+i12+i14-i2/2+i3/2-i4/2+i5/2-i6-i8,i,i1,i10,i11,i12,i14,i2,i3,i4,i5,i6,i8,Md53,dotrewrite-d53-3)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md53,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p - p4.p - p5.p;
	.sort:momrewrite-Md53-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd53()
	#call replace(p4.p5,-`Q2'/2-i1/2-i10+i11-i12-i13-i14+i2/2-i3/2-i4/2-i5/2+i6+i7+i8-i9,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i5,i6,i7,i8,i9,Md53,dotrewrite-d53-0)
#endif
#break
#endswitch
#break
*--#] d53 : 
*--#[ d95 :
#case Md95
#procedure SimpleDotd95()
if (count(Md95,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p6^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p6^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md95,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md95-2;
	if (count(Md95,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1,p3} = - Q.p - p1.p - p2.p - p4.p;
	.sort:momrewrite-Md95-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd95()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md95,dotrewrite-d95-0)
	#call replace(Q.p2,-`Q2'-i11-i7-i8,i,i11,i7,i8,Md95,dotrewrite-d95-1)
	#call replace(p1.p2,-i1-i11-i13-i14,i,i1,i11,i13,i14,Md95,dotrewrite-d95-2)
	#call replace(p2.p3,-`Q2'/2-i10-i12-i3/2+i5/2-i9,i,i10,i12,i3,i5,i9,Md95,dotrewrite-d95-3)
	#call replace(p2.p4,`Q2'/2+i1/2+i11+i14-i2/2-i4/2+i6/2+i8,i,i1,i11,i14,i2,i4,i6,i8,Md95,dotrewrite-d95-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md95,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md95-2;
	if (count(Md95,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p4.p - p6.p;
	.sort:momrewrite-Md95-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd95()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md95,dotrewrite-d95-0)
	#call replace(p4.p6,-`Q2'/2-i1/2-i11-i13-i14+i2/2-i4/2-i6/2-i7-i8,i,i1,i11,i13,i14,i2,i4,i6,i7,i8,Md95,dotrewrite-d95-1)
#endif
#break
#endswitch
#break
*--#] d95 : 
*--#[ d97 :
#case Md97
#procedure SimpleDotd97()
if (count(Md97,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 12
* path: (1, 0, 2)
#case 12
* path: (1, 4, 2)
#if ( `MOMS' > 0 )
	if (count(Md97,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p5} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md97-2;
	if (count(Md97,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - Q.p - p4.p - p5.p;
	.sort:momrewrite-Md97-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd97()
	#call replace(p1.p2,-i1-i11-i12,i,i1,i11,i12,Md97,dotrewrite-d97-0)
	#call replace(p2.p4,-i13-i7-i9,i,i13,i7,i9,Md97,dotrewrite-d97-1)
	#call replace(p2.p5,-i10-i14-i8,i,i10,i14,i8,Md97,dotrewrite-d97-2)
	#call replace(Q.p2,-`Q2'/2+i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md97,dotrewrite-d97-3)
	#call replace(p4.p5,-`Q2'/2-i4/2-i5/2+i6/2-i7-i8,i,i4,i5,i6,i7,i8,Md97,dotrewrite-d97-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md97,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md97-2;
	if (count(Md97,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - Q.p - p4.p - p5.p;
	.sort:momrewrite-Md97-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd97()
	#call replace(Q.p3,-`Q2'/2-i1/2-i11-i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md97,dotrewrite-d97-0)
	#call replace(p4.p5,-`Q2'/2-i4/2-i5/2+i6/2-i7-i8,i,i4,i5,i6,i7,i8,Md97,dotrewrite-d97-1)
#endif
#break
#endswitch
#break
*--#] d97 : 
*--#[ d100 :
#case Md100
#procedure SimpleDotd100()
if (count(Md100,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p3.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 6)
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 16
* path: (1, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md100,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md100-2;
	if (count(Md100,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - Q.p - p1.p - p3.p - p6.p;
	.sort:momrewrite-Md100-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd100()
	if (count(Md100,1)) id Q.p6 = -i8 - i9;
	if (count(Md100,1)) id p1.p6 = -i13 - i14;
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md100,dotrewrite-d100-2)
	#call replace(p3.p6,-`Q2'/2-i1/2-i11-i12+i13+i14+i2/2-i3/2-i6/2-i7+i8+i9,i,i1,i11,i12,i13,i14,i2,i3,i6,i7,i8,i9,Md100,dotrewrite-d100-3)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md100,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md100-2;
	if (count(Md100,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = - Q.p - p1.p - p2.p - p6.p;
	.sort:momrewrite-Md100-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd100()
	if (count(Md100,1)) id Q.p6 = -i8 - i9;
	if (count(Md100,1)) id p1.p6 = -i13 - i14;
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md100,dotrewrite-d100-2)
	#call replace(Q.p2,-`Q2'-i11-i7+i8+i9,i,i11,i7,i8,i9,Md100,dotrewrite-d100-3)
	#call replace(p1.p2,-i1-i11-i12+i13+i14,i,i1,i11,i12,i13,i14,Md100,dotrewrite-d100-4)
	#call replace(p2.p4,-i10-i13+i4/2-i5/2+i6/2-i8,i,i10,i13,i4,i5,i6,i8,Md100,dotrewrite-d100-5)
	#call replace(p2.p6,`Q2'/2+i1/2+i11+i12-i2/2+i3/2-i6/2+i7,i,i1,i11,i12,i2,i3,i6,i7,Md100,dotrewrite-d100-6)
#endif
#break
#default
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md100,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p - p1.p - Q.p - p3.p;
	.sort:momrewrite-Md100-2;
	if (count(Md100,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md100-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd100()
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md100,dotrewrite-d100-0)
	#call replace(p3.p5,`Q2'/2+i1/2-i10+i11+i12-i13-i14-i2/2+i3/2+i6/2+i7-i8-i9,i,i1,i10,i11,i12,i13,i14,i2,i3,i6,i7,i8,i9,Md100,dotrewrite-d100-1)
#endif
#break
#endswitch
#break
*--#] d100 : 
*--#[ d166 :
#case Md166
#procedure SimpleDotd166()
if (count(Md166,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md166,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md166-3;
	if (count(Md166,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - Q.p + p2.p + p1.p + p3.p;
	.sort:momrewrite-Md166-2;
	if (count(Md166,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md166-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd166()
	if (count(Md166,1)) id Q.p7 = -i8 + i9;
	if (count(Md166,1)) id p1.p7 = -i12 + i13;
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md166,dotrewrite-d166-2)
	#call replace(Q.p3,`Q2'-i10-i11-i9,i,i10,i11,i9,Md166,dotrewrite-d166-3)
	#call replace(p1.p3,-i1+i11-i13-i14,i,i1,i11,i13,i14,Md166,dotrewrite-d166-4)
	#call replace(p3.p4,`Q2'/2+i1/2-i10-i11+i14-i3/2-i4/2+i5/2,i,i1,i10,i11,i14,i3,i4,i5,Md166,dotrewrite-d166-5)
	#call replace(p3.p7,i12-i13+i2/2-i4/2+i5/2-i6/2-i8+i9,i,i12,i13,i2,i4,i5,i6,i8,i9,Md166,dotrewrite-d166-6)
#endif
#break
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md166,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md166-3;
	if (count(Md166,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p + p7.p;
	.sort:momrewrite-Md166-2;
	if (count(Md166,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md166-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd166()
	if (count(Md166,1)) id Q.p7 = -i8 + i9;
	if (count(Md166,1)) id p1.p7 = -i12 + i13;
	#call replace(p2.p7,-i2/2+i4/2-i7/2,i,i2,i4,i7,Md166,dotrewrite-d166-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md166,dotrewrite-d166-3)
	#call replace(p2.p5,-`Q2'/2-i1/2+i10+i11-i13-i14+i3/2-i4/2-i6/2+i7/2+i9,i,i1,i10,i11,i13,i14,i3,i4,i6,i7,i9,Md166,dotrewrite-d166-4)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md166,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md166-3;
	if (count(Md166,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md166-2;
	if (count(Md166,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p4.p - p5.p;
	.sort:momrewrite-Md166-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd166()
	if (count(Md166,1)) id Q.p7 = -i8 + i9;
	if (count(Md166,1)) id p1.p7 = -i12 + i13;
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md166,dotrewrite-d166-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md166,dotrewrite-d166-3)
	#call replace(p4.p5,-`Q2'/2-i1/2+i10+i11-i13-i14+i3/2-i4/2-i5/2+i9,i,i1,i10,i11,i13,i14,i3,i4,i5,i9,Md166,dotrewrite-d166-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md166,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p + p7.p;
	.sort:momrewrite-Md166-3;
	if (count(Md166,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p - p7.p;
	.sort:momrewrite-Md166-2;
	if (count(Md166,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p6.p - p1.p - p2.p;
	.sort:momrewrite-Md166-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd166()
	if (count(Md166,1)) id Q.p7 = -i8 + i9;
	if (count(Md166,1)) id p1.p7 = -i12 + i13;
	#call replace(Q.p6,-i10+i8-i9,i,i10,i8,i9,Md166,dotrewrite-d166-2)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md166,dotrewrite-d166-3)
	#call replace(p2.p7,-i2/2+i4/2-i7/2,i,i2,i4,i7,Md166,dotrewrite-d166-4)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md166,dotrewrite-d166-5)
	#call replace(p2.p6,`Q2'/2+i1/2-i10-i11+i13+i14+i2/2-i3/2+i6/2-i9,i,i1,i10,i11,i13,i14,i2,i3,i6,i9,Md166,dotrewrite-d166-6)
#endif
#break
#default
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md166,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p5.p;
	.sort:momrewrite-Md166-3;
	if (count(Md166,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p2.p;
	.sort:momrewrite-Md166-2;
	if (count(Md166,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p4.p - p5.p;
	.sort:momrewrite-Md166-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd166()
	#call replace(p2.p4,i2/2+i4/2-i7/2,i,i2,i4,i7,Md166,dotrewrite-d166-0)
	#call replace(p4.p5,-`Q2'/2-i1/2+i10+i11-i13-i14+i3/2-i4/2-i5/2+i9,i,i1,i10,i11,i13,i14,i3,i4,i5,i9,Md166,dotrewrite-d166-1)
	#call replace(p2.p5,-`Q2'/2-i1/2+i10+i11-i13-i14+i3/2-i4/2-i6/2+i7/2+i9,i,i1,i10,i11,i13,i14,i3,i4,i6,i7,i9,Md166,dotrewrite-d166-2)
#endif
#break
#endswitch
#break
*--#] d166 : 
*--#[ d159 :
#case Md159
#procedure SimpleDotd159()
if (count(Md159,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p5^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p4.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md159,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md159-3;
	if (count(Md159,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p2.p - Q.p;
	.sort:momrewrite-Md159-2;
	if (count(Md159,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p6.p;
	.sort:momrewrite-Md159-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd159()
	if (count(Md159,1)) id Q.p6 = -i12 + i9;
	#call replace(p4.p6,i2/2-i4/2-i6/2,i,i2,i4,i6,Md159,dotrewrite-d159-1)
	#call replace(p5.p6,-i10-i11-i14-i3/2-i5/2+i7/2,i,i10,i11,i14,i3,i5,i7,Md159,dotrewrite-d159-2)
	#call replace(p1.p6,-`Q2'/2-i1/2-i13-i2/2+i3/2-i8-i9,i,i1,i13,i2,i3,i8,i9,Md159,dotrewrite-d159-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md159,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p2.p;
	.sort:momrewrite-Md159-3;
	if (count(Md159,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md159-2;
	if (count(Md159,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - Q.p - p1.p - p3.p;
	.sort:momrewrite-Md159-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd159()
	#call replace(Q.p3,-`Q2'-i8-i9,i,i8,i9,Md159,dotrewrite-d159-0)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md159,dotrewrite-d159-1)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2+i9,i,i1,i2,i3,i9,Md159,dotrewrite-d159-2)
	#call replace(p3.p4,-i12-i13-i2/2-i4/2+i6/2,i,i12,i13,i2,i4,i6,Md159,dotrewrite-d159-3)
#endif
#break
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md159,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p;
	.sort:momrewrite-Md159-3;
	if (count(Md159,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md159-2;
	if (count(Md159,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4,p5} = - Q.p - p2.p - p3.p;
	.sort:momrewrite-Md159-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd159()
	#call replace(Q.p3,-`Q2'-i8-i9,i,i8,i9,Md159,dotrewrite-d159-0)
	#call replace(p2.p4,i2/2+i4/2-i6/2,i,i2,i4,i6,Md159,dotrewrite-d159-1)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md159,dotrewrite-d159-2)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2+i8,i,i1,i2,i3,i8,Md159,dotrewrite-d159-3)
	#call replace(p3.p4,-i12-i13-i2/2-i4/2+i6/2,i,i12,i13,i2,i4,i6,Md159,dotrewrite-d159-4)
	#call replace(p2.p5,-i10-i11-i3/2-i5/2+i7/2,i,i10,i11,i3,i5,i7,Md159,dotrewrite-d159-5)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md159,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md159-3;
	if (count(Md159,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p;
	.sort:momrewrite-Md159-2;
	if (count(Md159,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - Q.p - p1.p - p2.p;
	.sort:momrewrite-Md159-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd159()
	#call replace(p2.p4,i2/2+i4/2-i6/2,i,i2,i4,i6,Md159,dotrewrite-d159-0)
	#call replace(p2.p5,-i10-i11-i3/2-i5/2+i7/2,i,i10,i11,i3,i5,i7,Md159,dotrewrite-d159-1)
	#call replace(p1.p2,-`Q2'/2-i1/2-i2/2+i3/2-i8-i9,i,i1,i2,i3,i8,i9,Md159,dotrewrite-d159-2)
#endif
#break
#endswitch
#break
*--#] d159 : 
*--#[ d160 :
#case Md160
#procedure SimpleDotd160()
if (count(Md160,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p4^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p4.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md160,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p3.p + p7.p;
	.sort:momrewrite-Md160-3;
	if (count(Md160,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md160-2;
	if (count(Md160,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p4.p - p6.p;
	.sort:momrewrite-Md160-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd160()
	#call replace(Q.p6,`Q2'-i10-i11-i8,i,i10,i11,i8,Md160,dotrewrite-d160-0)
	#call replace(p4.p6,i11-i12-i14-i4,i,i11,i12,i14,i4,Md160,dotrewrite-d160-1)
	#call replace(p1.p2,`Q2'/2+i1/2+i2/2-i3/2-i8+i9,i,i1,i2,i3,i8,i9,Md160,dotrewrite-d160-2)
	#call replace(p1.p6,`Q2'/2-i1/2-i10-i11+i14+i4/2+i5/2-i6/2,i,i1,i10,i11,i14,i4,i5,i6,Md160,dotrewrite-d160-3)
	#call replace(p2.p6,-i11+i12-i13+i14-i2/2+i4/2-i6/2+i7/2,i,i11,i12,i13,i14,i2,i4,i6,i7,Md160,dotrewrite-d160-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 27
* path: (2, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md160,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p7.p - p3.p;
	.sort:momrewrite-Md160-3;
	if (count(Md160,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p + p2.p + p3.p;
	.sort:momrewrite-Md160-2;
	if (count(Md160,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p - p7.p;
	.sort:momrewrite-Md160-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd160()
	#call replace(Q.p3,-`Q2'+i8-i9,i,i8,i9,Md160,dotrewrite-d160-0)
	#call replace(p3.p4,-i11+i12-i13,i,i11,i12,i13,Md160,dotrewrite-d160-1)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md160,dotrewrite-d160-2)
	#call replace(Q.p7,-`Q2'+i10+i8-i9,i,i10,i8,i9,Md160,dotrewrite-d160-3)
	#call replace(p4.p7,-i11+i12-i13+i14,i,i11,i12,i13,i14,Md160,dotrewrite-d160-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i8,i,i1,i2,i3,i8,Md160,dotrewrite-d160-5)
	#call replace(p2.p7,i11-i12-i14-i2/2-i4/2+i6/2-i7/2,i,i11,i12,i14,i2,i4,i6,i7,Md160,dotrewrite-d160-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md160,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p - p7.p;
	.sort:momrewrite-Md160-3;
	if (count(Md160,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p5.p;
	.sort:momrewrite-Md160-2;
	if (count(Md160,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - Q.p - p3.p;
	.sort:momrewrite-Md160-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd160()
	#call replace(Q.p3,-`Q2'+i8-i9,i,i8,i9,Md160,dotrewrite-d160-0)
	#call replace(p3.p4,-i11+i12-i13,i,i11,i12,i13,Md160,dotrewrite-d160-1)
	#call replace(p3.p5,-i3/2-i5/2+i7/2,i,i3,i5,i7,Md160,dotrewrite-d160-2)
	#call replace(p1.p3,-`Q2'/2+i1/2-i2/2+i3/2-i9,i,i1,i2,i3,i9,Md160,dotrewrite-d160-3)
	#call replace(p1.p5,-`Q2'/2-i1/2+i10+i11-i12-i14-i4/2-i5/2+i6/2+i8,i,i1,i10,i11,i12,i14,i4,i5,i6,i8,Md160,dotrewrite-d160-4)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md160,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p + Q.p;
	.sort:momrewrite-Md160-3;
	if (count(Md160,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p5.p;
	.sort:momrewrite-Md160-2;
	if (count(Md160,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = - p4.p - p6.p - p7.p;
	.sort:momrewrite-Md160-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd160()
	#call replace(p5.p7,-i3/2+i5/2+i7/2,i,i3,i5,i7,Md160,dotrewrite-d160-0)
	#call replace(Q.p6,`Q2'-i10-i11-i8,i,i10,i11,i8,Md160,dotrewrite-d160-1)
	#call replace(p4.p6,i11-i12-i14-i4,i,i11,i12,i14,i4,Md160,dotrewrite-d160-2)
	#call replace(Q.p7,-`Q2'+i10+i8-i9,i,i10,i8,i9,Md160,dotrewrite-d160-3)
	#call replace(p4.p7,-i11+i12-i13+i14,i,i11,i12,i13,i14,Md160,dotrewrite-d160-4)
	#call replace(p6.p7,i13+i2/2+i4/2-i6/2-i7/2,i,i13,i2,i4,i6,i7,Md160,dotrewrite-d160-5)
	#call replace(p5.p6,`Q2'/2+i1/2-i11+i12+i4/2-i5/2-i6/2-i8,i,i1,i11,i12,i4,i5,i6,i8,Md160,dotrewrite-d160-6)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md160,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p3.p + p7.p;
	.sort:momrewrite-Md160-3;
	if (count(Md160,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md160-2;
	if (count(Md160,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p - p7.p;
	.sort:momrewrite-Md160-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd160()
	#call replace(Q.p7,-`Q2'+i10+i8-i9,i,i10,i8,i9,Md160,dotrewrite-d160-0)
	#call replace(p4.p7,-i11+i12-i13+i14,i,i11,i12,i13,i14,Md160,dotrewrite-d160-1)
	#call replace(p1.p2,`Q2'/2+i1/2+i2/2-i3/2-i8+i9,i,i1,i2,i3,i8,i9,Md160,dotrewrite-d160-2)
	#call replace(p2.p7,i11-i12-i14-i2/2-i4/2+i6/2-i7/2,i,i11,i12,i14,i2,i4,i6,i7,Md160,dotrewrite-d160-3)
	#call replace(p1.p7,-`Q2'+i10+i11-i12-i14-i2/2+i3/2-i4/2-i5/2+i6/2+i8-i9,i,i10,i11,i12,i14,i2,i3,i4,i5,i6,i8,i9,Md160,dotrewrite-d160-4)
#endif
#break
#default
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md160,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p - p7.p;
	.sort:momrewrite-Md160-3;
	if (count(Md160,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p5.p;
	.sort:momrewrite-Md160-2;
	if (count(Md160,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md160-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd160()
	#call replace(p1.p2,`Q2'/2+i1/2+i2/2-i3/2-i8+i9,i,i1,i2,i3,i8,i9,Md160,dotrewrite-d160-0)
	#call replace(p1.p5,-`Q2'/2-i1/2+i10+i11-i12-i14-i4/2-i5/2+i6/2+i8,i,i1,i10,i11,i12,i14,i4,i5,i6,i8,Md160,dotrewrite-d160-1)
	#call replace(p2.p5,-`Q2'/2-i1/2+i11-i12-i14+i3/2-i4/2+i6/2-i7/2+i8,i,i1,i11,i12,i14,i3,i4,i6,i7,i8,Md160,dotrewrite-d160-2)
#endif
#break
#endswitch
#break
*--#] d160 : 
*--#[ d99 :
#case Md99
#procedure SimpleDotd99()
if (count(Md99,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 0, 6)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md99,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p2.p - p3.p - p6.p;
	.sort:momrewrite-Md99-2;
	if (count(Md99,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p2.p + p6.p - p1.p;
	.sort:momrewrite-Md99-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd99()
	#call replace(Q.p6,-i7-i8-i9,i,i7,i8,i9,Md99,dotrewrite-d99-0)
	#call replace(p1.p6,-i12-i13-i14,i,i12,i13,i14,Md99,dotrewrite-d99-1)
	#call replace(p2.p6,-`Q2'/2-i1/2+i11-i13-i14-i2/2+i4/2-i6/2+i8+i9,i,i1,i11,i13,i14,i2,i4,i6,i8,i9,Md99,dotrewrite-d99-2)
	#call replace(p3.p6,`Q2'/2+i1/2-i10-i11+i13+i14-i3/2-i4/2+i5/2-i8-i9,i,i1,i10,i11,i13,i14,i3,i4,i5,i8,i9,Md99,dotrewrite-d99-3)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 14
* path: (1, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md99,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p2} = - p6.p - p2.p - p5.p;
	.sort:momrewrite-Md99-2;
	if (count(Md99,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = + p1.p + p4.p - Q.p - p6.p;
	.sort:momrewrite-Md99-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd99()
	#call replace(Q.p6,-i7-i8-i9,i,i7,i8,i9,Md99,dotrewrite-d99-0)
	#call replace(p1.p6,-i12-i13-i14,i,i12,i13,i14,Md99,dotrewrite-d99-1)
	#call replace(Q.p4,`Q2'-i11-i8-i9,i,i11,i8,i9,Md99,dotrewrite-d99-2)
	#call replace(p1.p4,-i1+i11-i13-i14,i,i1,i11,i13,i14,Md99,dotrewrite-d99-3)
	#call replace(p5.p6,i10+i2/2+i3/2-i5/2-i6/2,i,i10,i2,i3,i5,i6,Md99,dotrewrite-d99-4)
	#call replace(p4.p5,`Q2'/2+i1/2-i11+i13+i3/2-i4/2-i5/2-i8,i,i1,i11,i13,i3,i4,i5,i8,Md99,dotrewrite-d99-5)
	#call replace(p4.p6,-`Q2'/2-i1/2+i11+i12-i2/2+i4/2+i6/2-i7,i,i1,i11,i12,i2,i4,i6,i7,Md99,dotrewrite-d99-6)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md99,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p3.p - p5.p;
	.sort:momrewrite-Md99-2;
	if (count(Md99,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p - p5.p;
	.sort:momrewrite-Md99-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd99()
	#call replace(p3.p5,-`Q2'/2-i1/2+i11-i13-i14-i3/2+i4/2-i5/2+i8+i9,i,i1,i11,i13,i14,i3,i4,i5,i8,i9,Md99,dotrewrite-d99-0)
	#call replace(p2.p5,`Q2'/2+i1/2-i10-i11+i13+i14-i2/2-i4/2+i6/2-i8-i9,i,i1,i10,i11,i13,i14,i2,i4,i6,i8,i9,Md99,dotrewrite-d99-1)
#endif
#break
#endswitch
#break
*--#] d99 : 
*--#[ d171 :
#case Md171
#procedure SimpleDotd171()
if (count(Md171,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p4.p6^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md171,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md171-3;
	if (count(Md171,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + Q.p;
	.sort:momrewrite-Md171-2;
	if (count(Md171,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p1.p + p3.p + p4.p;
	.sort:momrewrite-Md171-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd171()
	#call replace(p1.p3,-i1+i12-i13,i,i1,i12,i13,Md171,dotrewrite-d171-0)
	#call replace(Q.p3,`Q2'/2-i11+i2/2-i5/2-i8,i,i11,i2,i5,i8,Md171,dotrewrite-d171-1)
	#call replace(p3.p4,i1/2-i12+i2/2-i3/2-i4/2,i,i1,i12,i2,i3,i4,Md171,dotrewrite-d171-2)
	#call replace(p3.p6,-i10-i14+i5/2+i6/2-i7/2+i9,i,i10,i14,i5,i6,i7,i9,Md171,dotrewrite-d171-3)
#endif
#break
#case 67
* path: (6, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md171,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p4.p + p2.p;
	.sort:momrewrite-Md171-3;
	if (count(Md171,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = - p5.p + Q.p;
	.sort:momrewrite-Md171-2;
	if (count(Md171,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md171-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd171()
	#call replace(p1.p7,-i11+i12-i14,i,i11,i12,i14,Md171,dotrewrite-d171-0)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md171,dotrewrite-d171-1)
	#call replace(Q.p7,-`Q2'/2+i2/2-i5/2-i9,i,i2,i5,i9,Md171,dotrewrite-d171-2)
	#call replace(p4.p7,i1/2-i10-i12+i13+i2/2-i3/2+i4/2-i8,i,i1,i10,i12,i13,i2,i3,i4,i8,Md171,dotrewrite-d171-3)
#endif
#break
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case Q5
* path: (0, 6, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md171,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p4.p + p2.p;
	.sort:momrewrite-Md171-3;
	if (count(Md171,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p5.p;
	.sort:momrewrite-Md171-2;
	if (count(Md171,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md171-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd171()
	if (count(Md171,1)) id p1.p5 = i11 - i12;
	#call replace(Q.p5,`Q2'/2-i2/2+i5/2,i,i2,i5,Md171,dotrewrite-d171-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md171,dotrewrite-d171-2)
	#call replace(p4.p5,-i1/2+i12-i13-i2/2+i3/2-i4/2+i8,i,i1,i12,i13,i2,i3,i4,i8,Md171,dotrewrite-d171-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 25
* path: (2, 5)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md171,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md171-3;
	if (count(Md171,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md171-2;
	if (count(Md171,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p - p4.p;
	.sort:momrewrite-Md171-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd171()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md171,dotrewrite-d171-0)
	#call replace(p2.p6,i5/2+i6/2-i7/2+i9,i,i5,i6,i7,i9,Md171,dotrewrite-d171-1)
	#call replace(p2.p4,i1/2-i12+i13+i2/2-i3/2+i4/2,i,i1,i12,i13,i2,i3,i4,Md171,dotrewrite-d171-2)
#endif
#break
#endswitch
#break
*--#] d171 : 
*--#[ d167 :
#case Md167
#procedure SimpleDotd167()
if (count(Md167,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 56
* path: (5, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md167,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md167-3;
	if (count(Md167,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md167-2;
	if (count(Md167,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p2.p;
	.sort:momrewrite-Md167-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd167()
	if (count(Md167,1)) id p1.p6 = i11 - i13;
	if (count(Md167,1)) id p2.p6 = -i10 + i8;
	#call replace(p2.p5,i2/2+i5/2-i7/2,i,i2,i5,i7,Md167,dotrewrite-d167-2)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md167,dotrewrite-d167-3)
	#call replace(p5.p6,-i1/2+i13-i14-i3/2+i4/2-i5/2+i9,i,i1,i13,i14,i3,i4,i5,i9,Md167,dotrewrite-d167-4)
#endif
#break
#case 14
* path: (1, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md167,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p5.p;
	.sort:momrewrite-Md167-3;
	if (count(Md167,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md167-2;
	if (count(Md167,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p1.p - p4.p;
	.sort:momrewrite-Md167-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd167()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md167,dotrewrite-d167-0)
	#call replace(p1.p4,-i1+i13-i14,i,i1,i13,i14,Md167,dotrewrite-d167-1)
	#call replace(Q.p4,`Q2'/2-i11+i3/2-i6/2-i9,i,i11,i3,i6,i9,Md167,dotrewrite-d167-2)
	#call replace(p2.p4,i10-i12-i2/2-i5/2+i7/2,i,i10,i12,i2,i5,i7,Md167,dotrewrite-d167-3)
	#call replace(p3.p4,-i1/2-i14+i3/2+i4/2-i5/2,i,i1,i14,i3,i4,i5,Md167,dotrewrite-d167-4)
#endif
#break
#case 27
* path: (2, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md167,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md167-3;
	if (count(Md167,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p2.p + p7.p;
	.sort:momrewrite-Md167-2;
	if (count(Md167,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md167-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd167()
	if (count(Md167,1)) id Q.p7 = -i8 + i9;
	if (count(Md167,1)) id p1.p7 = -i12 + i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md167,dotrewrite-d167-2)
	#call replace(p2.p7,-i2/2+i5/2-i7/2,i,i2,i5,i7,Md167,dotrewrite-d167-3)
	#call replace(p3.p7,i1/2-i10-i13+i14+i3/2-i4/2+i5/2,i,i1,i10,i13,i14,i3,i4,i5,Md167,dotrewrite-d167-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md167,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md167-3;
	if (count(Md167,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p2.p;
	.sort:momrewrite-Md167-2;
	if (count(Md167,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p - p5.p;
	.sort:momrewrite-Md167-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd167()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md167,dotrewrite-d167-0)
	#call replace(p2.p5,i2/2+i5/2-i7/2,i,i2,i5,i7,Md167,dotrewrite-d167-1)
	#call replace(p3.p5,i1/2-i13+i14+i3/2-i4/2+i5/2,i,i1,i13,i14,i3,i4,i5,Md167,dotrewrite-d167-2)
#endif
#break
#endswitch
#break
*--#] d167 : 
*--#[ d185 :
#case Md185
#procedure SimpleDotd185()
if (count(Md185,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md185,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p + p3.p;
	.sort:momrewrite-Md185-3;
	if (count(Md185,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md185-2;
	if (count(Md185,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p5.p - p6.p;
	.sort:momrewrite-Md185-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd185()
	if (count(Md185,1)) id p1.p6 = i11 - i13;
	if (count(Md185,1)) id p2.p6 = -i10 + i8;
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md185,dotrewrite-d185-2)
	#call replace(p5.p6,-i1/2+i13-i14-i3/2+i4/2-i5/2+i9,i,i1,i13,i14,i3,i4,i5,i9,Md185,dotrewrite-d185-3)
	#call replace(p2.p5,i1/2+i10-i13+i14-i2/2+i3/2-i4/2-i6/2+i7/2-i8-i9,i,i1,i10,i13,i14,i2,i3,i4,i6,i7,i8,i9,Md185,dotrewrite-d185-4)
#endif
#break
#case 14
* path: (1, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md185,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p5.p - p6.p;
	.sort:momrewrite-Md185-3;
	if (count(Md185,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md185-2;
	if (count(Md185,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p1.p - p4.p;
	.sort:momrewrite-Md185-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd185()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md185,dotrewrite-d185-0)
	#call replace(p1.p4,-i1+i13-i14,i,i1,i13,i14,Md185,dotrewrite-d185-1)
	#call replace(Q.p4,`Q2'/2-i11+i3/2-i6/2-i9,i,i11,i3,i6,i9,Md185,dotrewrite-d185-2)
	#call replace(p3.p4,-i1/2-i14+i3/2+i4/2-i5/2,i,i1,i14,i3,i4,i5,Md185,dotrewrite-d185-3)
	#call replace(p2.p4,-i1/2-i12+i13-i14+i2/2-i3/2+i4/2+i6/2-i7/2+i8+i9,i,i1,i12,i13,i14,i2,i3,i4,i6,i7,i8,i9,Md185,dotrewrite-d185-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md185,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p5.p - p6.p;
	.sort:momrewrite-Md185-3;
	if (count(Md185,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md185-2;
	if (count(Md185,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p - p5.p;
	.sort:momrewrite-Md185-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd185()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md185,dotrewrite-d185-0)
	#call replace(p3.p5,i1/2-i13+i14+i3/2-i4/2+i5/2,i,i1,i13,i14,i3,i4,i5,Md185,dotrewrite-d185-1)
	#call replace(p2.p5,i1/2+i10-i13+i14-i2/2+i3/2-i4/2-i6/2+i7/2-i8-i9,i,i1,i10,i13,i14,i2,i3,i4,i6,i7,i8,i9,Md185,dotrewrite-d185-2)
#endif
#break
#endswitch
#break
*--#] d185 : 
*--#[ d217 :
#case Md217
#procedure SimpleDotd217()
if (count(Md217,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p4^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p4.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md217,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p;
	.sort:momrewrite-Md217-4;
	if (count(Md217,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md217-3;
	if (count(Md217,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p + p8.p;
	.sort:momrewrite-Md217-2;
	if (count(Md217,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md217-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd217()
	if (count(Md217,1)) id p5.p8 = -i12 + i13;
	#call replace(p1.p8,-i1/2+i2/2-i8/2,i,i1,i2,i8,Md217,dotrewrite-d217-1)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md217,dotrewrite-d217-2)
	#call replace(p4.p8,i12-i13-i14-i4/2-i5/2+i6/2-i8/2,i,i12,i13,i14,i4,i5,i6,i8,Md217,dotrewrite-d217-3)
	#call replace(p1.p4,i10-i12+i13+i14-i3/2+i5/2-i6/2+i7/2+i8/2,i,i10,i12,i13,i14,i3,i5,i6,i7,i8,Md217,dotrewrite-d217-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 48
* path: (4, 8)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md217,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p;
	.sort:momrewrite-Md217-4;
	if (count(Md217,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p - p8.p;
	.sort:momrewrite-Md217-3;
	if (count(Md217,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md217-2;
	if (count(Md217,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md217-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd217()
	if (count(Md217,1)) id p5.p8 = -i12 + i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md217,dotrewrite-d217-1)
	#call replace(p2.p8,-i1/2+i2/2+i8/2,i,i1,i2,i8,Md217,dotrewrite-d217-2)
	#call replace(p2.p4,i10-i3/2-i4/2+i7/2,i,i10,i3,i4,i7,Md217,dotrewrite-d217-3)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md217,dotrewrite-d217-4)
	#call replace(p4.p8,i12-i13-i14-i4/2-i5/2+i6/2-i8/2,i,i12,i13,i14,i4,i5,i6,i8,Md217,dotrewrite-d217-5)
#endif
#break
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md217,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p;
	.sort:momrewrite-Md217-4;
	if (count(Md217,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md217-3;
	if (count(Md217,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p + p8.p;
	.sort:momrewrite-Md217-2;
	if (count(Md217,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p5} = - p5.p - p6.p - p8.p;
	.sort:momrewrite-Md217-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd217()
	if (count(Md217,1)) id p5.p8 = -i12 + i13;
	#call replace(p1.p8,-i1/2+i2/2-i8/2,i,i1,i2,i8,Md217,dotrewrite-d217-1)
	#call replace(p5.p6,i12-i13-i14-i5,i,i12,i13,i14,i5,Md217,dotrewrite-d217-2)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md217,dotrewrite-d217-3)
	#call replace(p6.p8,i14+i4/2+i5/2-i6/2-i8/2,i,i14,i4,i5,i6,i8,Md217,dotrewrite-d217-4)
	#call replace(Q.p6,-`Q2'/2-i10-i11-i2/2+i3/2+i9,i,i10,i11,i2,i3,i9,Md217,dotrewrite-d217-5)
	#call replace(p1.p6,i1/2-i10-i13-i14-i2/2+i3/2-i5/2+i6/2-i7/2,i,i1,i10,i13,i14,i2,i3,i5,i6,i7,Md217,dotrewrite-d217-6)
#endif
#break
#case 17
* path: (1, 7)
#case 13
* path: (1, 7, 3)
#if ( `MOMS' > 0 )
	if (count(Md217,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md217-4;
	if (count(Md217,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + p2.p;
	.sort:momrewrite-Md217-3;
	if (count(Md217,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md217-2;
	if (count(Md217,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p5} = + p3.p - p7.p;
	.sort:momrewrite-Md217-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd217()
	if (count(Md217,1)) id p3.p5 = i11 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md217,dotrewrite-d217-1)
	#call replace(p3.p7,i3/2-i4/2+i7/2,i,i3,i4,i7,Md217,dotrewrite-d217-2)
	#call replace(p5.p7,i11-i13-i14,i,i11,i13,i14,Md217,dotrewrite-d217-3)
	#call replace(p1.p3,-i1/2-i2/2+i8/2+i9,i,i1,i2,i8,i9,Md217,dotrewrite-d217-4)
	#call replace(Q.p7,`Q2'/2-i10-i2/2+i3/2,i,i10,i2,i3,Md217,dotrewrite-d217-5)
	#call replace(p1.p7,-i1/2-i10+i12-i13-i14-i2/2+i3/2-i5/2+i6/2-i7/2+i9,i,i1,i10,i12,i13,i14,i2,i3,i5,i6,i7,i9,Md217,dotrewrite-d217-6)
#endif
#break
#case 14
* path: (1, 7, 4)
#if ( `MOMS' > 0 )
	if (count(Md217,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md217-4;
	if (count(Md217,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + p2.p;
	.sort:momrewrite-Md217-3;
	if (count(Md217,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md217-2;
	if (count(Md217,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p + p7.p;
	.sort:momrewrite-Md217-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd217()
	#call replace(p4.p7,i3/2-i4/2-i7/2,i,i3,i4,i7,Md217,dotrewrite-d217-0)
	#call replace(p5.p7,i11-i13-i14,i,i11,i13,i14,Md217,dotrewrite-d217-1)
	#call replace(Q.p7,`Q2'/2-i10-i2/2+i3/2,i,i10,i2,i3,Md217,dotrewrite-d217-2)
	#call replace(p1.p4,i10-i12+i13+i14-i3/2+i5/2-i6/2+i7/2+i8/2,i,i10,i12,i13,i14,i3,i5,i6,i7,i8,Md217,dotrewrite-d217-3)
	#call replace(p1.p7,-i1/2-i10+i12-i13-i14-i2/2+i3/2-i5/2+i6/2-i7/2+i9,i,i1,i10,i12,i13,i14,i2,i3,i5,i6,i7,i9,Md217,dotrewrite-d217-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md217,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p;
	.sort:momrewrite-Md217-4;
	if (count(Md217,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md217-3;
	if (count(Md217,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md217-2;
	if (count(Md217,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p1.p;
	.sort:momrewrite-Md217-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd217()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md217,dotrewrite-d217-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md217,dotrewrite-d217-1)
	#call replace(p2.p4,i10-i3/2-i4/2+i7/2,i,i10,i3,i4,i7,Md217,dotrewrite-d217-2)
	#call replace(p1.p4,i10-i12+i13+i14-i3/2+i5/2-i6/2+i7/2+i8/2,i,i10,i12,i13,i14,i3,i5,i6,i7,i8,Md217,dotrewrite-d217-3)
#endif
#break
#endswitch
#break
*--#] d217 : 
*--#[ d207 :
#case Md207
#procedure SimpleDotd207()
if (count(Md207,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p1.p2^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p2.p6^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p4.p + p5.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p6} = + Q.p - p3.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p3.p + p7.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	if (count(Md207,1)) id p3.p6 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md207,dotrewrite-d207-1)
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md207,dotrewrite-d207-2)
	#call replace(p3.p7,-i3/2+i4/2-i7/2,i,i3,i4,i7,Md207,dotrewrite-d207-3)
	#call replace(p6.p7,-i11+i13+i14,i,i11,i13,i14,Md207,dotrewrite-d207-4)
	#call replace(p1.p3,`Q2'/2+i1/2-i10-i5/2,i,i1,i10,i5,Md207,dotrewrite-d207-5)
	#call replace(Q.p7,-`Q2'/2+i2/2-i3/2+i9,i,i2,i3,i9,Md207,dotrewrite-d207-6)
	#call replace(p1.p7,-`Q2'/2-i1/2+i10+i11-i12-i14-i4/2-i6/2+i8/2+i9,i,i1,i10,i11,i12,i14,i4,i6,i8,i9,Md207,dotrewrite-d207-7)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p6} = + Q.p - p3.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p3.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p - p6.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	if (count(Md207,1)) id p3.p6 = i11 - i13;
	if (count(Md207,1)) id p5.p6 = i11 - i12;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md207,dotrewrite-d207-2)
	#call replace(p3.p4,i3/2+i4/2-i7/2,i,i3,i4,i7,Md207,dotrewrite-d207-3)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md207,dotrewrite-d207-4)
	#call replace(p3.p5,-i1/2+i10-i2/2+i3/2+i5/2,i,i1,i10,i2,i3,i5,Md207,dotrewrite-d207-5)
	#call replace(p4.p5,-i11+i12+i14+i4/2+i5/2+i6/2-i8/2,i,i11,i12,i14,i4,i5,i6,i8,Md207,dotrewrite-d207-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 7)
#case 57
* path: (5, 1, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p4.p + p5.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p7.p + p3.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md207,dotrewrite-d207-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md207,dotrewrite-d207-1)
	#call replace(p6.p7,-i11+i13+i14,i,i11,i13,i14,Md207,dotrewrite-d207-2)
	#call replace(Q.p7,-`Q2'/2+i2/2-i3/2+i9,i,i2,i3,i9,Md207,dotrewrite-d207-3)
	#call replace(p2.p7,-`Q2'/2+i2/2-i4/2+i7/2+i9,i,i2,i4,i7,i9,Md207,dotrewrite-d207-4)
	#call replace(p1.p7,-`Q2'/2-i1/2+i10+i11-i12-i14-i4/2-i6/2+i8/2+i9,i,i1,i10,i11,i12,i14,i4,i6,i8,i9,Md207,dotrewrite-d207-5)
#endif
#break
#case 68
* path: (6, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p4.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = - p8.p - p6.p + p5.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md207,dotrewrite-d207-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md207,dotrewrite-d207-1)
	#call replace(p6.p8,i11-i12-i14-i6,i,i11,i12,i14,i6,Md207,dotrewrite-d207-2)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i5/2-i9,i,i1,i11,i5,i9,Md207,dotrewrite-d207-3)
	#call replace(p2.p8,`Q2'/2-i10-i13+i2/2+i4/2-i7/2-i9,i,i10,i13,i2,i4,i7,i9,Md207,dotrewrite-d207-4)
	#call replace(p1.p8,`Q2'/2-i1/2-i11+i14+i4/2+i6/2-i8/2-i9,i,i1,i11,i14,i4,i6,i8,i9,Md207,dotrewrite-d207-5)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p6} = + Q.p - p3.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p7.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + p6.p + p8.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	#call replace(p4.p7,-i3/2+i4/2+i7/2,i,i3,i4,i7,Md207,dotrewrite-d207-0)
	#call replace(p6.p7,-i11+i13+i14,i,i11,i13,i14,Md207,dotrewrite-d207-1)
	#call replace(Q.p7,-`Q2'/2+i2/2-i3/2+i9,i,i2,i3,i9,Md207,dotrewrite-d207-2)
	#call replace(p6.p8,i11-i12-i14-i6,i,i11,i12,i14,i6,Md207,dotrewrite-d207-3)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i5/2-i9,i,i1,i11,i5,i9,Md207,dotrewrite-d207-4)
	#call replace(p4.p8,-i11+i12-i4/2+i5/2+i6/2-i8/2,i,i11,i12,i4,i5,i6,i8,Md207,dotrewrite-d207-5)
	#call replace(p7.p8,i1/2-i10+i12-i13+i2/2+i6/2-i7/2-i8/2,i,i1,i10,i12,i13,i2,i6,i7,i8,Md207,dotrewrite-d207-6)
#endif
#break
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p4.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p - p6.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	if (count(Md207,1)) id p5.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md207,dotrewrite-d207-1)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md207,dotrewrite-d207-2)
	#call replace(p2.p4,-i3/2-i4/2+i7/2+i9,i,i3,i4,i7,i9,Md207,dotrewrite-d207-3)
	#call replace(p2.p5,`Q2'/2-i10+i2/2-i3/2,i,i10,i2,i3,Md207,dotrewrite-d207-4)
	#call replace(p4.p5,-i11+i12+i14+i4/2+i5/2+i6/2-i8/2,i,i11,i12,i14,i4,i5,i6,i8,Md207,dotrewrite-d207-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case Q6
* path: (0, 2, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 26
* path: (2, 6)
#case 36
* path: (3, 2, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md207,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p4.p;
	.sort:momrewrite-Md207-4;
	if (count(Md207,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p4.p + p5.p;
	.sort:momrewrite-Md207-3;
	if (count(Md207,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md207-2;
	if (count(Md207,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md207-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd207()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md207,dotrewrite-d207-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md207,dotrewrite-d207-1)
	#call replace(p2.p4,-i3/2-i4/2+i7/2+i9,i,i3,i4,i7,i9,Md207,dotrewrite-d207-2)
	#call replace(p1.p4,i11-i12-i14-i4/2-i5/2-i6/2+i8/2+i9,i,i11,i12,i14,i4,i5,i6,i8,i9,Md207,dotrewrite-d207-3)
#endif
#break
#endswitch
#break
*--#] d207 : 
*--#[ d218 :
#case Md218
#procedure SimpleDotd218()
if (count(Md218,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p5^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 24
* path: (2, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Md218,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p3.p;
	.sort:momrewrite-Md218-4;
	if (count(Md218,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md218-3;
	if (count(Md218,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md218-2;
	if (count(Md218,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p5.p;
	.sort:momrewrite-Md218-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd218()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md218,dotrewrite-d218-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md218,dotrewrite-d218-1)
	#call replace(p4.p5,i4/2+i5/2-i7/2,i,i4,i5,i7,Md218,dotrewrite-d218-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i13-i6/2,i,i1,i13,i6,Md218,dotrewrite-d218-3)
	#call replace(p2.p4,-i2/2-i3/2+i8/2+i9,i,i2,i3,i8,i9,Md218,dotrewrite-d218-4)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md218,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md218-4;
	if (count(Md218,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md218-3;
	if (count(Md218,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p8.p;
	.sort:momrewrite-Md218-2;
	if (count(Md218,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md218-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd218()
	if (count(Md218,1)) id p1.p8 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md218,dotrewrite-d218-1)
	#call replace(p2.p8,-i2/2+i3/2-i8/2,i,i2,i3,i8,Md218,dotrewrite-d218-2)
	#call replace(Q.p8,`Q2'/2+i3/2-i4/2-i9,i,i3,i4,i9,Md218,dotrewrite-d218-3)
	#call replace(p5.p8,i10-i11-i4/2-i5/2+i7/2,i,i10,i11,i4,i5,i7,Md218,dotrewrite-d218-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md218,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md218-4;
	if (count(Md218,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md218-3;
	if (count(Md218,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md218-2;
	if (count(Md218,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p;
	.sort:momrewrite-Md218-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd218()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md218,dotrewrite-d218-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md218,dotrewrite-d218-1)
	#call replace(p2.p3,i2/2+i3/2-i8/2,i,i2,i3,i8,Md218,dotrewrite-d218-2)
	#call replace(p3.p5,i10-i4/2-i5/2+i7/2,i,i10,i4,i5,i7,Md218,dotrewrite-d218-3)
#endif
#break
#endswitch
#break
*--#] d218 : 
*--#[ d155 :
#case Md155
#procedure SimpleDotd155()
if (count(Md155,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id Q.p7^n? = i9^n;
	id p1.p7^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p4^n? = i12^n;
	id p3.p4^n? = i13^n;
	id p4.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md155,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p - p3.p;
	.sort:momrewrite-Md155-3;
	if (count(Md155,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md155-2;
	if (count(Md155,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p2.p + p6.p;
	.sort:momrewrite-Md155-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd155()
	if (count(Md155,1)) id p2.p4 = i11 - i12;
	if (count(Md155,1)) id p2.p7 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md155,dotrewrite-d155-2)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md155,dotrewrite-d155-3)
	#call replace(p4.p6,-i11+i12+i13,i,i11,i12,i13,Md155,dotrewrite-d155-4)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2+i8,i,i1,i2,i8,Md155,dotrewrite-d155-5)
	#call replace(p6.p7,i10-i13-i14-i3/2-i4/2+i5/2-i7/2-i9,i,i10,i13,i14,i3,i4,i5,i7,i9,Md155,dotrewrite-d155-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md155,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md155-3;
	if (count(Md155,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md155-2;
	if (count(Md155,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p - p7.p;
	.sort:momrewrite-Md155-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd155()
	if (count(Md155,1)) id p2.p4 = i11 - i12;
	if (count(Md155,1)) id p2.p7 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md155,dotrewrite-d155-2)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md155,dotrewrite-d155-3)
	#call replace(p3.p7,-i13-i14-i3/2-i4/2+i5/2-i7/2,i,i13,i14,i3,i4,i5,i7,Md155,dotrewrite-d155-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md155,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p - p3.p;
	.sort:momrewrite-Md155-3;
	if (count(Md155,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p6.p + p2.p;
	.sort:momrewrite-Md155-2;
	if (count(Md155,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md155-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd155()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md155,dotrewrite-d155-0)
	#call replace(p4.p6,-i11+i12+i13,i,i11,i12,i13,Md155,dotrewrite-d155-1)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2+i8,i,i1,i2,i8,Md155,dotrewrite-d155-2)
	#call replace(p1.p6,-`Q2'/2+i1/2-i3/2+i6/2+i8,i,i1,i3,i6,i8,Md155,dotrewrite-d155-3)
	#call replace(p6.p7,i10-i13-i14-i3/2-i4/2+i5/2-i7/2-i9,i,i10,i13,i14,i3,i4,i5,i7,i9,Md155,dotrewrite-d155-4)
#endif
#break
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md155,1)) id p1.p?!{p1,[P+p1],[P-p1],p4,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md155-3;
	if (count(Md155,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p6.p;
	.sort:momrewrite-Md155-2;
	if (count(Md155,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p - p7.p;
	.sort:momrewrite-Md155-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd155()
	#call replace(p3.p6,-i2/2+i3/2+i6/2,i,i2,i3,i6,Md155,dotrewrite-d155-0)
	#call replace(p4.p6,-i11+i12+i13,i,i11,i12,i13,Md155,dotrewrite-d155-1)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2+i8,i,i1,i2,i8,Md155,dotrewrite-d155-2)
	#call replace(p3.p7,-i13-i14-i3/2-i4/2+i5/2-i7/2,i,i13,i14,i3,i4,i5,i7,Md155,dotrewrite-d155-3)
	#call replace(p6.p7,i10-i13-i14-i3/2-i4/2+i5/2-i7/2-i9,i,i10,i13,i14,i3,i4,i5,i7,i9,Md155,dotrewrite-d155-4)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md155,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md155-3;
	if (count(Md155,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md155-2;
	if (count(Md155,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md155-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd155()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md155,dotrewrite-d155-0)
	#call replace(Q.p5,-i11-i8-i9,i,i11,i8,i9,Md155,dotrewrite-d155-1)
	#call replace(p4.p5,-i13-i14-i4,i,i13,i14,i4,Md155,dotrewrite-d155-2)
	#call replace(p5.p7,i13+i3/2+i4/2-i5/2-i7/2,i,i13,i3,i4,i5,i7,Md155,dotrewrite-d155-3)
	#call replace(p1.p5,-i10-i12+i2/2+i3/2-i6/2-i8,i,i10,i12,i2,i3,i6,i8,Md155,dotrewrite-d155-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md155,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p3.p;
	.sort:momrewrite-Md155-3;
	if (count(Md155,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md155-2;
	if (count(Md155,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p - p7.p;
	.sort:momrewrite-Md155-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd155()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md155,dotrewrite-d155-0)
	#call replace(p1.p3,-i2/2-i3/2+i6/2+i8,i,i2,i3,i6,i8,Md155,dotrewrite-d155-1)
	#call replace(p3.p7,-i13-i14-i3/2-i4/2+i5/2-i7/2,i,i13,i14,i3,i4,i5,i7,Md155,dotrewrite-d155-2)
#endif
#break
#endswitch
#break
*--#] d155 : 
*--#[ d156 :
#case Md156
#procedure SimpleDotd156()
if (count(Md156,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p7^n? = i8^n;
	id p1.p2^n? = i9^n;
	id p1.p7^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md156,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md156-3;
	if (count(Md156,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md156-2;
	if (count(Md156,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p5} = + p1.p + p5.p + p6.p + p7.p;
	.sort:momrewrite-Md156-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd156()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md156,dotrewrite-d156-0)
	#call replace(p1.p6,-i1-i10-i12+i9,i,i1,i10,i12,i9,Md156,dotrewrite-d156-1)
	#call replace(p5.p6,-i12+i13-i14-i5,i,i12,i13,i14,i5,Md156,dotrewrite-d156-2)
	#call replace(Q.p6,-i1/2-i11+i2/2-i3/2+i4/2-i8,i,i1,i11,i2,i3,i4,i8,Md156,dotrewrite-d156-3)
	#call replace(p6.p7,i1/2+i12-i13+i2/2+i5/2-i6/2-i7/2-i9,i,i1,i12,i13,i2,i5,i6,i7,i9,Md156,dotrewrite-d156-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md156,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md156-3;
	if (count(Md156,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p;
	.sort:momrewrite-Md156-2;
	if (count(Md156,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p - p5.p - p7.p;
	.sort:momrewrite-Md156-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd156()
	#call replace(Q.p1,`Q2'/2+i1/2-i4/2,i,i1,i4,Md156,dotrewrite-d156-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md156,dotrewrite-d156-1)
	#call replace(p2.p7,i1/2+i10+i12-i13+i14+i2/2+i5/2-i6/2+i7/2-i9,i,i1,i10,i12,i13,i14,i2,i5,i6,i7,i9,Md156,dotrewrite-d156-2)
#endif
#break
#endswitch
#break
*--#] d156 : 
*--#[ d172 :
#case Md172
#procedure SimpleDotd172()
if (count(Md172,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p1.p4^n? = i10^n;
	id p1.p6^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md172,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p4,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md172-3;
	if (count(Md172,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md172-2;
	if (count(Md172,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p4.p - p6.p;
	.sort:momrewrite-Md172-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd172()
	if (count(Md172,1)) id p4.p5 = -i10 + i8;
	if (count(Md172,1)) id p5.p6 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md172,dotrewrite-d172-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md172,dotrewrite-d172-3)
	#call replace(p2.p5,`Q2'/2-i12+i2/2-i3/2,i,i12,i2,i3,Md172,dotrewrite-d172-4)
	#call replace(p4.p6,-i10-i11-i4/2-i5/2-i6/2+i7/2+i8+i9,i,i10,i11,i4,i5,i6,i7,i8,i9,Md172,dotrewrite-d172-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md172,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p + p5.p;
	.sort:momrewrite-Md172-3;
	if (count(Md172,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md172-2;
	if (count(Md172,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md172-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd172()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md172,dotrewrite-d172-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md172,dotrewrite-d172-1)
	#call replace(p4.p6,-i10-i11-i4/2-i5/2-i6/2+i7/2+i8+i9,i,i10,i11,i4,i5,i6,i7,i8,i9,Md172,dotrewrite-d172-2)
#endif
#break
#endswitch
#break
*--#] d172 : 
*--#[ d220 :
#case Md220
#procedure SimpleDotd220()
if (count(Md220,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p1.p2^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p4.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 1, 6)
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 56
* path: (5, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p5} = + p3.p + p6.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - Q.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p - p6.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md220,dotrewrite-d220-0)
	#call replace(p5.p6,i11-i13+i14,i,i11,i13,i14,Md220,dotrewrite-d220-1)
	#call replace(Q.p6,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md220,dotrewrite-d220-2)
	#call replace(p2.p6,`Q2'/2-i2/2+i4/2-i6/2+i9,i,i2,i4,i6,i9,Md220,dotrewrite-d220-3)
	#call replace(Q.p1,`Q2'/2+i1/2-i11+i12+i5/2-i8/2,i,i1,i11,i12,i5,i8,Md220,dotrewrite-d220-4)
	#call replace(p1.p6,`Q2'/2+i1/2-i10+i4/2-i7/2+i9,i,i1,i10,i4,i7,i9,Md220,dotrewrite-d220-5)
#endif
#break
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p2.p + p1.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p5} = + Q.p + p3.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p5} = + p3.p + p6.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	if (count(Md220,1)) id p3.p5 = -i11 + i13;
	#call replace(Q.p3,-`Q2'/2+i2/2-i3/2,i,i2,i3,Md220,dotrewrite-d220-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md220,dotrewrite-d220-2)
	#call replace(p5.p6,i11-i13+i14,i,i11,i13,i14,Md220,dotrewrite-d220-3)
	#call replace(Q.p6,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md220,dotrewrite-d220-4)
	#call replace(Q.p1,`Q2'/2+i1/2-i11+i12+i5/2-i8/2,i,i1,i11,i12,i5,i8,Md220,dotrewrite-d220-5)
	#call replace(p1.p6,`Q2'/2+i1/2-i10+i4/2-i7/2+i9,i,i1,i10,i4,i7,i9,Md220,dotrewrite-d220-6)
	#call replace(p1.p3,-`Q2'/2-i1/2+i10+i11-i12-i5/2+i8/2,i,i1,i10,i11,i12,i5,i8,Md220,dotrewrite-d220-7)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p4.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - Q.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p5} = + Q.p + p4.p + p7.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md220,dotrewrite-d220-0)
	#call replace(p5.p7,-i11+i12-i14,i,i11,i12,i14,Md220,dotrewrite-d220-1)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i9,i,i3,i4,i6,i9,Md220,dotrewrite-d220-2)
	#call replace(p2.p7,-`Q2'/2+i10-i2/2-i4/2+i6/2-i9,i,i10,i2,i4,i6,i9,Md220,dotrewrite-d220-3)
	#call replace(p4.p7,i11-i12-i4/2-i5/2-i7/2+i8/2,i,i11,i12,i4,i5,i7,i8,Md220,dotrewrite-d220-4)
	#call replace(Q.p7,-`Q2'/2+i1/2-i11+i12+i5/2-i8/2-i9,i,i1,i11,i12,i5,i8,i9,Md220,dotrewrite-d220-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p5} = + p3.p + p6.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - Q.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p - p7.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md220,dotrewrite-d220-0)
	#call replace(p5.p7,-i11+i12-i14,i,i11,i12,i14,Md220,dotrewrite-d220-1)
	#call replace(p1.p7,-`Q2'/2+i1/2-i4/2+i7/2-i9,i,i1,i4,i7,i9,Md220,dotrewrite-d220-2)
	#call replace(Q.p1,`Q2'/2+i1/2-i11+i12+i5/2-i8/2,i,i1,i11,i12,i5,i8,Md220,dotrewrite-d220-3)
	#call replace(p2.p7,-`Q2'/2+i10-i2/2-i4/2+i6/2-i9,i,i10,i2,i4,i6,i9,Md220,dotrewrite-d220-4)
	#call replace(Q.p7,-`Q2'/2+i1/2-i11+i12+i5/2-i8/2-i9,i,i1,i11,i12,i5,i8,i9,Md220,dotrewrite-d220-5)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p5} = + Q.p + p3.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	if (count(Md220,1)) id p3.p5 = -i11 + i13;
	#call replace(Q.p3,-`Q2'/2+i2/2-i3/2,i,i2,i3,Md220,dotrewrite-d220-1)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md220,dotrewrite-d220-2)
	#call replace(Q.p1,`Q2'/2+i1/2-i11+i12+i5/2-i8/2,i,i1,i11,i12,i5,i8,Md220,dotrewrite-d220-3)
	#call replace(p1.p3,-`Q2'/2-i1/2+i10+i11-i12-i5/2+i8/2,i,i1,i10,i11,i12,i5,i8,Md220,dotrewrite-d220-4)
	#call replace(p1.p4,i11-i12+i4/2-i5/2-i7/2+i8/2+i9,i,i11,i12,i4,i5,i7,i8,i9,Md220,dotrewrite-d220-5)
#endif
#break
#case 46
* path: (4, 6)
#case 47
* path: (4, 7)
#case 57
* path: (5, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p5} = + p3.p + Q.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p6.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p5} = + Q.p + p4.p + p7.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	#call replace(p4.p6,-i3/2+i4/2+i6/2,i,i3,i4,i6,Md220,dotrewrite-d220-0)
	#call replace(p5.p6,i11-i13+i14,i,i11,i13,i14,Md220,dotrewrite-d220-1)
	#call replace(p5.p7,-i11+i12-i14,i,i11,i12,i14,Md220,dotrewrite-d220-2)
	#call replace(Q.p6,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md220,dotrewrite-d220-3)
	#call replace(p6.p7,i1/2-i10+i2/2-i6/2-i7/2,i,i1,i10,i2,i6,i7,Md220,dotrewrite-d220-4)
	#call replace(p4.p7,i11-i12-i4/2-i5/2-i7/2+i8/2,i,i11,i12,i4,i5,i7,i8,Md220,dotrewrite-d220-5)
	#call replace(Q.p7,-`Q2'/2+i1/2-i11+i12+i5/2-i8/2-i9,i,i1,i11,i12,i5,i8,i9,Md220,dotrewrite-d220-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md220,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p4.p;
	.sort:momrewrite-Md220-4;
	if (count(Md220,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - Q.p;
	.sort:momrewrite-Md220-3;
	if (count(Md220,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md220-2;
	if (count(Md220,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md220-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd220()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md220,dotrewrite-d220-0)
	#call replace(p2.p4,i3/2+i4/2-i6/2+i9,i,i3,i4,i6,i9,Md220,dotrewrite-d220-1)
	#call replace(Q.p1,`Q2'/2+i1/2-i11+i12+i5/2-i8/2,i,i1,i11,i12,i5,i8,Md220,dotrewrite-d220-2)
	#call replace(p1.p4,i11-i12+i4/2-i5/2-i7/2+i8/2+i9,i,i11,i12,i4,i5,i7,i8,i9,Md220,dotrewrite-d220-3)
#endif
#break
#endswitch
#break
*--#] d220 : 
*--#[ d234 :
#case Md234
#procedure SimpleDotd234()
if (count(Md234,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p1.p4^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p2.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p + p6.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id Q.p6 = i10 - i12;
	if (count(Md234,1)) id p1.p6 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md234,dotrewrite-d234-2)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md234,dotrewrite-d234-3)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-4)
	#call replace(p2.p6,`Q2'/2+i10-i14+i2/2+i4/2-i7/2-i9,i,i10,i14,i2,i4,i7,i9,Md234,dotrewrite-d234-5)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = - p8.p + p1.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p5.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id p3.p5 = i12 - i13;
	if (count(Md234,1)) id p4.p5 = i10 - i11;
	if (count(Md234,1)) id p3.p8 = i13 - i14;
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-3)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md234,dotrewrite-d234-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md234,dotrewrite-d234-5)
	#call replace(p5.p8,`Q2'/2+i2/2-i5/2-i8/2-i9,i,i2,i5,i8,i9,Md234,dotrewrite-d234-6)
	#call replace(p4.p8,-`Q2'/2-i10+i11-i2/2-i4/2+i7/2+i9,i,i10,i11,i2,i4,i7,i9,Md234,dotrewrite-d234-7)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + Q.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p2.p + p8.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p - p4.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id p3.p8 = i13 - i14;
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-1)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md234,dotrewrite-d234-2)
	#call replace(Q.p8,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md234,dotrewrite-d234-3)
	#call replace(p2.p4,`Q2'/2+i10+i2/2+i4/2-i7/2-i9,i,i10,i2,i4,i7,i9,Md234,dotrewrite-d234-4)
	#call replace(p4.p8,-`Q2'/2-i10+i11-i2/2-i4/2+i7/2+i9,i,i10,i11,i2,i4,i7,i9,Md234,dotrewrite-d234-5)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = + p1.p - p8.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id p3.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md234,dotrewrite-d234-1)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-2)
	#call replace(p1.p8,i1/2-i2/2+i8/2,i,i1,i2,i8,Md234,dotrewrite-d234-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md234,dotrewrite-d234-4)
	#call replace(p4.p8,-`Q2'/2-i10+i11-i2/2-i4/2+i7/2+i9,i,i10,i11,i2,i4,i7,i9,Md234,dotrewrite-d234-5)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = - p8.p + p1.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p - p5.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md234,dotrewrite-d234-0)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-1)
	#call replace(Q.p7,-`Q2'-i10+i9,i,i10,i9,Md234,dotrewrite-d234-2)
	#call replace(p1.p7,-`Q2'/2-i11+i2/2+i5/2-i8/2,i,i11,i2,i5,i8,Md234,dotrewrite-d234-3)
	#call replace(p3.p7,-i12+i14-i3/2-i4/2+i6/2,i,i12,i14,i3,i4,i6,Md234,dotrewrite-d234-4)
	#call replace(p4.p7,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Md234,dotrewrite-d234-5)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + Q.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p4.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p2.p + p8.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - Q.p - p7.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id p3.p8 = i13 - i14;
	#call replace(Q.p7,-`Q2'-i10+i9,i,i10,i9,Md234,dotrewrite-d234-1)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md234,dotrewrite-d234-2)
	#call replace(Q.p8,`Q2'/2+i1/2-i5/2-i9,i,i1,i5,i9,Md234,dotrewrite-d234-3)
	#call replace(p2.p7,-`Q2'/2-i10+i2/2-i4/2+i7/2,i,i10,i2,i4,i7,Md234,dotrewrite-d234-4)
	#call replace(p3.p7,-i12+i14-i3/2-i4/2+i6/2,i,i12,i14,i3,i4,i6,Md234,dotrewrite-d234-5)
	#call replace(p7.p8,i10-i11+i4/2+i5/2-i7/2-i8/2,i,i10,i11,i4,i5,i7,i8,Md234,dotrewrite-d234-6)
#endif
#break
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 35
* path: (3, 4, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p5.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p - p4.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id p3.p5 = i12 - i13;
	if (count(Md234,1)) id p4.p5 = i10 - i11;
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md234,dotrewrite-d234-3)
	#call replace(p2.p5,-i1/2-i2/2+i8/2+i9,i,i1,i2,i8,i9,Md234,dotrewrite-d234-4)
	#call replace(p2.p4,`Q2'/2+i10+i2/2+i4/2-i7/2-i9,i,i10,i2,i4,i7,i9,Md234,dotrewrite-d234-5)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case Q5
* path: (0, 7, 5)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = - p8.p + p1.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p5.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	if (count(Md234,1)) id p3.p5 = i12 - i13;
	if (count(Md234,1)) id p4.p5 = i10 - i11;
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md234,dotrewrite-d234-3)
	#call replace(Q.p7,-`Q2'-i10+i9,i,i10,i9,Md234,dotrewrite-d234-4)
	#call replace(p3.p7,-i12+i14-i3/2-i4/2+i6/2,i,i12,i14,i3,i4,i6,Md234,dotrewrite-d234-5)
	#call replace(p4.p7,`Q2'/2+i2/2-i4/2-i7/2-i9,i,i2,i4,i7,i9,Md234,dotrewrite-d234-6)
	#call replace(p5.p7,-`Q2'/2-i10+i11-i2/2-i5/2+i8/2+i9,i,i10,i11,i2,i5,i8,i9,Md234,dotrewrite-d234-7)
#endif
#break
#case Q7
* path: (0, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p4.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - Q.p - p7.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md234,dotrewrite-d234-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md234,dotrewrite-d234-1)
	#call replace(Q.p7,-`Q2'-i10+i9,i,i10,i9,Md234,dotrewrite-d234-2)
	#call replace(p1.p7,-`Q2'/2-i11+i2/2+i5/2-i8/2,i,i11,i2,i5,i8,Md234,dotrewrite-d234-3)
	#call replace(p2.p7,-`Q2'/2-i10+i2/2-i4/2+i7/2,i,i10,i2,i4,i7,Md234,dotrewrite-d234-4)
	#call replace(p3.p7,-i12+i14-i3/2-i4/2+i6/2,i,i12,i14,i3,i4,i6,Md234,dotrewrite-d234-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 14
* path: (1, 5, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md234,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md234-4;
	if (count(Md234,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p3.p;
	.sort:momrewrite-Md234-3;
	if (count(Md234,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md234-2;
	if (count(Md234,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p - p4.p;
	.sort:momrewrite-Md234-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd234()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md234,dotrewrite-d234-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md234,dotrewrite-d234-1)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md234,dotrewrite-d234-2)
	#call replace(p2.p4,`Q2'/2+i10+i2/2+i4/2-i7/2-i9,i,i10,i2,i4,i7,i9,Md234,dotrewrite-d234-3)
#endif
#break
#endswitch
#break
*--#] d234 : 
*--#[ d235 :
#case Md235
#procedure SimpleDotd235()
if (count(Md235,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p2.p3^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md235,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = - p8.p + p1.p;
	.sort:momrewrite-Md235-4;
	if (count(Md235,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p6.p;
	.sort:momrewrite-Md235-3;
	if (count(Md235,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md235-2;
	if (count(Md235,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p - p8.p;
	.sort:momrewrite-Md235-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd235()
	if (count(Md235,1)) id p5.p6 = i10 - i11;
	if (count(Md235,1)) id p3.p8 = i12 - i13;
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md235,dotrewrite-d235-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md235,dotrewrite-d235-3)
	#call replace(p3.p6,-`Q2'/2-i12-i3/2+i4/2,i,i12,i3,i4,Md235,dotrewrite-d235-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md235,dotrewrite-d235-5)
	#call replace(p6.p8,`Q2'/2+i2/2-i6/2-i8/2-i9,i,i2,i6,i8,i9,Md235,dotrewrite-d235-6)
	#call replace(p5.p8,-`Q2'/2-i10+i11-i2/2-i5/2+i7/2+i9,i,i10,i11,i2,i5,i7,i9,Md235,dotrewrite-d235-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md235,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p - p8.p;
	.sort:momrewrite-Md235-4;
	if (count(Md235,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = + p1.p - p8.p;
	.sort:momrewrite-Md235-3;
	if (count(Md235,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md235-2;
	if (count(Md235,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md235-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd235()
	if (count(Md235,1)) id p3.p8 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md235,dotrewrite-d235-1)
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md235,dotrewrite-d235-2)
	#call replace(p1.p8,i1/2-i2/2+i8/2,i,i1,i2,i8,Md235,dotrewrite-d235-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md235,dotrewrite-d235-4)
	#call replace(p5.p8,-`Q2'/2-i10+i11-i2/2-i5/2+i7/2+i9,i,i10,i11,i2,i5,i7,i9,Md235,dotrewrite-d235-5)
#endif
#break
#case Q8
* path: (0, 3, 2, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md235,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md235-4;
	if (count(Md235,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + p2.p + p8.p;
	.sort:momrewrite-Md235-3;
	if (count(Md235,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md235-2;
	if (count(Md235,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Md235-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd235()
	if (count(Md235,1)) id p3.p8 = i12 - i13;
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md235,dotrewrite-d235-1)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md235,dotrewrite-d235-2)
	#call replace(Q.p8,`Q2'/2+i1/2-i6/2-i9,i,i1,i6,i9,Md235,dotrewrite-d235-3)
	#call replace(p2.p5,`Q2'/2+i10+i2/2+i5/2-i7/2-i9,i,i10,i2,i5,i7,i9,Md235,dotrewrite-d235-4)
	#call replace(p5.p8,-`Q2'/2-i10+i11-i2/2-i5/2+i7/2+i9,i,i10,i11,i2,i5,i7,i9,Md235,dotrewrite-d235-5)
#endif
#break
#case Q6
* path: (0, 3, 5, 6)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 36
* path: (3, 5, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md235,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md235-4;
	if (count(Md235,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p6.p;
	.sort:momrewrite-Md235-3;
	if (count(Md235,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md235-2;
	if (count(Md235,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Md235-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd235()
	if (count(Md235,1)) id p5.p6 = i10 - i11;
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md235,dotrewrite-d235-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md235,dotrewrite-d235-2)
	#call replace(p2.p6,-i1/2-i2/2+i8/2+i9,i,i1,i2,i8,i9,Md235,dotrewrite-d235-3)
	#call replace(p3.p6,-`Q2'/2-i12-i3/2+i4/2,i,i12,i3,i4,Md235,dotrewrite-d235-4)
	#call replace(p2.p5,`Q2'/2+i10+i2/2+i5/2-i7/2-i9,i,i10,i2,i5,i7,i9,Md235,dotrewrite-d235-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 0, 4)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md235,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md235-4;
	if (count(Md235,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md235-3;
	if (count(Md235,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md235-2;
	if (count(Md235,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Md235-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd235()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md235,dotrewrite-d235-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md235,dotrewrite-d235-1)
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md235,dotrewrite-d235-2)
	#call replace(p2.p5,`Q2'/2+i10+i2/2+i5/2-i7/2-i9,i,i10,i2,i5,i7,i9,Md235,dotrewrite-d235-3)
#endif
#break
#endswitch
#break
*--#] d235 : 
*--#[ d222 :
#case Md222
#procedure SimpleDotd222()
if (count(Md222,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p1.p3^n? = i10^n;
	id p1.p5^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p2.p3^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md222,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md222-4;
	if (count(Md222,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md222-3;
	if (count(Md222,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + p2.p + p8.p;
	.sort:momrewrite-Md222-2;
	if (count(Md222,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md222-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd222()
	if (count(Md222,1)) id p3.p8 = i10 - i13;
	if (count(Md222,1)) id p5.p8 = i11 - i14;
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md222,dotrewrite-d222-2)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md222,dotrewrite-d222-3)
	#call replace(p3.p5,-i4/2-i5/2+i7/2-i9,i,i4,i5,i7,i9,Md222,dotrewrite-d222-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i12-i6/2,i,i1,i12,i6,Md222,dotrewrite-d222-5)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 26
* path: (2, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md222,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md222-4;
	if (count(Md222,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p1.p;
	.sort:momrewrite-Md222-3;
	if (count(Md222,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p6.p;
	.sort:momrewrite-Md222-2;
	if (count(Md222,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md222-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd222()
	if (count(Md222,1)) id p5.p6 = -i11 + i9;
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md222,dotrewrite-d222-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md222,dotrewrite-d222-2)
	#call replace(p3.p5,-i4/2-i5/2+i7/2-i9,i,i4,i5,i7,i9,Md222,dotrewrite-d222-3)
	#call replace(p2.p6,-i1/2+i12-i2/2+i8/2,i,i1,i12,i2,i8,Md222,dotrewrite-d222-4)
	#call replace(p3.p6,-`Q2'/2-i10-i3/2+i4/2,i,i10,i3,i4,Md222,dotrewrite-d222-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case Q5
* path: (0, 3, 5)
#case Q1
* path: (0, 3, 6, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 2, 3, 4)
#case 15
* path: (1, 2, 5)
#case 16
* path: (1, 6)
#case 13
* path: (1, 6, 3)
#case 15
* path: (1, 6, 5)
#case 22
* path: (2,)
#case 28
* path: (2, 1, 8)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md222,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p4.p;
	.sort:momrewrite-Md222-4;
	if (count(Md222,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md222-3;
	if (count(Md222,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md222-2;
	if (count(Md222,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md222-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd222()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md222,dotrewrite-d222-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md222,dotrewrite-d222-1)
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md222,dotrewrite-d222-2)
	#call replace(p3.p5,-i4/2-i5/2+i7/2-i9,i,i4,i5,i7,i9,Md222,dotrewrite-d222-3)
#endif
#break
#endswitch
#break
*--#] d222 : 
*--#[ d180 :
#case Md180
#procedure SimpleDotd180()
if (count(Md180,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md180,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - Q.p - p2.p;
	.sort:momrewrite-Md180-3;
	if (count(Md180,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p - p4.p;
	.sort:momrewrite-Md180-2;
	if (count(Md180,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md180-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd180()
	#call replace(Q.p2,-`Q2'/2-i2/2+i3/2,i,i2,i3,Md180,dotrewrite-d180-0)
	#call replace(p1.p4,`Q2'/2+i1/2+i4/2-i6/2-i8+i9,i,i1,i4,i6,i8,i9,Md180,dotrewrite-d180-1)
	#call replace(p1.p5,-`Q2'/2-i1/2+i10-i5/2+i7/2+i8,i,i1,i10,i5,i7,i8,Md180,dotrewrite-d180-2)
#endif
#break
#endswitch
#break
*--#] d180 : 
*--#[ d186 :
#case Md186
#procedure SimpleDotd186()
if (count(Md186,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p3^n? = i10^n;
	id p3.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md186,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = - p7.p - p1.p;
	.sort:momrewrite-Md186-3;
	if (count(Md186,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md186-2;
	if (count(Md186,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - Q.p - p1.p - p5.p - p6.p;
	.sort:momrewrite-Md186-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd186()
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md186,dotrewrite-d186-0)
	#call replace(Q.p6,-`Q2'+i8-i9,i,i8,i9,Md186,dotrewrite-d186-1)
	#call replace(p1.p6,-i1/2-i12-i14-i2/2+i7/2,i,i1,i12,i14,i2,i7,Md186,dotrewrite-d186-2)
	#call replace(p3.p6,`Q2'/2+i10-i11+i3/2-i4/2,i,i10,i11,i3,i4,Md186,dotrewrite-d186-3)
	#call replace(p5.p6,`Q2'/2+i2/2-i5/2-i6/2-i8,i,i2,i5,i6,i8,Md186,dotrewrite-d186-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case Q5
* path: (0, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 17
* path: (1, 2, 7)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 0, 4)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md186,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md186-3;
	if (count(Md186,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p2.p;
	.sort:momrewrite-Md186-2;
	if (count(Md186,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p - p5.p;
	.sort:momrewrite-Md186-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd186()
	#call replace(p1.p2,-i1/2-i2/2+i7/2,i,i1,i2,i7,Md186,dotrewrite-d186-0)
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md186,dotrewrite-d186-1)
	#call replace(p2.p5,`Q2'/2+i2/2+i5/2-i6/2-i8+i9,i,i2,i5,i6,i8,i9,Md186,dotrewrite-d186-2)
#endif
#break
#endswitch
#break
*--#] d186 : 
*--#[ d189 :
#case Md189
#procedure SimpleDotd189()
if (count(Md189,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p3^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 16
* path: (1, 0, 6)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md189,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - Q.p - p3.p;
	.sort:momrewrite-Md189-3;
	if (count(Md189,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md189-2;
	if (count(Md189,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - Q.p - p2.p - p5.p;
	.sort:momrewrite-Md189-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd189()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md189,dotrewrite-d189-0)
	#call replace(Q.p3,-`Q2'/2-i3/2+i4/2,i,i3,i4,Md189,dotrewrite-d189-1)
	#call replace(p2.p5,-`Q2'/2-i2/2-i5/2+i7/2-i8-i9,i,i2,i5,i7,i8,i9,Md189,dotrewrite-d189-2)
#endif
#break
#endswitch
#break
*--#] d189 : 
*--#[ d178 :
#case Md178
#procedure SimpleDotd178()
if (count(Md178,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p3.p4^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case 26
* path: (2, 6)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md178,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p2.p;
	.sort:momrewrite-Md178-3;
	if (count(Md178,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2} = + Q.p + p3.p + p6.p;
	.sort:momrewrite-Md178-2;
	if (count(Md178,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p - p6.p;
	.sort:momrewrite-Md178-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd178()
	#call replace(p2.p3,i2/2+i3/2-i5/2,i,i2,i3,i5,Md178,dotrewrite-d178-0)
	#call replace(Q.p6,-`Q2'+i8-i9,i,i8,i9,Md178,dotrewrite-d178-1)
	#call replace(p2.p6,-i12+i13-i2/2-i3/2+i5/2,i,i12,i13,i2,i3,i5,Md178,dotrewrite-d178-2)
	#call replace(p3.p6,`Q2'/2+i1/2-i3/2-i6/2-i8,i,i1,i3,i6,i8,Md178,dotrewrite-d178-3)
	#call replace(p4.p6,-`Q2'/2-i1/2-i11-i4/2+i7/2+i8,i,i1,i11,i4,i7,i8,Md178,dotrewrite-d178-4)
#endif
#break
#case 25
* path: (2, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md178,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p - p7.p;
	.sort:momrewrite-Md178-3;
	if (count(Md178,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p2.p + p5.p;
	.sort:momrewrite-Md178-2;
	if (count(Md178,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md178-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd178()
	if (count(Md178,1)) id Q.p5 = -i12 + i9;
	if (count(Md178,1)) id p4.p5 = i11 - i14;
	#call replace(p2.p5,-i2/2+i3/2-i5/2,i,i2,i3,i5,Md178,dotrewrite-d178-2)
	#call replace(p1.p4,-`Q2'/2-i1/2+i10-i4/2+i7/2+i8,i,i1,i10,i4,i7,i8,Md178,dotrewrite-d178-3)
	#call replace(p1.p5,`Q2'/2+i1/2-i13+i3/2-i6/2-i8+i9,i,i1,i13,i3,i6,i8,i9,Md178,dotrewrite-d178-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md178,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p3.p;
	.sort:momrewrite-Md178-3;
	if (count(Md178,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p4} = + p1.p - Q.p - p6.p;
	.sort:momrewrite-Md178-2;
	if (count(Md178,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2,p3} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md178-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd178()
	#call replace(Q.p6,-`Q2'+i8-i9,i,i8,i9,Md178,dotrewrite-d178-0)
	#call replace(Q.p7,`Q2'-i10-i8,i,i10,i8,Md178,dotrewrite-d178-1)
	#call replace(p2.p7,i12-i13-i14,i,i12,i13,i14,Md178,dotrewrite-d178-2)
	#call replace(p1.p6,-`Q2'/2+i1/2-i3/2+i6/2-i9,i,i1,i3,i6,i9,Md178,dotrewrite-d178-3)
	#call replace(p2.p6,-i12+i13-i2/2-i3/2+i5/2,i,i12,i13,i2,i3,i5,Md178,dotrewrite-d178-4)
	#call replace(p1.p7,`Q2'/2-i1/2-i10+i4/2-i7/2,i,i1,i10,i4,i7,Md178,dotrewrite-d178-5)
	#call replace(p6.p7,i11+i3/2+i4/2-i6/2-i7/2,i,i11,i3,i4,i6,i7,Md178,dotrewrite-d178-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md178,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p2.p;
	.sort:momrewrite-Md178-3;
	if (count(Md178,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p - p3.p;
	.sort:momrewrite-Md178-2;
	if (count(Md178,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md178-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd178()
	#call replace(p2.p3,i2/2+i3/2-i5/2,i,i2,i3,i5,Md178,dotrewrite-d178-0)
	#call replace(p1.p3,`Q2'/2+i1/2+i3/2-i6/2-i8+i9,i,i1,i3,i6,i8,i9,Md178,dotrewrite-d178-1)
	#call replace(p1.p4,-`Q2'/2-i1/2+i10-i4/2+i7/2+i8,i,i1,i10,i4,i7,i8,Md178,dotrewrite-d178-2)
#endif
#break
#endswitch
#break
*--#] d178 : 
*--#[ d173 :
#case Md173
#procedure SimpleDotd173()
if (count(Md173,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md173,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p3} = - p1.p - p7.p;
	.sort:momrewrite-Md173-3;
	if (count(Md173,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md173-2;
	if (count(Md173,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - Q.p - p1.p - p4.p - p7.p;
	.sort:momrewrite-Md173-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd173()
	if (count(Md173,1)) id Q.p7 = -i12 - i8;
	if (count(Md173,1)) id p3.p7 = -i11 - i13;
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md173,dotrewrite-d173-2)
	#call replace(p1.p7,-i1/2+i2/2-i7/2,i,i1,i2,i7,Md173,dotrewrite-d173-3)
	#call replace(p4.p7,-`Q2'/2-i10-i14-i2/2-i4/2+i6/2+i8,i,i10,i14,i2,i4,i6,i8,Md173,dotrewrite-d173-4)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md173,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md173-3;
	if (count(Md173,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p2.p;
	.sort:momrewrite-Md173-2;
	if (count(Md173,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - Q.p - p6.p;
	.sort:momrewrite-Md173-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd173()
	#call replace(p1.p2,-i1/2-i2/2+i7/2,i,i1,i2,i7,Md173,dotrewrite-d173-0)
	#call replace(Q.p6,-`Q2'-i10+i8,i,i10,i8,Md173,dotrewrite-d173-1)
	#call replace(p1.p6,-i1/2-i12-i14-i2/2+i7/2,i,i1,i12,i14,i2,i7,Md173,dotrewrite-d173-2)
	#call replace(p2.p6,-`Q2'/2-i10+i2/2-i4/2+i6/2,i,i10,i2,i4,i6,Md173,dotrewrite-d173-3)
	#call replace(p3.p6,i11-i3/2-i4/2+i5/2-i9,i,i11,i3,i4,i5,i9,Md173,dotrewrite-d173-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 17
* path: (1, 2, 7)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md173,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md173-3;
	if (count(Md173,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p2.p;
	.sort:momrewrite-Md173-2;
	if (count(Md173,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p - p4.p;
	.sort:momrewrite-Md173-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd173()
	#call replace(p1.p2,-i1/2-i2/2+i7/2,i,i1,i2,i7,Md173,dotrewrite-d173-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md173,dotrewrite-d173-1)
	#call replace(p2.p4,`Q2'/2+i10+i2/2+i4/2-i6/2-i8,i,i10,i2,i4,i6,i8,Md173,dotrewrite-d173-2)
#endif
#break
#endswitch
#break
*--#] d173 : 
*--#[ d187 :
#case Md187
#procedure SimpleDotd187()
if (count(Md187,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p3.p4^n? = i10^n;
	id Q.p2^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p3^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 2, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md187,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2} = + Q.p + p3.p + p6.p;
	.sort:momrewrite-Md187-3;
	if (count(Md187,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p3.p - p2.p;
	.sort:momrewrite-Md187-2;
	if (count(Md187,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p - p6.p;
	.sort:momrewrite-Md187-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd187()
	#call replace(p2.p6,-i11+i12-i13,i,i11,i12,i13,Md187,dotrewrite-d187-0)
	#call replace(p3.p6,`Q2'/2+i1/2-i3/2-i6/2-i8,i,i1,i3,i6,i8,Md187,dotrewrite-d187-1)
	#call replace(Q.p3,-`Q2'/2+i11+i13-i2/2-i3/2+i5/2,i,i11,i13,i2,i3,i5,Md187,dotrewrite-d187-2)
	#call replace(p4.p6,-`Q2'/2-i1/2-i10-i4/2+i7/2+i8,i,i1,i10,i4,i7,i8,Md187,dotrewrite-d187-3)
	#call replace(Q.p6,-`Q2'/2-i11-i13+i2/2+i3/2-i5/2+i8,i,i11,i13,i2,i3,i5,i8,Md187,dotrewrite-d187-4)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md187,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2} = + Q.p - p4.p - p7.p;
	.sort:momrewrite-Md187-3;
	if (count(Md187,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p3.p - p2.p;
	.sort:momrewrite-Md187-2;
	if (count(Md187,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p - p7.p;
	.sort:momrewrite-Md187-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd187()
	#call replace(Q.p7,`Q2'-i8-i9,i,i8,i9,Md187,dotrewrite-d187-0)
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md187,dotrewrite-d187-1)
	#call replace(p4.p7,`Q2'/2+i1/2-i4/2-i7/2-i8,i,i1,i4,i7,i8,Md187,dotrewrite-d187-2)
	#call replace(Q.p3,-`Q2'/2+i11+i13-i2/2-i3/2+i5/2,i,i11,i13,i2,i3,i5,Md187,dotrewrite-d187-3)
	#call replace(p3.p7,-`Q2'/2-i1/2-i10-i3/2+i6/2+i8,i,i1,i10,i3,i6,i8,Md187,dotrewrite-d187-4)
#endif
#break
#case 25
* path: (2, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md187,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p4} = + p2.p + p5.p - Q.p;
	.sort:momrewrite-Md187-3;
	if (count(Md187,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p2.p - p5.p;
	.sort:momrewrite-Md187-2;
	if (count(Md187,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md187-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd187()
	#call replace(p2.p5,i11+i13-i2,i,i11,i13,i2,Md187,dotrewrite-d187-0)
	#call replace(p4.p5,i10-i14+i9,i,i10,i14,i9,Md187,dotrewrite-d187-1)
	#call replace(Q.p5,`Q2'/2+i13-i2/2-i3/2+i5/2,i,i13,i2,i3,i5,Md187,dotrewrite-d187-2)
	#call replace(p1.p4,-`Q2'/2-i1/2-i4/2+i7/2+i8+i9,i,i1,i4,i7,i8,i9,Md187,dotrewrite-d187-3)
	#call replace(p1.p5,i1/2+i11-i12+i13-i2/2+i5/2-i6/2,i,i1,i11,i12,i13,i2,i5,i6,Md187,dotrewrite-d187-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md187,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p4} = + p1.p - Q.p - p6.p;
	.sort:momrewrite-Md187-3;
	if (count(Md187,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2,p3} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md187-2;
	if (count(Md187,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p - p6.p;
	.sort:momrewrite-Md187-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd187()
	#call replace(p2.p6,-i11+i12-i13,i,i11,i12,i13,Md187,dotrewrite-d187-0)
	#call replace(Q.p7,`Q2'-i8-i9,i,i8,i9,Md187,dotrewrite-d187-1)
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md187,dotrewrite-d187-2)
	#call replace(p1.p7,`Q2'/2-i1/2+i4/2-i7/2-i9,i,i1,i4,i7,i9,Md187,dotrewrite-d187-3)
	#call replace(p6.p7,i10+i3/2+i4/2-i6/2-i7/2,i,i10,i3,i4,i6,i7,Md187,dotrewrite-d187-4)
	#call replace(p1.p6,i1/2-i11-i13+i2/2-i5/2+i6/2,i,i1,i11,i13,i2,i5,i6,Md187,dotrewrite-d187-5)
	#call replace(Q.p6,-`Q2'/2-i11-i13+i2/2+i3/2-i5/2+i8,i,i11,i13,i2,i3,i5,i8,Md187,dotrewrite-d187-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md187,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p3.p - p2.p;
	.sort:momrewrite-Md187-3;
	if (count(Md187,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p - p3.p;
	.sort:momrewrite-Md187-2;
	if (count(Md187,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md187-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd187()
	#call replace(Q.p3,-`Q2'/2+i11+i13-i2/2-i3/2+i5/2,i,i11,i13,i2,i3,i5,Md187,dotrewrite-d187-0)
	#call replace(p1.p4,-`Q2'/2-i1/2-i4/2+i7/2+i8+i9,i,i1,i4,i7,i8,i9,Md187,dotrewrite-d187-1)
	#call replace(p1.p3,i1/2+i11+i13-i2/2+i5/2-i6/2-i8,i,i1,i11,i13,i2,i5,i6,i8,Md187,dotrewrite-d187-2)
#endif
#break
#endswitch
#break
*--#] d187 : 
*--#[ d306 :
#case Md306
#procedure SimpleDotd306()
if (count(Md306,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p5^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id Q.p2^n? = i13^n;
	id Q.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 7)
#case 17
* path: (1, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p + p2.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p8.p + p1.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p6.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-0)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md306,dotrewrite-d306-1)
	#call replace(p1.p7,-i1/2+i11+i2/2-i8/2,i,i1,i11,i2,i8,Md306,dotrewrite-d306-2)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-3)
	#call replace(Q.p7,`Q2'/2-i12-i14+i3/2-i4/2,i,i12,i14,i3,i4,Md306,dotrewrite-d306-4)
	#call replace(p5.p7,-i10-i11-i2/2+i3/2-i5/2-i7/2+i8/2,i,i10,i11,i2,i3,i5,i7,i8,Md306,dotrewrite-d306-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 22
* path: (2,)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p9.p - p6.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id p1.p9 = i10 + i11;
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-3)
	#call replace(p2.p6,i11-i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md306,dotrewrite-d306-4)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-5)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-6)
#endif
#break
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p1.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p9.p + p3.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p9.p - p5.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id p1.p9 = i10 + i11;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p5.p9,i5/2-i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-2)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-3)
	#call replace(p4.p9,`Q2'/2-i13+i2/2-i4/2-i9/2,i,i13,i2,i4,i9,Md306,dotrewrite-d306-4)
	#call replace(p1.p4,-i1/2-i10-i11+i12-i2/2+i8/2,i,i1,i10,i11,i12,i2,i8,Md306,dotrewrite-d306-5)
	#call replace(p4.p5,i11+i14+i2/2-i3/2-i5/2+i7/2-i8/2,i,i11,i14,i2,i3,i5,i7,i8,Md306,dotrewrite-d306-6)
#endif
#break
#case Q2
* path: (0, 3, 2)
#case 13
* path: (1, 2, 3)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p9.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p2.p6,i11-i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md306,dotrewrite-d306-3)
	#call replace(p1.p3,i1/2+i10+i11+i2/2-i8/2,i,i1,i10,i11,i2,i8,Md306,dotrewrite-d306-4)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-5)
	#call replace(p3.p6,i11-i5/2+i7/2-i8/2+i9/2,i,i11,i5,i7,i8,i9,Md306,dotrewrite-d306-6)
#endif
#break
#case 15
* path: (1, 5)
#case 19
* path: (1, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p9.p - p5.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id p1.p9 = i10 + i11;
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p5.p9,i5/2-i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-3)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-4)
	#call replace(p2.p5,-i11-i2/2+i3/2+i6/2-i7/2+i8/2-i9/2,i,i11,i2,i3,i6,i7,i8,i9,Md306,dotrewrite-d306-5)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p9.p - p5.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p2.p4,i13-i2/2-i3/2+i9/2,i,i13,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p1.p4,-i1/2-i10-i11+i12-i2/2+i8/2,i,i1,i10,i11,i12,i2,i8,Md306,dotrewrite-d306-3)
	#call replace(p2.p5,-i11-i2/2+i3/2+i6/2-i7/2+i8/2-i9/2,i,i11,i2,i3,i6,i7,i8,i9,Md306,dotrewrite-d306-4)
	#call replace(p4.p5,i11+i14+i2/2-i3/2-i5/2+i7/2-i8/2,i,i11,i14,i2,i3,i5,i7,i8,Md306,dotrewrite-d306-5)
#endif
#break
#case 48
* path: (4, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p9.p - p5.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p8.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id Q.p8 = i12 - i13;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p1.p8,i1/2-i2/2+i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-2)
	#call replace(p1.p4,-i1/2-i10-i11+i12-i2/2+i8/2,i,i1,i10,i11,i12,i2,i8,Md306,dotrewrite-d306-3)
	#call replace(p4.p5,i11+i14+i2/2-i3/2-i5/2+i7/2-i8/2,i,i11,i14,i2,i3,i5,i7,i8,Md306,dotrewrite-d306-4)
	#call replace(p4.p8,-i1/2-i10-i11+i12-i13+i3/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i3,i8,i9,Md306,dotrewrite-d306-5)
	#call replace(p5.p8,i10+i11+i2/2-i3/2-i6/2+i7/2-i8/2+i9/2,i,i10,i11,i2,i3,i6,i7,i8,i9,Md306,dotrewrite-d306-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p + p2.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p8.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p9.p - p6.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p8.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id Q.p8 = i12 - i13;
	if (count(Md306,1)) id p1.p9 = i10 + i11;
	#call replace(p1.p8,i1/2-i2/2+i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md306,dotrewrite-d306-3)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-4)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-5)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-6)
	#call replace(p8.p9,i10+i11+i2/2-i3/2+i9/2,i,i10,i11,i2,i3,i9,Md306,dotrewrite-d306-7)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p9.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p8.p + p7.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id p1.p9 = i10 + i11;
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p1.p7,-i1/2+i11+i2/2-i8/2,i,i1,i11,i2,i8,Md306,dotrewrite-d306-3)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-4)
	#call replace(Q.p7,`Q2'/2-i12-i14+i3/2-i4/2,i,i12,i14,i3,i4,Md306,dotrewrite-d306-5)
	#call replace(p2.p7,-i1/2+i11+i2/2-i6/2+i7/2,i,i1,i11,i2,i6,i7,Md306,dotrewrite-d306-6)
	#call replace(p7.p9,-i10-i11-i2/2+i3/2-i5/2+i6/2,i,i10,i11,i2,i3,i5,i6,Md306,dotrewrite-d306-7)
#endif
#break
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5,p6} = + p2.p + p8.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p9.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p9.p - p6.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p8.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id Q.p8 = i12 - i13;
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-1)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md306,dotrewrite-d306-2)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-3)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-4)
	#call replace(p2.p6,i11-i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md306,dotrewrite-d306-5)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-6)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-7)
	#call replace(p8.p9,i10+i11+i2/2-i3/2+i9/2,i,i10,i11,i2,i3,i9,Md306,dotrewrite-d306-8)
#endif
#break
#case Q3
* path: (0, 3)
#case Q3
* path: (0, 4, 3)
#case 13
* path: (1, 4, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p1.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p - p9.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p9.p - p5.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id p1.p9 = i10 + i11;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p3.p9,-i2/2+i3/2+i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p5.p9,i5/2-i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-3)
	#call replace(Q.p9,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md306,dotrewrite-d306-4)
	#call replace(p1.p3,i1/2+i10+i11+i2/2-i8/2,i,i1,i10,i11,i2,i8,Md306,dotrewrite-d306-5)
	#call replace(p3.p5,-i11-i2/2+i3/2+i5/2-i7/2+i8/2,i,i11,i2,i3,i5,i7,i8,Md306,dotrewrite-d306-6)
#endif
#break
#case Q8
* path: (0, 3, 2, 8)
#case 38
* path: (3, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p9.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5,p6} = + p2.p + p8.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p8.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	if (count(Md306,1)) id Q.p8 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-3)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md306,dotrewrite-d306-4)
	#call replace(p2.p6,i11-i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md306,dotrewrite-d306-5)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-6)
	#call replace(p3.p6,i11-i5/2+i7/2-i8/2+i9/2,i,i11,i5,i7,i8,i9,Md306,dotrewrite-d306-7)
	#call replace(p3.p8,i1/2+i10+i11-i3/2-i8/2+i9/2,i,i1,i10,i11,i3,i8,i9,Md306,dotrewrite-d306-8)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p9.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p8.p + p7.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p2.p4,i13-i2/2-i3/2+i9/2,i,i13,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p1.p7,-i1/2+i11+i2/2-i8/2,i,i1,i11,i2,i8,Md306,dotrewrite-d306-3)
	#call replace(Q.p7,`Q2'/2-i12-i14+i3/2-i4/2,i,i12,i14,i3,i4,Md306,dotrewrite-d306-4)
	#call replace(p2.p7,-i1/2+i11+i2/2-i6/2+i7/2,i,i1,i11,i2,i6,i7,Md306,dotrewrite-d306-5)
	#call replace(p1.p4,-i1/2-i10-i11+i12-i2/2+i8/2,i,i1,i10,i11,i12,i2,i8,Md306,dotrewrite-d306-6)
	#call replace(p4.p7,`Q2'/2+i1/2+i10-i12-i14-i4/2+i5/2-i7/2,i,i1,i10,i12,i14,i4,i5,i7,Md306,dotrewrite-d306-7)
#endif
#break
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p9.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p8.p + p7.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md306,dotrewrite-d306-1)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Md306,dotrewrite-d306-2)
	#call replace(p1.p7,-i1/2+i11+i2/2-i8/2,i,i1,i11,i2,i8,Md306,dotrewrite-d306-3)
	#call replace(p1.p3,i1/2+i10+i11+i2/2-i8/2,i,i1,i10,i11,i2,i8,Md306,dotrewrite-d306-4)
	#call replace(Q.p7,`Q2'/2-i12-i14+i3/2-i4/2,i,i12,i14,i3,i4,Md306,dotrewrite-d306-5)
	#call replace(p2.p7,-i1/2+i11+i2/2-i6/2+i7/2,i,i1,i11,i2,i6,i7,Md306,dotrewrite-d306-6)
	#call replace(p3.p7,-i1/2-i10+i3/2-i5/2+i7/2,i,i1,i10,i3,i5,i7,Md306,dotrewrite-d306-7)
#endif
#break
#default
#case 16
* path: (1, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md306,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md306-5;
	if (count(Md306,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p + p2.p;
	.sort:momrewrite-Md306-4;
	if (count(Md306,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p6.p;
	.sort:momrewrite-Md306-3;
	if (count(Md306,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md306-2;
	if (count(Md306,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p6.p;
	.sort:momrewrite-Md306-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd306()
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md306,dotrewrite-d306-0)
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md306,dotrewrite-d306-1)
	#call replace(p2.p6,i11-i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md306,dotrewrite-d306-2)
	#call replace(Q.p6,`Q2'/2-i13-i14+i3/2-i4/2,i,i13,i14,i3,i4,Md306,dotrewrite-d306-3)
	#call replace(p2.p5,-i11-i2/2+i3/2+i6/2-i7/2+i8/2-i9/2,i,i11,i2,i3,i6,i7,i8,i9,Md306,dotrewrite-d306-4)
#endif
#break
#endswitch
#break
*--#] d306 : 
*--#[ d378 :
#case Md378
#procedure SimpleDotd378()
if (count(Md378,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id Q.p9^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p9^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 1, 2, 9)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p2.p + p9.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p1.p2 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-1)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-2)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-3)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-4)
	#call replace(p1.p6,i10-i6/2-i7/2+i8/2,i,i10,i6,i7,i8,Md378,dotrewrite-d378-5)
	#call replace(p2.p6,i14+i5/2-i6/2-i9/2,i,i14,i5,i6,i9,Md378,dotrewrite-d378-6)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 3, 2)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 23
* path: (2, 3)
#case 37
* path: (3, 2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p3.p - p2.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p1.p2 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-2)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-3)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-4)
	#call replace(p1.p6,i10-i6/2-i7/2+i8/2,i,i10,i6,i7,i8,Md378,dotrewrite-d378-5)
	#call replace(p2.p6,i14+i5/2-i6/2-i9/2,i,i14,i5,i6,i9,Md378,dotrewrite-d378-6)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p9.p - p5.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p3.p - p2.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p1.p2 = i12 - i13;
	if (count(Md378,1)) id Q.p5 = -i10 + i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-3)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-4)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-5)
	#call replace(p3.p5,-i14-i2/2+i3/2+i9/2,i,i14,i2,i3,i9,Md378,dotrewrite-d378-6)
	#call replace(p1.p5,-i10+i13+i6/2+i7/2-i8/2,i,i10,i13,i6,i7,i8,Md378,dotrewrite-d378-7)
	#call replace(p2.p5,-i14-i2/2+i3/2-i5/2+i6/2,i,i14,i2,i3,i5,i6,Md378,dotrewrite-d378-8)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p2.p + p9.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p9.p - p5.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p1.p2 = i12 - i13;
	if (count(Md378,1)) id Q.p5 = -i10 + i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-2)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-3)
	#call replace(p5.p9,i5/2-i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-4)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-5)
	#call replace(p1.p5,-i10+i13+i6/2+i7/2-i8/2,i,i10,i13,i6,i7,i8,Md378,dotrewrite-d378-6)
	#call replace(p2.p5,-i14-i2/2+i3/2-i5/2+i6/2,i,i14,i2,i3,i5,i6,Md378,dotrewrite-d378-7)
#endif
#break
#case 27
* path: (2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p9} = + Q.p - p7.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p2.p + p9.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p7.p + p8.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p7.p9 = i11 - i13;
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md378,dotrewrite-d378-1)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md378,dotrewrite-d378-2)
	#call replace(p2.p9,-i2/2+i3/2-i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-3)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-4)
	#call replace(Q.p8,-`Q2'/2+i1/2+i10-i7/2,i,i1,i10,i7,Md378,dotrewrite-d378-5)
	#call replace(p8.p9,-i11+i13-i5/2+i6/2+i9/2,i,i11,i13,i5,i6,i9,Md378,dotrewrite-d378-6)
	#call replace(p2.p7,`Q2'/2-i11-i12+i13+i3/2-i4/2,i,i11,i12,i13,i3,i4,Md378,dotrewrite-d378-7)
	#call replace(p2.p8,-`Q2'/2+i11+i12-i13+i14-i3/2+i4/2+i5/2-i6/2-i9/2,i,i11,i12,i13,i14,i3,i4,i5,i6,i9,Md378,dotrewrite-d378-8)
#endif
#break
#case 16
* path: (1, 5, 6)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p + p3.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id Q.p5 = -i10 + i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-2)
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-3)
	#call replace(p3.p5,-i14-i2/2+i3/2+i9/2,i,i14,i2,i3,i9,Md378,dotrewrite-d378-4)
	#call replace(p1.p6,i10-i6/2-i7/2+i8/2,i,i10,i6,i7,i8,Md378,dotrewrite-d378-5)
	#call replace(p1.p5,-i10+i13+i6/2+i7/2-i8/2,i,i10,i13,i6,i7,i8,Md378,dotrewrite-d378-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p7.p + p8.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p9.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-1)
	#call replace(p3.p9,-i2/2+i3/2+i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-2)
	#call replace(Q.p8,-`Q2'/2+i1/2+i10-i7/2,i,i1,i10,i7,Md378,dotrewrite-d378-3)
	#call replace(p1.p8,-`Q2'/2+i1/2+i10-i6/2+i8/2,i,i1,i10,i6,i8,Md378,dotrewrite-d378-4)
	#call replace(p3.p8,-`Q2'/2+i12+i14-i3/2+i4/2,i,i12,i14,i3,i4,Md378,dotrewrite-d378-5)
	#call replace(p8.p9,-i11+i13-i5/2+i6/2+i9/2,i,i11,i13,i5,i6,i9,Md378,dotrewrite-d378-6)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 19
* path: (1, 5, 9)
#case 35
* path: (3, 4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p9.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p9.p - p5.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id Q.p5 = -i10 + i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-2)
	#call replace(p3.p9,-i2/2+i3/2+i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-3)
	#call replace(p5.p9,i5/2-i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-4)
	#call replace(p3.p5,-i14-i2/2+i3/2+i9/2,i,i14,i2,i3,i9,Md378,dotrewrite-d378-5)
	#call replace(p1.p5,-i10+i13+i6/2+i7/2-i8/2,i,i10,i13,i6,i7,i8,Md378,dotrewrite-d378-6)
#endif
#break
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p9} = - p7.p + Q.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p8.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p3.p - p2.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-0)
	#call replace(p2.p3,i2/2+i3/2-i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-1)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md378,dotrewrite-d378-2)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-3)
	#call replace(p2.p6,i14+i5/2-i6/2-i9/2,i,i14,i5,i6,i9,Md378,dotrewrite-d378-4)
	#call replace(Q.p8,-`Q2'/2+i1/2+i10-i7/2,i,i1,i10,i7,Md378,dotrewrite-d378-5)
	#call replace(p3.p8,-`Q2'/2+i12+i14-i3/2+i4/2,i,i12,i14,i3,i4,Md378,dotrewrite-d378-6)
	#call replace(p2.p8,-`Q2'/2+i11+i12-i13+i14-i3/2+i4/2+i5/2-i6/2-i9/2,i,i11,i12,i13,i14,i3,i4,i5,i6,i9,Md378,dotrewrite-d378-7)
#endif
#break
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p9.p + p2.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p1.p2 = i12 - i13;
	if (count(Md378,1)) id Q.p5 = -i10 + i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-2)
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-3)
	#call replace(Q.p2,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md378,dotrewrite-d378-4)
	#call replace(p1.p6,i10-i6/2-i7/2+i8/2,i,i10,i6,i7,i8,Md378,dotrewrite-d378-5)
	#call replace(p2.p6,i14+i5/2-i6/2-i9/2,i,i14,i5,i6,i9,Md378,dotrewrite-d378-6)
	#call replace(p1.p5,-i10+i13+i6/2+i7/2-i8/2,i,i10,i13,i6,i7,i8,Md378,dotrewrite-d378-7)
	#call replace(p2.p5,-i14-i2/2+i3/2-i5/2+i6/2,i,i14,i2,i3,i5,i6,Md378,dotrewrite-d378-8)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p + p3.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + Q.p - p4.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	if (count(Md378,1)) id p4.p6 = i10 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md378,dotrewrite-d378-2)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-3)
	#call replace(p1.p4,`Q2'/2+i1/2-i12-i7/2,i,i1,i12,i7,Md378,dotrewrite-d378-4)
	#call replace(p1.p6,i10-i6/2-i7/2+i8/2,i,i10,i6,i7,i8,Md378,dotrewrite-d378-5)
	#call replace(p4.p9,i11+i2/2-i3/2-i9/2,i,i11,i2,i3,i9,Md378,dotrewrite-d378-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 4, 3)
#case Q3
* path: (0, 3)
#case Q9
* path: (0, 3, 9)
#case Q6
* path: (0, 3, 9, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 4, 3)
#case 17
* path: (1, 7)
#case 16
* path: (1, 8, 6)
#case 33
* path: (3,)
#case 39
* path: (3, 9)
#case 36
* path: (3, 9, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md378,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md378-5;
	if (count(Md378,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p - p9.p;
	.sort:momrewrite-Md378-4;
	if (count(Md378,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md378-3;
	if (count(Md378,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md378-2;
	if (count(Md378,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md378-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd378()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md378,dotrewrite-d378-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md378,dotrewrite-d378-1)
	#call replace(p3.p9,-i2/2+i3/2+i9/2,i,i2,i3,i9,Md378,dotrewrite-d378-2)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md378,dotrewrite-d378-3)
	#call replace(p1.p6,i10-i6/2-i7/2+i8/2,i,i10,i6,i7,i8,Md378,dotrewrite-d378-4)
#endif
#break
#endswitch
#break
*--#] d378 : 
*--#[ d308 :
#case Md308
#procedure SimpleDotd308()
if (count(Md308,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 16
* path: (1, 5, 6)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 25
* path: (2, 5)
#case 26
* path: (2, 5, 6)
#case 55
* path: (5,)
#case 57
* path: (5, 1, 7)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p9.p + p8.p + p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p6.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-1)
	#call replace(p1.p6,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(Q.p5,i1/2-i10+i3/2-i4/2-i7/2,i,i1,i10,i3,i4,i7,Md308,dotrewrite-d308-3)
	#call replace(p1.p5,-`Q2'/2+i1/2-i12+i13+i7/2,i,i1,i12,i13,i7,Md308,dotrewrite-d308-4)
	#call replace(p2.p5,-`Q2'/2+i13-i2/2+i4/2-i5/2+i7/2,i,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
#endif
#break
#case 79
* path: (7, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p9.p + p8.p + p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = + Q.p - p7.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	if (count(Md308,1)) id p2.p7 = i10 - i12;
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md308,dotrewrite-d308-1)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-3)
	#call replace(Q.p9,i1/2-i10+i11+i3/2-i4/2-i7/2,i,i1,i10,i11,i3,i4,i7,Md308,dotrewrite-d308-4)
	#call replace(p2.p9,-`Q2'/2+i13+i14-i2/2+i4/2-i5/2+i7/2,i,i13,i14,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p7.p9,`Q2'/2-i10+i12-i13+i3/2-i4/2+i6/2-i7/2-i8/2,i,i10,i12,i13,i3,i4,i6,i7,i8,Md308,dotrewrite-d308-6)
#endif
#break
#case Q9
* path: (0, 1, 2, 9)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p9.p + p8.p + p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-1)
	#call replace(p1.p6,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(Q.p9,i1/2-i10+i11+i3/2-i4/2-i7/2,i,i1,i10,i11,i3,i4,i7,Md308,dotrewrite-d308-3)
	#call replace(p1.p9,-`Q2'/2+i1/2+i11-i12+i13-i6/2+i8/2,i,i1,i11,i12,i13,i6,i8,Md308,dotrewrite-d308-4)
	#call replace(p2.p9,-`Q2'/2+i13+i14-i2/2+i4/2-i5/2+i7/2,i,i13,i14,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#case 46
* path: (4, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p6.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p6} = + p1.p - p4.p - p5.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i13-i7/2,i,i1,i13,i7,Md308,dotrewrite-d308-3)
	#call replace(p1.p6,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md308,dotrewrite-d308-4)
	#call replace(Q.p5,i1/2-i10+i3/2-i4/2-i7/2,i,i1,i10,i3,i4,i7,Md308,dotrewrite-d308-5)
	#call replace(p1.p5,-`Q2'/2+i1/2-i12+i13+i7/2,i,i1,i12,i13,i7,Md308,dotrewrite-d308-6)
	#call replace(p4.p5,i1/2-i12+i2/2-i4/2-i5/2,i,i1,i12,i2,i4,i5,Md308,dotrewrite-d308-7)
	#call replace(p4.p6,i11-i14+i5/2-i7/2+i8/2-i9/2,i,i11,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-8)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = - p7.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p6.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p + p3.p - p2.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p6.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-0)
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-1)
	#call replace(Q.p5,i1/2-i10+i3/2-i4/2-i7/2,i,i1,i10,i3,i4,i7,Md308,dotrewrite-d308-2)
	#call replace(p3.p6,i14-i5/2+i7/2-i8/2+i9/2,i,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-3)
	#call replace(p2.p5,-`Q2'/2+i13-i2/2+i4/2-i5/2+i7/2,i,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-4)
	#call replace(p3.p5,-i10+i12-i2/2+i3/2+i5/2-i7/2,i,i10,i12,i2,i3,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p2.p3,-`Q2'/2+i10-i12+i13+i2/2+i4/2-i5/2+i7/2,i,i10,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-6)
#endif
#break
#case 49
* path: (4, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = - p7.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p + p6.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p + p3.p - p2.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md308,dotrewrite-d308-0)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-1)
	#call replace(p4.p6,i11-i14+i5/2-i7/2+i8/2-i9/2,i,i11,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-2)
	#call replace(Q.p9,i1/2-i10+i11+i3/2-i4/2-i7/2,i,i1,i10,i11,i3,i4,i7,Md308,dotrewrite-d308-3)
	#call replace(p2.p4,`Q2'/2+i12-i13-i2/2-i4/2+i5/2-i7/2,i,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-4)
	#call replace(p2.p9,-`Q2'/2+i13+i14-i2/2+i4/2-i5/2+i7/2,i,i13,i14,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p4.p9,i1/2+i11-i12-i14+i2/2-i4/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i14,i2,i4,i7,i8,i9,Md308,dotrewrite-d308-6)
#endif
#break
#case Q7
* path: (0, 3, 8, 7)
#case Q8
* path: (0, 7, 8)
#case 37
* path: (3, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = + Q.p - p7.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p2} = + p7.p - p8.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p - p8.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	if (count(Md308,1)) id p2.p7 = i10 - i12;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md308,dotrewrite-d308-2)
	#call replace(p2.p8,i10-i12-i14,i,i10,i12,i14,Md308,dotrewrite-d308-3)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-4)
	#call replace(p3.p7,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md308,dotrewrite-d308-5)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i7/2,i,i1,i11,i7,Md308,dotrewrite-d308-6)
	#call replace(p2.p3,-`Q2'/2+i10-i12+i13+i2/2+i4/2-i5/2+i7/2,i,i10,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-7)
	#call replace(p3.p8,`Q2'/2-i13-i14+i3/2-i4/2+i5/2-i7/2+i8/2-i9/2,i,i13,i14,i3,i4,i5,i7,i8,i9,Md308,dotrewrite-d308-8)
#endif
#break
#case 28
* path: (2, 8)
#case 58
* path: (5, 2, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = - p7.p + Q.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p9.p + p8.p + p2.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p8.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p6.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(p5.p6,-i5/2-i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-0)
	#call replace(p2.p8,i10-i12-i14,i,i10,i12,i14,Md308,dotrewrite-d308-1)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i7/2,i,i1,i11,i7,Md308,dotrewrite-d308-3)
	#call replace(Q.p5,i1/2-i10+i3/2-i4/2-i7/2,i,i1,i10,i3,i4,i7,Md308,dotrewrite-d308-4)
	#call replace(p2.p5,-`Q2'/2+i13-i2/2+i4/2-i5/2+i7/2,i,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p5.p8,`Q2'/2-i10+i12-i13+i3/2-i4/2+i5/2+i6/2-i7-i9/2,i,i10,i12,i13,i3,i4,i5,i6,i7,i9,Md308,dotrewrite-d308-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p - p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = + Q.p - p7.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	if (count(Md308,1)) id p2.p7 = i10 - i12;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md308,dotrewrite-d308-2)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-3)
	#call replace(p3.p7,`Q2'/2-i13+i3/2-i4/2,i,i13,i3,i4,Md308,dotrewrite-d308-4)
	#call replace(p3.p6,i14-i5/2+i7/2-i8/2+i9/2,i,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-5)
	#call replace(p2.p3,-`Q2'/2+i10-i12+i13+i2/2+i4/2-i5/2+i7/2,i,i10,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p - p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i13-i7/2,i,i1,i13,i7,Md308,dotrewrite-d308-2)
	#call replace(p1.p6,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md308,dotrewrite-d308-3)
	#call replace(p4.p6,i11-i14+i5/2-i7/2+i8/2-i9/2,i,i11,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-4)
	#call replace(p2.p4,`Q2'/2+i12-i13-i2/2-i4/2+i5/2-i7/2,i,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
#endif
#break
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p9.p + p8.p + p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p2} = + p9.p - p5.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(p5.p9,i5/2-i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-1)
	#call replace(Q.p5,i1/2-i10+i3/2-i4/2-i7/2,i,i1,i10,i3,i4,i7,Md308,dotrewrite-d308-2)
	#call replace(p1.p5,-`Q2'/2+i1/2-i12+i13+i7/2,i,i1,i12,i13,i7,Md308,dotrewrite-d308-3)
	#call replace(p2.p5,-`Q2'/2+i13-i2/2+i4/2-i5/2+i7/2,i,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-4)
	#call replace(Q.p9,i1/2-i10+i11+i3/2-i4/2-i7/2,i,i1,i10,i11,i3,i4,i7,Md308,dotrewrite-d308-5)
	#call replace(p1.p9,-`Q2'/2+i1/2+i11-i12+i13-i6/2+i8/2,i,i1,i11,i12,i13,i6,i8,Md308,dotrewrite-d308-6)
	#call replace(p2.p9,-`Q2'/2+i13+i14-i2/2+i4/2-i5/2+i7/2,i,i13,i14,i2,i4,i5,i7,Md308,dotrewrite-d308-7)
#endif
#break
#case 48
* path: (4, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = - p7.p + Q.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p - p2.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p8.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md308,dotrewrite-d308-0)
	#call replace(p2.p8,i10-i12-i14,i,i10,i12,i14,Md308,dotrewrite-d308-1)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i7/2,i,i1,i11,i7,Md308,dotrewrite-d308-3)
	#call replace(p4.p6,i11-i14+i5/2-i7/2+i8/2-i9/2,i,i11,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-4)
	#call replace(p2.p4,`Q2'/2+i12-i13-i2/2-i4/2+i5/2-i7/2,i,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p4.p8,-i1/2-i11+i13+i14-i3/2+i4/2-i5/2+i7-i8/2+i9/2,i,i1,i11,i13,i14,i3,i4,i5,i7,i8,i9,Md308,dotrewrite-d308-6)
#endif
#break
#case Q9
* path: (0, 3, 9)
#case 39
* path: (3, 9)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p6} = - p9.p - p8.p + p3.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-2)
	#call replace(p1.p6,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md308,dotrewrite-d308-3)
	#call replace(p3.p6,i14-i5/2+i7/2-i8/2+i9/2,i,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-4)
	#call replace(Q.p9,i1/2-i10+i11+i3/2-i4/2-i7/2,i,i1,i10,i11,i3,i4,i7,Md308,dotrewrite-d308-5)
	#call replace(p1.p9,-`Q2'/2+i1/2+i11-i12+i13-i6/2+i8/2,i,i1,i11,i12,i13,i6,i8,Md308,dotrewrite-d308-6)
	#call replace(p3.p9,-i10+i12+i14-i2/2+i3/2-i8/2+i9/2,i,i10,i12,i14,i2,i3,i8,i9,Md308,dotrewrite-d308-7)
#endif
#break
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = - p7.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p6.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p8.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p + p8.p + p9.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(p2.p8,i10-i12-i14,i,i10,i12,i14,Md308,dotrewrite-d308-0)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-1)
	#call replace(p6.p9,-i5/2+i6/2+i9/2,i,i5,i6,i9,Md308,dotrewrite-d308-2)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i7/2,i,i1,i11,i7,Md308,dotrewrite-d308-3)
	#call replace(Q.p9,i1/2-i10+i11+i3/2-i4/2-i7/2,i,i1,i10,i11,i3,i4,i7,Md308,dotrewrite-d308-4)
	#call replace(p2.p9,-`Q2'/2+i13+i14-i2/2+i4/2-i5/2+i7/2,i,i13,i14,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p8.p9,`Q2'/2-i10+i12-i13+i3/2-i4/2+i5/2-i7/2-i8/2-i9/2,i,i10,i12,i13,i3,i4,i5,i7,i8,i9,Md308,dotrewrite-d308-6)
#endif
#break
#case Q6
* path: (0, 3, 8, 6)
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3} = - p7.p + Q.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p8.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p - p8.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-0)
	#call replace(p2.p8,i10-i12-i14,i,i10,i12,i14,Md308,dotrewrite-d308-1)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i7/2,i,i1,i11,i7,Md308,dotrewrite-d308-3)
	#call replace(p3.p6,i14-i5/2+i7/2-i8/2+i9/2,i,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-4)
	#call replace(p2.p3,-`Q2'/2+i10-i12+i13+i2/2+i4/2-i5/2+i7/2,i,i10,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p3.p8,`Q2'/2-i13-i14+i3/2-i4/2+i5/2-i7/2+i8/2-i9/2,i,i13,i14,i3,i4,i5,i7,i8,i9,Md308,dotrewrite-d308-6)
#endif
#break
#case Q8
* path: (0, 3, 8)
#case 18
* path: (1, 2, 8)
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p2} = - p8.p + p7.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p2.p - p8.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(p2.p8,i10-i12-i14,i,i10,i12,i14,Md308,dotrewrite-d308-2)
	#call replace(Q.p8,`Q2'/2-i1/2-i11+i7/2,i,i1,i11,i7,Md308,dotrewrite-d308-3)
	#call replace(p1.p8,`Q2'/2-i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md308,dotrewrite-d308-4)
	#call replace(p2.p3,-`Q2'/2+i10-i12+i13+i2/2+i4/2-i5/2+i7/2,i,i10,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-5)
	#call replace(p3.p8,`Q2'/2-i13-i14+i3/2-i4/2+i5/2-i7/2+i8/2-i9/2,i,i13,i14,i3,i4,i5,i7,i8,i9,Md308,dotrewrite-d308-6)
#endif
#break
#default
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case 13
* path: (1, 2, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md308,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p9.p;
	.sort:momrewrite-Md308-5;
	if (count(Md308,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p - p2.p;
	.sort:momrewrite-Md308-4;
	if (count(Md308,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md308-3;
	if (count(Md308,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md308-2;
	if (count(Md308,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md308-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd308()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md308,dotrewrite-d308-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md308,dotrewrite-d308-1)
	#call replace(p1.p6,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md308,dotrewrite-d308-2)
	#call replace(p3.p6,i14-i5/2+i7/2-i8/2+i9/2,i,i14,i5,i7,i8,i9,Md308,dotrewrite-d308-3)
	#call replace(p2.p3,-`Q2'/2+i10-i12+i13+i2/2+i4/2-i5/2+i7/2,i,i10,i12,i13,i2,i4,i5,i7,Md308,dotrewrite-d308-4)
#endif
#break
#endswitch
#break
*--#] d308 : 
*--#[ d281 :
#case Md281
#procedure SimpleDotd281()
if (count(Md281,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p1.p4^n? = i9^n;
	id p1.p5^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p8.p - p4.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p - p8.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	if (count(Md281,1)) id Q.p8 = i13 + i14;
	if (count(Md281,1)) id p1.p8 = i10 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md281,dotrewrite-d281-2)
	#call replace(p1.p2,i1+i11+i9,i,i1,i11,i9,Md281,dotrewrite-d281-3)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md281,dotrewrite-d281-4)
	#call replace(p2.p4,-i1/2-i11+i2/2+i4/2-i6/2,i,i1,i11,i2,i4,i6,Md281,dotrewrite-d281-5)
	#call replace(p2.p8,-i1/2+i10-i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Md281,dotrewrite-d281-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p7.p + p8.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	if (count(Md281,1)) id p1.p7 = -i10 + i11;
	if (count(Md281,1)) id Q.p8 = i13 + i14;
	if (count(Md281,1)) id p1.p8 = i10 + i9;
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md281,dotrewrite-d281-3)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md281,dotrewrite-d281-4)
	#call replace(Q.p7,`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md281,dotrewrite-d281-5)
	#call replace(p7.p8,-i1/2-i11+i2/2-i7/2-i8/2-i9,i,i1,i11,i2,i7,i8,i9,Md281,dotrewrite-d281-6)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case Q5
* path: (0, 2, 7, 5)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = - p5.p + p8.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p1.p - p7.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	if (count(Md281,1)) id p1.p7 = -i10 + i11;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md281,dotrewrite-d281-1)
	#call replace(p1.p2,i1+i11+i9,i,i1,i11,i9,Md281,dotrewrite-d281-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md281,dotrewrite-d281-3)
	#call replace(p2.p5,i10-i4/2+i6/2-i7/2+i8/2,i,i10,i4,i6,i7,i8,Md281,dotrewrite-d281-4)
	#call replace(Q.p7,`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md281,dotrewrite-d281-5)
	#call replace(p2.p7,-i1/2-i10+i2/2+i7/2-i8/2-i9,i,i1,i10,i2,i7,i8,i9,Md281,dotrewrite-d281-6)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p2.p - p1.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md281,dotrewrite-d281-0)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md281,dotrewrite-d281-1)
	#call replace(p1.p3,-i1-i11+i12-i9,i,i1,i11,i12,i9,Md281,dotrewrite-d281-2)
	#call replace(p3.p4,i1/2+i11+i13-i2/2-i4/2+i6/2,i,i1,i11,i13,i2,i4,i6,Md281,dotrewrite-d281-3)
	#call replace(p3.p5,-i10+i14+i4/2-i6/2+i7/2-i8/2,i,i10,i14,i4,i6,i7,i8,Md281,dotrewrite-d281-4)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = - p5.p + p8.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p - p1.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	if (count(Md281,1)) id p1.p7 = -i10 + i11;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md281,dotrewrite-d281-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md281,dotrewrite-d281-2)
	#call replace(p1.p3,-i1-i11+i12-i9,i,i1,i11,i12,i9,Md281,dotrewrite-d281-3)
	#call replace(p3.p5,-i10+i14+i4/2-i6/2+i7/2-i8/2,i,i10,i14,i4,i6,i7,i8,Md281,dotrewrite-d281-4)
	#call replace(Q.p7,`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md281,dotrewrite-d281-5)
	#call replace(p3.p7,`Q2'/2+i1/2+i10-i12-i13-i14-i3/2-i7/2+i8/2+i9,i,i1,i10,i12,i13,i14,i3,i7,i8,i9,Md281,dotrewrite-d281-6)
#endif
#break
#case 47
* path: (4, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p + p7.p + p1.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	if (count(Md281,1)) id p1.p7 = -i10 + i11;
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md281,dotrewrite-d281-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md281,dotrewrite-d281-2)
	#call replace(Q.p7,`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md281,dotrewrite-d281-3)
	#call replace(p4.p7,-i1/2-i11+i2/2+i5/2-i6/2-i8/2-i9,i,i1,i11,i2,i5,i6,i8,i9,Md281,dotrewrite-d281-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 15
* path: (1, 4, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p5.p + p7.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p + p2.p - p1.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md281,dotrewrite-d281-0)
	#call replace(p1.p2,i1+i11+i9,i,i1,i11,i9,Md281,dotrewrite-d281-1)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md281,dotrewrite-d281-2)
	#call replace(p2.p4,-i1/2-i11+i2/2+i4/2-i6/2,i,i1,i11,i2,i4,i6,Md281,dotrewrite-d281-3)
	#call replace(p2.p5,i10-i4/2+i6/2-i7/2+i8/2,i,i10,i4,i6,i7,i8,Md281,dotrewrite-d281-4)
#endif
#break
#default
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md281,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md281-4;
	if (count(Md281,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md281-3;
	if (count(Md281,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md281-2;
	if (count(Md281,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p4.p + p6.p;
	.sort:momrewrite-Md281-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd281()
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md281,dotrewrite-d281-0)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md281,dotrewrite-d281-1)
	#call replace(Q.p6,`Q2'/2-i12-i13+i2/2-i3/2,i,i12,i13,i2,i3,Md281,dotrewrite-d281-2)
	#call replace(p4.p6,-i1/2-i11+i2/2-i4/2-i6/2-i9,i,i1,i11,i2,i4,i6,i9,Md281,dotrewrite-d281-3)
#endif
#break
#endswitch
#break
*--#] d281 : 
*--#[ d221 :
#case Md221
#procedure SimpleDotd221()
if (count(Md221,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p4^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md221,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md221-4;
	if (count(Md221,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md221-3;
	if (count(Md221,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = + p4.p + p8.p;
	.sort:momrewrite-Md221-2;
	if (count(Md221,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md221-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd221()
	if (count(Md221,1)) id Q.p8 = i10 - i9;
	if (count(Md221,1)) id p2.p8 = -i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md221,dotrewrite-d221-2)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md221,dotrewrite-d221-3)
	#call replace(p4.p8,-i4/2+i5/2-i8/2,i,i4,i5,i8,Md221,dotrewrite-d221-4)
	#call replace(p1.p8,i10-i11-i5/2-i6/2+i7/2,i,i10,i11,i5,i6,i7,Md221,dotrewrite-d221-5)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#case 47
* path: (4, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md221,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md221-4;
	if (count(Md221,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md221-3;
	if (count(Md221,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p7.p;
	.sort:momrewrite-Md221-2;
	if (count(Md221,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md221-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd221()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md221,dotrewrite-d221-0)
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md221,dotrewrite-d221-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md221,dotrewrite-d221-2)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md221,dotrewrite-d221-3)
	#call replace(p2.p7,`Q2'/2-i12-i14+i2/2-i3/2,i,i12,i14,i2,i3,Md221,dotrewrite-d221-4)
	#call replace(p4.p7,-i11-i4/2-i5/2+i8/2+i9,i,i11,i4,i5,i8,i9,Md221,dotrewrite-d221-5)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md221,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p5.p;
	.sort:momrewrite-Md221-4;
	if (count(Md221,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md221-3;
	if (count(Md221,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md221-2;
	if (count(Md221,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = + p6.p - p7.p;
	.sort:momrewrite-Md221-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd221()
	if (count(Md221,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md221,dotrewrite-d221-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md221,dotrewrite-d221-2)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md221,dotrewrite-d221-3)
	#call replace(p2.p6,`Q2'/2-i12+i2/2-i3/2,i,i12,i2,i3,Md221,dotrewrite-d221-4)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md221,dotrewrite-d221-5)
	#call replace(p2.p7,`Q2'/2-i12-i14+i2/2-i3/2,i,i12,i14,i2,i3,Md221,dotrewrite-d221-6)
	#call replace(p4.p7,-i11-i4/2-i5/2+i8/2+i9,i,i11,i4,i5,i8,i9,Md221,dotrewrite-d221-7)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md221,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p5.p;
	.sort:momrewrite-Md221-4;
	if (count(Md221,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = - p7.p + p6.p;
	.sort:momrewrite-Md221-3;
	if (count(Md221,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md221-2;
	if (count(Md221,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md221-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd221()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md221,dotrewrite-d221-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md221,dotrewrite-d221-1)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md221,dotrewrite-d221-2)
	#call replace(p1.p7,`Q2'/2-i1/2-i10+i5/2-i7/2,i,i1,i10,i5,i7,Md221,dotrewrite-d221-3)
	#call replace(p2.p7,`Q2'/2-i12-i14+i2/2-i3/2,i,i12,i14,i2,i3,Md221,dotrewrite-d221-4)
	#call replace(p4.p7,-i11-i4/2-i5/2+i8/2+i9,i,i11,i4,i5,i8,i9,Md221,dotrewrite-d221-5)
#endif
#break
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md221,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md221-4;
	if (count(Md221,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md221-3;
	if (count(Md221,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md221-2;
	if (count(Md221,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md221-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd221()
	if (count(Md221,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md221,dotrewrite-d221-1)
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md221,dotrewrite-d221-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md221,dotrewrite-d221-3)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md221,dotrewrite-d221-4)
	#call replace(p2.p6,`Q2'/2-i12+i2/2-i3/2,i,i12,i2,i3,Md221,dotrewrite-d221-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 2, 1, 6)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 4, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 15
* path: (1, 4, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 0, 3)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md221,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md221-4;
	if (count(Md221,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md221-3;
	if (count(Md221,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md221-2;
	if (count(Md221,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md221-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd221()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md221,dotrewrite-d221-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md221,dotrewrite-d221-1)
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md221,dotrewrite-d221-2)
	#call replace(p1.p5,i10-i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md221,dotrewrite-d221-3)
#endif
#break
#endswitch
#break
*--#] d221 : 
*--#[ d280 :
#case Md280
#procedure SimpleDotd280()
if (count(Md280,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id Q.p2^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p + p7.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2} = + p5.p - p8.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	if (count(Md280,1)) id p2.p6 = i11 - i12;
	if (count(Md280,1)) id Q.p8 = i10 - i9;
	if (count(Md280,1)) id p2.p8 = -i13 + i14;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md280,dotrewrite-d280-3)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md280,dotrewrite-d280-4)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-5)
	#call replace(p6.p8,i11-i12-i13-i2/2+i3/2-i4/2+i5/2-i7/2,i,i11,i12,i13,i2,i3,i4,i5,i7,Md280,dotrewrite-d280-6)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2} = - p8.p + p5.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = + p6.p - p7.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p3.p - p7.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	if (count(Md280,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md280,dotrewrite-d280-1)
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md280,dotrewrite-d280-2)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md280,dotrewrite-d280-3)
	#call replace(p2.p3,i11-i12-i13-i2,i,i11,i12,i13,i2,Md280,dotrewrite-d280-4)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md280,dotrewrite-d280-5)
	#call replace(Q.p3,`Q2'/2-i1/2-i11+i6/2-i9,i,i1,i11,i6,i9,Md280,dotrewrite-d280-6)
	#call replace(p3.p6,-i13-i2/2+i3/2-i4/2+i6/2,i,i13,i2,i3,i4,i6,Md280,dotrewrite-d280-7)
	#call replace(p3.p7,-i13+i14-i2/2+i3/2+i7/2-i8/2,i,i13,i14,i2,i3,i7,i8,Md280,dotrewrite-d280-8)
#endif
#break
#case 47
* path: (4, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p6.p + Q.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p + p7.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p7.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-0)
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md280,dotrewrite-d280-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md280,dotrewrite-d280-2)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md280,dotrewrite-d280-3)
	#call replace(p4.p7,-i11+i12+i13+i2/2-i3/2-i5/2+i6/2+i8/2,i,i11,i12,i13,i2,i3,i5,i6,i8,Md280,dotrewrite-d280-4)
#endif
#break
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p6.p + Q.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p5.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = + p4.p + p8.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p3.p - p8.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	if (count(Md280,1)) id Q.p8 = i10 - i9;
	if (count(Md280,1)) id p2.p8 = -i13 + i14;
	#call replace(p4.p8,-i4/2+i5/2-i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-2)
	#call replace(p2.p3,i11-i12-i13-i2,i,i11,i12,i13,i2,Md280,dotrewrite-d280-3)
	#call replace(Q.p3,`Q2'/2-i1/2-i11+i6/2-i9,i,i1,i11,i6,i9,Md280,dotrewrite-d280-4)
	#call replace(p3.p4,-i11+i12+i2/2-i3/2-i4/2+i6/2,i,i11,i12,i2,i3,i4,i6,Md280,dotrewrite-d280-5)
	#call replace(p3.p8,i11-i12-i14-i2/2+i3/2-i7/2+i8/2,i,i11,i12,i14,i2,i3,i7,i8,Md280,dotrewrite-d280-6)
#endif
#break
#case Q8
* path: (0, 1, 2, 8)
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p + p7.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2} = + p5.p - p8.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	if (count(Md280,1)) id Q.p8 = i10 - i9;
	if (count(Md280,1)) id p2.p8 = -i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md280,dotrewrite-d280-2)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-3)
	#call replace(p1.p5,i10-i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md280,dotrewrite-d280-4)
	#call replace(p1.p8,i10-i11+i12+i13+i2/2-i3/2+i4/2-i5/2+i7/2-i9,i,i10,i11,i12,i13,i2,i3,i4,i5,i7,i9,Md280,dotrewrite-d280-5)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case Q8
* path: (0, 2, 8)
#case 27
* path: (2, 7)
#case 28
* path: (2, 8)
#case 57
* path: (5, 7)
#case 58
* path: (5, 8)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p6.p + Q.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2} = + p5.p - p8.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p7.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p + p8.p - p2.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	if (count(Md280,1)) id Q.p8 = i10 - i9;
	if (count(Md280,1)) id p2.p8 = -i13 + i14;
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md280,dotrewrite-d280-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md280,dotrewrite-d280-3)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-4)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md280,dotrewrite-d280-5)
	#call replace(p7.p8,i11-i12-i13-i2/2+i3/2-i7/2-i8/2,i,i11,i12,i13,i2,i3,i7,i8,Md280,dotrewrite-d280-6)
#endif
#break
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p6.p + Q.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p5.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p + p2.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-0)
	#call replace(p2.p3,i11-i12-i13-i2,i,i11,i12,i13,i2,Md280,dotrewrite-d280-1)
	#call replace(Q.p3,`Q2'/2-i1/2-i11+i6/2-i9,i,i1,i11,i6,i9,Md280,dotrewrite-d280-2)
	#call replace(p3.p5,-i14-i4/2+i6/2-i7/2+i8/2,i,i14,i4,i6,i7,i8,Md280,dotrewrite-d280-3)
	#call replace(p3.p4,-i11+i12+i2/2-i3/2-i4/2+i6/2,i,i11,i12,i2,i3,i4,i6,Md280,dotrewrite-d280-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p + p7.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p5.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p2} = - p7.p + p6.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md280,dotrewrite-d280-0)
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md280,dotrewrite-d280-1)
	#call replace(Q.p7,`Q2'/2-i1/2-i10+i6/2,i,i1,i10,i6,Md280,dotrewrite-d280-2)
	#call replace(p1.p7,`Q2'/2-i1/2-i10+i5/2-i7/2,i,i1,i10,i5,i7,Md280,dotrewrite-d280-3)
	#call replace(p1.p4,i11-i12-i13-i2/2+i3/2-i4/2-i6/2+i9,i,i11,i12,i13,i2,i3,i4,i6,i9,Md280,dotrewrite-d280-4)
	#call replace(p4.p7,-i11+i12+i13+i2/2-i3/2-i5/2+i6/2+i8/2,i,i11,i12,i13,i2,i3,i5,i6,i8,Md280,dotrewrite-d280-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 46
* path: (4, 1, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p2.p - p4.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	if (count(Md280,1)) id p2.p6 = i11 - i12;
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md280,dotrewrite-d280-2)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md280,dotrewrite-d280-3)
	#call replace(p4.p6,-i11+i12+i13+i2/2-i3/2+i4/2+i6/2,i,i11,i12,i13,i2,i3,i4,i6,Md280,dotrewrite-d280-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 15
* path: (1, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md280,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p + p7.p;
	.sort:momrewrite-Md280-4;
	if (count(Md280,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md280-3;
	if (count(Md280,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md280-2;
	if (count(Md280,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p4.p;
	.sort:momrewrite-Md280-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd280()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md280,dotrewrite-d280-0)
	#call replace(p4.p5,i4/2+i5/2-i8/2,i,i4,i5,i8,Md280,dotrewrite-d280-1)
	#call replace(p1.p5,i10-i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md280,dotrewrite-d280-2)
	#call replace(p1.p4,i11-i12-i13-i2/2+i3/2-i4/2-i6/2+i9,i,i11,i12,i13,i2,i3,i4,i6,i9,Md280,dotrewrite-d280-3)
#endif
#break
#endswitch
#break
*--#] d280 : 
*--#[ d208 :
#case Md208
#procedure SimpleDotd208()
if (count(Md208,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id p1.p2^n? = i10^n;
	id Q.p7^n? = i11^n;
	id p1.p7^n? = i12^n;
	id p2.p7^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 78
* path: (7, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md208,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md208-4;
	if (count(Md208,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p7} = + Q.p - p6.p;
	.sort:momrewrite-Md208-3;
	if (count(Md208,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p2.p + p7.p + p8.p;
	.sort:momrewrite-Md208-2;
	if (count(Md208,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p8.p - p6.p;
	.sort:momrewrite-Md208-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd208()
	if (count(Md208,1)) id p2.p6 = -i10 + i9;
	if (count(Md208,1)) id p6.p7 = i11 - i12;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md208,dotrewrite-d208-2)
	#call replace(p7.p8,-i13+i14-i7,i,i13,i14,i7,Md208,dotrewrite-d208-3)
	#call replace(Q.p8,`Q2'/2-i11+i3/2-i4/2-i9,i,i11,i3,i4,i9,Md208,dotrewrite-d208-4)
	#call replace(p2.p8,-i14-i2/2+i3/2+i7/2-i8/2,i,i14,i2,i3,i7,i8,Md208,dotrewrite-d208-5)
	#call replace(p6.p8,-i11+i12-i13+i14-i5/2+i6/2-i7/2+i8/2,i,i11,i12,i13,i14,i5,i6,i7,i8,Md208,dotrewrite-d208-6)
#endif
#break
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q7
* path: (0, 3, 7)
#case Q6
* path: (0, 3, 7, 6)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 27
* path: (2, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 36
* path: (3, 7, 6)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md208,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p7} = + Q.p - p6.p;
	.sort:momrewrite-Md208-4;
	if (count(Md208,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md208-3;
	if (count(Md208,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p2.p - p6.p;
	.sort:momrewrite-Md208-2;
	if (count(Md208,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p - p7.p;
	.sort:momrewrite-Md208-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd208()
	if (count(Md208,1)) id p2.p6 = -i10 + i9;
	if (count(Md208,1)) id p6.p7 = i11 - i12;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md208,dotrewrite-d208-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md208,dotrewrite-d208-3)
	#call replace(p2.p3,i13-i14+i2/2+i3/2+i7/2-i8/2,i,i13,i14,i2,i3,i7,i8,Md208,dotrewrite-d208-4)
	#call replace(p3.p6,-i10-i13+i14-i5/2+i6/2-i7/2+i8/2+i9,i,i10,i13,i14,i5,i6,i7,i8,i9,Md208,dotrewrite-d208-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 17
* path: (1, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md208,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md208-4;
	if (count(Md208,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p7.p + p8.p + p2.p;
	.sort:momrewrite-Md208-3;
	if (count(Md208,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p + p5.p;
	.sort:momrewrite-Md208-2;
	if (count(Md208,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md208-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd208()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md208,dotrewrite-d208-0)
	#call replace(p5.p7,-i11+i12-i13+i14,i,i11,i12,i13,i14,Md208,dotrewrite-d208-1)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Md208,dotrewrite-d208-2)
	#call replace(p2.p5,i10+i13-i14-i2/2+i3/2+i7/2-i8/2-i9,i,i10,i13,i14,i2,i3,i7,i8,i9,Md208,dotrewrite-d208-3)
	#call replace(p1.p5,i1/2+i13-i14+i3/2-i4/2+i5/2+i7/2-i8/2-i9,i,i1,i13,i14,i3,i4,i5,i7,i8,i9,Md208,dotrewrite-d208-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 14
* path: (1, 4)
#case 13
* path: (1, 4, 3)
#if ( `MOMS' > 0 )
	if (count(Md208,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p3.p - p2.p;
	.sort:momrewrite-Md208-4;
	if (count(Md208,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md208-3;
	if (count(Md208,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md208-2;
	if (count(Md208,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p - p4.p;
	.sort:momrewrite-Md208-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd208()
	if (count(Md208,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md208,dotrewrite-d208-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md208,dotrewrite-d208-2)
	#call replace(p2.p4,-i13+i14-i2/2-i3/2-i7/2+i8/2+i9,i,i13,i14,i2,i3,i7,i8,i9,Md208,dotrewrite-d208-3)
	#call replace(p1.p4,i1/2-i10-i13+i14-i3/2+i4/2-i5/2-i7/2+i8/2+i9,i,i1,i10,i13,i14,i3,i4,i5,i7,i8,i9,Md208,dotrewrite-d208-4)
#endif
#break
#case 25
* path: (2, 5)
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md208,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md208-4;
	if (count(Md208,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p7} = + Q.p - p6.p;
	.sort:momrewrite-Md208-3;
	if (count(Md208,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p2.p + p5.p + p6.p;
	.sort:momrewrite-Md208-2;
	if (count(Md208,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p - p7.p;
	.sort:momrewrite-Md208-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd208()
	if (count(Md208,1)) id p2.p6 = -i10 + i9;
	if (count(Md208,1)) id p6.p7 = i11 - i12;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md208,dotrewrite-d208-2)
	#call replace(p5.p7,-i11+i12-i13+i14,i,i11,i12,i13,i14,Md208,dotrewrite-d208-3)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i6/2-i9,i,i1,i3,i4,i6,i9,Md208,dotrewrite-d208-4)
	#call replace(p5.p6,-i13+i14-i5/2-i6/2-i7/2+i8/2,i,i13,i14,i5,i6,i7,i8,Md208,dotrewrite-d208-5)
	#call replace(p2.p5,i10+i13-i14-i2/2+i3/2+i7/2-i8/2-i9,i,i10,i13,i14,i2,i3,i7,i8,i9,Md208,dotrewrite-d208-6)
#endif
#break
#default
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md208,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p8.p - p6.p;
	.sort:momrewrite-Md208-4;
	if (count(Md208,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md208-3;
	if (count(Md208,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md208-2;
	if (count(Md208,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p2.p - p7.p;
	.sort:momrewrite-Md208-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd208()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md208,dotrewrite-d208-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md208,dotrewrite-d208-1)
	#call replace(p2.p3,i13-i14+i2/2+i3/2+i7/2-i8/2,i,i13,i14,i2,i3,i7,i8,Md208,dotrewrite-d208-2)
	#call replace(p1.p3,`Q2'/2+i10+i13-i14+i3/2-i4/2+i5/2-i6/2+i7/2-i8/2-i9,i,i10,i13,i14,i3,i4,i5,i6,i7,i8,i9,Md208,dotrewrite-d208-3)
#endif
#break
#endswitch
#break
*--#] d208 : 
*--#[ d270 :
#case Md270
#procedure SimpleDotd270()
if (count(Md270,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id p1.p2^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 15
* path: (1, 5)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 26
* path: (2, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p5.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md270,dotrewrite-d270-0)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Md270,dotrewrite-d270-1)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i7/2-i9,i,i1,i3,i4,i7,i9,Md270,dotrewrite-d270-2)
	#call replace(p1.p5,-`Q2'/2+i1/2-i10+i11+i7/2,i,i1,i10,i11,i7,Md270,dotrewrite-d270-3)
	#call replace(p2.p5,-`Q2'/2+i11-i2/2+i4/2-i5/2+i7/2,i,i11,i2,i4,i5,i7,Md270,dotrewrite-d270-4)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p5.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3,p6} = + Q.p - p7.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p2.p - p7.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	if (count(Md270,1)) id p2.p7 = -i10 + i9;
	if (count(Md270,1)) id p6.p7 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md270,dotrewrite-d270-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md270,dotrewrite-d270-3)
	#call replace(p3.p7,`Q2'/2-i11+i3/2-i4/2,i,i11,i3,i4,Md270,dotrewrite-d270-4)
	#call replace(p3.p6,i12-i13+i14+i5/2+i6/2-i8/2,i,i12,i13,i14,i5,i6,i8,Md270,dotrewrite-d270-5)
	#call replace(p2.p3,-`Q2'/2-i10+i11+i2/2+i4/2-i5/2+i7/2+i9,i,i10,i11,i2,i4,i5,i7,i9,Md270,dotrewrite-d270-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 13
* path: (1, 4, 3)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p5.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p - p4.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md270,dotrewrite-d270-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md270,dotrewrite-d270-1)
	#call replace(p1.p4,`Q2'/2+i1/2-i11-i7/2,i,i1,i11,i7,Md270,dotrewrite-d270-2)
	#call replace(p4.p6,i13-i14-i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md270,dotrewrite-d270-3)
	#call replace(p2.p4,`Q2'/2+i10-i11-i2/2-i4/2+i5/2-i7/2,i,i10,i11,i2,i4,i5,i7,Md270,dotrewrite-d270-4)
#endif
#break
#case 68
* path: (6, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p5.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p8.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md270,dotrewrite-d270-0)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Md270,dotrewrite-d270-1)
	#call replace(Q.p8,i1/2-i12+i3/2-i4/2-i7/2-i9,i,i1,i12,i3,i4,i7,i9,Md270,dotrewrite-d270-2)
	#call replace(p1.p8,-`Q2'/2+i1/2-i10+i11-i13+i7/2,i,i1,i10,i11,i13,i7,Md270,dotrewrite-d270-3)
	#call replace(p2.p8,-`Q2'/2+i11-i14-i2/2+i4/2-i5/2+i7/2,i,i11,i14,i2,i4,i5,i7,Md270,dotrewrite-d270-4)
#endif
#break
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p4.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p6} = + p1.p - p4.p - p5.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md270,dotrewrite-d270-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md270,dotrewrite-d270-1)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Md270,dotrewrite-d270-2)
	#call replace(p1.p4,`Q2'/2+i1/2-i11-i7/2,i,i1,i11,i7,Md270,dotrewrite-d270-3)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i7/2-i9,i,i1,i3,i4,i7,i9,Md270,dotrewrite-d270-4)
	#call replace(p1.p5,-`Q2'/2+i1/2-i10+i11+i7/2,i,i1,i10,i11,i7,Md270,dotrewrite-d270-5)
	#call replace(p4.p5,i1/2-i10+i2/2-i4/2-i5/2,i,i1,i10,i2,i4,i5,Md270,dotrewrite-d270-6)
	#call replace(p4.p6,i13-i14-i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md270,dotrewrite-d270-7)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p1.p?!{p1,[P+p1],[P-p1],p2,p3,p6} = + p4.p + p2.p + p5.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p6.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md270,dotrewrite-d270-0)
	#call replace(p5.p6,i5/2+i6/2-i8/2,i,i5,i6,i8,Md270,dotrewrite-d270-1)
	#call replace(Q.p5,i1/2+i3/2-i4/2-i7/2-i9,i,i1,i3,i4,i7,i9,Md270,dotrewrite-d270-2)
	#call replace(p2.p5,-`Q2'/2+i11-i2/2+i4/2-i5/2+i7/2,i,i11,i2,i4,i5,i7,Md270,dotrewrite-d270-3)
	#call replace(p3.p5,i10-i2/2+i3/2+i5/2-i7/2-i9,i,i10,i2,i3,i5,i7,i9,Md270,dotrewrite-d270-4)
	#call replace(p3.p6,i12-i13+i14+i5/2+i6/2-i8/2,i,i12,i13,i14,i5,i6,i8,Md270,dotrewrite-d270-5)
	#call replace(p2.p3,-`Q2'/2-i10+i11+i2/2+i4/2-i5/2+i7/2+i9,i,i10,i11,i2,i4,i5,i7,i9,Md270,dotrewrite-d270-6)
#endif
#break
#default
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q6
* path: (0, 3, 6)
#case 13
* path: (1, 2, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md270,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p5.p;
	.sort:momrewrite-Md270-4;
	if (count(Md270,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p2.p + p1.p;
	.sort:momrewrite-Md270-3;
	if (count(Md270,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md270-2;
	if (count(Md270,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md270-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd270()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md270,dotrewrite-d270-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md270,dotrewrite-d270-1)
	#call replace(p3.p6,i12-i13+i14+i5/2+i6/2-i8/2,i,i12,i13,i14,i5,i6,i8,Md270,dotrewrite-d270-2)
	#call replace(p2.p3,-`Q2'/2-i10+i11+i2/2+i4/2-i5/2+i7/2+i9,i,i10,i11,i2,i4,i5,i7,i9,Md270,dotrewrite-d270-3)
#endif
#break
#endswitch
#break
*--#] d270 : 
*--#[ d271 :
#case Md271
#procedure SimpleDotd271()
if (count(Md271,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p3.p6^n? = i10^n;
	id Q.p2^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p3^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 68
* path: (6, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md271,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p2.p + p1.p;
	.sort:momrewrite-Md271-4;
	if (count(Md271,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p7.p + Q.p;
	.sort:momrewrite-Md271-3;
	if (count(Md271,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md271-2;
	if (count(Md271,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p8.p;
	.sort:momrewrite-Md271-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd271()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md271,dotrewrite-d271-0)
	#call replace(p2.p8,i11-i12-i14,i,i11,i12,i14,Md271,dotrewrite-d271-1)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md271,dotrewrite-d271-2)
	#call replace(Q.p8,`Q2'/2-i1/2+i7/2-i9,i,i1,i7,i9,Md271,dotrewrite-d271-3)
	#call replace(p3.p8,-i10+i11-i12-i13+i2/2+i3/2-i5/2+i7/2,i,i10,i11,i12,i13,i2,i3,i5,i7,Md271,dotrewrite-d271-4)
#endif
#break
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md271,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p6} = + Q.p - p4.p;
	.sort:momrewrite-Md271-4;
	if (count(Md271,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p7.p;
	.sort:momrewrite-Md271-3;
	if (count(Md271,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md271-2;
	if (count(Md271,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p5.p;
	.sort:momrewrite-Md271-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd271()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md271,dotrewrite-d271-0)
	#call replace(p2.p5,-i11+i12+i13-i2,i,i11,i12,i13,i2,Md271,dotrewrite-d271-1)
	#call replace(p1.p6,-i6/2-i7/2+i8/2+i9,i,i6,i7,i8,i9,Md271,dotrewrite-d271-2)
	#call replace(Q.p5,i1/2-i11+i3/2-i4/2-i7/2,i,i1,i11,i3,i4,i7,Md271,dotrewrite-d271-3)
	#call replace(p5.p6,i10-i14-i6/2-i7/2+i8/2,i,i10,i14,i6,i7,i8,Md271,dotrewrite-d271-4)
	#call replace(p1.p5,i1/2-i11+i13-i2/2-i4/2+i5/2,i,i1,i11,i13,i2,i4,i5,Md271,dotrewrite-d271-5)
#endif
#break
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q6
* path: (0, 3, 6)
#case Q7
* path: (0, 3, 6, 7)
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md271,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p7.p;
	.sort:momrewrite-Md271-4;
	if (count(Md271,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md271-3;
	if (count(Md271,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p6.p;
	.sort:momrewrite-Md271-2;
	if (count(Md271,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p2.p - p7.p;
	.sort:momrewrite-Md271-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd271()
	if (count(Md271,1)) id p2.p7 = i11 - i12;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md271,dotrewrite-d271-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md271,dotrewrite-d271-2)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md271,dotrewrite-d271-3)
	#call replace(p3.p7,i11-i12-i13+i2/2+i3/2-i5/2+i7/2,i,i11,i12,i13,i2,i3,i5,i7,Md271,dotrewrite-d271-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 14
* path: (1, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 1, 7)
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md271,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p7.p;
	.sort:momrewrite-Md271-4;
	if (count(Md271,1)) id p3.p?!{p3,[P+p3],[P-p3],p2,p6} = + Q.p - p4.p;
	.sort:momrewrite-Md271-3;
	if (count(Md271,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md271-2;
	if (count(Md271,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p - p4.p;
	.sort:momrewrite-Md271-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd271()
	if (count(Md271,1)) id p2.p4 = i11 - i13;
	if (count(Md271,1)) id p4.p6 = -i10 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md271,dotrewrite-d271-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md271,dotrewrite-d271-3)
	#call replace(p1.p6,-i6/2-i7/2+i8/2+i9,i,i6,i7,i8,i9,Md271,dotrewrite-d271-4)
	#call replace(p1.p4,i1/2+i11-i12-i13+i2/2+i4/2-i5/2,i,i1,i11,i12,i13,i2,i4,i5,Md271,dotrewrite-d271-5)
#endif
#break
#default
#case Q3
* path: (0, 1, 2, 3)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md271,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p7.p;
	.sort:momrewrite-Md271-4;
	if (count(Md271,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p2.p + p1.p;
	.sort:momrewrite-Md271-3;
	if (count(Md271,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md271-2;
	if (count(Md271,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md271-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd271()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md271,dotrewrite-d271-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md271,dotrewrite-d271-1)
	#call replace(p1.p6,-i6/2-i7/2+i8/2+i9,i,i6,i7,i8,i9,Md271,dotrewrite-d271-2)
	#call replace(p1.p3,`Q2'/2-i11+i12+i13-i2/2-i4/2+i5/2-i7/2,i,i11,i12,i13,i2,i4,i5,i7,Md271,dotrewrite-d271-3)
#endif
#break
#endswitch
#break
*--#] d271 : 
*--#[ d175 :
#case Md175
#procedure SimpleDotd175()
if (count(Md175,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p2.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p6.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p4.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md175,dotrewrite-d175-0)
	#call replace(p2.p4,i1/2-i2/2-i4/2,i,i1,i2,i4,Md175,dotrewrite-d175-1)
	#call replace(Q.p2,i1/2+i3/2-i4/2-i6/2,i,i1,i3,i4,i6,Md175,dotrewrite-d175-2)
	#call replace(p4.p5,-i5/2-i6/2+i7/2+i8-i9,i,i5,i6,i7,i8,i9,Md175,dotrewrite-d175-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p6.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md175,dotrewrite-d175-0)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md175,dotrewrite-d175-1)
	#call replace(Q.p2,i1/2+i3/2-i4/2-i6/2,i,i1,i3,i4,i6,Md175,dotrewrite-d175-2)
	#call replace(p1.p5,-i5/2-i6/2+i7/2+i8,i,i5,i6,i7,i8,Md175,dotrewrite-d175-3)
#endif
#break
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q5
* path: (0, 3, 5)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p6.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p2.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md175,dotrewrite-d175-0)
	#call replace(p2.p3,i2/2+i3/2-i6/2,i,i2,i3,i6,Md175,dotrewrite-d175-1)
	#call replace(Q.p2,i1/2+i3/2-i4/2-i6/2,i,i1,i3,i4,i6,Md175,dotrewrite-d175-2)
	#call replace(p3.p5,i5/2+i6/2-i7/2+i9,i,i5,i6,i7,i9,Md175,dotrewrite-d175-3)
#endif
#break
#case 57
* path: (5, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p6.p + Q.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p7.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md175,dotrewrite-d175-0)
	#call replace(Q.p2,i1/2+i3/2-i4/2-i6/2,i,i1,i3,i4,i6,Md175,dotrewrite-d175-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md175,dotrewrite-d175-2)
	#call replace(p2.p7,-i2/2+i3/2-i6/2-i9,i,i2,i3,i6,i9,Md175,dotrewrite-d175-3)
#endif
#break
#case Q6
* path: (0, 3, 5, 6)
#case 36
* path: (3, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p3.p - p6.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md175,dotrewrite-d175-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md175,dotrewrite-d175-1)
	#call replace(p3.p6,-i2/2+i3/2+i6/2,i,i2,i3,i6,Md175,dotrewrite-d175-2)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md175,dotrewrite-d175-3)
	#call replace(p3.p5,i5/2+i6/2-i7/2+i9,i,i5,i6,i7,i9,Md175,dotrewrite-d175-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p6.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md175,dotrewrite-d175-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md175,dotrewrite-d175-1)
	#call replace(p1.p4,i1/2-i2/2+i4/2,i,i1,i2,i4,Md175,dotrewrite-d175-2)
	#call replace(p1.p5,-i5/2-i6/2+i7/2+i8,i,i5,i6,i7,i8,Md175,dotrewrite-d175-3)
	#call replace(p4.p5,-i5/2-i6/2+i7/2+i8-i9,i,i5,i6,i7,i8,i9,Md175,dotrewrite-d175-4)
#endif
#break
#default
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md175,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p;
	.sort:momrewrite-Md175-4;
	if (count(Md175,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md175-3;
	if (count(Md175,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p6.p;
	.sort:momrewrite-Md175-2;
	if (count(Md175,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md175-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd175()
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md175,dotrewrite-d175-0)
	#call replace(p2.p6,-i2/2+i3/2-i6/2,i,i2,i3,i6,Md175,dotrewrite-d175-1)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md175,dotrewrite-d175-2)
	#call replace(Q.p2,i1/2+i3/2-i4/2-i6/2,i,i1,i3,i4,i6,Md175,dotrewrite-d175-3)
#endif
#break
#endswitch
#break
*--#] d175 : 
*--#[ d165 :
#case Md165
#procedure SimpleDotd165()
if (count(Md165,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p2.p5^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 57
* path: (5, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md165,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md165-3;
	if (count(Md165,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p5.p + p7.p;
	.sort:momrewrite-Md165-2;
	if (count(Md165,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p1.p - p5.p - p7.p;
	.sort:momrewrite-Md165-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd165()
	if (count(Md165,1)) id Q.p7 = -i8 + i9;
	if (count(Md165,1)) id p1.p7 = -i13 + i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md165,dotrewrite-d165-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md165,dotrewrite-d165-3)
	#call replace(p2.p7,i1/2-i10-i12+i14+i2/2-i4/2+i6/2,i,i1,i10,i12,i14,i2,i4,i6,Md165,dotrewrite-d165-4)
#endif
#break
#case Q3
* path: (0, 3)
#case Q6
* path: (0, 3, 6)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 1, 5)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md165,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p5} = + Q.p - p3.p;
	.sort:momrewrite-Md165-3;
	if (count(Md165,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md165-2;
	if (count(Md165,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p - p6.p;
	.sort:momrewrite-Md165-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd165()
	if (count(Md165,1)) id p1.p3 = i11 - i12;
	if (count(Md165,1)) id p3.p5 = -i10 + i8;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md165,dotrewrite-d165-2)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md165,dotrewrite-d165-3)
	#call replace(p3.p6,-i1/2+i12-i14-i2/2+i4/2-i6/2+i9,i,i1,i12,i14,i2,i4,i6,i9,Md165,dotrewrite-d165-4)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md165,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p7.p + p5.p;
	.sort:momrewrite-Md165-3;
	if (count(Md165,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md165-2;
	if (count(Md165,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p - p4.p - p5.p;
	.sort:momrewrite-Md165-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd165()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md165,dotrewrite-d165-0)
	#call replace(p1.p4,-i1+i12-i14,i,i1,i12,i14,Md165,dotrewrite-d165-1)
	#call replace(Q.p4,`Q2'/2-i11+i2/2-i3/2-i9,i,i11,i2,i3,i9,Md165,dotrewrite-d165-2)
	#call replace(p2.p4,-i1/2-i14+i2/2+i4/2-i6/2,i,i1,i14,i2,i4,i6,Md165,dotrewrite-d165-3)
	#call replace(p4.p5,i10-i13-i5/2-i6/2+i7/2,i,i10,i13,i5,i6,i7,Md165,dotrewrite-d165-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 5)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md165,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md165-3;
	if (count(Md165,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md165-2;
	if (count(Md165,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p1.p - p6.p;
	.sort:momrewrite-Md165-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd165()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md165,dotrewrite-d165-0)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md165,dotrewrite-d165-1)
	#call replace(p2.p6,i1/2-i12+i14+i2/2-i4/2+i6/2,i,i1,i12,i14,i2,i4,i6,Md165,dotrewrite-d165-2)
#endif
#break
#endswitch
#break
*--#] d165 : 
*--#[ d168 :
#case Md168
#procedure SimpleDotd168()
if (count(Md168,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p4.p5^n? = i10^n;
	id Q.p2^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 23
* path: (2, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md168,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p6.p;
	.sort:momrewrite-Md168-3;
	if (count(Md168,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md168-2;
	if (count(Md168,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p2.p - p3.p - p4.p;
	.sort:momrewrite-Md168-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd168()
	#call replace(p2.p3,i11-i12-i13-i2,i,i11,i12,i13,i2,Md168,dotrewrite-d168-0)
	#call replace(Q.p3,`Q2'/2-i1/2-i11+i6/2-i8,i,i1,i11,i6,i8,Md168,dotrewrite-d168-1)
	#call replace(p3.p5,-i10-i14+i5/2+i6/2-i7/2,i,i10,i14,i5,i6,i7,Md168,dotrewrite-d168-2)
	#call replace(p3.p4,-i11+i12+i2/2-i3/2-i4/2+i6/2,i,i11,i12,i2,i3,i4,i6,Md168,dotrewrite-d168-3)
#endif
#break
#case 57
* path: (5, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md168,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = - p6.p + Q.p;
	.sort:momrewrite-Md168-3;
	if (count(Md168,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p7.p;
	.sort:momrewrite-Md168-2;
	if (count(Md168,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p7.p - p2.p - p4.p;
	.sort:momrewrite-Md168-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd168()
	#call replace(p2.p7,i11-i12-i14,i,i11,i12,i14,Md168,dotrewrite-d168-0)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md168,dotrewrite-d168-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i6/2-i9,i,i1,i6,i9,Md168,dotrewrite-d168-2)
	#call replace(p4.p7,-i10-i11+i12+i13+i2/2-i3/2+i4/2+i6/2,i,i10,i11,i12,i13,i2,i3,i4,i6,Md168,dotrewrite-d168-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md168,1)) id p1.p?!{p1,[P+p1],[P-p1],p2} = + Q.p - p6.p;
	.sort:momrewrite-Md168-3;
	if (count(Md168,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p5.p;
	.sort:momrewrite-Md168-2;
	if (count(Md168,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p2.p - p4.p;
	.sort:momrewrite-Md168-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd168()
	if (count(Md168,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md168,dotrewrite-d168-1)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md168,dotrewrite-d168-2)
	#call replace(p4.p6,-i11+i12+i13+i2/2-i3/2+i4/2+i6/2,i,i11,i12,i13,i2,i3,i4,i6,Md168,dotrewrite-d168-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md168,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p6.p;
	.sort:momrewrite-Md168-3;
	if (count(Md168,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md168-2;
	if (count(Md168,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p - p4.p;
	.sort:momrewrite-Md168-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd168()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md168,dotrewrite-d168-0)
	#call replace(p1.p5,-i5/2-i6/2+i7/2+i9,i,i5,i6,i7,i9,Md168,dotrewrite-d168-1)
	#call replace(p1.p4,i11-i12-i13-i2/2+i3/2-i4/2-i6/2+i8,i,i11,i12,i13,i2,i3,i4,i6,i8,Md168,dotrewrite-d168-2)
#endif
#break
#endswitch
#break
*--#] d168 : 
*--#[ d65 :
#case Md65
#procedure SimpleDotd65()
if (count(Md65,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case 23
* path: (2, 0, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md65,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p5.p;
	.sort:momrewrite-Md65-3;
	if (count(Md65,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p3.p;
	.sort:momrewrite-Md65-2;
	if (count(Md65,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md65-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd65()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md65,dotrewrite-d65-0)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md65,dotrewrite-d65-1)
	#call replace(p3.p4,i4/2+i5/2-i6/2-i9,i,i4,i5,i6,i9,Md65,dotrewrite-d65-2)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md65,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p5.p;
	.sort:momrewrite-Md65-3;
	if (count(Md65,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md65-2;
	if (count(Md65,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md65-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd65()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md65,dotrewrite-d65-0)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md65,dotrewrite-d65-1)
	#call replace(p1.p4,-i4/2-i5/2+i6/2+i7,i,i4,i5,i6,i7,Md65,dotrewrite-d65-2)
	#call replace(p3.p4,i4/2+i5/2-i6/2-i9,i,i4,i5,i6,i9,Md65,dotrewrite-d65-3)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2-i8,i,i1,i2,i3,i8,Md65,dotrewrite-d65-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md65,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p5.p;
	.sort:momrewrite-Md65-3;
	if (count(Md65,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md65-2;
	if (count(Md65,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md65-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd65()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md65,dotrewrite-d65-0)
	#call replace(p1.p2,-i2/2+i3/2-i5/2+i8,i,i2,i3,i5,i8,Md65,dotrewrite-d65-1)
	#call replace(p1.p4,-i4/2-i5/2+i6/2+i7,i,i4,i5,i6,i7,Md65,dotrewrite-d65-2)
#endif
#break
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md65,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md65-3;
	if (count(Md65,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + p6.p;
	.sort:momrewrite-Md65-2;
	if (count(Md65,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p + p6.p - p2.p;
	.sort:momrewrite-Md65-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd65()
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md65,dotrewrite-d65-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i7,i,i1,i5,i7,Md65,dotrewrite-d65-1)
	#call replace(p2.p6,i2/2-i3/2+i5/2-i9,i,i2,i3,i5,i9,Md65,dotrewrite-d65-2)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md65,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p5.p;
	.sort:momrewrite-Md65-3;
	if (count(Md65,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p5.p - p3.p;
	.sort:momrewrite-Md65-2;
	if (count(Md65,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md65-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd65()
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md65,dotrewrite-d65-0)
	#call replace(p3.p5,-i2/2+i3/2+i5/2,i,i2,i3,i5,Md65,dotrewrite-d65-1)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md65,dotrewrite-d65-2)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md65,dotrewrite-d65-3)
	#call replace(p3.p4,i4/2+i5/2-i6/2-i9,i,i4,i5,i6,i9,Md65,dotrewrite-d65-4)
#endif
#break
#default
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md65,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p5.p;
	.sort:momrewrite-Md65-3;
	if (count(Md65,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p - p2.p;
	.sort:momrewrite-Md65-2;
	if (count(Md65,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md65-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd65()
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md65,dotrewrite-d65-0)
	#call replace(p2.p5,i2/2-i3/2+i5/2,i,i2,i3,i5,Md65,dotrewrite-d65-1)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md65,dotrewrite-d65-2)
#endif
#break
#endswitch
#break
*--#] d65 : 
*--#[ d59 :
#case Md59
#procedure SimpleDotd59()
if (count(Md59,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id Q.p4^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md59,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md59-3;
	if (count(Md59,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p;
	.sort:momrewrite-Md59-2;
	if (count(Md59,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md59-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd59()
	#call replace(p1.p5,-i1/2+i2/2-i5/2,i,i1,i2,i5,Md59,dotrewrite-d59-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md59,dotrewrite-d59-1)
	#call replace(Q.p5,`Q2'/2+i2/2-i3/2-i7,i,i2,i3,i7,Md59,dotrewrite-d59-2)
#endif
#break
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md59,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md59-3;
	if (count(Md59,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + p6.p;
	.sort:momrewrite-Md59-2;
	if (count(Md59,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p4.p + p6.p;
	.sort:momrewrite-Md59-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd59()
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md59,dotrewrite-d59-0)
	#call replace(p1.p6,-i1/2+i2/2-i5/2-i9,i,i1,i2,i5,i9,Md59,dotrewrite-d59-1)
	#call replace(Q.p6,`Q2'/2+i2/2-i3/2-i7-i8,i,i2,i3,i7,i8,Md59,dotrewrite-d59-2)
#endif
#break
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md59,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p4.p;
	.sort:momrewrite-Md59-3;
	if (count(Md59,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p2.p - p1.p;
	.sort:momrewrite-Md59-2;
	if (count(Md59,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md59-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd59()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md59,dotrewrite-d59-0)
	#call replace(p1.p3,-i1/2-i2/2+i5/2+i7,i,i1,i2,i5,i7,Md59,dotrewrite-d59-1)
	#call replace(p3.p4,-i4/2-i5/2+i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md59,dotrewrite-d59-2)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md59,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md59-3;
	if (count(Md59,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md59-2;
	if (count(Md59,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p3.p - p5.p;
	.sort:momrewrite-Md59-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd59()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md59,dotrewrite-d59-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md59,dotrewrite-d59-1)
	#call replace(Q.p5,`Q2'/2+i2/2-i3/2-i7,i,i2,i3,i7,Md59,dotrewrite-d59-2)
	#call replace(p3.p4,-i4/2-i5/2+i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md59,dotrewrite-d59-3)
	#call replace(p3.p5,`Q2'/2+i1/2-i3/2-i5/2-i7,i,i1,i3,i5,i7,Md59,dotrewrite-d59-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 4)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md59,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md59-3;
	if (count(Md59,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p;
	.sort:momrewrite-Md59-2;
	if (count(Md59,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p - p4.p;
	.sort:momrewrite-Md59-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd59()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md59,dotrewrite-d59-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md59,dotrewrite-d59-1)
	#call replace(p2.p4,i4/2+i5/2-i6/2+i9,i,i4,i5,i6,i9,Md59,dotrewrite-d59-2)
#endif
#break
#endswitch
#break
*--#] d59 : 
*--#[ d157 :
#case Md157
#procedure SimpleDotd157()
if (count(Md157,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p1.p6^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p4^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md157,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p + p6.p;
	.sort:momrewrite-Md157-3;
	if (count(Md157,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p - p1.p;
	.sort:momrewrite-Md157-2;
	if (count(Md157,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p3.p;
	.sort:momrewrite-Md157-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd157()
	if (count(Md157,1)) id p3.p4 = i11 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md157,dotrewrite-d157-1)
	#call replace(p1.p3,-i1/2-i12+i13-i2/2-i4/2+i5/2+i8,i,i1,i12,i13,i2,i4,i5,i8,Md157,dotrewrite-d157-2)
	#call replace(p3.p6,-i10+i12-i13+i4/2-i5/2-i6/2+i7/2+i9,i,i10,i12,i13,i4,i5,i6,i7,i9,Md157,dotrewrite-d157-3)
#endif
#break
#case 67
* path: (6, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md157,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md157-3;
	if (count(Md157,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p6.p + p7.p;
	.sort:momrewrite-Md157-2;
	if (count(Md157,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p7.p - p4.p;
	.sort:momrewrite-Md157-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd157()
	#call replace(p4.p7,-i12+i13-i14,i,i12,i13,i14,Md157,dotrewrite-d157-0)
	#call replace(Q.p7,`Q2'/2+i2/2-i3/2-i8-i9,i,i2,i3,i8,i9,Md157,dotrewrite-d157-1)
	#call replace(p6.p7,-i12+i13-i4/2+i5/2-i6/2-i7/2,i,i12,i13,i4,i5,i6,i7,Md157,dotrewrite-d157-2)
	#call replace(p1.p7,-i1/2-i10+i12-i13+i2/2+i4/2-i5/2,i,i1,i10,i12,i13,i2,i4,i5,Md157,dotrewrite-d157-3)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md157,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md157-3;
	if (count(Md157,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p4.p + p5.p;
	.sort:momrewrite-Md157-2;
	if (count(Md157,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p - p6.p;
	.sort:momrewrite-Md157-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd157()
	#call replace(p4.p5,-i12+i13-i4,i,i12,i13,i4,Md157,dotrewrite-d157-0)
	#call replace(Q.p5,`Q2'/2-i11+i2/2-i3/2-i8,i,i11,i2,i3,i8,Md157,dotrewrite-d157-1)
	#call replace(p1.p5,-i1/2-i13+i2/2+i4/2-i5/2,i,i1,i13,i2,i4,i5,Md157,dotrewrite-d157-2)
	#call replace(p5.p6,-i12+i13-i14-i4/2+i5/2+i6/2-i7/2,i,i12,i13,i14,i4,i5,i6,i7,Md157,dotrewrite-d157-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 2, 6)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md157,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md157-3;
	if (count(Md157,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p1.p - p4.p;
	.sort:momrewrite-Md157-2;
	if (count(Md157,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p1.p - p6.p;
	.sort:momrewrite-Md157-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd157()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md157,dotrewrite-d157-0)
	#call replace(p1.p2,i1/2+i12-i13+i2/2+i4/2-i5/2,i,i1,i12,i13,i2,i4,i5,Md157,dotrewrite-d157-1)
	#call replace(p2.p6,i10-i12+i13-i4/2+i5/2+i6/2-i7/2,i,i10,i12,i13,i4,i5,i6,i7,Md157,dotrewrite-d157-2)
#endif
#break
#endswitch
#break
*--#] d157 : 
*--#[ d63 :
#case Md63
#procedure SimpleDotd63()
if (count(Md63,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p1.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md63,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md63-3;
	if (count(Md63,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p;
	.sort:momrewrite-Md63-2;
	if (count(Md63,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p5.p + p6.p;
	.sort:momrewrite-Md63-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd63()
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md63,dotrewrite-d63-0)
	#call replace(p1.p6,-i1/2+i2/2-i4/2-i9,i,i1,i2,i4,i9,Md63,dotrewrite-d63-1)
	#call replace(Q.p6,`Q2'/2+i2/2-i3/2-i7-i8,i,i2,i3,i7,i8,Md63,dotrewrite-d63-2)
#endif
#break
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md63,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p5.p;
	.sort:momrewrite-Md63-3;
	if (count(Md63,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p2.p - p1.p;
	.sort:momrewrite-Md63-2;
	if (count(Md63,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md63-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd63()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md63,dotrewrite-d63-0)
	#call replace(p1.p3,-i1/2-i2/2+i4/2+i7,i,i1,i2,i4,i7,Md63,dotrewrite-d63-1)
	#call replace(p3.p5,-i4/2-i5/2+i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md63,dotrewrite-d63-2)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md63,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md63-3;
	if (count(Md63,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md63-2;
	if (count(Md63,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md63-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd63()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md63,dotrewrite-d63-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md63,dotrewrite-d63-1)
	#call replace(Q.p4,`Q2'/2+i2/2-i3/2-i7,i,i2,i3,i7,Md63,dotrewrite-d63-2)
	#call replace(p3.p4,`Q2'/2+i1/2-i3/2-i4/2-i7,i,i1,i3,i4,i7,Md63,dotrewrite-d63-3)
	#call replace(p3.p5,-i4/2-i5/2+i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md63,dotrewrite-d63-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md63,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md63-3;
	if (count(Md63,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p4.p;
	.sort:momrewrite-Md63-2;
	if (count(Md63,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md63-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd63()
	#call replace(p1.p4,-i1/2+i2/2-i4/2,i,i1,i2,i4,Md63,dotrewrite-d63-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md63,dotrewrite-d63-1)
	#call replace(Q.p4,`Q2'/2+i2/2-i3/2-i7,i,i2,i3,i7,Md63,dotrewrite-d63-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md63,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md63-3;
	if (count(Md63,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p1.p;
	.sort:momrewrite-Md63-2;
	if (count(Md63,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p1.p - p5.p;
	.sort:momrewrite-Md63-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd63()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md63,dotrewrite-d63-0)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md63,dotrewrite-d63-1)
	#call replace(p2.p5,i4/2+i5/2-i6/2+i9,i,i4,i5,i6,i9,Md63,dotrewrite-d63-2)
#endif
#break
#endswitch
#break
*--#] d63 : 
*--#[ d140 :
#case Md140
#procedure SimpleDotd140()
if (count(Md140,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p7.p + p3.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p3.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md140,dotrewrite-d140-0)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-1)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md140,dotrewrite-d140-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md140,dotrewrite-d140-3)
	#call replace(p3.p6,-i2/2-i4/2+i5/2+i7/2,i,i2,i4,i5,i7,Md140,dotrewrite-d140-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p4.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p7.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-0)
	#call replace(p4.p7,-i3/2+i4/2+i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-1)
	#call replace(p2.p4,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md140,dotrewrite-d140-2)
	#call replace(Q.p7,-`Q2'/2+i1/2-i5/2+i8+i9,i,i1,i5,i8,i9,Md140,dotrewrite-d140-3)
#endif
#break
#case Q7
* path: (0, 1, 2, 7)
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p4.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p + p5.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-1)
	#call replace(p1.p2,-i2/2+i3/2-i5/2+i8,i,i2,i3,i5,i8,Md140,dotrewrite-d140-2)
	#call replace(Q.p7,-`Q2'/2+i1/2-i5/2+i8+i9,i,i1,i5,i8,i9,Md140,dotrewrite-d140-3)
	#call replace(p1.p7,-`Q2'/2+i1/2-i2/2+i3/2-i4/2-i5/2+i6/2+i8+i9,i,i1,i2,i3,i4,i5,i6,i8,i9,Md140,dotrewrite-d140-4)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p7.p + p6.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p3.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p3.p4,i3/2+i4/2-i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-1)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md140,dotrewrite-d140-2)
	#call replace(p1.p4,-i4/2-i5/2+i6/2+i9,i,i4,i5,i6,i9,Md140,dotrewrite-d140-3)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2-i8,i,i1,i2,i3,i8,Md140,dotrewrite-d140-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p4.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p1.p2,-i2/2+i3/2-i5/2+i8,i,i2,i3,i5,i8,Md140,dotrewrite-d140-1)
	#call replace(p1.p4,-i4/2-i5/2+i6/2+i9,i,i4,i5,i6,i9,Md140,dotrewrite-d140-2)
	#call replace(p2.p4,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md140,dotrewrite-d140-3)
#endif
#break
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p3.p + p7.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p3.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md140,dotrewrite-d140-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-1)
	#call replace(p3.p7,-i3/2+i4/2-i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-2)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md140,dotrewrite-d140-3)
	#call replace(Q.p7,-`Q2'/2+i1/2-i5/2+i8+i9,i,i1,i5,i8,i9,Md140,dotrewrite-d140-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p4.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + p6.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md140,dotrewrite-d140-1)
	#call replace(p2.p4,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md140,dotrewrite-d140-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md140,dotrewrite-d140-3)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p7.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + p6.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md140,dotrewrite-d140-0)
	#call replace(p4.p7,-i3/2+i4/2+i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md140,dotrewrite-d140-3)
	#call replace(Q.p7,-`Q2'/2+i1/2-i5/2+i8+i9,i,i1,i5,i8,i9,Md140,dotrewrite-d140-4)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 23
* path: (2, 3)
#case 24
* path: (2, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p5.p + Q.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p2.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p3.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p3.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md140,dotrewrite-d140-0)
	#call replace(p3.p4,i3/2+i4/2-i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-1)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md140,dotrewrite-d140-2)
	#call replace(p2.p4,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md140,dotrewrite-d140-3)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p5.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p5.p - p3.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p3.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(p3.p4,i3/2+i4/2-i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-0)
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md140,dotrewrite-d140-1)
	#call replace(p3.p5,-i2/2+i3/2+i5/2,i,i2,i3,i5,Md140,dotrewrite-d140-2)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md140,dotrewrite-d140-3)
	#call replace(Q.p3,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md140,dotrewrite-d140-4)
#endif
#break
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p7.p + p6.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p5.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p7.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md140,dotrewrite-d140-1)
	#call replace(p4.p7,-i3/2+i4/2+i7/2,i,i3,i4,i7,Md140,dotrewrite-d140-2)
	#call replace(p5.p7,i2/2-i3/2+i4/2-i6/2,i,i2,i3,i4,i6,Md140,dotrewrite-d140-3)
	#call replace(Q.p7,-`Q2'/2+i1/2-i5/2+i8+i9,i,i1,i5,i8,i9,Md140,dotrewrite-d140-4)
#endif
#break
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p4.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p6.p + p5.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-1)
	#call replace(p1.p2,-i2/2+i3/2-i5/2+i8,i,i2,i3,i5,i8,Md140,dotrewrite-d140-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md140,dotrewrite-d140-3)
	#call replace(p1.p6,`Q2'/2-i1/2+i4/2-i6/2-i9,i,i1,i4,i6,i9,Md140,dotrewrite-d140-4)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p5.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p - p2.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p - p6.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p2.p5,i2/2-i3/2+i5/2,i,i2,i3,i5,Md140,dotrewrite-d140-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md140,dotrewrite-d140-2)
	#call replace(p5.p6,-i4/2+i5/2+i6/2,i,i4,i5,i6,Md140,dotrewrite-d140-3)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i9,i,i1,i5,i9,Md140,dotrewrite-d140-4)
#endif
#break
#default
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md140,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md140-4;
	if (count(Md140,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p5.p;
	.sort:momrewrite-Md140-3;
	if (count(Md140,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p - p2.p;
	.sort:momrewrite-Md140-2;
	if (count(Md140,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p4.p;
	.sort:momrewrite-Md140-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd140()
	#call replace(Q.p5,`Q2'/2-i1/2+i5/2,i,i1,i5,Md140,dotrewrite-d140-0)
	#call replace(p2.p5,i2/2-i3/2+i5/2,i,i2,i3,i5,Md140,dotrewrite-d140-1)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md140,dotrewrite-d140-2)
	#call replace(p2.p4,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md140,dotrewrite-d140-3)
#endif
#break
#endswitch
#break
*--#] d140 : 
*--#[ d215 :
#case Md215
#procedure SimpleDotd215()
if (count(Md215,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p1.p4^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q6
* path: (0, 3, 6)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p1.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p3.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	if (count(Md215,1)) id p3.p6 = i12 - i14;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md215,dotrewrite-d215-1)
	#call replace(p1.p3,-i1/2-i2/2+i8/2+i9,i,i1,i2,i8,i9,Md215,dotrewrite-d215-2)
	#call replace(p3.p4,i10-i11-i4/2+i5/2-i8/2,i,i10,i11,i4,i5,i8,Md215,dotrewrite-d215-3)
	#call replace(p4.p6,-i13+i14-i5/2-i6/2+i7/2,i,i13,i14,i5,i6,i7,Md215,dotrewrite-d215-4)
#endif
#break
#case Q5
* path: (0, 2, 8, 5)
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4,p6} = + p2.p - p8.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	if (count(Md215,1)) id p6.p8 = -i13 + i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md215,dotrewrite-d215-1)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md215,dotrewrite-d215-2)
	#call replace(p2.p8,-i1/2+i2/2+i8/2,i,i1,i2,i8,Md215,dotrewrite-d215-3)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md215,dotrewrite-d215-4)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md215,dotrewrite-d215-5)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i3/2-i9,i,i10,i2,i3,i9,Md215,dotrewrite-d215-6)
	#call replace(p2.p5,-i1/2-i11+i2/2-i4/2+i5/2,i,i1,i11,i2,i4,i5,Md215,dotrewrite-d215-7)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p1.p + p8.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	if (count(Md215,1)) id p6.p8 = -i13 + i14;
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md215,dotrewrite-d215-1)
	#call replace(p1.p8,-i1/2+i2/2-i8/2,i,i1,i2,i8,Md215,dotrewrite-d215-2)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md215,dotrewrite-d215-3)
	#call replace(p1.p5,-i1/2-i11+i2/2-i8/2,i,i1,i11,i2,i8,Md215,dotrewrite-d215-4)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md215,dotrewrite-d215-5)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i3/2-i9,i,i10,i2,i3,i9,Md215,dotrewrite-d215-6)
#endif
#break
#case 35
* path: (3, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4,p6} = - p8.p + p2.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p3.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	if (count(Md215,1)) id p3.p6 = i12 - i14;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md215,dotrewrite-d215-1)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md215,dotrewrite-d215-2)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md215,dotrewrite-d215-3)
	#call replace(p3.p4,i10-i11-i4/2+i5/2-i8/2,i,i10,i11,i4,i5,i8,Md215,dotrewrite-d215-4)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i3/2-i9,i,i10,i2,i3,i9,Md215,dotrewrite-d215-5)
	#call replace(p4.p6,-i13+i14-i5/2-i6/2+i7/2,i,i13,i14,i5,i6,i7,Md215,dotrewrite-d215-6)
	#call replace(p3.p5,`Q2'/2+i1/2-i10+i11-i3/2+i4/2-i5/2-i9,i,i1,i10,i11,i3,i4,i5,i9,Md215,dotrewrite-d215-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 38
* path: (3, 1, 8)
#case 48
* path: (4, 8)
#case 68
* path: (6, 1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p1.p + p8.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	if (count(Md215,1)) id p6.p8 = -i13 + i14;
	#call replace(p1.p8,-i1/2+i2/2-i8/2,i,i1,i2,i8,Md215,dotrewrite-d215-1)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md215,dotrewrite-d215-2)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md215,dotrewrite-d215-3)
	#call replace(p4.p6,-i13+i14-i5/2-i6/2+i7/2,i,i13,i14,i5,i6,i7,Md215,dotrewrite-d215-4)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4,p6} = + p2.p - p8.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	if (count(Md215,1)) id p6.p8 = -i13 + i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md215,dotrewrite-d215-1)
	#call replace(p2.p8,-i1/2+i2/2+i8/2,i,i1,i2,i8,Md215,dotrewrite-d215-2)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md215,dotrewrite-d215-3)
	#call replace(p2.p4,i11+i4/2-i5/2+i8/2,i,i11,i4,i5,i8,Md215,dotrewrite-d215-4)
	#call replace(Q.p8,`Q2'/2+i2/2-i3/2-i9,i,i2,i3,i9,Md215,dotrewrite-d215-5)
	#call replace(p4.p6,-i13+i14-i5/2-i6/2+i7/2,i,i13,i14,i5,i6,i7,Md215,dotrewrite-d215-6)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 15
* path: (1, 4, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p8.p + p1.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md215,dotrewrite-d215-0)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md215,dotrewrite-d215-1)
	#call replace(p1.p5,-i1/2-i11+i2/2-i8/2,i,i1,i11,i2,i8,Md215,dotrewrite-d215-2)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i3/2-i9,i,i10,i2,i3,i9,Md215,dotrewrite-d215-3)
	#call replace(p4.p6,-i13+i14-i5/2-i6/2+i7/2,i,i13,i14,i5,i6,i7,Md215,dotrewrite-d215-4)
#endif
#break
#case 67
* path: (6, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = - p5.p + p8.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p + p7.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p1.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md215,dotrewrite-d215-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md215,dotrewrite-d215-1)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md215,dotrewrite-d215-2)
	#call replace(p1.p7,-i1/2-i11-i13+i2/2-i8/2,i,i1,i11,i13,i2,i8,Md215,dotrewrite-d215-3)
	#call replace(Q.p7,`Q2'/2-i10-i12+i2/2-i3/2-i9,i,i10,i12,i2,i3,i9,Md215,dotrewrite-d215-4)
	#call replace(p2.p7,-i1/2-i11-i14+i2/2-i4/2+i5/2,i,i1,i11,i14,i2,i4,i5,Md215,dotrewrite-d215-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md215,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md215-4;
	if (count(Md215,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md215-3;
	if (count(Md215,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md215-2;
	if (count(Md215,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p1.p;
	.sort:momrewrite-Md215-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd215()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md215,dotrewrite-d215-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md215,dotrewrite-d215-1)
	#call replace(p2.p4,i11+i4/2-i5/2+i8/2,i,i11,i4,i5,i8,Md215,dotrewrite-d215-2)
	#call replace(p4.p6,-i13+i14-i5/2-i6/2+i7/2,i,i13,i14,i5,i6,i7,Md215,dotrewrite-d215-3)
#endif
#break
#endswitch
#break
*--#] d215 : 
*--#[ d386 :
#case Md386
#procedure SimpleDotd386()
if (count(Md386,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p4^n? = i12^n;
	id Q.p9^n? = i13^n;
	id p4.p9^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 88
* path: (8,)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-1)
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-4)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-5)
#endif
#break
#case Q10
* path: (0, 3, 10)
#case Q3
* path: (0, 10, 3)
#case Q2
* path: (0, 10, 3, 2)
#case 210
* path: (2, 3, 10)
#case 310
* path: (3, 10)
#case 37
* path: (3, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p10.p - p3.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md386,dotrewrite-d386-1)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-2)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-3)
	#call replace(p2.p10,i11-i2/2-i7/2+i8/2,i,i11,i2,i7,i8,Md386,dotrewrite-d386-4)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p3.p4,i12-i14-i4/2+i6/2-i7/2,i,i12,i14,i4,i6,i7,Md386,dotrewrite-d386-6)
	#call replace(p2.p3,i1/2+i10/2+i11-i13-i2/2-i3/2-i7/2,i,i1,i10,i11,i13,i2,i3,i7,Md386,dotrewrite-d386-7)
#endif
#break
#case Q10
* path: (0, 10)
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md386,dotrewrite-d386-1)
	#call replace(p9.p10,i10/2-i3/2+i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-2)
	#call replace(p2.p10,i11-i2/2-i7/2+i8/2,i,i11,i2,i7,i8,Md386,dotrewrite-d386-3)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md386,dotrewrite-d386-4)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-5)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md386,dotrewrite-d386-1)
	#call replace(p9.p10,i10/2-i3/2+i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-4)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p8.p10,-`Q2'/2+i10/2+i11-i2/2+i8/2,i,i10,i11,i2,i8,Md386,dotrewrite-d386-6)
#endif
#break
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p2.p - p5.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p1.p + p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-5)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-6)
	#call replace(p1.p2,-i1/2-i10/2+i13-i2/2+i3/2+i7/2,i,i1,i10,i13,i2,i3,i7,Md386,dotrewrite-d386-7)
	#call replace(p1.p5,-i1/2-i10/2+i13-i14+i3/2-i5/2+i6/2,i,i1,i10,i13,i14,i3,i5,i6,Md386,dotrewrite-d386-8)
#endif
#break
#case 26
* path: (2, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-1)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md386,dotrewrite-d386-2)
	#call replace(p2.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md386,dotrewrite-d386-3)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-4)
	#call replace(p6.p9,i10/2-i13+i14-i3/2+i9/2,i,i10,i13,i14,i3,i9,Md386,dotrewrite-d386-5)
#endif
#break
#case 48
* path: (4, 5, 8)
#case 58
* path: (5, 8)
#case 59
* path: (5, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-2)
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-4)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p5.p9,-i1/2-i10/2+i13-i14+i3/2+i8/2,i,i1,i10,i13,i14,i3,i8,Md386,dotrewrite-d386-6)
#endif
#break
#case 510
* path: (5, 2, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p2.p - p5.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p10.p - p3.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md386,dotrewrite-d386-2)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-3)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-4)
	#call replace(p2.p10,i11-i2/2-i7/2+i8/2,i,i11,i2,i7,i8,Md386,dotrewrite-d386-5)
	#call replace(p5.p10,i11-i12-i2/2+i4/2-i6/2+i8/2,i,i11,i12,i2,i4,i6,i8,Md386,dotrewrite-d386-6)
	#call replace(p2.p3,i1/2+i10/2+i11-i13-i2/2-i3/2-i7/2,i,i1,i10,i11,i13,i2,i3,i7,Md386,dotrewrite-d386-7)
	#call replace(p3.p5,i1/2+i10/2+i11-i12-i13+i14-i2/2-i3/2+i4/2-i6/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i6,Md386,dotrewrite-d386-8)
#endif
#break
#case Q5
* path: (0, 7, 4, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md386,dotrewrite-d386-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(p5.p7,i2/2-i4/2+i6/2-i8/2,i,i2,i4,i6,i8,Md386,dotrewrite-d386-4)
	#call replace(p7.p9,-i10/2+i13+i3/2-i9/2,i,i10,i13,i3,i9,Md386,dotrewrite-d386-5)
	#call replace(p5.p9,-i1/2-i10/2+i13-i14+i3/2+i8/2,i,i1,i10,i13,i14,i3,i8,Md386,dotrewrite-d386-6)
#endif
#break
#case 36
* path: (3, 1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p7.p + p6.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p1.p + p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-0)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-1)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md386,dotrewrite-d386-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-4)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-5)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md386,dotrewrite-d386-6)
	#call replace(p3.p8,-`Q2'/2+i1/2+i10/2+i11-i2/2-i9/2,i,i1,i10,i11,i2,i9,Md386,dotrewrite-d386-7)
	#call replace(p1.p6,i10/2-i13+i14-i3/2+i5/2-i6/2-i8/2+i9/2,i,i10,i13,i14,i3,i5,i6,i8,i9,Md386,dotrewrite-d386-8)
	#call replace(p3.p6,-`Q2'/2+i12+i13-i14+i3/2-i4/2+i6/2-i9/2,i,i12,i13,i14,i3,i4,i6,i9,Md386,dotrewrite-d386-9)
#endif
#break
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-1)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-2)
	#call replace(p3.p4,i12-i14-i4/2+i6/2-i7/2,i,i12,i14,i4,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-4)
	#call replace(p2.p3,i1/2+i10/2+i11-i13-i2/2-i3/2-i7/2,i,i1,i10,i11,i13,i2,i3,i7,Md386,dotrewrite-d386-5)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case Q8
* path: (0, 7, 6, 8)
#case 67
* path: (6, 7)
#case 610
* path: (6, 7, 10)
#case 78
* path: (7, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p6.p + p7.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md386,dotrewrite-d386-0)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-1)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-2)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-3)
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md386,dotrewrite-d386-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-6)
	#call replace(p7.p9,-i10/2+i13+i3/2-i9/2,i,i10,i13,i3,i9,Md386,dotrewrite-d386-7)
	#call replace(p6.p9,i10/2-i13+i14-i3/2+i9/2,i,i10,i13,i14,i3,i9,Md386,dotrewrite-d386-8)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = - p3.p + p10.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p2.p - p5.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md386,dotrewrite-d386-2)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-3)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-4)
	#call replace(p5.p7,i2/2-i4/2+i6/2-i8/2,i,i2,i4,i6,i8,Md386,dotrewrite-d386-5)
	#call replace(p3.p7,`Q2'/2-i13-i3/2-i7/2+i9/2,i,i13,i3,i7,i9,Md386,dotrewrite-d386-6)
	#call replace(p2.p3,i1/2+i10/2+i11-i13-i2/2-i3/2-i7/2,i,i1,i10,i11,i13,i2,i3,i7,Md386,dotrewrite-d386-7)
	#call replace(p3.p5,i1/2+i10/2+i11-i12-i13+i14-i2/2-i3/2+i4/2-i6/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i6,Md386,dotrewrite-d386-8)
#endif
#break
#case Q1
* path: (0, 10, 3, 1)
#case 110
* path: (1, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + p9.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p10.p - p3.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md386,dotrewrite-d386-0)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-1)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-2)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md386,dotrewrite-d386-5)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-6)
	#call replace(p3.p4,i12-i14-i4/2+i6/2-i7/2,i,i12,i14,i4,i6,i7,Md386,dotrewrite-d386-7)
	#call replace(p1.p10,`Q2'/2-i11+i2/2-i3/2-i8/2+i9/2,i,i11,i2,i3,i8,i9,Md386,dotrewrite-d386-8)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md386,dotrewrite-d386-4)
	#call replace(p6.p9,i10/2-i13+i14-i3/2+i9/2,i,i10,i13,i14,i3,i9,Md386,dotrewrite-d386-5)
	#call replace(p5.p9,-i1/2-i10/2+i13-i14+i3/2+i8/2,i,i1,i10,i13,i14,i3,i8,Md386,dotrewrite-d386-6)
#endif
#break
#case Q3
* path: (0, 3)
#case 33
* path: (3,)
#case 39
* path: (3, 9)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-0)
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-1)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-4)
	#call replace(p3.p4,i12-i14-i4/2+i6/2-i7/2,i,i12,i14,i4,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p3.p8,-`Q2'/2+i1/2+i10/2+i11-i2/2-i9/2,i,i1,i10,i11,i2,i9,Md386,dotrewrite-d386-6)
#endif
#break
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p1.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p1.p9,i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-0)
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md386,dotrewrite-d386-1)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-2)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md386,dotrewrite-d386-4)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p3.p4,i12-i14-i4/2+i6/2-i7/2,i,i12,i14,i4,i6,i7,Md386,dotrewrite-d386-6)
#endif
#break
#case 17
* path: (1, 2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p8.p + p1.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md386,dotrewrite-d386-1)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-4)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p1.p2,-i1/2-i10/2+i13-i2/2+i3/2+i7/2,i,i1,i10,i13,i2,i3,i7,Md386,dotrewrite-d386-6)
	#call replace(p1.p7,-i10/2+i13-i2/2+i3/2+i7/2+i8/2-i9/2,i,i10,i13,i2,i3,i7,i8,i9,Md386,dotrewrite-d386-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p1.p + p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-4)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-5)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-6)
	#call replace(p1.p2,-i1/2-i10/2+i13-i2/2+i3/2+i7/2,i,i1,i10,i13,i2,i3,i7,Md386,dotrewrite-d386-7)
#endif
#break
#case Q6
* path: (0, 1, 8, 6)
#case 16
* path: (1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p1.p + p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-0)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-1)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md386,dotrewrite-d386-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-4)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-6)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-7)
	#call replace(p1.p6,i10/2-i13+i14-i3/2+i5/2-i6/2-i8/2+i9/2,i,i10,i13,i14,i3,i5,i6,i8,i9,Md386,dotrewrite-d386-8)
#endif
#break
#case 38
* path: (3, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p4} = + p1.p + p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-0)
	#call replace(Q.p3,`Q2'/2+i10/2-i13-i7/2,i,i10,i13,i7,Md386,dotrewrite-d386-1)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-2)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md386,dotrewrite-d386-5)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-6)
	#call replace(p3.p4,i12-i14-i4/2+i6/2-i7/2,i,i12,i14,i4,i6,i7,Md386,dotrewrite-d386-7)
	#call replace(p3.p8,-`Q2'/2+i1/2+i10/2+i11-i2/2-i9/2,i,i1,i10,i11,i2,i9,Md386,dotrewrite-d386-8)
#endif
#break
#case 68
* path: (6, 8)
#case 69
* path: (6, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-0)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-1)
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md386,dotrewrite-d386-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-4)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md386,dotrewrite-d386-5)
	#call replace(p6.p9,i10/2-i13+i14-i3/2+i9/2,i,i10,i13,i14,i3,i9,Md386,dotrewrite-d386-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q9
* path: (0, 1, 9)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 19
* path: (1, 9)
#case 29
* path: (2, 1, 9)
#case 49
* path: (4, 2, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p1.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(p1.p9,i1/2-i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-1)
	#call replace(Q.p1,`Q2'/2-i10/2-i11+i13+i7/2,i,i10,i11,i13,i7,Md386,dotrewrite-d386-2)
	#call replace(p1.p4,i14-i2/2+i5/2-i6/2+i7/2,i,i14,i2,i5,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-4)
	#call replace(p1.p2,-i1/2-i10/2+i13-i2/2+i3/2+i7/2,i,i1,i10,i13,i2,i3,i7,Md386,dotrewrite-d386-5)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p9.p - p8.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p2.p - p5.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	if (count(Md386,1)) id Q.p5 = i11 - i12;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md386,dotrewrite-d386-3)
	#call replace(p8.p9,-i1/2+i8/2+i9/2,i,i1,i8,i9,Md386,dotrewrite-d386-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md386,dotrewrite-d386-5)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-6)
	#call replace(p5.p9,-i1/2-i10/2+i13-i14+i3/2+i8/2,i,i1,i10,i13,i14,i3,i8,Md386,dotrewrite-d386-7)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q7
* path: (0, 2, 4, 7)
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 27
* path: (2, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 410
* path: (4, 7, 10)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#case 79
* path: (7, 10, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md386,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p8.p + p9.p;
	.sort:momrewrite-Md386-6;
	if (count(Md386,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p10.p - p9.p;
	.sort:momrewrite-Md386-5;
	if (count(Md386,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md386-4;
	if (count(Md386,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md386-3;
	if (count(Md386,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md386-2;
	if (count(Md386,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md386-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd386()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md386,dotrewrite-d386-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md386,dotrewrite-d386-1)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md386,dotrewrite-d386-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md386,dotrewrite-d386-3)
	#call replace(p7.p9,-i10/2+i13+i3/2-i9/2,i,i10,i13,i3,i9,Md386,dotrewrite-d386-4)
	#call replace(p2.p9,-i1/2-i10/2+i13+i3/2+i8/2,i,i1,i10,i13,i3,i8,Md386,dotrewrite-d386-5)
#endif
#break
#endswitch
#break
*--#] d386 : 
*--#[ d387 :
#case Md387
#procedure SimpleDotd387()
if (count(Md387,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-1)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-2)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-3)
	#call replace(p1.p4,i1/2-i10/2+i11-i13+i14+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i14,i7,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(p3.p4,-i10/2+i11+i14-i3/2-i4/2+i5/2+i7/2-i8/2+i9/2,i,i10,i11,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-5)
#endif
#break
#case Q5
* path: (0, 10, 3, 5)
#case 510
* path: (5, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p3.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-2)
	#call replace(p6.p10,i12-i4/2+i6/2+i7/2,i,i12,i4,i6,i7,Md387,dotrewrite-d387-3)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-4)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-5)
	#call replace(p3.p5,i10/2-i11+i13-i14-i3/2+i4/2-i5/2-i7/2+i8/2-i9/2,i,i10,i11,i13,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-6)
	#call replace(p5.p10,i10/2-i11-i12+i13-i2/2-i3/2+i4/2-i6/2-i7/2+i8/2,i,i10,i11,i12,i13,i2,i3,i4,i6,i7,i8,Md387,dotrewrite-d387-7)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-3)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-4)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md387,dotrewrite-d387-5)
	#call replace(p1.p5,i1/2+i10/2-i11-i14-i7/2+i8/2-i9/2,i,i1,i10,i11,i14,i7,i8,i9,Md387,dotrewrite-d387-6)
	#call replace(p1.p7,i1/2-i10/2+i11-i13+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i7,i8,i9,Md387,dotrewrite-d387-7)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-3)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-5)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md387,dotrewrite-d387-6)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-7)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i13+i8/2-i9/2,i,i1,i11,i13,i8,i9,Md387,dotrewrite-d387-8)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md387,dotrewrite-d387-9)
#endif
#break
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p5.p + p8.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-2)
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-3)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md387,dotrewrite-d387-4)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p5.p9,-i12+i14-i2/2+i5/2-i6/2+i9/2,i,i12,i14,i2,i5,i6,i9,Md387,dotrewrite-d387-7)
	#call replace(p3.p5,i10/2-i11+i13-i14-i3/2+i4/2-i5/2-i7/2+i8/2-i9/2,i,i10,i11,i13,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case Q8
* path: (0, 7, 6, 8)
#case 78
* path: (7, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-5)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md387,dotrewrite-d387-7)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i13+i8/2-i9/2,i,i1,i11,i13,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case Q4
* path: (0, 7, 4)
#case 27
* path: (2, 1, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-5)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md387,dotrewrite-d387-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i13+i8/2-i9/2,i,i1,i11,i13,i8,i9,Md387,dotrewrite-d387-7)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md387,dotrewrite-d387-8)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-9)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-3)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-4)
	#call replace(p3.p7,-i10/2+i11-i3/2+i9/2,i,i10,i11,i3,i9,Md387,dotrewrite-d387-5)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i13+i8/2-i9/2,i,i1,i11,i13,i8,i9,Md387,dotrewrite-d387-7)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-4)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-5)
	#call replace(p4.p5,i1/2-i13+i3/2-i4/2-i5/2,i,i1,i13,i3,i4,i5,Md387,dotrewrite-d387-6)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-7)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-3)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-4)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-5)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md387,dotrewrite-d387-7)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p10.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-0)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-1)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-2)
	#call replace(p3.p7,-i10/2+i11-i3/2+i9/2,i,i10,i11,i3,i9,Md387,dotrewrite-d387-3)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-4)
	#call replace(p3.p8,i10/2-i11+i13-i3/2-i9/2,i,i10,i11,i13,i3,i9,Md387,dotrewrite-d387-5)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md387,dotrewrite-d387-6)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md387,dotrewrite-d387-7)
	#call replace(p3.p4,-i10/2+i11+i14-i3/2-i4/2+i5/2+i7/2-i8/2+i9/2,i,i10,i11,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case 410
* path: (4, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p3.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md387,dotrewrite-d387-2)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-4)
	#call replace(p2.p10,i11-i13+i2/2-i8/2+i9/2,i,i11,i13,i2,i8,i9,Md387,dotrewrite-d387-5)
	#call replace(p4.p10,`Q2'/2-i10/2+i12-i4/2+i6/2,i,i10,i12,i4,i6,Md387,dotrewrite-d387-6)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-7)
	#call replace(p3.p4,-i10/2+i11+i14-i3/2-i4/2+i5/2+i7/2-i8/2+i9/2,i,i10,i11,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-3)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-4)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i13+i8/2-i9/2,i,i1,i11,i13,i8,i9,Md387,dotrewrite-d387-7)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md387,dotrewrite-d387-8)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md387,dotrewrite-d387-2)
	#call replace(p9.p10,i10/2-i3/2+i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-3)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md387,dotrewrite-d387-4)
	#call replace(p6.p10,i12-i4/2+i6/2+i7/2,i,i12,i4,i6,i7,Md387,dotrewrite-d387-5)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p6.p9,i12-i14-i5/2+i6/2+i8/2,i,i12,i14,i5,i6,i8,Md387,dotrewrite-d387-7)
	#call replace(p8.p10,i10/2-i11+i13-i2/2-i3/2+i8/2,i,i10,i11,i13,i2,i3,i8,Md387,dotrewrite-d387-8)
#endif
#break
#case 49
* path: (4, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-2)
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-4)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md387,dotrewrite-d387-5)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-6)
	#call replace(p3.p4,-i10/2+i11+i14-i3/2-i4/2+i5/2+i7/2-i8/2+i9/2,i,i10,i11,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-7)
	#call replace(p4.p9,`Q2'/2-i11+i12-i14+i3/2-i5/2+i6/2-i7/2+i8/2-i9/2,i,i11,i12,i14,i3,i5,i6,i7,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 29
* path: (2, 9)
#case 33
* path: (3,)
#case 39
* path: (3, 9)
#case 66
* path: (6,)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-3)
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-4)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md387,dotrewrite-d387-5)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-6)
	#call replace(p6.p9,i12-i14-i5/2+i6/2+i8/2,i,i12,i14,i5,i6,i8,Md387,dotrewrite-d387-7)
#endif
#break
#case 69
* path: (6, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-0)
	#call replace(p3.p9,i10/2-i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-2)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md387,dotrewrite-d387-3)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-5)
	#call replace(p3.p8,i10/2-i11+i13-i3/2-i9/2,i,i10,i11,i13,i3,i9,Md387,dotrewrite-d387-6)
	#call replace(p6.p9,i12-i14-i5/2+i6/2+i8/2,i,i12,i14,i5,i6,i8,Md387,dotrewrite-d387-7)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-3)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-4)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-5)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p3.p8,i10/2-i11+i13-i3/2-i9/2,i,i10,i11,i13,i3,i9,Md387,dotrewrite-d387-7)
#endif
#break
#case 38
* path: (3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-3)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-5)
	#call replace(p3.p8,i10/2-i11+i13-i3/2-i9/2,i,i10,i11,i13,i3,i9,Md387,dotrewrite-d387-6)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-7)
	#call replace(p3.p5,i10/2-i11+i13-i14-i3/2+i4/2-i5/2-i7/2+i8/2-i9/2,i,i10,i11,i13,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p3.p + p9.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-3)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p3.p5,i10/2-i11+i13-i14-i3/2+i4/2-i5/2-i7/2+i8/2-i9/2,i,i10,i11,i13,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-7)
#endif
#break
#case Q10
* path: (0, 10)
#case Q3
* path: (0, 10, 3)
#case 310
* path: (3, 10)
#case 610
* path: (6, 7, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p3.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p3 = i11 - i13;
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md387,dotrewrite-d387-3)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-4)
	#call replace(p6.p10,i12-i4/2+i6/2+i7/2,i,i12,i4,i6,i7,Md387,dotrewrite-d387-5)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-6)
	#call replace(p2.p10,i11-i13+i2/2-i8/2+i9/2,i,i11,i13,i2,i8,i9,Md387,dotrewrite-d387-7)
#endif
#break
#case Q10
* path: (0, 1, 3, 10)
#case Q1
* path: (0, 10, 3, 1)
#case 110
* path: (1, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p3.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p3.p10,i10/2+i3/2-i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-2)
	#call replace(p6.p10,i12-i4/2+i6/2+i7/2,i,i12,i4,i6,i7,Md387,dotrewrite-d387-3)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-4)
	#call replace(p1.p10,`Q2'/2+i10/2-i11+i13-i2/2-i7/2+i8/2-i9/2,i,i10,i11,i13,i2,i7,i8,i9,Md387,dotrewrite-d387-5)
#endif
#break
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md387,dotrewrite-d387-2)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-3)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(p4.p5,i1/2-i13+i3/2-i4/2-i5/2,i,i1,i13,i3,i4,i5,Md387,dotrewrite-d387-5)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i7/2,i,i1,i10,i11,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-7)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md387,dotrewrite-d387-8)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-9)
#endif
#break
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-2)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-3)
	#call replace(p2.p5,-i12+i14-i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md387,dotrewrite-d387-4)
	#call replace(p4.p5,i1/2-i13+i3/2-i4/2-i5/2,i,i1,i13,i3,i4,i5,Md387,dotrewrite-d387-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md387,dotrewrite-d387-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i13+i8/2-i9/2,i,i1,i11,i13,i8,i9,Md387,dotrewrite-d387-7)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md387,dotrewrite-d387-8)
	#call replace(p2.p4,`Q2'/2-i1/2-i11+i12+i13-i14+i8/2-i9/2,i,i1,i11,i12,i13,i14,i8,i9,Md387,dotrewrite-d387-9)
#endif
#break
#case Q7
* path: (0, 1, 4, 7)
#case 17
* path: (1, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-2)
	#call replace(Q.p4,`Q2'/2-i10/2+i12+i7/2,i,i10,i12,i7,Md387,dotrewrite-d387-3)
	#call replace(p3.p7,-i10/2+i11-i3/2+i9/2,i,i10,i11,i3,i9,Md387,dotrewrite-d387-4)
	#call replace(p1.p7,i1/2-i10/2+i11-i13+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i7,i8,i9,Md387,dotrewrite-d387-5)
	#call replace(p1.p4,i1/2-i10/2+i11-i13+i14+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i14,i7,i8,i9,Md387,dotrewrite-d387-6)
	#call replace(p3.p4,-i10/2+i11+i14-i3/2-i4/2+i5/2+i7/2-i8/2+i9/2,i,i10,i11,i14,i3,i4,i5,i7,i8,i9,Md387,dotrewrite-d387-7)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case Q2
* path: (0, 10, 9, 2)
#case 210
* path: (2, 9, 10)
#case 79
* path: (7, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p10.p - p9.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	if (count(Md387,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md387,dotrewrite-d387-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md387,dotrewrite-d387-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md387,dotrewrite-d387-3)
	#call replace(p9.p10,i10/2-i3/2+i9/2,i,i10,i3,i9,Md387,dotrewrite-d387-4)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md387,dotrewrite-d387-5)
	#call replace(p6.p10,i12-i4/2+i6/2+i7/2,i,i12,i4,i6,i7,Md387,dotrewrite-d387-6)
	#call replace(p6.p9,i12-i14-i5/2+i6/2+i8/2,i,i12,i14,i5,i6,i8,Md387,dotrewrite-d387-7)
	#call replace(p2.p10,i11-i13+i2/2-i8/2+i9/2,i,i11,i13,i2,i8,i9,Md387,dotrewrite-d387-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md387,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md387-6;
	if (count(Md387,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md387-5;
	if (count(Md387,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p10.p;
	.sort:momrewrite-Md387-4;
	if (count(Md387,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md387-3;
	if (count(Md387,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md387-2;
	if (count(Md387,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md387-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd387()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md387,dotrewrite-d387-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md387,dotrewrite-d387-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md387,dotrewrite-d387-2)
	#call replace(p3.p7,-i10/2+i11-i3/2+i9/2,i,i10,i11,i3,i9,Md387,dotrewrite-d387-3)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md387,dotrewrite-d387-4)
	#call replace(p1.p7,i1/2-i10/2+i11-i13+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i7,i8,i9,Md387,dotrewrite-d387-5)
#endif
#break
#endswitch
#break
*--#] d387 : 
*--#[ d388 :
#case Md388
#procedure SimpleDotd388()
if (count(Md388,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-0)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-1)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-3)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-5)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-6)
	#call replace(p4.p9,-i12+i14-i3/2+i5/2-i6/2+i7/2,i,i12,i14,i3,i5,i6,i7,Md388,dotrewrite-d388-7)
#endif
#break
#case Q10
* path: (0, 10)
#case Q2
* path: (0, 10, 1, 2)
#case Q3
* path: (0, 10, 3)
#case 210
* path: (2, 1, 10)
#case 310
* path: (3, 10)
#case 410
* path: (4, 3, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md388,dotrewrite-d388-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md388,dotrewrite-d388-6)
	#call replace(p2.p10,`Q2'/2-i1/2-i11+i13-i8/2+i9/2,i,i1,i11,i13,i8,i9,Md388,dotrewrite-d388-7)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md388,dotrewrite-d388-1)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-2)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md388,dotrewrite-d388-3)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-5)
	#call replace(p8.p10,-`Q2'/2+i10/2+i11-i3/2+i8/2,i,i10,i11,i3,i8,Md388,dotrewrite-d388-6)
	#call replace(p9.p10,i1/2-i10/2-i13+i3/2-i9/2,i,i1,i10,i13,i3,i9,Md388,dotrewrite-d388-7)
	#call replace(p4.p9,-i12+i14-i3/2+i5/2-i6/2+i7/2,i,i12,i14,i3,i5,i6,i7,Md388,dotrewrite-d388-8)
#endif
#break
#case 79
* path: (7, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md388,dotrewrite-d388-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-3)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-4)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(p4.p9,-i12+i14-i3/2+i5/2-i6/2+i7/2,i,i12,i14,i3,i5,i6,i7,Md388,dotrewrite-d388-6)
	#call replace(p7.p9,-i11+i13-i2/2-i3/2+i7/2+i9/2,i,i11,i13,i2,i3,i7,i9,Md388,dotrewrite-d388-7)
#endif
#break
#case 69
* path: (6, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-0)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-1)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md388,dotrewrite-d388-3)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md388,dotrewrite-d388-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-5)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-6)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-7)
	#call replace(p6.p9,i11-i12-i13+i14+i2/2+i5/2-i6/2-i9/2,i,i11,i12,i13,i14,i2,i5,i6,i9,Md388,dotrewrite-d388-8)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 610
* path: (6, 7, 10)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p6.p + p7.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md388,dotrewrite-d388-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-3)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md388,dotrewrite-d388-5)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md388,dotrewrite-d388-6)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md388,dotrewrite-d388-7)
	#call replace(p2.p6,-i11+i12+i13-i14-i2/2-i8/2+i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md388,dotrewrite-d388-8)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p2.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md388,dotrewrite-d388-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-1)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-2)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-3)
	#call replace(p1.p9,i1/2-i10/2-i11+i7/2-i8/2+i9/2,i,i1,i10,i11,i7,i8,i9,Md388,dotrewrite-d388-4)
	#call replace(p4.p9,-i12+i14-i3/2+i5/2-i6/2+i7/2,i,i12,i14,i3,i5,i6,i7,Md388,dotrewrite-d388-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 28
* path: (2, 8)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-4)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-6)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md388,dotrewrite-d388-7)
#endif
#break
#case Q6
* path: (0, 2, 8, 6)
#case 16
* path: (1, 2, 8, 6)
#case 26
* path: (2, 8, 6)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-3)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md388,dotrewrite-d388-5)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md388,dotrewrite-d388-6)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-7)
	#call replace(p2.p6,-i11+i12+i13-i14-i2/2-i8/2+i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md388,dotrewrite-d388-8)
#endif
#break
#case 29
* path: (2, 9)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p9.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p2.p9,-i2/2+i8/2-i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-4)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-5)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-6)
	#call replace(p4.p9,-i12+i14-i3/2+i5/2-i6/2+i7/2,i,i12,i14,i3,i5,i6,i7,Md388,dotrewrite-d388-7)
#endif
#break
#case Q5
* path: (0, 10, 3, 5)
#case 510
* path: (5, 3, 10)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	if (count(Md388,1)) id p1.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md388,dotrewrite-d388-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(p5.p10,i11-i12-i3/2+i4/2-i6/2+i8/2,i,i11,i12,i3,i4,i6,i8,Md388,dotrewrite-d388-6)
	#call replace(p1.p10,i1/2+i10/2+i11-i13-i7/2+i8/2-i9/2,i,i1,i10,i11,i13,i7,i8,i9,Md388,dotrewrite-d388-7)
#endif
#break
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p9.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p2.p9,-i2/2+i8/2-i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-4)
	#call replace(p2.p5,i11-i12-i13+i14,i,i11,i12,i13,i14,Md388,dotrewrite-d388-5)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-6)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-7)
	#call replace(p5.p9,-i11+i12+i13-i14-i5/2+i6/2-i8/2,i,i11,i12,i13,i14,i5,i6,i8,Md388,dotrewrite-d388-8)
#endif
#break
#case Q8
* path: (0, 7, 6, 8)
#case 78
* path: (7, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p7.p + p8.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p6.p + p7.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md388,dotrewrite-d388-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-3)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-4)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md388,dotrewrite-d388-6)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-7)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md388,dotrewrite-d388-8)
	#call replace(p2.p6,-i11+i12+i13-i14-i2/2-i8/2+i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md388,dotrewrite-d388-9)
#endif
#break
#case Q10
* path: (0, 1, 10)
#case Q7
* path: (0, 1, 10, 7)
#case Q1
* path: (0, 10, 1)
#case 110
* path: (1, 10)
#case 17
* path: (1, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md388,dotrewrite-d388-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md388,dotrewrite-d388-2)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md388,dotrewrite-d388-3)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(p1.p10,i1/2+i10/2+i11-i13-i7/2+i8/2-i9/2,i,i1,i10,i11,i13,i7,i8,i9,Md388,dotrewrite-d388-5)
#endif
#break
#case 25
* path: (2, 8, 5)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-4)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-6)
	#call replace(p2.p5,i11-i12-i13+i14,i,i11,i12,i13,i14,Md388,dotrewrite-d388-7)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-8)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-5)
	#call replace(p2.p5,i11-i12-i13+i14,i,i11,i12,i13,i14,Md388,dotrewrite-d388-6)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md388,dotrewrite-d388-7)
	#call replace(p2.p6,-i11+i12+i13-i14-i2/2-i8/2+i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md388,dotrewrite-d388-8)
#endif
#break
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md388,dotrewrite-d388-5)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md388,dotrewrite-d388-6)
	#call replace(p2.p6,-i11+i12+i13-i14-i2/2-i8/2+i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md388,dotrewrite-d388-7)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	if (count(Md388,1)) id p1.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-6)
	#call replace(p1.p8,-`Q2'/2+i10/2+i11+i2/2-i7/2+i8/2-i9/2,i,i10,i11,i2,i7,i8,i9,Md388,dotrewrite-d388-7)
#endif
#break
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md388,dotrewrite-d388-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-5)
	#call replace(p2.p5,i11-i12-i13+i14,i,i11,i12,i13,i14,Md388,dotrewrite-d388-6)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md388,dotrewrite-d388-7)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md388,dotrewrite-d388-8)
#endif
#break
#case 45
* path: (4, 5)
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	if (count(Md388,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md388,dotrewrite-d388-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md388,dotrewrite-d388-5)
	#call replace(p2.p5,i11-i12-i13+i14,i,i11,i12,i13,i14,Md388,dotrewrite-d388-6)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-7)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md388,dotrewrite-d388-8)
#endif
#break
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 27
* path: (2, 1, 10, 7)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	if (count(Md388,1)) id p2.p3 = i11 - i13;
	if (count(Md388,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md388,dotrewrite-d388-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md388,dotrewrite-d388-4)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md388,dotrewrite-d388-6)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md388,dotrewrite-d388-7)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md388,dotrewrite-d388-1)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md388,dotrewrite-d388-2)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md388,dotrewrite-d388-3)
	#call replace(Q.p9,i1/2-i10/2-i11-i2/2+i7/2,i,i1,i10,i11,i2,i7,Md388,dotrewrite-d388-4)
	#call replace(p3.p9,-i11+i13-i3/2+i7/2-i8/2,i,i11,i13,i3,i7,i8,Md388,dotrewrite-d388-5)
	#call replace(p9.p10,i1/2-i10/2-i13+i3/2-i9/2,i,i1,i10,i13,i3,i9,Md388,dotrewrite-d388-6)
	#call replace(p4.p9,-i12+i14-i3/2+i5/2-i6/2+i7/2,i,i12,i14,i3,i5,i6,i7,Md388,dotrewrite-d388-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md388,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md388-6;
	if (count(Md388,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md388-5;
	if (count(Md388,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md388-4;
	if (count(Md388,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md388-3;
	if (count(Md388,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md388-2;
	if (count(Md388,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md388-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd388()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md388,dotrewrite-d388-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md388,dotrewrite-d388-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md388,dotrewrite-d388-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md388,dotrewrite-d388-3)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md388,dotrewrite-d388-4)
	#call replace(p1.p8,-`Q2'/2+i10/2+i11+i2/2-i7/2+i8/2-i9/2,i,i10,i11,i2,i7,i8,i9,Md388,dotrewrite-d388-5)
#endif
#break
#endswitch
#break
*--#] d388 : 
*--#[ d389 :
#case Md389
#procedure SimpleDotd389()
if (count(Md389,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q10
* path: (0, 10)
#case Q4
* path: (0, 10, 4)
#case 34
* path: (3, 4)
#case 310
* path: (3, 4, 10)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 410
* path: (4, 10)
#case 510
* path: (5, 7, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md389,dotrewrite-d389-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md389,dotrewrite-d389-2)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md389,dotrewrite-d389-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md389,dotrewrite-d389-5)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md389,dotrewrite-d389-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md389,dotrewrite-d389-3)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-4)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md389,dotrewrite-d389-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q10
* path: (0, 1, 4, 10)
#case 14
* path: (1, 4)
#case 110
* path: (1, 4, 10)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md389,dotrewrite-d389-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md389,dotrewrite-d389-3)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md389,dotrewrite-d389-5)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md389,dotrewrite-d389-6)
	#call replace(p1.p10,i10/2+i11-i3/2+i4/2-i7/2+i8/2-i9/2,i,i10,i11,i3,i4,i7,i8,i9,Md389,dotrewrite-d389-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q3
* path: (0, 7, 3)
#case Q5
* path: (0, 7, 5)
#case 27
* path: (2, 1, 3, 7)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md389,dotrewrite-d389-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md389,dotrewrite-d389-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md389,dotrewrite-d389-5)
	#call replace(p2.p7,-i1/2+i11+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i11,i2,i3,i4,i8,i9,Md389,dotrewrite-d389-6)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	if (count(Md389,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-3)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md389,dotrewrite-d389-5)
	#call replace(p2.p4,`Q2'/2-i11-i2/2+i3/2-i4/2,i,i11,i2,i3,i4,Md389,dotrewrite-d389-6)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-7)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md389,dotrewrite-d389-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md389,dotrewrite-d389-3)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-4)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md389,dotrewrite-d389-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md389,dotrewrite-d389-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md389,dotrewrite-d389-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md389,dotrewrite-d389-3)
	#call replace(p3.p6,-i14+i3/2-i7/2+i8/2,i,i14,i3,i7,i8,Md389,dotrewrite-d389-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i12-i7/2,i,i10,i11,i12,i7,Md389,dotrewrite-d389-5)
	#call replace(p2.p6,-i12+i13-i2/2-i8/2+i9/2,i,i12,i13,i2,i8,i9,Md389,dotrewrite-d389-6)
#endif
#break
#case 48
* path: (4, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p4.p5 = i13 - i14;
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md389,dotrewrite-d389-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md389,dotrewrite-d389-5)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-6)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-7)
	#call replace(p4.p8,-`Q2'/2+i10/2+i11+i2/2-i3/2-i9/2,i,i10,i11,i2,i3,i9,Md389,dotrewrite-d389-8)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 79
* path: (7, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md389,dotrewrite-d389-0)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-1)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md389,dotrewrite-d389-2)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-3)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md389,dotrewrite-d389-4)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-5)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md389,dotrewrite-d389-6)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md389,dotrewrite-d389-2)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md389,dotrewrite-d389-4)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-6)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md389,dotrewrite-d389-7)
	#call replace(p8.p10,-`Q2'/2+i10/2+i11-i3/2+i8/2,i,i10,i11,i3,i8,Md389,dotrewrite-d389-8)
#endif
#break
#case Q8
* path: (0, 7, 5, 8)
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md389,dotrewrite-d389-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-4)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md389,dotrewrite-d389-6)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md389,dotrewrite-d389-7)
	#call replace(p2.p7,-i1/2+i11+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i11,i2,i3,i4,i8,i9,Md389,dotrewrite-d389-8)
#endif
#break
#case Q2
* path: (0, 10, 9, 2)
#case 210
* path: (2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p10.p - p9.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md389,dotrewrite-d389-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md389,dotrewrite-d389-3)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md389,dotrewrite-d389-4)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-6)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md389,dotrewrite-d389-7)
	#call replace(p2.p10,`Q2'/2-i11+i3/2-i4/2-i8/2+i9/2,i,i11,i3,i4,i8,i9,Md389,dotrewrite-d389-8)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	if (count(Md389,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md389,dotrewrite-d389-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md389,dotrewrite-d389-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md389,dotrewrite-d389-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md389,dotrewrite-d389-5)
	#call replace(p4.p7,`Q2'/2+i1/2-i10/2-i11-i2/2-i4/2+i9/2,i,i1,i10,i11,i2,i4,i9,Md389,dotrewrite-d389-6)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case Q1
* path: (0, 7, 3, 1)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md389,dotrewrite-d389-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md389,dotrewrite-d389-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md389,dotrewrite-d389-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md389,dotrewrite-d389-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i10/2-i11-i2/2+i3/2-i4/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i2,i3,i4,i7,i8,i9,Md389,dotrewrite-d389-5)
#endif
#break
#case 59
* path: (5, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-0)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md389,dotrewrite-d389-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md389,dotrewrite-d389-3)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md389,dotrewrite-d389-4)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md389,dotrewrite-d389-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md389,dotrewrite-d389-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md389,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md389-6;
	if (count(Md389,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md389-5;
	if (count(Md389,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md389-4;
	if (count(Md389,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md389-3;
	if (count(Md389,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md389-2;
	if (count(Md389,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md389-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd389()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md389,dotrewrite-d389-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md389,dotrewrite-d389-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md389,dotrewrite-d389-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md389,dotrewrite-d389-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md389,dotrewrite-d389-4)
	#call replace(p1.p8,-`Q2'/2+i10/2+i11+i2/2-i7/2+i8/2-i9/2,i,i10,i11,i2,i7,i8,i9,Md389,dotrewrite-d389-5)
#endif
#break
#endswitch
#break
*--#] d389 : 
*--#[ d390 :
#case Md390
#procedure SimpleDotd390()
if (count(Md390,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md390,dotrewrite-d390-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md390,dotrewrite-d390-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md390,dotrewrite-d390-3)
	#call replace(Q.p6,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md390,dotrewrite-d390-4)
	#call replace(p3.p6,-i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md390,dotrewrite-d390-5)
	#call replace(p2.p6,-i1/2+i11-i12+i13+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i11,i12,i13,i2,i3,i4,i8,i9,Md390,dotrewrite-d390-6)
#endif
#break
#case Q10
* path: (0, 10)
#case Q4
* path: (0, 10, 4)
#case Q3
* path: (0, 10, 4, 3)
#case 34
* path: (3, 4)
#case 310
* path: (3, 4, 10)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 410
* path: (4, 10)
#case 47
* path: (4, 10, 7)
#case 510
* path: (5, 7, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md390,dotrewrite-d390-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md390,dotrewrite-d390-2)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Md390,dotrewrite-d390-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md390,dotrewrite-d390-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md390,dotrewrite-d390-5)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md390,dotrewrite-d390-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q10
* path: (0, 1, 4, 10)
#case Q1
* path: (0, 10, 4, 1)
#case 14
* path: (1, 4)
#case 110
* path: (1, 4, 10)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md390,dotrewrite-d390-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md390,dotrewrite-d390-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md390,dotrewrite-d390-3)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Md390,dotrewrite-d390-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md390,dotrewrite-d390-5)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md390,dotrewrite-d390-6)
	#call replace(p1.p10,i10/2+i11-i3/2+i4/2-i7/2+i8/2-i9/2,i,i10,i11,i3,i4,i7,i8,i9,Md390,dotrewrite-d390-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case Q3
* path: (0, 7, 5, 3)
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md390,dotrewrite-d390-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md390,dotrewrite-d390-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md390,dotrewrite-d390-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md390,dotrewrite-d390-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md390,dotrewrite-d390-5)
	#call replace(p2.p7,-i1/2+i11+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i11,i2,i3,i4,i8,i9,Md390,dotrewrite-d390-6)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md390,dotrewrite-d390-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md390,dotrewrite-d390-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md390,dotrewrite-d390-3)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md390,dotrewrite-d390-4)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md390,dotrewrite-d390-5)
	#call replace(p5.p9,i12-i13+i14-i5/2+i6/2-i7/2,i,i12,i13,i14,i5,i6,i7,Md390,dotrewrite-d390-6)
#endif
#break
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 8)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md390,dotrewrite-d390-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md390,dotrewrite-d390-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md390,dotrewrite-d390-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md390,dotrewrite-d390-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md390,dotrewrite-d390-5)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md390,dotrewrite-d390-6)
#endif
#break
#case Q7
* path: (0, 1, 3, 5, 7)
#case 17
* path: (1, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md390,dotrewrite-d390-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md390,dotrewrite-d390-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md390,dotrewrite-d390-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md390,dotrewrite-d390-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md390,dotrewrite-d390-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i10/2-i11-i2/2+i3/2-i4/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i2,i3,i4,i7,i8,i9,Md390,dotrewrite-d390-5)
#endif
#break
#case 39
* path: (3, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md390,dotrewrite-d390-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md390,dotrewrite-d390-1)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md390,dotrewrite-d390-2)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md390,dotrewrite-d390-3)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md390,dotrewrite-d390-4)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md390,dotrewrite-d390-5)
	#call replace(p5.p9,i12-i13+i14-i5/2+i6/2-i7/2,i,i12,i13,i14,i5,i6,i7,Md390,dotrewrite-d390-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	if (count(Md390,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md390,dotrewrite-d390-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md390,dotrewrite-d390-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md390,dotrewrite-d390-3)
	#call replace(Q.p9,-i1/2+i10/2+i11+i2/2-i7/2,i,i1,i10,i11,i2,i7,Md390,dotrewrite-d390-4)
	#call replace(p3.p9,-i1/2+i11+i4/2-i7/2+i8/2,i,i1,i11,i4,i7,i8,Md390,dotrewrite-d390-5)
	#call replace(p5.p9,i12-i13+i14-i5/2+i6/2-i7/2,i,i12,i13,i14,i5,i6,i7,Md390,dotrewrite-d390-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md390,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md390-6;
	if (count(Md390,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md390-5;
	if (count(Md390,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md390-4;
	if (count(Md390,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md390-3;
	if (count(Md390,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md390-2;
	if (count(Md390,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md390-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd390()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md390,dotrewrite-d390-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md390,dotrewrite-d390-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md390,dotrewrite-d390-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md390,dotrewrite-d390-3)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md390,dotrewrite-d390-4)
	#call replace(p1.p8,-`Q2'/2+i10/2+i11+i2/2-i7/2+i8/2-i9/2,i,i10,i11,i2,i7,i8,i9,Md390,dotrewrite-d390-5)
#endif
#break
#endswitch
#break
*--#] d390 : 
*--#[ d391 :
#case Md391
#procedure SimpleDotd391()
if (count(Md391,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p6^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 5, 3)
#case 35
* path: (3, 5)
#case 310
* path: (3, 5, 10)
#case 45
* path: (4, 3, 5)
#case 510
* path: (5, 10)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p2.p + p9.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p4.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p5 = i11 - i12;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-2)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md391,dotrewrite-d391-3)
	#call replace(p4.p10,-i10/2-i4/2+i9/2,i,i10,i4,i9,Md391,dotrewrite-d391-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-5)
	#call replace(p4.p5,i1/2-i14-i4/2-i5/2+i6/2,i,i1,i14,i4,i5,i6,Md391,dotrewrite-d391-6)
	#call replace(p3.p10,-`Q2'/2+i10/2-i13+i3/2-i8/2,i,i10,i13,i3,i8,Md391,dotrewrite-d391-7)
	#call replace(p5.p10,-`Q2'/2+i10/2+i12-i13+i5/2-i7/2,i,i10,i12,i13,i5,i7,Md391,dotrewrite-d391-8)
#endif
#break
#case 37
* path: (3, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md391,dotrewrite-d391-4)
	#call replace(p1.p7,i13-i14+i2/2+i8/2-i9/2,i,i13,i14,i2,i8,i9,Md391,dotrewrite-d391-5)
	#call replace(p3.p7,`Q2'/2-i10/2-i11+i13+i5/2-i6/2+i8/2,i,i10,i11,i13,i5,i6,i8,Md391,dotrewrite-d391-6)
#endif
#break
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p5 = i11 - i12;
	if (count(Md391,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md391,dotrewrite-d391-4)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md391,dotrewrite-d391-5)
	#call replace(p1.p7,i13-i14+i2/2+i8/2-i9/2,i,i13,i14,i2,i8,i9,Md391,dotrewrite-d391-6)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i13+i5/2+i7/2,i,i10,i11,i13,i5,i7,Md391,dotrewrite-d391-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-1)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md391,dotrewrite-d391-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-3)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md391,dotrewrite-d391-4)
	#call replace(p1.p8,i13+i2/2+i8/2-i9/2,i,i13,i2,i8,i9,Md391,dotrewrite-d391-5)
	#call replace(p4.p8,-`Q2'/2+i10/2+i11+i2/2-i3/2-i9/2,i,i10,i11,i2,i3,i9,Md391,dotrewrite-d391-6)
#endif
#break
#case 47
* path: (4, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p4.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p7 = -i12 + i13;
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md391,dotrewrite-d391-1)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md391,dotrewrite-d391-2)
	#call replace(p4.p10,-i10/2-i4/2+i9/2,i,i10,i4,i9,Md391,dotrewrite-d391-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md391,dotrewrite-d391-5)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md391,dotrewrite-d391-6)
	#call replace(p7.p10,`Q2'/2-i10/2-i11+i12+i5/2-i7/2,i,i10,i11,i12,i5,i7,Md391,dotrewrite-d391-7)
	#call replace(p4.p7,-`Q2'/2+i10/2+i11-i14+i2/2-i5/2+i6/2-i9/2,i,i10,i11,i14,i2,i5,i6,i9,Md391,dotrewrite-d391-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p2.p + p9.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md391,dotrewrite-d391-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-3)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md391,dotrewrite-d391-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i13+i2/2,i,i1,i13,i2,Md391,dotrewrite-d391-5)
	#call replace(p6.p9,i12-i14+i6/2-i7/2+i8/2,i,i12,i14,i6,i7,i8,Md391,dotrewrite-d391-6)
	#call replace(p3.p9,`Q2'/2-i1/2-i10/2+i13+i4/2+i8/2,i,i1,i10,i13,i4,i8,Md391,dotrewrite-d391-7)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 5, 3, 1)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-3)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md391,dotrewrite-d391-4)
	#call replace(p1.p8,i13+i2/2+i8/2-i9/2,i,i13,i2,i8,i9,Md391,dotrewrite-d391-5)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md391,dotrewrite-d391-6)
	#call replace(p5.p8,`Q2'/2-i10/2-i11+i13+i3/2-i6/2+i7/2,i,i10,i11,i13,i3,i6,i7,Md391,dotrewrite-d391-7)
#endif
#break
#case Q10
* path: (0, 10)
#case Q4
* path: (0, 10, 4)
#case 34
* path: (3, 4)
#case 310
* path: (3, 4, 10)
#case 46
* path: (4, 3, 6)
#case 410
* path: (4, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p2.p + p9.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p4.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-1)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md391,dotrewrite-d391-2)
	#call replace(p4.p10,-i10/2-i4/2+i9/2,i,i10,i4,i9,Md391,dotrewrite-d391-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md391,dotrewrite-d391-5)
	#call replace(p3.p10,-`Q2'/2+i10/2-i13+i3/2-i8/2,i,i10,i13,i3,i8,Md391,dotrewrite-d391-6)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md391,dotrewrite-d391-7)
#endif
#break
#case 610
* path: (6, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p2.p + p9.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p4.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-2)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md391,dotrewrite-d391-3)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md391,dotrewrite-d391-4)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md391,dotrewrite-d391-5)
	#call replace(p1.p10,-`Q2'/2-i13+i3/2-i4/2-i8/2+i9/2,i,i13,i3,i4,i8,i9,Md391,dotrewrite-d391-6)
	#call replace(p5.p10,-`Q2'/2+i10/2+i12-i13+i5/2-i7/2,i,i10,i12,i13,i5,i7,Md391,dotrewrite-d391-7)
#endif
#break
#case 17
* path: (1, 2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-2)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md391,dotrewrite-d391-3)
	#call replace(p1.p8,i13+i2/2+i8/2-i9/2,i,i13,i2,i8,i9,Md391,dotrewrite-d391-4)
	#call replace(p1.p7,i13-i14+i2/2+i8/2-i9/2,i,i13,i14,i2,i8,i9,Md391,dotrewrite-d391-5)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md391,dotrewrite-d391-6)
	#call replace(p3.p7,`Q2'/2-i10/2-i11+i13+i5/2-i6/2+i8/2,i,i10,i11,i13,i5,i6,i8,Md391,dotrewrite-d391-7)
#endif
#break
#case Q10
* path: (0, 1, 4, 10)
#case 110
* path: (1, 4, 10)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p2.p + p9.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p4.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-1)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md391,dotrewrite-d391-2)
	#call replace(p4.p10,-i10/2-i4/2+i9/2,i,i10,i4,i9,Md391,dotrewrite-d391-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md391,dotrewrite-d391-5)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md391,dotrewrite-d391-6)
	#call replace(p1.p10,-`Q2'/2-i13+i3/2-i4/2-i8/2+i9/2,i,i13,i3,i4,i8,i9,Md391,dotrewrite-d391-7)
#endif
#break
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p2.p + p9.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md391,dotrewrite-d391-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md391,dotrewrite-d391-3)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md391,dotrewrite-d391-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i13+i2/2,i,i1,i13,i2,Md391,dotrewrite-d391-5)
	#call replace(p1.p9,`Q2'/2-i1/2+i13+i8/2-i9/2,i,i1,i13,i8,i9,Md391,dotrewrite-d391-6)
	#call replace(p6.p9,i12-i14+i6/2-i7/2+i8/2,i,i12,i14,i6,i7,i8,Md391,dotrewrite-d391-7)
#endif
#break
#case 37
* path: (3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p7.p + p6.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id Q.p5 = i11 - i12;
	if (count(Md391,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-4)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md391,dotrewrite-d391-5)
	#call replace(p1.p7,i13-i14+i2/2+i8/2-i9/2,i,i13,i14,i2,i8,i9,Md391,dotrewrite-d391-6)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i13+i5/2+i7/2,i,i10,i11,i13,i5,i7,Md391,dotrewrite-d391-7)
	#call replace(p3.p7,`Q2'/2-i10/2-i11+i13+i5/2-i6/2+i8/2,i,i10,i11,i13,i5,i6,i8,Md391,dotrewrite-d391-8)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p2.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	if (count(Md391,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md391,dotrewrite-d391-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md391,dotrewrite-d391-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md391,dotrewrite-d391-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i13+i2/2,i,i1,i13,i2,Md391,dotrewrite-d391-5)
	#call replace(p6.p9,i12-i14+i6/2-i7/2+i8/2,i,i12,i14,i6,i7,i8,Md391,dotrewrite-d391-6)
	#call replace(p3.p9,`Q2'/2-i1/2-i10/2+i13+i4/2+i8/2,i,i1,i10,i13,i4,i8,Md391,dotrewrite-d391-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 38
* path: (3, 6, 8)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md391,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p - p9.p;
	.sort:momrewrite-Md391-6;
	if (count(Md391,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md391-5;
	if (count(Md391,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md391-4;
	if (count(Md391,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md391-3;
	if (count(Md391,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md391-2;
	if (count(Md391,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md391-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd391()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md391,dotrewrite-d391-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md391,dotrewrite-d391-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md391,dotrewrite-d391-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md391,dotrewrite-d391-3)
	#call replace(p1.p8,i13+i2/2+i8/2-i9/2,i,i13,i2,i8,i9,Md391,dotrewrite-d391-4)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md391,dotrewrite-d391-5)
#endif
#break
#endswitch
#break
*--#] d391 : 
*--#[ d392 :
#case Md392
#procedure SimpleDotd392()
if (count(Md392,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p7.p + p5.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p6 = i11 - i12;
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-3)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Md392,dotrewrite-d392-4)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md392,dotrewrite-d392-5)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md392,dotrewrite-d392-6)
	#call replace(p1.p9,-i10/2+i11-i13+i2/2+i9/2,i,i10,i11,i13,i2,i9,Md392,dotrewrite-d392-7)
#endif
#break
#case 310
* path: (3, 4, 10)
#case 410
* path: (4, 10)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p7.p + p5.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-2)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md392,dotrewrite-d392-3)
	#call replace(Q.p10,`Q2'/2-i1/2+i11-i13+i2/2,i,i1,i11,i13,i2,Md392,dotrewrite-d392-4)
	#call replace(p3.p10,-i1/2+i11+i4/2-i8/2+i9/2,i,i1,i11,i4,i8,i9,Md392,dotrewrite-d392-5)
	#call replace(p4.p10,`Q2'/2-i10/2-i13-i4/2+i8/2,i,i10,i13,i4,i8,Md392,dotrewrite-d392-6)
	#call replace(p5.p10,i12-i14+i3/2-i6/2+i7/2-i8/2,i,i12,i14,i3,i6,i7,i8,Md392,dotrewrite-d392-7)
#endif
#break
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p - p9.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id p2.p5 = i12 - i14;
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md392,dotrewrite-d392-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-3)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md392,dotrewrite-d392-4)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-5)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md392,dotrewrite-d392-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md392,dotrewrite-d392-7)
#endif
#break
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p6 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-3)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md392,dotrewrite-d392-4)
	#call replace(p6.p8,i3/2-i5/2+i7/2-i9/2,i,i3,i5,i7,i9,Md392,dotrewrite-d392-5)
	#call replace(p1.p8,i1/2+i10/2-i11+i13-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i11,i13,i2,i3,i4,i9,Md392,dotrewrite-d392-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p7.p + p5.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md392,dotrewrite-d392-4)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md392,dotrewrite-d392-5)
	#call replace(p1.p9,-i10/2+i11-i13+i2/2+i9/2,i,i10,i11,i13,i2,i9,Md392,dotrewrite-d392-6)
	#call replace(p4.p9,-i10/2+i11-i13+i2/2-i3/2+i8/2,i,i10,i11,i13,i2,i3,i8,Md392,dotrewrite-d392-7)
#endif
#break
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p - p9.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-4)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md392,dotrewrite-d392-5)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md392,dotrewrite-d392-6)
	#call replace(p4.p9,-i10/2+i11-i13+i2/2-i3/2+i8/2,i,i10,i11,i13,i2,i3,i8,Md392,dotrewrite-d392-7)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case 38
* path: (3, 5, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id p2.p5 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md392,dotrewrite-d392-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-2)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md392,dotrewrite-d392-5)
	#call replace(p2.p8,-i1/2-i10/2+i11+i2/2-i3/2+i4/2+i9/2,i,i1,i10,i11,i2,i3,i4,i9,Md392,dotrewrite-d392-6)
#endif
#break
#case Q6
* path: (0, 4, 3, 6)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p - p9.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p6 = i11 - i12;
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-4)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Md392,dotrewrite-d392-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-6)
	#call replace(p4.p6,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Md392,dotrewrite-d392-7)
	#call replace(p4.p9,-i10/2+i11-i13+i2/2-i3/2+i8/2,i,i10,i11,i13,i2,i3,i8,Md392,dotrewrite-d392-8)
#endif
#break
#case 17
* path: (1, 2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p5.p - p7.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id p2.p5 = i12 - i14;
	if (count(Md392,1)) id Q.p7 = i12 - i13;
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md392,dotrewrite-d392-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-4)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md392,dotrewrite-d392-5)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Md392,dotrewrite-d392-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md392,dotrewrite-d392-7)
	#call replace(p2.p7,i1/2+i10/2-i11+i12-i14-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i11,i12,i14,i2,i3,i4,i9,Md392,dotrewrite-d392-8)
#endif
#break
#case Q8
* path: (0, 1, 4, 8)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-1)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-3)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md392,dotrewrite-d392-4)
	#call replace(p4.p8,i1/2+i10/2-i11+i13-i2/2-i4/2-i8/2,i,i1,i10,i11,i13,i2,i4,i8,Md392,dotrewrite-d392-5)
	#call replace(p1.p8,i1/2+i10/2-i11+i13-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i11,i13,i2,i3,i4,i9,Md392,dotrewrite-d392-6)
#endif
#break
#case 37
* path: (3, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p7.p + p5.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p7.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p6 = i11 - i12;
	if (count(Md392,1)) id Q.p7 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-4)
	#call replace(p6.p7,-i6/2-i7/2+i9/2,i,i6,i7,i9,Md392,dotrewrite-d392-5)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md392,dotrewrite-d392-6)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md392,dotrewrite-d392-7)
	#call replace(p1.p7,-i1/2-i10/2+i11-i13+i14+i2/2-i3/2+i4/2+i9/2,i,i1,i10,i11,i13,i14,i2,i3,i4,i9,Md392,dotrewrite-d392-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#case 45
* path: (4, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-4)
	#call replace(p4.p5,i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md392,dotrewrite-d392-5)
	#call replace(p4.p8,i1/2+i10/2-i11+i13-i2/2-i4/2-i8/2,i,i1,i10,i11,i13,i2,i4,i8,Md392,dotrewrite-d392-6)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 39
* path: (3, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p6.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p - p9.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p6 = i11 - i12;
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-4)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-5)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Md392,dotrewrite-d392-6)
	#call replace(p1.p6,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md392,dotrewrite-d392-7)
	#call replace(p1.p9,-i10/2+i11-i13+i2/2+i9/2,i,i10,i11,i13,i2,i9,Md392,dotrewrite-d392-8)
#endif
#break
#case 47
* path: (4, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p + p8.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p7 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-2)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md392,dotrewrite-d392-4)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md392,dotrewrite-d392-5)
	#call replace(p4.p8,i1/2+i10/2-i11+i13-i2/2-i4/2-i8/2,i,i1,i10,i11,i13,i2,i4,i8,Md392,dotrewrite-d392-6)
	#call replace(p4.p7,-i1/2-i10/2+i11-i13+i14+i2/2-i3/2+i4/2-i5/2+i6/2+i8/2,i,i1,i10,i11,i13,i14,i2,i3,i4,i5,i6,i8,Md392,dotrewrite-d392-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p7.p + p5.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id p2.p5 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md392,dotrewrite-d392-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md392,dotrewrite-d392-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md392,dotrewrite-d392-4)
	#call replace(Q.p10,`Q2'/2-i1/2+i11-i13+i2/2,i,i1,i11,i13,i2,Md392,dotrewrite-d392-5)
	#call replace(p3.p10,-i1/2+i11+i4/2-i8/2+i9/2,i,i1,i11,i4,i8,i9,Md392,dotrewrite-d392-6)
	#call replace(p5.p10,i12-i14+i3/2-i6/2+i7/2-i8/2,i,i12,i14,i3,i6,i7,i8,Md392,dotrewrite-d392-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p9.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p - p9.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p9 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-4)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md392,dotrewrite-d392-5)
	#call replace(p1.p9,-i10/2+i11-i13+i2/2+i9/2,i,i10,i11,i13,i2,i9,Md392,dotrewrite-d392-6)
#endif
#break
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p5.p - p7.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	if (count(Md392,1)) id Q.p7 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-4)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md392,dotrewrite-d392-5)
	#call replace(p1.p7,-i1/2-i10/2+i11-i13+i14+i2/2-i3/2+i4/2+i9/2,i,i1,i10,i11,i13,i14,i2,i3,i4,i9,Md392,dotrewrite-d392-6)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md392,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md392-6;
	if (count(Md392,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md392-5;
	if (count(Md392,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md392-4;
	if (count(Md392,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md392-3;
	if (count(Md392,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p8.p;
	.sort:momrewrite-Md392-2;
	if (count(Md392,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md392-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd392()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md392,dotrewrite-d392-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md392,dotrewrite-d392-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md392,dotrewrite-d392-2)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md392,dotrewrite-d392-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md392,dotrewrite-d392-4)
	#call replace(p1.p8,i1/2+i10/2-i11+i13-i2/2+i3/2-i4/2-i9/2,i,i1,i10,i11,i13,i2,i3,i4,i9,Md392,dotrewrite-d392-5)
#endif
#break
#endswitch
#break
*--#] d392 : 
*--#[ d336 :
#case Md336
#procedure SimpleDotd336()
if (count(Md336,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id Q.p2^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 17
* path: (1, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p1.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p - p9.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p7 = i13 - i14;
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md336,dotrewrite-d336-1)
	#call replace(p1.p9,i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-2)
	#call replace(Q.p9,i11+i12-i13+i14,i,i11,i12,i13,i14,Md336,dotrewrite-d336-3)
	#call replace(p4.p9,i10+i2/2-i5/2+i6/2-i7/2,i,i10,i2,i5,i6,i7,Md336,dotrewrite-d336-4)
	#call replace(p7.p9,-`Q2'/2+i11+i12+i3/2-i7/2-i9/2,i,i11,i12,i3,i7,i9,Md336,dotrewrite-d336-5)
	#call replace(p1.p7,-`Q2'/2+i11+i12-i2/2+i3/2+i8/2-i9/2,i,i11,i12,i2,i3,i8,i9,Md336,dotrewrite-d336-6)
#endif
#break
#case Q6
* path: (0, 1, 8, 6)
#case 16
* path: (1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p + p8.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md336,dotrewrite-d336-0)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-1)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-2)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md336,dotrewrite-d336-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md336,dotrewrite-d336-4)
	#call replace(p1.p6,`Q2'/2+i10-i11-i12+i2/2-i3/2-i8/2+i9/2,i,i10,i11,i12,i2,i3,i8,i9,Md336,dotrewrite-d336-5)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p1.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p5 = i12 - i13;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md336,dotrewrite-d336-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md336,dotrewrite-d336-3)
	#call replace(p1.p5,-`Q2'/2-i1/2-i10+i11+i12-i2/2+i3/2,i,i1,i10,i11,i12,i2,i3,Md336,dotrewrite-d336-4)
	#call replace(p1.p6,`Q2'/2+i10-i11-i12+i2/2-i3/2-i8/2+i9/2,i,i10,i11,i12,i2,i3,i8,i9,Md336,dotrewrite-d336-5)
#endif
#break
#case Q5
* path: (0, 3, 2, 5)
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p1.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'-i11-i12,i,i11,i12,Md336,dotrewrite-d336-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-2)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md336,dotrewrite-d336-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md336,dotrewrite-d336-5)
	#call replace(p2.p3,`Q2'/2+i1/2-i11-i2/2-i3/2,i,i1,i11,i2,i3,Md336,dotrewrite-d336-6)
	#call replace(p3.p8,i1/2+i12-i13+i14-i2/2+i7/2-i9/2,i,i1,i12,i13,i14,i2,i7,i9,Md336,dotrewrite-d336-7)
	#call replace(p3.p5,`Q2'/2+i1/2+i10-i11-i13-i3/2+i4/2-i5/2,i,i1,i10,i11,i13,i3,i4,i5,Md336,dotrewrite-d336-8)
#endif
#break
#case 45
* path: (4, 5)
#case 48
* path: (4, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p + p8.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p5 = i12 - i13;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-1)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-2)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md336,dotrewrite-d336-4)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md336,dotrewrite-d336-5)
	#call replace(p1.p5,-`Q2'/2-i1/2-i10+i11+i12-i2/2+i3/2,i,i1,i10,i11,i12,i2,i3,Md336,dotrewrite-d336-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q8
* path: (0, 1, 8)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 18
* path: (1, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 1, 8)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p + p8.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-0)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-1)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md336,dotrewrite-d336-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md336,dotrewrite-d336-4)
	#call replace(p1.p2,-`Q2'/2-i1/2+i11+i12-i2/2+i3/2,i,i1,i11,i12,i2,i3,Md336,dotrewrite-d336-5)
#endif
#break
#case Q2
* path: (0, 3, 2)
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p1.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	#call replace(Q.p3,`Q2'-i11-i12,i,i11,i12,Md336,dotrewrite-d336-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-1)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md336,dotrewrite-d336-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md336,dotrewrite-d336-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i11-i2/2-i3/2,i,i1,i11,i2,i3,Md336,dotrewrite-d336-5)
	#call replace(p3.p4,-i10+i13-i2/2-i4/2+i5/2,i,i10,i13,i2,i4,i5,Md336,dotrewrite-d336-6)
	#call replace(p3.p8,i1/2+i12-i13+i14-i2/2+i7/2-i9/2,i,i1,i12,i13,i14,i2,i7,i9,Md336,dotrewrite-d336-7)
#endif
#break
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 38
* path: (3, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p + p8.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	#call replace(Q.p3,`Q2'-i11-i12,i,i11,i12,Md336,dotrewrite-d336-0)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-1)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-2)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md336,dotrewrite-d336-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i12+i2/2-i3/2,i,i1,i12,i2,i3,Md336,dotrewrite-d336-4)
	#call replace(p3.p4,-i10+i13-i2/2-i4/2+i5/2,i,i10,i13,i2,i4,i5,Md336,dotrewrite-d336-5)
	#call replace(p3.p8,i1/2+i12-i13+i14-i2/2+i7/2-i9/2,i,i1,i12,i13,i14,i2,i7,i9,Md336,dotrewrite-d336-6)
#endif
#break
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p1.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p7 = i13 - i14;
	#call replace(Q.p3,`Q2'-i11-i12,i,i11,i12,Md336,dotrewrite-d336-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md336,dotrewrite-d336-2)
	#call replace(p1.p3,`Q2'/2-i1/2-i12+i2/2-i3/2,i,i1,i12,i2,i3,Md336,dotrewrite-d336-3)
	#call replace(p3.p4,-i10+i13-i2/2-i4/2+i5/2,i,i10,i13,i2,i4,i5,Md336,dotrewrite-d336-4)
	#call replace(p1.p7,-`Q2'/2+i11+i12-i2/2+i3/2+i8/2-i9/2,i,i11,i12,i2,i3,i8,i9,Md336,dotrewrite-d336-5)
	#call replace(p3.p7,`Q2'/2-i11-i12+i13-i14-i3/2-i7/2+i9/2,i,i11,i12,i13,i14,i3,i7,i9,Md336,dotrewrite-d336-6)
#endif
#break
#case 27
* path: (2, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p1.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p7 = i13 - i14;
	#call replace(Q.p3,`Q2'-i11-i12,i,i11,i12,Md336,dotrewrite-d336-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-2)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md336,dotrewrite-d336-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md336,dotrewrite-d336-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i11-i2/2-i3/2,i,i1,i11,i2,i3,Md336,dotrewrite-d336-5)
	#call replace(p3.p4,-i10+i13-i2/2-i4/2+i5/2,i,i10,i13,i2,i4,i5,Md336,dotrewrite-d336-6)
	#call replace(p3.p7,`Q2'/2-i11-i12+i13-i14-i3/2-i7/2+i9/2,i,i11,i12,i13,i14,i3,i7,i9,Md336,dotrewrite-d336-7)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p1.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-0)
	#call replace(p1.p9,i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-1)
	#call replace(Q.p9,i11+i12-i13+i14,i,i11,i12,i13,i14,Md336,dotrewrite-d336-2)
	#call replace(p4.p9,i10+i2/2-i5/2+i6/2-i7/2,i,i10,i2,i5,i6,i7,Md336,dotrewrite-d336-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i11+i12-i2/2+i3/2,i,i1,i11,i12,i2,i3,Md336,dotrewrite-d336-4)
	#call replace(p2.p9,-`Q2'/2-i1/2+i11+i12+i3/2-i7/2+i8/2,i,i1,i11,i12,i3,i7,i8,Md336,dotrewrite-d336-5)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p + p8.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	if (count(Md336,1)) id Q.p5 = i12 - i13;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-1)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md336,dotrewrite-d336-2)
	#call replace(p1.p8,-i1/2-i8/2+i9/2,i,i1,i8,i9,Md336,dotrewrite-d336-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md336,dotrewrite-d336-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md336,dotrewrite-d336-5)
	#call replace(p1.p2,-`Q2'/2-i1/2+i11+i12-i2/2+i3/2,i,i1,i11,i12,i2,i3,Md336,dotrewrite-d336-6)
	#call replace(p1.p5,-`Q2'/2-i1/2-i10+i11+i12-i2/2+i3/2,i,i1,i10,i11,i12,i2,i3,Md336,dotrewrite-d336-7)
#endif
#break
#default
#case 26
* path: (2, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md336,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p1.p;
	.sort:momrewrite-Md336-5;
	if (count(Md336,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md336-4;
	if (count(Md336,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md336-3;
	if (count(Md336,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md336-2;
	if (count(Md336,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md336-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd336()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md336,dotrewrite-d336-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md336,dotrewrite-d336-1)
	#call replace(p2.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md336,dotrewrite-d336-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i11+i12-i2/2+i3/2,i,i1,i11,i12,i2,i3,Md336,dotrewrite-d336-3)
	#call replace(p1.p6,`Q2'/2+i10-i11-i12+i2/2-i3/2-i8/2+i9/2,i,i10,i11,i12,i2,i3,i8,i9,Md336,dotrewrite-d336-4)
#endif
#break
#endswitch
#break
*--#] d336 : 
*--#[ d305 :
#case Md305
#procedure SimpleDotd305()
if (count(Md305,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case Q4
* path: (0, 3, 4)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p6.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id Q.p4 = i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-2)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md305,dotrewrite-d305-3)
	#call replace(p1.p4,-`Q2'/2+i1/2+i10+i12-i13+i14-i8/2+i9/2,i,i1,i10,i12,i13,i14,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p3.p4,-`Q2'/2+i10+i12+i14-i3/2-i4/2+i5/2-i8/2+i9/2,i,i10,i12,i14,i3,i4,i5,i8,i9,Md305,dotrewrite-d305-5)
#endif
#break
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p5.p + p8.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p5.p - p3.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p3 = i10 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(Q.p9,`Q2'-i10-i12,i,i10,i12,Md305,dotrewrite-d305-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-3)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p3.p9,`Q2'/2-i12-i3/2+i7/2-i9/2,i,i12,i3,i7,i9,Md305,dotrewrite-d305-5)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-6)
	#call replace(p5.p9,-i11+i14-i2/2+i5/2-i6/2+i9/2,i,i11,i14,i2,i5,i6,i9,Md305,dotrewrite-d305-7)
	#call replace(p3.p5,`Q2'/2-i10-i12+i13-i14-i3/2+i4/2-i5/2+i8/2-i9/2,i,i10,i12,i13,i14,i3,i4,i5,i8,i9,Md305,dotrewrite-d305-8)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + Q.p - p7.p - p9.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-0)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-1)
	#call replace(Q.p9,`Q2'-i10-i12,i,i10,i12,Md305,dotrewrite-d305-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-4)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md305,dotrewrite-d305-5)
	#call replace(p6.p9,i11-i14-i5/2+i6/2+i8/2,i,i11,i14,i5,i6,i8,Md305,dotrewrite-d305-6)
	#call replace(p7.p9,`Q2'/2-i10+i3/2-i7/2-i9/2,i,i10,i3,i7,i9,Md305,dotrewrite-d305-7)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md305,dotrewrite-d305-0)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-2)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-3)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md305,dotrewrite-d305-4)
	#call replace(p1.p5,`Q2'/2+i1/2-i10-i12-i14+i8/2-i9/2,i,i1,i10,i12,i14,i8,i9,Md305,dotrewrite-d305-5)
	#call replace(p1.p7,-`Q2'/2+i1/2+i10+i12-i13-i8/2+i9/2,i,i1,i10,i12,i13,i8,i9,Md305,dotrewrite-d305-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case Q3
* path: (0, 3)
#case Q9
* path: (0, 9)
#case Q2
* path: (0, 9, 2)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 29
* path: (2, 9)
#case 33
* path: (3,)
#case 39
* path: (3, 9)
#case 66
* path: (6,)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p5.p - p3.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p3 = i10 - i13;
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-2)
	#call replace(Q.p9,`Q2'-i10-i12,i,i10,i12,Md305,dotrewrite-d305-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md305,dotrewrite-d305-5)
	#call replace(p3.p9,`Q2'/2-i12-i3/2+i7/2-i9/2,i,i12,i3,i7,i9,Md305,dotrewrite-d305-6)
	#call replace(p6.p9,i11-i14-i5/2+i6/2+i8/2,i,i11,i14,i5,i6,i8,Md305,dotrewrite-d305-7)
#endif
#break
#case 27
* path: (2, 9, 7)
#case 69
* path: (6, 7, 9)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + Q.p - p7.p - p9.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-2)
	#call replace(Q.p9,`Q2'-i10-i12,i,i10,i12,Md305,dotrewrite-d305-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p6.p9,i11-i14-i5/2+i6/2+i8/2,i,i11,i14,i5,i6,i8,Md305,dotrewrite-d305-5)
	#call replace(p7.p9,`Q2'/2-i10+i3/2-i7/2-i9/2,i,i10,i3,i7,i9,Md305,dotrewrite-d305-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i10+i13+i8/2-i9/2,i,i1,i10,i13,i8,i9,Md305,dotrewrite-d305-7)
#endif
#break
#case 38
* path: (3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p5.p - p3.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p3 = i10 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-3)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-5)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-6)
	#call replace(p3.p8,`Q2'/2-i10-i12+i13-i3/2+i7/2-i9/2,i,i10,i12,i13,i3,i7,i9,Md305,dotrewrite-d305-7)
	#call replace(p3.p5,`Q2'/2-i10-i12+i13-i14-i3/2+i4/2-i5/2+i8/2-i9/2,i,i10,i12,i13,i14,i3,i4,i5,i8,i9,Md305,dotrewrite-d305-8)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p5.p - p3.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p3 = i10 - i13;
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-3)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md305,dotrewrite-d305-5)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-6)
	#call replace(p3.p5,`Q2'/2-i10-i12+i13-i14-i3/2+i4/2-i5/2+i8/2-i9/2,i,i10,i12,i13,i14,i3,i4,i5,i8,i9,Md305,dotrewrite-d305-7)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p6.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id Q.p4 = i11 + i12;
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-3)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-4)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-5)
	#call replace(p4.p5,i1/2-i13+i3/2-i4/2-i5/2,i,i1,i13,i3,i4,i5,Md305,dotrewrite-d305-6)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-7)
	#call replace(p2.p4,`Q2'/2-i1/2-i10+i11+i13-i14+i8/2-i9/2,i,i1,i10,i11,i13,i14,i8,i9,Md305,dotrewrite-d305-8)
#endif
#break
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id Q.p4 = i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-3)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p4.p5,i1/2-i13+i3/2-i4/2-i5/2,i,i1,i13,i3,i4,i5,Md305,dotrewrite-d305-5)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-6)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-7)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md305,dotrewrite-d305-8)
	#call replace(p2.p4,`Q2'/2-i1/2-i10+i11+i13-i14+i8/2-i9/2,i,i1,i10,i11,i13,i14,i8,i9,Md305,dotrewrite-d305-9)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 37
* path: (3, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p1.p - p3.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p3 = i10 - i13;
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-3)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md305,dotrewrite-d305-4)
	#call replace(p2.p7,`Q2'/2-i1/2-i10+i13+i8/2-i9/2,i,i1,i10,i13,i8,i9,Md305,dotrewrite-d305-5)
	#call replace(p3.p7,-`Q2'/2+i10+i12-i3/2-i7/2+i9/2,i,i10,i12,i3,i7,i9,Md305,dotrewrite-d305-6)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p5.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-0)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-2)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-4)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md305,dotrewrite-d305-5)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i10+i13+i8/2-i9/2,i,i1,i10,i13,i8,i9,Md305,dotrewrite-d305-7)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md305,dotrewrite-d305-8)
#endif
#break
#case 57
* path: (5, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p5.p + p3.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-0)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-1)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md305,dotrewrite-d305-2)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-3)
	#call replace(p3.p7,-`Q2'/2+i10+i12-i3/2-i7/2+i9/2,i,i10,i12,i3,i7,i9,Md305,dotrewrite-d305-4)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md305,dotrewrite-d305-5)
	#call replace(p3.p5,`Q2'/2-i10-i12+i13-i14-i3/2+i4/2-i5/2+i8/2-i9/2,i,i10,i12,i13,i14,i3,i4,i5,i8,i9,Md305,dotrewrite-d305-6)
#endif
#break
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p4.p - p6.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id Q.p4 = i11 + i12;
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-5)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-6)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md305,dotrewrite-d305-7)
	#call replace(p2.p4,`Q2'/2-i1/2-i10+i11+i13-i14+i8/2-i9/2,i,i1,i10,i11,i13,i14,i8,i9,Md305,dotrewrite-d305-8)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#case 68
* path: (6, 8)
#case 78
* path: (7, 6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-3)
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-5)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md305,dotrewrite-d305-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i10+i13+i8/2-i9/2,i,i1,i10,i13,i8,i9,Md305,dotrewrite-d305-7)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p8.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id Q.p4 = i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i12-i2/2,i,i1,i10,i12,i2,Md305,dotrewrite-d305-4)
	#call replace(p7.p8,i1/2-i13+i3/2-i7/2-i8/2,i,i1,i13,i3,i7,i8,Md305,dotrewrite-d305-5)
	#call replace(p2.p7,`Q2'/2-i1/2-i10+i13+i8/2-i9/2,i,i1,i10,i13,i8,i9,Md305,dotrewrite-d305-6)
	#call replace(p4.p8,i1/2-i13+i3/2-i5/2+i6/2-i7/2,i,i1,i13,i3,i5,i6,i7,Md305,dotrewrite-d305-7)
	#call replace(p2.p4,`Q2'/2-i1/2-i10+i11+i13-i14+i8/2-i9/2,i,i1,i10,i11,i13,i14,i8,i9,Md305,dotrewrite-d305-8)
#endif
#break
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = - p4.p - p5.p + p1.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p6 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-1)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md305,dotrewrite-d305-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-3)
	#call replace(p2.p5,-i11+i14-i2/2-i8/2+i9/2,i,i11,i14,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(Q.p5,`Q2'/2+i1/2-i10-i11-i12-i2/2,i,i1,i10,i11,i12,i2,Md305,dotrewrite-d305-5)
	#call replace(p2.p7,`Q2'/2-i1/2-i10+i13+i8/2-i9/2,i,i1,i10,i13,i8,i9,Md305,dotrewrite-d305-6)
	#call replace(p5.p7,i1/2-i13+i3/2-i4/2+i6/2-i8/2,i,i1,i13,i3,i4,i6,i8,Md305,dotrewrite-d305-7)
#endif
#break
#case 49
* path: (4, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p5.p + p8.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p1.p - p3.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	if (count(Md305,1)) id p2.p3 = i10 - i13;
	if (count(Md305,1)) id Q.p4 = i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md305,dotrewrite-d305-2)
	#call replace(Q.p9,`Q2'-i10-i12,i,i10,i12,Md305,dotrewrite-d305-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md305,dotrewrite-d305-4)
	#call replace(p3.p9,`Q2'/2-i12-i3/2+i7/2-i9/2,i,i12,i3,i7,i9,Md305,dotrewrite-d305-5)
	#call replace(p2.p4,`Q2'/2-i1/2-i10+i11+i13-i14+i8/2-i9/2,i,i1,i10,i11,i13,i14,i8,i9,Md305,dotrewrite-d305-6)
	#call replace(p3.p4,-`Q2'/2+i10+i12+i14-i3/2-i4/2+i5/2-i8/2+i9/2,i,i10,i12,i14,i3,i4,i5,i8,i9,Md305,dotrewrite-d305-7)
	#call replace(p4.p9,`Q2'/2-i10+i11-i14+i3/2-i5/2+i6/2-i7/2+i8/2-i9/2,i,i10,i11,i14,i3,i5,i6,i7,i8,i9,Md305,dotrewrite-d305-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q7
* path: (0, 1, 3, 7)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md305,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md305-5;
	if (count(Md305,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md305-4;
	if (count(Md305,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p1.p - p3.p;
	.sort:momrewrite-Md305-3;
	if (count(Md305,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md305-2;
	if (count(Md305,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md305-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd305()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md305,dotrewrite-d305-0)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md305,dotrewrite-d305-1)
	#call replace(p3.p6,i14-i4/2+i5/2+i7/2-i8/2,i,i14,i4,i5,i7,i8,Md305,dotrewrite-d305-2)
	#call replace(p3.p7,-`Q2'/2+i10+i12-i3/2-i7/2+i9/2,i,i10,i12,i3,i7,i9,Md305,dotrewrite-d305-3)
	#call replace(p1.p7,-`Q2'/2+i1/2+i10+i12-i13-i8/2+i9/2,i,i1,i10,i12,i13,i8,i9,Md305,dotrewrite-d305-4)
#endif
#break
#endswitch
#break
*--#] d305 : 
*--#[ d321 :
#case Md321
#procedure SimpleDotd321()
if (count(Md321,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p3.p9^n? = i10^n;
	id p4.p9^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p3.p - p5.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p3.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = - p2.p - p8.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md321,dotrewrite-d321-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-2)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md321,dotrewrite-d321-4)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-5)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md321,dotrewrite-d321-6)
	#call replace(p2.p3,-i10-i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md321,dotrewrite-d321-7)
	#call replace(p2.p5,-i10+i11-i5/2+i6/2-i8/2,i,i10,i11,i5,i6,i8,Md321,dotrewrite-d321-8)
#endif
#break
#case 45
* path: (4, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p9} = + p4.p + p5.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p4.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p5 = i12 - i13;
	if (count(Md321,1)) id p5.p9 = i10 - i11;
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md321,dotrewrite-d321-3)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md321,dotrewrite-d321-4)
	#call replace(p6.p9,-i10+i11+i2/2-i8/2-i9/2,i,i10,i11,i2,i8,i9,Md321,dotrewrite-d321-5)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-6)
#endif
#break
#case 36
* path: (3, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p6.p - p7.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p7 = -i13 + i14;
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-1)
	#call replace(p6.p7,-i4/2+i6/2+i7/2,i,i4,i6,i7,Md321,dotrewrite-d321-2)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md321,dotrewrite-d321-3)
	#call replace(p7.p9,-i10+i2/2-i8/2-i9/2,i,i10,i2,i8,i9,Md321,dotrewrite-d321-4)
	#call replace(p6.p9,-i10+i11+i2/2-i8/2-i9/2,i,i10,i11,i2,i8,i9,Md321,dotrewrite-d321-5)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 88
* path: (8,)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p3.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-0)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-2)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md321,dotrewrite-d321-3)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md321,dotrewrite-d321-4)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-5)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p6.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p2.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md321,dotrewrite-d321-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-1)
	#call replace(p1.p3,i10+i12+i3/2-i7/2+i8/2,i,i10,i12,i3,i7,i8,Md321,dotrewrite-d321-2)
	#call replace(p1.p4,i11+i13+i3/2-i5/2+i6/2-i7/2,i,i11,i13,i3,i5,i6,i7,Md321,dotrewrite-d321-3)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-4)
	#call replace(p1.p9,-`Q2'/2+i1/2-i12+i13-i14-i8/2+i9/2,i,i1,i12,i13,i14,i8,i9,Md321,dotrewrite-d321-5)
#endif
#break
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p6.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p9} = + p4.p + p5.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p5 = i12 - i13;
	if (count(Md321,1)) id p5.p9 = i10 - i11;
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-2)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md321,dotrewrite-d321-4)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md321,dotrewrite-d321-5)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md321,dotrewrite-d321-6)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-7)
#endif
#break
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q9
* path: (0, 9)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 39
* path: (3, 9)
#case 44
* path: (4,)
#case 49
* path: (4, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p + p7.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p7 = -i13 + i14;
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-1)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-2)
	#call replace(p4.p7,-i4/2+i6/2-i7/2,i,i4,i6,i7,Md321,dotrewrite-d321-3)
	#call replace(p7.p9,-i10+i2/2-i8/2-i9/2,i,i10,i2,i8,i9,Md321,dotrewrite-d321-4)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-5)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = - p2.p - p8.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p3.p - p5.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p3.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md321,dotrewrite-d321-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-2)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md321,dotrewrite-d321-5)
	#call replace(p1.p3,i10+i12+i3/2-i7/2+i8/2,i,i10,i12,i3,i7,i8,Md321,dotrewrite-d321-6)
	#call replace(p1.p8,i12-i13+i14+i2/2+i8/2-i9/2,i,i12,i13,i14,i2,i8,i9,Md321,dotrewrite-d321-7)
	#call replace(p1.p5,i10-i11+i12-i13+i5/2-i6/2+i8/2,i,i10,i11,i12,i13,i5,i6,i8,Md321,dotrewrite-d321-8)
#endif
#break
#case 24
* path: (2, 1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p3.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = - p2.p - p8.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md321,dotrewrite-d321-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-1)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md321,dotrewrite-d321-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-4)
	#call replace(p2.p3,-i10-i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md321,dotrewrite-d321-5)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md321,dotrewrite-d321-6)
	#call replace(p2.p4,-i11-i3/2+i5/2-i6/2+i7/2,i,i11,i3,i5,i6,i7,Md321,dotrewrite-d321-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = - p2.p - p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p3.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md321,dotrewrite-d321-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-1)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-3)
	#call replace(p4.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md321,dotrewrite-d321-4)
	#call replace(p1.p3,i10+i12+i3/2-i7/2+i8/2,i,i10,i12,i3,i7,i8,Md321,dotrewrite-d321-5)
	#call replace(p1.p4,i11+i13+i3/2-i5/2+i6/2-i7/2,i,i11,i13,i3,i5,i6,i7,Md321,dotrewrite-d321-6)
	#call replace(p1.p8,i12-i13+i14+i2/2+i8/2-i9/2,i,i12,i13,i14,i2,i8,i9,Md321,dotrewrite-d321-7)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 59
* path: (5, 3, 9)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p3.p - p5.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p8.p - p5.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p3.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	if (count(Md321,1)) id Q.p5 = i12 - i13;
	if (count(Md321,1)) id p5.p9 = i10 - i11;
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-2)
	#call replace(Q.p8,i12-i13+i14,i,i12,i13,i14,Md321,dotrewrite-d321-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md321,dotrewrite-d321-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md321,dotrewrite-d321-5)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md321,dotrewrite-d321-6)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-7)
#endif
#break
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p6.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p9.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md321,dotrewrite-d321-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-1)
	#call replace(p2.p9,-i2/2+i8/2-i9/2,i,i2,i8,i9,Md321,dotrewrite-d321-2)
	#call replace(p2.p3,-i10-i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md321,dotrewrite-d321-3)
	#call replace(p2.p4,-i11-i3/2+i5/2-i6/2+i7/2,i,i11,i3,i5,i6,i7,Md321,dotrewrite-d321-4)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-5)
#endif
#break
#default
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md321,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md321-5;
	if (count(Md321,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md321-4;
	if (count(Md321,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md321-3;
	if (count(Md321,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md321-2;
	if (count(Md321,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p4.p;
	.sort:momrewrite-Md321-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd321()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md321,dotrewrite-d321-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md321,dotrewrite-d321-1)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md321,dotrewrite-d321-2)
	#call replace(p6.p9,-i10+i11+i2/2-i8/2-i9/2,i,i10,i11,i2,i8,i9,Md321,dotrewrite-d321-3)
	#call replace(Q.p9,-`Q2'/2+i1/2-i12+i13-i14-i2/2,i,i1,i12,i13,i14,i2,Md321,dotrewrite-d321-4)
#endif
#break
#endswitch
#break
*--#] d321 : 
*--#[ d311 :
#case Md311
#procedure SimpleDotd311()
if (count(Md311,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 2, 9)
#case Q2
* path: (0, 9, 2)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p + p3.p - p9.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md311,dotrewrite-d311-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md311,dotrewrite-d311-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md311,dotrewrite-d311-4)
	#call replace(p3.p9,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md311,dotrewrite-d311-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md311,dotrewrite-d311-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md311,dotrewrite-d311-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md311,dotrewrite-d311-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(p2.p7,-i1/2+i10+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i10,i2,i3,i4,i8,i9,Md311,dotrewrite-d311-5)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + Q.p - p4.p - p9.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md311,dotrewrite-d311-2)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md311,dotrewrite-d311-3)
	#call replace(p3.p9,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md311,dotrewrite-d311-4)
	#call replace(p4.p9,`Q2'/2-i11-i4/2+i7/2-i9/2,i,i11,i4,i7,i9,Md311,dotrewrite-d311-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md311,dotrewrite-d311-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p2.p5 = i12 - i13;
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md311,dotrewrite-d311-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-5)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md311,dotrewrite-d311-6)
#endif
#break
#case 59
* path: (5, 7, 9)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-1)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md311,dotrewrite-d311-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md311,dotrewrite-d311-6)
	#call replace(p7.p9,-i1/2+i10+i2/2+i4/2-i7/2-i9/2,i,i1,i10,i2,i4,i7,i9,Md311,dotrewrite-d311-7)
#endif
#break
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p9.p - p2.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md311,dotrewrite-d311-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-2)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md311,dotrewrite-d311-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md311,dotrewrite-d311-4)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md311,dotrewrite-d311-5)
	#call replace(p7.p9,-i1/2+i10+i2/2+i4/2-i7/2-i9/2,i,i1,i10,i2,i4,i7,i9,Md311,dotrewrite-d311-6)
	#call replace(p2.p7,-i1/2+i10+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i10,i2,i3,i4,i8,i9,Md311,dotrewrite-d311-7)
#endif
#break
#case 48
* path: (4, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + Q.p - p4.p - p9.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p4.p5 = i13 - i14;
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md311,dotrewrite-d311-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md311,dotrewrite-d311-5)
	#call replace(p4.p9,`Q2'/2-i11-i4/2+i7/2-i9/2,i,i11,i4,i7,i9,Md311,dotrewrite-d311-6)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md311,dotrewrite-d311-7)
	#call replace(p4.p8,i10-i11+i2/2-i3/2+i7/2-i9/2,i,i10,i11,i2,i3,i7,i9,Md311,dotrewrite-d311-8)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p1.p - p4.p - p8.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p4.p5 = i13 - i14;
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md311,dotrewrite-d311-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md311,dotrewrite-d311-5)
	#call replace(p1.p8,i10-i11+i2/2+i8/2-i9/2,i,i10,i11,i2,i8,i9,Md311,dotrewrite-d311-6)
	#call replace(p4.p8,i10-i11+i2/2-i3/2+i7/2-i9/2,i,i10,i11,i2,i3,i7,i9,Md311,dotrewrite-d311-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md311,dotrewrite-d311-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(p1.p8,i10-i11+i2/2+i8/2-i9/2,i,i10,i11,i2,i8,i9,Md311,dotrewrite-d311-5)
#endif
#break
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p4.p5 = i13 - i14;
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md311,dotrewrite-d311-5)
	#call replace(p4.p8,i10-i11+i2/2-i3/2+i7/2-i9/2,i,i10,i11,i2,i3,i7,i9,Md311,dotrewrite-d311-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md311,dotrewrite-d311-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-1)
	#call replace(Q.p6,i10-i11-i12,i,i10,i11,i12,Md311,dotrewrite-d311-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-3)
	#call replace(p3.p6,-i14+i3/2-i7/2+i8/2,i,i14,i3,i7,i8,Md311,dotrewrite-d311-4)
	#call replace(p1.p6,i10-i11-i13+i2/2+i8/2-i9/2,i,i10,i11,i13,i2,i8,i9,Md311,dotrewrite-d311-5)
#endif
#break
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p2.p5 = i12 - i13;
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md311,dotrewrite-d311-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md311,dotrewrite-d311-6)
	#call replace(p2.p7,-i1/2+i10+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i10,i2,i3,i4,i8,i9,Md311,dotrewrite-d311-7)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md311,dotrewrite-d311-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md311,dotrewrite-d311-4)
	#call replace(p4.p7,i1/2-i10+i11-i2/2-i4/2-i7/2+i9/2,i,i1,i10,i11,i2,i4,i7,i9,Md311,dotrewrite-d311-5)
#endif
#break
#case Q9
* path: (0, 9)
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	if (count(Md311,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md311,dotrewrite-d311-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md311,dotrewrite-d311-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md311,dotrewrite-d311-4)
	#call replace(p3.p9,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md311,dotrewrite-d311-5)
	#call replace(p5.p9,i12-i13+i5/2-i6/2+i8/2,i,i12,i13,i5,i6,i8,Md311,dotrewrite-d311-6)
#endif
#break
#default
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md311,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md311-5;
	if (count(Md311,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md311-4;
	if (count(Md311,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md311-3;
	if (count(Md311,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md311-2;
	if (count(Md311,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md311-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd311()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md311,dotrewrite-d311-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md311,dotrewrite-d311-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md311,dotrewrite-d311-2)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md311,dotrewrite-d311-3)
	#call replace(p1.p7,i1/2-i10+i11-i2/2+i3/2-i4/2-i8/2+i9/2,i,i1,i10,i11,i2,i3,i4,i8,i9,Md311,dotrewrite-d311-4)
#endif
#break
#endswitch
#break
*--#] d311 : 
*--#[ d316 :
#case Md316
#procedure SimpleDotd316()
if (count(Md316,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md316,dotrewrite-d316-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md316,dotrewrite-d316-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md316,dotrewrite-d316-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md316,dotrewrite-d316-4)
	#call replace(p3.p9,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md316,dotrewrite-d316-5)
	#call replace(p5.p9,i12-i13+i14-i5/2+i6/2-i7/2,i,i12,i13,i14,i5,i6,i7,Md316,dotrewrite-d316-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md316,dotrewrite-d316-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md316,dotrewrite-d316-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md316,dotrewrite-d316-4)
	#call replace(p2.p7,-i1/2+i10+i2/2-i3/2+i4/2+i8/2-i9/2,i,i1,i10,i2,i3,i4,i8,i9,Md316,dotrewrite-d316-5)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md316,dotrewrite-d316-2)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md316,dotrewrite-d316-3)
	#call replace(p3.p9,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md316,dotrewrite-d316-4)
	#call replace(p4.p9,`Q2'/2-i11-i4/2+i7/2-i9/2,i,i11,i4,i7,i9,Md316,dotrewrite-d316-5)
	#call replace(p5.p9,i12-i13+i14-i5/2+i6/2-i7/2,i,i12,i13,i14,i5,i6,i7,Md316,dotrewrite-d316-6)
#endif
#break
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 8)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p2.p5 = i12 - i13;
	if (count(Md316,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md316,dotrewrite-d316-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md316,dotrewrite-d316-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-4)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md316,dotrewrite-d316-5)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md316,dotrewrite-d316-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p4.p5 = i13 - i14;
	if (count(Md316,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md316,dotrewrite-d316-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md316,dotrewrite-d316-4)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md316,dotrewrite-d316-5)
	#call replace(p1.p8,i10-i11+i2/2+i8/2-i9/2,i,i10,i11,i2,i8,i9,Md316,dotrewrite-d316-6)
	#call replace(p4.p8,i10-i11+i2/2-i3/2+i7/2-i9/2,i,i10,i11,i2,i3,i7,i9,Md316,dotrewrite-d316-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md316,dotrewrite-d316-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-3)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md316,dotrewrite-d316-4)
	#call replace(p1.p8,i10-i11+i2/2+i8/2-i9/2,i,i10,i11,i2,i8,i9,Md316,dotrewrite-d316-5)
#endif
#break
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p4.p5 = i13 - i14;
	if (count(Md316,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md316,dotrewrite-d316-4)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md316,dotrewrite-d316-5)
	#call replace(p4.p8,i10-i11+i2/2-i3/2+i7/2-i9/2,i,i10,i11,i2,i3,i7,i9,Md316,dotrewrite-d316-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id Q.p6 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md316,dotrewrite-d316-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md316,dotrewrite-d316-3)
	#call replace(p3.p6,-i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md316,dotrewrite-d316-4)
	#call replace(p1.p6,i1/2-i10+i11-i13-i2/2+i3/2-i4/2-i8/2+i9/2,i,i1,i10,i11,i13,i2,i3,i4,i8,i9,Md316,dotrewrite-d316-5)
#endif
#break
#case Q7
* path: (0, 1, 4, 7)
#case 17
* path: (1, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p - p7.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md316,dotrewrite-d316-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md316,dotrewrite-d316-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md316,dotrewrite-d316-4)
	#call replace(p4.p7,i1/2-i10+i11-i2/2-i4/2-i7/2+i9/2,i,i1,i10,i11,i2,i4,i7,i9,Md316,dotrewrite-d316-5)
	#call replace(p1.p7,i1/2-i10+i11-i2/2+i3/2-i4/2-i8/2+i9/2,i,i1,i10,i11,i2,i3,i4,i8,i9,Md316,dotrewrite-d316-6)
#endif
#break
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#case 45
* path: (4, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md316,dotrewrite-d316-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md316,dotrewrite-d316-4)
	#call replace(p4.p7,i1/2-i10+i11-i2/2-i4/2-i7/2+i9/2,i,i1,i10,i11,i2,i4,i7,i9,Md316,dotrewrite-d316-5)
#endif
#break
#case 39
* path: (3, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	if (count(Md316,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md316,dotrewrite-d316-2)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md316,dotrewrite-d316-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i10-i11+i2/2,i,i1,i10,i11,i2,Md316,dotrewrite-d316-4)
	#call replace(p3.p9,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md316,dotrewrite-d316-5)
	#call replace(p5.p9,i12-i13+i14-i5/2+i6/2-i7/2,i,i12,i13,i14,i5,i6,i7,Md316,dotrewrite-d316-6)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md316,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md316-5;
	if (count(Md316,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md316-4;
	if (count(Md316,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md316-3;
	if (count(Md316,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md316-2;
	if (count(Md316,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md316-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd316()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md316,dotrewrite-d316-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md316,dotrewrite-d316-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md316,dotrewrite-d316-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md316,dotrewrite-d316-3)
	#call replace(p1.p7,i1/2-i10+i11-i2/2+i3/2-i4/2-i8/2+i9/2,i,i1,i10,i11,i2,i3,i4,i8,i9,Md316,dotrewrite-d316-4)
#endif
#break
#endswitch
#break
*--#] d316 : 
*--#[ d381 :
#case Md381
#procedure SimpleDotd381()
if (count(Md381,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id Q.p5 = i10 - i11;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md381,dotrewrite-d381-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md381,dotrewrite-d381-3)
	#call replace(p5.p7,i14+i6/2+i7/2-i8/2,i,i14,i6,i7,i8,Md381,dotrewrite-d381-4)
	#call replace(p4.p5,i1/2-i13-i4/2-i5/2+i6/2,i,i1,i13,i4,i5,i6,Md381,dotrewrite-d381-5)
	#call replace(p4.p7,i11+i12-i13-i14+i2/2+i8/2-i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md381,dotrewrite-d381-6)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id Q.p5 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md381,dotrewrite-d381-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md381,dotrewrite-d381-3)
	#call replace(p1.p5,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md381,dotrewrite-d381-4)
	#call replace(p5.p7,i14+i6/2+i7/2-i8/2,i,i14,i6,i7,i8,Md381,dotrewrite-d381-5)
	#call replace(p1.p7,i11+i12-i13+i2/2+i8/2-i9/2,i,i11,i12,i13,i2,i8,i9,Md381,dotrewrite-d381-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = - p6.p + p8.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p9.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id p2.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md381,dotrewrite-d381-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-2)
	#call replace(p2.p9,-i2/2+i8/2-i9/2,i,i2,i8,i9,Md381,dotrewrite-d381-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md381,dotrewrite-d381-4)
	#call replace(Q.p9,-`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md381,dotrewrite-d381-5)
	#call replace(p6.p9,-i11+i13-i6/2+i7/2-i8/2,i,i11,i13,i6,i7,i8,Md381,dotrewrite-d381-6)
	#call replace(p3.p9,i1/2-i10-i14-i4/2+i5/2-i6/2,i,i1,i10,i14,i4,i5,i6,Md381,dotrewrite-d381-7)
#endif
#break
#case 39
* path: (3, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p9.p - p8.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id Q.p5 = i10 - i11;
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-1)
	#call replace(p5.p7,i14+i6/2+i7/2-i8/2,i,i14,i6,i7,i8,Md381,dotrewrite-d381-2)
	#call replace(Q.p9,-`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md381,dotrewrite-d381-3)
	#call replace(p3.p9,i1/2-i10-i14-i4/2+i5/2-i6/2,i,i1,i10,i14,i4,i5,i6,Md381,dotrewrite-d381-4)
	#call replace(p7.p9,i11-i13+i2/2+i6/2-i7/2-i9/2,i,i11,i13,i2,i6,i7,i9,Md381,dotrewrite-d381-5)
	#call replace(p5.p9,i1/2-i10+i11-i13-i14-i4/2+i5/2-i7/2+i8/2,i,i1,i10,i11,i13,i14,i4,i5,i7,i8,Md381,dotrewrite-d381-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md381,dotrewrite-d381-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md381,dotrewrite-d381-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md381,dotrewrite-d381-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md381,dotrewrite-d381-3)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md381,dotrewrite-d381-4)
	#call replace(p1.p7,i11+i12-i13+i2/2+i8/2-i9/2,i,i11,i12,i13,i2,i8,i9,Md381,dotrewrite-d381-5)
	#call replace(p4.p7,i11+i12-i13-i14+i2/2+i8/2-i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md381,dotrewrite-d381-6)
#endif
#break
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#case 47
* path: (4, 7)
#case 46
* path: (4, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md381,dotrewrite-d381-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md381,dotrewrite-d381-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md381,dotrewrite-d381-3)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md381,dotrewrite-d381-4)
	#call replace(p4.p7,i11+i12-i13-i14+i2/2+i8/2-i9/2,i,i11,i12,i13,i14,i2,i8,i9,Md381,dotrewrite-d381-5)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 38
* path: (3, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p8.p - p6.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id p2.p6 = i11 - i13;
	if (count(Md381,1)) id Q.p8 = i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md381,dotrewrite-d381-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md381,dotrewrite-d381-4)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md381,dotrewrite-d381-5)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md381,dotrewrite-d381-6)
	#call replace(p3.p8,i14+i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md381,dotrewrite-d381-7)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id Q.p5 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md381,dotrewrite-d381-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md381,dotrewrite-d381-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-3)
	#call replace(p1.p5,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md381,dotrewrite-d381-4)
	#call replace(p5.p7,i14+i6/2+i7/2-i8/2,i,i14,i6,i7,i8,Md381,dotrewrite-d381-5)
	#call replace(p1.p7,i11+i12-i13+i2/2+i8/2-i9/2,i,i11,i12,i13,i2,i8,i9,Md381,dotrewrite-d381-6)
#endif
#break
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = - p6.p + p8.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p9.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	if (count(Md381,1)) id p2.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md381,dotrewrite-d381-1)
	#call replace(p2.p9,-i2/2+i8/2-i9/2,i,i2,i8,i9,Md381,dotrewrite-d381-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md381,dotrewrite-d381-3)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md381,dotrewrite-d381-4)
	#call replace(p2.p4,`Q2'/2-i10-i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md381,dotrewrite-d381-5)
	#call replace(Q.p9,-`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md381,dotrewrite-d381-6)
	#call replace(p6.p9,-i11+i13-i6/2+i7/2-i8/2,i,i11,i13,i6,i7,i8,Md381,dotrewrite-d381-7)
	#call replace(p4.p9,-`Q2'/2+i10-i11-i12+i14+i4/2-i5/2+i6/2-i8/2+i9/2,i,i10,i11,i12,i14,i4,i5,i6,i8,i9,Md381,dotrewrite-d381-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = - p6.p + p8.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p2.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md381,dotrewrite-d381-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md381,dotrewrite-d381-2)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md381,dotrewrite-d381-3)
	#call replace(Q.p9,-`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md381,dotrewrite-d381-4)
	#call replace(p6.p9,-i11+i13-i6/2+i7/2-i8/2,i,i11,i13,i6,i7,i8,Md381,dotrewrite-d381-5)
	#call replace(p3.p9,i1/2-i10-i14-i4/2+i5/2-i6/2,i,i1,i10,i14,i4,i5,i6,Md381,dotrewrite-d381-6)
	#call replace(p4.p9,-`Q2'/2+i10-i11-i12+i14+i4/2-i5/2+i6/2-i8/2+i9/2,i,i10,i11,i12,i14,i4,i5,i6,i8,i9,Md381,dotrewrite-d381-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md381,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md381-5;
	if (count(Md381,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md381-4;
	if (count(Md381,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md381-3;
	if (count(Md381,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md381-2;
	if (count(Md381,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md381-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd381()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md381,dotrewrite-d381-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md381,dotrewrite-d381-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md381,dotrewrite-d381-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md381,dotrewrite-d381-3)
	#call replace(p1.p7,i11+i12-i13+i2/2+i8/2-i9/2,i,i11,i12,i13,i2,i8,i9,Md381,dotrewrite-d381-4)
#endif
#break
#endswitch
#break
*--#] d381 : 
*--#[ d216 :
#case Md216
#procedure SimpleDotd216()
if (count(Md216,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p5^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case 38
* path: (3, 8)
#case 58
* path: (5, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md216,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md216-4;
	if (count(Md216,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md216-3;
	if (count(Md216,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md216-2;
	if (count(Md216,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p7.p - p5.p;
	.sort:momrewrite-Md216-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd216()
	if (count(Md216,1)) id Q.p7 = i10 + i9;
	if (count(Md216,1)) id p3.p7 = i13 + i14;
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md216,dotrewrite-d216-2)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md216,dotrewrite-d216-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md216,dotrewrite-d216-4)
	#call replace(p5.p8,i11-i5/2+i6/2-i7/2-i9,i,i11,i5,i6,i7,i9,Md216,dotrewrite-d216-5)
	#call replace(p3.p8,i1/2-i12-i13-i14+i3/2-i4/2,i,i1,i12,i13,i14,i3,i4,Md216,dotrewrite-d216-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q2
* path: (0, 8, 2)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md216,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md216-4;
	if (count(Md216,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = - p5.p + p7.p;
	.sort:momrewrite-Md216-3;
	if (count(Md216,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md216-2;
	if (count(Md216,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md216-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd216()
	if (count(Md216,1)) id p2.p5 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md216,dotrewrite-d216-1)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md216,dotrewrite-d216-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md216,dotrewrite-d216-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md216,dotrewrite-d216-4)
	#call replace(p5.p8,i11-i5/2+i6/2-i7/2-i9,i,i11,i5,i6,i7,i9,Md216,dotrewrite-d216-5)
	#call replace(p3.p8,i1/2-i12-i13-i14+i3/2-i4/2,i,i1,i12,i13,i14,i3,i4,Md216,dotrewrite-d216-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 5)
#case Q7
* path: (0, 5, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md216,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md216-4;
	if (count(Md216,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md216-3;
	if (count(Md216,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p7.p - p5.p;
	.sort:momrewrite-Md216-2;
	if (count(Md216,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md216-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd216()
	if (count(Md216,1)) id p2.p5 = -i11 + i9;
	if (count(Md216,1)) id Q.p7 = i10 + i9;
	if (count(Md216,1)) id p3.p7 = i13 + i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md216,dotrewrite-d216-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md216,dotrewrite-d216-4)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md216,dotrewrite-d216-5)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md216,dotrewrite-d216-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md216,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md216-4;
	if (count(Md216,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md216-3;
	if (count(Md216,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md216-2;
	if (count(Md216,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p7.p - p5.p;
	.sort:momrewrite-Md216-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd216()
	if (count(Md216,1)) id Q.p7 = i10 + i9;
	if (count(Md216,1)) id p3.p7 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md216,dotrewrite-d216-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md216,dotrewrite-d216-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md216,dotrewrite-d216-4)
	#call replace(p1.p7,i10+i2/2+i7/2-i8/2+i9,i,i10,i2,i7,i8,i9,Md216,dotrewrite-d216-5)
#endif
#break
#default
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md216,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md216-4;
	if (count(Md216,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md216-3;
	if (count(Md216,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md216-2;
	if (count(Md216,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md216-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd216()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md216,dotrewrite-d216-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md216,dotrewrite-d216-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md216,dotrewrite-d216-2)
	#call replace(p1.p6,i10-i11+i2/2+i7/2-i8/2+i9,i,i10,i11,i2,i7,i8,i9,Md216,dotrewrite-d216-3)
#endif
#break
#endswitch
#break
*--#] d216 : 
*--#[ d285 :
#case Md285
#procedure SimpleDotd285()
if (count(Md285,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 3, 6)
#case 26
* path: (2, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md285,dotrewrite-d285-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md285,dotrewrite-d285-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md285,dotrewrite-d285-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md285,dotrewrite-d285-3)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md285,dotrewrite-d285-4)
	#call replace(p3.p6,`Q2'/2-i10+i11-i3/2-i6/2+i8/2-i9,i,i10,i11,i3,i6,i8,i9,Md285,dotrewrite-d285-5)
#endif
#break
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p + p2.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md285,dotrewrite-d285-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md285,dotrewrite-d285-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md285,dotrewrite-d285-2)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md285,dotrewrite-d285-3)
	#call replace(p1.p6,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2+i9,i,i10,i2,i3,i7,i8,i9,Md285,dotrewrite-d285-4)
	#call replace(p3.p6,`Q2'/2-i10+i11-i3/2-i6/2+i8/2-i9,i,i10,i11,i3,i6,i8,i9,Md285,dotrewrite-d285-5)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p5.p + p4.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	#call replace(Q.p8,i10-i11+i9,i,i10,i11,i9,Md285,dotrewrite-d285-0)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md285,dotrewrite-d285-1)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md285,dotrewrite-d285-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md285,dotrewrite-d285-3)
	#call replace(p2.p8,-`Q2'/2-i1/2+i10+i3/2-i6/2+i7/2+i9,i,i1,i10,i3,i6,i7,i9,Md285,dotrewrite-d285-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	if (count(Md285,1)) id Q.p7 = i10 - i11;
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md285,dotrewrite-d285-1)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md285,dotrewrite-d285-2)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md285,dotrewrite-d285-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md285,dotrewrite-d285-4)
	#call replace(p1.p6,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2+i9,i,i10,i2,i3,i7,i8,i9,Md285,dotrewrite-d285-5)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p5.p + p4.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md285,dotrewrite-d285-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md285,dotrewrite-d285-1)
	#call replace(Q.p8,i10-i11+i9,i,i10,i11,i9,Md285,dotrewrite-d285-2)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md285,dotrewrite-d285-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md285,dotrewrite-d285-4)
	#call replace(p3.p8,`Q2'/2-i11-i3/2+i6/2-i8/2,i,i11,i3,i6,i8,Md285,dotrewrite-d285-5)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md285,dotrewrite-d285-6)
#endif
#break
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p5.p + p4.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	if (count(Md285,1)) id Q.p7 = i10 - i11;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md285,dotrewrite-d285-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md285,dotrewrite-d285-2)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md285,dotrewrite-d285-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md285,dotrewrite-d285-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md285,dotrewrite-d285-5)
	#call replace(p3.p7,i1/2+i10-i11-i2/2+i6/2-i8/2,i,i1,i10,i11,i2,i6,i8,Md285,dotrewrite-d285-6)
#endif
#break
#case Q2
* path: (0, 3, 2)
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p - p7.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	if (count(Md285,1)) id Q.p7 = i10 - i11;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md285,dotrewrite-d285-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md285,dotrewrite-d285-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md285,dotrewrite-d285-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md285,dotrewrite-d285-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md285,dotrewrite-d285-5)
	#call replace(p3.p7,i1/2+i10-i11-i2/2+i6/2-i8/2,i,i1,i10,i11,i2,i6,i8,Md285,dotrewrite-d285-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 48
* path: (4, 6, 8)
#case 68
* path: (6, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p8.p - p7.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	if (count(Md285,1)) id Q.p7 = i10 - i11;
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md285,dotrewrite-d285-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md285,dotrewrite-d285-2)
	#call replace(Q.p8,i10-i11+i9,i,i10,i11,i9,Md285,dotrewrite-d285-3)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md285,dotrewrite-d285-4)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md285,dotrewrite-d285-5)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md285,dotrewrite-d285-6)
	#call replace(p6.p8,-`Q2'/2+i10+i3/2-i6/2-i8/2+i9,i,i10,i3,i6,i8,i9,Md285,dotrewrite-d285-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 27
* path: (2, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p7.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p - p7.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	if (count(Md285,1)) id Q.p7 = i10 - i11;
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md285,dotrewrite-d285-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md285,dotrewrite-d285-2)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md285,dotrewrite-d285-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md285,dotrewrite-d285-4)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	if (count(Md285,1)) id Q.p5 = i11 - i12;
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md285,dotrewrite-d285-1)
	#call replace(p2.p5,-i14+i2/2+i6/2-i7/2,i,i14,i2,i6,i7,Md285,dotrewrite-d285-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md285,dotrewrite-d285-3)
	#call replace(p1.p5,-`Q2'/2+i10-i13-i2/2+i3/2+i7/2-i8/2+i9,i,i10,i13,i2,i3,i7,i8,i9,Md285,dotrewrite-d285-4)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md285,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md285-4;
	if (count(Md285,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md285-3;
	if (count(Md285,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md285-2;
	if (count(Md285,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md285-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd285()
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md285,dotrewrite-d285-0)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md285,dotrewrite-d285-1)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md285,dotrewrite-d285-2)
	#call replace(p1.p6,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2+i9,i,i10,i2,i3,i7,i8,i9,Md285,dotrewrite-d285-3)
#endif
#break
#endswitch
#break
*--#] d285 : 
*--#[ d236 :
#case Md236
#procedure SimpleDotd236()
if (count(Md236,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	if (count(Md236,1)) id p2.p3 = -i11 + i9;
	if (count(Md236,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md236,dotrewrite-d236-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md236,dotrewrite-d236-3)
	#call replace(p2.p6,`Q2'/2-i1/2+i11+i7/2-i8/2-i9,i,i1,i11,i7,i8,i9,Md236,dotrewrite-d236-4)
	#call replace(p3.p6,-`Q2'/2+i10-i3/2-i6/2+i8/2+i9,i,i10,i3,i6,i8,i9,Md236,dotrewrite-d236-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 28
* path: (2, 8)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 8)
#case 44
* path: (4,)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	if (count(Md236,1)) id p2.p3 = -i11 + i9;
	if (count(Md236,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md236,dotrewrite-d236-2)
	#call replace(Q.p8,`Q2'-i10-i9,i,i10,i9,Md236,dotrewrite-d236-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md236,dotrewrite-d236-4)
	#call replace(p3.p8,`Q2'/2-i10-i3/2+i6/2-i8/2,i,i10,i3,i6,i8,Md236,dotrewrite-d236-5)
	#call replace(p4.p8,i12-i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md236,dotrewrite-d236-6)
#endif
#break
#case 26
* path: (2, 8, 6)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	if (count(Md236,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md236,dotrewrite-d236-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md236,dotrewrite-d236-2)
	#call replace(Q.p8,`Q2'-i10-i9,i,i10,i9,Md236,dotrewrite-d236-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md236,dotrewrite-d236-4)
	#call replace(p4.p8,i12-i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md236,dotrewrite-d236-5)
	#call replace(p6.p8,`Q2'/2+i3/2-i6/2-i8/2-i9,i,i3,i6,i8,i9,Md236,dotrewrite-d236-6)
	#call replace(p2.p6,`Q2'/2-i1/2+i11+i7/2-i8/2-i9,i,i1,i11,i7,i8,i9,Md236,dotrewrite-d236-7)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md236,dotrewrite-d236-0)
	#call replace(Q.p7,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md236,dotrewrite-d236-1)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md236,dotrewrite-d236-2)
	#call replace(p1.p7,`Q2'/2+i1/2-i10+i7/2-i8/2-i9,i,i1,i10,i7,i8,i9,Md236,dotrewrite-d236-3)
	#call replace(p3.p7,`Q2'/2-i10+i11-i3/2+i6/2-i8/2-i9,i,i10,i11,i3,i6,i8,i9,Md236,dotrewrite-d236-4)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p3.p + Q.p - p8.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	if (count(Md236,1)) id p2.p3 = -i11 + i9;
	if (count(Md236,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md236,dotrewrite-d236-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md236,dotrewrite-d236-3)
	#call replace(Q.p7,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md236,dotrewrite-d236-4)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md236,dotrewrite-d236-5)
	#call replace(p3.p7,`Q2'/2-i10+i11-i3/2+i6/2-i8/2-i9,i,i10,i11,i3,i6,i8,i9,Md236,dotrewrite-d236-6)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p6.p + Q.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	if (count(Md236,1)) id Q.p5 = i10 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md236,dotrewrite-d236-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md236,dotrewrite-d236-2)
	#call replace(p3.p5,-`Q2'/2+i10-i14-i3/2-i6/2+i8/2+i9,i,i10,i14,i3,i6,i8,i9,Md236,dotrewrite-d236-3)
	#call replace(p1.p5,-`Q2'/2+i1/2+i10-i11-i13-i7/2+i8/2+i9,i,i1,i10,i11,i13,i7,i8,i9,Md236,dotrewrite-d236-4)
#endif
#break
#case 67
* path: (6, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p + p8.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md236,dotrewrite-d236-0)
	#call replace(Q.p7,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md236,dotrewrite-d236-1)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md236,dotrewrite-d236-2)
	#call replace(p6.p7,i1/2-i11+i3/2-i6/2-i7/2,i,i1,i11,i3,i6,i7,Md236,dotrewrite-d236-3)
	#call replace(p3.p6,-`Q2'/2+i10-i3/2-i6/2+i8/2+i9,i,i10,i3,i6,i8,i9,Md236,dotrewrite-d236-4)
	#call replace(p3.p7,`Q2'/2-i10+i11-i3/2+i6/2-i8/2-i9,i,i10,i11,i3,i6,i8,i9,Md236,dotrewrite-d236-5)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md236,dotrewrite-d236-0)
	#call replace(Q.p8,`Q2'-i10-i9,i,i10,i9,Md236,dotrewrite-d236-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md236,dotrewrite-d236-2)
	#call replace(Q.p7,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md236,dotrewrite-d236-3)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md236,dotrewrite-d236-4)
	#call replace(p6.p7,i1/2-i11+i3/2-i6/2-i7/2,i,i1,i11,i3,i6,i7,Md236,dotrewrite-d236-5)
	#call replace(p4.p8,i12-i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md236,dotrewrite-d236-6)
	#call replace(p6.p8,`Q2'/2+i3/2-i6/2-i8/2-i9,i,i3,i6,i8,i9,Md236,dotrewrite-d236-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md236,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md236-4;
	if (count(Md236,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md236-3;
	if (count(Md236,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md236-2;
	if (count(Md236,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md236-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd236()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md236,dotrewrite-d236-0)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md236,dotrewrite-d236-1)
	#call replace(p3.p6,-`Q2'/2+i10-i3/2-i6/2+i8/2+i9,i,i10,i3,i6,i8,i9,Md236,dotrewrite-d236-2)
	#call replace(p1.p6,-`Q2'/2+i1/2+i10-i11-i7/2+i8/2+i9,i,i1,i10,i11,i7,i8,i9,Md236,dotrewrite-d236-3)
#endif
#break
#endswitch
#break
*--#] d236 : 
*--#[ d239 :
#case Md239
#procedure SimpleDotd239()
if (count(Md239,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case 26
* path: (2, 1, 6)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	if (count(Md239,1)) id p2.p3 = -i11 + i9;
	if (count(Md239,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md239,dotrewrite-d239-2)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md239,dotrewrite-d239-3)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md239,dotrewrite-d239-4)
	#call replace(p2.p6,i11-i2/2-i7/2+i8/2-i9,i,i11,i2,i7,i8,i9,Md239,dotrewrite-d239-5)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p7.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md239,dotrewrite-d239-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md239,dotrewrite-d239-1)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md239,dotrewrite-d239-2)
	#call replace(p3.p8,i11-i3/2+i6/2-i7/2-i9,i,i11,i3,i6,i7,i9,Md239,dotrewrite-d239-3)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md239,dotrewrite-d239-4)
	#call replace(p6.p8,-i11+i2/2+i3/2-i6/2-i8/2+i9,i,i11,i2,i3,i6,i8,i9,Md239,dotrewrite-d239-5)
#endif
#break
#case Q8
* path: (0, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p - p7.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	if (count(Md239,1)) id p2.p3 = -i11 + i9;
	if (count(Md239,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md239,dotrewrite-d239-2)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md239,dotrewrite-d239-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md239,dotrewrite-d239-4)
	#call replace(p3.p8,i11-i3/2+i6/2-i7/2-i9,i,i11,i3,i6,i7,i9,Md239,dotrewrite-d239-5)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md239,dotrewrite-d239-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p - p7.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md239,dotrewrite-d239-0)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md239,dotrewrite-d239-1)
	#call replace(p3.p8,i11-i3/2+i6/2-i7/2-i9,i,i11,i3,i6,i7,i9,Md239,dotrewrite-d239-2)
	#call replace(p1.p8,-`Q2'/2+i1/2-i10-i7/2+i8/2-i9,i,i1,i10,i7,i8,i9,Md239,dotrewrite-d239-3)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md239,dotrewrite-d239-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case Q7
* path: (0, 3, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 67
* path: (6, 3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p3.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p - p7.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	if (count(Md239,1)) id p2.p3 = -i11 + i9;
	if (count(Md239,1)) id p2.p4 = i12 - i13;
	if (count(Md239,1)) id Q.p7 = i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md239,dotrewrite-d239-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md239,dotrewrite-d239-4)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md239,dotrewrite-d239-5)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md239,dotrewrite-d239-6)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p - p5.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	if (count(Md239,1)) id Q.p5 = -i10 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md239,dotrewrite-d239-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md239,dotrewrite-d239-2)
	#call replace(p3.p5,-i14+i3/2+i6/2-i7/2,i,i14,i3,i6,i7,Md239,dotrewrite-d239-3)
	#call replace(p1.p5,-i10+i11-i13-i2/2-i7/2+i8/2-i9,i,i10,i11,i13,i2,i7,i8,i9,Md239,dotrewrite-d239-4)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p3.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p - p7.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	if (count(Md239,1)) id Q.p7 = i10 + i9;
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md239,dotrewrite-d239-1)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md239,dotrewrite-d239-2)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md239,dotrewrite-d239-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md239,dotrewrite-d239-4)
	#call replace(p3.p8,i11-i3/2+i6/2-i7/2-i9,i,i11,i3,i6,i7,i9,Md239,dotrewrite-d239-5)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md239,dotrewrite-d239-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md239,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md239-4;
	if (count(Md239,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md239-3;
	if (count(Md239,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md239-2;
	if (count(Md239,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md239-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd239()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md239,dotrewrite-d239-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md239,dotrewrite-d239-1)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md239,dotrewrite-d239-2)
	#call replace(p1.p6,i10-i11+i2/2+i7/2-i8/2+i9,i,i10,i11,i2,i7,i8,i9,Md239,dotrewrite-d239-3)
#endif
#break
#endswitch
#break
*--#] d239 : 
*--#[ d162 :
#case Md162
#procedure SimpleDotd162()
if (count(Md162,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md162,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = - p5.p - p6.p;
	.sort:momrewrite-Md162-3;
	if (count(Md162,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p5.p;
	.sort:momrewrite-Md162-2;
	if (count(Md162,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md162-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd162()
	if (count(Md162,1)) id p1.p5 = -i13 - i14;
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md162,dotrewrite-d162-1)
	#call replace(p1.p6,-i12+i13+i14,i,i12,i13,i14,Md162,dotrewrite-d162-2)
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md162,dotrewrite-d162-3)
	#call replace(p3.p6,-i10+i3/2-i4/2+i5/2,i,i10,i3,i4,i5,Md162,dotrewrite-d162-4)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md162,dotrewrite-d162-5)
	#call replace(Q.p5,-`Q2'/2-i1/2+i11+i12-i13-i14-i6/2+i7/2-i8,i,i1,i11,i12,i13,i14,i6,i7,i8,Md162,dotrewrite-d162-6)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case 15
* path: (1, 5)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md162,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p6.p;
	.sort:momrewrite-Md162-3;
	if (count(Md162,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p5.p;
	.sort:momrewrite-Md162-2;
	if (count(Md162,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p5.p;
	.sort:momrewrite-Md162-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd162()
	if (count(Md162,1)) id p1.p5 = -i13 - i14;
	#call replace(p2.p5,-i2/2-i5/2+i6/2,i,i2,i5,i6,Md162,dotrewrite-d162-1)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md162,dotrewrite-d162-2)
	#call replace(Q.p5,-`Q2'/2-i1/2+i11+i12-i13-i14-i6/2+i7/2-i8,i,i1,i11,i12,i13,i14,i6,i7,i8,Md162,dotrewrite-d162-3)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md162,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md162-3;
	if (count(Md162,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p3.p + p6.p;
	.sort:momrewrite-Md162-2;
	if (count(Md162,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md162-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd162()
	#call replace(p1.p7,-i1+i11+i12-i13-i14,i,i1,i11,i12,i13,i14,Md162,dotrewrite-d162-0)
	#call replace(p2.p7,-i12+i2/2-i5/2+i6/2+i8,i,i12,i2,i5,i6,i8,Md162,dotrewrite-d162-1)
	#call replace(p3.p7,i10-i13-i3/2+i4/2-i5/2+i9,i,i10,i13,i3,i4,i5,i9,Md162,dotrewrite-d162-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md162,dotrewrite-d162-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md162,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p6.p;
	.sort:momrewrite-Md162-3;
	if (count(Md162,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p + p6.p - p3.p;
	.sort:momrewrite-Md162-2;
	if (count(Md162,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md162-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd162()
	#call replace(p1.p6,-i12+i13+i14,i,i12,i13,i14,Md162,dotrewrite-d162-0)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md162,dotrewrite-d162-1)
	#call replace(p3.p6,-i10+i3/2-i4/2+i5/2,i,i10,i3,i4,i5,Md162,dotrewrite-d162-2)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md162,dotrewrite-d162-3)
#endif
#break
#default
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md162,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p6.p;
	.sort:momrewrite-Md162-3;
	if (count(Md162,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md162-2;
	if (count(Md162,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p - p2.p;
	.sort:momrewrite-Md162-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd162()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md162,dotrewrite-d162-0)
	#call replace(p2.p4,-i10+i2/2+i5/2-i6/2,i,i10,i2,i5,i6,Md162,dotrewrite-d162-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i12+i13+i14+i6/2-i7/2+i8-i9,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md162,dotrewrite-d162-2)
#endif
#break
#endswitch
#break
*--#] d162 : 
*--#[ d62 :
#case Md62
#procedure SimpleDotd62()
if (count(Md62,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md62,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md62-3;
	if (count(Md62,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md62-2;
	if (count(Md62,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p6.p;
	.sort:momrewrite-Md62-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd62()
	if (count(Md62,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md62,dotrewrite-d62-1)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md62,dotrewrite-d62-2)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md62,dotrewrite-d62-3)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md62,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md62-3;
	if (count(Md62,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p5.p + Q.p;
	.sort:momrewrite-Md62-2;
	if (count(Md62,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p4.p;
	.sort:momrewrite-Md62-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd62()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md62,dotrewrite-d62-0)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md62,dotrewrite-d62-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i6/2+i7-i8,i,i1,i6,i7,i8,Md62,dotrewrite-d62-2)
	#call replace(p2.p4,i2/2-i3/2+i4/2-i6/2+i8-i9,i,i2,i3,i4,i6,i8,i9,Md62,dotrewrite-d62-3)
#endif
#break
#case Q5
* path: (0, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md62,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md62-3;
	if (count(Md62,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md62-2;
	if (count(Md62,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md62-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd62()
	if (count(Md62,1)) id p3.p6 = i8 - i9;
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md62,dotrewrite-d62-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md62,dotrewrite-d62-2)
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md62,dotrewrite-d62-3)
	#call replace(Q.p5,-`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md62,dotrewrite-d62-4)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md62,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md62-3;
	if (count(Md62,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p5.p;
	.sort:momrewrite-Md62-2;
	if (count(Md62,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p + p2.p + p5.p;
	.sort:momrewrite-Md62-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd62()
	#call replace(p2.p5,-i2/2-i5/2+i6/2,i,i2,i5,i6,Md62,dotrewrite-d62-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md62,dotrewrite-d62-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md62,dotrewrite-d62-2)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md62,dotrewrite-d62-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md62,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md62-3;
	if (count(Md62,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md62-2;
	if (count(Md62,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - Q.p - p5.p;
	.sort:momrewrite-Md62-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd62()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md62,dotrewrite-d62-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md62,dotrewrite-d62-1)
	#call replace(Q.p5,-`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md62,dotrewrite-d62-2)
	#call replace(p1.p5,-`Q2'/2+i1/2-i2/2+i5/2-i7,i,i1,i2,i5,i7,Md62,dotrewrite-d62-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md62,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md62-3;
	if (count(Md62,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md62-2;
	if (count(Md62,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md62-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd62()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md62,dotrewrite-d62-0)
	#call replace(p1.p2,i2/2-i5/2+i6/2+i7,i,i2,i5,i6,i7,Md62,dotrewrite-d62-1)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md62,dotrewrite-d62-2)
#endif
#break
#endswitch
#break
*--#] d62 : 
*--#[ d161 :
#case Md161
#procedure SimpleDotd161()
if (count(Md161,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 2, 3)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md161,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md161-3;
	if (count(Md161,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p5.p - p1.p;
	.sort:momrewrite-Md161-2;
	if (count(Md161,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md161-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd161()
	if (count(Md161,1)) id p1.p5 = i13 + i14;
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md161,dotrewrite-d161-1)
	#call replace(p2.p5,-i1/2+i12+i13+i14-i2/2-i5/2+i6/2,i,i1,i12,i13,i14,i2,i5,i6,Md161,dotrewrite-d161-2)
	#call replace(Q.p5,`Q2'/2-i1/2+i12+i13+i14+i6/2-i7/2-i8,i,i1,i12,i13,i14,i6,i7,i8,Md161,dotrewrite-d161-3)
#endif
#break
#case Q5
* path: (0, 7, 5)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md161,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md161-3;
	if (count(Md161,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = + Q.p - p5.p - p7.p;
	.sort:momrewrite-Md161-2;
	if (count(Md161,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md161-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd161()
	if (count(Md161,1)) id p1.p5 = i13 + i14;
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md161,dotrewrite-d161-1)
	#call replace(p1.p7,i11-i12-i13-i14,i,i11,i12,i13,i14,Md161,dotrewrite-d161-2)
	#call replace(p3.p7,-i10-i3/2+i4/2-i5/2+i9,i,i10,i3,i4,i5,i9,Md161,dotrewrite-d161-3)
	#call replace(p5.p7,`Q2'/2+i2/2-i5/2-i7/2-i8,i,i2,i5,i7,i8,Md161,dotrewrite-d161-4)
	#call replace(Q.p7,`Q2'/2+i1/2-i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md161,dotrewrite-d161-5)
	#call replace(Q.p5,`Q2'/2-i1/2+i12+i13+i14+i6/2-i7/2-i8,i,i1,i12,i13,i14,i6,i7,i8,Md161,dotrewrite-d161-6)
#endif
#break
#case Q7
* path: (0, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md161,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md161-3;
	if (count(Md161,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md161-2;
	if (count(Md161,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md161-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd161()
	#call replace(p1.p7,i11-i12-i13-i14,i,i11,i12,i13,i14,Md161,dotrewrite-d161-0)
	#call replace(p3.p7,-i10-i3/2+i4/2-i5/2+i9,i,i10,i3,i4,i5,i9,Md161,dotrewrite-d161-1)
	#call replace(Q.p7,`Q2'/2+i1/2-i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md161,dotrewrite-d161-2)
	#call replace(p2.p7,i1/2-i12-i13-i14-i2/2+i5/2-i6/2+i8,i,i1,i12,i13,i14,i2,i5,i6,i8,Md161,dotrewrite-d161-3)
#endif
#break
#case 16
* path: (1, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md161,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md161-3;
	if (count(Md161,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p - p2.p;
	.sort:momrewrite-Md161-2;
	if (count(Md161,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md161-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd161()
	#call replace(p1.p6,-i1+i12+i13+i14,i,i1,i12,i13,i14,Md161,dotrewrite-d161-0)
	#call replace(p3.p6,i10-i13+i3/2-i4/2+i5/2,i,i10,i13,i3,i4,i5,Md161,dotrewrite-d161-1)
	#call replace(p2.p6,-i1/2+i13+i14+i2/2-i5/2+i6/2,i,i1,i13,i14,i2,i5,i6,Md161,dotrewrite-d161-2)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md161,dotrewrite-d161-3)
#endif
#break
#default
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md161,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md161-3;
	if (count(Md161,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p5.p + Q.p;
	.sort:momrewrite-Md161-2;
	if (count(Md161,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md161-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd161()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md161,dotrewrite-d161-0)
	#call replace(p2.p4,-i1/2-i10+i12+i13+i14-i2/2-i5/2+i6/2,i,i1,i10,i12,i13,i14,i2,i5,i6,Md161,dotrewrite-d161-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i12+i13+i14+i6/2-i7/2-i8-i9,i,i1,i12,i13,i14,i6,i7,i8,i9,Md161,dotrewrite-d161-2)
#endif
#break
#endswitch
#break
*--#] d161 : 
*--#[ d68 :
#case Md68
#procedure SimpleDotd68()
if (count(Md68,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md68,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p + p3.p;
	.sort:momrewrite-Md68-3;
	if (count(Md68,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p - p2.p;
	.sort:momrewrite-Md68-2;
	if (count(Md68,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md68-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd68()
	if (count(Md68,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md68,dotrewrite-d68-1)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md68,dotrewrite-d68-2)
	#call replace(p2.p6,-i1/2-i2/2+i5/2+i7,i,i1,i2,i5,i7,Md68,dotrewrite-d68-3)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md68,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md68-3;
	if (count(Md68,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md68-2;
	if (count(Md68,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p5.p - p6.p;
	.sort:momrewrite-Md68-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd68()
	if (count(Md68,1)) id p3.p6 = i8 - i9;
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md68,dotrewrite-d68-1)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md68,dotrewrite-d68-2)
	#call replace(Q.p5,`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md68,dotrewrite-d68-3)
	#call replace(p5.p6,`Q2'/2+i2/2-i5/2-i6/2-i7,i,i2,i5,i6,i7,Md68,dotrewrite-d68-4)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md68,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md68-3;
	if (count(Md68,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md68-2;
	if (count(Md68,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md68-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd68()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md68,dotrewrite-d68-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md68,dotrewrite-d68-1)
	#call replace(p1.p4,i1/2-i2/2+i5/2-i9,i,i1,i2,i5,i9,Md68,dotrewrite-d68-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i6/2-i7-i8,i,i1,i6,i7,i8,Md68,dotrewrite-d68-3)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md68,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md68-3;
	if (count(Md68,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p5.p;
	.sort:momrewrite-Md68-2;
	if (count(Md68,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md68-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd68()
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md68,dotrewrite-d68-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md68,dotrewrite-d68-1)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md68,dotrewrite-d68-2)
	#call replace(Q.p5,`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md68,dotrewrite-d68-3)
#endif
#break
#case Q5
* path: (0, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md68,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p5.p;
	.sort:momrewrite-Md68-3;
	if (count(Md68,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md68-2;
	if (count(Md68,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md68-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd68()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md68,dotrewrite-d68-0)
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md68,dotrewrite-d68-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md68,dotrewrite-d68-2)
	#call replace(Q.p5,`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md68,dotrewrite-d68-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md68,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md68-3;
	if (count(Md68,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md68-2;
	if (count(Md68,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p3.p;
	.sort:momrewrite-Md68-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd68()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md68,dotrewrite-d68-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md68,dotrewrite-d68-1)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md68,dotrewrite-d68-2)
#endif
#break
#endswitch
#break
*--#] d68 : 
*--#[ d158 :
#case Md158
#procedure SimpleDotd158()
if (count(Md158,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md158,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p - p3.p;
	.sort:momrewrite-Md158-3;
	if (count(Md158,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p1.p;
	.sort:momrewrite-Md158-2;
	if (count(Md158,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md158-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd158()
	if (count(Md158,1)) id Q.p5 = i10 + i9;
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md158,dotrewrite-d158-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md158,dotrewrite-d158-2)
	#call replace(p2.p5,-`Q2'/2+i10-i2/2-i5/2+i7/2+i8+i9,i,i10,i2,i5,i7,i8,i9,Md158,dotrewrite-d158-3)
#endif
#break
#case 27
* path: (2, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md158,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p3.p + p4.p;
	.sort:momrewrite-Md158-3;
	if (count(Md158,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p + p5.p;
	.sort:momrewrite-Md158-2;
	if (count(Md158,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md158-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd158()
	#call replace(Q.p7,`Q2'-i10-i8-i9,i,i10,i8,i9,Md158,dotrewrite-d158-0)
	#call replace(p1.p7,-i1/2+i12-i13-i5/2+i6/2,i,i1,i12,i13,i5,i6,Md158,dotrewrite-d158-1)
	#call replace(p3.p7,-i11-i3/2+i4/2-i5/2+i9,i,i11,i3,i4,i5,i9,Md158,dotrewrite-d158-2)
	#call replace(p2.p7,`Q2'/2-i10-i2/2+i5/2-i7/2-i9,i,i10,i2,i5,i7,i9,Md158,dotrewrite-d158-3)
#endif
#break
#case 16
* path: (1, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md158,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p5.p + Q.p;
	.sort:momrewrite-Md158-3;
	if (count(Md158,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p;
	.sort:momrewrite-Md158-2;
	if (count(Md158,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p + p6.p - p3.p;
	.sort:momrewrite-Md158-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd158()
	#call replace(Q.p6,i10-i12+i9,i,i10,i12,i9,Md158,dotrewrite-d158-0)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md158,dotrewrite-d158-1)
	#call replace(p3.p6,-i14+i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md158,dotrewrite-d158-2)
	#call replace(p2.p6,-`Q2'/2+i10-i13-i2/2-i5/2+i7/2+i8+i9,i,i10,i13,i2,i5,i7,i8,i9,Md158,dotrewrite-d158-3)
#endif
#break
#default
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md158,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p5.p + Q.p;
	.sort:momrewrite-Md158-3;
	if (count(Md158,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md158-2;
	if (count(Md158,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p - p1.p;
	.sort:momrewrite-Md158-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd158()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md158,dotrewrite-d158-0)
	#call replace(p1.p4,i1/2-i14+i5/2-i6/2,i,i1,i14,i5,i6,Md158,dotrewrite-d158-1)
	#call replace(p2.p4,-`Q2'/2+i10-i11-i2/2-i5/2+i7/2+i8+i9,i,i10,i11,i2,i5,i7,i8,i9,Md158,dotrewrite-d158-2)
#endif
#break
#endswitch
#break
*--#] d158 : 
*--#[ d284 :
#case Md284
#procedure SimpleDotd284()
if (count(Md284,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 16
* path: (1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p + p8.p - p1.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	#call replace(Q.p8,i10-i11+i9,i,i10,i11,i9,Md284,dotrewrite-d284-0)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md284,dotrewrite-d284-1)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md284,dotrewrite-d284-2)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md284,dotrewrite-d284-3)
	#call replace(p6.p8,-`Q2'/2+i10+i3/2-i6/2-i8/2+i9,i,i10,i3,i6,i8,i9,Md284,dotrewrite-d284-4)
	#call replace(p1.p6,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2+i9,i,i10,i2,i3,i7,i8,i9,Md284,dotrewrite-d284-5)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md284,dotrewrite-d284-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md284,dotrewrite-d284-1)
	#call replace(Q.p8,i10-i11+i9,i,i10,i11,i9,Md284,dotrewrite-d284-2)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md284,dotrewrite-d284-3)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md284,dotrewrite-d284-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md284,dotrewrite-d284-5)
	#call replace(p3.p8,`Q2'/2-i11-i3/2+i6/2-i8/2,i,i11,i3,i6,i8,Md284,dotrewrite-d284-6)
#endif
#break
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p4.p - p5.p + p2.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	if (count(Md284,1)) id Q.p7 = i10 - i11;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md284,dotrewrite-d284-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md284,dotrewrite-d284-2)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md284,dotrewrite-d284-3)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md284,dotrewrite-d284-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md284,dotrewrite-d284-5)
	#call replace(p3.p7,i1/2+i10-i11-i2/2+i6/2-i8/2,i,i1,i10,i11,i2,i6,i8,Md284,dotrewrite-d284-6)
#endif
#break
#case Q2
* path: (0, 3, 2)
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p7.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	if (count(Md284,1)) id Q.p7 = i10 - i11;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md284,dotrewrite-d284-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md284,dotrewrite-d284-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md284,dotrewrite-d284-3)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md284,dotrewrite-d284-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md284,dotrewrite-d284-5)
	#call replace(p3.p7,i1/2+i10-i11-i2/2+i6/2-i8/2,i,i1,i10,i11,i2,i6,i8,Md284,dotrewrite-d284-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 24
* path: (2, 4)
#case 27
* path: (2, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p7.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	if (count(Md284,1)) id Q.p7 = i10 - i11;
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md284,dotrewrite-d284-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md284,dotrewrite-d284-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md284,dotrewrite-d284-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md284,dotrewrite-d284-4)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	#call replace(Q.p5,i10-i11-i12,i,i10,i11,i12,Md284,dotrewrite-d284-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md284,dotrewrite-d284-1)
	#call replace(p1.p5,-i1/2-i13-i7/2+i8/2,i,i1,i13,i7,i8,Md284,dotrewrite-d284-2)
	#call replace(p2.p5,-i14+i2/2-i6/2+i7/2,i,i14,i2,i6,i7,Md284,dotrewrite-d284-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md284,dotrewrite-d284-4)
#endif
#break
#default
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md284,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md284-4;
	if (count(Md284,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md284-3;
	if (count(Md284,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md284-2;
	if (count(Md284,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md284-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd284()
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md284,dotrewrite-d284-0)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md284,dotrewrite-d284-1)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md284,dotrewrite-d284-2)
	#call replace(p1.p6,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2+i9,i,i10,i2,i3,i7,i8,i9,Md284,dotrewrite-d284-3)
#endif
#break
#endswitch
#break
*--#] d284 : 
*--#[ d263 :
#case Md263
#procedure SimpleDotd263()
if (count(Md263,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p1.p4^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p3.p4^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md263,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = - p4.p + p7.p;
	.sort:momrewrite-Md263-4;
	if (count(Md263,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md263-3;
	if (count(Md263,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md263-2;
	if (count(Md263,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p - p6.p;
	.sort:momrewrite-Md263-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd263()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md263,dotrewrite-d263-0)
	#call replace(p3.p6,i12-i13-i14-i3,i,i12,i13,i14,i3,Md263,dotrewrite-d263-1)
	#call replace(p4.p6,i10-i13-i4/2+i5/2-i7/2,i,i10,i13,i4,i5,i7,Md263,dotrewrite-d263-2)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i6/2-i7/2,i,i1,i13,i14,i3,i6,i7,Md263,dotrewrite-d263-3)
	#call replace(Q.p6,`Q2'/2-i11+i12-i13-i14-i3/2+i6/2-i8/2,i,i11,i12,i13,i14,i3,i6,i8,Md263,dotrewrite-d263-4)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md263,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = - p4.p + p7.p;
	.sort:momrewrite-Md263-4;
	if (count(Md263,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md263-3;
	if (count(Md263,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md263-2;
	if (count(Md263,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md263-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd263()
	if (count(Md263,1)) id p2.p3 = i11 - i12;
	if (count(Md263,1)) id p2.p4 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md263,dotrewrite-d263-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md263,dotrewrite-d263-3)
	#call replace(p3.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md263,dotrewrite-d263-4)
	#call replace(p4.p8,-i10+i4/2-i5/2+i7/2+i9,i,i10,i4,i5,i7,i9,Md263,dotrewrite-d263-5)
	#call replace(Q.p8,`Q2'/2-i12+i13+i14+i3/2-i6/2+i8/2,i,i12,i13,i14,i3,i6,i8,Md263,dotrewrite-d263-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md263,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md263-4;
	if (count(Md263,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md263-3;
	if (count(Md263,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p7.p - p4.p;
	.sort:momrewrite-Md263-2;
	if (count(Md263,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md263-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd263()
	if (count(Md263,1)) id p3.p7 = i13 + i14;
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md263,dotrewrite-d263-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md263,dotrewrite-d263-2)
	#call replace(p3.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md263,dotrewrite-d263-3)
	#call replace(p4.p8,-i10+i4/2-i5/2+i7/2+i9,i,i10,i4,i5,i7,i9,Md263,dotrewrite-d263-4)
	#call replace(Q.p8,`Q2'/2-i12+i13+i14+i3/2-i6/2+i8/2,i,i12,i13,i14,i3,i6,i8,Md263,dotrewrite-d263-5)
	#call replace(Q.p7,i1/2-i12+i13+i14-i2/2+i3/2-i6/2+i8/2,i,i1,i12,i13,i14,i2,i3,i6,i8,Md263,dotrewrite-d263-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md263,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md263-4;
	if (count(Md263,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md263-3;
	if (count(Md263,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p7.p - p4.p;
	.sort:momrewrite-Md263-2;
	if (count(Md263,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md263-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd263()
	if (count(Md263,1)) id p3.p7 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md263,dotrewrite-d263-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md263,dotrewrite-d263-2)
	#call replace(p1.p7,i1/2-i12+i13+i14+i3/2-i6/2+i7/2,i,i1,i12,i13,i14,i3,i6,i7,Md263,dotrewrite-d263-3)
	#call replace(Q.p7,i1/2-i12+i13+i14-i2/2+i3/2-i6/2+i8/2,i,i1,i12,i13,i14,i2,i3,i6,i8,Md263,dotrewrite-d263-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 27
* path: (2, 7)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md263,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + Q.p - p8.p;
	.sort:momrewrite-Md263-4;
	if (count(Md263,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md263-3;
	if (count(Md263,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p7.p - p4.p;
	.sort:momrewrite-Md263-2;
	if (count(Md263,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md263-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd263()
	if (count(Md263,1)) id p2.p3 = i11 - i12;
	if (count(Md263,1)) id p2.p4 = -i10 + i9;
	if (count(Md263,1)) id p3.p7 = i13 + i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md263,dotrewrite-d263-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md263,dotrewrite-d263-4)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md263,dotrewrite-d263-5)
	#call replace(Q.p7,i1/2-i12+i13+i14-i2/2+i3/2-i6/2+i8/2,i,i1,i12,i13,i14,i2,i3,i6,i8,Md263,dotrewrite-d263-6)
#endif
#break
#default
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md263,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + Q.p - p8.p;
	.sort:momrewrite-Md263-4;
	if (count(Md263,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md263-3;
	if (count(Md263,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md263-2;
	if (count(Md263,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md263-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd263()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md263,dotrewrite-d263-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md263,dotrewrite-d263-1)
	#call replace(p1.p5,i1/2-i10-i12+i13+i14+i3/2-i6/2+i7/2,i,i1,i10,i12,i13,i14,i3,i6,i7,Md263,dotrewrite-d263-2)
	#call replace(Q.p5,i1/2-i12+i13+i14-i2/2+i3/2-i6/2+i8/2-i9,i,i1,i12,i13,i14,i2,i3,i6,i8,i9,Md263,dotrewrite-d263-3)
#endif
#break
#endswitch
#break
*--#] d263 : 
*--#[ d229 :
#case Md229
#procedure SimpleDotd229()
if (count(Md229,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p4^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p + p6.p - p4.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md229,dotrewrite-d229-0)
	#call replace(Q.p6,i10-i12+i9,i,i10,i12,i9,Md229,dotrewrite-d229-1)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md229,dotrewrite-d229-2)
	#call replace(p4.p6,-i14+i4/2-i5/2+i7/2,i,i14,i4,i5,i7,Md229,dotrewrite-d229-3)
	#call replace(p1.p6,i10-i13+i2/2+i7/2-i8/2+i9,i,i10,i13,i2,i7,i8,i9,Md229,dotrewrite-d229-4)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p - p3.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	if (count(Md229,1)) id p2.p3 = i12 - i13;
	if (count(Md229,1)) id p2.p4 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md229,dotrewrite-d229-2)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md229,dotrewrite-d229-3)
	#call replace(p3.p5,-i14+i3/2-i6/2+i7/2,i,i14,i3,i6,i7,Md229,dotrewrite-d229-4)
	#call replace(p2.p5,i11-i2/2-i7/2+i8/2-i9,i,i11,i2,i7,i8,i9,Md229,dotrewrite-d229-5)
#endif
#break
#case Q8
* path: (0, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p4.p + p7.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p3.p - p8.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	if (count(Md229,1)) id p2.p3 = i12 - i13;
	if (count(Md229,1)) id p2.p4 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md229,dotrewrite-d229-2)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md229,dotrewrite-d229-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md229,dotrewrite-d229-4)
	#call replace(p3.p8,-i12+i13-i3/2+i6/2-i7/2,i,i12,i13,i3,i6,i7,Md229,dotrewrite-d229-5)
	#call replace(p4.p8,i11-i4/2+i5/2-i7/2-i9,i,i11,i4,i5,i7,i9,Md229,dotrewrite-d229-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p7.p - p4.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	if (count(Md229,1)) id Q.p7 = i10 + i9;
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md229,dotrewrite-d229-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md229,dotrewrite-d229-2)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md229,dotrewrite-d229-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md229,dotrewrite-d229-4)
	#call replace(p3.p8,-i12+i13-i3/2+i6/2-i7/2,i,i12,i13,i3,i6,i7,Md229,dotrewrite-d229-5)
	#call replace(p4.p8,i11-i4/2+i5/2-i7/2-i9,i,i11,i4,i5,i7,i9,Md229,dotrewrite-d229-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p7.p - p4.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	if (count(Md229,1)) id Q.p7 = i10 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md229,dotrewrite-d229-1)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md229,dotrewrite-d229-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md229,dotrewrite-d229-3)
	#call replace(p1.p7,i10+i2/2+i7/2-i8/2+i9,i,i10,i2,i7,i8,i9,Md229,dotrewrite-d229-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 3, 4)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p7.p - p4.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	if (count(Md229,1)) id p2.p3 = i12 - i13;
	if (count(Md229,1)) id p2.p4 = -i11 + i9;
	if (count(Md229,1)) id Q.p7 = i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md229,dotrewrite-d229-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md229,dotrewrite-d229-4)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md229,dotrewrite-d229-5)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md229,dotrewrite-d229-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p4.p + p5.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p4.p + p7.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md229,dotrewrite-d229-0)
	#call replace(Q.p8,-`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md229,dotrewrite-d229-1)
	#call replace(p3.p8,-i12+i13-i3/2+i6/2-i7/2,i,i12,i13,i3,i6,i7,Md229,dotrewrite-d229-2)
	#call replace(p4.p8,i11-i4/2+i5/2-i7/2-i9,i,i11,i4,i5,i7,i9,Md229,dotrewrite-d229-3)
	#call replace(p1.p8,-`Q2'/2+i1/2-i10-i7/2+i8/2-i9,i,i1,i10,i7,i8,i9,Md229,dotrewrite-d229-4)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md229,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md229-4;
	if (count(Md229,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md229-3;
	if (count(Md229,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md229-2;
	if (count(Md229,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p - p3.p;
	.sort:momrewrite-Md229-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd229()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md229,dotrewrite-d229-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md229,dotrewrite-d229-1)
	#call replace(p3.p5,-i14+i3/2-i6/2+i7/2,i,i14,i3,i6,i7,Md229,dotrewrite-d229-2)
	#call replace(p1.p5,i10-i11+i2/2+i7/2-i8/2+i9,i,i10,i11,i2,i7,i8,i9,Md229,dotrewrite-d229-3)
#endif
#break
#endswitch
#break
*--#] d229 : 
*--#[ d205 :
#case Md205
#procedure SimpleDotd205()
if (count(Md205,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p7^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case Q1
* path: (0, 4, 1)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p2.p + p8.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + Q.p - p4.p - p8.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	if (count(Md205,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md205,dotrewrite-d205-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md205,dotrewrite-d205-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md205,dotrewrite-d205-3)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md205,dotrewrite-d205-4)
	#call replace(Q.p8,`Q2'/2-i1/2-i10+i2/2+i9,i,i1,i10,i2,i9,Md205,dotrewrite-d205-5)
	#call replace(p4.p8,`Q2'/2-i10-i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md205,dotrewrite-d205-6)
	#call replace(p1.p8,`Q2'/2-i1/2-i10+i13-i14-i5/2+i6/2-i8/2+i9,i,i1,i10,i13,i14,i5,i6,i8,i9,Md205,dotrewrite-d205-7)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p2.p + p8.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + Q.p - p4.p - p8.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	if (count(Md205,1)) id p4.p5 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md205,dotrewrite-d205-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md205,dotrewrite-d205-2)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md205,dotrewrite-d205-3)
	#call replace(Q.p8,`Q2'/2-i1/2-i10+i2/2+i9,i,i1,i10,i2,i9,Md205,dotrewrite-d205-4)
	#call replace(p4.p8,`Q2'/2-i10-i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md205,dotrewrite-d205-5)
	#call replace(p3.p8,-i1/2+i13-i14+i4/2-i5/2+i6/2-i7/2+i9,i,i1,i13,i14,i4,i5,i6,i7,i9,Md205,dotrewrite-d205-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p + p2.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md205,dotrewrite-d205-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md205,dotrewrite-d205-1)
	#call replace(Q.p6,-i10-i11+i9,i,i10,i11,i9,Md205,dotrewrite-d205-2)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md205,dotrewrite-d205-3)
	#call replace(p3.p6,-i14+i3/2-i5/2+i6/2-i7/2,i,i14,i3,i5,i6,i7,Md205,dotrewrite-d205-4)
	#call replace(p1.p6,-i10-i12+i13-i14+i2/2-i5/2+i6/2-i8/2+i9,i,i10,i12,i13,i14,i2,i5,i6,i8,i9,Md205,dotrewrite-d205-5)
#endif
#break
#case Q8
* path: (0, 8)
#case 58
* path: (5, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p5.p - p6.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p5.p + p6.p + p7.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	#call replace(Q.p6,-i10-i11+i9,i,i10,i11,i9,Md205,dotrewrite-d205-0)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md205,dotrewrite-d205-1)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md205,dotrewrite-d205-2)
	#call replace(p6.p7,-i13+i3/2+i5/2-i6/2-i7/2,i,i13,i3,i5,i6,i7,Md205,dotrewrite-d205-3)
	#call replace(Q.p8,`Q2'/2-i1/2-i10+i2/2+i9,i,i1,i10,i2,i9,Md205,dotrewrite-d205-4)
	#call replace(p6.p8,-i11+i12-i2/2-i5/2+i6/2+i8/2,i,i11,i12,i2,i5,i6,i8,Md205,dotrewrite-d205-5)
	#call replace(p7.p8,-i1/2+i2/2+i4/2-i7/2-i8/2+i9,i,i1,i2,i4,i7,i8,i9,Md205,dotrewrite-d205-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q2
* path: (0, 8, 2)
#case 18
* path: (1, 2, 8)
#case 24
* path: (2, 1, 4)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p2.p - p5.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + Q.p - p4.p - p8.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	if (count(Md205,1)) id p2.p5 = i11 - i12;
	if (count(Md205,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md205,dotrewrite-d205-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md205,dotrewrite-d205-3)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md205,dotrewrite-d205-4)
	#call replace(p2.p4,`Q2'/2-i2/2+i3/2-i4/2-i9,i,i2,i3,i4,i9,Md205,dotrewrite-d205-5)
	#call replace(Q.p8,`Q2'/2-i1/2-i10+i2/2+i9,i,i1,i10,i2,i9,Md205,dotrewrite-d205-6)
	#call replace(p4.p8,`Q2'/2-i10-i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md205,dotrewrite-d205-7)
	#call replace(p2.p8,-i13+i14+i2/2+i5/2-i6/2+i8/2,i,i13,i14,i2,i5,i6,i8,Md205,dotrewrite-d205-8)
#endif
#break
#case 27
* path: (2, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p3.p - p7.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	if (count(Md205,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md205,dotrewrite-d205-1)
	#call replace(p2.p3,-i1/2-i3/2+i4/2+i9,i,i1,i3,i4,i9,Md205,dotrewrite-d205-2)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md205,dotrewrite-d205-3)
	#call replace(p2.p7,-i1/2+i13-i14+i2/2-i3/2+i4/2-i5/2+i6/2-i8/2+i9,i,i1,i13,i14,i2,i3,i4,i5,i6,i8,i9,Md205,dotrewrite-d205-4)
#endif
#break
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p - p7.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	if (count(Md205,1)) id p4.p5 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md205,dotrewrite-d205-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md205,dotrewrite-d205-2)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md205,dotrewrite-d205-3)
	#call replace(p4.p7,i1/2+i10-i2/2-i4/2-i7/2+i8/2-i9,i,i1,i10,i2,i4,i7,i8,i9,Md205,dotrewrite-d205-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p5.p + p6.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	if (count(Md205,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md205,dotrewrite-d205-1)
	#call replace(Q.p6,-i10-i11+i9,i,i10,i11,i9,Md205,dotrewrite-d205-2)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md205,dotrewrite-d205-3)
	#call replace(p2.p3,-i1/2-i3/2+i4/2+i9,i,i1,i3,i4,i9,Md205,dotrewrite-d205-4)
	#call replace(p3.p6,-i14+i3/2-i5/2+i6/2-i7/2,i,i14,i3,i5,i6,i7,Md205,dotrewrite-d205-5)
	#call replace(p2.p6,-i11+i12-i13+i14-i2/2+i5/2-i6/2+i8/2,i,i11,i12,i13,i14,i2,i5,i6,i8,Md205,dotrewrite-d205-6)
#endif
#break
#default
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md205,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p + p2.p;
	.sort:momrewrite-Md205-4;
	if (count(Md205,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md205-3;
	if (count(Md205,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md205-2;
	if (count(Md205,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md205-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd205()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md205,dotrewrite-d205-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md205,dotrewrite-d205-1)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md205,dotrewrite-d205-2)
	#call replace(p1.p7,i1/2+i10-i13+i14-i2/2+i3/2-i4/2+i5/2-i6/2+i8/2-i9,i,i1,i10,i13,i14,i2,i3,i4,i5,i6,i8,i9,Md205,dotrewrite-d205-3)
#endif
#break
#endswitch
#break
*--#] d205 : 
*--#[ d164 :
#case Md164
#procedure SimpleDotd164()
if (count(Md164,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p6^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p4^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 7)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md164,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md164-3;
	if (count(Md164,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p1.p - p4.p;
	.sort:momrewrite-Md164-2;
	if (count(Md164,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p4} = + Q.p - p3.p - p7.p;
	.sort:momrewrite-Md164-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd164()
	#call replace(Q.p3,`Q2'-i8-i9,i,i8,i9,Md164,dotrewrite-d164-0)
	#call replace(p3.p4,i11-i12-i13,i,i11,i12,i13,Md164,dotrewrite-d164-1)
	#call replace(Q.p7,-i10+i8+i9,i,i10,i8,i9,Md164,dotrewrite-d164-2)
	#call replace(p4.p7,i12+i13-i14,i,i12,i13,i14,Md164,dotrewrite-d164-3)
	#call replace(p1.p3,`Q2'/2-i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md164,dotrewrite-d164-4)
	#call replace(p3.p7,`Q2'/2-i10-i3/2+i6/2-i7/2,i,i10,i3,i6,i7,Md164,dotrewrite-d164-5)
	#call replace(p1.p7,i1/2-i13+i14+i4/2-i5/2+i7/2,i,i1,i13,i14,i4,i5,i7,Md164,dotrewrite-d164-6)
#endif
#break
#case 12
* path: (1, 2)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md164,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md164-3;
	if (count(Md164,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p4} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md164-2;
	if (count(Md164,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p4.p + p5.p;
	.sort:momrewrite-Md164-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd164()
	#call replace(Q.p5,-i10-i11+i9,i,i10,i11,i9,Md164,dotrewrite-d164-0)
	#call replace(p4.p5,i13-i14-i4,i,i13,i14,i4,Md164,dotrewrite-d164-1)
	#call replace(p2.p5,-i14+i2/2-i4/2+i5/2-i6/2,i,i14,i2,i4,i5,i6,Md164,dotrewrite-d164-2)
	#call replace(p1.p2,-`Q2'/2-i1/2-i2/2+i3/2+i8+i9,i,i1,i2,i3,i8,i9,Md164,dotrewrite-d164-3)
	#call replace(p1.p5,-i1/2-i12-i13+i14+i4/2-i5/2+i7/2,i,i1,i12,i13,i14,i4,i5,i7,Md164,dotrewrite-d164-4)
#endif
#break
#default
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md164,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md164-3;
	if (count(Md164,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md164-2;
	if (count(Md164,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p2.p - p6.p;
	.sort:momrewrite-Md164-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd164()
	#call replace(p1.p2,-`Q2'/2-i1/2-i2/2+i3/2+i8+i9,i,i1,i2,i3,i8,i9,Md164,dotrewrite-d164-0)
	#call replace(p2.p6,-i13+i14+i2/2+i4/2-i5/2+i6/2,i,i13,i14,i2,i4,i5,i6,Md164,dotrewrite-d164-1)
	#call replace(p1.p6,-`Q2'/2+i13-i14-i2/2+i3/2-i4/2+i5/2-i7/2+i8+i9,i,i13,i14,i2,i3,i4,i5,i7,i8,i9,Md164,dotrewrite-d164-2)
#endif
#break
#endswitch
#break
*--#] d164 : 
*--#[ d146 :
#case Md146
#procedure SimpleDotd146()
if (count(Md146,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 2, 7)
#case Q7
* path: (0, 7)
#case Q2
* path: (0, 7, 2)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p2.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p2.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	if (count(Md146,1)) id p2.p4 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md146,dotrewrite-d146-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md146,dotrewrite-d146-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md146,dotrewrite-d146-3)
	#call replace(p4.p7,i4/2-i5/2+i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md146,dotrewrite-d146-4)
#endif
#break
#case 16
* path: (1, 2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p2.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p6.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md146,dotrewrite-d146-0)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md146,dotrewrite-d146-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md146,dotrewrite-d146-2)
	#call replace(Q.p6,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md146,dotrewrite-d146-3)
#endif
#break
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p + p7.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + p3.p + p6.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md146,dotrewrite-d146-0)
	#call replace(p3.p6,i1/2-i3/2-i6/2,i,i1,i3,i6,Md146,dotrewrite-d146-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md146,dotrewrite-d146-2)
	#call replace(p3.p4,-i4/2+i5/2-i6/2+i9,i,i4,i5,i6,i9,Md146,dotrewrite-d146-3)
	#call replace(Q.p6,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md146,dotrewrite-d146-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p2.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	if (count(Md146,1)) id p2.p4 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md146,dotrewrite-d146-1)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md146,dotrewrite-d146-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md146,dotrewrite-d146-3)
	#call replace(Q.p6,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md146,dotrewrite-d146-4)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p1.p?!{p1,[P+p1],[P-p1],p4} = + Q.p - p2.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p6.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md146,dotrewrite-d146-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md146,dotrewrite-d146-1)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md146,dotrewrite-d146-2)
	#call replace(Q.p6,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md146,dotrewrite-d146-3)
	#call replace(p4.p7,i4/2-i5/2+i6/2+i8-i9,i,i4,i5,i6,i8,i9,Md146,dotrewrite-d146-4)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p2.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md146,dotrewrite-d146-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md146,dotrewrite-d146-1)
	#call replace(p1.p5,i1/2-i3/2+i6/2-i9,i,i1,i3,i6,i9,Md146,dotrewrite-d146-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i7/2-i8,i,i1,i2,i3,i7,i8,Md146,dotrewrite-d146-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q4
* path: (0, 3, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md146,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md146-4;
	if (count(Md146,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md146-3;
	if (count(Md146,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p3.p;
	.sort:momrewrite-Md146-2;
	if (count(Md146,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md146-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd146()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md146,dotrewrite-d146-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md146,dotrewrite-d146-1)
	#call replace(p1.p3,i1/2+i3/2-i6/2,i,i1,i3,i6,Md146,dotrewrite-d146-2)
	#call replace(p3.p4,-i4/2+i5/2-i6/2+i9,i,i4,i5,i6,i9,Md146,dotrewrite-d146-3)
#endif
#break
#endswitch
#break
*--#] d146 : 
*--#[ d121 :
#case Md121
#procedure SimpleDotd121()
if (count(Md121,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 6, 3, 2)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p4.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p2.p + p3.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	if (count(Md121,1)) id Q.p3 = i8 - i9;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i7/2,i,i6,i7,Md121,dotrewrite-d121-2)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md121,dotrewrite-d121-3)
	#call replace(p2.p6,-i1/2+i3/2-i4/2+i5/2,i,i1,i3,i4,i5,Md121,dotrewrite-d121-4)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p2.p + p3.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	if (count(Md121,1)) id Q.p3 = i8 - i9;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md121,dotrewrite-d121-2)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md121,dotrewrite-d121-3)
	#call replace(Q.p4,-`Q2'/2-i6/2+i7/2-i8+i9,i,i6,i7,i8,i9,Md121,dotrewrite-d121-4)
#endif
#break
#case Q7
* path: (0, 7)
#case Q1
* path: (0, 7, 1)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p4.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-0)
	#call replace(Q.p7,`Q2'/2-i6/2+i7/2,i,i6,i7,Md121,dotrewrite-d121-1)
	#call replace(p1.p7,i1/2-i5/2+i6/2+i8,i,i1,i5,i6,i8,Md121,dotrewrite-d121-2)
	#call replace(p2.p7,i1/2-i3/2+i4/2-i5/2+i9,i,i1,i3,i4,i5,i9,Md121,dotrewrite-d121-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q6
* path: (0, 7, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p6.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	if (count(Md121,1)) id Q.p3 = i8 - i9;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i7/2,i,i6,i7,Md121,dotrewrite-d121-2)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md121,dotrewrite-d121-3)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md121,dotrewrite-d121-4)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md121,dotrewrite-d121-1)
	#call replace(p1.p4,i2/2-i3/2-i5/2+i6/2,i,i2,i3,i5,i6,Md121,dotrewrite-d121-2)
	#call replace(Q.p4,-`Q2'/2-i6/2+i7/2-i8+i9,i,i6,i7,i8,i9,Md121,dotrewrite-d121-3)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p4.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p7.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	if (count(Md121,1)) id Q.p3 = i8 - i9;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-1)
	#call replace(Q.p7,`Q2'/2-i6/2+i7/2,i,i6,i7,Md121,dotrewrite-d121-2)
	#call replace(p1.p7,i1/2-i5/2+i6/2+i8,i,i1,i5,i6,i8,Md121,dotrewrite-d121-3)
	#call replace(p3.p7,i3/2-i4/2+i6/2+i8-i9,i,i3,i4,i6,i8,i9,Md121,dotrewrite-d121-4)
#endif
#break
#case 14
* path: (1, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p - p5.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md121,dotrewrite-d121-0)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md121,dotrewrite-d121-1)
	#call replace(p1.p4,i2/2-i3/2-i5/2+i6/2,i,i2,i3,i5,i6,Md121,dotrewrite-d121-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i7/2-i8,i,i6,i7,i8,Md121,dotrewrite-d121-3)
	#call replace(Q.p4,-`Q2'/2-i6/2+i7/2-i8+i9,i,i6,i7,i8,i9,Md121,dotrewrite-d121-4)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md121,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p;
	.sort:momrewrite-Md121-4;
	if (count(Md121,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md121-3;
	if (count(Md121,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md121-2;
	if (count(Md121,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md121-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd121()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md121,dotrewrite-d121-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md121,dotrewrite-d121-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md121,dotrewrite-d121-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i7/2-i8,i,i6,i7,i8,Md121,dotrewrite-d121-3)
#endif
#break
#endswitch
#break
*--#] d121 : 
*--#[ d257 :
#case Md257
#procedure SimpleDotd257()
if (count(Md257,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 18
* path: (1, 0, 8)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p5.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-0)
	#call replace(p1.p8,-i1+i11+i12-i13+i14,i,i1,i11,i12,i13,i14,Md257,dotrewrite-d257-1)
	#call replace(p2.p8,-i12+i2/2-i6/2+i7/2+i9,i,i12,i2,i6,i7,i9,Md257,dotrewrite-d257-2)
	#call replace(p3.p8,i10-i13+i2/2-i4/2+i5/2-i6/2,i,i10,i13,i2,i4,i5,i6,Md257,dotrewrite-d257-3)
	#call replace(Q.p8,`Q2'/2-i1/2+i12-i13+i14-i7/2+i8/2,i,i1,i12,i13,i14,i7,i8,Md257,dotrewrite-d257-4)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p5.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	if (count(Md257,1)) id Q.p4 = -i10 + i9;
	if (count(Md257,1)) id p1.p4 = i12 - i13;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-2)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md257,dotrewrite-d257-3)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md257,dotrewrite-d257-4)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md257,dotrewrite-d257-5)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md257,dotrewrite-d257-6)
#endif
#break
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p + p6.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	if (count(Md257,1)) id p1.p6 = -i13 + i14;
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-1)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md257,dotrewrite-d257-2)
	#call replace(p3.p6,-i3/2+i5/2-i6/2,i,i3,i5,i6,Md257,dotrewrite-d257-3)
	#call replace(Q.p6,-`Q2'/2-i1/2+i11+i12-i13+i14-i7/2+i8/2-i9,i,i1,i11,i12,i13,i14,i7,i8,i9,Md257,dotrewrite-d257-4)
#endif
#break
#case 25
* path: (2, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p - p6.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	if (count(Md257,1)) id p1.p6 = -i13 + i14;
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md257,dotrewrite-d257-1)
	#call replace(p5.p6,-i3/2+i5/2+i6/2,i,i3,i5,i6,Md257,dotrewrite-d257-2)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md257,dotrewrite-d257-3)
	#call replace(Q.p6,-`Q2'/2-i1/2+i11+i12-i13+i14-i7/2+i8/2-i9,i,i1,i11,i12,i13,i14,i7,i8,i9,Md257,dotrewrite-d257-4)
	#call replace(Q.p5,-`Q2'/2-i1/2+i10+i11+i12-i13+i14-i7/2+i8/2-i9,i,i1,i10,i11,i12,i13,i14,i7,i8,i9,Md257,dotrewrite-d257-5)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p3.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	if (count(Md257,1)) id Q.p4 = -i10 + i9;
	if (count(Md257,1)) id p1.p4 = i12 - i13;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md257,dotrewrite-d257-3)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md257,dotrewrite-d257-4)
	#call replace(Q.p5,-`Q2'/2-i1/2+i10+i11+i12-i13+i14-i7/2+i8/2-i9,i,i1,i10,i11,i12,i13,i14,i7,i8,i9,Md257,dotrewrite-d257-5)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 7, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	if (count(Md257,1)) id Q.p4 = -i10 + i9;
	if (count(Md257,1)) id p1.p4 = i12 - i13;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-2)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md257,dotrewrite-d257-3)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md257,dotrewrite-d257-4)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md257,dotrewrite-d257-5)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md257,dotrewrite-d257-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q7
* path: (0, 1, 7)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q7
* path: (0, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-0)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md257,dotrewrite-d257-1)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md257,dotrewrite-d257-2)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md257,dotrewrite-d257-3)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md257,dotrewrite-d257-4)
#endif
#break
#default
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md257,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md257-4;
	if (count(Md257,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md257-3;
	if (count(Md257,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md257-2;
	if (count(Md257,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p3.p;
	.sort:momrewrite-Md257-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd257()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md257,dotrewrite-d257-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md257,dotrewrite-d257-1)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md257,dotrewrite-d257-2)
	#call replace(Q.p5,-`Q2'/2-i1/2+i10+i11+i12-i13+i14-i7/2+i8/2-i9,i,i1,i10,i11,i12,i13,i14,i7,i8,i9,Md257,dotrewrite-d257-3)
#endif
#break
#endswitch
#break
*--#] d257 : 
*--#[ d124 :
#case Md124
#procedure SimpleDotd124()
if (count(Md124,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 1, 7)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	if (count(Md124,1)) id Q.p4 = i8 - i9;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md124,dotrewrite-d124-2)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md124,dotrewrite-d124-3)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md124,dotrewrite-d124-4)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p + p4.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p3.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	if (count(Md124,1)) id Q.p4 = i8 - i9;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md124,dotrewrite-d124-2)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md124,dotrewrite-d124-3)
	#call replace(Q.p5,-`Q2'/2+i1/2-i7/2-i8+i9,i,i1,i7,i8,i9,Md124,dotrewrite-d124-4)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p5.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p3.p + p4.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	if (count(Md124,1)) id Q.p4 = i8 - i9;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md124,dotrewrite-d124-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md124,dotrewrite-d124-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md124,dotrewrite-d124-4)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p5.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	if (count(Md124,1)) id Q.p4 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md124,dotrewrite-d124-1)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-2)
	#call replace(p1.p2,i2/2-i6/2+i7/2+i8,i,i2,i6,i7,i8,Md124,dotrewrite-d124-3)
	#call replace(p1.p4,i4/2-i5/2+i7/2+i8-i9,i,i4,i5,i7,i8,i9,Md124,dotrewrite-d124-4)
#endif
#break
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p3.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md124,dotrewrite-d124-1)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md124,dotrewrite-d124-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i7/2-i8+i9,i,i1,i7,i8,i9,Md124,dotrewrite-d124-3)
#endif
#break
#case 25
* path: (2, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p - p6.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md124,dotrewrite-d124-0)
	#call replace(p5.p6,-i3/2+i5/2+i6/2,i,i3,i5,i6,Md124,dotrewrite-d124-1)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md124,dotrewrite-d124-2)
	#call replace(Q.p6,-`Q2'/2+i1/2-i7/2-i8,i,i1,i7,i8,Md124,dotrewrite-d124-3)
	#call replace(Q.p5,-`Q2'/2+i1/2-i7/2-i8+i9,i,i1,i7,i8,i9,Md124,dotrewrite-d124-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p5.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md124,dotrewrite-d124-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-1)
	#call replace(p1.p2,i2/2-i6/2+i7/2+i8,i,i2,i6,i7,i8,Md124,dotrewrite-d124-2)
	#call replace(p1.p3,i2/2-i4/2+i5/2-i6/2+i9,i,i2,i4,i5,i6,i9,Md124,dotrewrite-d124-3)
#endif
#break
#default
#case Q3
* path: (0, 2, 3)
#case 23
* path: (2, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md124,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md124-4;
	if (count(Md124,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md124-3;
	if (count(Md124,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p6.p;
	.sort:momrewrite-Md124-2;
	if (count(Md124,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md124-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd124()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md124,dotrewrite-d124-0)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md124,dotrewrite-d124-1)
	#call replace(p3.p6,-i3/2+i5/2-i6/2,i,i3,i5,i6,Md124,dotrewrite-d124-2)
	#call replace(Q.p6,-`Q2'/2+i1/2-i7/2-i8,i,i1,i7,i8,Md124,dotrewrite-d124-3)
#endif
#break
#endswitch
#break
*--#] d124 : 
*--#[ d108 :
#case Md108
#procedure SimpleDotd108()
if (count(Md108,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md108,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md108-3;
	if (count(Md108,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md108-2;
	if (count(Md108,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p - p2.p;
	.sort:momrewrite-Md108-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd108()
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md108,dotrewrite-d108-0)
	#call replace(Q.p4,-`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md108,dotrewrite-d108-1)
	#call replace(p2.p4,i2/2-i5/2+i6/2-i9,i,i2,i5,i6,i9,Md108,dotrewrite-d108-2)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md108,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md108-3;
	if (count(Md108,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md108-2;
	if (count(Md108,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p - p2.p;
	.sort:momrewrite-Md108-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd108()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md108,dotrewrite-d108-0)
	#call replace(p1.p2,i2/2-i5/2+i6/2+i8,i,i2,i5,i6,i8,Md108,dotrewrite-d108-1)
	#call replace(p1.p3,i3/2-i4/2+i6/2+i7,i,i3,i4,i6,i7,Md108,dotrewrite-d108-2)
#endif
#break
#default
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md108,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md108-3;
	if (count(Md108,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md108-2;
	if (count(Md108,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p6.p;
	.sort:momrewrite-Md108-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd108()
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md108,dotrewrite-d108-0)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md108,dotrewrite-d108-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md108,dotrewrite-d108-2)
#endif
#break
#endswitch
#break
*--#] d108 : 
*--#[ d80 :
#case Md80
#procedure SimpleDotd80()
if (count(Md80,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p2^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md80,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p5.p;
	.sort:momrewrite-Md80-3;
	if (count(Md80,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p4.p;
	.sort:momrewrite-Md80-2;
	if (count(Md80,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p1.p + p4.p;
	.sort:momrewrite-Md80-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd80()
	#call replace(p1.p4,-i1/2-i4/2+i5/2,i,i1,i4,i5,Md80,dotrewrite-d80-0)
	#call replace(Q.p4,-`Q2'/2-i5/2+i6/2-i8,i,i5,i6,i8,Md80,dotrewrite-d80-1)
	#call replace(p2.p4,i2/2-i3/2+i5/2-i9,i,i2,i3,i5,i9,Md80,dotrewrite-d80-2)
#endif
#break
#case Q6
* path: (0, 6)
#case Q1
* path: (0, 6, 1)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md80,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p5.p;
	.sort:momrewrite-Md80-3;
	if (count(Md80,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p6.p;
	.sort:momrewrite-Md80-2;
	if (count(Md80,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - Q.p - p1.p;
	.sort:momrewrite-Md80-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd80()
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md80,dotrewrite-d80-0)
	#call replace(p1.p6,i1/2-i4/2+i5/2+i8,i,i1,i4,i5,i8,Md80,dotrewrite-d80-1)
	#call replace(p2.p6,i2/2-i3/2+i5/2+i7,i,i2,i3,i5,i7,Md80,dotrewrite-d80-2)
#endif
#break
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md80,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p;
	.sort:momrewrite-Md80-3;
	if (count(Md80,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p3.p;
	.sort:momrewrite-Md80-2;
	if (count(Md80,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p3.p - p1.p;
	.sort:momrewrite-Md80-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd80()
	#call replace(p2.p3,-i2/2-i3/2+i5/2,i,i2,i3,i5,Md80,dotrewrite-d80-0)
	#call replace(Q.p3,-`Q2'/2-i5/2+i6/2-i7,i,i5,i6,i7,Md80,dotrewrite-d80-1)
	#call replace(p1.p3,i1/2-i4/2+i5/2-i9,i,i1,i4,i5,i9,Md80,dotrewrite-d80-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q5
* path: (0, 6, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md80,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p5.p;
	.sort:momrewrite-Md80-3;
	if (count(Md80,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p;
	.sort:momrewrite-Md80-2;
	if (count(Md80,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p;
	.sort:momrewrite-Md80-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd80()
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md80,dotrewrite-d80-0)
	#call replace(p1.p5,-i1/2+i4/2-i5/2,i,i1,i4,i5,Md80,dotrewrite-d80-1)
	#call replace(p2.p5,-i2/2+i3/2-i5/2,i,i2,i3,i5,Md80,dotrewrite-d80-2)
#endif
#break
#endswitch
#break
*--#] d80 : 
*--#[ d78 :
#case Md78
#procedure SimpleDotd78()
if (count(Md78,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p1.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case Q2
* path: (0, 5, 2)
#case 15
* path: (1, 5)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md78,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md78-3;
	if (count(Md78,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p - p5.p;
	.sort:momrewrite-Md78-2;
	if (count(Md78,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p;
	.sort:momrewrite-Md78-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd78()
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md78,dotrewrite-d78-0)
	#call replace(p1.p5,-i1/2+i4/2-i5/2,i,i1,i4,i5,Md78,dotrewrite-d78-1)
	#call replace(p2.p5,i2/2-i3/2+i4/2-i9,i,i2,i3,i4,i9,Md78,dotrewrite-d78-2)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md78,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md78-3;
	if (count(Md78,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p6.p;
	.sort:momrewrite-Md78-2;
	if (count(Md78,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - Q.p - p1.p;
	.sort:momrewrite-Md78-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd78()
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md78,dotrewrite-d78-0)
	#call replace(p1.p6,i1/2-i4/2+i5/2+i7,i,i1,i4,i5,i7,Md78,dotrewrite-d78-1)
	#call replace(p2.p6,-i2/2+i3/2-i4/2+i8+i9,i,i2,i3,i4,i8,i9,Md78,dotrewrite-d78-2)
#endif
#break
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md78,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md78-3;
	if (count(Md78,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p6.p;
	.sort:momrewrite-Md78-2;
	if (count(Md78,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2} = + p6.p - Q.p - p4.p;
	.sort:momrewrite-Md78-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd78()
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md78,dotrewrite-d78-0)
	#call replace(Q.p6,`Q2'/2-i5/2+i6/2,i,i5,i6,Md78,dotrewrite-d78-1)
	#call replace(Q.p4,-`Q2'/2-i5/2+i6/2-i7,i,i5,i6,i7,Md78,dotrewrite-d78-2)
	#call replace(p2.p6,-i2/2+i3/2-i4/2+i8+i9,i,i2,i3,i4,i8,i9,Md78,dotrewrite-d78-3)
	#call replace(p4.p6,-`Q2'/2-i1/2+i4/2+i6/2-i7,i,i1,i4,i6,i7,Md78,dotrewrite-d78-4)
#endif
#break
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md78,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + Q.p;
	.sort:momrewrite-Md78-3;
	if (count(Md78,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p4.p + Q.p;
	.sort:momrewrite-Md78-2;
	if (count(Md78,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p3.p;
	.sort:momrewrite-Md78-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd78()
	#call replace(p2.p3,-i2/2-i3/2+i4/2,i,i2,i3,i4,Md78,dotrewrite-d78-0)
	#call replace(p1.p3,i1/2+i4/2-i5/2-i9,i,i1,i4,i5,i9,Md78,dotrewrite-d78-1)
	#call replace(Q.p3,`Q2'/2+i5/2-i6/2+i7-i8,i,i5,i6,i7,i8,Md78,dotrewrite-d78-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md78,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p4.p;
	.sort:momrewrite-Md78-3;
	if (count(Md78,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p4.p;
	.sort:momrewrite-Md78-2;
	if (count(Md78,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p1.p + p4.p;
	.sort:momrewrite-Md78-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd78()
	#call replace(p1.p4,-i1/2-i4/2+i5/2,i,i1,i4,i5,Md78,dotrewrite-d78-0)
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md78,dotrewrite-d78-1)
	#call replace(Q.p4,-`Q2'/2-i5/2+i6/2-i7,i,i5,i6,i7,Md78,dotrewrite-d78-2)
#endif
#break
#endswitch
#break
*--#] d78 : 
*--#[ d211 :
#case Md211
#procedure SimpleDotd211()
if (count(Md211,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p1.p2^n? = i9^n;
	id p1.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id Q.p2^n? = i12^n;
	id Q.p3^n? = i13^n;
	id Q.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p - p6.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	if (count(Md211,1)) id Q.p6 = i13 - i14;
	#call replace(Q.p4,i11-i12-i13,i,i11,i12,i13,Md211,dotrewrite-d211-1)
	#call replace(p1.p4,i1-i10-i9,i,i1,i10,i9,Md211,dotrewrite-d211-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md211,dotrewrite-d211-3)
	#call replace(p3.p4,i1/2+i2/2-i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md211,dotrewrite-d211-4)
	#call replace(p4.p6,i1/2+i2/2-i3/2+i5/2-i7/2-i9,i,i1,i2,i3,i5,i7,i9,Md211,dotrewrite-d211-5)
	#call replace(p1.p6,-`Q2'/2+i1/2+i12+i13-i14-i7/2+i8/2-i9,i,i1,i12,i13,i14,i7,i8,i9,Md211,dotrewrite-d211-6)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case Q8
* path: (0, 8)
#case Q6
* path: (0, 8, 6)
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#case 67
* path: (6, 5, 7)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p3} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	if (count(Md211,1)) id Q.p6 = i13 - i14;
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md211,dotrewrite-d211-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md211,dotrewrite-d211-2)
	#call replace(Q.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md211,dotrewrite-d211-3)
	#call replace(Q.p8,`Q2'-i12-i13+i14,i,i12,i13,i14,Md211,dotrewrite-d211-4)
	#call replace(p6.p7,-i1/2-i2/2+i6/2+i7/2+i9,i,i1,i2,i6,i7,i9,Md211,dotrewrite-d211-5)
	#call replace(p6.p8,`Q2'/2-i12+i2/2-i6/2-i8/2,i,i12,i2,i6,i8,Md211,dotrewrite-d211-6)
	#call replace(p7.p8,`Q2'/2+i1/2-i11-i7/2-i8/2,i,i1,i11,i7,i8,Md211,dotrewrite-d211-7)
	#call replace(p5.p8,-`Q2'/2+i1/2-i10+i12+i13-i4/2+i5/2+i8/2-i9,i,i1,i10,i12,i13,i4,i5,i8,i9,Md211,dotrewrite-d211-8)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p - p6.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p3.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	if (count(Md211,1)) id Q.p6 = i13 - i14;
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md211,dotrewrite-d211-1)
	#call replace(p2.p3,-i1/2+i10-i2/2-i3/2+i4/2+i9,i,i1,i10,i2,i3,i4,i9,Md211,dotrewrite-d211-2)
	#call replace(p2.p6,-`Q2'/2+i12+i13-i14-i2/2-i6/2+i8/2,i,i12,i13,i14,i2,i6,i8,Md211,dotrewrite-d211-3)
	#call replace(p1.p6,-`Q2'/2+i1/2+i12+i13-i14-i7/2+i8/2-i9,i,i1,i12,i13,i14,i7,i8,i9,Md211,dotrewrite-d211-4)
#endif
#break
#case 17
* path: (1, 7)
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p4.p - p7.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	#call replace(Q.p4,i11-i12-i13,i,i11,i12,i13,Md211,dotrewrite-d211-0)
	#call replace(p1.p4,i1-i10-i9,i,i1,i10,i9,Md211,dotrewrite-d211-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md211,dotrewrite-d211-2)
	#call replace(Q.p7,-i11+i12+i13-i14,i,i11,i12,i13,i14,Md211,dotrewrite-d211-3)
	#call replace(p3.p4,i1/2+i2/2-i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md211,dotrewrite-d211-4)
	#call replace(p3.p7,-i1/2-i2/2+i4/2-i5/2+i6/2+i9,i,i1,i2,i4,i5,i6,i9,Md211,dotrewrite-d211-5)
	#call replace(p1.p7,-`Q2'/2-i1/2+i12+i13-i14-i7/2+i8/2,i,i1,i12,i13,i14,i7,i8,Md211,dotrewrite-d211-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 14
* path: (1, 4)
#case 15
* path: (1, 4, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	#call replace(Q.p4,i11-i12-i13,i,i11,i12,i13,Md211,dotrewrite-d211-0)
	#call replace(p1.p4,i1-i10-i9,i,i1,i10,i9,Md211,dotrewrite-d211-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md211,dotrewrite-d211-2)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md211,dotrewrite-d211-3)
	#call replace(p3.p4,i1/2+i2/2-i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md211,dotrewrite-d211-4)
	#call replace(p1.p5,`Q2'/2-i1/2+i10-i12-i13+i14+i7/2-i8/2+i9,i,i1,i10,i12,i13,i14,i7,i8,i9,Md211,dotrewrite-d211-5)
#endif
#break
#case 18
* path: (1, 8)
#case 38
* path: (3, 1, 8)
#case 38
* path: (3, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p4.p - p7.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p3.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	#call replace(Q.p8,`Q2'-i12-i13+i14,i,i12,i13,i14,Md211,dotrewrite-d211-0)
	#call replace(p2.p3,-i1/2+i10-i2/2-i3/2+i4/2+i9,i,i1,i10,i2,i3,i4,i9,Md211,dotrewrite-d211-1)
	#call replace(p2.p8,`Q2'/2-i13+i14-i2/2+i6/2-i8/2,i,i13,i14,i2,i6,i8,Md211,dotrewrite-d211-2)
	#call replace(p1.p8,`Q2'/2-i1/2+i11-i12-i13+i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md211,dotrewrite-d211-3)
	#call replace(p3.p8,i1/2-i10+i13+i2/2-i4/2+i5/2-i6/2-i9,i,i1,i10,i13,i2,i4,i5,i6,i9,Md211,dotrewrite-d211-4)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md211,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md211-4;
	if (count(Md211,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md211-3;
	if (count(Md211,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md211-2;
	if (count(Md211,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p2.p - p3.p;
	.sort:momrewrite-Md211-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd211()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md211,dotrewrite-d211-0)
	#call replace(p2.p3,-i1/2+i10-i2/2-i3/2+i4/2+i9,i,i1,i10,i2,i3,i4,i9,Md211,dotrewrite-d211-1)
	#call replace(p1.p5,`Q2'/2-i1/2+i10-i12-i13+i14+i7/2-i8/2+i9,i,i1,i10,i12,i13,i14,i7,i8,i9,Md211,dotrewrite-d211-2)
	#call replace(p2.p5,`Q2'/2-i1/2+i10-i12-i13+i14-i3/2+i4/2+i6/2-i8/2+i9,i,i1,i10,i12,i13,i14,i3,i4,i6,i8,i9,Md211,dotrewrite-d211-3)
#endif
#break
#endswitch
#break
*--#] d211 : 
*--#[ d197 :
#case Md197
#procedure SimpleDotd197()
if (count(Md197,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md197,dotrewrite-d197-1)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md197,dotrewrite-d197-2)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md197,dotrewrite-d197-3)
	#call replace(p3.p8,-i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Md197,dotrewrite-d197-4)
#endif
#break
#case 27
* path: (2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md197,dotrewrite-d197-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md197,dotrewrite-d197-3)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md197,dotrewrite-d197-4)
	#call replace(Q.p7,-i1/2+i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md197,dotrewrite-d197-5)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md197,dotrewrite-d197-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md197,dotrewrite-d197-3)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md197,dotrewrite-d197-4)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md197,dotrewrite-d197-5)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md197,dotrewrite-d197-1)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md197,dotrewrite-d197-2)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md197,dotrewrite-d197-3)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md197,dotrewrite-d197-4)
#endif
#break
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md197,dotrewrite-d197-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md197,dotrewrite-d197-2)
	#call replace(Q.p7,-i1/2+i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md197,dotrewrite-d197-3)
	#call replace(p3.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md197,dotrewrite-d197-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 8, 6)
#case 11
* path: (1,)
#case 16
* path: (1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md197,dotrewrite-d197-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md197,dotrewrite-d197-2)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md197,dotrewrite-d197-3)
	#call replace(p1.p6,`Q2'/2-i2/2+i7/2-i8/2,i,i2,i7,i8,Md197,dotrewrite-d197-4)
#endif
#break
#case Q5
* path: (0, 1, 7, 5)
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p5.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md197,dotrewrite-d197-1)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Md197,dotrewrite-d197-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md197,dotrewrite-d197-3)
	#call replace(Q.p7,-i1/2+i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md197,dotrewrite-d197-4)
	#call replace(p1.p5,-`Q2'/2-i3/2+i4/2-i7/2+i8/2+i9,i,i3,i4,i7,i8,i9,Md197,dotrewrite-d197-5)
#endif
#break
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md197,dotrewrite-d197-2)
	#call replace(Q.p7,-i1/2+i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md197,dotrewrite-d197-3)
	#call replace(p3.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md197,dotrewrite-d197-4)
#endif
#break
#case Q5
* path: (0, 2, 3, 5)
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md197,dotrewrite-d197-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md197,dotrewrite-d197-3)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md197,dotrewrite-d197-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md197,dotrewrite-d197-1)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md197,dotrewrite-d197-2)
	#call replace(Q.p7,-i1/2+i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md197,dotrewrite-d197-3)
	#call replace(p3.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md197,dotrewrite-d197-4)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md197,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md197-5;
	if (count(Md197,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md197-4;
	if (count(Md197,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md197-3;
	if (count(Md197,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md197-2;
	if (count(Md197,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md197-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd197()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md197,dotrewrite-d197-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md197,dotrewrite-d197-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md197,dotrewrite-d197-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md197,dotrewrite-d197-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md197,dotrewrite-d197-4)
#endif
#break
#endswitch
#break
*--#] d197 : 
*--#[ d190 :
#case Md190
#procedure SimpleDotd190()
if (count(Md190,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md190,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p1.p;
	.sort:momrewrite-Md190-4;
	if (count(Md190,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md190-3;
	if (count(Md190,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md190-2;
	if (count(Md190,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p6.p;
	.sort:momrewrite-Md190-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd190()
	if (count(Md190,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md190,dotrewrite-d190-1)
	#call replace(p2.p6,i2/2-i5/2+i6/2,i,i2,i5,i6,Md190,dotrewrite-d190-2)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md190,dotrewrite-d190-3)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md190,dotrewrite-d190-4)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md190,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md190-4;
	if (count(Md190,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p1.p;
	.sort:momrewrite-Md190-3;
	if (count(Md190,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md190-2;
	if (count(Md190,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p;
	.sort:momrewrite-Md190-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd190()
	if (count(Md190,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md190,dotrewrite-d190-1)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md190,dotrewrite-d190-2)
	#call replace(Q.p4,-i1/2+i2/2-i5/2+i7/2-i8,i,i1,i2,i5,i7,i8,Md190,dotrewrite-d190-3)
	#call replace(p2.p4,i2/2-i5/2+i6/2-i8+i9,i,i2,i5,i6,i8,i9,Md190,dotrewrite-d190-4)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md190,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md190-4;
	if (count(Md190,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md190-3;
	if (count(Md190,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p5.p;
	.sort:momrewrite-Md190-2;
	if (count(Md190,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md190-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd190()
	if (count(Md190,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md190,dotrewrite-d190-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md190,dotrewrite-d190-2)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md190,dotrewrite-d190-3)
	#call replace(p3.p5,-i3/2+i4/2-i6/2+i8-i9,i,i3,i4,i6,i8,i9,Md190,dotrewrite-d190-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md190,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md190-4;
	if (count(Md190,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md190-3;
	if (count(Md190,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md190-2;
	if (count(Md190,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p1.p;
	.sort:momrewrite-Md190-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd190()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md190,dotrewrite-d190-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md190,dotrewrite-d190-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md190,dotrewrite-d190-2)
	#call replace(p3.p7,i3/2-i4/2+i6/2+i9,i,i3,i4,i6,i9,Md190,dotrewrite-d190-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md190,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md190-4;
	if (count(Md190,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md190-3;
	if (count(Md190,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md190-2;
	if (count(Md190,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md190-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd190()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md190,dotrewrite-d190-0)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md190,dotrewrite-d190-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md190,dotrewrite-d190-2)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md190,dotrewrite-d190-3)
#endif
#break
#endswitch
#break
*--#] d190 : 
*--#[ d191 :
#case Md191
#procedure SimpleDotd191()
if (count(Md191,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p1.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p6.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	if (count(Md191,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md191,dotrewrite-d191-1)
	#call replace(p2.p6,i2/2-i5/2+i6/2,i,i2,i5,i6,Md191,dotrewrite-d191-2)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md191,dotrewrite-d191-3)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i8-i9,i,i3,i4,i5,i8,i9,Md191,dotrewrite-d191-4)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p7.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	if (count(Md191,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md191,dotrewrite-d191-1)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md191,dotrewrite-d191-2)
	#call replace(Q.p4,`Q2'/2+i5/2-i7/2-i8,i,i5,i7,i8,Md191,dotrewrite-d191-3)
	#call replace(p2.p4,i2/2+i5/2-i6/2-i8+i9,i,i2,i5,i6,i8,i9,Md191,dotrewrite-d191-4)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = - p6.p + p7.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p6.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md191,dotrewrite-d191-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md191,dotrewrite-d191-1)
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md191,dotrewrite-d191-2)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md191,dotrewrite-d191-3)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i8-i9,i,i3,i4,i5,i8,i9,Md191,dotrewrite-d191-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md191,dotrewrite-d191-0)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md191,dotrewrite-d191-1)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md191,dotrewrite-d191-2)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i8-i9,i,i3,i4,i5,i8,i9,Md191,dotrewrite-d191-3)
#endif
#break
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p5.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	if (count(Md191,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md191,dotrewrite-d191-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md191,dotrewrite-d191-2)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md191,dotrewrite-d191-3)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md191,dotrewrite-d191-4)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p7.p - p6.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md191,dotrewrite-d191-0)
	#call replace(p6.p7,-i1/2+i6/2+i7/2,i,i1,i6,i7,Md191,dotrewrite-d191-1)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md191,dotrewrite-d191-2)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md191,dotrewrite-d191-3)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i8-i9,i,i3,i4,i5,i8,i9,Md191,dotrewrite-d191-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q7
* path: (0, 7)
#case Q1
* path: (0, 7, 1)
#case Q2
* path: (0, 7, 1, 2)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p1.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md191,dotrewrite-d191-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md191,dotrewrite-d191-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md191,dotrewrite-d191-2)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md191,dotrewrite-d191-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 7, 5)
#case 11
* path: (1,)
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md191,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p7.p;
	.sort:momrewrite-Md191-4;
	if (count(Md191,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md191-3;
	if (count(Md191,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md191-2;
	if (count(Md191,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md191-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd191()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md191,dotrewrite-d191-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md191,dotrewrite-d191-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md191,dotrewrite-d191-2)
	#call replace(p1.p5,`Q2'/2-i2/2+i6/2-i7/2,i,i2,i6,i7,Md191,dotrewrite-d191-3)
#endif
#break
#endswitch
#break
*--#] d191 : 
*--#[ d339 :
#case Md339
#procedure SimpleDotd339()
if (count(Md339,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p4^n? = i11^n;
	id Q.p6^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p4.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p - p3.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p9.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-0)
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-1)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-2)
	#call replace(p2.p8,-i1/2+i13+i3/2+i7/2-i9/2,i,i1,i13,i3,i7,i9,Md339,dotrewrite-d339-3)
	#call replace(p4.p9,-`Q2'/2-i12+i4/2-i6/2+i9/2,i,i12,i4,i6,i9,Md339,dotrewrite-d339-4)
	#call replace(p2.p9,-`Q2'/2-i10+i11-i12+i2/2-i7/2+i9/2,i,i10,i11,i12,i2,i7,i9,Md339,dotrewrite-d339-5)
#endif
#break
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p7.p + p8.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	if (count(Md339,1)) id Q.p5 = i10 - i11;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-2)
	#call replace(p6.p8,-i13+i14-i3/2+i8/2+i9/2,i,i13,i14,i3,i8,i9,Md339,dotrewrite-d339-3)
	#call replace(p4.p6,`Q2'/2-i11+i12+i4/2+i6/2-i9/2,i,i11,i12,i4,i6,i9,Md339,dotrewrite-d339-4)
	#call replace(p5.p8,-i1/2+i13-i14+i3/2+i7/2-i9/2,i,i1,i13,i14,i3,i7,i9,Md339,dotrewrite-d339-5)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	if (count(Md339,1)) id Q.p5 = i10 - i11;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-1)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-2)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(p2.p8,-i1/2+i13+i3/2+i7/2-i9/2,i,i1,i13,i3,i7,i9,Md339,dotrewrite-d339-4)
	#call replace(p5.p8,-i1/2+i13-i14+i3/2+i7/2-i9/2,i,i1,i13,i14,i3,i7,i9,Md339,dotrewrite-d339-5)
	#call replace(p2.p3,`Q2'/2+i1/2+i10-i11+i12-i13-i2/2-i3/2,i,i1,i10,i11,i12,i13,i2,i3,Md339,dotrewrite-d339-6)
	#call replace(p3.p5,i1/2+i10-i11-i13+i14-i2/2-i3/2+i4/2-i6/2+i9/2,i,i1,i10,i11,i13,i14,i2,i3,i4,i6,i9,Md339,dotrewrite-d339-7)
#endif
#break
#case 57
* path: (5, 7)
#case 58
* path: (5, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p8.p - p7.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	if (count(Md339,1)) id Q.p5 = i10 - i11;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-1)
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-3)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-4)
	#call replace(p5.p8,-i1/2+i13-i14+i3/2+i7/2-i9/2,i,i1,i13,i14,i3,i7,i9,Md339,dotrewrite-d339-5)
	#call replace(p4.p7,`Q2'/2-i11+i12+i2/2-i5/2+i6/2-i9/2,i,i11,i12,i2,i5,i6,i9,Md339,dotrewrite-d339-6)
#endif
#break
#case Q6
* path: (0, 1, 7, 6)
#case 16
* path: (1, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p9.p - p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p6.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p4} = + p1.p + p7.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p + p7.p + p9.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-0)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-1)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-2)
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-3)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-4)
	#call replace(p6.p9,`Q2'/2-i11+i4/2-i6/2-i9/2,i,i11,i4,i6,i9,Md339,dotrewrite-d339-5)
	#call replace(p7.p9,`Q2'/2-i10+i2/2-i7/2-i9/2,i,i10,i2,i7,i9,Md339,dotrewrite-d339-6)
	#call replace(p1.p9,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2,i,i10,i2,i3,i7,i8,Md339,dotrewrite-d339-7)
	#call replace(p1.p6,-i13+i14-i3/2+i5/2-i6/2-i7/2+i8/2+i9/2,i,i13,i14,i3,i5,i6,i7,i8,i9,Md339,dotrewrite-d339-8)
#endif
#break
#case Q9
* path: (0, 3, 9)
#case Q6
* path: (0, 3, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p7.p + p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p6.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p4} = - p3.p - p9.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p + p7.p + p9.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-0)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-1)
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-2)
	#call replace(p3.p9,-i3/2+i8/2-i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-3)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-4)
	#call replace(p6.p9,`Q2'/2-i11+i4/2-i6/2-i9/2,i,i11,i4,i6,i9,Md339,dotrewrite-d339-5)
	#call replace(p7.p9,`Q2'/2-i10+i2/2-i7/2-i9/2,i,i10,i2,i7,i9,Md339,dotrewrite-d339-6)
	#call replace(p3.p7,-`Q2'/2+i1/2+i10-i2/2-i8/2+i9/2,i,i1,i10,i2,i8,i9,Md339,dotrewrite-d339-7)
	#call replace(p3.p6,-`Q2'/2+i11+i13-i14+i3/2-i4/2+i6/2-i8/2,i,i11,i13,i14,i3,i4,i6,i8,Md339,dotrewrite-d339-8)
#endif
#break
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-0)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-1)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-2)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md339,dotrewrite-d339-4)
	#call replace(p3.p4,`Q2'/2+i12-i14-i4/2+i6/2-i9/2,i,i12,i14,i4,i6,i9,Md339,dotrewrite-d339-5)
	#call replace(p1.p4,-`Q2'/2+i11-i12+i14-i2/2+i5/2-i6/2+i9/2,i,i11,i12,i14,i2,i5,i6,i9,Md339,dotrewrite-d339-6)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p6.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p4} = + p1.p + p7.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-0)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-1)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-2)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md339,dotrewrite-d339-5)
	#call replace(p3.p7,-`Q2'/2+i1/2+i10-i2/2-i8/2+i9/2,i,i1,i10,i2,i8,i9,Md339,dotrewrite-d339-6)
	#call replace(p1.p6,-i13+i14-i3/2+i5/2-i6/2-i7/2+i8/2+i9/2,i,i13,i14,i3,i5,i6,i7,i8,i9,Md339,dotrewrite-d339-7)
	#call replace(p3.p6,-`Q2'/2+i11+i13-i14+i3/2-i4/2+i6/2-i8/2,i,i11,i13,i14,i3,i4,i6,i8,Md339,dotrewrite-d339-8)
#endif
#break
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p4} = - p3.p - p9.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-0)
	#call replace(p3.p9,-i3/2+i8/2-i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-1)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-2)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md339,dotrewrite-d339-4)
	#call replace(p4.p9,-`Q2'/2-i12+i4/2-i6/2+i9/2,i,i12,i4,i6,i9,Md339,dotrewrite-d339-5)
	#call replace(p3.p4,`Q2'/2+i12-i14-i4/2+i6/2-i9/2,i,i12,i14,i4,i6,i9,Md339,dotrewrite-d339-6)
	#call replace(p1.p9,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2,i,i10,i2,i3,i7,i8,Md339,dotrewrite-d339-7)
	#call replace(p1.p4,-`Q2'/2+i11-i12+i14-i2/2+i5/2-i6/2+i9/2,i,i11,i12,i14,i2,i5,i6,i9,Md339,dotrewrite-d339-8)
#endif
#break
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-0)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-1)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-2)
	#call replace(p2.p8,-i1/2+i13+i3/2+i7/2-i9/2,i,i1,i13,i3,i7,i9,Md339,dotrewrite-d339-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i11-i12+i13-i2/2+i3/2,i,i1,i11,i12,i13,i2,i3,Md339,dotrewrite-d339-4)
	#call replace(p1.p4,-`Q2'/2+i11-i12+i14-i2/2+i5/2-i6/2+i9/2,i,i11,i12,i14,i2,i5,i6,i9,Md339,dotrewrite-d339-5)
#endif
#break
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p8.p - p7.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p9.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p6.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p + p7.p + p9.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-0)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-1)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-2)
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-3)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-4)
	#call replace(p6.p8,-i13+i14-i3/2+i8/2+i9/2,i,i13,i14,i3,i8,i9,Md339,dotrewrite-d339-5)
	#call replace(p6.p9,`Q2'/2-i11+i4/2-i6/2-i9/2,i,i11,i4,i6,i9,Md339,dotrewrite-d339-6)
	#call replace(p7.p9,`Q2'/2-i10+i2/2-i7/2-i9/2,i,i10,i2,i7,i9,Md339,dotrewrite-d339-7)
#endif
#break
#case Q3
* path: (0, 3)
#case Q8
* path: (0, 3, 8)
#case 23
* path: (2, 3)
#case 28
* path: (2, 3, 8)
#case 33
* path: (3,)
#case 34
* path: (3, 2, 4)
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-0)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-1)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-2)
	#call replace(p2.p8,-i1/2+i13+i3/2+i7/2-i9/2,i,i1,i13,i3,i7,i9,Md339,dotrewrite-d339-3)
	#call replace(p3.p4,`Q2'/2+i12-i14-i4/2+i6/2-i9/2,i,i12,i14,i4,i6,i9,Md339,dotrewrite-d339-4)
	#call replace(p2.p3,`Q2'/2+i1/2+i10-i11+i12-i13-i2/2-i3/2,i,i1,i10,i11,i12,i13,i2,i3,Md339,dotrewrite-d339-5)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p8.p - p7.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	if (count(Md339,1)) id Q.p5 = i10 - i11;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-1)
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-3)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-4)
	#call replace(p2.p8,-i1/2+i13+i3/2+i7/2-i9/2,i,i1,i13,i3,i7,i9,Md339,dotrewrite-d339-5)
	#call replace(p2.p7,`Q2'/2-i11+i12+i2/2+i7/2-i9/2,i,i11,i12,i2,i7,i9,Md339,dotrewrite-d339-6)
	#call replace(p5.p8,-i1/2+i13-i14+i3/2+i7/2-i9/2,i,i1,i13,i14,i3,i7,i9,Md339,dotrewrite-d339-7)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 15
* path: (1, 2, 5)
#case 17
* path: (1, 7)
#case 15
* path: (1, 7, 5)
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p8} = + p2.p - p5.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p4} = + p1.p + p7.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	if (count(Md339,1)) id Q.p5 = i10 - i11;
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-1)
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-2)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md339,dotrewrite-d339-4)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-5)
	#call replace(p2.p7,`Q2'/2-i11+i12+i2/2+i7/2-i9/2,i,i11,i12,i2,i7,i9,Md339,dotrewrite-d339-6)
	#call replace(p1.p2,-`Q2'/2-i1/2+i11-i12+i13-i2/2+i3/2,i,i1,i11,i12,i13,i2,i3,Md339,dotrewrite-d339-7)
	#call replace(p1.p5,-i1/2+i13-i14+i3/2-i5/2+i6/2-i9/2,i,i1,i13,i14,i3,i5,i6,i9,Md339,dotrewrite-d339-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q8
* path: (0, 1, 8)
#case 11
* path: (1,)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p9.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-0)
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-1)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-2)
	#call replace(Q.p1,-i10+i11-i12+i13,i,i10,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(p4.p9,-`Q2'/2-i12+i4/2-i6/2+i9/2,i,i12,i4,i6,i9,Md339,dotrewrite-d339-4)
	#call replace(p1.p9,-`Q2'/2+i10-i2/2+i3/2+i7/2-i8/2,i,i10,i2,i3,i7,i8,Md339,dotrewrite-d339-5)
	#call replace(p1.p4,-`Q2'/2+i11-i12+i14-i2/2+i5/2-i6/2+i9/2,i,i11,i12,i14,i2,i5,i6,i9,Md339,dotrewrite-d339-6)
#endif
#break
#case 37
* path: (3, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p8.p - p7.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(Q.p7,i10-i11+i12,i,i10,i11,i12,Md339,dotrewrite-d339-0)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-1)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md339,dotrewrite-d339-2)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(p3.p4,`Q2'/2+i12-i14-i4/2+i6/2-i9/2,i,i12,i14,i4,i6,i9,Md339,dotrewrite-d339-4)
	#call replace(p3.p7,-`Q2'/2+i1/2+i10-i2/2-i8/2+i9/2,i,i1,i10,i2,i8,i9,Md339,dotrewrite-d339-5)
	#call replace(p4.p7,`Q2'/2-i11+i12+i2/2-i5/2+i6/2-i9/2,i,i11,i12,i2,i5,i6,i9,Md339,dotrewrite-d339-6)
#endif
#break
#case 29
* path: (2, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p4} = - p3.p - p9.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-0)
	#call replace(Q.p9,-`Q2'+i11-i12,i,i11,i12,Md339,dotrewrite-d339-1)
	#call replace(p3.p9,-i3/2+i8/2-i9/2,i,i3,i8,i9,Md339,dotrewrite-d339-2)
	#call replace(Q.p3,`Q2'-i11+i12-i13,i,i11,i12,i13,Md339,dotrewrite-d339-3)
	#call replace(p4.p9,-`Q2'/2-i12+i4/2-i6/2+i9/2,i,i12,i4,i6,i9,Md339,dotrewrite-d339-4)
	#call replace(p3.p4,`Q2'/2+i12-i14-i4/2+i6/2-i9/2,i,i12,i14,i4,i6,i9,Md339,dotrewrite-d339-5)
	#call replace(p2.p9,-`Q2'/2-i10+i11-i12+i2/2-i7/2+i9/2,i,i10,i11,i12,i2,i7,i9,Md339,dotrewrite-d339-6)
	#call replace(p2.p3,`Q2'/2+i1/2+i10-i11+i12-i13-i2/2-i3/2,i,i1,i10,i11,i12,i13,i2,i3,Md339,dotrewrite-d339-7)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md339,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md339-5;
	if (count(Md339,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md339-4;
	if (count(Md339,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p7.p + p8.p;
	.sort:momrewrite-Md339-3;
	if (count(Md339,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p5.p;
	.sort:momrewrite-Md339-2;
	if (count(Md339,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md339-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd339()
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md339,dotrewrite-d339-0)
	#call replace(p2.p8,-i1/2+i13+i3/2+i7/2-i9/2,i,i1,i13,i3,i7,i9,Md339,dotrewrite-d339-1)
	#call replace(p6.p8,-i13+i14-i3/2+i8/2+i9/2,i,i13,i14,i3,i8,i9,Md339,dotrewrite-d339-2)
	#call replace(p4.p6,`Q2'/2-i11+i12+i4/2+i6/2-i9/2,i,i11,i12,i4,i6,i9,Md339,dotrewrite-d339-3)
	#call replace(p2.p6,`Q2'/2-i11+i12+i4/2-i5/2+i7/2-i9/2,i,i11,i12,i4,i5,i7,i9,Md339,dotrewrite-d339-4)
#endif
#break
#endswitch
#break
*--#] d339 : 
*--#[ d345 :
#case Md345
#procedure SimpleDotd345()
if (count(Md345,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p5^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p4.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p4.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p4 = i10 - i11;
	if (count(Md345,1)) id p1.p4 = i13 - i14;
	if (count(Md345,1)) id Q.p6 = -i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-3)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-4)
	#call replace(p1.p6,i12-i14+i2/2+i7/2-i8/2,i,i12,i14,i2,i7,i8,Md345,dotrewrite-d345-5)
	#call replace(p4.p6,`Q2'/2-i10+i12+i4/2+i6/2-i9/2,i,i10,i12,i4,i6,i9,Md345,dotrewrite-d345-6)
	#call replace(p3.p6,`Q2'/2-i10+i12+i4/2-i5/2+i7/2-i9/2,i,i10,i12,i4,i5,i7,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case Q6
* path: (0, 1, 9, 6)
#case 16
* path: (1, 9, 6)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p1.p - p9.p - p8.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p6 = -i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-2)
	#call replace(Q.p9,`Q2'-i10+i12,i,i10,i12,Md345,dotrewrite-d345-3)
	#call replace(p1.p6,i12-i14+i2/2+i7/2-i8/2,i,i12,i14,i2,i7,i8,Md345,dotrewrite-d345-4)
	#call replace(p5.p9,i11-i3/2+i4/2-i6/2+i7/2,i,i11,i3,i4,i6,i7,Md345,dotrewrite-d345-5)
	#call replace(p1.p9,`Q2'/2+i1/2+i12-i13+i7/2-i8/2,i,i1,i12,i13,i7,i8,Md345,dotrewrite-d345-6)
	#call replace(p6.p9,-`Q2'/2+i10-i11-i4/2+i6/2+i9/2,i,i10,i11,i4,i6,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case 68
* path: (6, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p - p6.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + Q.p + p7.p - p9.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p6 = -i11 + i12;
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-1)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-2)
	#call replace(Q.p9,`Q2'-i10+i12,i,i10,i12,Md345,dotrewrite-d345-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md345,dotrewrite-d345-4)
	#call replace(p7.p9,-`Q2'/2+i10-i3/2+i7/2+i9/2,i,i10,i3,i7,i9,Md345,dotrewrite-d345-5)
	#call replace(p8.p9,i1/2-i13+i3/2-i8/2-i9/2,i,i1,i13,i3,i8,i9,Md345,dotrewrite-d345-6)
	#call replace(p6.p8,i11-i14+i2/2+i5/2-i6/2-i8/2,i,i11,i14,i2,i5,i6,i8,Md345,dotrewrite-d345-7)
	#call replace(p6.p9,-`Q2'/2+i10-i11-i4/2+i6/2+i9/2,i,i10,i11,i4,i6,i9,Md345,dotrewrite-d345-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id p2.p3 = i10 - i13;
	if (count(Md345,1)) id p2.p5 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-4)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-5)
	#call replace(p3.p7,`Q2'/2-i10+i12+i3/2+i7/2-i9/2,i,i10,i12,i3,i7,i9,Md345,dotrewrite-d345-6)
#endif
#break
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case Q6
* path: (0, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p4.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p4 = i10 - i11;
	if (count(Md345,1)) id p1.p4 = i13 - i14;
	if (count(Md345,1)) id Q.p6 = -i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-3)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-4)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-5)
	#call replace(p1.p6,i12-i14+i2/2+i7/2-i8/2,i,i12,i14,i2,i7,i8,Md345,dotrewrite-d345-6)
	#call replace(p4.p6,`Q2'/2-i10+i12+i4/2+i6/2-i9/2,i,i10,i12,i4,i6,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#case 58
* path: (5, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p - p8.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id p2.p3 = i10 - i13;
	if (count(Md345,1)) id p2.p5 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-3)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-4)
	#call replace(Q.p8,-`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md345,dotrewrite-d345-5)
	#call replace(p5.p8,-i11+i14-i5/2+i6/2-i7/2,i,i11,i14,i5,i6,i7,Md345,dotrewrite-d345-6)
	#call replace(p3.p8,-`Q2'/2-i12+i13-i3/2-i7/2+i9/2,i,i12,i13,i3,i7,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + Q.p + p7.p - p9.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-0)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-1)
	#call replace(Q.p9,`Q2'-i10+i12,i,i10,i12,Md345,dotrewrite-d345-2)
	#call replace(Q.p8,-`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md345,dotrewrite-d345-3)
	#call replace(p5.p8,-i11+i14-i5/2+i6/2-i7/2,i,i11,i14,i5,i6,i7,Md345,dotrewrite-d345-4)
	#call replace(p5.p9,i11-i3/2+i4/2-i6/2+i7/2,i,i11,i3,i4,i6,i7,Md345,dotrewrite-d345-5)
	#call replace(p7.p9,-`Q2'/2+i10-i3/2+i7/2+i9/2,i,i10,i3,i7,i9,Md345,dotrewrite-d345-6)
	#call replace(p8.p9,i1/2-i13+i3/2-i8/2-i9/2,i,i1,i13,i3,i8,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p8.p - p2.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p4.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p4 = i10 - i11;
	if (count(Md345,1)) id p1.p4 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-3)
	#call replace(Q.p9,`Q2'-i10+i12,i,i10,i12,Md345,dotrewrite-d345-4)
	#call replace(p3.p9,`Q2'/2+i12-i3/2+i7/2-i9/2,i,i12,i3,i7,i9,Md345,dotrewrite-d345-5)
	#call replace(p1.p9,`Q2'/2+i1/2+i12-i13+i7/2-i8/2,i,i1,i12,i13,i7,i8,Md345,dotrewrite-d345-6)
	#call replace(p4.p9,`Q2'/2-i11+i12-i4/2+i6/2-i9/2,i,i11,i12,i4,i6,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p8.p - p2.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-1)
	#call replace(Q.p8,-`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md345,dotrewrite-d345-2)
	#call replace(p1.p8,-`Q2'/2+i1/2-i12-i7/2+i8/2,i,i1,i12,i7,i8,Md345,dotrewrite-d345-3)
	#call replace(p5.p8,-i11+i14-i5/2+i6/2-i7/2,i,i11,i14,i5,i6,i7,Md345,dotrewrite-d345-4)
	#call replace(p3.p8,-`Q2'/2-i12+i13-i3/2-i7/2+i9/2,i,i12,i13,i3,i7,i9,Md345,dotrewrite-d345-5)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case 26
* path: (2, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p - p6.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id p2.p3 = i10 - i13;
	if (count(Md345,1)) id Q.p6 = -i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-3)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-4)
	#call replace(p2.p6,-i11+i14-i2/2-i7/2+i8/2,i,i11,i14,i2,i7,i8,Md345,dotrewrite-d345-5)
	#call replace(p3.p7,`Q2'/2-i10+i12+i3/2+i7/2-i9/2,i,i10,i12,i3,i7,i9,Md345,dotrewrite-d345-6)
	#call replace(p3.p6,`Q2'/2-i10+i12+i4/2-i5/2+i7/2-i9/2,i,i10,i12,i4,i5,i7,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case 79
* path: (7, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p - p6.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + Q.p + p7.p - p9.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p6 = -i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md345,dotrewrite-d345-1)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-2)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-3)
	#call replace(Q.p9,`Q2'-i10+i12,i,i10,i12,Md345,dotrewrite-d345-4)
	#call replace(p2.p6,-i11+i14-i2/2-i7/2+i8/2,i,i11,i14,i2,i7,i8,Md345,dotrewrite-d345-5)
	#call replace(p7.p9,-`Q2'/2+i10-i3/2+i7/2+i9/2,i,i10,i3,i7,i9,Md345,dotrewrite-d345-6)
	#call replace(p2.p9,`Q2'/2-i1/2-i10+i13-i7/2+i8/2,i,i1,i10,i13,i7,i8,Md345,dotrewrite-d345-7)
	#call replace(p6.p9,-`Q2'/2+i10-i11-i4/2+i6/2+i9/2,i,i10,i11,i4,i6,i9,Md345,dotrewrite-d345-8)
#endif
#break
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p8.p - p2.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p4.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p4 = i10 - i11;
	if (count(Md345,1)) id p1.p4 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md345,dotrewrite-d345-4)
	#call replace(p1.p8,-`Q2'/2+i1/2-i12-i7/2+i8/2,i,i1,i12,i7,i8,Md345,dotrewrite-d345-5)
	#call replace(p3.p8,-`Q2'/2-i12+i13-i3/2-i7/2+i9/2,i,i12,i13,i3,i7,i9,Md345,dotrewrite-d345-6)
	#call replace(p4.p8,-`Q2'/2+i11-i12+i13-i14-i3/2+i5/2-i6/2+i9/2,i,i11,i12,i13,i14,i3,i5,i6,i9,Md345,dotrewrite-d345-7)
#endif
#break
#case Q4
* path: (0, 1, 3, 4)
#case Q3
* path: (0, 4, 3)
#case 14
* path: (1, 3, 4)
#case 24
* path: (2, 1, 3, 4)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p4.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p4 = i10 - i11;
	if (count(Md345,1)) id p1.p4 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-3)
	#call replace(p1.p7,i12+i2/2+i7/2-i8/2,i,i12,i2,i7,i8,Md345,dotrewrite-d345-4)
	#call replace(p3.p7,`Q2'/2-i10+i12+i3/2+i7/2-i9/2,i,i10,i12,i3,i7,i9,Md345,dotrewrite-d345-5)
	#call replace(p4.p7,`Q2'/2-i10+i12+i3/2-i5/2+i6/2-i9/2,i,i10,i12,i3,i5,i6,i9,Md345,dotrewrite-d345-6)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-0)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-1)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md345,dotrewrite-d345-2)
	#call replace(Q.p8,-`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md345,dotrewrite-d345-3)
	#call replace(p5.p8,-i11+i14-i5/2+i6/2-i7/2,i,i11,i14,i5,i6,i7,Md345,dotrewrite-d345-4)
	#call replace(p3.p7,`Q2'/2-i10+i12+i3/2+i7/2-i9/2,i,i10,i12,i3,i7,i9,Md345,dotrewrite-d345-5)
	#call replace(p3.p8,-`Q2'/2-i12+i13-i3/2-i7/2+i9/2,i,i12,i13,i3,i7,i9,Md345,dotrewrite-d345-6)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q2
* path: (0, 9, 1, 2)
#case 19
* path: (1, 9)
#case 29
* path: (2, 1, 9)
#case 39
* path: (3, 9)
#case 59
* path: (5, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p8.p - p2.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-1)
	#call replace(Q.p9,`Q2'-i10+i12,i,i10,i12,Md345,dotrewrite-d345-2)
	#call replace(p3.p9,`Q2'/2+i12-i3/2+i7/2-i9/2,i,i12,i3,i7,i9,Md345,dotrewrite-d345-3)
	#call replace(p5.p9,i11-i3/2+i4/2-i6/2+i7/2,i,i11,i3,i4,i6,i7,Md345,dotrewrite-d345-4)
	#call replace(p1.p9,`Q2'/2+i1/2+i12-i13+i7/2-i8/2,i,i1,i12,i13,i7,i8,Md345,dotrewrite-d345-5)
#endif
#break
#case 47
* path: (4, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	if (count(Md345,1)) id Q.p4 = i10 - i11;
	if (count(Md345,1)) id p1.p4 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-4)
	#call replace(p1.p7,i12+i2/2+i7/2-i8/2,i,i12,i2,i7,i8,Md345,dotrewrite-d345-5)
	#call replace(p4.p7,`Q2'/2-i10+i12+i3/2-i5/2+i6/2-i9/2,i,i10,i12,i3,i5,i6,i9,Md345,dotrewrite-d345-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md345,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md345-5;
	if (count(Md345,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md345-4;
	if (count(Md345,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p5.p;
	.sort:momrewrite-Md345-3;
	if (count(Md345,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md345-2;
	if (count(Md345,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md345-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd345()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md345,dotrewrite-d345-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md345,dotrewrite-d345-1)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md345,dotrewrite-d345-2)
	#call replace(p1.p7,i12+i2/2+i7/2-i8/2,i,i12,i2,i7,i8,Md345,dotrewrite-d345-3)
	#call replace(p3.p7,`Q2'/2-i10+i12+i3/2+i7/2-i9/2,i,i10,i12,i3,i7,i9,Md345,dotrewrite-d345-4)
#endif
#break
#endswitch
#break
*--#] d345 : 
*--#[ d344 :
#case Md344
#procedure SimpleDotd344()
if (count(Md344,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md344,dotrewrite-d344-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md344,dotrewrite-d344-4)
	#call replace(p3.p7,`Q2'/2-i10+i11+i3/2+i7/2-i9/2,i,i10,i11,i3,i7,i9,Md344,dotrewrite-d344-5)
#endif
#break
#case 47
* path: (4, 8, 7)
#case 58
* path: (5, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p4.p5 = i13 - i14;
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md344,dotrewrite-d344-2)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md344,dotrewrite-d344-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md344,dotrewrite-d344-4)
	#call replace(Q.p8,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md344,dotrewrite-d344-5)
	#call replace(p5.p8,i12-i13+i5/2-i6/2+i7/2,i,i12,i13,i5,i6,i7,Md344,dotrewrite-d344-6)
	#call replace(p4.p7,-`Q2'/2+i10+i2/2-i3/2-i8/2+i9/2,i,i10,i2,i3,i8,i9,Md344,dotrewrite-d344-7)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case Q9
* path: (0, 9)
#case 34
* path: (3, 4)
#case 39
* path: (3, 9)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 49
* path: (4, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p9.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-1)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md344,dotrewrite-d344-2)
	#call replace(p4.p9,-i4/2+i8/2-i9/2,i,i4,i8,i9,Md344,dotrewrite-d344-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md344,dotrewrite-d344-4)
	#call replace(p3.p9,-`Q2'/2-i11+i3/2-i7/2+i9/2,i,i11,i3,i7,i9,Md344,dotrewrite-d344-5)
	#call replace(p5.p9,-i12+i14-i5/2+i6/2-i7/2,i,i12,i14,i5,i6,i7,Md344,dotrewrite-d344-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p8.p - p2.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md344,dotrewrite-d344-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md344,dotrewrite-d344-3)
	#call replace(Q.p8,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md344,dotrewrite-d344-4)
	#call replace(p5.p8,i12-i13+i5/2-i6/2+i7/2,i,i12,i13,i5,i6,i7,Md344,dotrewrite-d344-5)
	#call replace(p3.p8,`Q2'/2-i1/2+i11+i4/2+i7/2-i9/2,i,i1,i11,i4,i7,i9,Md344,dotrewrite-d344-6)
#endif
#break
#case 79
* path: (7, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p9.p - p8.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md344,dotrewrite-d344-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-3)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md344,dotrewrite-d344-4)
	#call replace(p5.p9,-i12+i14-i5/2+i6/2-i7/2,i,i12,i14,i5,i6,i7,Md344,dotrewrite-d344-5)
	#call replace(p7.p9,`Q2'/2-i10+i3/2-i7/2-i9/2,i,i10,i3,i7,i9,Md344,dotrewrite-d344-6)
	#call replace(p2.p9,-`Q2'/2+i10-i3/2+i4/2+i7/2-i8/2,i,i10,i3,i4,i7,i8,Md344,dotrewrite-d344-7)
#endif
#break
#case 29
* path: (2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p - p9.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p8.p - p2.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md344,dotrewrite-d344-2)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md344,dotrewrite-d344-3)
	#call replace(p8.p9,i4/2-i8/2-i9/2,i,i4,i8,i9,Md344,dotrewrite-d344-4)
	#call replace(Q.p8,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md344,dotrewrite-d344-5)
	#call replace(p5.p8,i12-i13+i5/2-i6/2+i7/2,i,i12,i13,i5,i6,i7,Md344,dotrewrite-d344-6)
	#call replace(p5.p9,-i12+i14-i5/2+i6/2-i7/2,i,i12,i14,i5,i6,i7,Md344,dotrewrite-d344-7)
	#call replace(p2.p9,-`Q2'/2+i10-i3/2+i4/2+i7/2-i8/2,i,i10,i3,i4,i7,i8,Md344,dotrewrite-d344-8)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md344,dotrewrite-d344-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md344,dotrewrite-d344-4)
	#call replace(Q.p8,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md344,dotrewrite-d344-5)
	#call replace(p1.p8,`Q2'/2-i1/2+i11+i7/2-i8/2,i,i1,i11,i7,i8,Md344,dotrewrite-d344-6)
	#call replace(p5.p8,i12-i13+i5/2-i6/2+i7/2,i,i12,i13,i5,i6,i7,Md344,dotrewrite-d344-7)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p - p9.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-0)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md344,dotrewrite-d344-1)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md344,dotrewrite-d344-2)
	#call replace(p8.p9,i4/2-i8/2-i9/2,i,i4,i8,i9,Md344,dotrewrite-d344-3)
	#call replace(Q.p8,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md344,dotrewrite-d344-4)
	#call replace(p5.p8,i12-i13+i5/2-i6/2+i7/2,i,i12,i13,i5,i6,i7,Md344,dotrewrite-d344-5)
	#call replace(p5.p9,-i12+i14-i5/2+i6/2-i7/2,i,i12,i14,i5,i6,i7,Md344,dotrewrite-d344-6)
	#call replace(p7.p9,`Q2'/2-i10+i3/2-i7/2-i9/2,i,i10,i3,i7,i9,Md344,dotrewrite-d344-7)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md344,dotrewrite-d344-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md344,dotrewrite-d344-3)
	#call replace(Q.p8,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md344,dotrewrite-d344-4)
	#call replace(p5.p8,i12-i13+i5/2-i6/2+i7/2,i,i12,i13,i5,i6,i7,Md344,dotrewrite-d344-5)
	#call replace(p3.p8,`Q2'/2-i1/2+i11+i4/2+i7/2-i9/2,i,i1,i11,i4,i7,i9,Md344,dotrewrite-d344-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id Q.p6 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-3)
	#call replace(p1.p6,i11-i13+i2/2+i7/2-i8/2,i,i11,i13,i2,i7,i8,Md344,dotrewrite-d344-4)
	#call replace(p3.p6,`Q2'/2-i10+i11-i14+i3/2+i7/2-i9/2,i,i10,i11,i14,i3,i7,i9,Md344,dotrewrite-d344-5)
#endif
#break
#case Q9
* path: (0, 1, 3, 9)
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p + p8.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p4.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md344,dotrewrite-d344-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-1)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md344,dotrewrite-d344-2)
	#call replace(p3.p9,-`Q2'/2-i11+i3/2-i7/2+i9/2,i,i11,i3,i7,i9,Md344,dotrewrite-d344-3)
	#call replace(p5.p9,-i12+i14-i5/2+i6/2-i7/2,i,i12,i14,i5,i6,i7,Md344,dotrewrite-d344-4)
	#call replace(p1.p9,-`Q2'/2-i11+i3/2-i4/2-i7/2+i8/2,i,i11,i3,i4,i7,i8,Md344,dotrewrite-d344-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	if (count(Md344,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md344,dotrewrite-d344-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md344,dotrewrite-d344-4)
	#call replace(p1.p7,i11+i2/2+i7/2-i8/2,i,i11,i2,i7,i8,Md344,dotrewrite-d344-5)
	#call replace(p4.p7,-`Q2'/2+i10+i2/2-i3/2-i8/2+i9/2,i,i10,i2,i3,i8,i9,Md344,dotrewrite-d344-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case Q5
* path: (0, 5)
#case Q7
* path: (0, 5, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md344,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md344-5;
	if (count(Md344,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md344-4;
	if (count(Md344,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md344-3;
	if (count(Md344,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md344-2;
	if (count(Md344,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md344-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd344()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md344,dotrewrite-d344-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md344,dotrewrite-d344-1)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md344,dotrewrite-d344-2)
	#call replace(p1.p7,i11+i2/2+i7/2-i8/2,i,i11,i2,i7,i8,Md344,dotrewrite-d344-3)
	#call replace(p3.p7,`Q2'/2-i10+i11+i3/2+i7/2-i9/2,i,i10,i11,i3,i7,i9,Md344,dotrewrite-d344-4)
#endif
#break
#endswitch
#break
*--#] d344 : 
*--#[ d379 :
#case Md379
#procedure SimpleDotd379()
if (count(Md379,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 18
* path: (1, 2, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p7.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p8.p - p2.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	if (count(Md379,1)) id p2.p5 = i11 - i12;
	if (count(Md379,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md379,dotrewrite-d379-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md379,dotrewrite-d379-3)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md379,dotrewrite-d379-4)
	#call replace(p5.p8,i11-i12+i14,i,i11,i12,i14,Md379,dotrewrite-d379-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md379,dotrewrite-d379-6)
	#call replace(p2.p4,`Q2'/2-i10-i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md379,dotrewrite-d379-7)
	#call replace(Q.p8,-i1/2+i10-i13+i14+i2/2+i5/2-i6/2+i9/2,i,i1,i10,i13,i14,i2,i5,i6,i9,Md379,dotrewrite-d379-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p7.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = - p2.p + p8.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	if (count(Md379,1)) id p4.p5 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md379,dotrewrite-d379-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md379,dotrewrite-d379-2)
	#call replace(p5.p8,i11-i12+i14,i,i11,i12,i14,Md379,dotrewrite-d379-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md379,dotrewrite-d379-4)
	#call replace(Q.p8,-i1/2+i10-i13+i14+i2/2+i5/2-i6/2+i9/2,i,i1,i10,i13,i14,i2,i5,i6,i9,Md379,dotrewrite-d379-5)
	#call replace(p3.p8,-i1/2+i10-i13+i14+i4/2+i5/2-i6/2+i7/2,i,i1,i10,i13,i14,i4,i5,i6,i7,Md379,dotrewrite-d379-6)
#endif
#break
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	if (count(Md379,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md379,dotrewrite-d379-1)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md379,dotrewrite-d379-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md379,dotrewrite-d379-3)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md379,dotrewrite-d379-4)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i5/2-i6/2+i9/2,i,i10,i13,i14,i5,i6,i9,Md379,dotrewrite-d379-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q9
* path: (0, 1, 4, 9)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 19
* path: (1, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = - p2.p + p8.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p9.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p9.p - p5.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	if (count(Md379,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md379,dotrewrite-d379-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md379,dotrewrite-d379-2)
	#call replace(p4.p9,-i4/2+i8/2-i9/2,i,i4,i8,i9,Md379,dotrewrite-d379-3)
	#call replace(p5.p9,-i11+i13-i14,i,i11,i13,i14,Md379,dotrewrite-d379-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md379,dotrewrite-d379-5)
	#call replace(Q.p9,-`Q2'/2+i13-i14-i5/2+i6/2-i9/2,i,i13,i14,i5,i6,i9,Md379,dotrewrite-d379-6)
	#call replace(p1.p9,-i10+i13-i14+i3/2-i4/2-i5/2+i6/2-i7/2+i8/2-i9/2,i,i10,i13,i14,i3,i4,i5,i6,i7,i8,i9,Md379,dotrewrite-d379-7)
#endif
#break
#case 38
* path: (3, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	#call replace(p5.p8,i11-i12+i14,i,i11,i12,i14,Md379,dotrewrite-d379-0)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md379,dotrewrite-d379-1)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md379,dotrewrite-d379-2)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i5/2-i6/2+i9/2,i,i10,i13,i14,i5,i6,i9,Md379,dotrewrite-d379-3)
	#call replace(Q.p8,-i1/2+i10-i13+i14+i2/2+i5/2-i6/2+i9/2,i,i1,i10,i13,i14,i2,i5,i6,i9,Md379,dotrewrite-d379-4)
	#call replace(p3.p8,-i1/2+i10-i13+i14+i4/2+i5/2-i6/2+i7/2,i,i1,i10,i13,i14,i4,i5,i6,i7,Md379,dotrewrite-d379-5)
#endif
#break
#case Q9
* path: (0, 9)
#case Q4
* path: (0, 9, 4)
#case 34
* path: (3, 4)
#case 39
* path: (3, 4, 9)
#case 39
* path: (3, 5, 9)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 49
* path: (4, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = - p2.p + p8.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p9.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p + p9.p - p5.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	if (count(Md379,1)) id p4.p5 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md379,dotrewrite-d379-1)
	#call replace(p4.p9,-i4/2+i8/2-i9/2,i,i4,i8,i9,Md379,dotrewrite-d379-2)
	#call replace(p5.p9,-i11+i13-i14,i,i11,i13,i14,Md379,dotrewrite-d379-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md379,dotrewrite-d379-4)
	#call replace(Q.p9,-`Q2'/2+i13-i14-i5/2+i6/2-i9/2,i,i13,i14,i5,i6,i9,Md379,dotrewrite-d379-5)
	#call replace(p3.p9,-i10+i13-i14+i3/2-i5/2+i6/2-i7/2,i,i10,i13,i14,i3,i5,i6,i7,Md379,dotrewrite-d379-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	if (count(Md379,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md379,dotrewrite-d379-1)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md379,dotrewrite-d379-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md379,dotrewrite-d379-3)
	#call replace(p3.p6,-i14+i3/2-i5/2+i6/2-i7/2,i,i14,i3,i5,i6,i7,Md379,dotrewrite-d379-4)
	#call replace(Q.p6,`Q2'/2-i11+i13-i14-i5/2+i6/2-i9/2,i,i11,i13,i14,i5,i6,i9,Md379,dotrewrite-d379-5)
	#call replace(p2.p6,-i1/2+i10-i11+i12+i2/2-i3/2+i4/2+i7/2-i8/2,i,i1,i10,i11,i12,i2,i3,i4,i7,i8,Md379,dotrewrite-d379-6)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 5, 3, 1)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md379,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md379-5;
	if (count(Md379,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md379-4;
	if (count(Md379,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md379-3;
	if (count(Md379,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md379-2;
	if (count(Md379,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md379-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd379()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md379,dotrewrite-d379-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md379,dotrewrite-d379-1)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md379,dotrewrite-d379-2)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i5/2-i6/2+i9/2,i,i10,i13,i14,i5,i6,i9,Md379,dotrewrite-d379-3)
	#call replace(p1.p7,-`Q2'/2+i10-i13+i14+i2/2+i5/2-i6/2+i7/2-i8/2+i9/2,i,i10,i13,i14,i2,i5,i6,i7,i8,i9,Md379,dotrewrite-d379-4)
#endif
#break
#endswitch
#break
*--#] d379 : 
*--#[ d219 :
#case Md219
#procedure SimpleDotd219()
if (count(Md219,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p4^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p6.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md219,dotrewrite-d219-0)
	#call replace(p3.p4,i11-i12-i13,i,i11,i12,i13,Md219,dotrewrite-d219-1)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-2)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md219,dotrewrite-d219-3)
	#call replace(p3.p6,-`Q2'/2+i1/2+i10-i2/2-i7/2+i8/2,i,i1,i10,i2,i7,i8,Md219,dotrewrite-d219-4)
	#call replace(Q.p6,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2,i,i10,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-5)
#endif
#break
#case 47
* path: (4, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p6.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p7.p - p6.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	if (count(Md219,1)) id p4.p7 = i12 + i14;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md219,dotrewrite-d219-1)
	#call replace(p3.p4,i11-i12-i13,i,i11,i12,i13,Md219,dotrewrite-d219-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md219,dotrewrite-d219-3)
	#call replace(p6.p7,-i1/2+i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-4)
	#call replace(p3.p6,-`Q2'/2+i1/2+i10-i2/2-i7/2+i8/2,i,i1,i10,i2,i7,i8,Md219,dotrewrite-d219-5)
	#call replace(Q.p6,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2,i,i10,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-6)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2+i9,i,i10,i13,i14,i4,i5,i8,i9,Md219,dotrewrite-d219-7)
#endif
#break
#case 68
* path: (6, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p + p6.p + p8.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p4.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-0)
	#call replace(p4.p8,-i11+i13-i14,i,i11,i13,i14,Md219,dotrewrite-d219-1)
	#call replace(p6.p8,`Q2'/2-i10+i2/2-i6/2-i8/2,i,i10,i2,i6,i8,Md219,dotrewrite-d219-2)
	#call replace(Q.p8,-`Q2'/2+i13-i14-i4/2+i5/2-i8/2,i,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-3)
	#call replace(p1.p8,-`Q2'/2+i10-i2/2+i3/2+i6/2-i7/2,i,i10,i2,i3,i6,i7,Md219,dotrewrite-d219-4)
	#call replace(Q.p6,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2,i,i10,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-5)
#endif
#break
#case 23
* path: (2, 3)
#case 28
* path: (2, 3, 8)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p1.p + p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p4.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md219,dotrewrite-d219-0)
	#call replace(p3.p4,i11-i12-i13,i,i11,i12,i13,Md219,dotrewrite-d219-1)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md219,dotrewrite-d219-2)
	#call replace(p4.p8,-i11+i13-i14,i,i11,i13,i14,Md219,dotrewrite-d219-3)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md219,dotrewrite-d219-4)
	#call replace(Q.p8,-`Q2'/2+i13-i14-i4/2+i5/2-i8/2,i,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-5)
	#call replace(p2.p8,-i10+i13-i14+i2/2-i4/2+i5/2-i6/2,i,i10,i13,i14,i2,i4,i5,i6,Md219,dotrewrite-d219-6)
#endif
#break
#case Q8
* path: (0, 3, 8)
#case Q8
* path: (0, 8)
#case Q3
* path: (0, 8, 3)
#case 18
* path: (1, 3, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p1.p + p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p4.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md219,dotrewrite-d219-0)
	#call replace(p3.p4,i11-i12-i13,i,i11,i12,i13,Md219,dotrewrite-d219-1)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md219,dotrewrite-d219-2)
	#call replace(p4.p8,-i11+i13-i14,i,i11,i13,i14,Md219,dotrewrite-d219-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md219,dotrewrite-d219-4)
	#call replace(Q.p8,-`Q2'/2+i13-i14-i4/2+i5/2-i8/2,i,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-5)
	#call replace(p1.p8,-`Q2'/2+i10-i2/2+i3/2+i6/2-i7/2,i,i10,i2,i3,i6,i7,Md219,dotrewrite-d219-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p6.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p7.p - p1.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	if (count(Md219,1)) id p4.p7 = i12 + i14;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md219,dotrewrite-d219-1)
	#call replace(p3.p4,i11-i12-i13,i,i11,i12,i13,Md219,dotrewrite-d219-2)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md219,dotrewrite-d219-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md219,dotrewrite-d219-5)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2+i9,i,i10,i13,i14,i4,i5,i8,i9,Md219,dotrewrite-d219-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p7.p - p1.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p4.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	if (count(Md219,1)) id p4.p7 = i12 + i14;
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-1)
	#call replace(p4.p8,-i11+i13-i14,i,i11,i13,i14,Md219,dotrewrite-d219-2)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md219,dotrewrite-d219-3)
	#call replace(Q.p8,-`Q2'/2+i13-i14-i4/2+i5/2-i8/2,i,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-4)
	#call replace(p1.p8,-`Q2'/2+i10-i2/2+i3/2+i6/2-i7/2,i,i10,i2,i3,i6,i7,Md219,dotrewrite-d219-5)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2+i9,i,i10,i13,i14,i4,i5,i8,i9,Md219,dotrewrite-d219-6)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p - p6.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p7.p - p1.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	if (count(Md219,1)) id p4.p7 = i12 + i14;
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-1)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md219,dotrewrite-d219-2)
	#call replace(Q.p7,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2+i9,i,i10,i13,i14,i4,i5,i8,i9,Md219,dotrewrite-d219-3)
	#call replace(p2.p7,-`Q2'/2-i1/2+i10-i13+i14+i3/2+i4/2-i5/2+i6/2+i9,i,i1,i10,i13,i14,i3,i4,i5,i6,i9,Md219,dotrewrite-d219-4)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p1.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	#call replace(p4.p5,i13-i14-i4,i,i13,i14,i4,Md219,dotrewrite-d219-0)
	#call replace(p2.p5,-i14+i2/2-i4/2+i5/2-i6/2,i,i14,i2,i4,i5,i6,Md219,dotrewrite-d219-1)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md219,dotrewrite-d219-2)
	#call replace(Q.p5,`Q2'/2-i11+i13-i14-i4/2+i5/2-i8/2,i,i11,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-3)
	#call replace(p1.p5,-`Q2'/2+i10-i12-i2/2+i3/2+i6/2-i7/2+i9,i,i10,i12,i2,i3,i6,i7,i9,Md219,dotrewrite-d219-4)
#endif
#break
#default
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case Q6
* path: (0, 4, 6)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md219,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md219-4;
	if (count(Md219,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md219-3;
	if (count(Md219,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md219-2;
	if (count(Md219,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md219-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd219()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md219,dotrewrite-d219-0)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md219,dotrewrite-d219-1)
	#call replace(p2.p6,-i13+i14+i2/2+i4/2-i5/2+i6/2,i,i13,i14,i2,i4,i5,i6,Md219,dotrewrite-d219-2)
	#call replace(Q.p6,-`Q2'/2+i10-i13+i14+i4/2-i5/2+i8/2,i,i10,i13,i14,i4,i5,i8,Md219,dotrewrite-d219-3)
#endif
#break
#endswitch
#break
*--#] d219 : 
*--#[ d174 :
#case Md174
#procedure SimpleDotd174()
if (count(Md174,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 15
* path: (1, 0, 5)
#if ( `MOMS' > 0 )
	if (count(Md174,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md174-3;
	if (count(Md174,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p1.p + p5.p - p3.p;
	.sort:momrewrite-Md174-2;
	if (count(Md174,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p5.p - Q.p;
	.sort:momrewrite-Md174-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd174()
	#call replace(p1.p5,-i1+i13+i14,i,i1,i13,i14,Md174,dotrewrite-d174-0)
	#call replace(p2.p5,-i12-i2/2+i6/2-i7/2+i8,i,i12,i2,i6,i7,i8,Md174,dotrewrite-d174-1)
	#call replace(p3.p5,-i1/2+i14+i3/2-i4/2+i5/2,i,i1,i14,i3,i4,i5,Md174,dotrewrite-d174-2)
	#call replace(Q.p5,`Q2'/2-i1/2-i11+i13+i14+i5/2-i7/2,i,i1,i11,i13,i14,i5,i7,Md174,dotrewrite-d174-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q7
* path: (0, 7)
#case Q2
* path: (0, 7, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md174,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md174-3;
	if (count(Md174,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md174-2;
	if (count(Md174,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p7.p - p1.p;
	.sort:momrewrite-Md174-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd174()
	#call replace(p1.p7,-i11+i13+i14,i,i11,i13,i14,Md174,dotrewrite-d174-0)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md174,dotrewrite-d174-1)
	#call replace(Q.p7,-`Q2'/2-i1/2+i13+i14+i5/2-i7/2,i,i1,i13,i14,i5,i7,Md174,dotrewrite-d174-2)
	#call replace(p3.p7,-i1/2+i13+i14+i3/2-i4/2+i5/2-i9,i,i1,i13,i14,i3,i4,i5,i9,Md174,dotrewrite-d174-3)
#endif
#break
#case 26
* path: (2, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md174,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p + p3.p + p4.p;
	.sort:momrewrite-Md174-3;
	if (count(Md174,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + Q.p + p7.p;
	.sort:momrewrite-Md174-2;
	if (count(Md174,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md174-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd174()
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md174,dotrewrite-d174-0)
	#call replace(p1.p6,i11-i12-i13-i14,i,i11,i12,i13,i14,Md174,dotrewrite-d174-1)
	#call replace(Q.p6,`Q2'/2+i1/2-i13-i14-i5/2+i7/2-i8,i,i1,i13,i14,i5,i7,i8,Md174,dotrewrite-d174-2)
	#call replace(p3.p6,i1/2-i10-i13-i14-i3/2+i4/2-i5/2+i9,i,i1,i10,i13,i14,i3,i4,i5,i9,Md174,dotrewrite-d174-3)
#endif
#break
#default
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md174,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md174-3;
	if (count(Md174,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p - p1.p;
	.sort:momrewrite-Md174-2;
	if (count(Md174,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p4.p - Q.p;
	.sort:momrewrite-Md174-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd174()
	#call replace(p2.p4,-i10-i2/2+i6/2-i7/2+i8,i,i10,i2,i6,i7,i8,Md174,dotrewrite-d174-0)
	#call replace(p3.p4,-i1/2+i13+i14-i3/2-i4/2+i5/2,i,i1,i13,i14,i3,i4,i5,Md174,dotrewrite-d174-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i13+i14+i5/2-i7/2-i9,i,i1,i13,i14,i5,i7,i9,Md174,dotrewrite-d174-2)
#endif
#break
#endswitch
#break
*--#] d174 : 
*--#[ d266 :
#case Md266
#procedure SimpleDotd266()
if (count(Md266,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md266,dotrewrite-d266-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md266,dotrewrite-d266-1)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md266,dotrewrite-d266-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md266,dotrewrite-d266-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md266,dotrewrite-d266-4)
	#call replace(p3.p6,-`Q2'/2+i1/2+i10-i2/2-i7/2+i8/2,i,i1,i10,i2,i7,i8,Md266,dotrewrite-d266-5)
#endif
#break
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p1.p + p7.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p3.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	#call replace(Q.p8,-`Q2'+i10-i11,i,i10,i11,Md266,dotrewrite-d266-0)
	#call replace(p2.p8,-`Q2'/2-i11+i2/2-i6/2+i8/2,i,i11,i2,i6,i8,Md266,dotrewrite-d266-1)
	#call replace(p4.p8,-i12+i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md266,dotrewrite-d266-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md266,dotrewrite-d266-3)
	#call replace(p1.p8,-`Q2'/2+i10-i2/2+i3/2+i6/2-i7/2,i,i10,i2,i3,i6,i7,Md266,dotrewrite-d266-4)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p1.p + p7.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md266,dotrewrite-d266-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md266,dotrewrite-d266-1)
	#call replace(Q.p8,-`Q2'+i10-i11,i,i10,i11,Md266,dotrewrite-d266-2)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md266,dotrewrite-d266-3)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md266,dotrewrite-d266-4)
	#call replace(p2.p8,-`Q2'/2-i11+i2/2-i6/2+i8/2,i,i11,i2,i6,i8,Md266,dotrewrite-d266-5)
	#call replace(p4.p8,-i12+i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md266,dotrewrite-d266-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q3
* path: (0, 3)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p1.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	if (count(Md266,1)) id Q.p7 = i11 + i9;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md266,dotrewrite-d266-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md266,dotrewrite-d266-2)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md266,dotrewrite-d266-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md266,dotrewrite-d266-4)
	#call replace(p4.p7,i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md266,dotrewrite-d266-5)
	#call replace(p1.p3,`Q2'/2-i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md266,dotrewrite-d266-6)
#endif
#break
#case Q3
* path: (0, 2, 3)
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p1.p + p7.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	if (count(Md266,1)) id Q.p7 = i11 + i9;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md266,dotrewrite-d266-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md266,dotrewrite-d266-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md266,dotrewrite-d266-3)
	#call replace(p4.p7,i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md266,dotrewrite-d266-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md266,dotrewrite-d266-5)
	#call replace(p2.p7,-i1/2+i11+i3/2+i6/2-i8/2+i9,i,i1,i11,i3,i6,i8,i9,Md266,dotrewrite-d266-6)
#endif
#break
#case Q8
* path: (0, 8)
#case Q7
* path: (0, 8, 7)
#case 48
* path: (4, 8)
#case 68
* path: (6, 4, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p7.p - p6.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p + p6.p + p8.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	if (count(Md266,1)) id Q.p7 = i11 + i9;
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md266,dotrewrite-d266-1)
	#call replace(p6.p7,-i1/2+i6/2+i7/2,i,i1,i6,i7,Md266,dotrewrite-d266-2)
	#call replace(Q.p8,-`Q2'+i10-i11,i,i10,i11,Md266,dotrewrite-d266-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md266,dotrewrite-d266-4)
	#call replace(p4.p7,i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md266,dotrewrite-d266-5)
	#call replace(p4.p8,-i12+i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md266,dotrewrite-d266-6)
	#call replace(p6.p8,`Q2'/2-i10+i2/2-i6/2-i8/2,i,i10,i2,i6,i8,Md266,dotrewrite-d266-7)
#endif
#break
#case 47
* path: (4, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p7.p - p6.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	if (count(Md266,1)) id Q.p7 = i11 + i9;
	#call replace(Q.p3,`Q2'-i10-i9,i,i10,i9,Md266,dotrewrite-d266-1)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md266,dotrewrite-d266-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md266,dotrewrite-d266-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md266,dotrewrite-d266-4)
	#call replace(p6.p7,-i1/2+i6/2+i7/2,i,i1,i6,i7,Md266,dotrewrite-d266-5)
	#call replace(p4.p7,i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md266,dotrewrite-d266-6)
	#call replace(p3.p6,-`Q2'/2+i1/2+i10-i2/2-i7/2+i8/2,i,i1,i10,i2,i7,i8,Md266,dotrewrite-d266-7)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p1.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	if (count(Md266,1)) id Q.p7 = i11 + i9;
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md266,dotrewrite-d266-1)
	#call replace(p4.p7,i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md266,dotrewrite-d266-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md266,dotrewrite-d266-3)
	#call replace(p2.p7,-i1/2+i11+i3/2+i6/2-i8/2+i9,i,i1,i11,i3,i6,i8,i9,Md266,dotrewrite-d266-4)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p1.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	if (count(Md266,1)) id Q.p5 = i11 - i12;
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md266,dotrewrite-d266-1)
	#call replace(p1.p5,-i1/2-i13-i6/2+i7/2,i,i1,i13,i6,i7,Md266,dotrewrite-d266-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md266,dotrewrite-d266-3)
	#call replace(p2.p5,`Q2'/2-i10+i11-i14+i2/2+i6/2-i8/2,i,i10,i11,i14,i2,i6,i8,Md266,dotrewrite-d266-4)
#endif
#break
#default
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 2, 4)
#case Q6
* path: (0, 4, 6)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md266,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md266-4;
	if (count(Md266,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md266-3;
	if (count(Md266,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md266-2;
	if (count(Md266,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md266-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd266()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md266,dotrewrite-d266-0)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md266,dotrewrite-d266-1)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10-i2/2+i3/2+i9,i,i1,i10,i2,i3,i9,Md266,dotrewrite-d266-2)
	#call replace(p2.p6,`Q2'/2-i10+i11+i2/2+i6/2-i8/2,i,i10,i11,i2,i6,i8,Md266,dotrewrite-d266-3)
#endif
#break
#endswitch
#break
*--#] d266 : 
*--#[ d256 :
#case Md256
#procedure SimpleDotd256()
if (count(Md256,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	if (count(Md256,1)) id Q.p3 = -i10 + i9;
	if (count(Md256,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md256,dotrewrite-d256-2)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md256,dotrewrite-d256-3)
	#call replace(p1.p6,-`Q2'/2-i1/2+i11-i6/2+i7/2+i9,i,i1,i11,i6,i7,i9,Md256,dotrewrite-d256-4)
	#call replace(p3.p6,-i1/2-i10+i2/2+i7/2-i8/2+i9,i,i1,i10,i2,i7,i8,i9,Md256,dotrewrite-d256-5)
#endif
#break
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + Q.p + p8.p - p2.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md256,dotrewrite-d256-0)
	#call replace(Q.p8,-`Q2'+i10+i11,i,i10,i11,Md256,dotrewrite-d256-1)
	#call replace(p2.p8,-`Q2'/2+i11+i2/2-i6/2+i8/2,i,i11,i2,i6,i8,Md256,dotrewrite-d256-2)
	#call replace(p4.p8,-i12+i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md256,dotrewrite-d256-3)
	#call replace(p1.p8,-`Q2'/2+i11+i2/2-i3/2-i6/2+i7/2,i,i11,i2,i3,i6,i7,Md256,dotrewrite-d256-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 28
* path: (2, 8)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + Q.p + p8.p - p2.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	if (count(Md256,1)) id Q.p3 = -i10 + i9;
	if (count(Md256,1)) id p3.p4 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md256,dotrewrite-d256-2)
	#call replace(Q.p8,-`Q2'+i10+i11,i,i10,i11,Md256,dotrewrite-d256-3)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md256,dotrewrite-d256-4)
	#call replace(p2.p8,-`Q2'/2+i11+i2/2-i6/2+i8/2,i,i11,i2,i6,i8,Md256,dotrewrite-d256-5)
	#call replace(p4.p8,-i12+i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md256,dotrewrite-d256-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	if (count(Md256,1)) id Q.p3 = -i10 + i9;
	if (count(Md256,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md256,dotrewrite-d256-2)
	#call replace(Q.p7,`Q2'-i11-i9,i,i11,i9,Md256,dotrewrite-d256-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md256,dotrewrite-d256-4)
	#call replace(p1.p7,`Q2'/2-i1/2-i11+i6/2-i7/2,i,i1,i11,i6,i7,Md256,dotrewrite-d256-5)
	#call replace(p4.p7,i12-i13+i4/2-i5/2+i6/2,i,i12,i13,i4,i5,i6,Md256,dotrewrite-d256-6)
#endif
#break
#case 18
* path: (1, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	#call replace(Q.p7,`Q2'-i11-i9,i,i11,i9,Md256,dotrewrite-d256-0)
	#call replace(Q.p8,-`Q2'+i10+i11,i,i10,i11,Md256,dotrewrite-d256-1)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md256,dotrewrite-d256-2)
	#call replace(p1.p7,`Q2'/2-i1/2-i11+i6/2-i7/2,i,i1,i11,i6,i7,Md256,dotrewrite-d256-3)
	#call replace(p4.p7,i12-i13+i4/2-i5/2+i6/2,i,i12,i13,i4,i5,i6,Md256,dotrewrite-d256-4)
	#call replace(p4.p8,-i12+i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md256,dotrewrite-d256-5)
	#call replace(p1.p8,-`Q2'/2+i11+i2/2-i3/2-i6/2+i7/2,i,i11,i2,i3,i6,i7,Md256,dotrewrite-d256-6)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p + Q.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p4.p - p5.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	if (count(Md256,1)) id Q.p5 = -i11 - i12;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md256,dotrewrite-d256-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md256,dotrewrite-d256-2)
	#call replace(p1.p5,`Q2'/2+i1/2-i11-i13+i6/2-i7/2-i9,i,i1,i11,i13,i6,i7,i9,Md256,dotrewrite-d256-3)
	#call replace(p2.p5,`Q2'/2-i10-i11-i14+i2/2+i6/2-i8/2,i,i10,i11,i14,i2,i6,i8,Md256,dotrewrite-d256-4)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 6)
#case 14
* path: (1, 6, 4)
#case 26
* path: (2, 1, 6)
#case 26
* path: (2, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md256,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md256-4;
	if (count(Md256,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md256-3;
	if (count(Md256,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p6.p;
	.sort:momrewrite-Md256-2;
	if (count(Md256,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md256-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd256()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md256,dotrewrite-d256-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md256,dotrewrite-d256-1)
	#call replace(p1.p6,-`Q2'/2-i1/2+i11-i6/2+i7/2+i9,i,i1,i11,i6,i7,i9,Md256,dotrewrite-d256-2)
	#call replace(p2.p6,-`Q2'/2+i10+i11-i2/2-i6/2+i8/2,i,i10,i11,i2,i6,i8,Md256,dotrewrite-d256-3)
#endif
#break
#endswitch
#break
*--#] d256 : 
*--#[ d232 :
#case Md232
#procedure SimpleDotd232()
if (count(Md232,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p1.p4^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p3.p4^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 1, 2)
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 4, 6)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 6)
#case 24
* path: (2, 6, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p6.p - p4.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p6.p - p3.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	if (count(Md232,1)) id p2.p3 = i11 - i12;
	if (count(Md232,1)) id p2.p4 = -i10 + i9;
	if (count(Md232,1)) id p3.p6 = i13 + i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md232,dotrewrite-d232-3)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md232,dotrewrite-d232-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md232,dotrewrite-d232-5)
	#call replace(Q.p6,-`Q2'/2+i11+i13+i14-i3/2-i6/2+i8/2,i,i11,i13,i14,i3,i6,i8,Md232,dotrewrite-d232-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p6.p - p4.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p6.p - p3.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	if (count(Md232,1)) id p3.p6 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md232,dotrewrite-d232-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md232,dotrewrite-d232-2)
	#call replace(Q.p6,-`Q2'/2+i11+i13+i14-i3/2-i6/2+i8/2,i,i11,i13,i14,i3,i6,i8,Md232,dotrewrite-d232-3)
	#call replace(p1.p6,-`Q2'/2+i11+i13+i14+i2/2-i3/2-i7/2+i8/2,i,i11,i13,i14,i2,i3,i7,i8,Md232,dotrewrite-d232-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p - p7.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p6.p - p4.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p6.p - p3.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	if (count(Md232,1)) id p3.p6 = i13 + i14;
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md232,dotrewrite-d232-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md232,dotrewrite-d232-2)
	#call replace(p3.p7,-i11+i12-i13-i14,i,i11,i12,i13,i14,Md232,dotrewrite-d232-3)
	#call replace(p4.p7,i10-i4/2+i5/2-i6/2-i9,i,i10,i4,i5,i6,i9,Md232,dotrewrite-d232-4)
	#call replace(Q.p6,-`Q2'/2+i11+i13+i14-i3/2-i6/2+i8/2,i,i11,i13,i14,i3,i6,i8,Md232,dotrewrite-d232-5)
	#call replace(Q.p7,i1/2-i11-i13-i14-i2/2+i3/2+i6/2-i8/2,i,i1,i11,i13,i14,i2,i3,i6,i8,Md232,dotrewrite-d232-6)
#endif
#break
#case 38
* path: (3, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = - p4.p + p6.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p2.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md232,dotrewrite-d232-0)
	#call replace(p3.p8,i11+i13+i14-i3,i,i11,i13,i14,i3,Md232,dotrewrite-d232-1)
	#call replace(p4.p8,-i13+i4/2-i5/2+i6/2+i9,i,i13,i4,i5,i6,i9,Md232,dotrewrite-d232-2)
	#call replace(Q.p8,`Q2'/2+i13+i14-i3/2-i6/2+i8/2,i,i13,i14,i3,i6,i8,Md232,dotrewrite-d232-3)
	#call replace(p1.p8,i1/2+i11-i12+i13+i14-i3/2-i7/2+i8/2,i,i1,i11,i12,i13,i14,i3,i7,i8,Md232,dotrewrite-d232-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = - p4.p + p6.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p2.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md232,dotrewrite-d232-0)
	#call replace(p3.p7,-i11+i12-i13-i14,i,i11,i12,i13,i14,Md232,dotrewrite-d232-1)
	#call replace(p4.p7,i10-i4/2+i5/2-i6/2-i9,i,i10,i4,i5,i6,i9,Md232,dotrewrite-d232-2)
	#call replace(p1.p7,i1/2-i11-i13-i14+i3/2+i7/2-i8/2,i,i1,i11,i13,i14,i3,i7,i8,Md232,dotrewrite-d232-3)
	#call replace(Q.p7,i1/2-i11-i13-i14-i2/2+i3/2+i6/2-i8/2,i,i1,i11,i13,i14,i2,i3,i6,i8,Md232,dotrewrite-d232-4)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 7)
#case 47
* path: (4, 3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = - p4.p + p6.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	if (count(Md232,1)) id p2.p3 = i11 - i12;
	if (count(Md232,1)) id p2.p4 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md232,dotrewrite-d232-2)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md232,dotrewrite-d232-3)
	#call replace(p3.p7,-i11+i12-i13-i14,i,i11,i12,i13,i14,Md232,dotrewrite-d232-4)
	#call replace(p4.p7,i10-i4/2+i5/2-i6/2-i9,i,i10,i4,i5,i6,i9,Md232,dotrewrite-d232-5)
	#call replace(Q.p7,i1/2-i11-i13-i14-i2/2+i3/2+i6/2-i8/2,i,i1,i11,i13,i14,i2,i3,i6,i8,Md232,dotrewrite-d232-6)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	if (count(Md232,1)) id p2.p3 = i11 - i12;
	if (count(Md232,1)) id p2.p4 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md232,dotrewrite-d232-2)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md232,dotrewrite-d232-3)
	#call replace(p2.p5,i10-i2/2-i6/2+i7/2-i9,i,i10,i2,i6,i7,i9,Md232,dotrewrite-d232-4)
	#call replace(Q.p5,-`Q2'/2+i11+i13+i14-i3/2-i6/2+i8/2-i9,i,i11,i13,i14,i3,i6,i8,i9,Md232,dotrewrite-d232-5)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md232,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md232-4;
	if (count(Md232,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md232-3;
	if (count(Md232,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md232-2;
	if (count(Md232,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md232-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd232()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md232,dotrewrite-d232-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md232,dotrewrite-d232-1)
	#call replace(Q.p5,-`Q2'/2+i11+i13+i14-i3/2-i6/2+i8/2-i9,i,i11,i13,i14,i3,i6,i8,i9,Md232,dotrewrite-d232-2)
	#call replace(p1.p5,-`Q2'/2-i10+i11+i13+i14+i2/2-i3/2-i7/2+i8/2,i,i10,i11,i13,i14,i2,i3,i7,i8,Md232,dotrewrite-d232-3)
#endif
#break
#endswitch
#break
*--#] d232 : 
*--#[ d179 :
#case Md179
#procedure SimpleDotd179()
if (count(Md179,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md179,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p5.p - p3.p;
	.sort:momrewrite-Md179-3;
	if (count(Md179,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md179-2;
	if (count(Md179,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p + p5.p - p2.p;
	.sort:momrewrite-Md179-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd179()
	if (count(Md179,1)) id Q.p5 = i10 + i9;
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md179,dotrewrite-d179-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md179,dotrewrite-d179-2)
	#call replace(p2.p5,`Q2'/2+i10+i2/2+i5/2-i7/2-i8+i9,i,i10,i2,i5,i7,i8,i9,Md179,dotrewrite-d179-3)
#endif
#break
#case 27
* path: (2, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md179,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p + p5.p;
	.sort:momrewrite-Md179-3;
	if (count(Md179,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p1.p;
	.sort:momrewrite-Md179-2;
	if (count(Md179,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p - p7.p;
	.sort:momrewrite-Md179-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd179()
	#call replace(Q.p7,`Q2'+i10-i8+i9,i,i10,i8,i9,Md179,dotrewrite-d179-0)
	#call replace(p1.p7,-i1/2+i12-i13-i5/2+i6/2,i,i1,i12,i13,i5,i6,Md179,dotrewrite-d179-1)
	#call replace(p3.p7,-i11+i3/2-i4/2+i5/2+i9,i,i11,i3,i4,i5,i9,Md179,dotrewrite-d179-2)
	#call replace(p2.p7,`Q2'/2+i10-i2/2+i5/2-i7/2+i9,i,i10,i2,i5,i7,i9,Md179,dotrewrite-d179-3)
#endif
#break
#case 16
* path: (1, 0, 6)
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md179,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p3.p + p5.p;
	.sort:momrewrite-Md179-3;
	if (count(Md179,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p6.p;
	.sort:momrewrite-Md179-2;
	if (count(Md179,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p2.p - p6.p;
	.sort:momrewrite-Md179-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd179()
	#call replace(Q.p6,-i10-i12-i9,i,i10,i12,i9,Md179,dotrewrite-d179-0)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md179,dotrewrite-d179-1)
	#call replace(p3.p6,-i14-i3/2+i4/2-i5/2,i,i14,i3,i4,i5,Md179,dotrewrite-d179-2)
	#call replace(p2.p6,-`Q2'/2-i10-i13-i2/2-i5/2+i7/2+i8-i9,i,i10,i13,i2,i5,i7,i8,i9,Md179,dotrewrite-d179-3)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md179,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md179-3;
	if (count(Md179,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md179-2;
	if (count(Md179,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p + p3.p + p4.p - p2.p;
	.sort:momrewrite-Md179-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd179()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md179,dotrewrite-d179-0)
	#call replace(p1.p4,-i1/2-i14-i5/2+i6/2,i,i1,i14,i5,i6,Md179,dotrewrite-d179-1)
	#call replace(p2.p4,`Q2'/2+i10-i11+i2/2+i5/2-i7/2-i8+i9,i,i10,i11,i2,i5,i7,i8,i9,Md179,dotrewrite-d179-2)
#endif
#break
#endswitch
#break
*--#] d179 : 
*--#[ d244 :
#case Md244
#procedure SimpleDotd244()
if (count(Md244,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p - p7.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-0)
	#call replace(Q.p7,i10-i11-i9,i,i10,i11,i9,Md244,dotrewrite-d244-1)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md244,dotrewrite-d244-2)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md244,dotrewrite-d244-3)
	#call replace(p3.p7,-`Q2'/2+i10-i11-i3/2-i7/2+i8/2,i,i10,i11,i3,i7,i8,Md244,dotrewrite-d244-4)
	#call replace(p3.p6,`Q2'/2-i10+i11+i4/2-i5/2+i7/2-i8/2,i,i10,i11,i4,i5,i7,i8,Md244,dotrewrite-d244-5)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p + p6.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	if (count(Md244,1)) id Q.p5 = -i10 + i9;
	if (count(Md244,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-3)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md244,dotrewrite-d244-4)
	#call replace(p3.p6,`Q2'/2-i10+i11+i4/2-i5/2+i7/2-i8/2,i,i10,i11,i4,i5,i7,i8,Md244,dotrewrite-d244-5)
#endif
#break
#case 58
* path: (5, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p + p4.p - Q.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	if (count(Md244,1)) id Q.p5 = -i10 + i9;
	if (count(Md244,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-3)
	#call replace(Q.p8,`Q2'-i10+i11,i,i10,i11,Md244,dotrewrite-d244-4)
	#call replace(p1.p8,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md244,dotrewrite-d244-5)
	#call replace(p5.p8,-i10-i3/2+i4/2-i6/2+i7/2+i9,i,i10,i3,i4,i6,i7,i9,Md244,dotrewrite-d244-6)
	#call replace(p3.p8,`Q2'/2-i10+i11-i3/2+i7/2-i8/2+i9,i,i10,i11,i3,i7,i8,i9,Md244,dotrewrite-d244-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + Q.p + p6.p - p8.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-0)
	#call replace(Q.p7,i10-i11-i9,i,i10,i11,i9,Md244,dotrewrite-d244-1)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md244,dotrewrite-d244-2)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md244,dotrewrite-d244-3)
	#call replace(Q.p8,`Q2'-i10+i11,i,i10,i11,Md244,dotrewrite-d244-4)
	#call replace(p1.p8,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md244,dotrewrite-d244-5)
	#call replace(p6.p8,-`Q2'/2+i10-i4/2+i6/2+i8/2,i,i10,i4,i6,i8,Md244,dotrewrite-d244-6)
	#call replace(p7.p8,`Q2'/2+i3/2-i7/2-i8/2-i9,i,i3,i7,i8,i9,Md244,dotrewrite-d244-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p6.p - p4.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	if (count(Md244,1)) id Q.p5 = -i10 + i9;
	if (count(Md244,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-3)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md244,dotrewrite-d244-4)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i8/2,i,i10,i11,i4,i6,i8,Md244,dotrewrite-d244-5)
#endif
#break
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p + p8.p - Q.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-1)
	#call replace(Q.p8,`Q2'-i10+i11,i,i10,i11,Md244,dotrewrite-d244-2)
	#call replace(p1.p8,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md244,dotrewrite-d244-3)
	#call replace(p4.p8,`Q2'/2+i11-i4/2+i6/2-i8/2,i,i11,i4,i6,i8,Md244,dotrewrite-d244-4)
	#call replace(p3.p8,`Q2'/2-i10+i11-i3/2+i7/2-i8/2+i9,i,i10,i11,i3,i7,i8,i9,Md244,dotrewrite-d244-5)
#endif
#break
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p5.p - p7.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p - p7.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	if (count(Md244,1)) id Q.p5 = -i10 + i9;
	if (count(Md244,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-3)
	#call replace(Q.p7,i10-i11-i9,i,i10,i11,i9,Md244,dotrewrite-d244-4)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md244,dotrewrite-d244-5)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md244,dotrewrite-d244-6)
	#call replace(p3.p7,-`Q2'/2+i10-i11-i3/2-i7/2+i8/2,i,i10,i11,i3,i7,i8,Md244,dotrewrite-d244-7)
#endif
#break
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p + p8.p - Q.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	if (count(Md244,1)) id Q.p5 = -i10 + i9;
	if (count(Md244,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-3)
	#call replace(Q.p8,`Q2'-i10+i11,i,i10,i11,Md244,dotrewrite-d244-4)
	#call replace(p1.p8,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md244,dotrewrite-d244-5)
	#call replace(p4.p8,`Q2'/2+i11-i4/2+i6/2-i8/2,i,i11,i4,i6,i8,Md244,dotrewrite-d244-6)
	#call replace(p5.p8,-i10-i3/2+i4/2-i6/2+i7/2+i9,i,i10,i3,i4,i6,i7,i9,Md244,dotrewrite-d244-7)
#endif
#break
#default
#case Q4
* path: (0, 1, 3, 4)
#case Q3
* path: (0, 4, 3)
#case 14
* path: (1, 3, 4)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md244,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md244-4;
	if (count(Md244,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md244-3;
	if (count(Md244,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md244-2;
	if (count(Md244,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p6.p - p4.p;
	.sort:momrewrite-Md244-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd244()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md244,dotrewrite-d244-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md244,dotrewrite-d244-1)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i8/2,i,i10,i11,i4,i6,i8,Md244,dotrewrite-d244-2)
	#call replace(p3.p6,`Q2'/2-i10+i11+i4/2-i5/2+i7/2-i8/2,i,i10,i11,i4,i5,i7,i8,Md244,dotrewrite-d244-3)
#endif
#break
#endswitch
#break
*--#] d244 : 
*--#[ d327 :
#case Md327
#procedure SimpleDotd327()
if (count(Md327,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p8.p - p7.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md327,dotrewrite-d327-0)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-1)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md327,dotrewrite-d327-2)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md327,dotrewrite-d327-3)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md327,dotrewrite-d327-4)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md327,dotrewrite-d327-5)
	#call replace(p2.p8,-`Q2'/2-i1/2+i10+i11+i3/2-i6/2+i7/2,i,i1,i10,i11,i3,i6,i7,Md327,dotrewrite-d327-6)
#endif
#break
#case Q1
* path: (0, 9, 3, 1)
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md327,dotrewrite-d327-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md327,dotrewrite-d327-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md327,dotrewrite-d327-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md327,dotrewrite-d327-3)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md327,dotrewrite-d327-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md327,dotrewrite-d327-5)
	#call replace(p1.p9,`Q2'/2-i11+i2/2-i3/2-i7/2+i8/2,i,i11,i2,i3,i7,i8,Md327,dotrewrite-d327-6)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md327,dotrewrite-d327-0)
	#call replace(Q.p5,`Q2'/2-i12+i6/2-i9/2,i,i12,i6,i9,Md327,dotrewrite-d327-1)
	#call replace(p2.p5,-i14+i2/2+i6/2-i7/2,i,i14,i2,i6,i7,Md327,dotrewrite-d327-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md327,dotrewrite-d327-3)
	#call replace(p1.p5,-`Q2'/2+i10+i11-i13-i2/2+i3/2+i7/2-i8/2,i,i10,i11,i13,i2,i3,i7,i8,Md327,dotrewrite-d327-4)
#endif
#break
#case Q6
* path: (0, 2, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 26
* path: (2, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md327,dotrewrite-d327-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md327,dotrewrite-d327-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md327,dotrewrite-d327-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md327,dotrewrite-d327-3)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md327,dotrewrite-d327-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i10-i2/2-i3/2,i,i1,i10,i2,i3,Md327,dotrewrite-d327-5)
	#call replace(p3.p6,`Q2'-i10-i11-i3/2+i8/2-i9/2,i,i10,i11,i3,i8,i9,Md327,dotrewrite-d327-6)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-0)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md327,dotrewrite-d327-1)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md327,dotrewrite-d327-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md327,dotrewrite-d327-3)
	#call replace(p2.p8,-`Q2'/2-i1/2+i10+i11+i3/2-i6/2+i7/2,i,i1,i10,i11,i3,i6,i7,Md327,dotrewrite-d327-4)
#endif
#break
#case 16
* path: (1, 2, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md327,dotrewrite-d327-0)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md327,dotrewrite-d327-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md327,dotrewrite-d327-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md327,dotrewrite-d327-3)
	#call replace(p1.p6,-`Q2'/2+i10+i11-i2/2+i3/2+i7/2-i8/2,i,i10,i11,i2,i3,i7,i8,Md327,dotrewrite-d327-4)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p8.p - p7.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p + p7.p - p9.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md327,dotrewrite-d327-1)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md327,dotrewrite-d327-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md327,dotrewrite-d327-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md327,dotrewrite-d327-4)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md327,dotrewrite-d327-5)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md327,dotrewrite-d327-6)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md327,dotrewrite-d327-7)
	#call replace(p7.p9,-`Q2'/2+i11-i2/2+i7/2+i9/2,i,i11,i2,i7,i9,Md327,dotrewrite-d327-8)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 13
* path: (1, 3)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md327,dotrewrite-d327-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md327,dotrewrite-d327-1)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-2)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md327,dotrewrite-d327-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md327,dotrewrite-d327-4)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md327,dotrewrite-d327-5)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md327,dotrewrite-d327-6)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md327,dotrewrite-d327-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md327,dotrewrite-d327-1)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md327,dotrewrite-d327-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md327,dotrewrite-d327-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md327,dotrewrite-d327-5)
	#call replace(p3.p7,-`Q2'/2+i1/2+i11-i2/2-i8/2+i9/2,i,i1,i11,i2,i8,i9,Md327,dotrewrite-d327-6)
#endif
#break
#case Q7
* path: (0, 6, 4, 7)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md327,dotrewrite-d327-0)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md327,dotrewrite-d327-1)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-2)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md327,dotrewrite-d327-3)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md327,dotrewrite-d327-4)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md327,dotrewrite-d327-5)
	#call replace(p1.p6,-`Q2'/2+i10+i11-i2/2+i3/2+i7/2-i8/2,i,i10,i11,i2,i3,i7,i8,Md327,dotrewrite-d327-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md327,dotrewrite-d327-1)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md327,dotrewrite-d327-2)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md327,dotrewrite-d327-3)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md327,dotrewrite-d327-4)
	#call replace(p4.p8,i13+i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md327,dotrewrite-d327-5)
	#call replace(p1.p9,`Q2'/2-i11+i2/2-i3/2-i7/2+i8/2,i,i11,i2,i3,i7,i8,Md327,dotrewrite-d327-6)
#endif
#break
#case Q3
* path: (0, 3)
#case Q9
* path: (0, 3, 9)
#case Q9
* path: (0, 9)
#case Q3
* path: (0, 9, 3)
#case Q2
* path: (0, 9, 3, 2)
#case 23
* path: (2, 3)
#case 29
* path: (2, 3, 9)
#case 33
* path: (3,)
#case 34
* path: (3, 2, 4)
#case 39
* path: (3, 9)
#case 36
* path: (3, 9, 6)
#case 49
* path: (4, 6, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md327,dotrewrite-d327-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md327,dotrewrite-d327-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md327,dotrewrite-d327-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md327,dotrewrite-d327-3)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md327,dotrewrite-d327-4)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md327,dotrewrite-d327-5)
	#call replace(p2.p3,`Q2'/2+i1/2-i10-i2/2-i3/2,i,i1,i10,i2,i3,Md327,dotrewrite-d327-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 27
* path: (2, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md327,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md327-5;
	if (count(Md327,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md327-4;
	if (count(Md327,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md327-3;
	if (count(Md327,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md327-2;
	if (count(Md327,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md327-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd327()
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md327,dotrewrite-d327-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md327,dotrewrite-d327-1)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md327,dotrewrite-d327-2)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md327,dotrewrite-d327-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md327,dotrewrite-d327-4)
#endif
#break
#endswitch
#break
*--#] d327 : 
*--#[ d325 :
#case Md325
#procedure SimpleDotd325()
if (count(Md325,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 9, 8)
#case Q2
* path: (0, 9, 8, 2)
#case 29
* path: (2, 8, 9)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + p9.p - p8.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	if (count(Md325,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md325,dotrewrite-d325-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md325,dotrewrite-d325-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md325,dotrewrite-d325-3)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md325,dotrewrite-d325-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md325,dotrewrite-d325-5)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md325,dotrewrite-d325-6)
	#call replace(p4.p8,i12-i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md325,dotrewrite-d325-7)
	#call replace(p2.p9,i10-i11+i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md325,dotrewrite-d325-8)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md325,dotrewrite-d325-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md325,dotrewrite-d325-1)
	#call replace(Q.p5,`Q2'/2-i12+i6/2-i9/2,i,i12,i6,i9,Md325,dotrewrite-d325-2)
	#call replace(p3.p5,i10-i14-i3/2+i8/2-i9/2,i,i10,i14,i3,i8,i9,Md325,dotrewrite-d325-3)
	#call replace(p1.p5,i1/2+i10-i11-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i13,i6,i7,i8,i9,Md325,dotrewrite-d325-4)
#endif
#break
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p + p8.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md325,dotrewrite-d325-0)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md325,dotrewrite-d325-1)
	#call replace(p3.p6,i10-i3/2+i8/2-i9/2,i,i10,i3,i8,i9,Md325,dotrewrite-d325-2)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md325,dotrewrite-d325-3)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md325,dotrewrite-d325-4)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md325,dotrewrite-d325-5)
	#call replace(p6.p7,i1/2-i11+i3/2-i6/2-i7/2,i,i1,i11,i3,i6,i7,Md325,dotrewrite-d325-6)
#endif
#break
#case Q9
* path: (0, 1, 3, 9)
#case Q1
* path: (0, 9, 3, 1)
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md325,dotrewrite-d325-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md325,dotrewrite-d325-1)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md325,dotrewrite-d325-2)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md325,dotrewrite-d325-3)
	#call replace(p1.p9,`Q2'/2-i10+i11-i2/2-i6/2+i7/2-i8/2+i9/2,i,i10,i11,i2,i6,i7,i8,i9,Md325,dotrewrite-d325-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 26
* path: (2, 1, 4, 6)
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	if (count(Md325,1)) id p2.p3 = i10 - i11;
	if (count(Md325,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md325,dotrewrite-d325-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md325,dotrewrite-d325-3)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md325,dotrewrite-d325-4)
	#call replace(p3.p6,i10-i3/2+i8/2-i9/2,i,i10,i3,i8,i9,Md325,dotrewrite-d325-5)
	#call replace(p2.p6,`Q2'/2-i1/2-i10+i11+i7/2-i8/2,i,i1,i10,i11,i7,i8,Md325,dotrewrite-d325-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 28
* path: (2, 8)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 8)
#case 44
* path: (4,)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	if (count(Md325,1)) id p2.p3 = i10 - i11;
	if (count(Md325,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md325,dotrewrite-d325-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md325,dotrewrite-d325-3)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md325,dotrewrite-d325-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md325,dotrewrite-d325-5)
	#call replace(p4.p8,i12-i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md325,dotrewrite-d325-6)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md325,dotrewrite-d325-0)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md325,dotrewrite-d325-1)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md325,dotrewrite-d325-2)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md325,dotrewrite-d325-3)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md325,dotrewrite-d325-4)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md325,dotrewrite-d325-5)
	#call replace(p4.p8,i12-i14-i4/2+i5/2-i6/2,i,i12,i14,i4,i5,i6,Md325,dotrewrite-d325-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md325,dotrewrite-d325-0)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md325,dotrewrite-d325-1)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md325,dotrewrite-d325-2)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md325,dotrewrite-d325-3)
	#call replace(p1.p7,i1/2-i10-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i6,i7,i8,i9,Md325,dotrewrite-d325-4)
#endif
#break
#case 27
* path: (2, 7)
#case 37
* path: (3, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	if (count(Md325,1)) id p2.p3 = i10 - i11;
	if (count(Md325,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md325,dotrewrite-d325-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md325,dotrewrite-d325-3)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md325,dotrewrite-d325-4)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md325,dotrewrite-d325-5)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md325,dotrewrite-d325-6)
#endif
#break
#case Q7
* path: (0, 9, 3, 7)
#case 79
* path: (7, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p + p8.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md325,dotrewrite-d325-0)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md325,dotrewrite-d325-1)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md325,dotrewrite-d325-2)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md325,dotrewrite-d325-3)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md325,dotrewrite-d325-4)
	#call replace(p4.p7,i13-i14-i4/2+i5/2-i6/2,i,i13,i14,i4,i5,i6,Md325,dotrewrite-d325-5)
	#call replace(p7.p9,-i10+i11-i2/2-i3/2+i7/2+i9/2,i,i10,i11,i2,i3,i7,i9,Md325,dotrewrite-d325-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q3
* path: (0, 9, 3)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	if (count(Md325,1)) id p2.p3 = i10 - i11;
	if (count(Md325,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md325,dotrewrite-d325-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md325,dotrewrite-d325-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md325,dotrewrite-d325-4)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md325,dotrewrite-d325-5)
	#call replace(p2.p9,i10-i11+i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md325,dotrewrite-d325-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md325,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md325-5;
	if (count(Md325,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md325-4;
	if (count(Md325,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md325-3;
	if (count(Md325,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md325-2;
	if (count(Md325,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md325-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd325()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md325,dotrewrite-d325-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md325,dotrewrite-d325-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md325,dotrewrite-d325-2)
	#call replace(p3.p6,i10-i3/2+i8/2-i9/2,i,i10,i3,i8,i9,Md325,dotrewrite-d325-3)
	#call replace(p1.p6,i1/2+i10-i11+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md325,dotrewrite-d325-4)
#endif
#break
#endswitch
#break
*--#] d325 : 
*--#[ d353 :
#case Md353
#procedure SimpleDotd353()
if (count(Md353,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p7.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md353,dotrewrite-d353-0)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md353,dotrewrite-d353-1)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md353,dotrewrite-d353-2)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md353,dotrewrite-d353-3)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md353,dotrewrite-d353-4)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md353,dotrewrite-d353-5)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md353,dotrewrite-d353-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p3.p + p8.p + p9.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md353,dotrewrite-d353-0)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md353,dotrewrite-d353-1)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md353,dotrewrite-d353-2)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md353,dotrewrite-d353-3)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md353,dotrewrite-d353-4)
	#call replace(p8.p9,i1/2-i11+i3/2-i8/2-i9/2,i,i1,i11,i3,i8,i9,Md353,dotrewrite-d353-5)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md353,dotrewrite-d353-6)
#endif
#break
#case 68
* path: (6, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p9.p + p3.p + p8.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p6.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md353,dotrewrite-d353-0)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md353,dotrewrite-d353-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md353,dotrewrite-d353-2)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md353,dotrewrite-d353-3)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md353,dotrewrite-d353-4)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md353,dotrewrite-d353-5)
	#call replace(p6.p8,-i10+i11-i2/2-i3/2+i6/2+i8/2,i,i10,i11,i2,i3,i6,i8,Md353,dotrewrite-d353-6)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	if (count(Md353,1)) id p2.p3 = i10 - i11;
	if (count(Md353,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md353,dotrewrite-d353-2)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md353,dotrewrite-d353-3)
	#call replace(Q.p5,`Q2'/2-i12+i6/2-i9/2,i,i12,i6,i9,Md353,dotrewrite-d353-4)
	#call replace(p3.p5,-i14+i3/2+i6/2-i7/2,i,i14,i3,i6,i7,Md353,dotrewrite-d353-5)
	#call replace(p2.p5,i10-i11-i12+i13+i2/2+i7/2-i8/2,i,i10,i11,i12,i13,i2,i7,i8,Md353,dotrewrite-d353-6)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case Q6
* path: (0, 1, 9, 6)
#case Q1
* path: (0, 9, 1)
#case 19
* path: (1, 9)
#case 16
* path: (1, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md353,dotrewrite-d353-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md353,dotrewrite-d353-1)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md353,dotrewrite-d353-2)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md353,dotrewrite-d353-3)
	#call replace(p1.p9,i1/2+i10-i11-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md353,dotrewrite-d353-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 26
* path: (2, 1, 9, 6)
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p6.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p2.p - p3.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	if (count(Md353,1)) id p2.p3 = i10 - i11;
	if (count(Md353,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md353,dotrewrite-d353-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md353,dotrewrite-d353-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md353,dotrewrite-d353-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md353,dotrewrite-d353-5)
	#call replace(p2.p6,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md353,dotrewrite-d353-6)
#endif
#break
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p9.p + Q.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	if (count(Md353,1)) id p2.p3 = i10 - i11;
	if (count(Md353,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md353,dotrewrite-d353-2)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md353,dotrewrite-d353-3)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md353,dotrewrite-d353-4)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md353,dotrewrite-d353-5)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md353,dotrewrite-d353-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p9.p + Q.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md353,dotrewrite-d353-0)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md353,dotrewrite-d353-1)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md353,dotrewrite-d353-2)
	#call replace(p1.p8,i1/2-i10+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i6,i7,i8,i9,Md353,dotrewrite-d353-3)
	#call replace(p4.p8,-i12+i13-i14+i4/2-i5/2+i6/2,i,i12,i13,i14,i4,i5,i6,Md353,dotrewrite-d353-4)
#endif
#break
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	if (count(Md353,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md353,dotrewrite-d353-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md353,dotrewrite-d353-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md353,dotrewrite-d353-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md353,dotrewrite-d353-4)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md353,dotrewrite-d353-5)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md353,dotrewrite-d353-6)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md353,dotrewrite-d353-7)
	#call replace(p2.p6,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md353,dotrewrite-d353-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q7
* path: (0, 9, 3, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p7.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	if (count(Md353,1)) id p2.p3 = i10 - i11;
	if (count(Md353,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md353,dotrewrite-d353-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md353,dotrewrite-d353-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md353,dotrewrite-d353-4)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md353,dotrewrite-d353-5)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md353,dotrewrite-d353-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q2
* path: (0, 9, 1, 2)
#case Q3
* path: (0, 9, 3)
#case 29
* path: (2, 1, 9)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	if (count(Md353,1)) id p2.p3 = i10 - i11;
	if (count(Md353,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md353,dotrewrite-d353-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md353,dotrewrite-d353-3)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md353,dotrewrite-d353-4)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md353,dotrewrite-d353-5)
	#call replace(p2.p9,`Q2'/2-i1/2-i10+i11-i7/2+i8/2,i,i1,i10,i11,i7,i8,Md353,dotrewrite-d353-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md353,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md353-5;
	if (count(Md353,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md353-4;
	if (count(Md353,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md353-3;
	if (count(Md353,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p7.p;
	.sort:momrewrite-Md353-2;
	if (count(Md353,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md353-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd353()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md353,dotrewrite-d353-0)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md353,dotrewrite-d353-1)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md353,dotrewrite-d353-2)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md353,dotrewrite-d353-3)
	#call replace(p1.p7,-`Q2'/2+i10+i2/2-i6/2+i7/2-i8/2+i9/2,i,i10,i2,i6,i7,i8,i9,Md353,dotrewrite-d353-4)
#endif
#break
#endswitch
#break
*--#] d353 : 
*--#[ d260 :
#case Md260
#procedure SimpleDotd260()
if (count(Md260,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q2
* path: (0, 8, 2)
#case 18
* path: (1, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p8.p - Q.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md260,dotrewrite-d260-0)
	#call replace(p2.p8,-i2/2-i5/2+i6/2+i9,i,i2,i5,i6,i9,Md260,dotrewrite-d260-1)
	#call replace(p3.p8,i10-i3/2+i4/2-i5/2,i,i10,i3,i4,i5,Md260,dotrewrite-d260-2)
	#call replace(p1.p8,-i1/2+i12-i13-i6/2+i7/2,i,i1,i12,i13,i6,i7,Md260,dotrewrite-d260-3)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = + p5.p + p6.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md260,dotrewrite-d260-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md260,dotrewrite-d260-1)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md260,dotrewrite-d260-2)
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md260,dotrewrite-d260-3)
	#call replace(p1.p5,i1/2+i13+i6/2-i7/2,i,i1,i13,i6,i7,Md260,dotrewrite-d260-4)
	#call replace(Q.p6,-`Q2'/2-i5/2+i8/2+i9,i,i5,i8,i9,Md260,dotrewrite-d260-5)
	#call replace(p3.p6,i11-i3/2+i4/2-i5/2,i,i11,i3,i4,i5,Md260,dotrewrite-d260-6)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p3.p - p4.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md260,dotrewrite-d260-0)
	#call replace(Q.p4,`Q2'/2-i10+i5/2-i8/2,i,i10,i5,i8,Md260,dotrewrite-d260-1)
	#call replace(p2.p4,-i11+i2/2+i5/2-i6/2,i,i11,i2,i5,i6,Md260,dotrewrite-d260-2)
	#call replace(p1.p4,i1/2+i13-i14+i6/2-i7/2,i,i1,i13,i14,i6,i7,Md260,dotrewrite-d260-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p6.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p - p6.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md260,dotrewrite-d260-0)
	#call replace(p2.p6,i2/2-i5/2+i6/2,i,i2,i5,i6,Md260,dotrewrite-d260-1)
	#call replace(Q.p6,-`Q2'/2-i5/2+i8/2+i9,i,i5,i8,i9,Md260,dotrewrite-d260-2)
	#call replace(p3.p6,i11-i3/2+i4/2-i5/2,i,i11,i3,i4,i5,Md260,dotrewrite-d260-3)
#endif
#break
#case Q6
* path: (0, 8, 1, 6)
#case 68
* path: (6, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = + Q.p + p6.p - p8.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md260,dotrewrite-d260-0)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md260,dotrewrite-d260-1)
	#call replace(Q.p6,-`Q2'/2-i5/2+i8/2+i9,i,i5,i8,i9,Md260,dotrewrite-d260-2)
	#call replace(p3.p6,i11-i3/2+i4/2-i5/2,i,i11,i3,i4,i5,Md260,dotrewrite-d260-3)
	#call replace(p3.p8,i10-i3/2+i4/2-i5/2,i,i10,i3,i4,i5,Md260,dotrewrite-d260-4)
	#call replace(p1.p8,-i1/2+i12-i13-i6/2+i7/2,i,i1,i12,i13,i6,i7,Md260,dotrewrite-d260-5)
	#call replace(p6.p8,-`Q2'/2-i2/2+i6/2+i8/2+i9,i,i2,i6,i8,i9,Md260,dotrewrite-d260-6)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p - p6.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p7.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(p1.p7,-i1/2+i6/2-i7/2,i,i1,i6,i7,Md260,dotrewrite-d260-0)
	#call replace(p2.p7,-i13-i2/2+i5/2-i6/2,i,i13,i2,i5,i6,Md260,dotrewrite-d260-1)
	#call replace(Q.p7,`Q2'/2-i12+i5/2-i8/2-i9,i,i12,i5,i8,i9,Md260,dotrewrite-d260-2)
	#call replace(p3.p7,-i11-i14+i3/2-i4/2+i5/2,i,i11,i14,i3,i4,i5,Md260,dotrewrite-d260-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q5
* path: (0, 8, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 8, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md260,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md260-4;
	if (count(Md260,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md260-3;
	if (count(Md260,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p5.p;
	.sort:momrewrite-Md260-2;
	if (count(Md260,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md260-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd260()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md260,dotrewrite-d260-0)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md260,dotrewrite-d260-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md260,dotrewrite-d260-2)
	#call replace(p1.p5,i1/2+i13+i6/2-i7/2,i,i1,i13,i6,i7,Md260,dotrewrite-d260-3)
#endif
#break
#endswitch
#break
*--#] d260 : 
*--#[ d250 :
#case Md250
#procedure SimpleDotd250()
if (count(Md250,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 8, 2)
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p8.p - p1.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md250,dotrewrite-d250-0)
	#call replace(p1.p8,i11-i13-i14,i,i11,i13,i14,Md250,dotrewrite-d250-1)
	#call replace(p3.p8,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md250,dotrewrite-d250-2)
	#call replace(p2.p8,-i1/2+i11+i12-i13-i14-i2/2+i7/2-i8/2,i,i1,i11,i12,i13,i14,i2,i7,i8,Md250,dotrewrite-d250-3)
	#call replace(Q.p2,-i1/2+i11+i12-i13-i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i12,i13,i14,i5,i6,i7,i8,Md250,dotrewrite-d250-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 16
* path: (1, 6)
#case 36
* path: (3, 6)
#case 56
* path: (5, 3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + p5.p - p6.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	if (count(Md250,1)) id p1.p5 = i13 + i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md250,dotrewrite-d250-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md250,dotrewrite-d250-2)
	#call replace(p1.p6,-i12+i13+i14,i,i12,i13,i14,Md250,dotrewrite-d250-3)
	#call replace(p5.p6,-i2/2+i5/2+i6/2,i,i2,i5,i6,Md250,dotrewrite-d250-4)
	#call replace(p3.p6,-i10+i3/2-i4/2+i5/2,i,i10,i3,i4,i5,Md250,dotrewrite-d250-5)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md250,dotrewrite-d250-6)
#endif
#break
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p6.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	#call replace(p1.p6,-i12+i13+i14,i,i12,i13,i14,Md250,dotrewrite-d250-0)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md250,dotrewrite-d250-1)
	#call replace(p3.p6,-i10+i3/2-i4/2+i5/2,i,i10,i3,i4,i5,Md250,dotrewrite-d250-2)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md250,dotrewrite-d250-3)
	#call replace(Q.p2,-i1/2+i11+i12-i13-i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i12,i13,i14,i5,i6,i7,i8,Md250,dotrewrite-d250-4)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + p1.p + p7.p - p8.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md250,dotrewrite-d250-0)
	#call replace(p1.p8,i11-i13-i14,i,i11,i13,i14,Md250,dotrewrite-d250-1)
	#call replace(p3.p8,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md250,dotrewrite-d250-2)
	#call replace(p1.p7,-i1+i11+i12-i13-i14,i,i1,i11,i12,i13,i14,Md250,dotrewrite-d250-3)
	#call replace(p7.p8,-i1/2+i12-i2/2+i7/2+i8/2,i,i1,i12,i2,i7,i8,Md250,dotrewrite-d250-4)
	#call replace(p3.p7,i10-i13-i3/2+i4/2-i5/2+i9,i,i10,i13,i3,i4,i5,i9,Md250,dotrewrite-d250-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md250,dotrewrite-d250-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 8, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 8, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p + p2.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p2.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	if (count(Md250,1)) id p1.p5 = i13 + i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md250,dotrewrite-d250-1)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md250,dotrewrite-d250-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md250,dotrewrite-d250-3)
	#call replace(Q.p2,-i1/2+i11+i12-i13-i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i12,i13,i14,i5,i6,i7,i8,Md250,dotrewrite-d250-4)
#endif
#break
#case Q6
* path: (0, 8, 1, 6)
#case 68
* path: (6, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	#call replace(p1.p6,-i12+i13+i14,i,i12,i13,i14,Md250,dotrewrite-d250-0)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md250,dotrewrite-d250-1)
	#call replace(p1.p8,i11-i13-i14,i,i11,i13,i14,Md250,dotrewrite-d250-2)
	#call replace(p3.p6,-i10+i3/2-i4/2+i5/2,i,i10,i3,i4,i5,Md250,dotrewrite-d250-3)
	#call replace(p3.p8,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md250,dotrewrite-d250-4)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md250,dotrewrite-d250-5)
	#call replace(p6.p8,`Q2'/2+i1/2-i11-i12+i13+i14+i2/2-i5/2-i7/2,i,i1,i11,i12,i13,i14,i2,i5,i7,Md250,dotrewrite-d250-6)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + p1.p + p7.p - p8.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	if (count(Md250,1)) id p1.p5 = i13 + i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md250,dotrewrite-d250-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md250,dotrewrite-d250-2)
	#call replace(p1.p7,-i1+i11+i12-i13-i14,i,i1,i11,i12,i13,i14,Md250,dotrewrite-d250-3)
	#call replace(p3.p7,i10-i13-i3/2+i4/2-i5/2+i9,i,i10,i13,i3,i4,i5,i9,Md250,dotrewrite-d250-4)
	#call replace(p5.p7,`Q2'/2-i13-i14+i2/2-i6/2-i8/2,i,i13,i14,i2,i6,i8,Md250,dotrewrite-d250-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md250,dotrewrite-d250-6)
#endif
#break
#default
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md250,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p + p2.p;
	.sort:momrewrite-Md250-4;
	if (count(Md250,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md250-3;
	if (count(Md250,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md250-2;
	if (count(Md250,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p - p2.p;
	.sort:momrewrite-Md250-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd250()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md250,dotrewrite-d250-0)
	#call replace(Q.p4,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md250,dotrewrite-d250-1)
	#call replace(p2.p4,-i10+i2/2+i5/2-i6/2,i,i10,i2,i5,i6,Md250,dotrewrite-d250-2)
	#call replace(Q.p2,-i1/2+i11+i12-i13-i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i12,i13,i14,i5,i6,i7,i8,Md250,dotrewrite-d250-3)
#endif
#break
#endswitch
#break
*--#] d250 : 
*--#[ d243 :
#case Md243
#procedure SimpleDotd243()
if (count(Md243,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p3.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md243,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md243-4;
	if (count(Md243,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md243-3;
	if (count(Md243,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p7.p;
	.sort:momrewrite-Md243-2;
	if (count(Md243,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p + p7.p - p4.p;
	.sort:momrewrite-Md243-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd243()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md243,dotrewrite-d243-0)
	#call replace(p1.p7,-i12+i13+i14,i,i12,i13,i14,Md243,dotrewrite-d243-1)
	#call replace(p3.p7,-i3/2+i6/2-i7/2,i,i3,i6,i7,Md243,dotrewrite-d243-2)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md243,dotrewrite-d243-3)
	#call replace(p4.p7,-i11+i4/2-i5/2+i6/2,i,i11,i4,i5,i6,Md243,dotrewrite-d243-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 8, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 8, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md243,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md243-4;
	if (count(Md243,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p6.p - p4.p;
	.sort:momrewrite-Md243-3;
	if (count(Md243,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md243-2;
	if (count(Md243,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md243-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd243()
	if (count(Md243,1)) id p1.p6 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md243,dotrewrite-d243-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md243,dotrewrite-d243-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md243,dotrewrite-d243-3)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md243,dotrewrite-d243-4)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q3
* path: (0, 8, 3)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md243,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p + p6.p;
	.sort:momrewrite-Md243-4;
	if (count(Md243,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md243-3;
	if (count(Md243,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md243-2;
	if (count(Md243,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md243-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd243()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md243,dotrewrite-d243-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md243,dotrewrite-d243-1)
	#call replace(p3.p8,-i3/2-i6/2+i7/2+i9,i,i3,i6,i7,i9,Md243,dotrewrite-d243-2)
	#call replace(p4.p8,i10-i4/2+i5/2-i6/2,i,i10,i4,i5,i6,Md243,dotrewrite-d243-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i13-i14-i2/2,i,i1,i13,i14,i2,Md243,dotrewrite-d243-4)
#endif
#break
#default
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md243,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md243-4;
	if (count(Md243,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md243-3;
	if (count(Md243,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md243-2;
	if (count(Md243,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p - p3.p;
	.sort:momrewrite-Md243-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd243()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md243,dotrewrite-d243-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md243,dotrewrite-d243-1)
	#call replace(Q.p5,`Q2'/2-i10+i6/2-i8/2,i,i10,i6,i8,Md243,dotrewrite-d243-2)
	#call replace(p3.p5,-i11+i3/2+i6/2-i7/2,i,i11,i3,i6,i7,Md243,dotrewrite-d243-3)
#endif
#break
#endswitch
#break
*--#] d243 : 
*--#[ d142 :
#case Md142
#procedure SimpleDotd142()
if (count(Md142,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p6.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	if (count(Md142,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md142,dotrewrite-d142-1)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md142,dotrewrite-d142-2)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md142,dotrewrite-d142-3)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md142,dotrewrite-d142-4)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p7.p + p2.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md142,dotrewrite-d142-0)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md142,dotrewrite-d142-1)
	#call replace(Q.p4,`Q2'/2+i5/2-i7/2-i8,i,i5,i7,i8,Md142,dotrewrite-d142-2)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md142,dotrewrite-d142-3)
	#call replace(p2.p4,i2/2-i3/2+i4/2-i6/2+i8-i9,i,i2,i3,i4,i6,i8,i9,Md142,dotrewrite-d142-4)
#endif
#break
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p7.p + p2.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p2.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md142,dotrewrite-d142-0)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md142,dotrewrite-d142-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md142,dotrewrite-d142-2)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md142,dotrewrite-d142-3)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md142,dotrewrite-d142-4)
#endif
#break
#case Q2
* path: (0, 7, 2)
#case 27
* path: (2, 7)
#case 37
* path: (3, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p7.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md142,dotrewrite-d142-0)
	#call replace(p2.p7,i1/2-i2/2-i7/2,i,i1,i2,i7,Md142,dotrewrite-d142-1)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md142,dotrewrite-d142-2)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md142,dotrewrite-d142-3)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md142,dotrewrite-d142-4)
#endif
#break
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 16
* path: (1, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 57
* path: (5, 7)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p - p6.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	if (count(Md142,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md142,dotrewrite-d142-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md142,dotrewrite-d142-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md142,dotrewrite-d142-3)
	#call replace(p5.p6,-i2/2+i5/2+i6/2,i,i2,i5,i6,Md142,dotrewrite-d142-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q7
* path: (0, 7)
#case Q1
* path: (0, 7, 1)
#case Q6
* path: (0, 7, 1, 6)
#case 17
* path: (1, 7)
#case 67
* path: (6, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p7.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md142,dotrewrite-d142-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md142,dotrewrite-d142-1)
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Md142,dotrewrite-d142-2)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md142,dotrewrite-d142-3)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + Q.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md142,dotrewrite-d142-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md142,dotrewrite-d142-1)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md142,dotrewrite-d142-2)
	#call replace(p2.p3,i3/2-i4/2+i5/2-i8+i9,i,i3,i4,i5,i8,i9,Md142,dotrewrite-d142-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 7, 5)
#case 11
* path: (1,)
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md142,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p7.p;
	.sort:momrewrite-Md142-4;
	if (count(Md142,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md142-3;
	if (count(Md142,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md142-2;
	if (count(Md142,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md142-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd142()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md142,dotrewrite-d142-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md142,dotrewrite-d142-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md142,dotrewrite-d142-2)
	#call replace(p1.p5,`Q2'/2+i2/2-i6/2-i7/2,i,i2,i6,i7,Md142,dotrewrite-d142-3)
#endif
#break
#endswitch
#break
*--#] d142 : 
*--#[ d259 :
#case Md259
#procedure SimpleDotd259()
if (count(Md259,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case Q1
* path: (0, 8, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 28
* path: (2, 8)
#case 33
* path: (3,)
#case 38
* path: (3, 2, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md259,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md259-4;
	if (count(Md259,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md259-3;
	if (count(Md259,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md259-2;
	if (count(Md259,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md259-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd259()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md259,dotrewrite-d259-0)
	#call replace(p1.p8,i11-i13-i14,i,i11,i13,i14,Md259,dotrewrite-d259-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md259,dotrewrite-d259-2)
	#call replace(p3.p8,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md259,dotrewrite-d259-3)
	#call replace(Q.p2,-i1/2+i12+i13+i14-i5/2+i6/2-i7/2+i8/2,i,i1,i12,i13,i14,i5,i6,i7,i8,Md259,dotrewrite-d259-4)
#endif
#break
#case 16
* path: (1, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md259,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = - p7.p + p8.p;
	.sort:momrewrite-Md259-4;
	if (count(Md259,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md259-3;
	if (count(Md259,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md259-2;
	if (count(Md259,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md259-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd259()
	if (count(Md259,1)) id p1.p5 = i13 + i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md259,dotrewrite-d259-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md259,dotrewrite-d259-2)
	#call replace(p1.p6,-i1+i12+i13+i14,i,i1,i12,i13,i14,Md259,dotrewrite-d259-3)
	#call replace(p3.p6,i10-i13+i3/2-i4/2+i5/2,i,i10,i13,i3,i4,i5,Md259,dotrewrite-d259-4)
	#call replace(p5.p6,-i1/2+i12-i2/2+i5/2+i6/2,i,i1,i12,i2,i5,i6,Md259,dotrewrite-d259-5)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i12+i13+i14+i6/2-i7/2,i,i1,i11,i12,i13,i14,i6,i7,Md259,dotrewrite-d259-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q8
* path: (0, 7, 8)
#case Q7
* path: (0, 8, 7)
#case 17
* path: (1, 7)
#case 37
* path: (3, 1, 7)
#case 57
* path: (5, 8, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md259,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md259-4;
	if (count(Md259,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + p8.p - p7.p;
	.sort:momrewrite-Md259-3;
	if (count(Md259,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md259-2;
	if (count(Md259,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md259-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd259()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md259,dotrewrite-d259-0)
	#call replace(p1.p8,i11-i13-i14,i,i11,i13,i14,Md259,dotrewrite-d259-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md259,dotrewrite-d259-2)
	#call replace(p1.p7,i11-i12-i13-i14,i,i11,i12,i13,i14,Md259,dotrewrite-d259-3)
	#call replace(p3.p8,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md259,dotrewrite-d259-4)
	#call replace(p3.p7,-i10-i3/2+i4/2-i5/2+i9,i,i10,i3,i4,i5,i9,Md259,dotrewrite-d259-5)
	#call replace(Q.p7,`Q2'/2+i1/2-i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md259,dotrewrite-d259-6)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 15
* path: (1, 3, 5)
#case 25
* path: (2, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md259,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md259-4;
	if (count(Md259,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p5.p - p3.p;
	.sort:momrewrite-Md259-3;
	if (count(Md259,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md259-2;
	if (count(Md259,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p5.p - p1.p;
	.sort:momrewrite-Md259-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd259()
	if (count(Md259,1)) id p1.p5 = i13 + i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md259,dotrewrite-d259-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md259,dotrewrite-d259-2)
	#call replace(p2.p5,-i1/2+i12+i13+i14-i2/2-i5/2+i6/2,i,i1,i12,i13,i14,i2,i5,i6,Md259,dotrewrite-d259-3)
	#call replace(Q.p2,-i1/2+i12+i13+i14-i5/2+i6/2-i7/2+i8/2,i,i1,i12,i13,i14,i5,i6,i7,i8,Md259,dotrewrite-d259-4)
#endif
#break
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md259,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p + p5.p;
	.sort:momrewrite-Md259-4;
	if (count(Md259,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md259-3;
	if (count(Md259,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md259-2;
	if (count(Md259,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md259-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd259()
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md259,dotrewrite-d259-0)
	#call replace(p1.p7,i11-i12-i13-i14,i,i11,i12,i13,i14,Md259,dotrewrite-d259-1)
	#call replace(p3.p7,-i10-i3/2+i4/2-i5/2+i9,i,i10,i3,i4,i5,i9,Md259,dotrewrite-d259-2)
	#call replace(Q.p7,`Q2'/2+i1/2-i12-i13-i14-i6/2+i7/2,i,i1,i12,i13,i14,i6,i7,Md259,dotrewrite-d259-3)
	#call replace(Q.p2,-i1/2+i12+i13+i14-i5/2+i6/2-i7/2+i8/2,i,i1,i12,i13,i14,i5,i6,i7,i8,Md259,dotrewrite-d259-4)
#endif
#break
#default
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md259,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md259-4;
	if (count(Md259,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md259-3;
	if (count(Md259,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md259-2;
	if (count(Md259,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md259-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd259()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md259,dotrewrite-d259-0)
	#call replace(Q.p4,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md259,dotrewrite-d259-1)
	#call replace(Q.p2,-i1/2+i12+i13+i14-i5/2+i6/2-i7/2+i8/2,i,i1,i12,i13,i14,i5,i6,i7,i8,Md259,dotrewrite-d259-2)
	#call replace(p2.p4,-i1/2-i10+i12+i13+i14-i2/2-i5/2+i6/2,i,i1,i10,i12,i13,i14,i2,i5,i6,Md259,dotrewrite-d259-3)
#endif
#break
#endswitch
#break
*--#] d259 : 
*--#[ d130 :
#case Md130
#procedure SimpleDotd130()
if (count(Md130,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	if (count(Md130,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md130,dotrewrite-d130-1)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md130,dotrewrite-d130-2)
	#call replace(Q.p2,i1/2-i5/2-i6/2+i7/2,i,i1,i5,i6,i7,Md130,dotrewrite-d130-3)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md130,dotrewrite-d130-4)
#endif
#break
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p2.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p2.p + p5.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md130,dotrewrite-d130-0)
	#call replace(p2.p5,i1/2-i2/2-i5/2,i,i1,i2,i5,Md130,dotrewrite-d130-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md130,dotrewrite-d130-2)
	#call replace(Q.p2,i1/2-i5/2-i6/2+i7/2,i,i1,i5,i6,i7,Md130,dotrewrite-d130-3)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md130,dotrewrite-d130-4)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p + p7.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md130,dotrewrite-d130-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md130,dotrewrite-d130-1)
	#call replace(Q.p4,`Q2'/2+i5/2-i7/2-i8,i,i5,i7,i8,Md130,dotrewrite-d130-2)
	#call replace(p1.p4,i1/2-i2/2+i5/2-i9,i,i1,i2,i5,i9,Md130,dotrewrite-d130-3)
#endif
#break
#case Q2
* path: (0, 7, 2)
#case 27
* path: (2, 7)
#case 37
* path: (3, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p2.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md130,dotrewrite-d130-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md130,dotrewrite-d130-1)
	#call replace(Q.p2,i1/2-i5/2-i6/2+i7/2,i,i1,i5,i6,i7,Md130,dotrewrite-d130-2)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md130,dotrewrite-d130-3)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md130,dotrewrite-d130-4)
#endif
#break
#case Q6
* path: (0, 6)
#case 56
* path: (5, 7, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p + p7.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	if (count(Md130,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md130,dotrewrite-d130-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md130,dotrewrite-d130-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md130,dotrewrite-d130-3)
	#call replace(p5.p6,`Q2'/2-i1/2+i2/2-i7/2,i,i1,i2,i7,Md130,dotrewrite-d130-4)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p6.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p6.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	if (count(Md130,1)) id p3.p6 = i8 - i9;
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md130,dotrewrite-d130-1)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md130,dotrewrite-d130-2)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md130,dotrewrite-d130-3)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md130,dotrewrite-d130-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q1
* path: (0, 7, 2, 1)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p2.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p2.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md130,dotrewrite-d130-0)
	#call replace(p1.p2,i1/2+i2/2-i5/2,i,i1,i2,i5,Md130,dotrewrite-d130-1)
	#call replace(Q.p2,i1/2-i5/2-i6/2+i7/2,i,i1,i5,i6,i7,Md130,dotrewrite-d130-2)
	#call replace(p2.p3,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md130,dotrewrite-d130-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md130,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p5.p;
	.sort:momrewrite-Md130-4;
	if (count(Md130,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md130-3;
	if (count(Md130,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md130-2;
	if (count(Md130,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md130-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd130()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md130,dotrewrite-d130-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md130,dotrewrite-d130-1)
	#call replace(p1.p5,i1/2-i2/2+i5/2,i,i1,i2,i5,Md130,dotrewrite-d130-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md130,dotrewrite-d130-3)
#endif
#break
#endswitch
#break
*--#] d130 : 
*--#[ d273 :
#case Md273
#procedure SimpleDotd273()
if (count(Md273,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 2, 8)
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case Q1
* path: (0, 8, 2, 1)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md273,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md273-4;
	if (count(Md273,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md273-3;
	if (count(Md273,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md273-2;
	if (count(Md273,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md273-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd273()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md273,dotrewrite-d273-0)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md273,dotrewrite-d273-1)
	#call replace(p1.p8,-i1/2+i12-i5/2+i6/2,i,i1,i12,i5,i6,Md273,dotrewrite-d273-2)
	#call replace(p3.p8,i10-i3/2+i4/2-i5/2,i,i10,i3,i4,i5,Md273,dotrewrite-d273-3)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md273,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md273-4;
	if (count(Md273,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md273-3;
	if (count(Md273,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md273-2;
	if (count(Md273,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p - p1.p;
	.sort:momrewrite-Md273-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd273()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md273,dotrewrite-d273-0)
	#call replace(Q.p4,`Q2'/2-i10+i5/2-i8/2,i,i10,i5,i8,Md273,dotrewrite-d273-1)
	#call replace(p1.p4,i1/2-i14+i5/2-i6/2,i,i1,i14,i5,i6,Md273,dotrewrite-d273-2)
	#call replace(p2.p4,-i11-i2/2+i7/2-i8/2+i9,i,i11,i2,i7,i8,i9,Md273,dotrewrite-d273-3)
#endif
#break
#case 27
* path: (2, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md273,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + p3.p + p4.p;
	.sort:momrewrite-Md273-4;
	if (count(Md273,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md273-3;
	if (count(Md273,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md273-2;
	if (count(Md273,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md273-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd273()
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md273,dotrewrite-d273-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i8/2-i9,i,i5,i8,i9,Md273,dotrewrite-d273-1)
	#call replace(p1.p7,-i1/2+i12-i13-i5/2+i6/2,i,i1,i12,i13,i5,i6,Md273,dotrewrite-d273-2)
	#call replace(p3.p7,i10-i11-i3/2+i4/2-i5/2,i,i10,i11,i3,i4,i5,Md273,dotrewrite-d273-3)
#endif
#break
#case 16
* path: (1, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md273,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md273-4;
	if (count(Md273,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md273-3;
	if (count(Md273,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p;
	.sort:momrewrite-Md273-2;
	if (count(Md273,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p6.p - p3.p;
	.sort:momrewrite-Md273-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd273()
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md273,dotrewrite-d273-0)
	#call replace(Q.p6,`Q2'/2-i12+i5/2-i8/2,i,i12,i5,i8,Md273,dotrewrite-d273-1)
	#call replace(p3.p6,-i14+i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md273,dotrewrite-d273-2)
	#call replace(p2.p6,-i13-i2/2+i7/2-i8/2+i9,i,i13,i2,i7,i8,i9,Md273,dotrewrite-d273-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 8, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md273,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md273-4;
	if (count(Md273,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md273-3;
	if (count(Md273,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p1.p;
	.sort:momrewrite-Md273-2;
	if (count(Md273,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md273-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd273()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md273,dotrewrite-d273-0)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md273,dotrewrite-d273-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md273,dotrewrite-d273-2)
	#call replace(p2.p5,-i2/2+i7/2-i8/2+i9,i,i2,i7,i8,i9,Md273,dotrewrite-d273-3)
#endif
#break
#endswitch
#break
*--#] d273 : 
*--#[ d334 :
#case Md334
#procedure SimpleDotd334()
if (count(Md334,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p8.p - p7.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md334,dotrewrite-d334-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md334,dotrewrite-d334-1)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md334,dotrewrite-d334-3)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md334,dotrewrite-d334-4)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md334,dotrewrite-d334-5)
	#call replace(p2.p8,-`Q2'/2-i1/2+i10+i11+i3/2-i6/2+i7/2,i,i1,i10,i11,i3,i6,i7,Md334,dotrewrite-d334-6)
#endif
#break
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md334,dotrewrite-d334-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md334,dotrewrite-d334-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md334,dotrewrite-d334-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md334,dotrewrite-d334-3)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md334,dotrewrite-d334-4)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md334,dotrewrite-d334-5)
	#call replace(p1.p9,`Q2'/2-i11+i2/2-i3/2-i7/2+i8/2,i,i11,i2,i3,i7,i8,Md334,dotrewrite-d334-6)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p1.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md334,dotrewrite-d334-0)
	#call replace(p1.p5,-i1/2-i13-i7/2+i8/2,i,i1,i13,i7,i8,Md334,dotrewrite-d334-1)
	#call replace(p2.p5,-i14+i2/2-i6/2+i7/2,i,i14,i2,i6,i7,Md334,dotrewrite-d334-2)
	#call replace(Q.p5,-`Q2'/2+i11-i12-i6/2+i9/2,i,i11,i12,i6,i9,Md334,dotrewrite-d334-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md334,dotrewrite-d334-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case Q4
* path: (0, 6, 4)
#case 26
* path: (2, 6)
#case 36
* path: (3, 2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md334,dotrewrite-d334-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md334,dotrewrite-d334-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md334,dotrewrite-d334-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md334,dotrewrite-d334-3)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md334,dotrewrite-d334-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i10-i2/2-i3/2,i,i1,i10,i2,i3,Md334,dotrewrite-d334-5)
	#call replace(p3.p6,`Q2'-i10-i11-i3/2+i8/2-i9/2,i,i10,i11,i3,i8,i9,Md334,dotrewrite-d334-6)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-0)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md334,dotrewrite-d334-1)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md334,dotrewrite-d334-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md334,dotrewrite-d334-3)
	#call replace(p2.p8,-`Q2'/2-i1/2+i10+i11+i3/2-i6/2+i7/2,i,i1,i10,i11,i3,i6,i7,Md334,dotrewrite-d334-4)
#endif
#break
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md334,dotrewrite-d334-0)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md334,dotrewrite-d334-1)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md334,dotrewrite-d334-2)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md334,dotrewrite-d334-3)
	#call replace(p1.p6,-`Q2'/2+i10+i11-i2/2+i3/2+i7/2-i8/2,i,i10,i11,i2,i3,i7,i8,Md334,dotrewrite-d334-4)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p8.p - p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p + p7.p - p9.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md334,dotrewrite-d334-0)
	#call replace(p7.p8,-i1/2+i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md334,dotrewrite-d334-2)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md334,dotrewrite-d334-3)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md334,dotrewrite-d334-4)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md334,dotrewrite-d334-5)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md334,dotrewrite-d334-6)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md334,dotrewrite-d334-7)
	#call replace(p7.p9,-`Q2'/2+i11-i2/2+i7/2+i9/2,i,i11,i2,i7,i9,Md334,dotrewrite-d334-8)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q3
* path: (0, 3)
#case 13
* path: (1, 3)
#case 18
* path: (1, 8)
#case 33
* path: (3,)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md334,dotrewrite-d334-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md334,dotrewrite-d334-1)
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-2)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md334,dotrewrite-d334-3)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md334,dotrewrite-d334-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md334,dotrewrite-d334-5)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md334,dotrewrite-d334-6)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md334,dotrewrite-d334-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md334,dotrewrite-d334-1)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md334,dotrewrite-d334-3)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md334,dotrewrite-d334-4)
	#call replace(p1.p3,`Q2'/2-i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md334,dotrewrite-d334-5)
	#call replace(p3.p7,-`Q2'/2+i1/2+i11-i2/2-i8/2+i9/2,i,i1,i11,i2,i8,i9,Md334,dotrewrite-d334-6)
#endif
#break
#case Q7
* path: (0, 6, 4, 7)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md334,dotrewrite-d334-0)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md334,dotrewrite-d334-2)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md334,dotrewrite-d334-3)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md334,dotrewrite-d334-4)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md334,dotrewrite-d334-5)
	#call replace(p1.p6,-`Q2'/2+i10+i11-i2/2+i3/2+i7/2-i8/2,i,i10,i11,i2,i3,i7,i8,Md334,dotrewrite-d334-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p1.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(p1.p8,i1/2-i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md334,dotrewrite-d334-1)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md334,dotrewrite-d334-2)
	#call replace(p4.p8,i13+i4/2-i5/2+i7/2,i,i13,i4,i5,i7,Md334,dotrewrite-d334-3)
	#call replace(Q.p8,-`Q2'/2+i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md334,dotrewrite-d334-4)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md334,dotrewrite-d334-5)
	#call replace(p1.p9,`Q2'/2-i11+i2/2-i3/2-i7/2+i8/2,i,i11,i2,i3,i7,i8,Md334,dotrewrite-d334-6)
#endif
#break
#case Q9
* path: (0, 3, 9)
#case Q9
* path: (0, 9)
#case Q3
* path: (0, 9, 3)
#case 23
* path: (2, 3)
#case 29
* path: (2, 3, 9)
#case 34
* path: (3, 2, 4)
#case 39
* path: (3, 9)
#case 49
* path: (4, 6, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(Q.p3,`Q2'-i10-i11,i,i10,i11,Md334,dotrewrite-d334-0)
	#call replace(p3.p4,i12-i13-i14,i,i12,i13,i14,Md334,dotrewrite-d334-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md334,dotrewrite-d334-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md334,dotrewrite-d334-3)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md334,dotrewrite-d334-4)
	#call replace(p2.p3,`Q2'/2+i1/2-i10-i2/2-i3/2,i,i1,i10,i2,i3,Md334,dotrewrite-d334-5)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md334,dotrewrite-d334-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md334,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md334-5;
	if (count(Md334,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md334-4;
	if (count(Md334,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md334-3;
	if (count(Md334,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p;
	.sort:momrewrite-Md334-2;
	if (count(Md334,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md334-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd334()
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md334,dotrewrite-d334-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md334,dotrewrite-d334-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md334,dotrewrite-d334-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md334,dotrewrite-d334-3)
	#call replace(p1.p2,-`Q2'/2-i1/2+i10+i11-i2/2+i3/2,i,i1,i10,i11,i2,i3,Md334,dotrewrite-d334-4)
#endif
#break
#endswitch
#break
*--#] d334 : 
*--#[ d332 :
#case Md332
#procedure SimpleDotd332()
if (count(Md332,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 8, 9)
#case Q8
* path: (0, 9, 8)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p9.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md332,dotrewrite-d332-0)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md332,dotrewrite-d332-1)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md332,dotrewrite-d332-2)
	#call replace(Q.p8,`Q2'/2-i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p2.p8,-i1/2+i11+i3/2-i6/2+i7/2,i,i1,i11,i3,i6,i7,Md332,dotrewrite-d332-4)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md332,dotrewrite-d332-6)
#endif
#break
#case Q7
* path: (0, 6, 4, 7)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p - p7.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p3.p + p6.p - p7.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md332,dotrewrite-d332-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-3)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md332,dotrewrite-d332-4)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(Q.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md332,dotrewrite-d332-6)
	#call replace(p3.p6,i10-i11-i3/2+i8/2-i9/2,i,i10,i11,i3,i8,i9,Md332,dotrewrite-d332-7)
	#call replace(p3.p7,-i1/2+i10-i11+i2/2+i8/2-i9/2,i,i1,i10,i11,i2,i8,i9,Md332,dotrewrite-d332-8)
#endif
#break
#case 48
* path: (4, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md332,dotrewrite-d332-0)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-1)
	#call replace(Q.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md332,dotrewrite-d332-2)
	#call replace(Q.p8,`Q2'/2-i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p2.p8,-i1/2+i11+i3/2-i6/2+i7/2,i,i1,i11,i3,i6,i7,Md332,dotrewrite-d332-4)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md332,dotrewrite-d332-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md332,dotrewrite-d332-4)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(p1.p9,i11-i2/2+i3/2-i6/2+i7/2-i8/2+i9/2,i,i11,i2,i3,i6,i7,i8,i9,Md332,dotrewrite-d332-6)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-1)
	#call replace(p2.p5,-i14+i2/2-i6/2+i7/2,i,i14,i2,i6,i7,Md332,dotrewrite-d332-2)
	#call replace(Q.p5,-`Q2'/2+i11-i12-i6/2+i9/2,i,i11,i12,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p1.p5,i1/2-i10+i11-i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i6,i7,i8,i9,Md332,dotrewrite-d332-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case Q4
* path: (0, 6, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 2, 4)
#case 36
* path: (3, 2, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md332,dotrewrite-d332-4)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(p3.p6,i10-i11-i3/2+i8/2-i9/2,i,i10,i11,i3,i8,i9,Md332,dotrewrite-d332-6)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-0)
	#call replace(Q.p8,`Q2'/2-i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md332,dotrewrite-d332-1)
	#call replace(p2.p8,-i1/2+i11+i3/2-i6/2+i7/2,i,i1,i11,i3,i6,i7,Md332,dotrewrite-d332-2)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md332,dotrewrite-d332-3)
	#call replace(p1.p8,-i1/2+i11-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i6,i7,i8,i9,Md332,dotrewrite-d332-4)
#endif
#break
#case Q6
* path: (0, 1, 2, 6)
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md332,dotrewrite-d332-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md332,dotrewrite-d332-2)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md332,dotrewrite-d332-3)
	#call replace(p1.p6,i10-i11+i2/2-i3/2+i6/2-i7/2+i8/2-i9/2,i,i10,i11,i2,i3,i6,i7,i8,i9,Md332,dotrewrite-d332-4)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p9.p - p8.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md332,dotrewrite-d332-1)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md332,dotrewrite-d332-2)
	#call replace(Q.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(Q.p8,`Q2'/2-i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md332,dotrewrite-d332-4)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md332,dotrewrite-d332-6)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md332,dotrewrite-d332-7)
	#call replace(p7.p9,`Q2'/2-i11+i2/2-i7/2-i9/2,i,i11,i2,i7,i9,Md332,dotrewrite-d332-8)
#endif
#break
#case Q8
* path: (0, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md332,dotrewrite-d332-3)
	#call replace(Q.p8,`Q2'/2-i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md332,dotrewrite-d332-4)
	#call replace(p2.p8,-i1/2+i11+i3/2-i6/2+i7/2,i,i1,i11,i3,i6,i7,Md332,dotrewrite-d332-5)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md332,dotrewrite-d332-6)
#endif
#break
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md332,dotrewrite-d332-3)
	#call replace(Q.p8,`Q2'/2-i10+i11-i6/2+i9/2,i,i10,i11,i6,i9,Md332,dotrewrite-d332-4)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md332,dotrewrite-d332-5)
	#call replace(p1.p8,-i1/2+i11-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i6,i7,i8,i9,Md332,dotrewrite-d332-6)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-3)
	#call replace(Q.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md332,dotrewrite-d332-4)
	#call replace(p3.p7,-i1/2+i10-i11+i2/2+i8/2-i9/2,i,i1,i10,i11,i2,i8,i9,Md332,dotrewrite-d332-5)
	#call replace(p1.p7,-i1/2+i10-i11+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md332,dotrewrite-d332-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md332,dotrewrite-d332-3)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-4)
	#call replace(Q.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md332,dotrewrite-d332-5)
	#call replace(p3.p7,-i1/2+i10-i11+i2/2+i8/2-i9/2,i,i1,i10,i11,i2,i8,i9,Md332,dotrewrite-d332-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q3
* path: (0, 9, 3)
#case 29
* path: (2, 3, 9)
#case 39
* path: (3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p9.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	if (count(Md332,1)) id Q.p3 = i10 - i11;
	if (count(Md332,1)) id p3.p4 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md332,dotrewrite-d332-4)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md332,dotrewrite-d332-5)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md332,dotrewrite-d332-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md332,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md332-5;
	if (count(Md332,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md332-4;
	if (count(Md332,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md332-3;
	if (count(Md332,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md332-2;
	if (count(Md332,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md332-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd332()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md332,dotrewrite-d332-0)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md332,dotrewrite-d332-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md332,dotrewrite-d332-2)
	#call replace(Q.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md332,dotrewrite-d332-3)
	#call replace(p1.p7,-i1/2+i10-i11+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md332,dotrewrite-d332-4)
#endif
#break
#endswitch
#break
*--#] d332 : 
*--#[ d310 :
#case Md310
#procedure SimpleDotd310()
if (count(Md310,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 9, 8)
#case 29
* path: (2, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + p9.p - p8.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	if (count(Md310,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md310,dotrewrite-d310-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md310,dotrewrite-d310-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md310,dotrewrite-d310-3)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md310,dotrewrite-d310-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md310,dotrewrite-d310-5)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md310,dotrewrite-d310-6)
	#call replace(p2.p9,i10-i11+i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md310,dotrewrite-d310-7)
	#call replace(p4.p9,i12-i13+i14+i4/2-i5/2+i7/2,i,i12,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-8)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q1
* path: (0, 6, 1)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md310,dotrewrite-d310-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md310,dotrewrite-d310-1)
	#call replace(p3.p6,i10-i3/2+i8/2-i9/2,i,i10,i3,i8,i9,Md310,dotrewrite-d310-2)
	#call replace(p4.p6,i13-i14-i4/2+i5/2-i7/2,i,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-3)
	#call replace(p1.p6,i1/2+i10-i11+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md310,dotrewrite-d310-4)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md310,dotrewrite-d310-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md310,dotrewrite-d310-1)
	#call replace(Q.p5,i1/2-i10-i12-i2/2-i6/2+i9/2,i,i1,i10,i12,i2,i6,i9,Md310,dotrewrite-d310-2)
	#call replace(p3.p5,-i10+i11-i14-i3/2-i8/2+i9/2,i,i10,i11,i14,i3,i8,i9,Md310,dotrewrite-d310-3)
	#call replace(p1.p5,i1/2-i10-i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i13,i6,i7,i8,i9,Md310,dotrewrite-d310-4)
#endif
#break
#case Q7
* path: (0, 6, 4, 7)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md310,dotrewrite-d310-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md310,dotrewrite-d310-1)
	#call replace(p3.p6,i10-i3/2+i8/2-i9/2,i,i10,i3,i8,i9,Md310,dotrewrite-d310-2)
	#call replace(p4.p6,i13-i14-i4/2+i5/2-i7/2,i,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-3)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md310,dotrewrite-d310-4)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md310,dotrewrite-d310-5)
	#call replace(p6.p7,i1/2-i11+i3/2-i6/2-i7/2,i,i1,i11,i3,i6,i7,Md310,dotrewrite-d310-6)
#endif
#break
#case Q9
* path: (0, 1, 3, 9)
#case 19
* path: (1, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md310,dotrewrite-d310-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md310,dotrewrite-d310-1)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md310,dotrewrite-d310-2)
	#call replace(p4.p9,i12-i13+i14+i4/2-i5/2+i7/2,i,i12,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-3)
	#call replace(p1.p9,`Q2'/2-i10+i11-i2/2-i6/2+i7/2-i8/2+i9/2,i,i10,i11,i2,i6,i7,i8,i9,Md310,dotrewrite-d310-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 1, 2)
#case Q3
* path: (0, 6, 3)
#case Q4
* path: (0, 6, 4)
#case 26
* path: (2, 1, 6)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p9.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	if (count(Md310,1)) id p2.p3 = i10 - i11;
	if (count(Md310,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md310,dotrewrite-d310-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md310,dotrewrite-d310-3)
	#call replace(p3.p6,i10-i3/2+i8/2-i9/2,i,i10,i3,i8,i9,Md310,dotrewrite-d310-4)
	#call replace(p4.p6,i13-i14-i4/2+i5/2-i7/2,i,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-5)
	#call replace(p2.p6,`Q2'/2-i1/2-i10+i11+i7/2-i8/2,i,i1,i10,i11,i7,i8,Md310,dotrewrite-d310-6)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + p9.p - p8.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md310,dotrewrite-d310-0)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md310,dotrewrite-d310-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md310,dotrewrite-d310-2)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md310,dotrewrite-d310-3)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md310,dotrewrite-d310-4)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md310,dotrewrite-d310-5)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md310,dotrewrite-d310-6)
	#call replace(p4.p9,i12-i13+i14+i4/2-i5/2+i7/2,i,i12,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-7)
	#call replace(p7.p9,-i10+i11-i2/2-i3/2+i7/2+i9/2,i,i10,i11,i2,i3,i7,i9,Md310,dotrewrite-d310-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 28
* path: (2, 8)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 8)
#case 44
* path: (4,)
#case 48
* path: (4, 3, 8)
#case 68
* path: (6, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	if (count(Md310,1)) id p2.p3 = i10 - i11;
	if (count(Md310,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md310,dotrewrite-d310-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md310,dotrewrite-d310-3)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md310,dotrewrite-d310-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md310,dotrewrite-d310-5)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md310,dotrewrite-d310-6)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	if (count(Md310,1)) id p2.p3 = i10 - i11;
	if (count(Md310,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md310,dotrewrite-d310-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md310,dotrewrite-d310-3)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md310,dotrewrite-d310-4)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md310,dotrewrite-d310-5)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md310,dotrewrite-d310-6)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md310,dotrewrite-d310-0)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md310,dotrewrite-d310-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md310,dotrewrite-d310-2)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md310,dotrewrite-d310-3)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md310,dotrewrite-d310-4)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md310,dotrewrite-d310-5)
	#call replace(p4.p8,i12-i13+i4/2-i5/2+i7/2,i,i12,i13,i4,i5,i7,Md310,dotrewrite-d310-6)
#endif
#break
#case Q9
* path: (0, 9)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p3.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	if (count(Md310,1)) id p2.p3 = i10 - i11;
	if (count(Md310,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md310,dotrewrite-d310-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md310,dotrewrite-d310-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md310,dotrewrite-d310-4)
	#call replace(p2.p9,i10-i11+i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md310,dotrewrite-d310-5)
	#call replace(p4.p9,i12-i13+i14+i4/2-i5/2+i7/2,i,i12,i13,i14,i4,i5,i7,Md310,dotrewrite-d310-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md310,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md310-5;
	if (count(Md310,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md310-4;
	if (count(Md310,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md310-3;
	if (count(Md310,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md310-2;
	if (count(Md310,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md310-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd310()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md310,dotrewrite-d310-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md310,dotrewrite-d310-1)
	#call replace(Q.p7,i1/2-i10-i2/2-i6/2+i9/2,i,i1,i10,i2,i6,i9,Md310,dotrewrite-d310-2)
	#call replace(p3.p7,-i10+i11-i3/2-i8/2+i9/2,i,i10,i11,i3,i8,i9,Md310,dotrewrite-d310-3)
	#call replace(p1.p7,i1/2-i10-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i6,i7,i8,i9,Md310,dotrewrite-d310-4)
#endif
#break
#endswitch
#break
*--#] d310 : 
*--#[ d349 :
#case Md349
#procedure SimpleDotd349()
if (count(Md349,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p7.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md349,dotrewrite-d349-1)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md349,dotrewrite-d349-2)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md349,dotrewrite-d349-3)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md349,dotrewrite-d349-4)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md349,dotrewrite-d349-5)
	#call replace(p4.p8,-i12+i13-i4/2+i5/2-i7/2,i,i12,i13,i4,i5,i7,Md349,dotrewrite-d349-6)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p6.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md349,dotrewrite-d349-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md349,dotrewrite-d349-1)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-2)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md349,dotrewrite-d349-3)
	#call replace(p1.p6,`Q2'/2-i10+i11-i2/2+i6/2-i7/2+i8/2-i9/2,i,i10,i11,i2,i6,i7,i8,i9,Md349,dotrewrite-d349-4)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p3.p + p8.p + p9.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md349,dotrewrite-d349-0)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md349,dotrewrite-d349-1)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md349,dotrewrite-d349-2)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md349,dotrewrite-d349-3)
	#call replace(p4.p8,-i12+i13-i4/2+i5/2-i7/2,i,i12,i13,i4,i5,i7,Md349,dotrewrite-d349-4)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md349,dotrewrite-d349-5)
	#call replace(p8.p9,i1/2-i11+i3/2-i8/2-i9/2,i,i1,i11,i3,i8,i9,Md349,dotrewrite-d349-6)
#endif
#break
#case 68
* path: (6, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p9.p + p3.p + p8.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p6.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md349,dotrewrite-d349-0)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-1)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md349,dotrewrite-d349-2)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md349,dotrewrite-d349-3)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md349,dotrewrite-d349-4)
	#call replace(p4.p8,-i12+i13-i4/2+i5/2-i7/2,i,i12,i13,i4,i5,i7,Md349,dotrewrite-d349-5)
	#call replace(p6.p8,-i10+i11-i2/2-i3/2+i6/2+i8/2,i,i10,i11,i2,i3,i6,i8,Md349,dotrewrite-d349-6)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p9.p + Q.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	if (count(Md349,1)) id p2.p3 = i10 - i11;
	if (count(Md349,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md349,dotrewrite-d349-2)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md349,dotrewrite-d349-3)
	#call replace(p3.p5,-i14+i3/2-i6/2+i7/2,i,i14,i3,i6,i7,Md349,dotrewrite-d349-4)
	#call replace(Q.p5,-`Q2'/2+i10-i12-i6/2+i9/2,i,i10,i12,i6,i9,Md349,dotrewrite-d349-5)
	#call replace(p2.p5,-i12+i13-i2/2-i7/2+i8/2,i,i12,i13,i2,i7,i8,Md349,dotrewrite-d349-6)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case Q1
* path: (0, 9, 1)
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md349,dotrewrite-d349-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md349,dotrewrite-d349-1)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md349,dotrewrite-d349-2)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md349,dotrewrite-d349-3)
	#call replace(p1.p9,i1/2+i10-i11-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md349,dotrewrite-d349-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q4
* path: (0, 6, 4)
#case 26
* path: (2, 1, 3, 6)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p6.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p2.p - p3.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	if (count(Md349,1)) id p2.p3 = i10 - i11;
	if (count(Md349,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md349,dotrewrite-d349-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md349,dotrewrite-d349-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-4)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md349,dotrewrite-d349-5)
	#call replace(p2.p6,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md349,dotrewrite-d349-6)
#endif
#break
#case Q7
* path: (0, 6, 4, 7)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	if (count(Md349,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md349,dotrewrite-d349-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md349,dotrewrite-d349-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md349,dotrewrite-d349-3)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md349,dotrewrite-d349-4)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-5)
	#call replace(p4.p6,i14-i4/2+i5/2-i7/2,i,i14,i4,i5,i7,Md349,dotrewrite-d349-6)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md349,dotrewrite-d349-7)
	#call replace(p2.p6,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md349,dotrewrite-d349-8)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + Q.p + p7.p - p9.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md349,dotrewrite-d349-0)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md349,dotrewrite-d349-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md349,dotrewrite-d349-2)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md349,dotrewrite-d349-3)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md349,dotrewrite-d349-4)
	#call replace(p4.p8,-i12+i13-i4/2+i5/2-i7/2,i,i12,i13,i4,i5,i7,Md349,dotrewrite-d349-5)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md349,dotrewrite-d349-6)
	#call replace(p7.p9,-`Q2'/2+i10-i3/2+i7/2+i9/2,i,i10,i3,i7,i9,Md349,dotrewrite-d349-7)
	#call replace(p8.p9,i1/2-i11+i3/2-i8/2-i9/2,i,i1,i11,i3,i8,i9,Md349,dotrewrite-d349-8)
#endif
#break
#case 28
* path: (2, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p9.p + Q.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	if (count(Md349,1)) id p2.p3 = i10 - i11;
	if (count(Md349,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md349,dotrewrite-d349-2)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md349,dotrewrite-d349-3)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md349,dotrewrite-d349-4)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md349,dotrewrite-d349-5)
	#call replace(p4.p8,-i12+i13-i4/2+i5/2-i7/2,i,i12,i13,i4,i5,i7,Md349,dotrewrite-d349-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p9.p + Q.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md349,dotrewrite-d349-0)
	#call replace(Q.p8,i1/2-i10-i2/2+i6/2-i9/2,i,i1,i10,i2,i6,i9,Md349,dotrewrite-d349-1)
	#call replace(p3.p8,-i10+i11-i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md349,dotrewrite-d349-2)
	#call replace(p4.p8,-i12+i13-i4/2+i5/2-i7/2,i,i12,i13,i4,i5,i7,Md349,dotrewrite-d349-3)
	#call replace(p1.p8,i1/2-i10+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i6,i7,i8,i9,Md349,dotrewrite-d349-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p7.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	if (count(Md349,1)) id p2.p3 = i10 - i11;
	if (count(Md349,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md349,dotrewrite-d349-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md349,dotrewrite-d349-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-4)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md349,dotrewrite-d349-5)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md349,dotrewrite-d349-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q2
* path: (0, 9, 1, 2)
#case 29
* path: (2, 1, 9)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	if (count(Md349,1)) id p2.p3 = i10 - i11;
	if (count(Md349,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md349,dotrewrite-d349-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md349,dotrewrite-d349-3)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md349,dotrewrite-d349-4)
	#call replace(p4.p9,i12-i14+i4/2-i5/2+i7/2,i,i12,i14,i4,i5,i7,Md349,dotrewrite-d349-5)
	#call replace(p2.p9,`Q2'/2-i1/2-i10+i11-i7/2+i8/2,i,i1,i10,i11,i7,i8,Md349,dotrewrite-d349-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md349,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md349-5;
	if (count(Md349,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md349-4;
	if (count(Md349,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md349-3;
	if (count(Md349,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p7.p;
	.sort:momrewrite-Md349-2;
	if (count(Md349,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p3.p;
	.sort:momrewrite-Md349-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd349()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md349,dotrewrite-d349-0)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md349,dotrewrite-d349-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md349,dotrewrite-d349-2)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md349,dotrewrite-d349-3)
	#call replace(p1.p7,-`Q2'/2+i10+i2/2-i6/2+i7/2-i8/2+i9/2,i,i10,i2,i6,i7,i8,i9,Md349,dotrewrite-d349-4)
#endif
#break
#endswitch
#break
*--#] d349 : 
*--#[ d385 :
#case Md385
#procedure SimpleDotd385()
if (count(Md385,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p4.p5 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md385,dotrewrite-d385-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md385,dotrewrite-d385-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md385,dotrewrite-d385-3)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md385,dotrewrite-d385-4)
	#call replace(Q.p8,-i1/2+i10+i2/2-i7/2+i9/2,i,i1,i10,i2,i7,i9,Md385,dotrewrite-d385-5)
	#call replace(p3.p8,-i1/2+i10+i13-i14+i4/2-i5/2+i6/2-i7/2,i,i1,i10,i13,i14,i4,i5,i6,i7,Md385,dotrewrite-d385-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 25
* path: (2, 5)
#case 28
* path: (2, 8)
#case 24
* path: (2, 8, 4)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p2.p - p5.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p2.p5 = i11 - i12;
	if (count(Md385,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md385,dotrewrite-d385-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md385,dotrewrite-d385-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md385,dotrewrite-d385-4)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md385,dotrewrite-d385-5)
	#call replace(p2.p4,`Q2'/2-i10-i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md385,dotrewrite-d385-6)
	#call replace(Q.p8,-i1/2+i10+i2/2-i7/2+i9/2,i,i1,i10,i2,i7,i9,Md385,dotrewrite-d385-7)
	#call replace(p2.p8,-i13+i14+i2/2+i5/2-i6/2+i8/2,i,i13,i14,i2,i5,i6,i8,Md385,dotrewrite-d385-8)
#endif
#break
#case 23
* path: (2, 1, 3)
#case 23
* path: (2, 5, 3)
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p + Q.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md385,dotrewrite-d385-1)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md385,dotrewrite-d385-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md385,dotrewrite-d385-3)
	#call replace(Q.p6,-`Q2'/2+i10-i11-i7/2+i9/2,i,i10,i11,i7,i9,Md385,dotrewrite-d385-4)
	#call replace(p3.p6,-i14+i3/2-i5/2+i6/2-i7/2,i,i14,i3,i5,i6,i7,Md385,dotrewrite-d385-5)
	#call replace(p2.p6,-i11+i12-i13+i14-i2/2+i5/2-i6/2+i8/2,i,i11,i12,i13,i14,i2,i5,i6,i8,Md385,dotrewrite-d385-6)
#endif
#break
#case Q7
* path: (0, 2, 5, 7)
#case 27
* path: (2, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md385,dotrewrite-d385-1)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md385,dotrewrite-d385-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md385,dotrewrite-d385-3)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md385,dotrewrite-d385-4)
	#call replace(p2.p7,-i1/2+i10+i13-i14+i2/2-i3/2+i4/2-i5/2+i6/2-i8/2,i,i1,i10,i13,i14,i2,i3,i4,i5,i6,i8,Md385,dotrewrite-d385-5)
#endif
#break
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md385,dotrewrite-d385-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md385,dotrewrite-d385-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md385,dotrewrite-d385-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md385,dotrewrite-d385-4)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md385,dotrewrite-d385-5)
	#call replace(Q.p8,-i1/2+i10+i2/2-i7/2+i9/2,i,i1,i10,i2,i7,i9,Md385,dotrewrite-d385-6)
	#call replace(p1.p8,-i1/2+i10+i13-i14-i5/2+i6/2-i7/2-i8/2+i9/2,i,i1,i10,i13,i14,i5,i6,i7,i8,i9,Md385,dotrewrite-d385-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q9
* path: (0, 1, 4, 9)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 19
* path: (1, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p4.p5 = i12 - i13;
	if (count(Md385,1)) id p5.p9 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md385,dotrewrite-d385-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md385,dotrewrite-d385-3)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md385,dotrewrite-d385-4)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md385,dotrewrite-d385-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md385,dotrewrite-d385-6)
	#call replace(p1.p9,i10+i13-i14-i3/2+i4/2-i5/2+i6/2-i7/2-i8/2+i9/2,i,i10,i13,i14,i3,i4,i5,i6,i7,i8,i9,Md385,dotrewrite-d385-7)
#endif
#break
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p4.p5 = i12 - i13;
	if (count(Md385,1)) id p5.p9 = i11 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md385,dotrewrite-d385-2)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md385,dotrewrite-d385-3)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md385,dotrewrite-d385-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md385,dotrewrite-d385-5)
	#call replace(p3.p9,i10+i13-i14-i3/2-i5/2+i6/2-i7/2,i,i10,i13,i14,i3,i5,i6,i7,Md385,dotrewrite-d385-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p5.p9 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md385,dotrewrite-d385-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md385,dotrewrite-d385-2)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md385,dotrewrite-d385-3)
	#call replace(p3.p9,i10+i13-i14-i3/2-i5/2+i6/2-i7/2,i,i10,i13,i14,i3,i5,i6,i7,Md385,dotrewrite-d385-4)
	#call replace(p1.p9,i10+i13-i14-i3/2+i4/2-i5/2+i6/2-i7/2-i8/2+i9/2,i,i10,i13,i14,i3,i4,i5,i6,i7,i8,i9,Md385,dotrewrite-d385-5)
#endif
#break
#case Q9
* path: (0, 2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p9.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p2.p - p5.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	if (count(Md385,1)) id p2.p5 = i11 - i12;
	if (count(Md385,1)) id p5.p9 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md385,dotrewrite-d385-2)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md385,dotrewrite-d385-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md385,dotrewrite-d385-4)
	#call replace(p5.p8,i11-i12+i13-i14,i,i11,i12,i13,i14,Md385,dotrewrite-d385-5)
	#call replace(Q.p8,-i1/2+i10+i2/2-i7/2+i9/2,i,i1,i10,i2,i7,i9,Md385,dotrewrite-d385-6)
	#call replace(p2.p8,-i13+i14+i2/2+i5/2-i6/2+i8/2,i,i13,i14,i2,i5,i6,i8,Md385,dotrewrite-d385-7)
	#call replace(p2.p9,`Q2'/2-i10-i13+i14+i3/2-i4/2+i5/2-i6/2+i8/2,i,i10,i13,i14,i3,i4,i5,i6,i8,Md385,dotrewrite-d385-8)
#endif
#break
#default
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md385,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md385-5;
	if (count(Md385,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md385-4;
	if (count(Md385,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md385-3;
	if (count(Md385,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md385-2;
	if (count(Md385,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md385-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd385()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md385,dotrewrite-d385-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md385,dotrewrite-d385-1)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md385,dotrewrite-d385-2)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md385,dotrewrite-d385-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i10-i13+i14-i2/2+i3/2-i4/2+i5/2-i6/2+i7/2+i8/2-i9/2,i,i1,i10,i13,i14,i2,i3,i4,i5,i6,i7,i8,i9,Md385,dotrewrite-d385-4)
#endif
#break
#endswitch
#break
*--#] d385 : 
*--#[ d354 :
#case Md354
#procedure SimpleDotd354()
if (count(Md354,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 2, 9)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md354,dotrewrite-d354-1)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md354,dotrewrite-d354-3)
	#call replace(p3.p9,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md354,dotrewrite-d354-4)
	#call replace(p2.p9,-i1/2+i11+i2/2-i7/2+i9/2,i,i1,i11,i2,i7,i9,Md354,dotrewrite-d354-5)
	#call replace(p5.p9,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md354,dotrewrite-d354-6)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md354,dotrewrite-d354-1)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md354,dotrewrite-d354-4)
	#call replace(p2.p7,`Q2'/2-i11+i7/2-i9/2,i,i11,i7,i9,Md354,dotrewrite-d354-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md354,dotrewrite-d354-6)
#endif
#break
#case Q4
* path: (0, 9, 4)
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md354,dotrewrite-d354-3)
	#call replace(p3.p9,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md354,dotrewrite-d354-4)
	#call replace(p5.p9,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md354,dotrewrite-d354-5)
	#call replace(p4.p9,`Q2'/2+i1/2-i10-i11-i2/2+i3/2+i7/2-i8/2,i,i1,i10,i11,i2,i3,i7,i8,Md354,dotrewrite-d354-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p + Q.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p3.p - p8.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md354,dotrewrite-d354-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md354,dotrewrite-d354-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md354,dotrewrite-d354-4)
	#call replace(Q.p8,-`Q2'/2+i10-i7/2+i9/2,i,i10,i7,i9,Md354,dotrewrite-d354-5)
	#call replace(p2.p8,-`Q2'/2-i1/2+i10+i11-i3/2+i4/2-i7/2+i9/2,i,i1,i10,i11,i3,i4,i7,i9,Md354,dotrewrite-d354-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + Q.p + p8.p - p9.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-0)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md354,dotrewrite-d354-1)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(Q.p8,-`Q2'/2+i10-i7/2+i9/2,i,i10,i7,i9,Md354,dotrewrite-d354-3)
	#call replace(p1.p8,i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md354,dotrewrite-d354-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md354,dotrewrite-d354-5)
	#call replace(p5.p9,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md354,dotrewrite-d354-6)
	#call replace(p8.p9,-`Q2'/2+i10-i3/2+i8/2+i9/2,i,i10,i3,i8,i9,Md354,dotrewrite-d354-7)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p + Q.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p3.p - p8.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md354,dotrewrite-d354-3)
	#call replace(Q.p8,-`Q2'/2+i10-i7/2+i9/2,i,i10,i7,i9,Md354,dotrewrite-d354-4)
	#call replace(p1.p8,i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md354,dotrewrite-d354-5)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p + Q.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p3.p - p8.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md354,dotrewrite-d354-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md354,dotrewrite-d354-4)
	#call replace(Q.p8,-`Q2'/2+i10-i7/2+i9/2,i,i10,i7,i9,Md354,dotrewrite-d354-5)
	#call replace(p4.p8,i1/2-i11-i4/2+i7/2-i8/2,i,i1,i11,i4,i7,i8,Md354,dotrewrite-d354-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p + Q.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md354,dotrewrite-d354-2)
	#call replace(p3.p6,-i14+i3/2-i7/2+i8/2,i,i14,i3,i7,i8,Md354,dotrewrite-d354-3)
	#call replace(Q.p6,-`Q2'/2+i10-i12-i7/2+i9/2,i,i10,i12,i7,i9,Md354,dotrewrite-d354-4)
	#call replace(p1.p6,i1/2-i11-i13+i3/2-i4/2,i,i1,i11,i13,i3,i4,Md354,dotrewrite-d354-5)
#endif
#break
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-0)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md354,dotrewrite-d354-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md354,dotrewrite-d354-2)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md354,dotrewrite-d354-4)
	#call replace(Q.p8,-`Q2'/2+i10-i7/2+i9/2,i,i10,i7,i9,Md354,dotrewrite-d354-5)
	#call replace(p1.p8,i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md354,dotrewrite-d354-6)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p2.p5 = i12 - i13;
	if (count(Md354,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md354,dotrewrite-d354-2)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md354,dotrewrite-d354-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md354,dotrewrite-d354-4)
	#call replace(p2.p7,`Q2'/2-i11+i7/2-i9/2,i,i11,i7,i9,Md354,dotrewrite-d354-5)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md354,dotrewrite-d354-6)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md354,dotrewrite-d354-7)
	#call replace(p2.p4,`Q2'/2-i10-i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md354,dotrewrite-d354-8)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(p1.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md354,dotrewrite-d354-3)
	#call replace(p3.p9,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md354,dotrewrite-d354-4)
	#call replace(p5.p9,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md354,dotrewrite-d354-5)
#endif
#break
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md354,dotrewrite-d354-4)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md354,dotrewrite-d354-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md354,dotrewrite-d354-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	if (count(Md354,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-2)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md354,dotrewrite-d354-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md354,dotrewrite-d354-4)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md354,dotrewrite-d354-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md354,dotrewrite-d354-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 1, 3, 7)
#case Q7
* path: (0, 7)
#case Q3
* path: (0, 7, 3)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 17
* path: (1, 3, 7)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 59
* path: (5, 7, 9)
#case 77
* path: (7,)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md354,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md354-5;
	if (count(Md354,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md354-4;
	if (count(Md354,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md354-3;
	if (count(Md354,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md354-2;
	if (count(Md354,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md354-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd354()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md354,dotrewrite-d354-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md354,dotrewrite-d354-1)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md354,dotrewrite-d354-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md354,dotrewrite-d354-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md354,dotrewrite-d354-4)
#endif
#break
#endswitch
#break
*--#] d354 : 
*--#[ d254 :
#case Md254
#procedure SimpleDotd254()
if (count(Md254,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p2.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	#call replace(p1.p3,-i1+i11-i12,i,i1,i11,i12,Md254,dotrewrite-d254-0)
	#call replace(p3.p4,-i10-i13+i9,i,i10,i13,i9,Md254,dotrewrite-d254-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md254,dotrewrite-d254-2)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md254,dotrewrite-d254-3)
	#call replace(p4.p6,i10-i4/2+i5/2-i7/2,i,i10,i4,i5,i7,Md254,dotrewrite-d254-4)
	#call replace(Q.p3,`Q2'/2-i1/2-i12-i2/2+i3/2,i,i1,i12,i2,i3,Md254,dotrewrite-d254-5)
	#call replace(p3.p6,`Q2'/2-i12+i13+i14-i2/2+i7/2-i8/2,i,i12,i13,i14,i2,i7,i8,Md254,dotrewrite-d254-6)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md254,dotrewrite-d254-0)
	#call replace(p1.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md254,dotrewrite-d254-1)
	#call replace(p4.p8,-i10+i4/2-i5/2+i7/2+i9,i,i10,i4,i5,i7,i9,Md254,dotrewrite-d254-2)
	#call replace(Q.p2,`Q2'/2+i1/2-i11+i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md254,dotrewrite-d254-3)
	#call replace(p2.p8,`Q2'/2+i1/2-i11+i12-i3/2-i6/2+i7/2,i,i1,i11,i12,i3,i6,i7,Md254,dotrewrite-d254-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case Q4
* path: (0, 6, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md254,dotrewrite-d254-0)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md254,dotrewrite-d254-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md254,dotrewrite-d254-2)
	#call replace(p4.p6,i10-i4/2+i5/2-i7/2,i,i10,i4,i5,i7,Md254,dotrewrite-d254-3)
	#call replace(Q.p2,`Q2'/2+i1/2-i11+i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md254,dotrewrite-d254-4)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	#call replace(p1.p3,-i1+i11-i12,i,i1,i11,i12,Md254,dotrewrite-d254-0)
	#call replace(p3.p4,-i10-i13+i9,i,i10,i13,i9,Md254,dotrewrite-d254-1)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md254,dotrewrite-d254-2)
	#call replace(p1.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md254,dotrewrite-d254-3)
	#call replace(Q.p3,`Q2'/2-i1/2-i12-i2/2+i3/2,i,i1,i12,i2,i3,Md254,dotrewrite-d254-4)
	#call replace(p4.p8,-i10+i4/2-i5/2+i7/2+i9,i,i10,i4,i5,i7,i9,Md254,dotrewrite-d254-5)
	#call replace(p3.p8,-i1/2-i13-i14+i3/2-i7/2+i8/2,i,i1,i13,i14,i3,i7,i8,Md254,dotrewrite-d254-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 47
* path: (4, 7)
#case 67
* path: (6, 4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p4} = + p6.p + p7.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p7.p - p4.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	if (count(Md254,1)) id p1.p7 = i13 + i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md254,dotrewrite-d254-1)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md254,dotrewrite-d254-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md254,dotrewrite-d254-3)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md254,dotrewrite-d254-4)
	#call replace(p4.p6,i10-i4/2+i5/2-i7/2,i,i10,i4,i5,i7,Md254,dotrewrite-d254-5)
	#call replace(Q.p7,i1/2-i11+i12+i2/2-i3/2-i6/2+i8/2,i,i1,i11,i12,i2,i3,i6,i8,Md254,dotrewrite-d254-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p7.p - p4.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p4} = + Q.p + p7.p - p8.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p - p7.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	if (count(Md254,1)) id p1.p7 = i13 + i14;
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md254,dotrewrite-d254-1)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md254,dotrewrite-d254-2)
	#call replace(p1.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md254,dotrewrite-d254-3)
	#call replace(p4.p8,-i10+i4/2-i5/2+i7/2+i9,i,i10,i4,i5,i7,i9,Md254,dotrewrite-d254-4)
	#call replace(p7.p8,i1/2-i11+i12-i3/2+i7/2+i8/2,i,i1,i11,i12,i3,i7,i8,Md254,dotrewrite-d254-5)
	#call replace(Q.p7,i1/2-i11+i12+i2/2-i3/2-i6/2+i8/2,i,i1,i11,i12,i2,i3,i6,i8,Md254,dotrewrite-d254-6)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p7.p - p4.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	if (count(Md254,1)) id p1.p7 = i13 + i14;
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md254,dotrewrite-d254-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md254,dotrewrite-d254-2)
	#call replace(Q.p2,`Q2'/2+i1/2-i11+i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md254,dotrewrite-d254-3)
	#call replace(Q.p7,i1/2-i11+i12+i2/2-i3/2-i6/2+i8/2,i,i1,i11,i12,i2,i3,i6,i8,Md254,dotrewrite-d254-4)
#endif
#break
#default
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md254,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md254-4;
	if (count(Md254,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md254-3;
	if (count(Md254,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md254-2;
	if (count(Md254,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md254-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd254()
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md254,dotrewrite-d254-0)
	#call replace(p2.p5,-i10+i2/2-i6/2+i7/2,i,i10,i2,i6,i7,Md254,dotrewrite-d254-1)
	#call replace(Q.p2,`Q2'/2+i1/2-i11+i12+i2/2-i3/2,i,i1,i11,i12,i2,i3,Md254,dotrewrite-d254-2)
	#call replace(Q.p5,i1/2-i11+i12+i2/2-i3/2-i6/2+i8/2-i9,i,i1,i11,i12,i2,i3,i6,i8,i9,Md254,dotrewrite-d254-3)
#endif
#break
#endswitch
#break
*--#] d254 : 
*--#[ d264 :
#case Md264
#procedure SimpleDotd264()
if (count(Md264,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#case 28
* path: (2, 1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md264,dotrewrite-d264-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md264,dotrewrite-d264-1)
	#call replace(p2.p8,-i2/2-i6/2+i7/2+i9,i,i2,i6,i7,i9,Md264,dotrewrite-d264-2)
	#call replace(p4.p8,i10-i11+i4/2-i5/2+i7/2,i,i10,i11,i4,i5,i7,Md264,dotrewrite-d264-3)
	#call replace(p1.p8,-i1/2+i12+i13+i14-i2/2+i3/2,i,i1,i12,i13,i14,i2,i3,Md264,dotrewrite-d264-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case Q4
* path: (0, 6, 4)
#case Q6
* path: (0, 8, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md264,dotrewrite-d264-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md264,dotrewrite-d264-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md264,dotrewrite-d264-2)
	#call replace(p4.p6,i11-i4/2+i5/2-i7/2,i,i11,i4,i5,i7,Md264,dotrewrite-d264-3)
	#call replace(p1.p6,i1/2-i13-i14+i2/2-i3/2,i,i1,i13,i14,i2,i3,Md264,dotrewrite-d264-4)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p + p3.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p3.p + p7.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	if (count(Md264,1)) id Q.p3 = -i12 + i9;
	if (count(Md264,1)) id p3.p4 = i11 - i13;
	if (count(Md264,1)) id p1.p7 = -i13 - i14;
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md264,dotrewrite-d264-3)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md264,dotrewrite-d264-4)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md264,dotrewrite-d264-5)
	#call replace(p3.p7,i13+i14-i2/2+i6/2-i7/2,i,i13,i14,i2,i6,i7,Md264,dotrewrite-d264-6)
#endif
#break
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p6.p - p7.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	if (count(Md264,1)) id p1.p7 = -i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md264,dotrewrite-d264-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md264,dotrewrite-d264-2)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md264,dotrewrite-d264-3)
	#call replace(p4.p6,i11-i4/2+i5/2-i7/2,i,i11,i4,i5,i7,Md264,dotrewrite-d264-4)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md264,dotrewrite-d264-5)
	#call replace(p1.p6,i1/2-i13-i14+i2/2-i3/2,i,i1,i13,i14,i2,i3,Md264,dotrewrite-d264-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	if (count(Md264,1)) id p1.p7 = -i13 - i14;
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md264,dotrewrite-d264-1)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md264,dotrewrite-d264-2)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md264,dotrewrite-d264-3)
	#call replace(p4.p8,i10-i11+i4/2-i5/2+i7/2,i,i10,i11,i4,i5,i7,Md264,dotrewrite-d264-4)
	#call replace(p7.p8,`Q2'/2+i2/2-i7/2-i8/2-i9,i,i2,i7,i8,i9,Md264,dotrewrite-d264-5)
	#call replace(p1.p8,-i1/2+i12+i13+i14-i2/2+i3/2,i,i1,i12,i13,i14,i2,i3,Md264,dotrewrite-d264-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	if (count(Md264,1)) id p1.p7 = -i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md264,dotrewrite-d264-1)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md264,dotrewrite-d264-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md264,dotrewrite-d264-3)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md264,dotrewrite-d264-4)
#endif
#break
#default
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md264,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md264-4;
	if (count(Md264,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md264-3;
	if (count(Md264,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md264-2;
	if (count(Md264,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md264-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd264()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md264,dotrewrite-d264-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md264,dotrewrite-d264-1)
	#call replace(p2.p5,-i11+i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md264,dotrewrite-d264-2)
	#call replace(Q.p5,-`Q2'/2-i10-i6/2+i8/2+i9,i,i10,i6,i8,i9,Md264,dotrewrite-d264-3)
#endif
#break
#endswitch
#break
*--#] d264 : 
*--#[ d246 :
#case Md246
#procedure SimpleDotd246()
if (count(Md246,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p3.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q7
* path: (0, 1, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 67
* path: (6, 3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md246,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md246-4;
	if (count(Md246,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md246-3;
	if (count(Md246,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md246-2;
	if (count(Md246,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p7.p;
	.sort:momrewrite-Md246-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd246()
	if (count(Md246,1)) id p1.p7 = -i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md246,dotrewrite-d246-1)
	#call replace(p3.p7,-i3/2+i6/2-i7/2,i,i3,i6,i7,Md246,dotrewrite-d246-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md246,dotrewrite-d246-3)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md246,dotrewrite-d246-4)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q4
* path: (0, 6, 4)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md246,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md246-4;
	if (count(Md246,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md246-3;
	if (count(Md246,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md246-2;
	if (count(Md246,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p4.p - p6.p;
	.sort:momrewrite-Md246-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd246()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md246,dotrewrite-d246-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md246,dotrewrite-d246-1)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md246,dotrewrite-d246-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md246,dotrewrite-d246-3)
	#call replace(p4.p6,i11-i4/2+i5/2-i7/2,i,i11,i4,i5,i7,Md246,dotrewrite-d246-4)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md246,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md246-4;
	if (count(Md246,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md246-3;
	if (count(Md246,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md246-2;
	if (count(Md246,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1,p4} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md246-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd246()
	if (count(Md246,1)) id p1.p7 = -i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md246,dotrewrite-d246-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md246,dotrewrite-d246-2)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md246,dotrewrite-d246-3)
	#call replace(Q.p7,`Q2'/2+i6/2-i8/2-i9,i,i6,i8,i9,Md246,dotrewrite-d246-4)
	#call replace(p4.p8,i10-i11+i4/2-i5/2+i7/2,i,i10,i11,i4,i5,i7,Md246,dotrewrite-d246-5)
	#call replace(p7.p8,`Q2'/2+i3/2-i7/2-i8/2-i9,i,i3,i7,i8,i9,Md246,dotrewrite-d246-6)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md246,dotrewrite-d246-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md246,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md246-4;
	if (count(Md246,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p4.p - p6.p;
	.sort:momrewrite-Md246-3;
	if (count(Md246,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md246-2;
	if (count(Md246,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md246-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd246()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md246,dotrewrite-d246-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md246,dotrewrite-d246-1)
	#call replace(p3.p8,-i3/2-i6/2+i7/2+i9,i,i3,i6,i7,i9,Md246,dotrewrite-d246-2)
	#call replace(p4.p8,i10-i11+i4/2-i5/2+i7/2,i,i10,i11,i4,i5,i7,Md246,dotrewrite-d246-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md246,dotrewrite-d246-4)
#endif
#break
#default
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md246,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md246-4;
	if (count(Md246,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md246-3;
	if (count(Md246,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md246-2;
	if (count(Md246,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p - p5.p;
	.sort:momrewrite-Md246-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd246()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md246,dotrewrite-d246-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md246,dotrewrite-d246-1)
	#call replace(p3.p5,-i11+i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md246,dotrewrite-d246-2)
	#call replace(Q.p5,-`Q2'/2-i10-i6/2+i8/2+i9,i,i10,i6,i8,i9,Md246,dotrewrite-d246-3)
#endif
#break
#endswitch
#break
*--#] d246 : 
*--#[ d141 :
#case Md141
#procedure SimpleDotd141()
if (count(Md141,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p6.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	if (count(Md141,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md141,dotrewrite-d141-1)
	#call replace(p2.p6,i2/2-i5/2+i6/2,i,i2,i5,i6,Md141,dotrewrite-d141-2)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md141,dotrewrite-d141-3)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md141,dotrewrite-d141-4)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	if (count(Md141,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md141,dotrewrite-d141-1)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md141,dotrewrite-d141-2)
	#call replace(Q.p4,-i1/2+i2/2-i5/2+i7/2-i8,i,i1,i2,i5,i7,i8,Md141,dotrewrite-d141-3)
	#call replace(p2.p4,i2/2-i5/2+i6/2-i8+i9,i,i2,i5,i6,i8,i9,Md141,dotrewrite-d141-4)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p7.p - p6.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p6.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md141,dotrewrite-d141-0)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md141,dotrewrite-d141-1)
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md141,dotrewrite-d141-2)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md141,dotrewrite-d141-3)
	#call replace(p3.p5,-i3/2+i4/2-i6/2+i8-i9,i,i3,i4,i6,i8,i9,Md141,dotrewrite-d141-4)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q3
* path: (0, 5, 3)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p5.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	if (count(Md141,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md141,dotrewrite-d141-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md141,dotrewrite-d141-2)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md141,dotrewrite-d141-3)
	#call replace(p3.p5,-i3/2+i4/2-i6/2+i8-i9,i,i3,i4,i6,i8,i9,Md141,dotrewrite-d141-4)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p7.p - p6.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md141,dotrewrite-d141-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md141,dotrewrite-d141-1)
	#call replace(p6.p7,-i1/2+i6/2+i7/2,i,i1,i6,i7,Md141,dotrewrite-d141-2)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md141,dotrewrite-d141-3)
	#call replace(p3.p7,i3/2-i4/2+i6/2+i9,i,i3,i4,i6,i9,Md141,dotrewrite-d141-4)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q7
* path: (0, 7)
#case Q1
* path: (0, 7, 1)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p1.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md141,dotrewrite-d141-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md141,dotrewrite-d141-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md141,dotrewrite-d141-2)
	#call replace(p3.p7,i3/2-i4/2+i6/2+i9,i,i3,i4,i6,i9,Md141,dotrewrite-d141-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md141,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md141-4;
	if (count(Md141,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md141-3;
	if (count(Md141,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md141-2;
	if (count(Md141,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p6.p;
	.sort:momrewrite-Md141-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd141()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md141,dotrewrite-d141-0)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md141,dotrewrite-d141-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md141,dotrewrite-d141-2)
	#call replace(Q.p6,-i1/2+i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md141,dotrewrite-d141-3)
#endif
#break
#endswitch
#break
*--#] d141 : 
*--#[ d262 :
#case Md262
#procedure SimpleDotd262()
if (count(Md262,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p3.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p - p5.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md262,dotrewrite-d262-0)
	#call replace(p2.p8,-i2/2-i5/2+i6/2+i9,i,i2,i5,i6,i9,Md262,dotrewrite-d262-1)
	#call replace(p1.p8,-i1/2+i12-i13-i6/2+i7/2,i,i1,i12,i13,i6,i7,Md262,dotrewrite-d262-2)
	#call replace(p3.p8,i10-i11+i3/2-i4/2+i6/2,i,i10,i11,i3,i4,i6,Md262,dotrewrite-d262-3)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = + p5.p + p6.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md262,dotrewrite-d262-0)
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md262,dotrewrite-d262-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md262,dotrewrite-d262-2)
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md262,dotrewrite-d262-3)
	#call replace(p1.p5,i1/2+i13+i6/2-i7/2,i,i1,i13,i6,i7,Md262,dotrewrite-d262-4)
	#call replace(p3.p5,i11-i3/2+i4/2-i6/2,i,i11,i3,i4,i6,Md262,dotrewrite-d262-5)
	#call replace(Q.p6,-`Q2'/2-i5/2+i8/2+i9,i,i5,i8,i9,Md262,dotrewrite-d262-6)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p3.p - p4.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md262,dotrewrite-d262-0)
	#call replace(p1.p4,-i1/2-i14-i6/2+i7/2,i,i1,i14,i6,i7,Md262,dotrewrite-d262-1)
	#call replace(p2.p4,-i11+i2/2-i5/2+i6/2,i,i11,i2,i5,i6,Md262,dotrewrite-d262-2)
	#call replace(Q.p4,-`Q2'/2-i10-i5/2+i8/2+i9,i,i10,i5,i8,i9,Md262,dotrewrite-d262-3)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q3
* path: (0, 5, 3)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p5.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p - p5.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md262,dotrewrite-d262-0)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md262,dotrewrite-d262-1)
	#call replace(p1.p5,i1/2+i13+i6/2-i7/2,i,i1,i13,i6,i7,Md262,dotrewrite-d262-2)
	#call replace(p3.p5,i11-i3/2+i4/2-i6/2,i,i11,i3,i4,i6,Md262,dotrewrite-d262-3)
#endif
#break
#case Q6
* path: (0, 8, 1, 6)
#case 68
* path: (6, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1,p3} = + Q.p + p6.p - p8.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md262,dotrewrite-d262-0)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md262,dotrewrite-d262-1)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md262,dotrewrite-d262-2)
	#call replace(Q.p6,-`Q2'/2-i5/2+i8/2+i9,i,i5,i8,i9,Md262,dotrewrite-d262-3)
	#call replace(p1.p8,-i1/2+i12-i13-i6/2+i7/2,i,i1,i12,i13,i6,i7,Md262,dotrewrite-d262-4)
	#call replace(p3.p8,i10-i11+i3/2-i4/2+i6/2,i,i10,i11,i3,i4,i6,Md262,dotrewrite-d262-5)
	#call replace(p6.p8,-`Q2'/2-i2/2+i6/2+i8/2+i9,i,i2,i6,i8,i9,Md262,dotrewrite-d262-6)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p7.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p2.p + p7.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(p1.p7,-i1/2+i6/2-i7/2,i,i1,i6,i7,Md262,dotrewrite-d262-0)
	#call replace(p2.p7,-i13-i2/2+i5/2-i6/2,i,i13,i2,i5,i6,Md262,dotrewrite-d262-1)
	#call replace(p3.p7,-i14-i3/2+i4/2-i6/2,i,i14,i3,i4,i6,Md262,dotrewrite-d262-2)
	#call replace(Q.p7,`Q2'/2-i12+i5/2-i8/2-i9,i,i12,i5,i8,i9,Md262,dotrewrite-d262-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md262,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md262-4;
	if (count(Md262,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md262-3;
	if (count(Md262,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p6.p;
	.sort:momrewrite-Md262-2;
	if (count(Md262,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p6.p;
	.sort:momrewrite-Md262-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd262()
	#call replace(p1.p6,-i1/2-i6/2+i7/2,i,i1,i6,i7,Md262,dotrewrite-d262-0)
	#call replace(p2.p6,i2/2-i5/2+i6/2,i,i2,i5,i6,Md262,dotrewrite-d262-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md262,dotrewrite-d262-2)
	#call replace(Q.p6,-`Q2'/2-i5/2+i8/2+i9,i,i5,i8,i9,Md262,dotrewrite-d262-3)
#endif
#break
#endswitch
#break
*--#] d262 : 
*--#[ d252 :
#case Md252
#procedure SimpleDotd252()
if (count(Md252,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id p2.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p6.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p8.p - p1.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md252,dotrewrite-d252-0)
	#call replace(p1.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md252,dotrewrite-d252-1)
	#call replace(p3.p8,-i10+i3/2-i4/2+i6/2+i9,i,i10,i3,i4,i6,i9,Md252,dotrewrite-d252-2)
	#call replace(p2.p8,-i1/2+i11+i13+i14-i2/2+i7/2-i8/2,i,i1,i11,i13,i14,i2,i7,i8,Md252,dotrewrite-d252-3)
	#call replace(Q.p2,-i1/2+i11+i13+i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i13,i14,i5,i6,i7,i8,Md252,dotrewrite-d252-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 11
* path: (1,)
#case 16
* path: (1, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 58
* path: (5, 8)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + p5.p - p6.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p6.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	if (count(Md252,1)) id p1.p6 = -i13 - i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md252,dotrewrite-d252-1)
	#call replace(p1.p5,i12-i13-i14,i,i12,i13,i14,Md252,dotrewrite-d252-2)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md252,dotrewrite-d252-3)
	#call replace(p5.p6,-i2/2+i5/2+i6/2,i,i2,i5,i6,Md252,dotrewrite-d252-4)
	#call replace(p3.p5,i10-i3/2+i4/2-i6/2,i,i10,i3,i4,i6,Md252,dotrewrite-d252-5)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i13-i14+i6/2-i7/2,i,i1,i11,i13,i14,i6,i7,Md252,dotrewrite-d252-6)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p6.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p6.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	if (count(Md252,1)) id p1.p6 = -i13 - i14;
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md252,dotrewrite-d252-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md252,dotrewrite-d252-2)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i13-i14+i6/2-i7/2,i,i1,i11,i13,i14,i6,i7,Md252,dotrewrite-d252-3)
	#call replace(Q.p2,-i1/2+i11+i13+i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i13,i14,i5,i6,i7,i8,Md252,dotrewrite-d252-4)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case 17
* path: (1, 0, 7)
#case 18
* path: (1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p6.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + p1.p + p7.p - p8.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md252,dotrewrite-d252-0)
	#call replace(p1.p7,-i1+i11+i13+i14,i,i1,i11,i13,i14,Md252,dotrewrite-d252-1)
	#call replace(p1.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md252,dotrewrite-d252-2)
	#call replace(p3.p7,-i13+i3/2-i4/2+i6/2+i9,i,i13,i3,i4,i6,i9,Md252,dotrewrite-d252-3)
	#call replace(p3.p8,-i10+i3/2-i4/2+i6/2+i9,i,i10,i3,i4,i6,i9,Md252,dotrewrite-d252-4)
	#call replace(p7.p8,-i1/2+i12-i2/2+i7/2+i8/2,i,i1,i12,i2,i7,i8,Md252,dotrewrite-d252-5)
	#call replace(Q.p7,`Q2'/2-i1/2+i13+i14-i6/2+i7/2,i,i1,i13,i14,i6,i7,Md252,dotrewrite-d252-6)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 2, 5)
#case Q2
* path: (0, 5, 2)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p6.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + p8.p + p2.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p2.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md252,dotrewrite-d252-0)
	#call replace(p1.p5,i12-i13-i14,i,i12,i13,i14,Md252,dotrewrite-d252-1)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md252,dotrewrite-d252-2)
	#call replace(p3.p5,i10-i3/2+i4/2-i6/2,i,i10,i3,i4,i6,Md252,dotrewrite-d252-3)
	#call replace(Q.p2,-i1/2+i11+i13+i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i13,i14,i5,i6,i7,i8,Md252,dotrewrite-d252-4)
#endif
#break
#case Q6
* path: (0, 8, 1, 6)
#case 68
* path: (6, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = - p3.p - p6.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p2.p?!{p2,[P+p2],[P-p2],p1,p3} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	if (count(Md252,1)) id p1.p6 = -i13 - i14;
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md252,dotrewrite-d252-1)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md252,dotrewrite-d252-2)
	#call replace(p1.p8,i11-i12+i13+i14,i,i11,i12,i13,i14,Md252,dotrewrite-d252-3)
	#call replace(p3.p8,-i10+i3/2-i4/2+i6/2+i9,i,i10,i3,i4,i6,i9,Md252,dotrewrite-d252-4)
	#call replace(Q.p6,`Q2'/2+i1/2-i11-i13-i14+i6/2-i7/2,i,i1,i11,i13,i14,i6,i7,Md252,dotrewrite-d252-5)
	#call replace(p6.p8,`Q2'/2+i1/2-i11-i13-i14+i2/2-i5/2-i7/2,i,i1,i11,i13,i14,i2,i5,i7,Md252,dotrewrite-d252-6)
#endif
#break
#default
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md252,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + Q.p;
	.sort:momrewrite-Md252-4;
	if (count(Md252,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p7.p - p2.p;
	.sort:momrewrite-Md252-3;
	if (count(Md252,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p6.p;
	.sort:momrewrite-Md252-2;
	if (count(Md252,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md252-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd252()
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md252,dotrewrite-d252-0)
	#call replace(p2.p4,-i10+i2/2-i5/2+i6/2,i,i10,i2,i5,i6,Md252,dotrewrite-d252-1)
	#call replace(Q.p2,-i1/2+i11+i13+i14+i5/2-i6/2+i7/2-i8/2,i,i1,i11,i13,i14,i5,i6,i7,i8,Md252,dotrewrite-d252-2)
	#call replace(Q.p4,-`Q2'/2-i1/2+i11+i13+i14-i6/2+i7/2-i9,i,i1,i11,i13,i14,i6,i7,i9,Md252,dotrewrite-d252-3)
#endif
#break
#endswitch
#break
*--#] d252 : 
*--#[ d143 :
#case Md143
#procedure SimpleDotd143()
if (count(Md143,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + Q.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md143,dotrewrite-d143-0)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md143,dotrewrite-d143-1)
	#call replace(Q.p4,-`Q2'/2+i1/2-i6/2-i8,i,i1,i6,i8,Md143,dotrewrite-d143-2)
	#call replace(p2.p4,i2/2-i5/2+i6/2-i9,i,i2,i5,i6,i9,Md143,dotrewrite-d143-3)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + p5.p - p6.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md143,dotrewrite-d143-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md143,dotrewrite-d143-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md143,dotrewrite-d143-2)
	#call replace(p5.p6,-i2/2+i5/2+i6/2,i,i2,i5,i6,Md143,dotrewrite-d143-3)
	#call replace(p3.p5,-i3/2+i4/2-i6/2+i9,i,i3,i4,i6,i9,Md143,dotrewrite-d143-4)
#endif
#break
#case Q7
* path: (0, 7)
#case 27
* path: (2, 7)
#case 37
* path: (3, 2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p7.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md143,dotrewrite-d143-0)
	#call replace(p2.p7,i1/2-i2/2-i7/2,i,i1,i2,i7,Md143,dotrewrite-d143-1)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md143,dotrewrite-d143-2)
	#call replace(p3.p7,i3/2-i4/2+i6/2+i8-i9,i,i3,i4,i6,i8,i9,Md143,dotrewrite-d143-3)
#endif
#break
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q3
* path: (0, 5, 3)
#case 25
* path: (2, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p7.p + p2.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p2.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md143,dotrewrite-d143-0)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md143,dotrewrite-d143-1)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md143,dotrewrite-d143-2)
	#call replace(p3.p5,-i3/2+i4/2-i6/2+i9,i,i3,i4,i6,i9,Md143,dotrewrite-d143-3)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q1
* path: (0, 7, 1)
#case Q6
* path: (0, 7, 1, 6)
#case 17
* path: (1, 7)
#case 67
* path: (6, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p2.p?!{p2,[P+p2],[P-p2],p3} = + p1.p - p7.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md143,dotrewrite-d143-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md143,dotrewrite-d143-1)
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Md143,dotrewrite-d143-2)
	#call replace(p1.p3,i3/2-i4/2+i6/2+i8,i,i3,i4,i6,i8,Md143,dotrewrite-d143-3)
	#call replace(p3.p7,i3/2-i4/2+i6/2+i8-i9,i,i3,i4,i6,i8,i9,Md143,dotrewrite-d143-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 2, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + Q.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md143,dotrewrite-d143-0)
	#call replace(p1.p2,i1/2+i2/2-i7/2,i,i1,i2,i7,Md143,dotrewrite-d143-1)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md143,dotrewrite-d143-2)
	#call replace(p1.p3,i3/2-i4/2+i6/2+i8,i,i3,i4,i6,i8,Md143,dotrewrite-d143-3)
#endif
#break
#default
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md143,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p2.p;
	.sort:momrewrite-Md143-4;
	if (count(Md143,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md143-3;
	if (count(Md143,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md143-2;
	if (count(Md143,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p6.p;
	.sort:momrewrite-Md143-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd143()
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md143,dotrewrite-d143-0)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md143,dotrewrite-d143-1)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md143,dotrewrite-d143-2)
	#call replace(Q.p2,i1/2+i5/2-i6/2-i7/2,i,i1,i5,i6,i7,Md143,dotrewrite-d143-3)
#endif
#break
#endswitch
#break
*--#] d143 : 
*--#[ d275 :
#case Md275
#procedure SimpleDotd275()
if (count(Md275,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p2.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 2, 8)
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md275,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md275-4;
	if (count(Md275,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md275-3;
	if (count(Md275,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md275-2;
	if (count(Md275,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md275-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd275()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md275,dotrewrite-d275-0)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md275,dotrewrite-d275-1)
	#call replace(p1.p8,-i1/2-i5/2+i6/2+i9,i,i1,i5,i6,i9,Md275,dotrewrite-d275-2)
	#call replace(p3.p8,i10-i11+i3/2-i4/2+i6/2,i,i10,i11,i3,i4,i6,Md275,dotrewrite-d275-3)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md275,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md275-4;
	if (count(Md275,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md275-3;
	if (count(Md275,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md275-2;
	if (count(Md275,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md275-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd275()
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md275,dotrewrite-d275-0)
	#call replace(p1.p4,i1/2-i11-i5/2+i6/2,i,i1,i11,i5,i6,Md275,dotrewrite-d275-1)
	#call replace(Q.p4,-`Q2'/2-i10-i5/2+i8/2+i9,i,i10,i5,i8,i9,Md275,dotrewrite-d275-2)
	#call replace(p2.p4,-i12+i13-i14+i2/2-i7/2+i8/2,i,i12,i13,i14,i2,i7,i8,Md275,dotrewrite-d275-3)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md275,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md275-4;
	if (count(Md275,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md275-3;
	if (count(Md275,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md275-2;
	if (count(Md275,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p;
	.sort:momrewrite-Md275-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd275()
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md275,dotrewrite-d275-0)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md275,dotrewrite-d275-1)
	#call replace(Q.p6,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md275,dotrewrite-d275-2)
	#call replace(p2.p6,i12-i13-i2/2+i7/2-i8/2,i,i12,i13,i2,i7,i8,Md275,dotrewrite-d275-3)
#endif
#break
#case 68
* path: (6, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md275,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md275-4;
	if (count(Md275,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md275-3;
	if (count(Md275,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md275-2;
	if (count(Md275,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p3} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md275-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd275()
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md275,dotrewrite-d275-0)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md275,dotrewrite-d275-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md275,dotrewrite-d275-2)
	#call replace(Q.p6,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md275,dotrewrite-d275-3)
	#call replace(p2.p6,i12-i13-i2/2+i7/2-i8/2,i,i12,i13,i2,i7,i8,Md275,dotrewrite-d275-4)
	#call replace(p3.p8,i10-i11+i3/2-i4/2+i6/2,i,i10,i11,i3,i4,i6,Md275,dotrewrite-d275-5)
	#call replace(p6.p8,`Q2'/2+i1/2-i6/2-i8/2-i9,i,i1,i6,i8,i9,Md275,dotrewrite-d275-6)
#endif
#break
#case 27
* path: (2, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md275,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md275-4;
	if (count(Md275,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md275-3;
	if (count(Md275,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md275-2;
	if (count(Md275,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md275-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd275()
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md275,dotrewrite-d275-0)
	#call replace(Q.p7,`Q2'/2-i12-i5/2+i8/2,i,i12,i5,i8,Md275,dotrewrite-d275-1)
	#call replace(p1.p7,-i1/2-i13-i5/2+i6/2+i9,i,i1,i13,i5,i6,i9,Md275,dotrewrite-d275-2)
	#call replace(p3.p7,i10-i11-i14+i3/2-i4/2+i6/2,i,i10,i11,i14,i3,i4,i6,Md275,dotrewrite-d275-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 5)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case Q6
* path: (0, 5, 1, 6)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 56
* path: (5, 1, 6)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md275,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md275-4;
	if (count(Md275,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p1.p;
	.sort:momrewrite-Md275-3;
	if (count(Md275,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md275-2;
	if (count(Md275,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md275-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd275()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md275,dotrewrite-d275-0)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md275,dotrewrite-d275-1)
	#call replace(p2.p5,i12-i2/2+i7/2-i8/2,i,i12,i2,i7,i8,Md275,dotrewrite-d275-2)
	#call replace(p3.p5,i11-i3/2+i4/2-i6/2,i,i11,i3,i4,i6,Md275,dotrewrite-d275-3)
#endif
#break
#endswitch
#break
*--#] d275 : 
*--#[ d333 :
#case Md333
#procedure SimpleDotd333()
if (count(Md333,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md333,dotrewrite-d333-0)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md333,dotrewrite-d333-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md333,dotrewrite-d333-2)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md333,dotrewrite-d333-3)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md333,dotrewrite-d333-4)
	#call replace(p1.p6,i1/2+i13+i7/2-i8/2,i,i1,i13,i7,i8,Md333,dotrewrite-d333-5)
	#call replace(p1.p5,-i1/2-i13+i14-i7/2+i8/2,i,i1,i13,i14,i7,i8,Md333,dotrewrite-d333-6)
#endif
#break
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p6.p + p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p5.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md333,dotrewrite-d333-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md333,dotrewrite-d333-1)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-2)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Md333,dotrewrite-d333-3)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md333,dotrewrite-d333-4)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md333,dotrewrite-d333-5)
	#call replace(p1.p6,i1/2+i13+i7/2-i8/2,i,i1,i13,i7,i8,Md333,dotrewrite-d333-6)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md333,dotrewrite-d333-7)
	#call replace(p1.p5,-i1/2-i13+i14-i7/2+i8/2,i,i1,i13,i14,i7,i8,Md333,dotrewrite-d333-8)
#endif
#break
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	if (count(Md333,1)) id Q.p4 = i10 - i11;
	if (count(Md333,1)) id p1.p4 = i13 - i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-2)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-3)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md333,dotrewrite-d333-4)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md333,dotrewrite-d333-5)
	#call replace(p3.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md333,dotrewrite-d333-6)
#endif
#break
#case 34
* path: (3, 4)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	if (count(Md333,1)) id Q.p4 = i10 - i11;
	if (count(Md333,1)) id p1.p4 = i13 - i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md333,dotrewrite-d333-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md333,dotrewrite-d333-4)
	#call replace(p1.p6,i1/2+i13+i7/2-i8/2,i,i1,i13,i7,i8,Md333,dotrewrite-d333-5)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md333,dotrewrite-d333-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q2
* path: (0, 9, 2)
#case 19
* path: (1, 9)
#case 29
* path: (2, 9)
#case 39
* path: (3, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md333,dotrewrite-d333-1)
	#call replace(p2.p9,i10-i2/2-i6/2+i7/2,i,i10,i2,i6,i7,Md333,dotrewrite-d333-2)
	#call replace(p3.p9,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md333,dotrewrite-d333-3)
	#call replace(p1.p9,-i1/2+i12-i13-i7/2+i8/2,i,i1,i12,i13,i7,i8,Md333,dotrewrite-d333-4)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	if (count(Md333,1)) id Q.p4 = i10 - i11;
	if (count(Md333,1)) id p1.p4 = i13 - i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md333,dotrewrite-d333-3)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md333,dotrewrite-d333-4)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md333,dotrewrite-d333-5)
	#call replace(p1.p5,-i1/2-i13+i14-i7/2+i8/2,i,i1,i13,i14,i7,i8,Md333,dotrewrite-d333-6)
#endif
#break
#case 25
* path: (2, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md333,dotrewrite-d333-1)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md333,dotrewrite-d333-2)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md333,dotrewrite-d333-3)
	#call replace(p1.p5,-i1/2-i13+i14-i7/2+i8/2,i,i1,i13,i14,i7,i8,Md333,dotrewrite-d333-4)
#endif
#break
#case Q7
* path: (0, 9, 1, 7)
#case 79
* path: (7, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p + p7.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md333,dotrewrite-d333-1)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md333,dotrewrite-d333-2)
	#call replace(p3.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md333,dotrewrite-d333-3)
	#call replace(p3.p9,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md333,dotrewrite-d333-4)
	#call replace(p1.p9,-i1/2+i12-i13-i7/2+i8/2,i,i1,i12,i13,i7,i8,Md333,dotrewrite-d333-5)
	#call replace(p7.p9,-`Q2'/2+i10-i2/2+i7/2+i9/2,i,i10,i2,i7,i9,Md333,dotrewrite-d333-6)
#endif
#break
#case 18
* path: (1, 0, 8)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p8.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-0)
	#call replace(p1.p8,-i1/2+i7/2-i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-1)
	#call replace(p2.p8,-i13-i2/2+i6/2-i7/2,i,i13,i2,i6,i7,Md333,dotrewrite-d333-2)
	#call replace(Q.p8,`Q2'/2-i10-i12+i6/2-i9/2,i,i10,i12,i6,i9,Md333,dotrewrite-d333-3)
	#call replace(p3.p8,-i14-i2/2+i4/2-i5/2+i6/2,i,i14,i2,i4,i5,i6,Md333,dotrewrite-d333-4)
#endif
#break
#case Q5
* path: (0, 1, 7, 5)
#case 15
* path: (1, 7, 5)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p5.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md333,dotrewrite-d333-1)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Md333,dotrewrite-d333-2)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md333,dotrewrite-d333-3)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md333,dotrewrite-d333-4)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md333,dotrewrite-d333-5)
	#call replace(p1.p5,-i1/2-i13+i14-i7/2+i8/2,i,i1,i13,i14,i7,i8,Md333,dotrewrite-d333-6)
#endif
#break
#case Q4
* path: (0, 9, 2, 4)
#case 49
* path: (4, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	if (count(Md333,1)) id Q.p4 = i10 - i11;
	if (count(Md333,1)) id p1.p4 = i13 - i14;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md333,dotrewrite-d333-3)
	#call replace(p2.p9,i10-i2/2-i6/2+i7/2,i,i10,i2,i6,i7,Md333,dotrewrite-d333-4)
	#call replace(p1.p9,-i1/2+i12-i13-i7/2+i8/2,i,i1,i12,i13,i7,i8,Md333,dotrewrite-d333-5)
	#call replace(p4.p9,i10-i11-i2/2+i3/2-i5/2+i7/2,i,i10,i11,i2,i3,i5,i7,Md333,dotrewrite-d333-6)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	if (count(Md333,1)) id Q.p4 = i10 - i11;
	if (count(Md333,1)) id p1.p4 = i13 - i14;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-2)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-3)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md333,dotrewrite-d333-4)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md333,dotrewrite-d333-5)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md333,dotrewrite-d333-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-0)
	#call replace(p1.p7,-i1/2-i7/2+i8/2,i,i1,i7,i8,Md333,dotrewrite-d333-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md333,dotrewrite-d333-2)
	#call replace(Q.p7,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md333,dotrewrite-d333-3)
	#call replace(p3.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md333,dotrewrite-d333-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q3
* path: (0, 2, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q6
* path: (0, 9, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 9, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md333,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p;
	.sort:momrewrite-Md333-5;
	if (count(Md333,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md333-4;
	if (count(Md333,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md333-3;
	if (count(Md333,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md333-2;
	if (count(Md333,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md333-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd333()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md333,dotrewrite-d333-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md333,dotrewrite-d333-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md333,dotrewrite-d333-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md333,dotrewrite-d333-3)
	#call replace(p1.p6,i1/2+i13+i7/2-i8/2,i,i1,i13,i7,i8,Md333,dotrewrite-d333-4)
#endif
#break
#endswitch
#break
*--#] d333 : 
*--#[ d328 :
#case Md328
#procedure SimpleDotd328()
if (count(Md328,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 9, 1, 7)
#case 79
* path: (7, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md328,dotrewrite-d328-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md328,dotrewrite-d328-1)
	#call replace(p1.p9,i11-i13+i14,i,i11,i13,i14,Md328,dotrewrite-d328-2)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md328,dotrewrite-d328-3)
	#call replace(p3.p9,i10-i3/2+i5/2-i6/2,i,i10,i3,i5,i6,Md328,dotrewrite-d328-4)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-5)
	#call replace(p7.p9,`Q2'/2+i1/2-i11-i12+i13-i14+i2/2-i6/2-i8/2,i,i1,i11,i12,i13,i14,i2,i6,i8,Md328,dotrewrite-d328-6)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p6.p - p7.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p6 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md328,dotrewrite-d328-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-2)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md328,dotrewrite-d328-3)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md328,dotrewrite-d328-4)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md328,dotrewrite-d328-5)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md328,dotrewrite-d328-6)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-7)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p6 = i13 - i14;
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md328,dotrewrite-d328-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md328,dotrewrite-d328-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-4)
	#call replace(Q.p2,-i1/2+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-5)
#endif
#break
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#case 39
* path: (3, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p9.p - p1.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md328,dotrewrite-d328-1)
	#call replace(p1.p9,i11-i13+i14,i,i11,i13,i14,Md328,dotrewrite-d328-2)
	#call replace(p3.p9,i10-i3/2+i5/2-i6/2,i,i10,i3,i5,i6,Md328,dotrewrite-d328-3)
	#call replace(p2.p9,-i1/2+i11+i12-i13+i14-i2/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i2,i8,i9,Md328,dotrewrite-d328-4)
	#call replace(Q.p2,-i1/2+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-5)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p4 = i12 - i13;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-2)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md328,dotrewrite-d328-3)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md328,dotrewrite-d328-4)
	#call replace(Q.p4,-i1/2-i10+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-5)
#endif
#break
#case 18
* path: (1, 0, 8)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p6 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md328,dotrewrite-d328-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-2)
	#call replace(p1.p8,-i1+i11+i12-i13+i14,i,i1,i11,i12,i13,i14,Md328,dotrewrite-d328-3)
	#call replace(p3.p8,i10-i13+i2/2-i4/2+i5/2-i6/2,i,i10,i13,i2,i4,i5,i6,Md328,dotrewrite-d328-4)
	#call replace(p6.p8,`Q2'/2-i13+i14+i2/2-i7/2-i9/2,i,i13,i14,i2,i7,i9,Md328,dotrewrite-d328-5)
	#call replace(Q.p8,`Q2'/2-i1/2+i12-i13+i14-i7/2+i8/2,i,i1,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 9, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q7
* path: (0, 7)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#case 16
* path: (1, 9, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p6.p - p7.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p6 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md328,dotrewrite-d328-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-2)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md328,dotrewrite-d328-3)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md328,dotrewrite-d328-4)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md328,dotrewrite-d328-5)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-6)
#endif
#break
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p4 = i12 - i13;
	if (count(Md328,1)) id p1.p6 = i13 - i14;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md328,dotrewrite-d328-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md328,dotrewrite-d328-4)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md328,dotrewrite-d328-5)
	#call replace(Q.p2,-i1/2+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-6)
	#call replace(Q.p4,-i1/2-i10+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-7)
#endif
#break
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p4 = i12 - i13;
	if (count(Md328,1)) id p1.p6 = i13 - i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md328,dotrewrite-d328-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-4)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md328,dotrewrite-d328-5)
	#call replace(Q.p4,-i1/2-i10+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-6)
#endif
#break
#case Q4
* path: (0, 7, 4)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p4 = i12 - i13;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-1)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md328,dotrewrite-d328-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md328,dotrewrite-d328-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md328,dotrewrite-d328-4)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-5)
	#call replace(Q.p4,-i1/2-i10+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-6)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case 19
* path: (1, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md328,dotrewrite-d328-0)
	#call replace(p1.p9,i11-i13+i14,i,i11,i13,i14,Md328,dotrewrite-d328-1)
	#call replace(p3.p9,i10-i3/2+i5/2-i6/2,i,i10,i3,i5,i6,Md328,dotrewrite-d328-2)
	#call replace(p1.p8,-i1+i11+i12-i13+i14,i,i1,i11,i12,i13,i14,Md328,dotrewrite-d328-3)
	#call replace(p8.p9,-i1/2+i12-i2/2+i8/2+i9/2,i,i1,i12,i2,i8,i9,Md328,dotrewrite-d328-4)
	#call replace(p3.p8,i10-i13+i2/2-i4/2+i5/2-i6/2,i,i10,i13,i2,i4,i5,i6,Md328,dotrewrite-d328-5)
	#call replace(Q.p8,`Q2'/2-i1/2+i12-i13+i14-i7/2+i8/2,i,i1,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-6)
#endif
#break
#case Q4
* path: (0, 9, 2, 4)
#case 49
* path: (4, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p9.p - p1.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	if (count(Md328,1)) id p1.p4 = i12 - i13;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md328,dotrewrite-d328-2)
	#call replace(p1.p9,i11-i13+i14,i,i11,i13,i14,Md328,dotrewrite-d328-3)
	#call replace(p2.p9,-i1/2+i11+i12-i13+i14-i2/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i2,i8,i9,Md328,dotrewrite-d328-4)
	#call replace(Q.p2,-i1/2+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-5)
	#call replace(Q.p4,-i1/2-i10+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-6)
	#call replace(p4.p9,-i1/2-i10+i11+i12-i13+i14-i2/2+i3/2-i5/2+i6/2+i8/2-i9/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i5,i6,i8,i9,Md328,dotrewrite-d328-7)
#endif
#break
#case Q5
* path: (0, 7, 5)
#case 15
* path: (1, 7, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-0)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md328,dotrewrite-d328-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md328,dotrewrite-d328-2)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md328,dotrewrite-d328-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md328,dotrewrite-d328-4)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-5)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p4.p - p7.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-0)
	#call replace(p1.p7,-i12+i13-i14,i,i12,i13,i14,Md328,dotrewrite-d328-1)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md328,dotrewrite-d328-2)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md328,dotrewrite-d328-3)
	#call replace(Q.p7,`Q2'/2+i1/2-i11-i12+i13-i14+i7/2-i8/2,i,i1,i11,i12,i13,i14,i7,i8,Md328,dotrewrite-d328-4)
	#call replace(Q.p2,-i1/2+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-5)
#endif
#break
#default
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md328,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md328-5;
	if (count(Md328,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md328-4;
	if (count(Md328,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md328-3;
	if (count(Md328,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md328-2;
	if (count(Md328,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md328-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd328()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md328,dotrewrite-d328-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md328,dotrewrite-d328-1)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md328,dotrewrite-d328-2)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md328,dotrewrite-d328-3)
	#call replace(Q.p2,-i1/2+i11+i12-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i12,i13,i14,i6,i7,i8,i9,Md328,dotrewrite-d328-4)
#endif
#break
#endswitch
#break
*--#] d328 : 
*--#[ d356 :
#case Md356
#procedure SimpleDotd356()
if (count(Md356,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	if (count(Md356,1)) id Q.p5 = i10 - i11;
	if (count(Md356,1)) id p1.p5 = i12 - i13;
	if (count(Md356,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-3)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-4)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md356,dotrewrite-d356-5)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md356,dotrewrite-d356-6)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md356,dotrewrite-d356-7)
#endif
#break
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	if (count(Md356,1)) id Q.p5 = i10 - i11;
	if (count(Md356,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md356,dotrewrite-d356-4)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md356,dotrewrite-d356-5)
	#call replace(Q.p6,-`Q2'/2+i11-i7/2+i9/2,i,i11,i7,i9,Md356,dotrewrite-d356-6)
#endif
#break
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = - p5.p - p8.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p8.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-1)
	#call replace(p1.p8,-i12+i13-i14,i,i12,i13,i14,Md356,dotrewrite-d356-2)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md356,dotrewrite-d356-3)
	#call replace(Q.p8,`Q2'/2-i10+i7/2-i9/2,i,i10,i7,i9,Md356,dotrewrite-d356-4)
	#call replace(p4.p8,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md356,dotrewrite-d356-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q7
* path: (0, 1, 9, 7)
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 17
* path: (1, 9, 7)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 49
* path: (4, 7, 9)
#case 77
* path: (7,)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	if (count(Md356,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-2)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md356,dotrewrite-d356-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md356,dotrewrite-d356-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md356,dotrewrite-d356-5)
#endif
#break
#case Q5
* path: (0, 9, 3, 5)
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p9.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	if (count(Md356,1)) id Q.p5 = i10 - i11;
	if (count(Md356,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-3)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md356,dotrewrite-d356-4)
	#call replace(p3.p9,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md356,dotrewrite-d356-5)
	#call replace(p1.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md356,dotrewrite-d356-6)
	#call replace(p5.p9,i10-i11-i3/2+i4/2-i6/2+i8/2,i,i10,i11,i3,i4,i6,i8,Md356,dotrewrite-d356-7)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	if (count(Md356,1)) id Q.p5 = i10 - i11;
	if (count(Md356,1)) id p1.p5 = i12 - i13;
	if (count(Md356,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-3)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-4)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md356,dotrewrite-d356-5)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md356,dotrewrite-d356-6)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md356,dotrewrite-d356-7)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q3
* path: (0, 9, 3)
#case 19
* path: (1, 9)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p9.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-1)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md356,dotrewrite-d356-2)
	#call replace(p3.p9,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md356,dotrewrite-d356-3)
	#call replace(p4.p9,i11-i4/2+i6/2-i7/2,i,i11,i4,i6,i7,Md356,dotrewrite-d356-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md356,dotrewrite-d356-5)
#endif
#break
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p8.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p8.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-0)
	#call replace(p1.p8,-i12+i13-i14,i,i12,i13,i14,Md356,dotrewrite-d356-1)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md356,dotrewrite-d356-2)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Md356,dotrewrite-d356-3)
	#call replace(Q.p6,-`Q2'/2+i11-i7/2+i9/2,i,i11,i7,i9,Md356,dotrewrite-d356-4)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md356,dotrewrite-d356-5)
	#call replace(Q.p8,`Q2'/2-i10+i7/2-i9/2,i,i10,i7,i9,Md356,dotrewrite-d356-6)
#endif
#break
#default
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md356,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md356-5;
	if (count(Md356,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md356-4;
	if (count(Md356,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md356-3;
	if (count(Md356,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md356-2;
	if (count(Md356,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md356-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd356()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md356,dotrewrite-d356-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md356,dotrewrite-d356-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md356,dotrewrite-d356-2)
	#call replace(Q.p6,-`Q2'/2+i11-i7/2+i9/2,i,i11,i7,i9,Md356,dotrewrite-d356-3)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md356,dotrewrite-d356-4)
#endif
#break
#endswitch
#break
*--#] d356 : 
*--#[ d196 :
#case Md196
#procedure SimpleDotd196()
if (count(Md196,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 1, 8)
#case Q1
* path: (0, 8, 1)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p8.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md196,dotrewrite-d196-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p1.p8,i1/2-i2/2+i8/2,i,i1,i2,i8,Md196,dotrewrite-d196-2)
	#call replace(p3.p8,-i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Md196,dotrewrite-d196-3)
	#call replace(p1.p3,i2/2-i4/2+i5/2-i6/2+i9,i,i2,i4,i5,i6,i9,Md196,dotrewrite-d196-4)
#endif
#break
#case Q5
* path: (0, 7, 5)
#case 15
* path: (1, 7, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-0)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md196,dotrewrite-d196-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md196,dotrewrite-d196-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md196,dotrewrite-d196-4)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md196,dotrewrite-d196-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-2)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md196,dotrewrite-d196-3)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md196,dotrewrite-d196-4)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md196,dotrewrite-d196-5)
#endif
#break
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case 28
* path: (2, 8)
#case 38
* path: (3, 2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p8.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md196,dotrewrite-d196-2)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-3)
	#call replace(p3.p8,-i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Md196,dotrewrite-d196-4)
#endif
#break
#case Q4
* path: (0, 7, 4)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-1)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md196,dotrewrite-d196-2)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md196,dotrewrite-d196-3)
	#call replace(Q.p4,i1/2+i6/2-i7/2-i8/2-i9,i,i1,i6,i7,i8,i9,Md196,dotrewrite-d196-4)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md196,dotrewrite-d196-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md196,dotrewrite-d196-1)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-2)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-3)
	#call replace(Q.p4,i1/2+i6/2-i7/2-i8/2-i9,i,i1,i6,i7,i8,i9,Md196,dotrewrite-d196-4)
	#call replace(p1.p4,i1/2+i4/2-i5/2+i6/2-i8/2-i9,i,i1,i4,i5,i6,i8,i9,Md196,dotrewrite-d196-5)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-1)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md196,dotrewrite-d196-2)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md196,dotrewrite-d196-4)
#endif
#break
#case Q7
* path: (0, 8, 1, 7)
#case 78
* path: (7, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p8.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md196,dotrewrite-d196-2)
	#call replace(p3.p8,-i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Md196,dotrewrite-d196-3)
	#call replace(p7.p8,`Q2'/2-i1/2+i2/2-i6/2,i,i1,i2,i6,Md196,dotrewrite-d196-4)
#endif
#break
#case Q4
* path: (0, 8, 2, 4)
#case 48
* path: (4, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p8.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p2.p8,i1/2-i2/2-i8/2,i,i1,i2,i8,Md196,dotrewrite-d196-2)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-3)
	#call replace(Q.p4,i1/2+i6/2-i7/2-i8/2-i9,i,i1,i6,i7,i8,i9,Md196,dotrewrite-d196-4)
	#call replace(p4.p8,i1/2-i2/2+i3/2-i5/2+i6/2-i8/2-i9,i,i1,i2,i3,i5,i6,i8,i9,Md196,dotrewrite-d196-5)
#endif
#break
#case Q7
* path: (0, 7)
#case 17
* path: (1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p - p7.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md196,dotrewrite-d196-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-2)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md196,dotrewrite-d196-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md196,dotrewrite-d196-4)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p7,`Q2'/2-i1/2+i7/2,i,i1,i7,Md196,dotrewrite-d196-1)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md196,dotrewrite-d196-2)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md196,dotrewrite-d196-3)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-4)
	#call replace(Q.p4,i1/2+i6/2-i7/2-i8/2-i9,i,i1,i6,i7,i8,i9,Md196,dotrewrite-d196-5)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-1)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md196,dotrewrite-d196-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md196,dotrewrite-d196-3)
	#call replace(Q.p4,i1/2+i6/2-i7/2-i8/2-i9,i,i1,i6,i7,i8,i9,Md196,dotrewrite-d196-4)
#endif
#break
#case Q6
* path: (0, 1, 8, 6)
#case 16
* path: (1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md196,dotrewrite-d196-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-2)
	#call replace(p1.p6,`Q2'/2+i2/2-i7/2-i8/2,i,i2,i7,i8,Md196,dotrewrite-d196-3)
	#call replace(p1.p3,i2/2-i4/2+i5/2-i6/2+i9,i,i2,i4,i5,i6,i9,Md196,dotrewrite-d196-4)
#endif
#break
#case 25
* path: (2, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-1)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-2)
	#call replace(Q.p5,-`Q2'/2-i6/2+i8/2+i9,i,i6,i8,i9,Md196,dotrewrite-d196-3)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md196,dotrewrite-d196-4)
#endif
#break
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-2)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md196,dotrewrite-d196-3)
	#call replace(Q.p4,i1/2+i6/2-i7/2-i8/2-i9,i,i1,i6,i7,i8,i9,Md196,dotrewrite-d196-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p2.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md196,dotrewrite-d196-0)
	#call replace(p1.p2,i1/2+i2/2-i8/2,i,i1,i2,i8,Md196,dotrewrite-d196-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-2)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-3)
	#call replace(p1.p3,i2/2-i4/2+i5/2-i6/2+i9,i,i2,i4,i5,i6,i9,Md196,dotrewrite-d196-4)
#endif
#break
#default
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md196,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p7.p;
	.sort:momrewrite-Md196-5;
	if (count(Md196,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md196-4;
	if (count(Md196,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md196-3;
	if (count(Md196,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md196-2;
	if (count(Md196,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md196-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd196()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md196,dotrewrite-d196-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md196,dotrewrite-d196-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md196,dotrewrite-d196-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md196,dotrewrite-d196-3)
	#call replace(Q.p2,i1/2+i6/2-i7/2-i8/2,i,i1,i6,i7,i8,Md196,dotrewrite-d196-4)
#endif
#break
#endswitch
#break
*--#] d196 : 
*--#[ d324 :
#case Md324
#procedure SimpleDotd324()
if (count(Md324,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 68
* path: (6, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-2)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-3)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-4)
	#call replace(p6.p7,-i1/2+i13-i2/2+i6/2+i7/2,i,i1,i13,i2,i6,i7,Md324,dotrewrite-d324-5)
	#call replace(p5.p8,i12-i14-i4/2+i5/2+i7/2,i,i12,i14,i4,i5,i7,Md324,dotrewrite-d324-6)
	#call replace(p6.p8,`Q2'/2-i11+i2/2-i6/2-i8/2,i,i11,i2,i6,i8,Md324,dotrewrite-d324-7)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md324,dotrewrite-d324-8)
#endif
#break
#case Q4
* path: (0, 9, 2, 4)
#case 49
* path: (4, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-2)
	#call replace(p5.p9,i12-i3/2+i5/2+i6/2,i,i12,i3,i5,i6,Md324,dotrewrite-d324-3)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-4)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-5)
	#call replace(p2.p4,-i11+i13-i14-i2/2+i3/2-i4/2-i6/2+i7/2-i8/2+i9/2,i,i11,i13,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
	#call replace(p4.p9,-`Q2'/2-i1/2+i10-i11-i12+i13-i2/2+i3/2-i5/2-i6/2+i7/2+i9/2,i,i1,i10,i11,i12,i13,i2,i3,i5,i6,i7,i9,Md324,dotrewrite-d324-7)
#endif
#break
#case Q9
* path: (0, 8, 9)
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-1)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p5.p9,i12-i3/2+i5/2+i6/2,i,i12,i3,i5,i6,Md324,dotrewrite-d324-3)
	#call replace(p5.p8,i12-i14-i4/2+i5/2+i7/2,i,i12,i14,i4,i5,i7,Md324,dotrewrite-d324-4)
	#call replace(p1.p8,-i1/2+i10-i11-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p1.p9,-i1/2+i10-i11+i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-0)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-1)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p3.p4,i1/2-i13+i2/2-i3/2-i4/2,i,i1,i13,i2,i3,i4,Md324,dotrewrite-d324-3)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-4)
	#call replace(p1.p4,i1/2-i11-i14-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-0)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-2)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(p2.p3,i11+i14-i2/2-i3/2+i4/2+i6/2-i7/2+i8/2-i9/2,i,i11,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-0)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-1)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p1.p4,i1/2-i11-i14-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(p2.p4,-i11+i13-i14-i2/2+i3/2-i4/2-i6/2+i7/2-i8/2+i9/2,i,i11,i13,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
#endif
#break
#case Q3
* path: (0, 6, 3)
#case 26
* path: (2, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + p2.p + p6.p - p7.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-1)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p2.p6,i11-i2/2+i8/2-i9/2,i,i11,i2,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-4)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p6.p7,-i1/2+i13-i2/2+i6/2+i7/2,i,i1,i13,i2,i6,i7,Md324,dotrewrite-d324-6)
	#call replace(p3.p7,-i1/2+i13-i2/2+i4/2-i5/2+i6/2,i,i1,i13,i2,i4,i5,i6,Md324,dotrewrite-d324-7)
	#call replace(p2.p3,i11+i14-i2/2-i3/2+i4/2+i6/2-i7/2+i8/2-i9/2,i,i11,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-8)
#endif
#break
#case 58
* path: (5, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-0)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-1)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-3)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-4)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p5.p8,i12-i14-i4/2+i5/2+i7/2,i,i12,i14,i4,i5,i7,Md324,dotrewrite-d324-6)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md324,dotrewrite-d324-7)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p7.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p4.p7,-i4/2+i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-1)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-3)
	#call replace(p6.p7,-i1/2+i13-i2/2+i6/2+i7/2,i,i1,i13,i2,i6,i7,Md324,dotrewrite-d324-4)
	#call replace(p6.p8,`Q2'/2-i11+i2/2-i6/2-i8/2,i,i11,i2,i6,i8,Md324,dotrewrite-d324-5)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md324,dotrewrite-d324-6)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-7)
	#call replace(p4.p6,i1/2-i13+i2/2-i3/2+i5/2-i7/2,i,i1,i13,i2,i3,i5,i7,Md324,dotrewrite-d324-8)
	#call replace(p4.p8,-`Q2'/2-i1/2+i10-i12+i14+i4/2-i5/2+i8/2,i,i1,i10,i12,i14,i4,i5,i8,Md324,dotrewrite-d324-9)
#endif
#break
#case Q7
* path: (0, 6, 5, 7)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + p2.p + p6.p - p7.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-1)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-2)
	#call replace(p2.p6,i11-i2/2+i8/2-i9/2,i,i11,i2,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-4)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-5)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md324,dotrewrite-d324-6)
	#call replace(p6.p7,-i1/2+i13-i2/2+i6/2+i7/2,i,i1,i13,i2,i6,i7,Md324,dotrewrite-d324-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-2)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-3)
	#call replace(p4.p6,i1/2-i13+i2/2-i3/2+i5/2-i7/2,i,i1,i13,i2,i3,i5,i7,Md324,dotrewrite-d324-4)
	#call replace(p1.p4,i1/2-i11-i14-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p1.p6,i1/2+i11-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#case 39
* path: (3, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-1)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p3.p9,`Q2'/2+i12-i3/2+i5/2-i9/2,i,i12,i3,i5,i9,Md324,dotrewrite-d324-3)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
	#call replace(p1.p9,-i1/2+i10-i11+i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p2.p3,i11+i14-i2/2-i3/2+i4/2+i6/2-i7/2+i8/2-i9/2,i,i11,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-2)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-3)
	#call replace(p5.p9,i12-i3/2+i5/2+i6/2,i,i12,i3,i5,i6,Md324,dotrewrite-d324-4)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-5)
	#call replace(p5.p8,i12-i14-i4/2+i5/2+i7/2,i,i12,i14,i4,i5,i7,Md324,dotrewrite-d324-6)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md324,dotrewrite-d324-7)
	#call replace(p7.p9,`Q2'/2+i1/2-i10+i11-i13+i2/2-i7/2-i9/2,i,i1,i10,i11,i13,i2,i7,i9,Md324,dotrewrite-d324-8)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p - p1.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-1)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p2.p6,i11-i2/2+i8/2-i9/2,i,i11,i2,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(p1.p6,i1/2+i11-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p2.p3,i11+i14-i2/2-i3/2+i4/2+i6/2-i7/2+i8/2-i9/2,i,i11,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#case 38
* path: (3, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-0)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p5.p8,i12-i14-i4/2+i5/2+i7/2,i,i12,i14,i4,i5,i7,Md324,dotrewrite-d324-3)
	#call replace(p1.p8,-i1/2+i10-i11-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-5)
	#call replace(p3.p8,`Q2'/2-i11+i12-i14+i2/2-i4/2+i5/2-i6/2+i7/2-i8/2,i,i11,i12,i14,i2,i4,i5,i6,i7,i8,Md324,dotrewrite-d324-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q2
* path: (0, 9, 2)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-1)
	#call replace(p5.p9,i12-i3/2+i5/2+i6/2,i,i12,i3,i5,i6,Md324,dotrewrite-d324-2)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-3)
	#call replace(p1.p9,-i1/2+i10-i11+i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
#endif
#break
#case 48
* path: (4, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p7.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-0)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p1.p4,i1/2-i11-i14-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(p1.p8,-i1/2+i10-i11-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
	#call replace(p4.p8,-`Q2'/2-i1/2+i10-i12+i14+i4/2-i5/2+i8/2,i,i1,i10,i12,i14,i4,i5,i8,Md324,dotrewrite-d324-5)
	#call replace(p2.p4,-i11+i13-i14-i2/2+i3/2-i4/2-i6/2+i7/2-i8/2+i9/2,i,i11,i13,i14,i2,i3,i4,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-1)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p3.p4,i1/2-i13+i2/2-i3/2-i4/2,i,i1,i13,i2,i3,i4,Md324,dotrewrite-d324-3)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md324,dotrewrite-d324-4)
	#call replace(p4.p6,i1/2-i13+i2/2-i3/2+i5/2-i7/2,i,i1,i13,i2,i3,i5,i7,Md324,dotrewrite-d324-5)
	#call replace(p1.p4,i1/2-i11-i14-i6/2+i7/2-i8/2+i9/2,i,i1,i11,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
	#call replace(p1.p6,i1/2+i11-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-7)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-8)
#endif
#break
#case Q8
* path: (0, 8)
#case 18
* path: (1, 8)
#case 28
* path: (2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md324,dotrewrite-d324-0)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md324,dotrewrite-d324-1)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-2)
	#call replace(p5.p8,i12-i14-i4/2+i5/2+i7/2,i,i12,i14,i4,i5,i7,Md324,dotrewrite-d324-3)
	#call replace(p1.p8,-i1/2+i10-i11-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i11,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
#endif
#break
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-0)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-1)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(p2.p7,i11-i13+i2/2+i8/2-i9/2,i,i11,i13,i2,i8,i9,Md324,dotrewrite-d324-3)
	#call replace(p1.p7,-i1/2+i11+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = - p8.p + p9.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md324,dotrewrite-d324-1)
	#call replace(Q.p3,`Q2'/2+i12+i6/2-i9/2,i,i12,i6,i9,Md324,dotrewrite-d324-2)
	#call replace(Q.p7,`Q2'/2-i10+i11+i6/2-i9/2,i,i10,i11,i6,i9,Md324,dotrewrite-d324-3)
	#call replace(p1.p7,-i1/2+i11+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
	#call replace(p3.p7,-i1/2+i13-i2/2+i4/2-i5/2+i6/2,i,i1,i13,i2,i4,i5,i6,Md324,dotrewrite-d324-5)
	#call replace(p1.p3,i1/2+i11-i13+i14+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i14,i6,i7,i8,i9,Md324,dotrewrite-d324-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md324,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p - p5.p;
	.sort:momrewrite-Md324-5;
	if (count(Md324,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md324-4;
	if (count(Md324,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md324-3;
	if (count(Md324,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md324-2;
	if (count(Md324,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p - p1.p;
	.sort:momrewrite-Md324-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd324()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md324,dotrewrite-d324-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md324,dotrewrite-d324-1)
	#call replace(p2.p6,i11-i2/2+i8/2-i9/2,i,i11,i2,i8,i9,Md324,dotrewrite-d324-2)
	#call replace(p2.p5,i14-i3/2+i4/2+i6/2-i7/2,i,i14,i3,i4,i6,i7,Md324,dotrewrite-d324-3)
	#call replace(p1.p6,i1/2+i11-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i11,i13,i6,i7,i8,i9,Md324,dotrewrite-d324-4)
#endif
#break
#endswitch
#break
*--#] d324 : 
*--#[ d326 :
#case Md326
#procedure SimpleDotd326()
if (count(Md326,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p2.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 6, 3, 4)
#case 34
* path: (3, 4)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p2} = + p3.p + p4.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	if (count(Md326,1)) id Q.p4 = i10 - i11;
	if (count(Md326,1)) id p2.p4 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md326,dotrewrite-d326-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md326,dotrewrite-d326-4)
	#call replace(p2.p6,i12-i2/2+i8/2-i9/2,i,i12,i2,i8,i9,Md326,dotrewrite-d326-5)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i7/2,i,i1,i3,i5,i7,Md326,dotrewrite-d326-6)
#endif
#break
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p1.p - p4.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p7.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	#call replace(p1.p7,-i1/2+i6/2-i7/2,i,i1,i6,i7,Md326,dotrewrite-d326-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md326,dotrewrite-d326-1)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md326,dotrewrite-d326-2)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md326,dotrewrite-d326-3)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md326,dotrewrite-d326-4)
	#call replace(p2.p5,-i12+i14+i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md326,dotrewrite-d326-5)
	#call replace(p2.p7,i12-i13-i2/2+i8/2-i9/2,i,i12,i13,i2,i8,i9,Md326,dotrewrite-d326-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p1.p - p4.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p1.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	if (count(Md326,1)) id Q.p4 = i10 - i11;
	if (count(Md326,1)) id p2.p4 = i13 - i14;
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md326,dotrewrite-d326-3)
	#call replace(p1.p6,i1/2+i6/2-i7/2,i,i1,i6,i7,Md326,dotrewrite-d326-4)
	#call replace(p2.p6,i12-i2/2+i8/2-i9/2,i,i12,i2,i8,i9,Md326,dotrewrite-d326-5)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i7/2,i,i1,i3,i5,i7,Md326,dotrewrite-d326-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q9
* path: (0, 9)
#case Q2
* path: (0, 9, 2)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md326,dotrewrite-d326-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md326,dotrewrite-d326-2)
	#call replace(p1.p9,-i1/2+i10-i6/2+i7/2,i,i1,i10,i6,i7,Md326,dotrewrite-d326-3)
	#call replace(p3.p9,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md326,dotrewrite-d326-4)
#endif
#break
#case 49
* path: (4, 1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p2} = + p1.p - p4.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	if (count(Md326,1)) id Q.p4 = i10 - i11;
	if (count(Md326,1)) id p2.p4 = i13 - i14;
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md326,dotrewrite-d326-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md326,dotrewrite-d326-4)
	#call replace(p1.p9,-i1/2+i10-i6/2+i7/2,i,i1,i10,i6,i7,Md326,dotrewrite-d326-5)
	#call replace(p4.p9,-i1/2+i10-i11+i3/2-i5/2+i7/2,i,i1,i10,i11,i3,i5,i7,Md326,dotrewrite-d326-6)
#endif
#break
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md326,dotrewrite-d326-1)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md326,dotrewrite-d326-2)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md326,dotrewrite-d326-3)
	#call replace(p2.p5,-i12+i14+i2/2-i8/2+i9/2,i,i12,i14,i2,i8,i9,Md326,dotrewrite-d326-4)
#endif
#break
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p7.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-0)
	#call replace(p1.p7,-i1/2+i6/2-i7/2,i,i1,i6,i7,Md326,dotrewrite-d326-1)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md326,dotrewrite-d326-2)
	#call replace(p3.p7,-i1/2+i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md326,dotrewrite-d326-3)
	#call replace(p2.p7,i12-i13-i2/2+i8/2-i9/2,i,i12,i13,i2,i8,i9,Md326,dotrewrite-d326-4)
#endif
#break
#case 28
* path: (2, 0, 8)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-0)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md326,dotrewrite-d326-1)
	#call replace(Q.p8,`Q2'/2-i12-i6/2+i9/2,i,i12,i6,i9,Md326,dotrewrite-d326-2)
	#call replace(p1.p8,-i1/2+i10-i13-i6/2+i7/2,i,i1,i10,i13,i6,i7,Md326,dotrewrite-d326-3)
	#call replace(p3.p8,i11-i14-i3/2+i5/2-i6/2,i,i11,i14,i3,i5,i6,Md326,dotrewrite-d326-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 9, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 39
* path: (3, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md326,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md326-5;
	if (count(Md326,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md326-4;
	if (count(Md326,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md326-3;
	if (count(Md326,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p1.p;
	.sort:momrewrite-Md326-2;
	if (count(Md326,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md326-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd326()
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md326,dotrewrite-d326-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md326,dotrewrite-d326-1)
	#call replace(p1.p6,i1/2+i6/2-i7/2,i,i1,i6,i7,Md326,dotrewrite-d326-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md326,dotrewrite-d326-3)
	#call replace(p2.p6,i12-i2/2+i8/2-i9/2,i,i12,i2,i8,i9,Md326,dotrewrite-d326-4)
#endif
#break
#endswitch
#break
*--#] d326 : 
*--#[ d393 :
#case Md393
#procedure SimpleDotd393()
if (count(Md393,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p1^n? = i12^n;
	id Q.p5^n? = i13^n;
	id Q.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p10.p + p6.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p4.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p5.p - p9.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p9 = -i13 - i14;
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md393,dotrewrite-d393-1)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-2)
	#call replace(p4.p9,-i10/2+i4/2+i9/2,i,i10,i4,i9,Md393,dotrewrite-d393-3)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-4)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md393,dotrewrite-d393-5)
	#call replace(p1.p9,i1/2-i11+i5/2-i6/2,i,i1,i11,i5,i6,Md393,dotrewrite-d393-6)
	#call replace(p4.p5,i10/2-i11+i3/2-i4/2+i7/2-i8/2-i9/2,i,i10,i11,i3,i4,i7,i8,i9,Md393,dotrewrite-d393-7)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 19
* path: (1, 4, 9)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p10.p + p6.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p4.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p7.p - p9.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p9 = -i13 - i14;
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md393,dotrewrite-d393-1)
	#call replace(p4.p9,-i10/2+i4/2+i9/2,i,i10,i4,i9,Md393,dotrewrite-d393-2)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-3)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md393,dotrewrite-d393-4)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md393,dotrewrite-d393-5)
	#call replace(p1.p9,i1/2-i11+i5/2-i6/2,i,i1,i11,i5,i6,Md393,dotrewrite-d393-6)
#endif
#break
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p10.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p - p8.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p6 = -i12 - i13;
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-1)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-2)
	#call replace(p6.p8,-i10/2+i6/2+i8/2,i,i10,i6,i8,Md393,dotrewrite-d393-3)
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md393,dotrewrite-d393-4)
	#call replace(p6.p7,-i11+i5/2+i7/2-i9/2,i,i11,i5,i7,i9,Md393,dotrewrite-d393-5)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md393,dotrewrite-d393-6)
	#call replace(p5.p8,i1/2+i10/2-i11+i3/2-i4/2-i6/2-i8/2,i,i1,i10,i11,i3,i4,i6,i8,Md393,dotrewrite-d393-7)
#endif
#break
#case 58
* path: (5, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p10.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p + p6.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-0)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-1)
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md393,dotrewrite-d393-2)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md393,dotrewrite-d393-3)
	#call replace(p1.p8,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md393,dotrewrite-d393-4)
	#call replace(p5.p8,i1/2+i10/2-i11+i3/2-i4/2-i6/2-i8/2,i,i1,i10,i11,i3,i4,i6,i8,Md393,dotrewrite-d393-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p10.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p + p6.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p5.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p1.p - p6.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p6 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md393,dotrewrite-d393-1)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-2)
	#call replace(p1.p2,i1/2+i12+i3/2-i4/2,i,i1,i12,i3,i4,Md393,dotrewrite-d393-3)
	#call replace(p2.p7,i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md393,dotrewrite-d393-4)
	#call replace(p6.p7,-i11+i5/2+i7/2-i9/2,i,i11,i5,i7,i9,Md393,dotrewrite-d393-5)
	#call replace(p2.p6,i10/2-i11-i12-i13+i5/2-i6/2+i7/2-i8/2-i9/2,i,i10,i11,i12,i13,i5,i6,i7,i8,i9,Md393,dotrewrite-d393-6)
#endif
#break
#case Q5
* path: (0, 2, 1, 5)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p10.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p + p6.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md393,dotrewrite-d393-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-1)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-2)
	#call replace(p1.p2,i1/2+i12+i3/2-i4/2,i,i1,i12,i3,i4,Md393,dotrewrite-d393-3)
	#call replace(p2.p7,i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md393,dotrewrite-d393-4)
	#call replace(p2.p5,-i1/2-i10/2+i11+i13-i3/2+i4/2-i5/2+i6/2-i7/2+i8/2+i9/2,i,i1,i10,i11,i13,i3,i4,i5,i6,i7,i8,i9,Md393,dotrewrite-d393-5)
#endif
#break
#case 510
* path: (5, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p10.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p5.p - p9.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p10.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p6 = -i12 - i13;
	if (count(Md393,1)) id Q.p9 = -i13 - i14;
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-2)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-3)
	#call replace(p6.p10,i10/2+i6/2-i8/2,i,i10,i6,i8,Md393,dotrewrite-d393-4)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md393,dotrewrite-d393-5)
	#call replace(p6.p9,-i1/2+i11+i6/2-i7/2+i9/2,i,i1,i11,i6,i7,i9,Md393,dotrewrite-d393-6)
	#call replace(Q.p10,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md393,dotrewrite-d393-7)
	#call replace(p5.p10,-i10/2+i11-i3/2+i4/2-i5/2+i8/2,i,i10,i11,i3,i4,i5,i8,Md393,dotrewrite-d393-8)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p10.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p5.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p - p8.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p1.p - p6.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p6 = -i12 - i13;
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-1)
	#call replace(p6.p8,-i10/2+i6/2+i8/2,i,i10,i6,i8,Md393,dotrewrite-d393-2)
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md393,dotrewrite-d393-3)
	#call replace(p6.p7,-i11+i5/2+i7/2-i9/2,i,i11,i5,i7,i9,Md393,dotrewrite-d393-4)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md393,dotrewrite-d393-5)
	#call replace(p1.p8,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md393,dotrewrite-d393-6)
#endif
#break
#case Q3
* path: (0, 2, 3)
#case Q7
* path: (0, 2, 3, 7)
#case Q3
* path: (0, 3)
#case Q7
* path: (0, 3, 7)
#case 13
* path: (1, 2, 3)
#case 23
* path: (2, 3)
#case 27
* path: (2, 3, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p + p6.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p5.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p1.p - p6.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	if (count(Md393,1)) id Q.p6 = -i12 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md393,dotrewrite-d393-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md393,dotrewrite-d393-2)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md393,dotrewrite-d393-4)
	#call replace(p6.p7,-i11+i5/2+i7/2-i9/2,i,i11,i5,i7,i9,Md393,dotrewrite-d393-5)
	#call replace(p3.p6,-i10/2+i11-i5/2+i6/2-i7/2+i8/2+i9/2,i,i10,i11,i5,i6,i7,i8,i9,Md393,dotrewrite-d393-6)
#endif
#break
#case 35
* path: (3, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p + p6.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md393,dotrewrite-d393-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md393,dotrewrite-d393-1)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md393,dotrewrite-d393-3)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-4)
	#call replace(p3.p5,i1/2+i10/2-i11+i3/2-i4/2+i5/2-i6/2+i7/2-i8/2-i9/2,i,i1,i10,i11,i3,i4,i5,i6,i7,i8,i9,Md393,dotrewrite-d393-5)
#endif
#break
#default
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 17
* path: (1, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md393,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p10.p + p6.p;
	.sort:momrewrite-Md393-6;
	if (count(Md393,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p + p9.p;
	.sort:momrewrite-Md393-5;
	if (count(Md393,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md393-4;
	if (count(Md393,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md393-3;
	if (count(Md393,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md393-2;
	if (count(Md393,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md393-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd393()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md393,dotrewrite-d393-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md393,dotrewrite-d393-1)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md393,dotrewrite-d393-2)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md393,dotrewrite-d393-3)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md393,dotrewrite-d393-4)
	#call replace(p4.p5,i10/2-i11+i3/2-i4/2+i7/2-i8/2-i9/2,i,i10,i11,i3,i4,i7,i8,i9,Md393,dotrewrite-d393-5)
#endif
#break
#endswitch
#break
*--#] d393 : 
*--#[ d394 :
#case Md394
#procedure SimpleDotd394()
if (count(Md394,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p4^n? = i11^n;
	id Q.p7^n? = i12^n;
	id Q.p9^n? = i13^n;
	id p2.p9^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 2, 4)
#case Q9
* path: (0, 2, 4, 9)
#case 24
* path: (2, 4)
#case 29
* path: (2, 4, 9)
#case 34
* path: (3, 2, 4)
#case 44
* path: (4,)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p4.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p4.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-1)
	#call replace(p2.p4,i1/2-i2/2-i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-2)
	#call replace(p4.p9,-i10/2+i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-3)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-4)
	#call replace(p2.p5,-i12-i14-i3/2-i7/2+i8/2,i,i12,i14,i3,i7,i8,Md394,dotrewrite-d394-5)
	#call replace(p4.p5,-i1/2+i11-i13+i14+i2/2-i5/2+i6/2+i7/2-i8/2,i,i1,i11,i13,i14,i2,i5,i6,i7,i8,Md394,dotrewrite-d394-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p3.p + p8.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + p1.p - p4.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p10.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p2} = + p10.p + p4.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(p1.p4,i1/2-i2/2+i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-1)
	#call replace(p4.p10,-i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-2)
	#call replace(p6.p10,i10/2+i6/2-i8/2,i,i10,i6,i8,Md394,dotrewrite-d394-3)
	#call replace(Q.p1,`Q2'/2+i11+i2/2-i3/2,i,i11,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p1.p10,-i1/2-i10/2+i14+i2/2+i9/2,i,i1,i10,i14,i2,i9,Md394,dotrewrite-d394-5)
	#call replace(Q.p6,`Q2'/2-i11+i12+i13-i2/2+i3/2,i,i11,i12,i13,i2,i3,Md394,dotrewrite-d394-6)
	#call replace(p1.p6,`Q2'/2-i1/2+i12+i13+i5/2-i6/2,i,i1,i12,i13,i5,i6,Md394,dotrewrite-d394-7)
	#call replace(p4.p6,i13-i14-i4/2+i5/2-i6/2-i7/2+i8/2,i,i13,i14,i4,i5,i6,i7,i8,Md394,dotrewrite-d394-8)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p2} = - p5.p - p7.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-3)
	#call replace(p2.p7,i12+i3/2+i7/2-i8/2,i,i12,i3,i7,i8,Md394,dotrewrite-d394-4)
	#call replace(p2.p10,-i1/2+i14+i2/2+i4/2,i,i1,i14,i2,i4,Md394,dotrewrite-d394-5)
	#call replace(p2.p5,-i12-i14-i3/2-i7/2+i8/2,i,i12,i14,i3,i7,i8,Md394,dotrewrite-d394-6)
	#call replace(p5.p10,i1/2-i11+i13-i14-i2/2-i6/2+i8/2-i9/2,i,i1,i11,i13,i14,i2,i6,i8,i9,Md394,dotrewrite-d394-7)
	#call replace(p7.p10,-i1/2-i10/2+i11-i13+i14+i2/2+i4/2+i6/2-i8/2,i,i1,i10,i11,i13,i14,i2,i4,i6,i8,Md394,dotrewrite-d394-8)
#endif
#break
#case Q3
* path: (0, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + Q.p - p3.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p + p8.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p8.p - p3.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id p3.p9 = i13 - i14;
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md394,dotrewrite-d394-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md394,dotrewrite-d394-3)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md394,dotrewrite-d394-4)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-5)
	#call replace(Q.p8,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md394,dotrewrite-d394-6)
	#call replace(p8.p9,i13-i14+i5/2-i7/2-i9/2,i,i13,i14,i5,i7,i9,Md394,dotrewrite-d394-7)
	#call replace(p3.p10,i1/2-i11+i13-i14-i2/2-i4/2,i,i1,i11,i13,i14,i2,i4,Md394,dotrewrite-d394-8)
#endif
#break
#case 45
* path: (4, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p4.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + p1.p - p4.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	#call replace(p1.p4,i1/2-i2/2+i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-1)
	#call replace(p4.p9,-i10/2+i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-2)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-3)
	#call replace(Q.p1,`Q2'/2+i11+i2/2-i3/2,i,i11,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p1.p9,-i10/2+i14+i4/2+i9/2,i,i10,i14,i4,i9,Md394,dotrewrite-d394-5)
	#call replace(p1.p5,-i1/2+i11-i12-i13+i2/2-i3/2-i5/2+i6/2,i,i1,i11,i12,i13,i2,i3,i5,i6,Md394,dotrewrite-d394-6)
	#call replace(p4.p5,-i1/2+i11-i13+i14+i2/2-i5/2+i6/2+i7/2-i8/2,i,i1,i11,i13,i14,i2,i5,i6,i7,i8,Md394,dotrewrite-d394-7)
#endif
#break
#case 510
* path: (5, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + Q.p - p3.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p10.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-2)
	#call replace(p6.p10,i10/2+i6/2-i8/2,i,i10,i6,i8,Md394,dotrewrite-d394-3)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-4)
	#call replace(Q.p6,`Q2'/2-i11+i12+i13-i2/2+i3/2,i,i11,i12,i13,i2,i3,Md394,dotrewrite-d394-5)
	#call replace(p5.p6,i1/2-i11-i2/2+i3/2-i5/2-i6/2,i,i1,i11,i2,i3,i5,i6,Md394,dotrewrite-d394-6)
	#call replace(p6.p9,i10/2+i13-i14-i4/2+i5/2-i7/2,i,i10,i13,i14,i4,i5,i7,Md394,dotrewrite-d394-7)
	#call replace(p5.p10,i1/2-i11+i13-i14-i2/2-i6/2+i8/2-i9/2,i,i1,i11,i13,i14,i2,i6,i8,i9,Md394,dotrewrite-d394-8)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 99
* path: (9,)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p3.p + p8.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p + p8.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-1)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md394,dotrewrite-d394-2)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-3)
	#call replace(Q.p8,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p2.p10,-i1/2+i14+i2/2+i4/2,i,i1,i14,i2,i4,Md394,dotrewrite-d394-5)
	#call replace(p2.p8,`Q2'/2+i12-i2/2+i7/2-i8/2,i,i12,i2,i7,i8,Md394,dotrewrite-d394-6)
	#call replace(p8.p9,i13-i14+i5/2-i7/2-i9/2,i,i13,i14,i5,i7,i9,Md394,dotrewrite-d394-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p + p9.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p2.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-1)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-2)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-3)
	#call replace(Q.p1,`Q2'/2+i11+i2/2-i3/2,i,i11,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p1.p9,-i10/2+i14+i4/2+i9/2,i,i10,i14,i4,i9,Md394,dotrewrite-d394-5)
	#call replace(p2.p5,-i12-i14-i3/2-i7/2+i8/2,i,i12,i14,i3,i7,i8,Md394,dotrewrite-d394-6)
	#call replace(p1.p5,-i1/2+i11-i12-i13+i2/2-i3/2-i5/2+i6/2,i,i1,i11,i12,i13,i2,i3,i5,i6,Md394,dotrewrite-d394-7)
#endif
#break
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + Q.p - p3.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p - p8.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	#call replace(p6.p8,-i10/2+i6/2+i8/2,i,i10,i6,i8,Md394,dotrewrite-d394-1)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-2)
	#call replace(Q.p8,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md394,dotrewrite-d394-3)
	#call replace(p8.p9,i13-i14+i5/2-i7/2-i9/2,i,i13,i14,i5,i7,i9,Md394,dotrewrite-d394-4)
	#call replace(Q.p6,`Q2'/2-i11+i12+i13-i2/2+i3/2,i,i11,i12,i13,i2,i3,Md394,dotrewrite-d394-5)
	#call replace(p5.p6,i1/2-i11-i2/2+i3/2-i5/2-i6/2,i,i1,i11,i2,i3,i5,i6,Md394,dotrewrite-d394-6)
	#call replace(p5.p8,-i13+i14+i3/2-i5/2-i8/2+i9/2,i,i13,i14,i3,i5,i8,i9,Md394,dotrewrite-d394-7)
	#call replace(p6.p9,i10/2+i13-i14-i4/2+i5/2-i7/2,i,i10,i13,i14,i4,i5,i7,Md394,dotrewrite-d394-8)
#endif
#break
#case 27
* path: (2, 3, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-1)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-2)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-3)
	#call replace(p2.p7,i12+i3/2+i7/2-i8/2,i,i12,i3,i7,i8,Md394,dotrewrite-d394-4)
	#call replace(p2.p10,-i1/2+i14+i2/2+i4/2,i,i1,i14,i2,i4,Md394,dotrewrite-d394-5)
	#call replace(p7.p10,-i1/2-i10/2+i11-i13+i14+i2/2+i4/2+i6/2-i8/2,i,i1,i10,i11,i13,i14,i2,i4,i6,i8,Md394,dotrewrite-d394-6)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p8.p + p6.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-1)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-2)
	#call replace(p2.p5,-i12-i14-i3/2-i7/2+i8/2,i,i12,i14,i3,i7,i8,Md394,dotrewrite-d394-3)
	#call replace(Q.p6,`Q2'/2-i11+i12+i13-i2/2+i3/2,i,i11,i12,i13,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p5.p6,i1/2-i11-i2/2+i3/2-i5/2-i6/2,i,i1,i11,i2,i3,i5,i6,Md394,dotrewrite-d394-5)
	#call replace(p6.p9,i10/2+i13-i14-i4/2+i5/2-i7/2,i,i10,i13,i14,i4,i5,i7,Md394,dotrewrite-d394-6)
	#call replace(p2.p6,`Q2'/2-i1/2+i12+i14+i4/2+i7/2-i8/2,i,i1,i12,i14,i4,i7,i8,Md394,dotrewrite-d394-7)
#endif
#break
#case 78
* path: (7, 8)
#case 710
* path: (7, 8, 10)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + Q.p - p3.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p + p8.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md394,dotrewrite-d394-1)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-2)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md394,dotrewrite-d394-3)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-4)
	#call replace(Q.p8,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md394,dotrewrite-d394-5)
	#call replace(p8.p9,i13-i14+i5/2-i7/2-i9/2,i,i13,i14,i5,i7,i9,Md394,dotrewrite-d394-6)
	#call replace(p7.p10,-i1/2-i10/2+i11-i13+i14+i2/2+i4/2+i6/2-i8/2,i,i1,i10,i11,i13,i14,i2,i4,i6,i8,Md394,dotrewrite-d394-7)
#endif
#break
#case 35
* path: (3, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + Q.p - p3.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p2} = - p5.p - p7.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md394,dotrewrite-d394-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md394,dotrewrite-d394-3)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-4)
	#call replace(p3.p5,-i13+i14+i3/2+i7/2-i8/2,i,i13,i14,i3,i7,i8,Md394,dotrewrite-d394-5)
	#call replace(p3.p10,i1/2-i11+i13-i14-i2/2-i4/2,i,i1,i11,i13,i14,i2,i4,Md394,dotrewrite-d394-6)
	#call replace(p5.p10,i1/2-i11+i13-i14-i2/2-i6/2+i8/2-i9/2,i,i1,i11,i13,i14,i2,i6,i8,i9,Md394,dotrewrite-d394-7)
	#call replace(p7.p10,-i1/2-i10/2+i11-i13+i14+i2/2+i4/2+i6/2-i8/2,i,i1,i10,i11,i13,i14,i2,i4,i6,i8,Md394,dotrewrite-d394-8)
#endif
#break
#case 17
* path: (1, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p4.p + p9.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p2.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p2} = - p5.p - p7.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-1)
	#call replace(p1.p2,i1/2+i2/2-i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-3)
	#call replace(Q.p1,`Q2'/2+i11+i2/2-i3/2,i,i11,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p2.p7,i12+i3/2+i7/2-i8/2,i,i12,i3,i7,i8,Md394,dotrewrite-d394-5)
	#call replace(p2.p5,-i12-i14-i3/2-i7/2+i8/2,i,i12,i14,i3,i7,i8,Md394,dotrewrite-d394-6)
	#call replace(p1.p5,-i1/2+i11-i12-i13+i2/2-i3/2-i5/2+i6/2,i,i1,i11,i12,i13,i2,i3,i5,i6,Md394,dotrewrite-d394-7)
	#call replace(p1.p7,i1/2+i10/2-i11+i12+i13-i14-i2/2+i3/2-i4/2+i5/2-i6/2-i9/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i4,i5,i6,i9,Md394,dotrewrite-d394-8)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#case 39
* path: (3, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + Q.p - p3.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id p3.p9 = i13 - i14;
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md394,dotrewrite-d394-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md394,dotrewrite-d394-3)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-4)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-5)
	#call replace(p3.p10,i1/2-i11+i13-i14-i2/2-i4/2,i,i1,i11,i13,i14,i2,i4,Md394,dotrewrite-d394-6)
	#call replace(p7.p10,-i1/2-i10/2+i11-i13+i14+i2/2+i4/2+i6/2-i8/2,i,i1,i10,i11,i13,i14,i2,i4,i6,i8,Md394,dotrewrite-d394-7)
#endif
#break
#case Q5
* path: (0, 5)
#case Q9
* path: (0, 5, 9)
#case 55
* path: (5,)
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p2.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p10.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	if (count(Md394,1)) id Q.p5 = -i12 - i13;
	if (count(Md394,1)) id Q.p10 = -i11 + i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-2)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-3)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-4)
	#call replace(p2.p10,-i1/2+i14+i2/2+i4/2,i,i1,i14,i2,i4,Md394,dotrewrite-d394-5)
	#call replace(p2.p5,-i12-i14-i3/2-i7/2+i8/2,i,i12,i14,i3,i7,i8,Md394,dotrewrite-d394-6)
	#call replace(p5.p10,i1/2-i11+i13-i14-i2/2-i6/2+i8/2-i9/2,i,i1,i11,i13,i14,i2,i6,i8,i9,Md394,dotrewrite-d394-7)
#endif
#break
#case 19
* path: (1, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p3.p + p8.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p10.p + p6.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p4.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p2.p?!{p2,[P+p2],[P-p2],p9} = + p1.p - p4.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	#call replace(p1.p4,i1/2-i2/2+i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-0)
	#call replace(p4.p9,-i10/2+i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-1)
	#call replace(Q.p1,`Q2'/2+i11+i2/2-i3/2,i,i11,i2,i3,Md394,dotrewrite-d394-2)
	#call replace(p1.p9,-i10/2+i14+i4/2+i9/2,i,i10,i14,i4,i9,Md394,dotrewrite-d394-3)
	#call replace(Q.p6,`Q2'/2-i11+i12+i13-i2/2+i3/2,i,i11,i12,i13,i2,i3,Md394,dotrewrite-d394-4)
	#call replace(p1.p6,`Q2'/2-i1/2+i12+i13+i5/2-i6/2,i,i1,i12,i13,i5,i6,Md394,dotrewrite-d394-5)
	#call replace(p6.p9,i10/2+i13-i14-i4/2+i5/2-i7/2,i,i10,i13,i14,i4,i5,i7,Md394,dotrewrite-d394-6)
	#call replace(p4.p6,i13-i14-i4/2+i5/2-i6/2-i7/2+i8/2,i,i13,i14,i4,i5,i6,i7,i8,Md394,dotrewrite-d394-7)
#endif
#break
#default
#case 47
* path: (4, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md394,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p10.p;
	.sort:momrewrite-Md394-6;
	if (count(Md394,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md394-5;
	if (count(Md394,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p4.p;
	.sort:momrewrite-Md394-4;
	if (count(Md394,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p4.p;
	.sort:momrewrite-Md394-3;
	if (count(Md394,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md394-2;
	if (count(Md394,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p9.p;
	.sort:momrewrite-Md394-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd394()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md394,dotrewrite-d394-0)
	#call replace(p2.p4,i1/2-i2/2-i4/2,i,i1,i2,i4,Md394,dotrewrite-d394-1)
	#call replace(p4.p9,-i10/2+i4/2+i9/2,i,i10,i4,i9,Md394,dotrewrite-d394-2)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md394,dotrewrite-d394-3)
	#call replace(p2.p7,i12+i3/2+i7/2-i8/2,i,i12,i3,i7,i8,Md394,dotrewrite-d394-4)
	#call replace(p4.p7,i1/2+i10/2-i11+i13-i14-i2/2-i4/2+i5/2-i6/2-i7/2+i8/2-i9/2,i,i1,i10,i11,i13,i14,i2,i4,i5,i6,i7,i8,i9,Md394,dotrewrite-d394-5)
#endif
#break
#endswitch
#break
*--#] d394 : 
*--#[ d396 :
#case Md396
#procedure SimpleDotd396()
if (count(Md396,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p8^n? = i11^n;
	id Q.p9^n? = i12^n;
	id p1.p8^n? = i13^n;
	id p1.p9^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case 22
* path: (2,)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p5.p + p9.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + Q.p - p2.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	if (count(Md396,1)) id p2.p8 = i11 - i13;
	if (count(Md396,1)) id p2.p9 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md396,dotrewrite-d396-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md396,dotrewrite-d396-4)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-5)
	#call replace(p4.p9,-i10/2+i12-i14+i5/2+i9/2,i,i10,i12,i14,i5,i9,Md396,dotrewrite-d396-6)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-7)
#endif
#break
#case 56
* path: (5, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p10.p - p6.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p5.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-1)
	#call replace(p5.p9,-i10/2+i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-5)
	#call replace(p6.p9,i11-i13-i4/2+i5/2-i6/2+i7/2-i9/2,i,i11,i13,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-6)
	#call replace(p5.p6,i10/2+i11-i13-i4/2+i5/2+i7/2-i8/2-i9/2,i,i10,i11,i13,i4,i5,i7,i8,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case 710
* path: (7, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + p8.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p10.p - p6.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-1)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-2)
	#call replace(p1.p10,-i1/2+i14+i3/2-i5/2,i,i1,i14,i3,i5,Md396,dotrewrite-d396-3)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(p1.p7,-`Q2'/2+i13+i2/2+i3/2-i5/2,i,i13,i2,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-7)
	#call replace(p6.p7,i12-i14+i2/2-i6/2-i7/2+i9/2,i,i12,i14,i2,i6,i7,i9,Md396,dotrewrite-d396-8)
	#call replace(p7.p10,-i12+i14-i2/2+i4/2+i6/2-i8/2-i9/2,i,i12,i14,i2,i4,i6,i8,i9,Md396,dotrewrite-d396-9)
#endif
#break
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p5.p + p9.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-1)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-2)
	#call replace(p1.p7,-`Q2'/2+i13+i2/2+i3/2-i5/2,i,i13,i2,i3,i5,Md396,dotrewrite-d396-3)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-4)
	#call replace(p7.p9,-i11-i12+i13+i14+i4/2-i5/2+i6/2-i7/2-i9/2,i,i11,i12,i13,i14,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p5.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-1)
	#call replace(p5.p9,-i10/2+i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p5.p8,-i11+i13+i4/2-i7/2+i8/2,i,i11,i13,i4,i7,i8,Md396,dotrewrite-d396-4)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-5)
#endif
#break
#case 810
* path: (8, 10)
#case 910
* path: (9, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p10.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-1)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(p1.p10,-i1/2+i14+i3/2-i5/2,i,i1,i14,i3,i5,Md396,dotrewrite-d396-3)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-5)
#endif
#break
#case 69
* path: (6, 9)
#case 89
* path: (8, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p10.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-1)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-2)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-4)
	#call replace(p6.p9,i11-i13-i4/2+i5/2-i6/2+i7/2-i9/2,i,i11,i13,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-5)
#endif
#break
#case Q10
* path: (0, 3, 5, 10)
#case 310
* path: (3, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + p3.p + p5.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p10.p + p5.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md396,dotrewrite-d396-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-1)
	#call replace(p5.p10,-i10/2-i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p3.p8,i11-i4/2+i7/2-i8/2,i,i11,i4,i7,i8,Md396,dotrewrite-d396-5)
	#call replace(p5.p8,-i11+i13+i4/2-i7/2+i8/2,i,i11,i13,i4,i7,i8,Md396,dotrewrite-d396-6)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-7)
	#call replace(p3.p10,-i1/2+i10/2+i14+i3/2-i9/2,i,i1,i10,i14,i3,i9,Md396,dotrewrite-d396-8)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q8
* path: (0, 2, 6, 8)
#case 26
* path: (2, 6)
#case 28
* path: (2, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + Q.p - p2.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	if (count(Md396,1)) id p2.p8 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md396,dotrewrite-d396-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md396,dotrewrite-d396-3)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-4)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-5)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p2.p6,-i11-i12+i13+i14-i2/2+i4/2-i5/2,i,i11,i12,i13,i14,i2,i4,i5,Md396,dotrewrite-d396-7)
	#call replace(p4.p6,i10/2-i12+i14-i2/2+i7/2-i8/2-i9/2,i,i10,i12,i14,i2,i7,i8,i9,Md396,dotrewrite-d396-8)
#endif
#break
#case Q6
* path: (0, 4, 7, 6)
#case 46
* path: (4, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p4.p + p7.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-2)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md396,dotrewrite-d396-3)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(p1.p7,-`Q2'/2+i13+i2/2+i3/2-i5/2,i,i13,i2,i3,i5,Md396,dotrewrite-d396-6)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-7)
	#call replace(p6.p7,i12-i14+i2/2-i6/2-i7/2+i9/2,i,i12,i14,i2,i6,i7,i9,Md396,dotrewrite-d396-8)
	#call replace(p4.p6,i10/2-i12+i14-i2/2+i7/2-i8/2-i9/2,i,i10,i12,i14,i2,i7,i8,i9,Md396,dotrewrite-d396-9)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 24
* path: (2, 7, 4)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#case 49
* path: (4, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p5.p + p9.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + Q.p - p2.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p4.p + p7.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	if (count(Md396,1)) id p2.p9 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md396,dotrewrite-d396-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md396,dotrewrite-d396-3)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-4)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-5)
	#call replace(p2.p7,i11-i13-i2/2-i4/2+i5/2,i,i11,i13,i2,i4,i5,Md396,dotrewrite-d396-6)
	#call replace(p4.p9,-i10/2+i12-i14+i5/2+i9/2,i,i10,i12,i14,i5,i9,Md396,dotrewrite-d396-7)
	#call replace(p7.p9,-i11-i12+i13+i14+i4/2-i5/2+i6/2-i7/2-i9/2,i,i11,i12,i13,i14,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-8)
#endif
#break
#case 36
* path: (3, 1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md396,dotrewrite-d396-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-2)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-3)
	#call replace(p3.p8,i11-i4/2+i7/2-i8/2,i,i11,i4,i7,i8,Md396,dotrewrite-d396-4)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p3.p6,i1/2-i10/2-i11-i14-i3/2+i4/2-i7/2+i8/2+i9/2,i,i1,i10,i11,i14,i3,i4,i7,i8,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case Q9
* path: (0, 3, 5, 9)
#case 35
* path: (3, 5)
#case 39
* path: (3, 5, 9)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + p3.p + p5.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p5.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md396,dotrewrite-d396-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-1)
	#call replace(p5.p9,-i10/2+i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p3.p8,i11-i4/2+i7/2-i8/2,i,i11,i4,i7,i8,Md396,dotrewrite-d396-4)
	#call replace(p3.p9,i10/2+i14-i5/2-i9/2,i,i10,i14,i5,i9,Md396,dotrewrite-d396-5)
	#call replace(p5.p8,-i11+i13+i4/2-i7/2+i8/2,i,i11,i13,i4,i7,i8,Md396,dotrewrite-d396-6)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-7)
#endif
#break
#case 410
* path: (4, 8, 10)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-1)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-2)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-3)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(p1.p10,-i1/2+i14+i3/2-i5/2,i,i1,i14,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p4.p10,-i10/2+i12-i14+i2/2-i4/2+i9/2,i,i10,i12,i14,i2,i4,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case Q10
* path: (0, 1, 5, 10)
#case 110
* path: (1, 5, 10)
#case 510
* path: (5, 10)
#case 58
* path: (5, 10, 8)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p10.p + p5.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-1)
	#call replace(p5.p10,-i10/2-i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p1.p10,-i1/2+i14+i3/2-i5/2,i,i1,i14,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(p5.p8,-i11+i13+i4/2-i7/2+i8/2,i,i11,i13,i4,i7,i8,Md396,dotrewrite-d396-6)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-7)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + Q.p - p2.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	if (count(Md396,1)) id p2.p8 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md396,dotrewrite-d396-1)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-2)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-3)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p2.p7,i11-i13-i2/2-i4/2+i5/2,i,i11,i13,i2,i4,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p2.p10,i12-i14+i2/2-i4/2+i5/2,i,i12,i14,i2,i4,i5,Md396,dotrewrite-d396-7)
	#call replace(p7.p10,-i12+i14-i2/2+i4/2+i6/2-i8/2-i9/2,i,i12,i14,i2,i4,i6,i8,i9,Md396,dotrewrite-d396-8)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-1)
	#call replace(p8.p10,-i10/2+i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-2)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p1.p10,-i1/2+i14+i3/2-i5/2,i,i1,i14,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(p1.p7,-`Q2'/2+i13+i2/2+i3/2-i5/2,i,i13,i2,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p7.p10,-i12+i14-i2/2+i4/2+i6/2-i8/2-i9/2,i,i12,i14,i2,i4,i6,i8,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-1)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-2)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(p1.p7,-`Q2'/2+i13+i2/2+i3/2-i5/2,i,i13,i2,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p6.p7,i12-i14+i2/2-i6/2-i7/2+i9/2,i,i12,i14,i2,i6,i7,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case 16
* path: (1, 2, 6)
#case 18
* path: (1, 2, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p9.p?!{p9,[P+p9],[P-p9],Q,p1} = + p5.p + p10.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p8.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-1)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-2)
	#call replace(p6.p8,i10/2-i6/2-i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-3)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p4.p6,i10/2-i12+i14-i2/2+i7/2-i8/2-i9/2,i,i10,i12,i14,i2,i7,i8,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case Q4
* path: (0, 4)
#case Q8
* path: (0, 4, 8)
#case 44
* path: (4,)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p5.p + p9.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md396,dotrewrite-d396-1)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md396,dotrewrite-d396-2)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md396,dotrewrite-d396-3)
	#call replace(p4.p9,-i10/2+i12-i14+i5/2+i9/2,i,i10,i12,i14,i5,i9,Md396,dotrewrite-d396-4)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-5)
#endif
#break
#case 210
* path: (2, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p1.p?!{p1,[P+p1],[P-p1],p8,p9} = + Q.p - p2.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p10.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p10.p - p6.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	if (count(Md396,1)) id p2.p9 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md396,dotrewrite-d396-1)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-2)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-3)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p2.p10,i12-i14+i2/2-i4/2+i5/2,i,i12,i14,i2,i4,i5,Md396,dotrewrite-d396-5)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p2.p6,-i11-i12+i13+i14-i2/2+i4/2-i5/2,i,i11,i12,i13,i14,i2,i4,i5,Md396,dotrewrite-d396-7)
	#call replace(p6.p9,i11-i13-i4/2+i5/2-i6/2+i7/2-i9/2,i,i11,i13,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-8)
#endif
#break
#case 610
* path: (6, 10)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p10.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p10.p - p6.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p6.p10,-i10/2-i6/2+i8/2,i,i10,i6,i8,Md396,dotrewrite-d396-1)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(p1.p10,-i1/2+i14+i3/2-i5/2,i,i1,i14,i3,i5,Md396,dotrewrite-d396-3)
	#call replace(p1.p6,i1/2-i13-i14-i3/2+i5/2,i,i1,i13,i14,i3,i5,Md396,dotrewrite-d396-4)
	#call replace(Q.p10,-i1/2+i12+i2/2+i3/2-i4/2,i,i1,i12,i2,i3,i4,Md396,dotrewrite-d396-5)
	#call replace(Q.p6,i1/2-i11-i12-i2/2-i3/2+i4/2,i,i1,i11,i12,i2,i3,i4,Md396,dotrewrite-d396-6)
	#call replace(p6.p9,i11-i13-i4/2+i5/2-i6/2+i7/2-i9/2,i,i11,i13,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-7)
#endif
#break
#case 57
* path: (5, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p7.p + p4.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p - p5.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-1)
	#call replace(p5.p9,-i10/2+i5/2+i9/2,i,i10,i5,i9,Md396,dotrewrite-d396-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md396,dotrewrite-d396-3)
	#call replace(Q.p7,-`Q2'/2+i11+i3/2-i4/2,i,i11,i3,i4,Md396,dotrewrite-d396-4)
	#call replace(p1.p7,-`Q2'/2+i13+i2/2+i3/2-i5/2,i,i13,i2,i3,i5,Md396,dotrewrite-d396-5)
	#call replace(p5.p7,-i11+i13+i2/2-i5/2-i7/2+i8/2,i,i11,i13,i2,i5,i7,i8,Md396,dotrewrite-d396-6)
	#call replace(p7.p9,-i11-i12+i13+i14+i4/2-i5/2+i6/2-i7/2-i9/2,i,i11,i12,i13,i14,i4,i5,i6,i7,i9,Md396,dotrewrite-d396-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 88
* path: (8,)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md396,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p10.p - p8.p;
	.sort:momrewrite-Md396-6;
	if (count(Md396,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p5.p + p9.p;
	.sort:momrewrite-Md396-5;
	if (count(Md396,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md396-4;
	if (count(Md396,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md396-3;
	if (count(Md396,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md396-2;
	if (count(Md396,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md396-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd396()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md396,dotrewrite-d396-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md396,dotrewrite-d396-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md396,dotrewrite-d396-2)
	#call replace(p3.p8,i11-i4/2+i7/2-i8/2,i,i11,i4,i7,i8,Md396,dotrewrite-d396-3)
	#call replace(p3.p9,i10/2+i14-i5/2-i9/2,i,i10,i14,i5,i9,Md396,dotrewrite-d396-4)
	#call replace(p8.p9,-i10/2-i11+i13+i4/2+i6/2-i7/2,i,i10,i11,i13,i4,i6,i7,Md396,dotrewrite-d396-5)
#endif
#break
#endswitch
#break
*--#] d396 : 
*--#[ d397 :
#case Md397
#procedure SimpleDotd397()
if (count(Md397,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p8^n? = i12^n;
	id p1.p8^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p4.p + p9.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p10.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-3)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-4)
	#call replace(p7.p10,i10/2+i7/2-i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-5)
	#call replace(Q.p10,-`Q2'/2+i11-i12+i3/2-i4/2,i,i11,i12,i3,i4,Md397,dotrewrite-d397-6)
	#call replace(p4.p10,i11-i14-i4/2+i8/2-i9/2,i,i11,i14,i4,i8,i9,Md397,dotrewrite-d397-7)
	#call replace(p2.p10,-i12+i13-i4/2+i5/2-i6/2+i7/2,i,i12,i13,i4,i5,i6,i7,Md397,dotrewrite-d397-8)
#endif
#break
#case 19
* path: (1, 3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p - p9.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p9.p - p4.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md397,dotrewrite-d397-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-3)
	#call replace(p7.p9,-i10/2+i7/2+i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-4)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md397,dotrewrite-d397-5)
	#call replace(p1.p7,i11-i2/2+i6/2-i7/2,i,i11,i2,i6,i7,Md397,dotrewrite-d397-6)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i4/2,i,i12,i3,i4,Md397,dotrewrite-d397-7)
	#call replace(p1.p9,`Q2'/2+i13-i2/2-i3/2+i5/2,i,i13,i2,i3,i5,Md397,dotrewrite-d397-8)
#endif
#break
#case 69
* path: (6, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p - p9.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p9.p - p4.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-3)
	#call replace(p7.p9,-i10/2+i7/2+i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-4)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-5)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i4/2,i,i12,i3,i4,Md397,dotrewrite-d397-6)
	#call replace(p4.p6,-i11+i14+i2/2+i4/2-i5/2,i,i11,i14,i2,i4,i5,Md397,dotrewrite-d397-7)
	#call replace(p6.p9,i10/2+i12-i13+i2/2+i4/2-i5/2-i7/2-i9/2,i,i10,i12,i13,i2,i4,i5,i7,i9,Md397,dotrewrite-d397-8)
#endif
#break
#case Q10
* path: (0, 1, 5, 10)
#case 110
* path: (1, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p4.p + p9.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p1.p - p5.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p10.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md397,dotrewrite-d397-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md397,dotrewrite-d397-1)
	#call replace(p7.p10,i10/2+i7/2-i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md397,dotrewrite-d397-3)
	#call replace(p1.p7,i11-i2/2+i6/2-i7/2,i,i11,i2,i6,i7,Md397,dotrewrite-d397-4)
	#call replace(p5.p7,i11-i14-i2/2+i6/2-i7/2,i,i11,i14,i2,i6,i7,Md397,dotrewrite-d397-5)
	#call replace(Q.p10,-`Q2'/2+i11-i12+i3/2-i4/2,i,i11,i12,i3,i4,Md397,dotrewrite-d397-6)
	#call replace(p1.p10,-`Q2'/2+i11-i13+i3/2-i5/2+i6/2-i7/2,i,i11,i13,i3,i5,i6,i7,Md397,dotrewrite-d397-7)
	#call replace(p5.p10,i11+i12-i13-i14-i5/2+i6/2-i7/2+i8/2-i9/2,i,i11,i12,i13,i14,i5,i6,i7,i8,i9,Md397,dotrewrite-d397-8)
#endif
#break
#case 210
* path: (2, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p4.p + p9.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p + p7.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p2.p - p6.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-3)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-4)
	#call replace(p4.p6,-i11+i14+i2/2+i4/2-i5/2,i,i11,i14,i2,i4,i5,Md397,dotrewrite-d397-5)
	#call replace(Q.p10,-`Q2'/2+i11-i12+i3/2-i4/2,i,i11,i12,i3,i4,Md397,dotrewrite-d397-6)
	#call replace(p4.p10,i11-i14-i4/2+i8/2-i9/2,i,i11,i14,i4,i8,i9,Md397,dotrewrite-d397-7)
	#call replace(p2.p10,-i12+i13-i4/2+i5/2-i6/2+i7/2,i,i12,i13,i4,i5,i6,i7,Md397,dotrewrite-d397-8)
	#call replace(p6.p10,-i10/2-i12+i13-i4/2+i5/2-i6/2+i9/2,i,i10,i12,i13,i4,i5,i6,i9,Md397,dotrewrite-d397-9)
#endif
#break
#case 610
* path: (6, 10)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p4.p + p9.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p10.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-2)
	#call replace(p7.p10,i10/2+i7/2-i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-3)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-4)
	#call replace(p4.p6,-i11+i14+i2/2+i4/2-i5/2,i,i11,i14,i2,i4,i5,Md397,dotrewrite-d397-5)
	#call replace(Q.p10,-`Q2'/2+i11-i12+i3/2-i4/2,i,i11,i12,i3,i4,Md397,dotrewrite-d397-6)
	#call replace(p4.p10,i11-i14-i4/2+i8/2-i9/2,i,i11,i14,i4,i8,i9,Md397,dotrewrite-d397-7)
	#call replace(p6.p10,-i10/2-i12+i13-i4/2+i5/2-i6/2+i9/2,i,i10,i12,i13,i4,i5,i6,i9,Md397,dotrewrite-d397-8)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 28
* path: (2, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p2.p - p6.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-4)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-5)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-6)
	#call replace(p4.p6,-i11+i14+i2/2+i4/2-i5/2,i,i11,i14,i2,i4,i5,Md397,dotrewrite-d397-7)
	#call replace(p6.p8,i10/2+i11+i12-i13-i14-i7/2-i9/2,i,i10,i11,i12,i13,i14,i7,i9,Md397,dotrewrite-d397-8)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p1.p - p5.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p2.p - p6.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md397,dotrewrite-d397-4)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-5)
	#call replace(p5.p8,-i12+i13-i4/2-i8/2+i9/2,i,i12,i13,i4,i8,i9,Md397,dotrewrite-d397-6)
	#call replace(p5.p6,-i11+i14+i4/2-i5/2-i6/2+i7/2,i,i11,i14,i4,i5,i6,i7,Md397,dotrewrite-d397-7)
	#call replace(p6.p8,i10/2+i11+i12-i13-i14-i7/2-i9/2,i,i10,i11,i12,i13,i14,i7,i9,Md397,dotrewrite-d397-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 3, 4)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	if (count(Md397,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-4)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-5)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-6)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-7)
#endif
#break
#case 69
* path: (6, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p - p9.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-0)
	#call replace(p7.p9,-i10/2+i7/2+i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-1)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-2)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-3)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i4/2,i,i12,i3,i4,Md397,dotrewrite-d397-4)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-5)
	#call replace(p6.p8,i10/2+i11+i12-i13-i14-i7/2-i9/2,i,i10,i11,i12,i13,i14,i7,i9,Md397,dotrewrite-d397-6)
	#call replace(p6.p9,i10/2+i12-i13+i2/2+i4/2-i5/2-i7/2-i9/2,i,i10,i12,i13,i2,i4,i5,i7,i9,Md397,dotrewrite-d397-7)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q8
* path: (0, 1, 5, 8)
#case 15
* path: (1, 5)
#case 18
* path: (1, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p1.p - p5.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md397,dotrewrite-d397-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md397,dotrewrite-d397-1)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md397,dotrewrite-d397-2)
	#call replace(p1.p7,i11-i2/2+i6/2-i7/2,i,i11,i2,i6,i7,Md397,dotrewrite-d397-3)
	#call replace(p5.p7,i11-i14-i2/2+i6/2-i7/2,i,i11,i14,i2,i6,i7,Md397,dotrewrite-d397-4)
	#call replace(p5.p8,-i12+i13-i4/2-i8/2+i9/2,i,i12,i13,i4,i8,i9,Md397,dotrewrite-d397-5)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-6)
#endif
#break
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p1.p - p5.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md397,dotrewrite-d397-4)
	#call replace(p5.p7,i11-i14-i2/2+i6/2-i7/2,i,i11,i14,i2,i6,i7,Md397,dotrewrite-d397-5)
	#call replace(p5.p8,-i12+i13-i4/2-i8/2+i9/2,i,i12,i13,i4,i8,i9,Md397,dotrewrite-d397-6)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-7)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-3)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-4)
	#call replace(p4.p6,-i11+i14+i2/2+i4/2-i5/2,i,i11,i14,i2,i4,i5,Md397,dotrewrite-d397-5)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-6)
	#call replace(p6.p8,i10/2+i11+i12-i13-i14-i7/2-i9/2,i,i10,i11,i12,i13,i14,i7,i9,Md397,dotrewrite-d397-7)
#endif
#break
#case Q9
* path: (0, 2, 7, 9)
#case 19
* path: (1, 2, 7, 9)
#case 29
* path: (2, 7, 9)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p7.p - p9.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p9.p - p4.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md397,dotrewrite-d397-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-3)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-4)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md397,dotrewrite-d397-5)
	#call replace(p7.p9,-i10/2+i7/2+i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-6)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i4/2,i,i12,i3,i4,Md397,dotrewrite-d397-7)
	#call replace(p2.p9,i12-i13+i2/2+i4/2-i5/2,i,i12,i13,i2,i4,i5,Md397,dotrewrite-d397-8)
#endif
#break
#case 510
* path: (5, 10)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + p3.p + p5.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = - p4.p + p9.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + Q.p - p4.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p10.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	if (count(Md397,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md397,dotrewrite-d397-2)
	#call replace(p7.p10,i10/2+i7/2-i9/2,i,i10,i7,i9,Md397,dotrewrite-d397-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md397,dotrewrite-d397-4)
	#call replace(p5.p7,i11-i14-i2/2+i6/2-i7/2,i,i11,i14,i2,i6,i7,Md397,dotrewrite-d397-5)
	#call replace(Q.p10,-`Q2'/2+i11-i12+i3/2-i4/2,i,i11,i12,i3,i4,Md397,dotrewrite-d397-6)
	#call replace(p4.p10,i11-i14-i4/2+i8/2-i9/2,i,i11,i14,i4,i8,i9,Md397,dotrewrite-d397-7)
	#call replace(p5.p10,i11+i12-i13-i14-i5/2+i6/2-i7/2+i8/2-i9/2,i,i11,i12,i13,i14,i5,i6,i7,i8,i9,Md397,dotrewrite-d397-8)
#endif
#break
#case 57
* path: (5, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p3.p?!{p3,[P+p3],[P-p3],p7} = + p1.p - p5.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md397,dotrewrite-d397-0)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i2/2,i,i1,i11,i2,Md397,dotrewrite-d397-2)
	#call replace(p5.p7,i11-i14-i2/2+i6/2-i7/2,i,i11,i14,i2,i6,i7,Md397,dotrewrite-d397-3)
	#call replace(p5.p8,-i12+i13-i4/2-i8/2+i9/2,i,i12,i13,i4,i8,i9,Md397,dotrewrite-d397-4)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-5)
	#call replace(p5.p6,-i11+i14+i4/2-i5/2-i6/2+i7/2,i,i11,i14,i4,i5,i6,i7,Md397,dotrewrite-d397-6)
	#call replace(p6.p8,i10/2+i11+i12-i13-i14-i7/2-i9/2,i,i10,i11,i12,i13,i14,i7,i9,Md397,dotrewrite-d397-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md397,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p9.p + p7.p;
	.sort:momrewrite-Md397-6;
	if (count(Md397,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md397-5;
	if (count(Md397,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md397-4;
	if (count(Md397,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md397-3;
	if (count(Md397,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md397-2;
	if (count(Md397,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md397-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd397()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md397,dotrewrite-d397-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md397,dotrewrite-d397-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md397,dotrewrite-d397-2)
	#call replace(p1.p7,i11-i2/2+i6/2-i7/2,i,i11,i2,i6,i7,Md397,dotrewrite-d397-3)
	#call replace(p3.p8,i12+i4/2+i8/2-i9/2,i,i12,i4,i8,i9,Md397,dotrewrite-d397-4)
	#call replace(p7.p8,-i10/2-i11+i14+i7/2+i9/2,i,i10,i11,i14,i7,i9,Md397,dotrewrite-d397-5)
#endif
#break
#endswitch
#break
*--#] d397 : 
*--#[ d338 :
#case Md338
#procedure SimpleDotd338()
if (count(Md338,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p7^n? = i10^n;
	id p4.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id Q.p5^n? = i13^n;
	id Q.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p4.p - p9.p - p5.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p - p8.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(p6.p8,i6/2+i8/2-i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-2)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-3)
	#call replace(p4.p6,-i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md338,dotrewrite-d338-4)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md338,dotrewrite-d338-5)
	#call replace(p4.p8,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md338,dotrewrite-d338-6)
	#call replace(p5.p8,i1/2-i10+i3/2-i4/2-i6/2-i8/2+i9/2,i,i1,i10,i3,i4,i6,i8,i9,Md338,dotrewrite-d338-7)
#endif
#break
#case 39
* path: (3, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p9.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p + p3.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md338,dotrewrite-d338-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-1)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-2)
	#call replace(p1.p9,-i10+i3/2-i4/2+i5/2-i6/2,i,i10,i3,i4,i5,i6,Md338,dotrewrite-d338-3)
	#call replace(p7.p9,i11+i4/2+i5/2-i7/2-i9/2,i,i11,i4,i5,i7,i9,Md338,dotrewrite-d338-4)
	#call replace(Q.p9,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md338,dotrewrite-d338-5)
	#call replace(p3.p9,-i11-i4/2-i5/2+i6/2+i7/2-i8/2,i,i11,i4,i5,i6,i7,i8,Md338,dotrewrite-d338-6)
#endif
#break
#case 79
* path: (7, 9)
#case 89
* path: (8, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p9.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p + p8.p - p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-0)
	#call replace(p8.p9,i6/2-i8/2-i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-1)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md338,dotrewrite-d338-2)
	#call replace(p1.p8,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md338,dotrewrite-d338-3)
	#call replace(p1.p9,-i10+i3/2-i4/2+i5/2-i6/2,i,i10,i3,i4,i5,i6,Md338,dotrewrite-d338-4)
	#call replace(p7.p9,i11+i4/2+i5/2-i7/2-i9/2,i,i11,i4,i5,i7,i9,Md338,dotrewrite-d338-5)
	#call replace(Q.p9,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md338,dotrewrite-d338-6)
#endif
#break
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p7.p - p9.p - p5.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p9.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-2)
	#call replace(p1.p9,-i10+i3/2-i4/2+i5/2-i6/2,i,i10,i3,i4,i5,i6,Md338,dotrewrite-d338-3)
	#call replace(p7.p9,i11+i4/2+i5/2-i7/2-i9/2,i,i11,i4,i5,i7,i9,Md338,dotrewrite-d338-4)
	#call replace(p6.p7,i11-i3/2+i4/2+i5/2+i8/2-i9/2,i,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-5)
	#call replace(Q.p9,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md338,dotrewrite-d338-6)
#endif
#break
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p9.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p4.p - p5.p - p9.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-2)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-3)
	#call replace(p4.p6,-i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md338,dotrewrite-d338-4)
	#call replace(Q.p9,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md338,dotrewrite-d338-5)
	#call replace(p4.p9,-i10-i11+i3/2-i4+i7/2-i8/2,i,i10,i11,i3,i4,i7,i8,Md338,dotrewrite-d338-6)
	#call replace(p5.p9,i10-i3/2+i4/2-i5/2+i8/2-i9/2,i,i10,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-7)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p9.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md338,dotrewrite-d338-0)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-1)
	#call replace(p2.p7,i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md338,dotrewrite-d338-2)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-3)
	#call replace(p2.p4,`Q2'/2+i1/2+i12-i2/2-i4/2,i,i1,i12,i2,i4,Md338,dotrewrite-d338-4)
	#call replace(p2.p5,-i1/2-i11+i13-i5/2+i6/2,i,i1,i11,i13,i5,i6,Md338,dotrewrite-d338-5)
	#call replace(p5.p7,-i10-i11+i3/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-6)
#endif
#break
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p + p8.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p + p6.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-2)
	#call replace(p4.p6,-i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md338,dotrewrite-d338-3)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-4)
	#call replace(p6.p7,i11-i3/2+i4/2+i5/2+i8/2-i9/2,i,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-5)
	#call replace(p5.p7,-i10-i11+i3/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-6)
#endif
#break
#case Q8
* path: (0, 2, 3, 8)
#case Q8
* path: (0, 3, 8)
#case 28
* path: (2, 3, 8)
#case 38
* path: (3, 8)
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p + p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p8.p - p3.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p - p8.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md338,dotrewrite-d338-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-2)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-3)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-4)
	#call replace(p6.p8,i6/2+i8/2-i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-5)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md338,dotrewrite-d338-6)
	#call replace(p1.p8,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md338,dotrewrite-d338-7)
	#call replace(p3.p6,-i11+i3/2-i4/2-i5/2+i6/2,i,i11,i3,i4,i5,i6,Md338,dotrewrite-d338-8)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 18
* path: (1, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p - p8.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p + p8.p - p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(p6.p8,i6/2+i8/2-i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-2)
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-3)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md338,dotrewrite-d338-4)
	#call replace(p1.p8,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md338,dotrewrite-d338-5)
	#call replace(p6.p7,i11-i3/2+i4/2+i5/2+i8/2-i9/2,i,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-6)
#endif
#break
#case Q6
* path: (0, 2, 1, 6)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md338,dotrewrite-d338-1)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-2)
	#call replace(p1.p2,i1/2+i12+i3/2-i4/2,i,i1,i12,i3,i4,Md338,dotrewrite-d338-3)
	#call replace(p2.p7,i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md338,dotrewrite-d338-4)
	#call replace(p6.p7,i11-i3/2+i4/2+i5/2+i8/2-i9/2,i,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-5)
	#call replace(p2.p6,i11-i12-i13-i3/2+i4/2+i5/2-i6/2,i,i11,i12,i13,i3,i4,i5,i6,Md338,dotrewrite-d338-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md338,dotrewrite-d338-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(p1.p2,i1/2+i12+i3/2-i4/2,i,i1,i12,i3,i4,Md338,dotrewrite-d338-2)
	#call replace(p2.p7,i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md338,dotrewrite-d338-3)
	#call replace(p2.p5,-i1/2-i11+i13-i5/2+i6/2,i,i1,i11,i13,i5,i6,Md338,dotrewrite-d338-4)
	#call replace(p5.p7,-i10-i11+i3/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-5)
#endif
#break
#case 46
* path: (4, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p + p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p4.p - p5.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-1)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-2)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-3)
	#call replace(p4.p6,-i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md338,dotrewrite-d338-4)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-5)
	#call replace(p6.p7,i11-i3/2+i4/2+i5/2+i8/2-i9/2,i,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-6)
#endif
#break
#case 48
* path: (4, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p7.p - p9.p - p4.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p7.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p - p8.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p6.p8,i6/2+i8/2-i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-1)
	#call replace(p7.p8,-i3/2+i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-2)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-3)
	#call replace(p4.p6,-i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md338,dotrewrite-d338-4)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-5)
	#call replace(Q.p8,`Q2'/2+i14-i2/2+i3/2,i,i14,i2,i3,Md338,dotrewrite-d338-6)
	#call replace(p4.p8,-i1/2+i10+i4/2-i7/2+i8/2,i,i1,i10,i4,i7,i8,Md338,dotrewrite-d338-7)
	#call replace(p6.p7,i11-i3/2+i4/2+i5/2+i8/2-i9/2,i,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-8)
#endif
#break
#case Q9
* path: (0, 2, 4, 9)
#case 29
* path: (2, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = - p5.p - p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p9.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p3.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p4.p - p7.p - p9.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md338,dotrewrite-d338-0)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-1)
	#call replace(p2.p7,i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md338,dotrewrite-d338-2)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-3)
	#call replace(p2.p4,`Q2'/2+i1/2+i12-i2/2-i4/2,i,i1,i12,i2,i4,Md338,dotrewrite-d338-4)
	#call replace(p7.p9,i11+i4/2+i5/2-i7/2-i9/2,i,i11,i4,i5,i7,i9,Md338,dotrewrite-d338-5)
	#call replace(Q.p9,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md338,dotrewrite-d338-6)
	#call replace(p4.p9,-i10-i11+i3/2-i4+i7/2-i8/2,i,i10,i11,i3,i4,i7,i8,Md338,dotrewrite-d338-7)
	#call replace(p2.p9,-`Q2'/2+i11-i12-i13-i14+i2/2-i3/2+i4/2+i5/2-i6/2-i7/2+i8/2,i,i11,i12,i13,i14,i2,i3,i4,i5,i6,i7,i8,Md338,dotrewrite-d338-8)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p + p9.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = + p4.p - p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md338,dotrewrite-d338-0)
	#call replace(p3.p4,-i1/2+i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-1)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-2)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-3)
	#call replace(p3.p5,i1/2+i11+i5/2-i6/2,i,i1,i11,i5,i6,Md338,dotrewrite-d338-4)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-5)
	#call replace(p5.p7,-i10-i11+i3/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-6)
#endif
#break
#case Q3
* path: (0, 2, 3)
#case Q3
* path: (0, 3)
#case Q7
* path: (0, 3, 7)
#case 13
* path: (1, 2, 3)
#case 23
* path: (2, 3)
#case 27
* path: (2, 3, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 35
* path: (3, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p6.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p + p3.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md338,dotrewrite-d338-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-1)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md338,dotrewrite-d338-3)
	#call replace(p3.p5,i1/2+i11+i5/2-i6/2,i,i1,i11,i5,i6,Md338,dotrewrite-d338-4)
	#call replace(p5.p7,-i10-i11+i3/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-5)
#endif
#break
#case Q9
* path: (0, 4, 9)
#case 19
* path: (1, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p4.p - p9.p - p5.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = - p1.p - p6.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p9.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	if (count(Md338,1)) id Q.p6 = -i12 - i13;
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-1)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-2)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md338,dotrewrite-d338-3)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-4)
	#call replace(p4.p6,-i1/2-i11+i3/2-i4/2,i,i1,i11,i3,i4,Md338,dotrewrite-d338-5)
	#call replace(p1.p9,-i10+i3/2-i4/2+i5/2-i6/2,i,i10,i3,i4,i5,i6,Md338,dotrewrite-d338-6)
	#call replace(Q.p9,-`Q2'/2-i12-i13-i14+i2/2-i3/2,i,i12,i13,i14,i2,i3,Md338,dotrewrite-d338-7)
	#call replace(p4.p9,-i10-i11+i3/2-i4+i7/2-i8/2,i,i10,i11,i3,i4,i7,i8,Md338,dotrewrite-d338-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 15
* path: (1, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 47
* path: (4, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md338,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md338-5;
	if (count(Md338,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p + p6.p;
	.sort:momrewrite-Md338-4;
	if (count(Md338,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md338-3;
	if (count(Md338,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md338-2;
	if (count(Md338,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md338-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd338()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md338,dotrewrite-d338-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md338,dotrewrite-d338-1)
	#call replace(Q.p4,`Q2'/2+i12-i2/2+i3/2,i,i12,i2,i3,Md338,dotrewrite-d338-2)
	#call replace(p4.p7,i10-i3/2-i7/2+i8/2,i,i10,i3,i7,i8,Md338,dotrewrite-d338-3)
	#call replace(p5.p7,-i10-i11+i3/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i8,i9,Md338,dotrewrite-d338-4)
#endif
#break
#endswitch
#break
*--#] d338 : 
*--#[ d314 :
#case Md314
#procedure SimpleDotd314()
if (count(Md314,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + p3.p + p5.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p8.p - p4.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p4.p6 = i12 - i14;
	if (count(Md314,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md314,dotrewrite-d314-2)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md314,dotrewrite-d314-3)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md314,dotrewrite-d314-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md314,dotrewrite-d314-5)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md314,dotrewrite-d314-6)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Md314,dotrewrite-d314-7)
	#call replace(p5.p8,-i10+i11-i2/2+i5/2-i7/2+i8/2,i,i10,i11,i2,i5,i7,i8,Md314,dotrewrite-d314-8)
#endif
#break
#case 18
* path: (1, 2, 6, 8)
#case 68
* path: (6, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md314,dotrewrite-d314-0)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md314,dotrewrite-d314-1)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md314,dotrewrite-d314-2)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Md314,dotrewrite-d314-3)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-4)
	#call replace(p1.p8,`Q2'/2+i11-i2/2-i3/2+i5/2,i,i11,i2,i3,i5,Md314,dotrewrite-d314-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md314,dotrewrite-d314-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md314,dotrewrite-d314-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md314,dotrewrite-d314-3)
	#call replace(p5.p7,-i10+i11-i4/2-i7/2+i8/2,i,i10,i11,i4,i7,i8,Md314,dotrewrite-d314-4)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-5)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case Q6
* path: (0, 3, 5, 6)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + p3.p + p5.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md314,dotrewrite-d314-1)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md314,dotrewrite-d314-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md314,dotrewrite-d314-3)
	#call replace(p3.p7,i10+i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md314,dotrewrite-d314-4)
	#call replace(p5.p7,-i10+i11-i4/2-i7/2+i8/2,i,i10,i11,i4,i7,i8,Md314,dotrewrite-d314-5)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-6)
#endif
#break
#case Q8
* path: (0, 2, 6, 8)
#case Q8
* path: (0, 4, 8)
#case 28
* path: (2, 6, 8)
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p8.p - p4.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p2.p6 = i12 - i13;
	if (count(Md314,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md314,dotrewrite-d314-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md314,dotrewrite-d314-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md314,dotrewrite-d314-4)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md314,dotrewrite-d314-5)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md314,dotrewrite-d314-6)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Md314,dotrewrite-d314-7)
	#call replace(p2.p8,i10-i11+i2/2+i4/2-i5/2,i,i10,i11,i2,i4,i5,Md314,dotrewrite-d314-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p2.p6 = i12 - i13;
	if (count(Md314,1)) id p4.p6 = i12 - i14;
	if (count(Md314,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md314,dotrewrite-d314-3)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md314,dotrewrite-d314-4)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md314,dotrewrite-d314-5)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md314,dotrewrite-d314-6)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-7)
#endif
#break
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 46
* path: (4, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md314,dotrewrite-d314-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md314,dotrewrite-d314-2)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md314,dotrewrite-d314-3)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md314,dotrewrite-d314-4)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-5)
#endif
#break
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p2.p6 = i12 - i13;
	if (count(Md314,1)) id p5.p6 = i13 - i14;
	if (count(Md314,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md314,dotrewrite-d314-3)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md314,dotrewrite-d314-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md314,dotrewrite-d314-5)
	#call replace(p5.p7,-i10+i11-i4/2-i7/2+i8/2,i,i10,i11,i4,i7,i8,Md314,dotrewrite-d314-6)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-7)
#endif
#break
#case 69
* path: (6, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p4.p + p8.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p9.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p2.p6 = i12 - i13;
	if (count(Md314,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md314,dotrewrite-d314-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md314,dotrewrite-d314-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md314,dotrewrite-d314-4)
	#call replace(p6.p9,-i6/2+i8/2-i9/2,i,i6,i8,i9,Md314,dotrewrite-d314-5)
	#call replace(Q.p9,-`Q2'/2-i10-i12+i3/2-i4/2,i,i10,i12,i3,i4,Md314,dotrewrite-d314-6)
	#call replace(p4.p9,-i12+i14-i4/2+i7/2-i8/2,i,i12,i14,i4,i7,i8,Md314,dotrewrite-d314-7)
	#call replace(p2.p9,-i10+i11-i12+i13-i2/2-i4/2+i5/2,i,i10,i11,i12,i13,i2,i4,i5,Md314,dotrewrite-d314-8)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + p3.p + p5.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	if (count(Md314,1)) id p4.p6 = i12 - i14;
	if (count(Md314,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md314,dotrewrite-d314-2)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md314,dotrewrite-d314-3)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md314,dotrewrite-d314-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md314,dotrewrite-d314-5)
	#call replace(p5.p7,-i10+i11-i4/2-i7/2+i8/2,i,i10,i11,i4,i7,i8,Md314,dotrewrite-d314-6)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md314,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md314-5;
	if (count(Md314,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md314-4;
	if (count(Md314,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md314-3;
	if (count(Md314,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md314-2;
	if (count(Md314,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md314-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd314()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md314,dotrewrite-d314-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md314,dotrewrite-d314-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md314,dotrewrite-d314-2)
	#call replace(p3.p7,i10+i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md314,dotrewrite-d314-3)
	#call replace(p6.p7,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md314,dotrewrite-d314-4)
#endif
#break
#endswitch
#break
*--#] d314 : 
*--#[ d315 :
#case Md315
#procedure SimpleDotd315()
if (count(Md315,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p3.p6^n? = i13^n;
	id p6.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p6.p - p5.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p6} = + p8.p - p4.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p4.p6 = i11 - i13;
	if (count(Md315,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md315,dotrewrite-d315-2)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md315,dotrewrite-d315-3)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md315,dotrewrite-d315-4)
	#call replace(p6.p8,i11-i13+i14,i,i11,i13,i14,Md315,dotrewrite-d315-5)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md315,dotrewrite-d315-6)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Md315,dotrewrite-d315-7)
	#call replace(p5.p8,-i12+i13-i14-i2/2+i4/2-i6/2-i7/2+i9/2,i,i12,i13,i14,i2,i4,i6,i7,i9,Md315,dotrewrite-d315-8)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p - p9.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	#call replace(p6.p8,i11-i13+i14,i,i11,i13,i14,Md315,dotrewrite-d315-0)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md315,dotrewrite-d315-1)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Md315,dotrewrite-d315-2)
	#call replace(p6.p9,-i12+i13-i14-i6,i,i12,i13,i14,i6,Md315,dotrewrite-d315-3)
	#call replace(Q.p9,-i1/2-i10-i11+i2/2+i3/2-i4/2,i,i1,i10,i11,i2,i3,i4,Md315,dotrewrite-d315-4)
	#call replace(p7.p9,i12-i13+i5/2+i6/2-i7/2-i9/2,i,i12,i13,i5,i6,i7,i9,Md315,dotrewrite-d315-5)
	#call replace(p8.p9,-i11+i12+i2/2+i6/2-i8/2-i9/2,i,i11,i12,i2,i6,i8,i9,Md315,dotrewrite-d315-6)
#endif
#break
#case Q2
* path: (0, 3, 1, 2)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p6.p - p5.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md315,dotrewrite-d315-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md315,dotrewrite-d315-2)
	#call replace(p2.p3,`Q2'/2-i1/2-i4/2+i5/2,i,i1,i4,i5,Md315,dotrewrite-d315-3)
	#call replace(p3.p7,i10+i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md315,dotrewrite-d315-4)
	#call replace(p2.p7,i12-i13+i14-i4/2+i5/2+i6/2+i8/2-i9/2,i,i12,i13,i14,i4,i5,i6,i8,i9,Md315,dotrewrite-d315-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q7
* path: (0, 1, 5, 7)
#case 15
* path: (1, 5)
#case 17
* path: (1, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p6.p - p7.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md315,dotrewrite-d315-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md315,dotrewrite-d315-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md315,dotrewrite-d315-3)
	#call replace(p5.p7,-i12+i13-i14-i5/2-i6/2-i7/2+i9/2,i,i12,i13,i14,i5,i6,i7,i9,Md315,dotrewrite-d315-4)
	#call replace(p1.p7,i10-i12+i13-i14+i4/2-i5/2-i6/2-i8/2+i9/2,i,i10,i12,i13,i14,i4,i5,i6,i8,i9,Md315,dotrewrite-d315-5)
#endif
#break
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case Q6
* path: (0, 3, 5, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p6.p - p7.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md315,dotrewrite-d315-1)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md315,dotrewrite-d315-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md315,dotrewrite-d315-3)
	#call replace(p3.p7,i10+i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md315,dotrewrite-d315-4)
	#call replace(p5.p7,-i12+i13-i14-i5/2-i6/2-i7/2+i9/2,i,i12,i13,i14,i5,i6,i7,i9,Md315,dotrewrite-d315-5)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q8
* path: (0, 4, 8)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 24
* path: (2, 8, 4)
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p6} = + p8.p - p4.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p - p6.p - p8.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p2.p6 = i11 - i12;
	if (count(Md315,1)) id p4.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md315,dotrewrite-d315-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md315,dotrewrite-d315-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md315,dotrewrite-d315-4)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md315,dotrewrite-d315-5)
	#call replace(p6.p8,i11-i13+i14,i,i11,i13,i14,Md315,dotrewrite-d315-6)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i4/2,i,i10,i3,i4,Md315,dotrewrite-d315-7)
	#call replace(p2.p8,i12-i13+i14+i2/2+i6/2+i8/2-i9/2,i,i12,i13,i14,i2,i6,i8,i9,Md315,dotrewrite-d315-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 27
* path: (2, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p6.p - p5.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p2.p6 = i11 - i12;
	if (count(Md315,1)) id p4.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md315,dotrewrite-d315-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md315,dotrewrite-d315-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md315,dotrewrite-d315-4)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md315,dotrewrite-d315-5)
	#call replace(p2.p7,i12-i13+i14-i4/2+i5/2+i6/2+i8/2-i9/2,i,i12,i13,i14,i4,i5,i6,i8,i9,Md315,dotrewrite-d315-6)
#endif
#break
#case 69
* path: (6, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p6} = - p5.p - p6.p - p9.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p2.p6 = i11 - i12;
	if (count(Md315,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md315,dotrewrite-d315-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md315,dotrewrite-d315-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md315,dotrewrite-d315-4)
	#call replace(p6.p9,-i12+i13-i14-i6,i,i12,i13,i14,i6,Md315,dotrewrite-d315-5)
	#call replace(p5.p9,i14-i5/2+i6/2+i7/2-i9/2,i,i14,i5,i6,i7,i9,Md315,dotrewrite-d315-6)
	#call replace(Q.p9,-i1/2-i10-i11+i2/2+i3/2-i4/2,i,i1,i10,i11,i2,i3,i4,Md315,dotrewrite-d315-7)
	#call replace(p2.p9,-i11+i13-i14+i2/2-i6/2-i8/2+i9/2,i,i11,i13,i14,i2,i6,i8,i9,Md315,dotrewrite-d315-8)
#endif
#break
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p6.p - p7.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p2.p6 = i11 - i12;
	if (count(Md315,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md315,dotrewrite-d315-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md315,dotrewrite-d315-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md315,dotrewrite-d315-4)
	#call replace(p5.p7,-i12+i13-i14-i5/2-i6/2-i7/2+i9/2,i,i12,i13,i14,i5,i6,i7,i9,Md315,dotrewrite-d315-5)
	#call replace(p2.p7,i12-i13+i14-i4/2+i5/2+i6/2+i8/2-i9/2,i,i12,i13,i14,i4,i5,i6,i8,i9,Md315,dotrewrite-d315-6)
#endif
#break
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 7)
#case 46
* path: (4, 7, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 57
* path: (5, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p6.p - p7.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	if (count(Md315,1)) id p4.p6 = i11 - i13;
	if (count(Md315,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md315,dotrewrite-d315-2)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md315,dotrewrite-d315-3)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md315,dotrewrite-d315-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md315,dotrewrite-d315-5)
	#call replace(p5.p7,-i12+i13-i14-i5/2-i6/2-i7/2+i9/2,i,i12,i13,i14,i5,i6,i7,i9,Md315,dotrewrite-d315-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md315,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md315-5;
	if (count(Md315,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p6.p - p5.p;
	.sort:momrewrite-Md315-4;
	if (count(Md315,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md315-3;
	if (count(Md315,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md315-2;
	if (count(Md315,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md315-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd315()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md315,dotrewrite-d315-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md315,dotrewrite-d315-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md315,dotrewrite-d315-2)
	#call replace(p3.p7,i10+i4/2+i7/2-i8/2,i,i10,i4,i7,i8,Md315,dotrewrite-d315-3)
	#call replace(p1.p7,i10-i12+i13-i14+i4/2-i5/2-i6/2-i8/2+i9/2,i,i10,i12,i13,i14,i4,i5,i6,i8,i9,Md315,dotrewrite-d315-4)
#endif
#break
#endswitch
#break
*--#] d315 : 
*--#[ d352 :
#case Md352
#procedure SimpleDotd352()
if (count(Md352,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p8^n? = i10^n;
	id p1.p8^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p3.p6^n? = i13^n;
	id p6.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md352,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md352-5;
	if (count(Md352,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p - p4.p;
	.sort:momrewrite-Md352-4;
	if (count(Md352,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md352-3;
	if (count(Md352,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md352-2;
	if (count(Md352,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md352-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd352()
	if (count(Md352,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md352,dotrewrite-d352-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md352,dotrewrite-d352-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md352,dotrewrite-d352-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md352,dotrewrite-d352-4)
	#call replace(p5.p6,i12-i13-i2/2-i6/2+i7/2,i,i12,i13,i2,i6,i7,Md352,dotrewrite-d352-5)
	#call replace(p5.p8,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md352,dotrewrite-d352-6)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q8
* path: (0, 1, 5, 8)
#case 15
* path: (1, 5)
#case 18
* path: (1, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md352,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p - p4.p;
	.sort:momrewrite-Md352-5;
	if (count(Md352,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md352-4;
	if (count(Md352,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p;
	.sort:momrewrite-Md352-3;
	if (count(Md352,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md352-2;
	if (count(Md352,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md352-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd352()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md352,dotrewrite-d352-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md352,dotrewrite-d352-1)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md352,dotrewrite-d352-2)
	#call replace(p1.p6,i12-i2/2-i6/2+i7/2,i,i12,i2,i6,i7,Md352,dotrewrite-d352-3)
	#call replace(p5.p6,i12-i13-i2/2-i6/2+i7/2,i,i12,i13,i2,i6,i7,Md352,dotrewrite-d352-4)
	#call replace(p5.p8,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md352,dotrewrite-d352-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 3, 4)
#case 26
* path: (2, 6)
#case 28
* path: (2, 6, 8)
#case 66
* path: (6,)
#case 67
* path: (6, 2, 7)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md352,1)) id p1.p?!{p1,[P+p1],[P-p1],p8} = + Q.p - p2.p;
	.sort:momrewrite-Md352-5;
	if (count(Md352,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md352-4;
	if (count(Md352,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md352-3;
	if (count(Md352,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md352-2;
	if (count(Md352,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p - p8.p;
	.sort:momrewrite-Md352-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd352()
	if (count(Md352,1)) id p4.p6 = i12 - i13;
	if (count(Md352,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md352,dotrewrite-d352-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md352,dotrewrite-d352-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md352,dotrewrite-d352-4)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md352,dotrewrite-d352-5)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md352,dotrewrite-d352-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md352,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p;
	.sort:momrewrite-Md352-5;
	if (count(Md352,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p - p4.p;
	.sort:momrewrite-Md352-4;
	if (count(Md352,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md352-3;
	if (count(Md352,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md352-2;
	if (count(Md352,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md352-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd352()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md352,dotrewrite-d352-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md352,dotrewrite-d352-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md352,dotrewrite-d352-2)
	#call replace(p1.p6,i12-i2/2-i6/2+i7/2,i,i12,i2,i6,i7,Md352,dotrewrite-d352-3)
	#call replace(p3.p8,i10+i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md352,dotrewrite-d352-4)
#endif
#break
#endswitch
#break
*--#] d352 : 
*--#[ d272 :
#case Md272
#procedure SimpleDotd272()
if (count(Md272,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md272,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p1.p;
	.sort:momrewrite-Md272-4;
	if (count(Md272,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = + p4.p - p3.p;
	.sort:momrewrite-Md272-3;
	if (count(Md272,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md272-2;
	if (count(Md272,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md272-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd272()
	if (count(Md272,1)) id p3.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md272,dotrewrite-d272-1)
	#call replace(p3.p4,-i1/2+i3/2+i4/2,i,i1,i3,i4,Md272,dotrewrite-d272-2)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md272,dotrewrite-d272-3)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md272,dotrewrite-d272-4)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md272,dotrewrite-d272-5)
	#call replace(p4.p5,-i1/2+i12-i13-i5/2+i6/2,i,i1,i12,i13,i5,i6,Md272,dotrewrite-d272-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 2, 3)
#case Q3
* path: (0, 3)
#case Q7
* path: (0, 3, 7)
#case 11
* path: (1,)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 23
* path: (2, 3)
#case 27
* path: (2, 3, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 35
* path: (3, 7, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 1, 6)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md272,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md272-4;
	if (count(Md272,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md272-3;
	if (count(Md272,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md272-2;
	if (count(Md272,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md272-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd272()
	if (count(Md272,1)) id p3.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md272,dotrewrite-d272-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md272,dotrewrite-d272-2)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md272,dotrewrite-d272-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md272,dotrewrite-d272-4)
#endif
#break
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md272,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p3.p;
	.sort:momrewrite-Md272-4;
	if (count(Md272,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md272-3;
	if (count(Md272,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md272-2;
	if (count(Md272,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p + p1.p - p4.p;
	.sort:momrewrite-Md272-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd272()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md272,dotrewrite-d272-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md272,dotrewrite-d272-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md272,dotrewrite-d272-2)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md272,dotrewrite-d272-3)
	#call replace(p4.p5,-i1/2+i12-i13-i5/2+i6/2,i,i1,i12,i13,i5,i6,Md272,dotrewrite-d272-4)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md272,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p1.p;
	.sort:momrewrite-Md272-4;
	if (count(Md272,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p3.p;
	.sort:momrewrite-Md272-3;
	if (count(Md272,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md272-2;
	if (count(Md272,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p7} = + p2.p + p4.p - Q.p;
	.sort:momrewrite-Md272-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd272()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md272,dotrewrite-d272-0)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md272,dotrewrite-d272-1)
	#call replace(p2.p7,i10+i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md272,dotrewrite-d272-2)
	#call replace(p4.p7,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md272,dotrewrite-d272-3)
	#call replace(p2.p4,`Q2'/2+i1/2-i2/2-i4/2+i9,i,i1,i2,i4,i9,Md272,dotrewrite-d272-4)
	#call replace(p4.p5,-i1/2+i12-i13-i5/2+i6/2,i,i1,i12,i13,i5,i6,Md272,dotrewrite-d272-5)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md272,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p3.p;
	.sort:momrewrite-Md272-4;
	if (count(Md272,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md272-3;
	if (count(Md272,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p5.p;
	.sort:momrewrite-Md272-2;
	if (count(Md272,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md272-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd272()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md272,dotrewrite-d272-0)
	#call replace(p1.p5,-i1/2-i5/2+i6/2,i,i1,i5,i6,Md272,dotrewrite-d272-1)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i9,i,i1,i3,i4,i9,Md272,dotrewrite-d272-2)
	#call replace(p2.p7,i10+i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md272,dotrewrite-d272-3)
#endif
#break
#endswitch
#break
*--#] d272 : 
*--#[ d194 :
#case Md194
#procedure SimpleDotd194()
if (count(Md194,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p7^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p8.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-0)
	#call replace(p6.p8,i2/2-i6/2-i8/2,i,i2,i6,i8,Md194,dotrewrite-d194-1)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md194,dotrewrite-d194-2)
	#call replace(Q.p8,`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md194,dotrewrite-d194-3)
	#call replace(Q.p6,-i1/2+i2/2+i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p2.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md194,dotrewrite-d194-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-3)
	#call replace(p2.p7,-i4/2+i5/2-i6/2+i8/2,i,i4,i5,i6,i8,Md194,dotrewrite-d194-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 27
* path: (2, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + p8.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p6.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(p2.p6,i2/2+i6/2-i8/2,i,i2,i6,i8,Md194,dotrewrite-d194-1)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-2)
	#call replace(p2.p7,-i4/2+i5/2-i6/2+i8/2,i,i4,i5,i6,i8,Md194,dotrewrite-d194-3)
	#call replace(Q.p6,-i1/2+i2/2+i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case 45
* path: (4, 3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md194,dotrewrite-d194-0)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md194,dotrewrite-d194-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md194,dotrewrite-d194-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-4)
#endif
#break
#case Q6
* path: (0, 3, 5, 6)
#case 36
* path: (3, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p8.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md194,dotrewrite-d194-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md194,dotrewrite-d194-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-3)
	#call replace(Q.p6,-i1/2+i2/2+i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md194,dotrewrite-d194-4)
	#call replace(p3.p6,-i1/2+i3/2-i4/2+i5/2-i7/2+i8/2-i9,i,i1,i3,i4,i5,i7,i8,i9,Md194,dotrewrite-d194-5)
#endif
#break
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p7.p + p8.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p8.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-0)
	#call replace(p6.p8,i2/2-i6/2-i8/2,i,i2,i6,i8,Md194,dotrewrite-d194-1)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-2)
	#call replace(Q.p8,`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md194,dotrewrite-d194-3)
	#call replace(p5.p8,-i2/2+i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md194,dotrewrite-d194-4)
	#call replace(Q.p6,-i1/2+i2/2+i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md194,dotrewrite-d194-5)
#endif
#break
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p8.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md194,dotrewrite-d194-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md194,dotrewrite-d194-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-3)
	#call replace(p3.p7,i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p5.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md194,dotrewrite-d194-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md194,dotrewrite-d194-2)
	#call replace(p3.p7,i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md194,dotrewrite-d194-3)
	#call replace(p1.p7,i4/2-i5/2+i6/2-i8/2+i9,i,i4,i5,i6,i8,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case Q8
* path: (0, 4, 8)
#case 24
* path: (2, 8, 4)
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p8.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p8.p - p4.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md194,dotrewrite-d194-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md194,dotrewrite-d194-2)
	#call replace(p2.p8,i2/2-i6/2+i8/2,i,i2,i6,i8,Md194,dotrewrite-d194-3)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md194,dotrewrite-d194-4)
	#call replace(Q.p8,`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md194,dotrewrite-d194-5)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p7.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p8.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(p2.p8,i2/2-i6/2+i8/2,i,i2,i6,i8,Md194,dotrewrite-d194-1)
	#call replace(p7.p8,-i4/2+i7/2+i8/2,i,i4,i7,i8,Md194,dotrewrite-d194-2)
	#call replace(p2.p7,-i4/2+i5/2-i6/2+i8/2,i,i4,i5,i6,i8,Md194,dotrewrite-d194-3)
	#call replace(Q.p8,`Q2'/2-i3/2+i4/2+i9,i,i3,i4,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q7
* path: (0, 1, 5, 7)
#case 15
* path: (1, 5)
#case 17
* path: (1, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md194,dotrewrite-d194-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-3)
	#call replace(p1.p7,i4/2-i5/2+i6/2-i8/2+i9,i,i4,i5,i6,i8,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case 46
* path: (4, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p8.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md194,dotrewrite-d194-0)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md194,dotrewrite-d194-1)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-2)
	#call replace(p4.p6,i2/2-i5/2+i7/2-i8/2,i,i2,i5,i7,i8,Md194,dotrewrite-d194-3)
	#call replace(Q.p6,-i1/2+i2/2+i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case Q2
* path: (0, 3, 1, 2)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p6.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p8.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p4.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md194,dotrewrite-d194-1)
	#call replace(p2.p3,`Q2'/2-i1/2-i4/2+i5/2,i,i1,i4,i5,Md194,dotrewrite-d194-2)
	#call replace(p2.p7,-i4/2+i5/2-i6/2+i8/2,i,i4,i5,i6,i8,Md194,dotrewrite-d194-3)
	#call replace(p3.p7,i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md194,dotrewrite-d194-4)
#endif
#break
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p6.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md194,dotrewrite-d194-1)
	#call replace(p2.p6,i2/2+i6/2-i8/2,i,i2,i6,i8,Md194,dotrewrite-d194-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md194,dotrewrite-d194-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md194,dotrewrite-d194-4)
	#call replace(Q.p6,-i1/2+i2/2+i3/2-i4/2-i9,i,i1,i2,i3,i4,i9,Md194,dotrewrite-d194-5)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 4)
#case Q7
* path: (0, 4, 7)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md194,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p8.p;
	.sort:momrewrite-Md194-5;
	if (count(Md194,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md194-4;
	if (count(Md194,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md194-3;
	if (count(Md194,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md194-2;
	if (count(Md194,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md194-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd194()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md194,dotrewrite-d194-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md194,dotrewrite-d194-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md194,dotrewrite-d194-2)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md194,dotrewrite-d194-3)
	#call replace(p2.p7,-i4/2+i5/2-i6/2+i8/2,i,i4,i5,i6,i8,Md194,dotrewrite-d194-4)
#endif
#break
#endswitch
#break
*--#] d194 : 
*--#[ d282 :
#case Md282
#procedure SimpleDotd282()
if (count(Md282,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p6^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p5.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 58
* path: (5, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	if (count(Md282,1)) id p3.p5 = i11 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md282,dotrewrite-d282-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md282,dotrewrite-d282-2)
	#call replace(p5.p8,-i11-i12+i13-i14-i5,i,i11,i12,i13,i14,i5,Md282,dotrewrite-d282-3)
	#call replace(Q.p8,-`Q2'/2-i10-i11+i2/2-i3/2-i9,i,i10,i11,i2,i3,i9,Md282,dotrewrite-d282-4)
	#call replace(p3.p8,i1/2-i11+i13-i4/2+i6/2-i7/2,i,i1,i11,i13,i4,i6,i7,Md282,dotrewrite-d282-5)
	#call replace(p1.p8,-i1/2+i11-i13+i14+i5/2+i7/2-i8/2,i,i1,i11,i13,i14,i5,i7,i8,Md282,dotrewrite-d282-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 2, 3)
#case Q3
* path: (0, 3)
#case Q6
* path: (0, 3, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 35
* path: (3, 6, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p5.p - p4.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	if (count(Md282,1)) id p3.p5 = i11 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md282,dotrewrite-d282-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md282,dotrewrite-d282-2)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md282,dotrewrite-d282-3)
	#call replace(p1.p6,-i11-i12+i13-i14+i3/2-i4/2-i5/2-i7/2+i8/2,i,i11,i12,i13,i14,i3,i4,i5,i7,i8,Md282,dotrewrite-d282-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p6.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = - p5.p - p7.p - p8.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p6.p - p8.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	#call replace(p5.p7,i11-i13+i14,i,i11,i13,i14,Md282,dotrewrite-d282-0)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md282,dotrewrite-d282-1)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i3/2,i,i10,i2,i3,Md282,dotrewrite-d282-2)
	#call replace(p5.p8,-i11-i12+i13-i14-i5,i,i11,i12,i13,i14,i5,Md282,dotrewrite-d282-3)
	#call replace(p7.p8,i1/2+i12+i5/2-i7/2-i8/2,i,i1,i12,i5,i7,i8,Md282,dotrewrite-d282-4)
	#call replace(Q.p8,-`Q2'/2-i10-i11+i2/2-i3/2-i9,i,i10,i11,i2,i3,i9,Md282,dotrewrite-d282-5)
	#call replace(p6.p8,i11+i12-i13+i4/2+i5/2-i6/2-i8/2,i,i11,i12,i13,i4,i5,i6,i8,Md282,dotrewrite-d282-6)
#endif
#break
#case 16
* path: (1, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p + p1.p - p4.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p5.p - p6.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md282,dotrewrite-d282-0)
	#call replace(p4.p5,i11+i12-i13,i,i11,i12,i13,Md282,dotrewrite-d282-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md282,dotrewrite-d282-2)
	#call replace(p4.p6,-i11-i12+i13-i14-i4/2-i5/2-i6/2+i8/2,i,i11,i12,i13,i14,i4,i5,i6,i8,Md282,dotrewrite-d282-3)
	#call replace(p1.p6,-i11-i12+i13-i14+i3/2-i4/2-i5/2-i7/2+i8/2,i,i11,i12,i13,i14,i3,i4,i5,i7,i8,Md282,dotrewrite-d282-4)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = - p3.p + p7.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p5.p - p7.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md282,dotrewrite-d282-0)
	#call replace(p5.p7,i11-i13+i14,i,i11,i13,i14,Md282,dotrewrite-d282-1)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i9,i,i1,i3,i4,i9,Md282,dotrewrite-d282-2)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i3/2,i,i10,i2,i3,Md282,dotrewrite-d282-3)
	#call replace(p2.p7,`Q2'/2+i10-i2/2+i6/2-i7/2,i,i10,i2,i6,i7,Md282,dotrewrite-d282-4)
	#call replace(p1.p7,-i1/2-i11-i12+i13-i14-i5/2-i7/2+i8/2,i,i1,i11,i12,i13,i14,i5,i7,i8,Md282,dotrewrite-d282-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = + p7.p - p3.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p5.p - p7.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	if (count(Md282,1)) id p3.p5 = i11 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md282,dotrewrite-d282-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md282,dotrewrite-d282-2)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md282,dotrewrite-d282-3)
	#call replace(p5.p7,i11-i13+i14,i,i11,i13,i14,Md282,dotrewrite-d282-4)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i3/2,i,i10,i2,i3,Md282,dotrewrite-d282-5)
	#call replace(p1.p7,-i1/2-i11-i12+i13-i14-i5/2-i7/2+i8/2,i,i1,i11,i12,i13,i14,i5,i7,i8,Md282,dotrewrite-d282-6)
#endif
#break
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p + p1.p - p4.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = - p4.p - p5.p - p8.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md282,dotrewrite-d282-0)
	#call replace(p4.p5,i11+i12-i13,i,i11,i12,i13,Md282,dotrewrite-d282-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i9,i,i2,i3,i9,Md282,dotrewrite-d282-2)
	#call replace(p4.p8,i14-i4/2+i5/2+i6/2-i8/2,i,i14,i4,i5,i6,i8,Md282,dotrewrite-d282-3)
	#call replace(p5.p8,-i11-i12+i13-i14-i5,i,i11,i12,i13,i14,i5,Md282,dotrewrite-d282-4)
	#call replace(Q.p8,-`Q2'/2-i10-i11+i2/2-i3/2-i9,i,i10,i11,i2,i3,i9,Md282,dotrewrite-d282-5)
	#call replace(p1.p8,-i1/2+i11-i13+i14+i5/2+i7/2-i8/2,i,i1,i11,i13,i14,i5,i7,i8,Md282,dotrewrite-d282-6)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md282,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md282-4;
	if (count(Md282,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p5.p - p4.p;
	.sort:momrewrite-Md282-3;
	if (count(Md282,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md282-2;
	if (count(Md282,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md282-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd282()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md282,dotrewrite-d282-0)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i9,i,i1,i3,i4,i9,Md282,dotrewrite-d282-1)
	#call replace(p2.p6,i10+i3/2+i6/2-i7/2,i,i10,i3,i6,i7,Md282,dotrewrite-d282-2)
	#call replace(p1.p6,-i11-i12+i13-i14+i3/2-i4/2-i5/2-i7/2+i8/2,i,i11,i12,i13,i14,i3,i4,i5,i7,i8,Md282,dotrewrite-d282-3)
#endif
#break
#endswitch
#break
*--#] d282 : 
*--#[ d278 :
#case Md278
#procedure SimpleDotd278()
if (count(Md278,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p6^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q7
* path: (0, 2, 7)
#case Q3
* path: (0, 3)
#case Q7
* path: (0, 3, 7)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 27
* path: (2, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = + p7.p - p3.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p5.p - p7.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	if (count(Md278,1)) id p2.p5 = i11 - i12;
	if (count(Md278,1)) id Q.p7 = i10 + i9;
	if (count(Md278,1)) id p5.p7 = i13 + i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md278,dotrewrite-d278-3)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md278,dotrewrite-d278-4)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md278,dotrewrite-d278-5)
	#call replace(p2.p7,-i11+i12+i13+i14+i2/2+i5/2+i7/2-i8/2,i,i11,i12,i13,i14,i2,i5,i7,i8,Md278,dotrewrite-d278-6)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p5.p - p6.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md278,dotrewrite-d278-0)
	#call replace(p4.p5,i11-i12-i13,i,i11,i12,i13,Md278,dotrewrite-d278-1)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md278,dotrewrite-d278-2)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md278,dotrewrite-d278-3)
	#call replace(p4.p6,-i11+i12+i13+i14+i4/2+i5/2+i6/2-i8/2,i,i11,i12,i13,i14,i4,i5,i6,i8,Md278,dotrewrite-d278-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p5.p - p6.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md278,dotrewrite-d278-0)
	#call replace(p4.p5,i11-i12-i13,i,i11,i12,i13,Md278,dotrewrite-d278-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md278,dotrewrite-d278-2)
	#call replace(p1.p4,`Q2'/2-i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md278,dotrewrite-d278-3)
	#call replace(p4.p6,-i11+i12+i13+i14+i4/2+i5/2+i6/2-i8/2,i,i11,i12,i13,i14,i4,i5,i6,i8,Md278,dotrewrite-d278-4)
	#call replace(p1.p6,i10+i11-i12-i13-i14+i3/2-i4/2-i5/2-i7/2+i8/2,i,i10,i11,i12,i13,i14,i3,i4,i5,i7,i8,Md278,dotrewrite-d278-5)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p2.p - p4.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = + p4.p - p5.p - p8.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	if (count(Md278,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md278,dotrewrite-d278-1)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md278,dotrewrite-d278-2)
	#call replace(p4.p5,i11-i12-i13,i,i11,i12,i13,Md278,dotrewrite-d278-3)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md278,dotrewrite-d278-4)
	#call replace(p4.p8,-i14+i4/2-i5/2-i6/2+i8/2,i,i14,i4,i5,i6,i8,Md278,dotrewrite-d278-5)
	#call replace(p5.p8,i11-i12-i13-i14-i5,i,i11,i12,i13,i14,i5,Md278,dotrewrite-d278-6)
	#call replace(Q.p8,`Q2'/2-i1/2-i10-i11+i2/2-i9,i,i1,i10,i11,i2,i9,Md278,dotrewrite-d278-7)
	#call replace(p2.p8,-i13-i14+i2/2-i5/2-i7/2+i8/2,i,i13,i14,i2,i5,i7,i8,Md278,dotrewrite-d278-8)
#endif
#break
#case 58
* path: (5, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = + p4.p - p5.p - p8.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	if (count(Md278,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md278,dotrewrite-d278-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md278,dotrewrite-d278-2)
	#call replace(p3.p8,-i13+i2/2-i4/2+i6/2-i7/2,i,i13,i2,i4,i6,i7,Md278,dotrewrite-d278-3)
	#call replace(p5.p8,i11-i12-i13-i14-i5,i,i11,i12,i13,i14,i5,Md278,dotrewrite-d278-4)
	#call replace(Q.p8,`Q2'/2-i1/2-i10-i11+i2/2-i9,i,i1,i10,i11,i2,i9,Md278,dotrewrite-d278-5)
	#call replace(p2.p8,-i13-i14+i2/2-i5/2-i7/2+i8/2,i,i13,i14,i2,i5,i7,i8,Md278,dotrewrite-d278-6)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p5.p + p4.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p5} = + p7.p - p3.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	if (count(Md278,1)) id Q.p7 = i10 + i9;
	if (count(Md278,1)) id p5.p7 = i13 + i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md278,dotrewrite-d278-2)
	#call replace(p4.p5,i11-i12-i13,i,i11,i12,i13,Md278,dotrewrite-d278-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md278,dotrewrite-d278-4)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md278,dotrewrite-d278-5)
	#call replace(p4.p7,-i11+i12+i13+i14+i2/2-i3/2+i5/2+i6/2-i8/2,i,i11,i12,i13,i14,i2,i3,i5,i6,i8,Md278,dotrewrite-d278-6)
#endif
#break
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p5.p + p4.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	if (count(Md278,1)) id p2.p5 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md278,dotrewrite-d278-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md278,dotrewrite-d278-2)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md278,dotrewrite-d278-3)
	#call replace(p2.p6,-i11+i12+i13+i14-i3/2+i4/2+i5/2+i7/2-i8/2,i,i11,i12,i13,i14,i3,i4,i5,i7,i8,Md278,dotrewrite-d278-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p4.p - p3.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p - p6.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p + p8.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	if (count(Md278,1)) id Q.p7 = i10 + i9;
	if (count(Md278,1)) id p5.p7 = i13 + i14;
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md278,dotrewrite-d278-2)
	#call replace(p5.p8,i11-i12-i13-i14-i5,i,i11,i12,i13,i14,i5,Md278,dotrewrite-d278-3)
	#call replace(Q.p8,`Q2'/2-i1/2-i10-i11+i2/2-i9,i,i1,i10,i11,i2,i9,Md278,dotrewrite-d278-4)
	#call replace(p7.p8,-i11+i12+i2/2+i5/2-i7/2-i8/2,i,i11,i12,i2,i5,i7,i8,Md278,dotrewrite-d278-5)
	#call replace(p6.p8,-i11+i12+i13+i4/2+i5/2-i6/2-i8/2,i,i11,i12,i13,i4,i5,i6,i8,Md278,dotrewrite-d278-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md278,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p5.p + p4.p;
	.sort:momrewrite-Md278-4;
	if (count(Md278,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md278-3;
	if (count(Md278,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md278-2;
	if (count(Md278,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md278-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd278()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md278,dotrewrite-d278-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md278,dotrewrite-d278-1)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md278,dotrewrite-d278-2)
	#call replace(p1.p6,i10+i11-i12-i13-i14+i3/2-i4/2-i5/2-i7/2+i8/2,i,i10,i11,i12,i13,i14,i3,i4,i5,i7,i8,Md278,dotrewrite-d278-3)
#endif
#break
#endswitch
#break
*--#] d278 : 
*--#[ d276 :
#case Md276
#procedure SimpleDotd276()
if (count(Md276,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p8^n? = i9^n;
	id p3.p8^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p3.p6^n? = i13^n;
	id p6.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p - p8.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p3.p?!{p3,[P+p3],[P-p3],p6,p8} = + Q.p - p4.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p4.p6 = i11 - i13;
	if (count(Md276,1)) id p5.p6 = i12 - i13;
	if (count(Md276,1)) id p4.p8 = -i10 + i9;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md276,dotrewrite-d276-3)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md276,dotrewrite-d276-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md276,dotrewrite-d276-5)
	#call replace(p5.p8,-i10+i11-i12-i14-i2/2-i6/2+i7/2-i8/2+i9,i,i10,i11,i12,i14,i2,i6,i7,i8,i9,Md276,dotrewrite-d276-6)
#endif
#break
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p3.p?!{p3,[P+p3],[P-p3],p6,p8} = + p1.p - p5.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p - p8.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p2.p6 = i11 - i12;
	if (count(Md276,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md276,dotrewrite-d276-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md276,dotrewrite-d276-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md276,dotrewrite-d276-4)
	#call replace(p2.p8,-i11+i12+i14+i2/2+i6/2-i7/2+i8/2,i,i11,i12,i14,i2,i6,i7,i8,Md276,dotrewrite-d276-5)
	#call replace(p5.p8,-i10+i11-i12-i14-i2/2-i6/2+i7/2-i8/2+i9,i,i10,i11,i12,i14,i2,i6,i7,i8,i9,Md276,dotrewrite-d276-6)
#endif
#break
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p3,p6} = + p2.p - p6.p - p7.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md276,dotrewrite-d276-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md276,dotrewrite-d276-2)
	#call replace(p2.p3,`Q2'/2-i1/2-i4/2+i5/2,i,i1,i4,i5,Md276,dotrewrite-d276-3)
	#call replace(p6.p7,i11-i12-i14-i6,i,i11,i12,i14,i6,Md276,dotrewrite-d276-4)
	#call replace(Q.p7,`Q2'/2-i1/2-i11+i2/2-i9,i,i1,i11,i2,i9,Md276,dotrewrite-d276-5)
	#call replace(p2.p7,-i14+i2/2-i6/2+i7/2-i8/2,i,i14,i2,i6,i7,i8,Md276,dotrewrite-d276-6)
	#call replace(p3.p7,`Q2'/2-i1/2-i10-i13-i4/2+i5/2,i,i1,i10,i13,i4,i5,Md276,dotrewrite-d276-7)
#endif
#break
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 4, 6)
#case 24
* path: (2, 6, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p3.p?!{p3,[P+p3],[P-p3],p6,p8} = + Q.p - p4.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p - p8.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p2.p6 = i11 - i12;
	if (count(Md276,1)) id p4.p6 = i11 - i13;
	if (count(Md276,1)) id p4.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md276,dotrewrite-d276-3)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md276,dotrewrite-d276-4)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md276,dotrewrite-d276-5)
	#call replace(p2.p8,-i11+i12+i14+i2/2+i6/2-i7/2+i8/2,i,i11,i12,i14,i2,i6,i7,i8,Md276,dotrewrite-d276-6)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p - p8.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md276,dotrewrite-d276-1)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md276,dotrewrite-d276-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md276,dotrewrite-d276-3)
	#call replace(p5.p8,-i10+i11-i12-i14-i2/2-i6/2+i7/2-i8/2+i9,i,i10,i11,i12,i14,i2,i6,i7,i8,i9,Md276,dotrewrite-d276-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p - p8.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p3.p?!{p3,[P+p3],[P-p3],p6,p8} = + p1.p - p5.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md276,dotrewrite-d276-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md276,dotrewrite-d276-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md276,dotrewrite-d276-3)
	#call replace(p1.p8,i11-i12-i14-i2/2-i6/2+i7/2-i8/2+i9,i,i11,i12,i14,i2,i6,i7,i8,i9,Md276,dotrewrite-d276-4)
	#call replace(p5.p8,-i10+i11-i12-i14-i2/2-i6/2+i7/2-i8/2+i9,i,i10,i11,i12,i14,i2,i6,i7,i8,i9,Md276,dotrewrite-d276-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 1, 2)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p - p8.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	if (count(Md276,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md276,dotrewrite-d276-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md276,dotrewrite-d276-2)
	#call replace(p2.p3,`Q2'/2-i1/2-i4/2+i5/2,i,i1,i4,i5,Md276,dotrewrite-d276-3)
	#call replace(p2.p8,-i11+i12+i14+i2/2+i6/2-i7/2+i8/2,i,i11,i12,i14,i2,i6,i7,i8,Md276,dotrewrite-d276-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 3, 1)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md276,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p - p8.p;
	.sort:momrewrite-Md276-4;
	if (count(Md276,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md276-3;
	if (count(Md276,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md276-2;
	if (count(Md276,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md276-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd276()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md276,dotrewrite-d276-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md276,dotrewrite-d276-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md276,dotrewrite-d276-2)
	#call replace(p1.p8,i11-i12-i14-i2/2-i6/2+i7/2-i8/2+i9,i,i11,i12,i14,i2,i6,i7,i8,i9,Md276,dotrewrite-d276-3)
#endif
#break
#endswitch
#break
*--#] d276 : 
*--#[ d287 :
#case Md287
#procedure SimpleDotd287()
if (count(Md287,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p8^n? = i9^n;
	id p1.p8^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p3.p6^n? = i13^n;
	id p6.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md287,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md287-4;
	if (count(Md287,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md287-3;
	if (count(Md287,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md287-2;
	if (count(Md287,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p - p8.p;
	.sort:momrewrite-Md287-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd287()
	if (count(Md287,1)) id p2.p6 = i11 - i12;
	if (count(Md287,1)) id p5.p6 = i12 - i13;
	if (count(Md287,1)) id p2.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md287,dotrewrite-d287-3)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md287,dotrewrite-d287-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md287,dotrewrite-d287-5)
	#call replace(p5.p8,-i12+i13-i14-i5/2-i6/2+i7/2-i8/2,i,i12,i13,i14,i5,i6,i7,i8,Md287,dotrewrite-d287-6)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md287,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p - p8.p;
	.sort:momrewrite-Md287-4;
	if (count(Md287,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md287-3;
	if (count(Md287,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md287-2;
	if (count(Md287,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md287-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd287()
	if (count(Md287,1)) id p4.p6 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md287,dotrewrite-d287-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md287,dotrewrite-d287-2)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md287,dotrewrite-d287-3)
	#call replace(p4.p8,-i10-i12+i13-i14-i5/2-i6/2+i7/2-i8/2+i9,i,i10,i12,i13,i14,i5,i6,i7,i8,i9,Md287,dotrewrite-d287-4)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md287,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p - p8.p;
	.sort:momrewrite-Md287-4;
	if (count(Md287,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md287-3;
	if (count(Md287,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md287-2;
	if (count(Md287,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md287-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd287()
	if (count(Md287,1)) id p2.p6 = i11 - i12;
	if (count(Md287,1)) id p4.p6 = i11 - i13;
	if (count(Md287,1)) id p2.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md287,dotrewrite-d287-3)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md287,dotrewrite-d287-4)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md287,dotrewrite-d287-5)
	#call replace(p4.p8,-i10-i12+i13-i14-i5/2-i6/2+i7/2-i8/2+i9,i,i10,i12,i13,i14,i5,i6,i7,i8,i9,Md287,dotrewrite-d287-6)
#endif
#break
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md287,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md287-4;
	if (count(Md287,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md287-3;
	if (count(Md287,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md287-2;
	if (count(Md287,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p - p8.p;
	.sort:momrewrite-Md287-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd287()
	if (count(Md287,1)) id p2.p6 = i11 - i12;
	if (count(Md287,1)) id p2.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md287,dotrewrite-d287-2)
	#call replace(p6.p7,-i12+i13-i14-i6,i,i12,i13,i14,i6,Md287,dotrewrite-d287-3)
	#call replace(Q.p7,-i1/2-i11+i2/2+i3/2-i4/2-i9,i,i1,i11,i2,i3,i4,i9,Md287,dotrewrite-d287-4)
	#call replace(p7.p8,i12-i13+i5/2+i6/2-i7/2-i8/2,i,i12,i13,i5,i6,i7,i8,Md287,dotrewrite-d287-5)
	#call replace(p2.p7,i10-i11+i12+i2/2-i4/2+i5/2-i9,i,i10,i11,i12,i2,i4,i5,i9,Md287,dotrewrite-d287-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md287,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md287-4;
	if (count(Md287,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md287-3;
	if (count(Md287,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md287-2;
	if (count(Md287,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p - p8.p;
	.sort:momrewrite-Md287-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd287()
	if (count(Md287,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md287,dotrewrite-d287-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md287,dotrewrite-d287-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md287,dotrewrite-d287-3)
	#call replace(p5.p8,-i12+i13-i14-i5/2-i6/2+i7/2-i8/2,i,i12,i13,i14,i5,i6,i7,i8,Md287,dotrewrite-d287-4)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md287,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p - p8.p;
	.sort:momrewrite-Md287-4;
	if (count(Md287,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md287-3;
	if (count(Md287,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md287-2;
	if (count(Md287,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md287-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd287()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md287,dotrewrite-d287-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md287,dotrewrite-d287-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md287,dotrewrite-d287-2)
	#call replace(p3.p8,i10+i12-i13+i14+i5/2+i6/2-i7/2+i8/2,i,i10,i12,i13,i14,i5,i6,i7,i8,Md287,dotrewrite-d287-3)
#endif
#break
#endswitch
#break
*--#] d287 : 
*--#[ d145 :
#case Md145
#procedure SimpleDotd145()
if (count(Md145,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p6^n? = i8^n;
	id p1.p6^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 17
* path: (1, 2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md145,dotrewrite-d145-0)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md145,dotrewrite-d145-1)
	#call replace(p1.p7,-i1/2+i3/2-i5/2-i9,i,i1,i3,i5,i9,Md145,dotrewrite-d145-2)
	#call replace(Q.p7,-i1/2+i2/2+i3/2-i4/2-i8,i,i1,i2,i3,i4,i8,Md145,dotrewrite-d145-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md145,dotrewrite-d145-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md145,dotrewrite-d145-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md145,dotrewrite-d145-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md145,dotrewrite-d145-3)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	if (count(Md145,1)) id p2.p6 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md145,dotrewrite-d145-1)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md145,dotrewrite-d145-2)
	#call replace(Q.p7,-i1/2+i2/2+i3/2-i4/2-i8,i,i1,i2,i3,i4,i8,Md145,dotrewrite-d145-3)
	#call replace(p2.p7,i2/2-i4/2+i5/2-i8+i9,i,i2,i4,i5,i8,i9,Md145,dotrewrite-d145-4)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p5.p - p7.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md145,dotrewrite-d145-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md145,dotrewrite-d145-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md145,dotrewrite-d145-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md145,dotrewrite-d145-3)
	#call replace(p1.p7,-i1/2+i3/2-i5/2-i9,i,i1,i3,i5,i9,Md145,dotrewrite-d145-4)
	#call replace(Q.p7,-i1/2+i2/2+i3/2-i4/2-i8,i,i1,i2,i3,i4,i8,Md145,dotrewrite-d145-5)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	if (count(Md145,1)) id p2.p6 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md145,dotrewrite-d145-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md145,dotrewrite-d145-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md145,dotrewrite-d145-3)
	#call replace(p4.p6,-i5/2-i6/2+i7/2+i8-i9,i,i5,i6,i7,i8,i9,Md145,dotrewrite-d145-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	if (count(Md145,1)) id p2.p6 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md145,dotrewrite-d145-1)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md145,dotrewrite-d145-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md145,dotrewrite-d145-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md145,dotrewrite-d145-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md145,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md145-4;
	if (count(Md145,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md145-3;
	if (count(Md145,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md145-2;
	if (count(Md145,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md145-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd145()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md145,dotrewrite-d145-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md145,dotrewrite-d145-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md145,dotrewrite-d145-2)
	#call replace(p3.p6,i5/2+i6/2-i7/2+i9,i,i5,i6,i7,i9,Md145,dotrewrite-d145-3)
#endif
#break
#endswitch
#break
*--#] d145 : 
*--#[ d154 :
#case Md154
#procedure SimpleDotd154()
if (count(Md154,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p7^n? = i9^n;
	id p1.p7^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md154,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md154-3;
	if (count(Md154,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = - p4.p + p1.p + Q.p;
	.sort:momrewrite-Md154-2;
	if (count(Md154,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p6.p - p7.p;
	.sort:momrewrite-Md154-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd154()
	#call replace(p1.p6,-i1/2-i10-i12+i3/2-i4/2,i,i1,i10,i12,i3,i4,Md154,dotrewrite-d154-0)
	#call replace(p5.p6,-i11-i12+i13-i14-i5,i,i11,i12,i13,i14,i5,Md154,dotrewrite-d154-1)
	#call replace(Q.p6,-`Q2'/2-i11+i2/2-i3/2-i8-i9,i,i11,i2,i3,i8,i9,Md154,dotrewrite-d154-2)
	#call replace(p6.p7,i11+i12-i13+i4/2+i5/2-i6/2-i7/2,i,i11,i12,i13,i4,i5,i6,i7,Md154,dotrewrite-d154-3)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 13
* path: (1, 3)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md154,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p4.p - p7.p;
	.sort:momrewrite-Md154-3;
	if (count(Md154,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md154-2;
	if (count(Md154,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md154-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd154()
	if (count(Md154,1)) id p3.p5 = i11 - i13;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md154,dotrewrite-d154-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md154,dotrewrite-d154-2)
	#call replace(p3.p7,-i10-i11-i12+i13-i14-i4/2-i5/2+i6/2-i7/2,i,i10,i11,i12,i13,i14,i4,i5,i6,i7,Md154,dotrewrite-d154-3)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q4
* path: (0, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 15
* path: (1, 5)
#case 34
* path: (3, 1, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md154,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md154-3;
	if (count(Md154,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p + p1.p - p4.p;
	.sort:momrewrite-Md154-2;
	if (count(Md154,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md154-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd154()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md154,dotrewrite-d154-0)
	#call replace(p4.p5,i11+i12-i13,i,i11,i12,i13,Md154,dotrewrite-d154-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i8,i,i2,i3,i8,Md154,dotrewrite-d154-2)
	#call replace(p4.p7,-i11-i12+i13-i14-i4/2-i5/2+i6/2-i7/2,i,i11,i12,i13,i14,i4,i5,i6,i7,Md154,dotrewrite-d154-3)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md154,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md154-3;
	if (count(Md154,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5,p7} = + p2.p + p4.p - Q.p;
	.sort:momrewrite-Md154-2;
	if (count(Md154,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p - p7.p;
	.sort:momrewrite-Md154-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd154()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md154,dotrewrite-d154-0)
	#call replace(p4.p5,i11+i12-i13,i,i11,i12,i13,Md154,dotrewrite-d154-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i8,i,i2,i3,i8,Md154,dotrewrite-d154-2)
	#call replace(p2.p4,`Q2'/2+i1/2-i2/2-i4/2+i8,i,i1,i2,i4,i8,Md154,dotrewrite-d154-3)
	#call replace(p4.p7,-i11-i12+i13-i14-i4/2-i5/2+i6/2-i7/2,i,i11,i12,i13,i14,i4,i5,i6,i7,Md154,dotrewrite-d154-4)
	#call replace(p2.p7,i10+i11+i12-i13+i14+i4/2+i5/2-i6/2+i7/2+i9,i,i10,i11,i12,i13,i14,i4,i5,i6,i7,i9,Md154,dotrewrite-d154-5)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md154,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p4.p - p7.p;
	.sort:momrewrite-Md154-3;
	if (count(Md154,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md154-2;
	if (count(Md154,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md154-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd154()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md154,dotrewrite-d154-0)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i8,i,i1,i3,i4,i8,Md154,dotrewrite-d154-1)
	#call replace(p2.p7,i10+i11+i12-i13+i14+i4/2+i5/2-i6/2+i7/2+i9,i,i10,i11,i12,i13,i14,i4,i5,i6,i7,i9,Md154,dotrewrite-d154-2)
#endif
#break
#endswitch
#break
*--#] d154 : 
*--#[ d61 :
#case Md61
#procedure SimpleDotd61()
if (count(Md61,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p1^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p1.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p4.p - Q.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md61,dotrewrite-d61-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md61,dotrewrite-d61-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i7,i,i2,i3,i7,Md61,dotrewrite-d61-2)
	#call replace(p2.p4,`Q2'/2+i1/2-i2/2-i4/2+i7,i,i1,i2,i4,i7,Md61,dotrewrite-d61-3)
	#call replace(p2.p5,i4/2+i5/2-i6/2+i8+i9,i,i4,i5,i6,i8,i9,Md61,dotrewrite-d61-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 56
* path: (5, 1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + Q.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p + p1.p + Q.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p6.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md61,dotrewrite-d61-0)
	#call replace(p1.p6,-i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md61,dotrewrite-d61-1)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i7-i8,i,i2,i3,i7,i8,Md61,dotrewrite-d61-2)
#endif
#break
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p4.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md61,dotrewrite-d61-0)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i7,i,i1,i3,i4,i7,Md61,dotrewrite-d61-1)
	#call replace(p2.p5,i4/2+i5/2-i6/2+i8+i9,i,i4,i5,i6,i8,i9,Md61,dotrewrite-d61-2)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md61,dotrewrite-d61-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md61,dotrewrite-d61-1)
	#call replace(p1.p6,-i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md61,dotrewrite-d61-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i7-i8,i,i2,i3,i7,i8,Md61,dotrewrite-d61-3)
	#call replace(p3.p6,i1/2-i3/2+i5/2-i6/2+i9,i,i1,i3,i5,i6,i9,Md61,dotrewrite-d61-4)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p1.p - p4.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md61,dotrewrite-d61-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md61,dotrewrite-d61-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i7,i,i2,i3,i7,Md61,dotrewrite-d61-2)
	#call replace(p1.p6,-i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md61,dotrewrite-d61-3)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i7-i8,i,i2,i3,i7,i8,Md61,dotrewrite-d61-4)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p4.p - p6.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p + p1.p - p2.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md61,dotrewrite-d61-0)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i7,i,i1,i3,i4,i7,Md61,dotrewrite-d61-1)
	#call replace(p1.p6,-i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md61,dotrewrite-d61-2)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i7-i8,i,i2,i3,i7,i8,Md61,dotrewrite-d61-3)
	#call replace(p2.p6,-`Q2'/2-i1/2+i2/2-i5/2+i6/2-i7-i8-i9,i,i1,i2,i5,i6,i7,i8,i9,Md61,dotrewrite-d61-4)
#endif
#break
#case Q4
* path: (0, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p1.p - p4.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md61,dotrewrite-d61-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md61,dotrewrite-d61-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i7,i,i2,i3,i7,Md61,dotrewrite-d61-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 5)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 5)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md61,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p4.p;
	.sort:momrewrite-Md61-3;
	if (count(Md61,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md61-2;
	if (count(Md61,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md61-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd61()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md61,dotrewrite-d61-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md61,dotrewrite-d61-1)
	#call replace(p3.p5,-i4/2-i5/2+i6/2-i9,i,i4,i5,i6,i9,Md61,dotrewrite-d61-2)
#endif
#break
#endswitch
#break
*--#] d61 : 
*--#[ d133 :
#case Md133
#procedure SimpleDotd133()
if (count(Md133,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p6^n? = i8^n;
	id p3.p6^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p - p5.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	if (count(Md133,1)) id p4.p6 = i8 - i9;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md133,dotrewrite-d133-1)
	#call replace(p4.p5,-i2/2+i4/2+i5/2,i,i2,i4,i5,Md133,dotrewrite-d133-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md133,dotrewrite-d133-3)
	#call replace(p5.p6,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md133,dotrewrite-d133-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md133,dotrewrite-d133-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md133,dotrewrite-d133-1)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md133,dotrewrite-d133-2)
	#call replace(p1.p6,-i2/2-i6/2+i7/2+i8,i,i2,i6,i7,i8,Md133,dotrewrite-d133-3)
	#call replace(p5.p6,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md133,dotrewrite-d133-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p2.p - p7.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md133,dotrewrite-d133-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md133,dotrewrite-d133-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md133,dotrewrite-d133-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md133,dotrewrite-d133-3)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md133,dotrewrite-d133-4)
	#call replace(p4.p7,i2/2+i4/2-i5/2-i8+i9,i,i2,i4,i5,i8,i9,Md133,dotrewrite-d133-5)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md133,dotrewrite-d133-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md133,dotrewrite-d133-1)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md133,dotrewrite-d133-2)
	#call replace(p5.p6,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md133,dotrewrite-d133-3)
#endif
#break
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md133,dotrewrite-d133-0)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md133,dotrewrite-d133-1)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md133,dotrewrite-d133-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md133,dotrewrite-d133-3)
	#call replace(p5.p6,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md133,dotrewrite-d133-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 4, 6)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 24
* path: (2, 6, 4)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	if (count(Md133,1)) id p4.p6 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md133,dotrewrite-d133-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md133,dotrewrite-d133-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md133,dotrewrite-d133-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md133,dotrewrite-d133-4)
#endif
#break
#case 37
* path: (3, 4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md133,dotrewrite-d133-0)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md133,dotrewrite-d133-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md133,dotrewrite-d133-2)
	#call replace(p3.p7,`Q2'/2-i1/2-i4/2+i5/2-i9,i,i1,i4,i5,i9,Md133,dotrewrite-d133-3)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p6.p + p7.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	if (count(Md133,1)) id p4.p6 = i8 - i9;
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md133,dotrewrite-d133-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md133,dotrewrite-d133-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md133,dotrewrite-d133-3)
	#call replace(p4.p7,i2/2+i4/2-i5/2-i8+i9,i,i2,i4,i5,i8,i9,Md133,dotrewrite-d133-4)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p2.p - p7.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md133,dotrewrite-d133-0)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md133,dotrewrite-d133-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md133,dotrewrite-d133-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md133,dotrewrite-d133-3)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md133,dotrewrite-d133-4)
	#call replace(p5.p7,i4/2-i5/2+i6/2-i7/2-i8+i9,i,i4,i5,i6,i7,i8,i9,Md133,dotrewrite-d133-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md133,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p2.p;
	.sort:momrewrite-Md133-4;
	if (count(Md133,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md133-3;
	if (count(Md133,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md133-2;
	if (count(Md133,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md133-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd133()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md133,dotrewrite-d133-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md133,dotrewrite-d133-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md133,dotrewrite-d133-2)
	#call replace(p1.p6,-i2/2-i6/2+i7/2+i8,i,i2,i6,i7,i8,Md133,dotrewrite-d133-3)
#endif
#break
#endswitch
#break
*--#] d133 : 
*--#[ d169 :
#case Md169
#procedure SimpleDotd169()
if (count(Md169,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p1.p5^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md169,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md169-3;
	if (count(Md169,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md169-2;
	if (count(Md169,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p5.p - p6.p;
	.sort:momrewrite-Md169-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd169()
	if (count(Md169,1)) id p2.p5 = -i10 + i8;
	if (count(Md169,1)) id p2.p6 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md169,dotrewrite-d169-2)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md169,dotrewrite-d169-3)
	#call replace(p5.p6,-i10-i11-i2/2-i5/2-i6/2+i7/2+i8+i9,i,i10,i11,i2,i5,i6,i7,i8,i9,Md169,dotrewrite-d169-4)
#endif
#break
#case 34
* path: (3, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md169,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p + p2.p;
	.sort:momrewrite-Md169-3;
	if (count(Md169,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md169-2;
	if (count(Md169,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md169-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd169()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md169,dotrewrite-d169-0)
	#call replace(p4.p5,-i10-i13+i8,i,i10,i13,i8,Md169,dotrewrite-d169-1)
	#call replace(p4.p6,-i11-i14+i9,i,i11,i14,i9,Md169,dotrewrite-d169-2)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md169,dotrewrite-d169-3)
	#call replace(p5.p6,-i10-i11-i2/2-i5/2-i6/2+i7/2+i8+i9,i,i10,i11,i2,i5,i6,i7,i8,i9,Md169,dotrewrite-d169-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md169,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p + p2.p;
	.sort:momrewrite-Md169-3;
	if (count(Md169,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md169-2;
	if (count(Md169,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md169-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd169()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md169,dotrewrite-d169-0)
	#call replace(p1.p3,i12-i2/2-i3/2+i4/2,i,i12,i2,i3,i4,Md169,dotrewrite-d169-1)
	#call replace(p5.p6,-i10-i11-i2/2-i5/2-i6/2+i7/2+i8+i9,i,i10,i11,i2,i5,i6,i7,i8,i9,Md169,dotrewrite-d169-2)
#endif
#break
#endswitch
#break
*--#] d169 : 
*--#[ d109 :
#case Md109
#procedure SimpleDotd109()
if (count(Md109,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p5^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p3.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md109,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md109-3;
	if (count(Md109,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md109-2;
	if (count(Md109,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p3} = + p2.p - p6.p;
	.sort:momrewrite-Md109-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd109()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md109,dotrewrite-d109-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md109,dotrewrite-d109-1)
	#call replace(p2.p6,i2/2-i5/2+i6/2,i,i2,i5,i6,Md109,dotrewrite-d109-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i7,i,i1,i2,i7,Md109,dotrewrite-d109-3)
	#call replace(p3.p6,i2/2+i3/2-i4/2-i9,i,i2,i3,i4,i9,Md109,dotrewrite-d109-4)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md109,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md109-3;
	if (count(Md109,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p6.p;
	.sort:momrewrite-Md109-2;
	if (count(Md109,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p - p3.p;
	.sort:momrewrite-Md109-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd109()
	#call replace(p5.p6,i2/2-i5/2-i6/2,i,i2,i5,i6,Md109,dotrewrite-d109-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i7,i,i1,i2,i7,Md109,dotrewrite-d109-1)
	#call replace(p3.p6,i2/2+i3/2-i4/2-i9,i,i2,i3,i4,i9,Md109,dotrewrite-d109-2)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md109,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p2.p;
	.sort:momrewrite-Md109-3;
	if (count(Md109,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md109-2;
	if (count(Md109,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md109-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd109()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md109,dotrewrite-d109-0)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i8,i,i2,i3,i4,i8,Md109,dotrewrite-d109-1)
	#call replace(p1.p5,-i2/2-i5/2+i6/2+i7,i,i2,i5,i6,i7,Md109,dotrewrite-d109-2)
#endif
#break
#case 34
* path: (3, 0, 4)
#if ( `MOMS' > 0 )
	if (count(Md109,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p2.p;
	.sort:momrewrite-Md109-3;
	if (count(Md109,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md109-2;
	if (count(Md109,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md109-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd109()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md109,dotrewrite-d109-0)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md109,dotrewrite-d109-1)
	#call replace(p4.p5,i2/2+i5/2-i6/2-i9,i,i2,i5,i6,i9,Md109,dotrewrite-d109-2)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md109,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md109-3;
	if (count(Md109,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md109-2;
	if (count(Md109,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p5.p;
	.sort:momrewrite-Md109-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd109()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md109,dotrewrite-d109-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md109,dotrewrite-d109-1)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md109,dotrewrite-d109-2)
#endif
#break
#endswitch
#break
*--#] d109 : 
*--#[ d134 :
#case Md134
#procedure SimpleDotd134()
if (count(Md134,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id Q.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 3, 7)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p5.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p7.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-0)
	#call replace(p5.p7,i2/2-i5/2-i7/2,i,i2,i5,i7,Md134,dotrewrite-d134-1)
	#call replace(p3.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md134,dotrewrite-d134-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md134,dotrewrite-d134-3)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p7.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p - p6.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-0)
	#call replace(p5.p7,i2/2-i5/2-i7/2,i,i2,i5,i7,Md134,dotrewrite-d134-1)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md134,dotrewrite-d134-3)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i8-i9,i,i1,i2,i8,i9,Md134,dotrewrite-d134-4)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p6.p + p4.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md134,dotrewrite-d134-0)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md134,dotrewrite-d134-2)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md134,dotrewrite-d134-3)
	#call replace(p4.p7,i2/2-i3/2-i5/2+i6/2,i,i2,i3,i5,i6,Md134,dotrewrite-d134-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p2.p - p7.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md134,dotrewrite-d134-1)
	#call replace(p2.p7,i2/2-i5/2+i7/2,i,i2,i5,i7,Md134,dotrewrite-d134-2)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-3)
	#call replace(Q.p7,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md134,dotrewrite-d134-4)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 36
* path: (3, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p7.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-0)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-1)
	#call replace(p3.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md134,dotrewrite-d134-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i8-i9,i,i1,i2,i8,i9,Md134,dotrewrite-d134-3)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p2.p - p4.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p5.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md134,dotrewrite-d134-1)
	#call replace(p2.p5,i2/2+i5/2-i7/2,i,i2,i5,i7,Md134,dotrewrite-d134-2)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-3)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md134,dotrewrite-d134-4)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p4.p - p6.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md134,dotrewrite-d134-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-2)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md134,dotrewrite-d134-3)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i8-i9,i,i1,i2,i8,i9,Md134,dotrewrite-d134-4)
#endif
#break
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p2.p + Q.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md134,dotrewrite-d134-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md134,dotrewrite-d134-2)
	#call replace(p3.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md134,dotrewrite-d134-3)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p5.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p2.p - p7.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md134,dotrewrite-d134-1)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i8,i,i2,i3,i4,i8,Md134,dotrewrite-d134-2)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i8-i9,i,i1,i2,i8,i9,Md134,dotrewrite-d134-3)
	#call replace(p1.p6,`Q2'/2-i1/2+i2/2+i3/2-i4/2+i5/2-i7/2-i8-i9,i,i1,i2,i3,i4,i5,i7,i8,i9,Md134,dotrewrite-d134-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p5.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p7.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p2.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i8,i,i2,i3,i4,i8,Md134,dotrewrite-d134-1)
	#call replace(p1.p5,-i2/2-i5/2+i7/2+i9,i,i2,i5,i7,i9,Md134,dotrewrite-d134-2)
	#call replace(p3.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md134,dotrewrite-d134-3)
#endif
#break
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p6.p + p7.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p5.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p2.p5,i2/2+i5/2-i7/2,i,i2,i5,i7,Md134,dotrewrite-d134-1)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-2)
	#call replace(p2.p6,-i3/2+i4/2-i5/2+i7/2,i,i3,i4,i5,i7,Md134,dotrewrite-d134-3)
	#call replace(Q.p6,`Q2'/2-i1/2+i2/2-i8-i9,i,i1,i2,i8,i9,Md134,dotrewrite-d134-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p6.p + p7.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p2.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md134,dotrewrite-d134-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i8,i,i1,i2,i8,Md134,dotrewrite-d134-2)
	#call replace(p1.p5,-i2/2-i5/2+i7/2+i9,i,i2,i5,i7,i9,Md134,dotrewrite-d134-3)
	#call replace(p1.p4,`Q2'/2-i1/2+i3/2-i4/2-i8,i,i1,i3,i4,i8,Md134,dotrewrite-d134-4)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q3
* path: (0, 3)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md134,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p7.p;
	.sort:momrewrite-Md134-4;
	if (count(Md134,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md134-3;
	if (count(Md134,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md134-2;
	if (count(Md134,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p5.p;
	.sort:momrewrite-Md134-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd134()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md134,dotrewrite-d134-0)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md134,dotrewrite-d134-1)
	#call replace(p2.p5,i2/2+i5/2-i7/2,i,i2,i5,i7,Md134,dotrewrite-d134-2)
	#call replace(p3.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md134,dotrewrite-d134-3)
#endif
#break
#endswitch
#break
*--#] d134 : 
*--#[ d147 :
#case Md147
#procedure SimpleDotd147()
if (count(Md147,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 12
* path: (1, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p5.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p7.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p5.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md147,dotrewrite-d147-0)
	#call replace(p1.p5,-i1/2-i5/2+i7/2,i,i1,i5,i7,Md147,dotrewrite-d147-1)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i8,i,i1,i3,i4,i8,Md147,dotrewrite-d147-2)
	#call replace(p2.p5,-i1/2+i4/2-i6/2+i7/2+i9,i,i1,i4,i6,i7,i9,Md147,dotrewrite-d147-3)
#endif
#break
#case 27
* path: (2, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p5.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p7.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p1.p - p7.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	if (count(Md147,1)) id Q.p7 = -i8 - i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md147,dotrewrite-d147-1)
	#call replace(p1.p7,-i1/2+i5/2-i7/2,i,i1,i5,i7,Md147,dotrewrite-d147-2)
	#call replace(p1.p2,i1/2+i3/2-i4/2+i8,i,i1,i3,i4,i8,Md147,dotrewrite-d147-3)
	#call replace(p2.p7,-i3/2+i6/2-i7/2-i8-i9,i,i3,i6,i7,i8,i9,Md147,dotrewrite-d147-4)
#endif
#break
#case 16
* path: (1, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p5.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p4.p - p6.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md147,dotrewrite-d147-0)
	#call replace(p4.p6,-i4/2+i5/2-i6/2,i,i4,i5,i6,Md147,dotrewrite-d147-1)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i8,i,i2,i3,i8,Md147,dotrewrite-d147-2)
	#call replace(p1.p6,i3/2-i4/2+i5/2-i7/2,i,i3,i4,i5,i7,Md147,dotrewrite-d147-3)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8-i9,i,i2,i3,i8,i9,Md147,dotrewrite-d147-4)
#endif
#break
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = - p5.p - p7.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p6.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p6.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	if (count(Md147,1)) id Q.p7 = -i8 - i9;
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md147,dotrewrite-d147-1)
	#call replace(p5.p7,i1/2-i5/2-i7/2,i,i1,i5,i7,Md147,dotrewrite-d147-2)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md147,dotrewrite-d147-3)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8-i9,i,i2,i3,i8,i9,Md147,dotrewrite-d147-4)
#endif
#break
#case Q6
* path: (0, 3, 6)
#case 26
* path: (2, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p1.p - p7.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md147,dotrewrite-d147-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md147,dotrewrite-d147-1)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md147,dotrewrite-d147-2)
	#call replace(p1.p6,i3/2-i4/2+i5/2-i7/2,i,i3,i4,i5,i7,Md147,dotrewrite-d147-3)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8-i9,i,i2,i3,i8,i9,Md147,dotrewrite-d147-4)
#endif
#break
#case 35
* path: (3, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = - p5.p - p7.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p6.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md147,dotrewrite-d147-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md147,dotrewrite-d147-1)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md147,dotrewrite-d147-2)
	#call replace(p3.p5,i1/2-i4/2+i6/2-i7/2,i,i1,i4,i6,i7,Md147,dotrewrite-d147-3)
	#call replace(Q.p6,-`Q2'/2+i2/2-i3/2-i8-i9,i,i2,i3,i8,i9,Md147,dotrewrite-d147-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q3
* path: (0, 2, 3)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 2, 3)
#case 17
* path: (1, 7)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = - p1.p - p7.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p3.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	if (count(Md147,1)) id Q.p7 = -i8 - i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md147,dotrewrite-d147-1)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md147,dotrewrite-d147-2)
	#call replace(p1.p7,-i1/2+i5/2-i7/2,i,i1,i5,i7,Md147,dotrewrite-d147-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md147,dotrewrite-d147-4)
#endif
#break
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p1.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p5.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md147,dotrewrite-d147-0)
	#call replace(p1.p5,-i1/2-i5/2+i7/2,i,i1,i5,i7,Md147,dotrewrite-d147-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md147,dotrewrite-d147-2)
	#call replace(Q.p4,`Q2'/2-i2/2+i3/2+i8,i,i2,i3,i8,Md147,dotrewrite-d147-3)
#endif
#break
#default
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md147,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p + p7.p;
	.sort:momrewrite-Md147-4;
	if (count(Md147,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p3.p;
	.sort:momrewrite-Md147-3;
	if (count(Md147,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p3.p;
	.sort:momrewrite-Md147-2;
	if (count(Md147,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p5.p;
	.sort:momrewrite-Md147-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd147()
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md147,dotrewrite-d147-0)
	#call replace(p1.p3,-i1/2-i3/2+i4/2,i,i1,i3,i4,Md147,dotrewrite-d147-1)
	#call replace(p1.p5,-i1/2-i5/2+i7/2,i,i1,i5,i7,Md147,dotrewrite-d147-2)
	#call replace(p3.p5,i1/2-i4/2+i6/2-i7/2,i,i1,i4,i6,i7,Md147,dotrewrite-d147-3)
#endif
#break
#endswitch
#break
*--#] d147 : 
*--#[ d267 :
#case Md267
#procedure SimpleDotd267()
if (count(Md267,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 58
* path: (5, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md267,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p3.p + p7.p;
	.sort:momrewrite-Md267-4;
	if (count(Md267,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md267-3;
	if (count(Md267,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p;
	.sort:momrewrite-Md267-2;
	if (count(Md267,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p8.p;
	.sort:momrewrite-Md267-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd267()
	if (count(Md267,1)) id p3.p5 = -i11 + i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md267,dotrewrite-d267-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md267,dotrewrite-d267-2)
	#call replace(p5.p8,-i5/2+i7/2-i8/2,i,i5,i7,i8,Md267,dotrewrite-d267-3)
	#call replace(Q.p8,-`Q2'/2-i10+i2/2-i3/2-i9,i,i10,i2,i3,i9,Md267,dotrewrite-d267-4)
	#call replace(p1.p8,-i1/2-i13-i14-i3/2+i4/2,i,i1,i13,i14,i3,i4,Md267,dotrewrite-d267-5)
	#call replace(p3.p8,i11-i3/2+i6/2-i7/2-i9,i,i11,i3,i6,i7,i9,Md267,dotrewrite-d267-6)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md267,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md267-4;
	if (count(Md267,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p6.p;
	.sort:momrewrite-Md267-3;
	if (count(Md267,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md267-2;
	if (count(Md267,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p1.p - p6.p;
	.sort:momrewrite-Md267-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd267()
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md267,dotrewrite-d267-0)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md267,dotrewrite-d267-1)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i3/2,i,i10,i2,i3,Md267,dotrewrite-d267-2)
	#call replace(p1.p7,i1/2+i14+i3/2-i4/2,i,i1,i14,i3,i4,Md267,dotrewrite-d267-3)
	#call replace(p5.p6,i11-i5/2-i7/2+i8/2-i9,i,i11,i5,i7,i8,i9,Md267,dotrewrite-d267-4)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case Q6
* path: (0, 1, 6)
#case Q3
* path: (0, 2, 3)
#case Q3
* path: (0, 3)
#case Q6
* path: (0, 3, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 5)
#case 16
* path: (1, 6)
#case 23
* path: (2, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 35
* path: (3, 6, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md267,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md267-4;
	if (count(Md267,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md267-3;
	if (count(Md267,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p;
	.sort:momrewrite-Md267-2;
	if (count(Md267,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md267-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd267()
	if (count(Md267,1)) id p3.p5 = -i11 + i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md267,dotrewrite-d267-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md267,dotrewrite-d267-2)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md267,dotrewrite-d267-3)
	#call replace(p5.p6,i11-i5/2-i7/2+i8/2-i9,i,i11,i5,i7,i8,i9,Md267,dotrewrite-d267-4)
#endif
#break
#case Q7
* path: (0, 2, 3, 7)
#case Q7
* path: (0, 3, 7)
#case 17
* path: (1, 5, 7)
#case 27
* path: (2, 3, 7)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md267,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p3.p;
	.sort:momrewrite-Md267-4;
	if (count(Md267,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p1.p;
	.sort:momrewrite-Md267-3;
	if (count(Md267,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p7.p - p3.p;
	.sort:momrewrite-Md267-2;
	if (count(Md267,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md267-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd267()
	if (count(Md267,1)) id p3.p5 = -i11 + i9;
	#call replace(Q.p3,`Q2'/2-i2/2+i3/2,i,i2,i3,Md267,dotrewrite-d267-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md267,dotrewrite-d267-2)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md267,dotrewrite-d267-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md267,dotrewrite-d267-4)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i3/2,i,i10,i2,i3,Md267,dotrewrite-d267-5)
	#call replace(p1.p7,i1/2+i14+i3/2-i4/2,i,i1,i14,i3,i4,Md267,dotrewrite-d267-6)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 1, 5)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md267,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md267-4;
	if (count(Md267,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md267-3;
	if (count(Md267,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p2.p;
	.sort:momrewrite-Md267-2;
	if (count(Md267,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md267-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd267()
	#call replace(Q.p2,`Q2'/2+i2/2-i3/2,i,i2,i3,Md267,dotrewrite-d267-0)
	#call replace(p1.p2,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md267,dotrewrite-d267-1)
	#call replace(p2.p6,i10+i3/2+i6/2-i7/2,i,i10,i3,i6,i7,Md267,dotrewrite-d267-2)
	#call replace(p5.p6,i11-i5/2-i7/2+i8/2-i9,i,i11,i5,i7,i8,i9,Md267,dotrewrite-d267-3)
#endif
#break
#endswitch
#break
*--#] d267 : 
*--#[ d279 :
#case Md279
#procedure SimpleDotd279()
if (count(Md279,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p1.p + Q.p - p3.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p - p6.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id Q.p7 = i10 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md279,dotrewrite-d279-1)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md279,dotrewrite-d279-2)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-3)
	#call replace(p5.p6,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md279,dotrewrite-d279-4)
	#call replace(p1.p7,i11-i2/2-i3/2+i4/2+i9,i,i11,i2,i3,i4,i9,Md279,dotrewrite-d279-5)
#endif
#break
#case Q7
* path: (0, 3, 7)
#case 27
* path: (2, 5, 7)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p7.p - p3.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id p2.p5 = i12 - i13;
	if (count(Md279,1)) id Q.p7 = i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md279,dotrewrite-d279-2)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md279,dotrewrite-d279-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-4)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md279,dotrewrite-d279-5)
	#call replace(p2.p7,i10-i11+i2/2+i3/2-i4/2,i,i10,i11,i2,i3,i4,Md279,dotrewrite-d279-6)
#endif
#break
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 4, 5)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md279,dotrewrite-d279-0)
	#call replace(p4.p5,i12-i13-i14,i,i12,i13,i14,Md279,dotrewrite-d279-1)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-2)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md279,dotrewrite-d279-3)
	#call replace(p5.p6,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md279,dotrewrite-d279-4)
	#call replace(p4.p6,i10-i11+i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md279,dotrewrite-d279-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + Q.p - p1.p - p4.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md279,dotrewrite-d279-0)
	#call replace(p4.p5,i12-i13-i14,i,i12,i13,i14,Md279,dotrewrite-d279-1)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md279,dotrewrite-d279-2)
	#call replace(p5.p6,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md279,dotrewrite-d279-3)
	#call replace(p1.p4,`Q2'/2-i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md279,dotrewrite-d279-4)
	#call replace(p4.p6,i10-i11+i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md279,dotrewrite-d279-5)
#endif
#break
#case 58
* path: (5, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p3.p + p7.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p8.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md279,dotrewrite-d279-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md279,dotrewrite-d279-2)
	#call replace(Q.p8,-i10-i12-i9,i,i10,i12,i9,Md279,dotrewrite-d279-3)
	#call replace(p5.p8,-i5/2+i7/2-i8/2,i,i5,i7,i8,Md279,dotrewrite-d279-4)
	#call replace(p3.p8,-i14-i3/2+i6/2-i7/2,i,i14,i3,i6,i7,Md279,dotrewrite-d279-5)
	#call replace(p2.p8,-i10+i11-i12+i13-i2/2-i3/2+i4/2,i,i10,i11,i12,i13,i2,i3,i4,Md279,dotrewrite-d279-6)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p7.p - p3.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id Q.p7 = i10 + i9;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md279,dotrewrite-d279-1)
	#call replace(p4.p5,i12-i13-i14,i,i12,i13,i14,Md279,dotrewrite-d279-2)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md279,dotrewrite-d279-4)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md279,dotrewrite-d279-5)
	#call replace(p4.p7,i10-i11+i2/2-i4/2+i6/2-i7/2,i,i10,i11,i2,i4,i6,i7,Md279,dotrewrite-d279-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id p2.p5 = i12 - i13;
	if (count(Md279,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md279,dotrewrite-d279-2)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md279,dotrewrite-d279-3)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-4)
	#call replace(p5.p6,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md279,dotrewrite-d279-5)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p3.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p2.p - p4.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id p2.p5 = i12 - i13;
	if (count(Md279,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md279,dotrewrite-d279-2)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md279,dotrewrite-d279-3)
	#call replace(p4.p5,i12-i13-i14,i,i12,i13,i14,Md279,dotrewrite-d279-4)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md279,dotrewrite-d279-5)
	#call replace(p5.p6,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md279,dotrewrite-d279-6)
	#call replace(p4.p6,i10-i11+i3/2+i6/2-i7/2,i,i10,i11,i3,i6,i7,Md279,dotrewrite-d279-7)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p7.p - p3.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	if (count(Md279,1)) id Q.p7 = i10 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md279,dotrewrite-d279-1)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md279,dotrewrite-d279-3)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md279,dotrewrite-d279-4)
	#call replace(p1.p7,i11-i2/2-i3/2+i4/2+i9,i,i11,i2,i3,i4,i9,Md279,dotrewrite-d279-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q6
* path: (0, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 16
* path: (1, 2, 6)
#case 13
* path: (1, 3)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md279,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md279-4;
	if (count(Md279,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md279-3;
	if (count(Md279,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md279-2;
	if (count(Md279,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md279-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd279()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md279,dotrewrite-d279-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md279,dotrewrite-d279-1)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md279,dotrewrite-d279-2)
	#call replace(p5.p6,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md279,dotrewrite-d279-3)
#endif
#break
#endswitch
#break
*--#] d279 : 
*--#[ d337 :
#case Md337
#procedure SimpleDotd337()
if (count(Md337,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p3.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p5^n? = i13^n;
	id Q.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 27
* path: (2, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p2.p - p3.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p3.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	if (count(Md337,1)) id p2.p5 = i10 + i11;
	if (count(Md337,1)) id Q.p7 = i12 + i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md337,dotrewrite-d337-2)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-4)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-5)
	#call replace(p2.p7,-i11+i3/2-i4/2-i6/2+i7/2+i8/2-i9/2,i,i11,i3,i4,i6,i7,i8,i9,Md337,dotrewrite-d337-6)
#endif
#break
#case 69
* path: (6, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p4.p - p3.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = - p6.p + p7.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p9.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	#call replace(Q.p9,-i12-i13-i14,i,i12,i13,i14,Md337,dotrewrite-d337-0)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md337,dotrewrite-d337-1)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-2)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-3)
	#call replace(p5.p6,-i10-i5/2-i7/2+i9/2,i,i10,i5,i7,i9,Md337,dotrewrite-d337-4)
	#call replace(p4.p6,-i11-i2/2+i3/2+i8/2-i9/2,i,i11,i2,i3,i8,i9,Md337,dotrewrite-d337-5)
	#call replace(p6.p9,i10+i3/2+i5/2-i6/2-i9/2,i,i10,i3,i5,i6,i9,Md337,dotrewrite-d337-6)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p3.p + p7.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p9.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-0)
	#call replace(Q.p9,-i12-i13-i14,i,i12,i13,i14,Md337,dotrewrite-d337-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md337,dotrewrite-d337-2)
	#call replace(p5.p9,-i5/2+i7/2-i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-3)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-4)
	#call replace(p3.p9,-i10-i3/2+i6/2-i7/2,i,i10,i3,i6,i7,Md337,dotrewrite-d337-5)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 2, 5)
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case Q6
* path: (0, 2, 6)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 5)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p2.p - p3.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	if (count(Md337,1)) id p2.p5 = i10 + i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md337,dotrewrite-d337-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-2)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-3)
	#call replace(p5.p6,-i10-i5/2-i7/2+i9/2,i,i10,i5,i7,i9,Md337,dotrewrite-d337-4)
	#call replace(p2.p6,-i11-i2/2-i6/2+i7/2+i8/2-i9/2,i,i11,i2,i6,i7,i8,i9,Md337,dotrewrite-d337-5)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p4.p - p3.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p - p6.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	if (count(Md337,1)) id Q.p7 = i12 + i14;
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-1)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-2)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-3)
	#call replace(p5.p6,-i10-i5/2-i7/2+i9/2,i,i10,i5,i7,i9,Md337,dotrewrite-d337-4)
	#call replace(p4.p7,-i11-i4/2+i8/2-i9/2,i,i11,i4,i8,i9,Md337,dotrewrite-d337-5)
	#call replace(p4.p6,-i11-i2/2+i3/2+i8/2-i9/2,i,i11,i2,i3,i8,i9,Md337,dotrewrite-d337-6)
#endif
#break
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p3,p4} = - p7.p - p9.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p3.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	if (count(Md337,1)) id Q.p7 = i12 + i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-1)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-2)
	#call replace(Q.p9,-i12-i13-i14,i,i12,i13,i14,Md337,dotrewrite-d337-3)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md337,dotrewrite-d337-4)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-5)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-6)
	#call replace(p4.p7,-i11-i4/2+i8/2-i9/2,i,i11,i4,i8,i9,Md337,dotrewrite-d337-7)
	#call replace(p3.p9,-i10-i3/2+i6/2-i7/2,i,i10,i3,i6,i7,Md337,dotrewrite-d337-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p3.p + p7.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p - p5.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-0)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md337,dotrewrite-d337-1)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-2)
	#call replace(p5.p8,-i11-i5/2+i7/2-i9/2,i,i11,i5,i7,i9,Md337,dotrewrite-d337-3)
	#call replace(Q.p8,-`Q2'/2+i1/2-i13-i14-i2/2,i,i1,i13,i14,i2,Md337,dotrewrite-d337-4)
	#call replace(p3.p8,-i10-i2/2+i4/2+i6/2-i7/2,i,i10,i2,i4,i6,i7,Md337,dotrewrite-d337-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md337,dotrewrite-d337-0)
	#call replace(p1.p5,-i10-i11+i13,i,i10,i11,i13,Md337,dotrewrite-d337-1)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-2)
	#call replace(p1.p3,i12-i2/2-i3/2+i4/2,i,i12,i2,i3,i4,Md337,dotrewrite-d337-3)
	#call replace(p5.p6,-i10-i5/2-i7/2+i9/2,i,i10,i5,i7,i9,Md337,dotrewrite-d337-4)
	#call replace(p1.p6,i11+i14+i2/2+i6/2-i7/2-i8/2+i9/2,i,i11,i14,i2,i6,i7,i8,i9,Md337,dotrewrite-d337-5)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p4.p - p3.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p8.p + p9.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-0)
	#call replace(p5.p6,-i10-i5/2-i7/2+i9/2,i,i10,i5,i7,i9,Md337,dotrewrite-d337-1)
	#call replace(p5.p8,-i11-i5/2+i7/2-i9/2,i,i11,i5,i7,i9,Md337,dotrewrite-d337-2)
	#call replace(Q.p8,-`Q2'/2+i1/2-i13-i14-i2/2,i,i1,i13,i14,i2,Md337,dotrewrite-d337-3)
	#call replace(p3.p8,-i10-i2/2+i4/2+i6/2-i7/2,i,i10,i2,i4,i6,i7,Md337,dotrewrite-d337-4)
	#call replace(p6.p8,i10+i11+i2/2+i5/2-i6/2-i8/2,i,i10,i11,i2,i5,i6,i8,Md337,dotrewrite-d337-5)
#endif
#break
#case Q3
* path: (0, 3)
#case Q7
* path: (0, 3, 7)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p3.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	if (count(Md337,1)) id Q.p7 = i12 + i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-1)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-3)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-4)
	#call replace(p4.p7,-i11-i4/2+i8/2-i9/2,i,i11,i4,i8,i9,Md337,dotrewrite-d337-5)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p3.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	if (count(Md337,1)) id Q.p7 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md337,dotrewrite-d337-1)
	#call replace(p1.p5,-i10-i11+i13,i,i10,i11,i13,Md337,dotrewrite-d337-2)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-3)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md337,dotrewrite-d337-4)
	#call replace(p1.p3,i12-i2/2-i3/2+i4/2,i,i12,i2,i3,i4,Md337,dotrewrite-d337-5)
	#call replace(p1.p7,i11+i12+i14-i3/2+i4/2+i6/2-i7/2-i8/2+i9/2,i,i11,i12,i14,i3,i4,i6,i7,i8,i9,Md337,dotrewrite-d337-6)
#endif
#break
#default
#case Q6
* path: (0, 3, 6)
#case 36
* path: (3, 6)
#case 35
* path: (3, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md337,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md337-5;
	if (count(Md337,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p7.p;
	.sort:momrewrite-Md337-4;
	if (count(Md337,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md337-3;
	if (count(Md337,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p6.p;
	.sort:momrewrite-Md337-2;
	if (count(Md337,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md337-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd337()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md337,dotrewrite-d337-0)
	#call replace(p3.p6,-i3/2-i6/2+i7/2,i,i3,i6,i7,Md337,dotrewrite-d337-1)
	#call replace(Q.p4,`Q2'/2-i1/2-i12+i2/2,i,i1,i12,i2,Md337,dotrewrite-d337-2)
	#call replace(p5.p6,-i10-i5/2-i7/2+i9/2,i,i10,i5,i7,i9,Md337,dotrewrite-d337-3)
	#call replace(p4.p6,-i11-i2/2+i3/2+i8/2-i9/2,i,i11,i2,i3,i8,i9,Md337,dotrewrite-d337-4)
#endif
#break
#endswitch
#break
*--#] d337 : 
*--#[ d320 :
#case Md320
#procedure SimpleDotd320()
if (count(Md320,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p8^n? = i10^n;
	id p1.p8^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p6.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p5.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md320,dotrewrite-d320-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md320,dotrewrite-d320-1)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md320,dotrewrite-d320-2)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md320,dotrewrite-d320-3)
	#call replace(p4.p8,i10-i11+i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md320,dotrewrite-d320-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 24
* path: (2, 6, 4)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p5.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	if (count(Md320,1)) id p2.p6 = i12 - i13;
	if (count(Md320,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md320,dotrewrite-d320-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md320,dotrewrite-d320-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md320,dotrewrite-d320-4)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md320,dotrewrite-d320-5)
	#call replace(p4.p8,i10-i11+i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md320,dotrewrite-d320-6)
#endif
#break
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p5.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p7.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	if (count(Md320,1)) id p2.p6 = i12 - i13;
	if (count(Md320,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md320,dotrewrite-d320-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md320,dotrewrite-d320-3)
	#call replace(Q.p7,-`Q2'/2-i12+i3/2-i4/2,i,i12,i3,i4,Md320,dotrewrite-d320-4)
	#call replace(p2.p7,-i12+i13-i2/2-i4/2+i5/2,i,i12,i13,i2,i4,i5,Md320,dotrewrite-d320-5)
	#call replace(p7.p8,-i10+i11-i14-i5/2-i8/2+i9/2,i,i10,i11,i14,i5,i8,i9,Md320,dotrewrite-d320-6)
#endif
#break
#case Q5
* path: (0, 3, 5)
#case Q8
* path: (0, 3, 5, 8)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + p3.p + p5.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - p8.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md320,dotrewrite-d320-0)
	#call replace(p3.p5,i1/2-i3/2-i5/2,i,i1,i3,i5,Md320,dotrewrite-d320-1)
	#call replace(p5.p8,i5/2+i8/2-i9/2,i,i5,i8,i9,Md320,dotrewrite-d320-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md320,dotrewrite-d320-3)
	#call replace(p3.p6,i12+i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md320,dotrewrite-d320-4)
	#call replace(p3.p8,i11-i5/2-i8/2+i9/2,i,i11,i5,i8,i9,Md320,dotrewrite-d320-5)
	#call replace(p5.p6,-i12+i13-i4/2-i6/2+i7/2,i,i12,i13,i4,i6,i7,Md320,dotrewrite-d320-6)
#endif
#break
#case 89
* path: (8, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p + p9.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	if (count(Md320,1)) id p2.p6 = i12 - i13;
	if (count(Md320,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md320,dotrewrite-d320-2)
	#call replace(p8.p9,i5/2-i8/2-i9/2,i,i5,i8,i9,Md320,dotrewrite-d320-3)
	#call replace(Q.p9,i1/2-i10-i2/2-i3/2+i4/2,i,i1,i10,i2,i3,i4,Md320,dotrewrite-d320-4)
	#call replace(p2.p9,-i10+i11-i2/2+i4/2-i5/2,i,i10,i11,i2,i4,i5,Md320,dotrewrite-d320-5)
	#call replace(p6.p9,-i12+i13-i14-i4/2-i6/2+i7/2,i,i12,i13,i14,i4,i6,i7,Md320,dotrewrite-d320-6)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 56
* path: (5, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - p8.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md320,dotrewrite-d320-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md320,dotrewrite-d320-1)
	#call replace(p5.p8,i5/2+i8/2-i9/2,i,i5,i8,i9,Md320,dotrewrite-d320-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md320,dotrewrite-d320-3)
	#call replace(p5.p6,-i12+i13-i4/2-i6/2+i7/2,i,i12,i13,i4,i6,i7,Md320,dotrewrite-d320-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md320,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md320-5;
	if (count(Md320,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p5.p;
	.sort:momrewrite-Md320-4;
	if (count(Md320,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md320-3;
	if (count(Md320,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md320-2;
	if (count(Md320,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md320-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd320()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md320,dotrewrite-d320-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md320,dotrewrite-d320-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md320,dotrewrite-d320-2)
	#call replace(p3.p6,i12+i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md320,dotrewrite-d320-3)
	#call replace(p3.p8,i11-i5/2-i8/2+i9/2,i,i11,i5,i8,i9,Md320,dotrewrite-d320-4)
#endif
#break
#endswitch
#break
*--#] d320 : 
*--#[ d323 :
#case Md323
#procedure SimpleDotd323()
if (count(Md323,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p8^n? = i10^n;
	id p1.p8^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p5.p + p9.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p7.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p2.p6 = i12 - i13;
	if (count(Md323,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md323,dotrewrite-d323-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md323,dotrewrite-d323-3)
	#call replace(p6.p7,-i6/2-i7/2+i9/2,i,i6,i7,i9,Md323,dotrewrite-d323-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md323,dotrewrite-d323-5)
	#call replace(p5.p7,-i13+i14+i5/2-i8/2+i9/2,i,i13,i14,i5,i8,i9,Md323,dotrewrite-d323-6)
	#call replace(Q.p7,i1/2-i10-i12-i2/2-i3/2+i4/2,i,i1,i10,i12,i2,i3,i4,Md323,dotrewrite-d323-7)
	#call replace(p2.p7,-i10+i11-i12+i13-i2/2+i4/2-i5/2,i,i10,i11,i12,i13,i2,i4,i5,Md323,dotrewrite-d323-8)
#endif
#break
#case Q9
* path: (0, 1, 5, 9)
#case 19
* path: (1, 5, 9)
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p5.p + p9.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md323,dotrewrite-d323-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md323,dotrewrite-d323-2)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md323,dotrewrite-d323-3)
	#call replace(p6.p9,-i6/2+i7/2-i9/2,i,i6,i7,i9,Md323,dotrewrite-d323-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md323,dotrewrite-d323-5)
	#call replace(p1.p9,-i1/2+i11+i3/2-i5/2,i,i1,i11,i3,i5,Md323,dotrewrite-d323-6)
	#call replace(Q.p9,-i1/2+i10+i2/2+i3/2-i4/2,i,i1,i10,i2,i3,i4,Md323,dotrewrite-d323-7)
#endif
#break
#case 29
* path: (2, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1} = + p5.p + p9.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p2.p6 = i12 - i13;
	if (count(Md323,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md323,dotrewrite-d323-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md323,dotrewrite-d323-3)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md323,dotrewrite-d323-4)
	#call replace(p6.p9,-i6/2+i7/2-i9/2,i,i6,i7,i9,Md323,dotrewrite-d323-5)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md323,dotrewrite-d323-6)
	#call replace(Q.p9,-i1/2+i10+i2/2+i3/2-i4/2,i,i1,i10,i2,i3,i4,Md323,dotrewrite-d323-7)
	#call replace(p2.p9,i10-i11+i2/2-i4/2+i5/2,i,i10,i11,i2,i4,i5,Md323,dotrewrite-d323-8)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p4.p6 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md323,dotrewrite-d323-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md323,dotrewrite-d323-2)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md323,dotrewrite-d323-3)
	#call replace(p4.p8,i10-i11+i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md323,dotrewrite-d323-4)
	#call replace(p6.p8,i13-i14-i6/2+i7/2-i9/2,i,i13,i14,i6,i7,i9,Md323,dotrewrite-d323-5)
#endif
#break
#case Q4
* path: (0, 2, 4)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p2.p6 = i12 - i13;
	if (count(Md323,1)) id p4.p6 = i12 - i14;
	if (count(Md323,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md323,dotrewrite-d323-3)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md323,dotrewrite-d323-4)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md323,dotrewrite-d323-5)
	#call replace(p4.p8,i10-i11+i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md323,dotrewrite-d323-6)
	#call replace(p6.p8,i13-i14-i6/2+i7/2-i9/2,i,i13,i14,i6,i7,i9,Md323,dotrewrite-d323-7)
#endif
#break
#case 69
* path: (6, 9)
#case 89
* path: (8, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p9.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md323,dotrewrite-d323-0)
	#call replace(p6.p9,-i6/2+i7/2-i9/2,i,i6,i7,i9,Md323,dotrewrite-d323-1)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md323,dotrewrite-d323-2)
	#call replace(p1.p9,-i1/2+i11+i3/2-i5/2,i,i1,i11,i3,i5,Md323,dotrewrite-d323-3)
	#call replace(p6.p8,i13-i14-i6/2+i7/2-i9/2,i,i13,i14,i6,i7,i9,Md323,dotrewrite-d323-4)
	#call replace(Q.p9,-i1/2+i10+i2/2+i3/2-i4/2,i,i1,i10,i2,i3,i4,Md323,dotrewrite-d323-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 56
* path: (5, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p5.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p5.p6 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md323,dotrewrite-d323-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md323,dotrewrite-d323-2)
	#call replace(p5.p8,i5/2+i8/2-i9/2,i,i5,i8,i9,Md323,dotrewrite-d323-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md323,dotrewrite-d323-4)
	#call replace(p6.p8,i13-i14-i6/2+i7/2-i9/2,i,i13,i14,i6,i7,i9,Md323,dotrewrite-d323-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p5.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	if (count(Md323,1)) id p2.p6 = i12 - i13;
	if (count(Md323,1)) id p5.p6 = i13 - i14;
	if (count(Md323,1)) id p2.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md323,dotrewrite-d323-3)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md323,dotrewrite-d323-4)
	#call replace(p5.p8,i5/2+i8/2-i9/2,i,i5,i8,i9,Md323,dotrewrite-d323-5)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md323,dotrewrite-d323-6)
	#call replace(p6.p8,i13-i14-i6/2+i7/2-i9/2,i,i13,i14,i6,i7,i9,Md323,dotrewrite-d323-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md323,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p9.p;
	.sort:momrewrite-Md323-5;
	if (count(Md323,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md323-4;
	if (count(Md323,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md323-3;
	if (count(Md323,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md323-2;
	if (count(Md323,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md323-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd323()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md323,dotrewrite-d323-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md323,dotrewrite-d323-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md323,dotrewrite-d323-2)
	#call replace(p3.p8,i11-i5/2-i8/2+i9/2,i,i11,i5,i8,i9,Md323,dotrewrite-d323-3)
	#call replace(p6.p8,i13-i14-i6/2+i7/2-i9/2,i,i13,i14,i6,i7,i9,Md323,dotrewrite-d323-4)
#endif
#break
#endswitch
#break
*--#] d323 : 
*--#[ d347 :
#case Md347
#procedure SimpleDotd347()
if (count(Md347,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p8^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p3.p6^n? = i13^n;
	id p6.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 67
* path: (6, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p6} = - p2.p - p6.p - p7.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p2.p6 = i11 - i12;
	if (count(Md347,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md347,dotrewrite-d347-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md347,dotrewrite-d347-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md347,dotrewrite-d347-4)
	#call replace(p6.p7,-i11+i12-i14-i6,i,i11,i12,i14,i6,Md347,dotrewrite-d347-5)
	#call replace(Q.p7,-`Q2'/2+i1/2-i10-i11-i2/2,i,i1,i10,i11,i2,Md347,dotrewrite-d347-6)
	#call replace(p2.p7,i14-i2/2+i6/2-i7/2+i8/2,i,i14,i2,i6,i7,i8,Md347,dotrewrite-d347-7)
	#call replace(p5.p7,-i12+i13+i2/2-i4/2-i8/2+i9/2,i,i12,i13,i2,i4,i8,i9,Md347,dotrewrite-d347-8)
#endif
#break
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = - p2.p + Q.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p9.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p - p7.p - p8.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	#call replace(p6.p9,-i12+i13+i14,i,i12,i13,i14,Md347,dotrewrite-d347-0)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md347,dotrewrite-d347-1)
	#call replace(p6.p7,-i11+i12-i14-i6,i,i11,i12,i14,i6,Md347,dotrewrite-d347-2)
	#call replace(Q.p7,-`Q2'/2+i1/2-i10-i11-i2/2,i,i1,i10,i11,i2,Md347,dotrewrite-d347-3)
	#call replace(Q.p9,-i1/2+i10+i2/2+i3/2-i4/2,i,i1,i10,i2,i3,i4,Md347,dotrewrite-d347-4)
	#call replace(p7.p8,i11-i12+i2/2+i6/2-i7/2-i8/2,i,i11,i12,i2,i6,i7,i8,Md347,dotrewrite-d347-5)
	#call replace(p7.p9,i11-i13+i4/2+i6/2-i7/2-i9/2,i,i11,i13,i4,i6,i7,i9,Md347,dotrewrite-d347-6)
#endif
#break
#case Q9
* path: (0, 1, 5, 9)
#case 19
* path: (1, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p - p2.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p6} = + p5.p + p9.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md347,dotrewrite-d347-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md347,dotrewrite-d347-2)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md347,dotrewrite-d347-3)
	#call replace(p6.p9,-i12+i13+i14,i,i12,i13,i14,Md347,dotrewrite-d347-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md347,dotrewrite-d347-5)
	#call replace(Q.p9,-i1/2+i10+i2/2+i3/2-i4/2,i,i1,i10,i2,i3,i4,Md347,dotrewrite-d347-6)
	#call replace(p1.p9,-i1/2+i10+i11-i12+i14+i2/2+i3/2-i5/2+i6/2-i7/2+i8/2,i,i1,i10,i11,i12,i14,i2,i3,i5,i6,i7,i8,Md347,dotrewrite-d347-7)
#endif
#break
#case 29
* path: (2, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p - p2.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p6} = + p5.p + p9.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p2.p6 = i11 - i12;
	if (count(Md347,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md347,dotrewrite-d347-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md347,dotrewrite-d347-3)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md347,dotrewrite-d347-4)
	#call replace(p6.p9,-i12+i13+i14,i,i12,i13,i14,Md347,dotrewrite-d347-5)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md347,dotrewrite-d347-6)
	#call replace(Q.p9,-i1/2+i10+i2/2+i3/2-i4/2,i,i1,i10,i2,i3,i4,Md347,dotrewrite-d347-7)
	#call replace(p2.p9,-i11+i12-i14-i4/2+i5/2-i6/2+i7/2-i8/2,i,i11,i12,i14,i4,i5,i6,i7,i8,Md347,dotrewrite-d347-8)
#endif
#break
#case Q4
* path: (0, 1, 3, 4)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p - p2.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p4.p6 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md347,dotrewrite-d347-1)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md347,dotrewrite-d347-2)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md347,dotrewrite-d347-3)
	#call replace(p1.p8,i10+i11-i12+i14+i2/2+i6/2-i7/2+i8/2,i,i10,i11,i12,i14,i2,i6,i7,i8,Md347,dotrewrite-d347-4)
	#call replace(p4.p8,-i11+i12-i14-i2/2+i5/2-i6/2+i7/2-i9/2,i,i11,i12,i14,i2,i5,i6,i7,i9,Md347,dotrewrite-d347-5)
#endif
#break
#case 24
* path: (2, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p4.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p - p8.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p2.p6 = i11 - i12;
	if (count(Md347,1)) id p4.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md347,dotrewrite-d347-2)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md347,dotrewrite-d347-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md347,dotrewrite-d347-4)
	#call replace(p2.p8,-i11+i12-i14-i2/2-i6/2+i7/2-i8/2,i,i11,i12,i14,i2,i6,i7,i8,Md347,dotrewrite-d347-5)
	#call replace(p4.p8,-i11+i12-i14-i2/2+i5/2-i6/2+i7/2-i9/2,i,i11,i12,i14,i2,i5,i6,i7,i9,Md347,dotrewrite-d347-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p - p2.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p5.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md347,dotrewrite-d347-1)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md347,dotrewrite-d347-2)
	#call replace(p5.p8,i5/2+i8/2-i9/2,i,i5,i8,i9,Md347,dotrewrite-d347-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md347,dotrewrite-d347-4)
	#call replace(p1.p8,i10+i11-i12+i14+i2/2+i6/2-i7/2+i8/2,i,i10,i11,i12,i14,i2,i6,i7,i8,Md347,dotrewrite-d347-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 26
* path: (2, 6)
#case 28
* path: (2, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 56
* path: (5, 8, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p5.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p5.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p - p8.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	if (count(Md347,1)) id p2.p6 = i11 - i12;
	if (count(Md347,1)) id p5.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md347,dotrewrite-d347-2)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md347,dotrewrite-d347-3)
	#call replace(p5.p8,i5/2+i8/2-i9/2,i,i5,i8,i9,Md347,dotrewrite-d347-4)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md347,dotrewrite-d347-5)
	#call replace(p2.p8,-i11+i12-i14-i2/2-i6/2+i7/2-i8/2,i,i11,i12,i14,i2,i6,i7,i8,Md347,dotrewrite-d347-6)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md347,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p8.p;
	.sort:momrewrite-Md347-5;
	if (count(Md347,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p6.p - p2.p;
	.sort:momrewrite-Md347-4;
	if (count(Md347,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md347-3;
	if (count(Md347,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md347-2;
	if (count(Md347,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md347-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd347()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md347,dotrewrite-d347-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md347,dotrewrite-d347-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md347,dotrewrite-d347-2)
	#call replace(p1.p8,i10+i11-i12+i14+i2/2+i6/2-i7/2+i8/2,i,i10,i11,i12,i14,i2,i6,i7,i8,Md347,dotrewrite-d347-3)
	#call replace(p3.p8,i10+i11-i12+i14+i2/2-i5/2+i6/2-i7/2+i9/2,i,i10,i11,i12,i14,i2,i5,i6,i7,i9,Md347,dotrewrite-d347-4)
#endif
#break
#endswitch
#break
*--#] d347 : 
*--#[ d198 :
#case Md198
#procedure SimpleDotd198()
if (count(Md198,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p7^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p8.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p - p7.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p5.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md198,dotrewrite-d198-0)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-1)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md198,dotrewrite-d198-2)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md198,dotrewrite-d198-3)
	#call replace(p5.p6,i2/2-i4/2-i7/2+i8/2,i,i2,i4,i7,i8,Md198,dotrewrite-d198-4)
#endif
#break
#case 28
* path: (2, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p8.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p8.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p - p6.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-1)
	#call replace(p6.p8,i4/2-i6/2-i8/2,i,i4,i6,i8,Md198,dotrewrite-d198-2)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md198,dotrewrite-d198-3)
	#call replace(p2.p8,-i4/2+i5/2+i6/2-i7/2,i,i4,i5,i6,i7,Md198,dotrewrite-d198-4)
	#call replace(Q.p8,-i1/2+i2/2+i3/2-i4/2+i9,i,i1,i2,i3,i4,i9,Md198,dotrewrite-d198-5)
#endif
#break
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p5.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p8.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p - p7.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p6.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md198,dotrewrite-d198-0)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md198,dotrewrite-d198-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-2)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md198,dotrewrite-d198-3)
	#call replace(p4.p7,-i2/2+i5/2+i6/2-i8/2,i,i2,i5,i6,i8,Md198,dotrewrite-d198-4)
#endif
#break
#case Q8
* path: (0, 1, 5, 8)
#case 18
* path: (1, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p8.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p8.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md198,dotrewrite-d198-1)
	#call replace(p5.p8,-i5/2+i7/2-i8/2,i,i5,i7,i8,Md198,dotrewrite-d198-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md198,dotrewrite-d198-3)
	#call replace(Q.p8,-i1/2+i2/2+i3/2-i4/2+i9,i,i1,i2,i3,i4,i9,Md198,dotrewrite-d198-4)
	#call replace(p1.p8,-i1/2+i2/2+i3/2-i5/2-i6/2+i7/2+i9,i,i1,i2,i3,i5,i6,i7,i9,Md198,dotrewrite-d198-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p8.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + Q.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p5.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p5.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(p1.p5,i1/2-i3/2+i5/2,i,i1,i3,i5,Md198,dotrewrite-d198-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md198,dotrewrite-d198-2)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md198,dotrewrite-d198-3)
	#call replace(p1.p7,i2/2-i6/2+i7/2+i9,i,i2,i6,i7,i9,Md198,dotrewrite-d198-4)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p8.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p8.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-1)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md198,dotrewrite-d198-2)
	#call replace(p2.p8,-i4/2+i5/2+i6/2-i7/2,i,i4,i5,i6,i7,Md198,dotrewrite-d198-3)
	#call replace(Q.p8,-i1/2+i2/2+i3/2-i4/2+i9,i,i1,i2,i3,i4,i9,Md198,dotrewrite-d198-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 24
* path: (2, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p2.p - p6.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p6.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md198,dotrewrite-d198-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md198,dotrewrite-d198-2)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-3)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md198,dotrewrite-d198-4)
	#call replace(Q.p6,-`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md198,dotrewrite-d198-5)
#endif
#break
#case Q4
* path: (0, 1, 3, 4)
#case 14
* path: (1, 3, 4)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p8.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p7.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md198,dotrewrite-d198-1)
	#call replace(p1.p4,`Q2'/2-i2/2-i3/2+i5/2,i,i2,i3,i5,Md198,dotrewrite-d198-2)
	#call replace(p1.p7,i2/2-i6/2+i7/2+i9,i,i2,i6,i7,i9,Md198,dotrewrite-d198-3)
	#call replace(p4.p7,-i2/2+i5/2+i6/2-i8/2,i,i2,i5,i6,i8,Md198,dotrewrite-d198-4)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p8.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p7.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md198,dotrewrite-d198-1)
	#call replace(p1.p3,i1/2+i3/2-i5/2,i,i1,i3,i5,Md198,dotrewrite-d198-2)
	#call replace(p1.p7,i2/2-i6/2+i7/2+i9,i,i2,i6,i7,i9,Md198,dotrewrite-d198-3)
	#call replace(p3.p7,i2/2-i5/2-i6/2+i8/2+i9,i,i2,i5,i6,i8,i9,Md198,dotrewrite-d198-4)
#endif
#break
#case 25
* path: (2, 1, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p5.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(p2.p5,-i2/2+i4/2-i5/2,i,i2,i4,i5,Md198,dotrewrite-d198-1)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-2)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md198,dotrewrite-d198-3)
	#call replace(Q.p5,i1/2-i2/2-i3/2+i4/2,i,i1,i2,i3,i4,Md198,dotrewrite-d198-4)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md198,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p4.p;
	.sort:momrewrite-Md198-5;
	if (count(Md198,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md198-4;
	if (count(Md198,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p4.p;
	.sort:momrewrite-Md198-3;
	if (count(Md198,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p2.p;
	.sort:momrewrite-Md198-2;
	if (count(Md198,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md198-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd198()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md198,dotrewrite-d198-0)
	#call replace(Q.p4,`Q2'/2-i3/2+i4/2,i,i3,i4,Md198,dotrewrite-d198-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md198,dotrewrite-d198-2)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md198,dotrewrite-d198-3)
	#call replace(p4.p7,-i2/2+i5/2+i6/2-i8/2,i,i2,i5,i6,i8,Md198,dotrewrite-d198-4)
#endif
#break
#endswitch
#break
*--#] d198 : 
*--#[ d283 :
#case Md283
#procedure SimpleDotd283()
if (count(Md283,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md283,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p3.p + p4.p;
	.sort:momrewrite-Md283-4;
	if (count(Md283,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p5.p;
	.sort:momrewrite-Md283-3;
	if (count(Md283,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md283-2;
	if (count(Md283,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p3.p - p4.p;
	.sort:momrewrite-Md283-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd283()
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md283,dotrewrite-d283-0)
	#call replace(p3.p5,-i3/2-i5/2+i6/2,i,i3,i5,i6,Md283,dotrewrite-d283-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md283,dotrewrite-d283-2)
	#call replace(Q.p4,`Q2'/2-i1/2+i2/2-i9,i,i1,i2,i9,Md283,dotrewrite-d283-3)
	#call replace(p4.p5,i12-i13+i3/2+i5/2-i6/2,i,i12,i13,i3,i5,i6,Md283,dotrewrite-d283-4)
	#call replace(p3.p7,i10-i11+i4/2+i7/2-i8/2,i,i10,i11,i4,i7,i8,Md283,dotrewrite-d283-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md283,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p4.p;
	.sort:momrewrite-Md283-4;
	if (count(Md283,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md283-3;
	if (count(Md283,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md283-2;
	if (count(Md283,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p5.p;
	.sort:momrewrite-Md283-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd283()
	if (count(Md283,1)) id p2.p5 = i12 - i13;
	if (count(Md283,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md283,dotrewrite-d283-2)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md283,dotrewrite-d283-3)
	#call replace(p3.p5,-i3/2-i5/2+i6/2,i,i3,i5,i6,Md283,dotrewrite-d283-4)
	#call replace(p3.p7,i10-i11+i4/2+i7/2-i8/2,i,i10,i11,i4,i7,i8,Md283,dotrewrite-d283-5)
#endif
#break
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md283,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p4.p;
	.sort:momrewrite-Md283-4;
	if (count(Md283,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md283-3;
	if (count(Md283,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = - p5.p - p6.p;
	.sort:momrewrite-Md283-2;
	if (count(Md283,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p + p5.p + p6.p;
	.sort:momrewrite-Md283-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd283()
	if (count(Md283,1)) id p2.p5 = i12 - i13;
	if (count(Md283,1)) id Q.p6 = -i12 - i9;
	if (count(Md283,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md283,dotrewrite-d283-3)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md283,dotrewrite-d283-4)
	#call replace(p2.p6,-i12+i13-i2/2-i3/2+i4/2,i,i12,i13,i2,i3,i4,Md283,dotrewrite-d283-5)
	#call replace(p6.p7,-i10+i11-i14-i4/2-i7/2+i8/2,i,i10,i11,i14,i4,i7,i8,Md283,dotrewrite-d283-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 3)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md283,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p4.p;
	.sort:momrewrite-Md283-4;
	if (count(Md283,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md283-3;
	if (count(Md283,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p5.p;
	.sort:momrewrite-Md283-2;
	if (count(Md283,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md283-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd283()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md283,dotrewrite-d283-0)
	#call replace(p3.p5,-i3/2-i5/2+i6/2,i,i3,i5,i6,Md283,dotrewrite-d283-1)
	#call replace(p1.p3,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md283,dotrewrite-d283-2)
	#call replace(p3.p7,i10-i11+i4/2+i7/2-i8/2,i,i10,i11,i4,i7,i8,Md283,dotrewrite-d283-3)
#endif
#break
#endswitch
#break
*--#] d283 : 
*--#[ d383 :
#case Md383
#procedure SimpleDotd383()
if (count(Md383,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p2.p4^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 69
* path: (6, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md383,1)) id p1.p?!{p1,[P+p1],[P-p1]} = - p3.p - p2.p + Q.p;
	.sort:momrewrite-Md383-5;
	if (count(Md383,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p7.p - p6.p;
	.sort:momrewrite-Md383-4;
	if (count(Md383,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p9.p - p8.p;
	.sort:momrewrite-Md383-3;
	if (count(Md383,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2} = - p6.p - p8.p;
	.sort:momrewrite-Md383-2;
	if (count(Md383,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p9.p;
	.sort:momrewrite-Md383-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd383()
	if (count(Md383,1)) id Q.p7 = i11 + i14;
	if (count(Md383,1)) id Q.p8 = -i13 - i14;
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md383,dotrewrite-d383-2)
	#call replace(p6.p8,i4/2-i6/2-i8/2,i,i4,i6,i8,Md383,dotrewrite-d383-3)
	#call replace(Q.p9,i12-i13-i14,i,i12,i13,i14,Md383,dotrewrite-d383-4)
	#call replace(p7.p9,i5/2-i7/2-i9/2,i,i5,i7,i9,Md383,dotrewrite-d383-5)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md383,dotrewrite-d383-6)
	#call replace(p7.p8,-i10+i2/2+i4/2-i7/2-i8/2,i,i10,i2,i4,i7,i8,Md383,dotrewrite-d383-7)
	#call replace(p6.p9,`Q2'/2-i1/2+i10-i11-i12+i3/2+i5/2-i6/2-i9/2,i,i1,i10,i11,i12,i3,i5,i6,i9,Md383,dotrewrite-d383-8)
#endif
#break
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md383,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p9.p;
	.sort:momrewrite-Md383-5;
	if (count(Md383,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md383-4;
	if (count(Md383,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p;
	.sort:momrewrite-Md383-3;
	if (count(Md383,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p6.p;
	.sort:momrewrite-Md383-2;
	if (count(Md383,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md383-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd383()
	#call replace(Q.p1,`Q2'-i11-i12,i,i11,i12,Md383,dotrewrite-d383-0)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md383,dotrewrite-d383-1)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md383,dotrewrite-d383-2)
	#call replace(p1.p2,`Q2'/2-i1/2-i12-i2/2+i3/2,i,i1,i12,i2,i3,Md383,dotrewrite-d383-3)
	#call replace(p1.p4,`Q2'/2-i1/2-i11-i12+i13-i4/2+i5/2,i,i1,i11,i12,i13,i4,i5,Md383,dotrewrite-d383-4)
	#call replace(p1.p6,-`Q2'/2+i1/2-i10+i11+i12+i14+i2/2-i3/2+i4/2-i5/2+i6/2-i7/2-i8/2+i9/2,i,i1,i10,i11,i12,i14,i2,i3,i4,i5,i6,i7,i8,i9,Md383,dotrewrite-d383-5)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 28
* path: (2, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md383,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p9.p;
	.sort:momrewrite-Md383-5;
	if (count(Md383,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p2.p;
	.sort:momrewrite-Md383-4;
	if (count(Md383,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p4.p - p8.p;
	.sort:momrewrite-Md383-3;
	if (count(Md383,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md383-2;
	if (count(Md383,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md383-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd383()
	if (count(Md383,1)) id Q.p8 = -i13 - i14;
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md383,dotrewrite-d383-1)
	#call replace(p4.p8,-i4/2+i6/2-i8/2,i,i4,i6,i8,Md383,dotrewrite-d383-2)
	#call replace(p2.p8,-i10+i2/2+i6/2-i7/2,i,i10,i2,i6,i7,Md383,dotrewrite-d383-3)
	#call replace(p2.p3,-`Q2'/2+i1/2+i11+i12-i2/2-i3/2,i,i1,i11,i12,i2,i3,Md383,dotrewrite-d383-4)
	#call replace(p3.p4,-`Q2'/2+i1/2-i10+i11+i12+i4/2-i5/2,i,i1,i10,i11,i12,i4,i5,Md383,dotrewrite-d383-5)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md383,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p9.p;
	.sort:momrewrite-Md383-5;
	if (count(Md383,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p2} = - p6.p - p8.p;
	.sort:momrewrite-Md383-4;
	if (count(Md383,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p;
	.sort:momrewrite-Md383-3;
	if (count(Md383,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p8.p;
	.sort:momrewrite-Md383-2;
	if (count(Md383,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md383-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd383()
	if (count(Md383,1)) id Q.p8 = -i13 - i14;
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md383,dotrewrite-d383-1)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md383,dotrewrite-d383-2)
	#call replace(p6.p8,i4/2-i6/2-i8/2,i,i4,i6,i8,Md383,dotrewrite-d383-3)
	#call replace(p2.p8,-i10+i2/2+i6/2-i7/2,i,i10,i2,i6,i7,Md383,dotrewrite-d383-4)
	#call replace(p2.p3,-`Q2'/2+i1/2+i11+i12-i2/2-i3/2,i,i1,i11,i12,i2,i3,Md383,dotrewrite-d383-5)
	#call replace(p3.p6,`Q2'/2-i1/2+i10-i11-i12+i3/2-i4/2+i5/2+i8/2-i9/2,i,i1,i10,i11,i12,i3,i4,i5,i8,i9,Md383,dotrewrite-d383-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md383,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p9.p;
	.sort:momrewrite-Md383-5;
	if (count(Md383,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md383-4;
	if (count(Md383,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p4.p;
	.sort:momrewrite-Md383-3;
	if (count(Md383,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p2.p;
	.sort:momrewrite-Md383-2;
	if (count(Md383,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md383-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd383()
	if (count(Md383,1)) id Q.p7 = i11 + i14;
	#call replace(Q.p1,`Q2'-i11-i12,i,i11,i12,Md383,dotrewrite-d383-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md383,dotrewrite-d383-2)
	#call replace(p4.p7,i10-i4/2-i6/2+i8/2,i,i10,i4,i6,i8,Md383,dotrewrite-d383-3)
	#call replace(p1.p2,`Q2'/2-i1/2-i12-i2/2+i3/2,i,i1,i12,i2,i3,Md383,dotrewrite-d383-4)
	#call replace(p1.p4,`Q2'/2-i1/2-i11-i12+i13-i4/2+i5/2,i,i1,i11,i12,i13,i4,i5,Md383,dotrewrite-d383-5)
	#call replace(p1.p7,-i10+i11+i14+i4/2-i5/2+i6/2-i7/2-i8/2+i9/2,i,i10,i11,i14,i4,i5,i6,i7,i8,i9,Md383,dotrewrite-d383-6)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md383,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p + p9.p;
	.sort:momrewrite-Md383-5;
	if (count(Md383,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p3.p;
	.sort:momrewrite-Md383-4;
	if (count(Md383,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p;
	.sort:momrewrite-Md383-3;
	if (count(Md383,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p6.p;
	.sort:momrewrite-Md383-2;
	if (count(Md383,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md383-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd383()
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md383,dotrewrite-d383-0)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md383,dotrewrite-d383-1)
	#call replace(p2.p3,-`Q2'/2+i1/2+i11+i12-i2/2-i3/2,i,i1,i11,i12,i2,i3,Md383,dotrewrite-d383-2)
	#call replace(p3.p4,-`Q2'/2+i1/2-i10+i11+i12+i4/2-i5/2,i,i1,i10,i11,i12,i4,i5,Md383,dotrewrite-d383-3)
	#call replace(p3.p6,`Q2'/2-i1/2+i10-i11-i12+i3/2-i4/2+i5/2+i8/2-i9/2,i,i1,i10,i11,i12,i3,i4,i5,i8,i9,Md383,dotrewrite-d383-4)
#endif
#break
#endswitch
#break
*--#] d383 : 
*--#[ d384 :
#case Md384
#procedure SimpleDotd384()
if (count(Md384,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p1.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md384,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p + p7.p;
	.sort:momrewrite-Md384-5;
	if (count(Md384,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p + p8.p;
	.sort:momrewrite-Md384-4;
	if (count(Md384,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p2.p;
	.sort:momrewrite-Md384-3;
	if (count(Md384,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p6.p - p8.p;
	.sort:momrewrite-Md384-2;
	if (count(Md384,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md384-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd384()
	if (count(Md384,1)) id Q.p2 = i10 - i11;
	if (count(Md384,1)) id Q.p6 = i12 + i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md384,dotrewrite-d384-2)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md384,dotrewrite-d384-3)
	#call replace(p2.p8,i14-i3/2-i8/2+i9/2,i,i14,i3,i8,i9,Md384,dotrewrite-d384-4)
	#call replace(p1.p6,-`Q2'/2-i1/2+i10+i12+i14-i4/2+i5/2,i,i1,i10,i12,i14,i4,i5,Md384,dotrewrite-d384-5)
	#call replace(p2.p6,-`Q2'/2+i10-i11+i12+i13-i2/2-i6/2+i7/2,i,i10,i11,i12,i13,i2,i6,i7,Md384,dotrewrite-d384-6)
#endif
#break
#case 14
* path: (1, 4)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md384,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p + p7.p;
	.sort:momrewrite-Md384-5;
	if (count(Md384,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p2.p + Q.p;
	.sort:momrewrite-Md384-4;
	if (count(Md384,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p + p1.p;
	.sort:momrewrite-Md384-3;
	if (count(Md384,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p - p9.p;
	.sort:momrewrite-Md384-2;
	if (count(Md384,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p8.p;
	.sort:momrewrite-Md384-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd384()
	if (count(Md384,1)) id Q.p9 = -i11 + i13;
	#call replace(p4.p8,-i4/2+i6/2-i8/2,i,i4,i6,i8,Md384,dotrewrite-d384-1)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md384,dotrewrite-d384-2)
	#call replace(p1.p9,-i1/2+i14+i2/2-i3/2,i,i1,i14,i2,i3,Md384,dotrewrite-d384-3)
	#call replace(p1.p4,-`Q2'/2-i1/2+i10+i12-i4/2+i5/2,i,i1,i10,i12,i4,i5,Md384,dotrewrite-d384-4)
	#call replace(p4.p9,i1/2-i11+i13-i14-i2/2+i3/2-i5/2+i7/2-i9/2,i,i1,i11,i13,i14,i2,i3,i5,i7,i9,Md384,dotrewrite-d384-5)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 18
* path: (1, 3, 8)
#case 33
* path: (3,)
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md384,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p8.p + p6.p;
	.sort:momrewrite-Md384-5;
	if (count(Md384,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md384-4;
	if (count(Md384,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p9.p + p5.p;
	.sort:momrewrite-Md384-3;
	if (count(Md384,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md384-2;
	if (count(Md384,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p3.p;
	.sort:momrewrite-Md384-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd384()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md384,dotrewrite-d384-0)
	#call replace(Q.p5,`Q2'-i10-i12,i,i10,i12,Md384,dotrewrite-d384-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md384,dotrewrite-d384-2)
	#call replace(p1.p5,`Q2'/2-i1/2-i12+i4/2-i5/2,i,i1,i12,i4,i5,Md384,dotrewrite-d384-3)
	#call replace(p5.p8,i13-i14+i4/2-i6/2+i8/2,i,i13,i14,i4,i6,i8,Md384,dotrewrite-d384-4)
	#call replace(p3.p5,i13-i14+i4/2-i5/2-i6/2+i7/2+i8/2-i9/2,i,i13,i14,i4,i5,i6,i7,i8,i9,Md384,dotrewrite-d384-5)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#if ( `MOMS' > 0 )
	if (count(Md384,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = - p8.p + p6.p;
	.sort:momrewrite-Md384-5;
	if (count(Md384,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md384-4;
	if (count(Md384,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p3.p + p1.p;
	.sort:momrewrite-Md384-3;
	if (count(Md384,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p - p9.p;
	.sort:momrewrite-Md384-2;
	if (count(Md384,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p9.p;
	.sort:momrewrite-Md384-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd384()
	if (count(Md384,1)) id Q.p9 = -i11 + i13;
	#call replace(Q.p5,`Q2'-i10-i12,i,i10,i12,Md384,dotrewrite-d384-1)
	#call replace(p5.p9,i5/2-i7/2+i9/2,i,i5,i7,i9,Md384,dotrewrite-d384-2)
	#call replace(p8.p9,-i3/2+i8/2+i9/2,i,i3,i8,i9,Md384,dotrewrite-d384-3)
	#call replace(p1.p9,-i1/2+i14+i2/2-i3/2,i,i1,i14,i2,i3,Md384,dotrewrite-d384-4)
	#call replace(p1.p5,`Q2'/2-i1/2-i12+i4/2-i5/2,i,i1,i12,i4,i5,Md384,dotrewrite-d384-5)
	#call replace(p5.p8,i13-i14+i4/2-i6/2+i8/2,i,i13,i14,i4,i6,i8,Md384,dotrewrite-d384-6)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md384,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p + p7.p;
	.sort:momrewrite-Md384-5;
	if (count(Md384,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p2.p + Q.p;
	.sort:momrewrite-Md384-4;
	if (count(Md384,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md384-3;
	if (count(Md384,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p8.p;
	.sort:momrewrite-Md384-2;
	if (count(Md384,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p - p3.p;
	.sort:momrewrite-Md384-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd384()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md384,dotrewrite-d384-0)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md384,dotrewrite-d384-1)
	#call replace(p4.p8,-i4/2+i6/2-i8/2,i,i4,i6,i8,Md384,dotrewrite-d384-2)
	#call replace(p1.p4,-`Q2'/2-i1/2+i10+i12-i4/2+i5/2,i,i1,i10,i12,i4,i5,Md384,dotrewrite-d384-3)
	#call replace(p3.p4,-i1/2+i11-i13+i14+i2/2-i3/2-i4/2+i5/2+i6/2-i7/2-i8/2+i9/2,i,i1,i11,i13,i14,i2,i3,i4,i5,i6,i7,i8,i9,Md384,dotrewrite-d384-4)
#endif
#break
#endswitch
#break
*--#] d384 : 
*--#[ d398 :
#case Md398
#procedure SimpleDotd398()
if (count(Md398,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 7, 6)
#case Q8
* path: (0, 7, 6, 8)
#case 67
* path: (6, 7)
#case 610
* path: (6, 7, 10)
#case 78
* path: (7, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p8.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p6.p + p7.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	if (count(Md398,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md398,dotrewrite-d398-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-2)
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md398,dotrewrite-d398-3)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md398,dotrewrite-d398-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md398,dotrewrite-d398-5)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md398,dotrewrite-d398-6)
	#call replace(p7.p8,i11-i2/2-i4/2+i5/2+i6/2+i8/2-i9/2,i,i11,i2,i4,i5,i6,i8,i9,Md398,dotrewrite-d398-7)
#endif
#break
#case 45
* path: (4, 5)
#case 410
* path: (4, 5, 10)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md398,dotrewrite-d398-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md398,dotrewrite-d398-1)
	#call replace(p1.p10,i12-i13+i14,i,i12,i13,i14,Md398,dotrewrite-d398-2)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md398,dotrewrite-d398-3)
	#call replace(Q.p5,`Q2'/2-i11+i2/2-i8/2,i,i11,i2,i8,Md398,dotrewrite-d398-4)
	#call replace(p4.p10,i11-i4/2+i6/2-i7/2,i,i11,i4,i6,i7,Md398,dotrewrite-d398-5)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md398,dotrewrite-d398-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md398,dotrewrite-d398-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md398,dotrewrite-d398-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md398,dotrewrite-d398-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md398,dotrewrite-d398-4)
	#call replace(p2.p6,-`Q2'/2+i10/2+i11+i6/2-i7/2+i8/2-i9/2,i,i10,i11,i6,i7,i8,i9,Md398,dotrewrite-d398-5)
#endif
#break
#case 610
* path: (6, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p7.p + p6.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p6.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md398,dotrewrite-d398-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md398,dotrewrite-d398-1)
	#call replace(p1.p10,i12-i13+i14,i,i12,i13,i14,Md398,dotrewrite-d398-2)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md398,dotrewrite-d398-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md398,dotrewrite-d398-4)
	#call replace(p1.p9,i1/2+i14-i3/2+i8/2,i,i1,i14,i3,i8,Md398,dotrewrite-d398-5)
	#call replace(Q.p9,i10/2+i11-i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md398,dotrewrite-d398-6)
	#call replace(p6.p10,-`Q2'/2+i10/2+i11-i4/2+i6/2,i,i10,i11,i4,i6,Md398,dotrewrite-d398-7)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p3.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(p1.p3,-i1/2-i3/2+i8/2,i,i1,i3,i8,Md398,dotrewrite-d398-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-1)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i8/2,i,i12,i2,i8,Md398,dotrewrite-d398-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md398,dotrewrite-d398-3)
	#call replace(p3.p6,-i14-i6/2-i8/2+i9/2,i,i14,i6,i8,i9,Md398,dotrewrite-d398-4)
	#call replace(p3.p4,i11-i13-i2/2-i4/2+i5/2,i,i11,i13,i2,i4,i5,Md398,dotrewrite-d398-5)
#endif
#break
#case 49
* path: (4, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md398,dotrewrite-d398-0)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md398,dotrewrite-d398-1)
	#call replace(Q.p5,`Q2'/2-i11+i2/2-i8/2,i,i11,i2,i8,Md398,dotrewrite-d398-2)
	#call replace(p1.p9,i1/2+i14-i3/2+i8/2,i,i1,i14,i3,i8,Md398,dotrewrite-d398-3)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md398,dotrewrite-d398-4)
	#call replace(Q.p9,i10/2+i11-i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md398,dotrewrite-d398-5)
	#call replace(p4.p9,i11-i2/2+i5/2+i6/2-i7/2,i,i11,i2,i5,i6,i7,Md398,dotrewrite-d398-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p8.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	if (count(Md398,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md398,dotrewrite-d398-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-2)
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md398,dotrewrite-d398-3)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md398,dotrewrite-d398-4)
	#call replace(p4.p8,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md398,dotrewrite-d398-5)
	#call replace(p7.p8,i11-i2/2-i4/2+i5/2+i6/2+i8/2-i9/2,i,i11,i2,i4,i5,i6,i8,i9,Md398,dotrewrite-d398-6)
#endif
#break
#case Q7
* path: (0, 2, 4, 7)
#case Q2
* path: (0, 7, 4, 2)
#case Q1
* path: (0, 7, 4, 2, 1)
#case 17
* path: (1, 2, 4, 7)
#case 27
* path: (2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	if (count(Md398,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md398,dotrewrite-d398-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md398,dotrewrite-d398-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md398,dotrewrite-d398-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-4)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md398,dotrewrite-d398-5)
	#call replace(p2.p7,`Q2'/2-i10/2-i11+i2/2+i4/2-i5/2-i6/2+i7/2-i8/2+i9/2,i,i10,i11,i2,i4,i5,i6,i7,i8,i9,Md398,dotrewrite-d398-6)
#endif
#break
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p6.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-0)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md398,dotrewrite-d398-1)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md398,dotrewrite-d398-2)
	#call replace(p1.p9,i1/2+i14-i3/2+i8/2,i,i1,i14,i3,i8,Md398,dotrewrite-d398-3)
	#call replace(Q.p9,i10/2+i11-i2/2-i7/2+i8/2,i,i10,i11,i2,i7,i8,Md398,dotrewrite-d398-4)
	#call replace(p4.p9,i11-i2/2+i5/2+i6/2-i7/2,i,i11,i2,i5,i6,i7,Md398,dotrewrite-d398-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q8
* path: (0, 1, 8)
#case Q6
* path: (0, 1, 8, 6)
#case 11
* path: (1,)
#case 18
* path: (1, 8)
#case 16
* path: (1, 8, 6)
#case 28
* path: (2, 1, 8)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md398,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md398-6;
	if (count(Md398,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md398-5;
	if (count(Md398,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p8.p;
	.sort:momrewrite-Md398-4;
	if (count(Md398,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md398-3;
	if (count(Md398,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md398-2;
	if (count(Md398,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md398-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd398()
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md398,dotrewrite-d398-0)
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md398,dotrewrite-d398-1)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md398,dotrewrite-d398-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md398,dotrewrite-d398-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md398,dotrewrite-d398-4)
	#call replace(p4.p8,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md398,dotrewrite-d398-5)
#endif
#break
#endswitch
#break
*--#] d398 : 
*--#[ d399 :
#case Md399
#procedure SimpleDotd399()
if (count(Md399,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p8^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p1.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p + p2.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p4.p - p6.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-2)
	#call replace(Q.p3,-`Q2'/2+i1/2+i12-i2/2,i,i1,i12,i2,Md399,dotrewrite-d399-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-4)
	#call replace(p1.p3,-`Q2'/2+i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md399,dotrewrite-d399-5)
	#call replace(p3.p6,-i11+i13-i6/2-i8/2+i9/2,i,i11,i13,i6,i8,i9,Md399,dotrewrite-d399-6)
	#call replace(p3.p4,-`Q2'/2+i12+i13+i14-i4/2+i5/2-i8/2,i,i12,i13,i14,i4,i5,i8,Md399,dotrewrite-d399-7)
#endif
#break
#case Q7
* path: (0, 1, 4, 7)
#case Q4
* path: (0, 7, 4)
#case Q1
* path: (0, 7, 4, 1)
#case Q2
* path: (0, 7, 4, 1, 2)
#case 17
* path: (1, 4, 7)
#case 27
* path: (2, 1, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	if (count(Md399,1)) id Q.p9 = i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-4)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-5)
	#call replace(p1.p9,i12+i13-i2/2+i3/2-i8/2,i,i12,i13,i2,i3,i8,Md399,dotrewrite-d399-6)
	#call replace(p7.p9,-i10/2+i11+i12+i5/2-i9/2,i,i10,i11,i12,i5,i9,Md399,dotrewrite-d399-7)
	#call replace(p4.p9,-i10/2+i11+i12+i5/2+i6/2-i8/2,i,i10,i11,i12,i5,i6,i8,Md399,dotrewrite-d399-8)
#endif
#break
#case 410
* path: (4, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p10.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md399,dotrewrite-d399-2)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md399,dotrewrite-d399-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-4)
	#call replace(p1.p10,`Q2'/2+i1/2-i14-i2/2,i,i1,i14,i2,Md399,dotrewrite-d399-5)
	#call replace(Q.p5,`Q2'/2+i10/2-i11-i12-i7/2,i,i10,i11,i12,i7,Md399,dotrewrite-d399-6)
	#call replace(p4.p5,`Q2'/2-i12-i4/2-i5/2+i8/2,i,i12,i4,i5,i8,Md399,dotrewrite-d399-7)
	#call replace(p4.p10,`Q2'/2-i10/2+i11-i4/2+i6/2,i,i10,i11,i4,i6,Md399,dotrewrite-d399-8)
	#call replace(p1.p5,`Q2'/2+i1/2-i12-i13-i14-i3/2+i8/2,i,i1,i12,i13,i14,i3,i8,Md399,dotrewrite-d399-9)
#endif
#break
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p3.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p4.p - p6.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-0)
	#call replace(p3.p8,-i2/2+i3/2+i8/2,i,i2,i3,i8,Md399,dotrewrite-d399-1)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-2)
	#call replace(Q.p3,-`Q2'/2+i1/2+i12-i2/2,i,i1,i12,i2,Md399,dotrewrite-d399-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-4)
	#call replace(p3.p6,-i11+i13-i6/2-i8/2+i9/2,i,i11,i13,i6,i8,i9,Md399,dotrewrite-d399-5)
	#call replace(p3.p4,-`Q2'/2+i12+i13+i14-i4/2+i5/2-i8/2,i,i12,i13,i14,i4,i5,i8,Md399,dotrewrite-d399-6)
	#call replace(p4.p8,-i10/2+i11+i12-i4/2+i5/2+i7/2-i8/2,i,i10,i11,i12,i4,i5,i7,i8,Md399,dotrewrite-d399-7)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p6.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p2.p6 = i11 - i13;
	if (count(Md399,1)) id Q.p9 = i11 + i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md399,dotrewrite-d399-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-3)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-4)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-5)
	#call replace(p2.p7,`Q2'/2-i10/2-i14+i7/2,i,i10,i14,i7,Md399,dotrewrite-d399-6)
	#call replace(p2.p9,i11-i13+i2/2-i3/2+i8/2,i,i11,i13,i2,i3,i8,Md399,dotrewrite-d399-7)
	#call replace(p7.p9,-i10/2+i11+i12+i5/2-i9/2,i,i10,i11,i12,i5,i9,Md399,dotrewrite-d399-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 610
* path: (6, 7, 10)
#case 69
* path: (6, 9)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p6.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id Q.p9 = i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-3)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-4)
	#call replace(p1.p9,i12+i13-i2/2+i3/2-i8/2,i,i12,i13,i2,i3,i8,Md399,dotrewrite-d399-5)
	#call replace(p7.p9,-i10/2+i11+i12+i5/2-i9/2,i,i10,i11,i12,i5,i9,Md399,dotrewrite-d399-6)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p4.p - p6.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-2)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-3)
	#call replace(Q.p5,`Q2'/2+i10/2-i11-i12-i7/2,i,i10,i11,i12,i7,Md399,dotrewrite-d399-4)
	#call replace(p4.p5,`Q2'/2-i12-i4/2-i5/2+i8/2,i,i12,i4,i5,i8,Md399,dotrewrite-d399-5)
	#call replace(p5.p6,i11-i4/2+i7/2+i8/2-i9/2,i,i11,i4,i7,i8,i9,Md399,dotrewrite-d399-6)
	#call replace(p1.p5,`Q2'/2+i1/2-i12-i13-i14-i3/2+i8/2,i,i1,i12,i13,i14,i3,i8,Md399,dotrewrite-d399-7)
#endif
#break
#case Q3
* path: (0, 7, 4, 3)
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p3.p + p2.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-3)
	#call replace(Q.p3,-`Q2'/2+i1/2+i12-i2/2,i,i1,i12,i2,Md399,dotrewrite-d399-4)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-5)
	#call replace(p1.p3,-`Q2'/2+i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md399,dotrewrite-d399-6)
	#call replace(p3.p4,-`Q2'/2+i12+i13+i14-i4/2+i5/2-i8/2,i,i12,i13,i14,i4,i5,i8,Md399,dotrewrite-d399-7)
	#call replace(p3.p7,-`Q2'/2+i11+i12+i14-i4/2+i5/2+i6/2-i9/2,i,i11,i12,i14,i4,i5,i6,i9,Md399,dotrewrite-d399-8)
#endif
#break
#case 23
* path: (2, 3)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p2.p + p3.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p2.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(p2.p3,-i2/2-i3/2+i8/2,i,i2,i3,i8,Md399,dotrewrite-d399-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-3)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-4)
	#call replace(Q.p3,-`Q2'/2+i1/2+i12-i2/2,i,i1,i12,i2,Md399,dotrewrite-d399-5)
	#call replace(p2.p7,`Q2'/2-i10/2-i14+i7/2,i,i10,i14,i7,Md399,dotrewrite-d399-6)
	#call replace(p3.p6,-i11+i13-i6/2-i8/2+i9/2,i,i11,i13,i6,i8,i9,Md399,dotrewrite-d399-7)
	#call replace(p3.p7,-`Q2'/2+i11+i12+i14-i4/2+i5/2+i6/2-i9/2,i,i11,i12,i14,i4,i5,i6,i9,Md399,dotrewrite-d399-8)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case 18
* path: (1, 2, 8)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + p4.p - p6.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-4)
	#call replace(p1.p8,i12-i2/2+i3/2-i8/2,i,i12,i2,i3,i8,Md399,dotrewrite-d399-5)
	#call replace(p4.p8,-i10/2+i11+i12-i4/2+i5/2+i7/2-i8/2,i,i10,i11,i12,i4,i5,i7,i8,Md399,dotrewrite-d399-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p2.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p2.p6 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-3)
	#call replace(p2.p8,i2/2-i3/2+i8/2,i,i2,i3,i8,Md399,dotrewrite-d399-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-5)
	#call replace(p2.p7,`Q2'/2-i10/2-i14+i7/2,i,i10,i14,i7,Md399,dotrewrite-d399-6)
	#call replace(p7.p8,-i10/2+i11+i12-i4/2+i5/2+i6/2+i7/2-i9/2,i,i10,i11,i12,i4,i5,i6,i7,i9,Md399,dotrewrite-d399-7)
#endif
#break
#case 49
* path: (4, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p4.p - p7.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p10.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id p1.p4 = i13 + i14;
	if (count(Md399,1)) id Q.p9 = i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-2)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md399,dotrewrite-d399-3)
	#call replace(Q.p4,`Q2'/2-i10/2+i11+i7/2,i,i10,i11,i7,Md399,dotrewrite-d399-4)
	#call replace(Q.p5,`Q2'/2+i10/2-i11-i12-i7/2,i,i10,i11,i12,i7,Md399,dotrewrite-d399-5)
	#call replace(p4.p5,`Q2'/2-i12-i4/2-i5/2+i8/2,i,i12,i4,i5,i8,Md399,dotrewrite-d399-6)
	#call replace(p1.p9,i12+i13-i2/2+i3/2-i8/2,i,i12,i13,i2,i3,i8,Md399,dotrewrite-d399-7)
	#call replace(p4.p9,-i10/2+i11+i12+i5/2+i6/2-i8/2,i,i10,i11,i12,i5,i6,i8,Md399,dotrewrite-d399-8)
	#call replace(p1.p5,`Q2'/2+i1/2-i12-i13-i14-i3/2+i8/2,i,i1,i12,i13,i14,i3,i8,Md399,dotrewrite-d399-9)
#endif
#break
#case 610
* path: (6, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p10.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p6.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id Q.p9 = i11 + i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-1)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md399,dotrewrite-d399-3)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md399,dotrewrite-d399-4)
	#call replace(p1.p10,`Q2'/2+i1/2-i14-i2/2,i,i1,i14,i2,Md399,dotrewrite-d399-5)
	#call replace(p6.p10,i11-i4/2+i6/2+i7/2,i,i11,i4,i6,i7,Md399,dotrewrite-d399-6)
	#call replace(p1.p9,i12+i13-i2/2+i3/2-i8/2,i,i12,i13,i2,i3,i8,Md399,dotrewrite-d399-7)
#endif
#break
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p7.p?!{p7,[P+p7],[P-p7],p1} = + Q.p - p10.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p3.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	if (count(Md399,1)) id Q.p9 = i11 + i12;
	#call replace(p3.p8,-i2/2+i3/2+i8/2,i,i2,i3,i8,Md399,dotrewrite-d399-1)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md399,dotrewrite-d399-2)
	#call replace(p8.p9,-i6/2+i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-3)
	#call replace(Q.p3,-`Q2'/2+i1/2+i12-i2/2,i,i1,i12,i2,Md399,dotrewrite-d399-4)
	#call replace(Q.p5,`Q2'/2+i10/2-i11-i12-i7/2,i,i10,i11,i12,i7,Md399,dotrewrite-d399-5)
	#call replace(p3.p5,i1/2-i13-i14-i3/2+i4/2-i5/2,i,i1,i13,i14,i3,i4,i5,Md399,dotrewrite-d399-6)
	#call replace(p5.p8,i10/2-i11+i4/2-i5/2-i7/2-i8/2,i,i10,i11,i4,i5,i7,i8,Md399,dotrewrite-d399-7)
	#call replace(p3.p9,-i11+i13-i2/2+i3/2-i6/2+i9/2,i,i11,i13,i2,i3,i6,i9,Md399,dotrewrite-d399-8)
#endif
#break
#default
#case Q8
* path: (0, 7, 6, 8)
#case 78
* path: (7, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md399,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p8.p;
	.sort:momrewrite-Md399-6;
	if (count(Md399,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md399-5;
	if (count(Md399,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md399-4;
	if (count(Md399,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md399-3;
	if (count(Md399,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md399-2;
	if (count(Md399,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md399-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd399()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md399,dotrewrite-d399-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md399,dotrewrite-d399-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md399,dotrewrite-d399-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md399,dotrewrite-d399-3)
	#call replace(p1.p8,i12-i2/2+i3/2-i8/2,i,i12,i2,i3,i8,Md399,dotrewrite-d399-4)
	#call replace(p7.p8,-i10/2+i11+i12-i4/2+i5/2+i6/2+i7/2-i9/2,i,i10,i11,i12,i4,i5,i6,i7,i9,Md399,dotrewrite-d399-5)
#endif
#break
#endswitch
#break
*--#] d399 : 
*--#[ d400 :
#case Md400
#procedure SimpleDotd400()
if (count(Md400,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#case 410
* path: (4, 5, 10)
#case 410
* path: (4, 7, 10)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md400,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md400-6;
	if (count(Md400,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md400-5;
	if (count(Md400,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md400-4;
	if (count(Md400,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md400-3;
	if (count(Md400,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md400-2;
	if (count(Md400,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md400-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd400()
	if (count(Md400,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md400,dotrewrite-d400-1)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md400,dotrewrite-d400-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md400,dotrewrite-d400-3)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md400,dotrewrite-d400-4)
	#call replace(Q.p5,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md400,dotrewrite-d400-5)
	#call replace(p4.p10,i11-i4/2+i6/2-i7/2,i,i11,i4,i6,i7,Md400,dotrewrite-d400-6)
	#call replace(p1.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md400,dotrewrite-d400-7)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 38
* path: (3, 8)
#case 36
* path: (3, 8, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md400,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p10.p - p9.p;
	.sort:momrewrite-Md400-6;
	if (count(Md400,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md400-5;
	if (count(Md400,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md400-4;
	if (count(Md400,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md400-3;
	if (count(Md400,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md400-2;
	if (count(Md400,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md400-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd400()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md400,dotrewrite-d400-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md400,dotrewrite-d400-1)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md400,dotrewrite-d400-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md400,dotrewrite-d400-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md400,dotrewrite-d400-4)
	#call replace(p1.p8,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md400,dotrewrite-d400-5)
	#call replace(p4.p8,i11-i3/2-i4/2+i5/2,i,i11,i3,i4,i5,Md400,dotrewrite-d400-6)
#endif
#break
#case Q7
* path: (0, 1, 3, 4, 7)
#case Q3
* path: (0, 7, 4, 3)
#case Q1
* path: (0, 7, 4, 3, 1)
#case 17
* path: (1, 3, 4, 7)
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md400,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md400-6;
	if (count(Md400,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md400-5;
	if (count(Md400,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md400-4;
	if (count(Md400,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md400-3;
	if (count(Md400,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md400-2;
	if (count(Md400,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md400-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd400()
	if (count(Md400,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md400,dotrewrite-d400-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md400,dotrewrite-d400-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md400,dotrewrite-d400-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md400,dotrewrite-d400-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md400,dotrewrite-d400-5)
	#call replace(p3.p7,`Q2'/2-i10/2-i11+i3/2+i4/2-i5/2-i6/2+i7/2-i8/2+i9/2,i,i10,i11,i3,i4,i5,i6,i7,i8,i9,Md400,dotrewrite-d400-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md400,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md400-6;
	if (count(Md400,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md400-5;
	if (count(Md400,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md400-4;
	if (count(Md400,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md400-3;
	if (count(Md400,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md400-2;
	if (count(Md400,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md400-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd400()
	if (count(Md400,1)) id p1.p5 = i12 - i13;
	if (count(Md400,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md400,dotrewrite-d400-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md400,dotrewrite-d400-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md400,dotrewrite-d400-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md400,dotrewrite-d400-5)
	#call replace(Q.p5,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md400,dotrewrite-d400-6)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i3/2-i5/2-i8/2+i9/2,i,i10,i11,i3,i5,i8,i9,Md400,dotrewrite-d400-7)
#endif
#break
#case 49
* path: (4, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md400,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md400-6;
	if (count(Md400,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p4.p - p7.p;
	.sort:momrewrite-Md400-5;
	if (count(Md400,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md400-4;
	if (count(Md400,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md400-3;
	if (count(Md400,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md400-2;
	if (count(Md400,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md400-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd400()
	if (count(Md400,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md400,dotrewrite-d400-1)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md400,dotrewrite-d400-2)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md400,dotrewrite-d400-3)
	#call replace(Q.p5,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md400,dotrewrite-d400-4)
	#call replace(Q.p9,i10/2+i11-i3/2-i7/2+i8/2,i,i10,i11,i3,i7,i8,Md400,dotrewrite-d400-5)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md400,dotrewrite-d400-6)
	#call replace(p4.p9,i11-i3/2+i5/2+i6/2-i7/2,i,i11,i3,i5,i6,i7,Md400,dotrewrite-d400-7)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md400,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md400-6;
	if (count(Md400,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md400-5;
	if (count(Md400,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md400-4;
	if (count(Md400,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md400-3;
	if (count(Md400,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md400-2;
	if (count(Md400,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md400-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd400()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md400,dotrewrite-d400-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md400,dotrewrite-d400-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md400,dotrewrite-d400-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md400,dotrewrite-d400-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md400,dotrewrite-d400-4)
	#call replace(p3.p6,-`Q2'/2+i10/2+i11+i6/2-i7/2+i8/2-i9/2,i,i10,i11,i6,i7,i8,i9,Md400,dotrewrite-d400-5)
#endif
#break
#endswitch
#break
*--#] d400 : 
*--#[ d401 :
#case Md401
#procedure SimpleDotd401()
if (count(Md401,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p3.p5^n? = i12^n;
	id p4.p5^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 310
* path: (3, 5, 10)
#case 410
* path: (4, 3, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md401,dotrewrite-d401-2)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-4)
	#call replace(p4.p10,i13+i14-i2/2+i4/2+i8/2,i,i13,i14,i2,i4,i8,Md401,dotrewrite-d401-5)
	#call replace(p3.p10,`Q2'/2+i10/2-i11+i12+i6/2-i7/2-i8/2-i9/2,i,i10,i11,i12,i6,i7,i8,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 810
* path: (8, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p4.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p3,p4} = + p10.p - p9.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p9.p - p8.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-0)
	#call replace(p4.p8,-i2/2+i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-1)
	#call replace(p8.p9,-i6/2+i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md401,dotrewrite-d401-3)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-5)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-6)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md401,dotrewrite-d401-7)
	#call replace(p4.p10,i13+i14-i2/2+i4/2+i8/2,i,i13,i14,i2,i4,i8,Md401,dotrewrite-d401-8)
	#call replace(p8.p10,i11-i12-i6/2+i8/2+i9/2,i,i11,i12,i6,i8,i9,Md401,dotrewrite-d401-9)
#endif
#break
#case 210
* path: (2, 8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p8.p - p2.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p3,p4} = + p10.p - p9.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p9.p - p8.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md401,dotrewrite-d401-0)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p2.p8,i2/2-i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-2)
	#call replace(p8.p9,-i6/2+i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md401,dotrewrite-d401-4)
	#call replace(p9.p10,i10/2-i5/2+i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-6)
	#call replace(p2.p9,-i14+i2/2-i4/2-i6/2+i9/2,i,i14,i2,i4,i6,i9,Md401,dotrewrite-d401-7)
	#call replace(p8.p10,i11-i12-i6/2+i8/2+i9/2,i,i11,i12,i6,i8,i9,Md401,dotrewrite-d401-8)
	#call replace(p2.p10,i11-i12-i13-i14+i2/2-i4/2-i6/2+i9/2,i,i11,i12,i13,i14,i2,i4,i6,i9,Md401,dotrewrite-d401-9)
#endif
#break
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p4.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p5.p8 = i11 - i12;
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p4.p8,-i2/2+i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-4)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-5)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p + p8.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md401,dotrewrite-d401-0)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p5.p7,-i10/2+i11-i5/2+i9/2,i,i10,i11,i5,i9,Md401,dotrewrite-d401-2)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-3)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-4)
	#call replace(p4.p7,i1/2-i13-i14-i3/2-i4/2,i,i1,i13,i14,i3,i4,Md401,dotrewrite-d401-5)
	#call replace(p6.p7,-i12+i3/2+i5/2-i6/2-i7/2,i,i12,i3,i5,i6,i7,Md401,dotrewrite-d401-6)
#endif
#break
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p8.p - p2.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p5.p8 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md401,dotrewrite-d401-1)
	#call replace(p2.p5,i11-i12-i13,i,i11,i12,i13,Md401,dotrewrite-d401-2)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-3)
	#call replace(p2.p8,i2/2-i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-5)
	#call replace(p2.p6,-i14-i6/2-i8/2+i9/2,i,i14,i6,i8,i9,Md401,dotrewrite-d401-6)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-7)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-8)
#endif
#break
#case Q8
* path: (0, 7, 6, 8)
#case 78
* path: (7, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p3,p4} = + p10.p - p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p4.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p8.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md401,dotrewrite-d401-0)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p4.p8,-i2/2+i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-4)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-5)
	#call replace(p4.p7,i1/2-i13-i14-i3/2-i4/2,i,i1,i13,i14,i3,i4,Md401,dotrewrite-d401-6)
	#call replace(p6.p7,-i12+i3/2+i5/2-i6/2-i7/2,i,i12,i3,i5,i6,i7,Md401,dotrewrite-d401-7)
	#call replace(p7.p8,`Q2'/2-i11+i12-i3/2+i6/2-i9/2,i,i11,i12,i3,i6,i9,Md401,dotrewrite-d401-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 44
* path: (4,)
#case 48
* path: (4, 8)
#case 49
* path: (4, 8, 9)
#case 55
* path: (5,)
#case 59
* path: (5, 9)
#case 79
* path: (7, 5, 9)
#case 88
* path: (8,)
#case 89
* path: (8, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p4.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p9.p - p8.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p5.p8 = i11 - i12;
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p4.p8,-i2/2+i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-2)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-3)
	#call replace(p8.p9,-i6/2+i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-5)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-6)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md401,dotrewrite-d401-7)
#endif
#break
#case Q3
* path: (0, 7, 3)
#case Q4
* path: (0, 7, 3, 4)
#case 37
* path: (3, 7)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md401,dotrewrite-d401-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-3)
	#call replace(p5.p7,-i10/2+i11-i5/2+i9/2,i,i10,i11,i5,i9,Md401,dotrewrite-d401-4)
	#call replace(p4.p7,i1/2-i13-i14-i3/2-i4/2,i,i1,i13,i14,i3,i4,Md401,dotrewrite-d401-5)
	#call replace(p3.p7,-i10/2+i11-i12+i3/2-i6/2+i7/2+i9/2,i,i10,i11,i12,i3,i6,i7,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case Q10
* path: (0, 1, 3, 5, 10)
#case 110
* path: (1, 3, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p1.p5 = i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md401,dotrewrite-d401-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md401,dotrewrite-d401-4)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p3.p10,`Q2'/2+i10/2-i11+i12+i6/2-i7/2-i8/2-i9/2,i,i10,i11,i12,i6,i7,i8,i9,Md401,dotrewrite-d401-6)
	#call replace(p1.p10,`Q2'/2+i10/2-i11+i12+i13+i14-i2/2+i4/2+i6/2-i7/2-i9/2,i,i10,i11,i12,i13,i14,i2,i4,i6,i7,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = - p3.p + p1.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md401,dotrewrite-d401-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p2.p5,i11-i12-i13,i,i11,i12,i13,Md401,dotrewrite-d401-2)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-3)
	#call replace(p2.p3,`Q2'/2-i1/2+i4/2-i8/2,i,i1,i4,i8,Md401,dotrewrite-d401-4)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-5)
	#call replace(p2.p9,-i14+i2/2-i4/2-i6/2+i9/2,i,i14,i2,i4,i6,i9,Md401,dotrewrite-d401-6)
	#call replace(p3.p9,`Q2'/2+i10/2-i11+i6/2-i7/2-i8/2-i9/2,i,i10,i11,i6,i7,i8,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case Q2
* path: (0, 7, 3, 1, 2)
#case 27
* path: (2, 1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = - p3.p + p1.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md401,dotrewrite-d401-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p2.p5,i11-i12-i13,i,i11,i12,i13,Md401,dotrewrite-d401-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md401,dotrewrite-d401-3)
	#call replace(p2.p3,`Q2'/2-i1/2+i4/2-i8/2,i,i1,i4,i8,Md401,dotrewrite-d401-4)
	#call replace(p5.p7,-i10/2+i11-i5/2+i9/2,i,i10,i11,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p3.p7,-i10/2+i11-i12+i3/2-i6/2+i7/2+i9/2,i,i10,i11,i12,i3,i6,i7,i9,Md401,dotrewrite-d401-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i12+i13+i14+i4/2+i6/2-i9/2,i,i1,i11,i12,i13,i14,i4,i6,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p4.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p5.p8 = i11 - i12;
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md401,dotrewrite-d401-1)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(p4.p8,-i2/2+i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-4)
	#call replace(p5.p7,-i10/2+i11-i5/2+i9/2,i,i10,i11,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p4.p7,i1/2-i13-i14-i3/2-i4/2,i,i1,i13,i14,i3,i4,Md401,dotrewrite-d401-6)
	#call replace(p7.p8,`Q2'/2-i11+i12-i3/2+i6/2-i9/2,i,i11,i12,i3,i6,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p1.p5 = i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md401,dotrewrite-d401-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-3)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-4)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p1.p6,i10/2-i11+i14+i3/2+i6/2-i7/2-i9/2,i,i10,i11,i14,i3,i6,i7,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p + p8.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p6.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-0)
	#call replace(p6.p9,i6/2-i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-3)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md401,dotrewrite-d401-4)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-5)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p4.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md401,dotrewrite-d401-0)
	#call replace(p2.p4,-i2/2-i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-1)
	#call replace(p2.p5,i11-i12-i13,i,i11,i12,i13,Md401,dotrewrite-d401-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-3)
	#call replace(p2.p6,-i14-i6/2-i8/2+i9/2,i,i14,i6,i8,i9,Md401,dotrewrite-d401-4)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-5)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case Q1
* path: (0, 7, 3, 1)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p10.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p1.p5 = i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md401,dotrewrite-d401-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md401,dotrewrite-d401-4)
	#call replace(p5.p7,-i10/2+i11-i5/2+i9/2,i,i10,i11,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p3.p7,-i10/2+i11-i12+i3/2-i6/2+i7/2+i9/2,i,i10,i11,i12,i3,i6,i7,i9,Md401,dotrewrite-d401-6)
	#call replace(p1.p7,i1/2-i10/2+i11-i12-i13-i14-i4/2-i6/2+i7/2+i9/2,i,i1,i10,i11,i12,i13,i14,i4,i6,i7,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case 39
* path: (3, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-1)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-3)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-4)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md401,dotrewrite-d401-5)
	#call replace(p3.p9,`Q2'/2+i10/2-i11+i6/2-i7/2-i8/2-i9/2,i,i10,i11,i6,i7,i8,i9,Md401,dotrewrite-d401-6)
#endif
#break
#case 610
* path: (6, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p + p8.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + p9.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md401,dotrewrite-d401-0)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-3)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-4)
	#call replace(p4.p10,i13+i14-i2/2+i4/2+i8/2,i,i13,i14,i2,i4,i8,Md401,dotrewrite-d401-5)
	#call replace(p6.p10,i10/2-i11+i12-i5/2+i6/2-i8/2,i,i10,i11,i12,i5,i6,i8,Md401,dotrewrite-d401-6)
#endif
#break
#case Q10
* path: (0, 10)
#case 510
* path: (5, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p8.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p4.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p5.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p5.p8 = i11 - i12;
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-1)
	#call replace(p4.p8,-i2/2+i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md401,dotrewrite-d401-3)
	#call replace(p5.p10,i10/2+i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-5)
	#call replace(p4.p10,i13+i14-i2/2+i4/2+i8/2,i,i13,i14,i2,i4,i8,Md401,dotrewrite-d401-6)
	#call replace(p8.p10,i11-i12-i6/2+i8/2+i9/2,i,i11,i12,i6,i8,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 1, 3, 6)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p1.p5 = i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md401,dotrewrite-d401-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-3)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-4)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p3.p6,i10/2-i11+i3/2+i6/2-i7/2-i9/2,i,i10,i11,i3,i6,i7,i9,Md401,dotrewrite-d401-6)
	#call replace(p1.p6,i10/2-i11+i14+i3/2+i6/2-i7/2-i9/2,i,i10,i11,i14,i3,i6,i7,i9,Md401,dotrewrite-d401-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q9
* path: (0, 2, 8, 9)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 19
* path: (1, 2, 8, 9)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 29
* path: (2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p8.p - p2.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p9.p - p8.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	if (count(Md401,1)) id p5.p8 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md401,dotrewrite-d401-1)
	#call replace(p2.p5,i11-i12-i13,i,i11,i12,i13,Md401,dotrewrite-d401-2)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md401,dotrewrite-d401-3)
	#call replace(p2.p8,i2/2-i4/2+i8/2,i,i2,i4,i8,Md401,dotrewrite-d401-4)
	#call replace(p5.p9,i10/2-i5/2-i9/2,i,i10,i5,i9,Md401,dotrewrite-d401-5)
	#call replace(p8.p9,-i6/2+i8/2+i9/2,i,i6,i8,i9,Md401,dotrewrite-d401-6)
	#call replace(Q.p9,`Q2'/2+i10/2-i11-i7/2,i,i10,i11,i7,Md401,dotrewrite-d401-7)
	#call replace(p2.p9,-i14+i2/2-i4/2-i6/2+i9/2,i,i14,i2,i4,i6,i9,Md401,dotrewrite-d401-8)
#endif
#break
#default
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md401,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md401-6;
	if (count(Md401,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p5.p + p9.p;
	.sort:momrewrite-Md401-5;
	if (count(Md401,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md401-4;
	if (count(Md401,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p6.p;
	.sort:momrewrite-Md401-3;
	if (count(Md401,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md401-2;
	if (count(Md401,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md401-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd401()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md401,dotrewrite-d401-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md401,dotrewrite-d401-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md401,dotrewrite-d401-2)
	#call replace(Q.p6,i10/2-i11+i3/2-i7/2-i8/2,i,i10,i11,i3,i7,i8,Md401,dotrewrite-d401-3)
	#call replace(p5.p6,i10/2-i11+i12-i5/2-i9/2,i,i10,i11,i12,i5,i9,Md401,dotrewrite-d401-4)
	#call replace(p3.p6,i10/2-i11+i3/2+i6/2-i7/2-i9/2,i,i10,i11,i3,i6,i7,i9,Md401,dotrewrite-d401-5)
#endif
#break
#endswitch
#break
*--#] d401 : 
*--#[ d402 :
#case Md402
#procedure SimpleDotd402()
if (count(Md402,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p5^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p4.p5^n? = i13^n;
	id p4.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q10
* path: (0, 1, 3, 5, 10)
#case 110
* path: (1, 3, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p4} = - p8.p + p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p6.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md402,dotrewrite-d402-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-3)
	#call replace(Q.p10,-`Q2'+i11-i12,i,i11,i12,Md402,dotrewrite-d402-4)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md402,dotrewrite-d402-5)
	#call replace(p5.p10,-`Q2'/2+i10/2-i12+i5/2-i7/2,i,i10,i12,i5,i7,Md402,dotrewrite-d402-6)
	#call replace(p3.p10,-`Q2'/2-i12+i5/2-i6/2-i7/2+i9/2,i,i12,i5,i6,i7,i9,Md402,dotrewrite-d402-7)
	#call replace(p1.p10,-`Q2'/2-i1/2-i12+i13-i14+i2/2+i3/2+i5/2-i6/2-i7/2-i8/2+i9/2,i,i1,i12,i13,i14,i2,i3,i5,i6,i7,i8,i9,Md402,dotrewrite-d402-8)
#endif
#break
#case 310
* path: (3, 5, 10)
#case 410
* path: (4, 3, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p4} = - p8.p + p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p6.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-2)
	#call replace(Q.p10,-`Q2'+i11-i12,i,i11,i12,Md402,dotrewrite-d402-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-4)
	#call replace(p5.p10,-`Q2'/2+i10/2-i12+i5/2-i7/2,i,i10,i12,i5,i7,Md402,dotrewrite-d402-5)
	#call replace(p3.p10,-`Q2'/2-i12+i5/2-i6/2-i7/2+i9/2,i,i12,i5,i6,i7,i9,Md402,dotrewrite-d402-6)
	#call replace(p4.p10,-i1/2+i13-i14+i2/2+i3/2-i8/2,i,i1,i13,i14,i2,i3,i8,Md402,dotrewrite-d402-7)
#endif
#break
#case 59
* path: (5, 6, 9)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p4} = - p8.p + p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-0)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md402,dotrewrite-d402-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-2)
	#call replace(Q.p6,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md402,dotrewrite-d402-3)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Md402,dotrewrite-d402-4)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i8/2,i,i12,i3,i8,Md402,dotrewrite-d402-5)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md402,dotrewrite-d402-6)
	#call replace(p5.p9,`Q2'/2-i10/2+i12-i3/2+i6/2+i7/2,i,i10,i12,i3,i6,i7,Md402,dotrewrite-d402-7)
#endif
#break
#case 36
* path: (3, 6)
#case 46
* path: (4, 3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p7.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p3.p - p6.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-3)
	#call replace(Q.p6,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md402,dotrewrite-d402-4)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Md402,dotrewrite-d402-5)
	#call replace(p3.p7,i12+i7/2+i8/2-i9/2,i,i12,i7,i8,i9,Md402,dotrewrite-d402-6)
	#call replace(p6.p7,-`Q2'/2+i10/2+i11-i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md402,dotrewrite-d402-7)
#endif
#break
#case Q10
* path: (0, 10)
#case 510
* path: (5, 10)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p4} = - p8.p + p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p6.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-0)
	#call replace(Q.p10,-`Q2'+i11-i12,i,i11,i12,Md402,dotrewrite-d402-1)
	#call replace(p6.p10,-i10/2-i6/2+i9/2,i,i10,i6,i9,Md402,dotrewrite-d402-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-3)
	#call replace(Q.p6,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md402,dotrewrite-d402-4)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Md402,dotrewrite-d402-5)
	#call replace(p5.p10,-`Q2'/2+i10/2-i12+i5/2-i7/2,i,i10,i12,i5,i7,Md402,dotrewrite-d402-6)
	#call replace(p4.p10,-i1/2+i13-i14+i2/2+i3/2-i8/2,i,i1,i13,i14,i2,i3,i8,Md402,dotrewrite-d402-7)
#endif
#break
#case 59
* path: (5, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p + p8.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md402,dotrewrite-d402-0)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i8/2,i,i12,i3,i8,Md402,dotrewrite-d402-2)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md402,dotrewrite-d402-3)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i12+i5/2+i7/2,i,i10,i11,i12,i5,i7,Md402,dotrewrite-d402-4)
	#call replace(p5.p9,`Q2'/2-i10/2+i12-i3/2+i6/2+i7/2,i,i10,i12,i3,i6,i7,Md402,dotrewrite-d402-5)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 5, 3, 1)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p7.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md402,dotrewrite-d402-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-3)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md402,dotrewrite-d402-4)
	#call replace(p3.p7,i12+i7/2+i8/2-i9/2,i,i12,i7,i8,i9,Md402,dotrewrite-d402-5)
	#call replace(p1.p7,i12+i14+i7/2+i8/2-i9/2,i,i12,i14,i7,i8,i9,Md402,dotrewrite-d402-6)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i12+i5/2+i7/2,i,i10,i11,i12,i5,i7,Md402,dotrewrite-d402-7)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p7.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p1.p - p3.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p3.p - p6.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md402,dotrewrite-d402-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-3)
	#call replace(Q.p6,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md402,dotrewrite-d402-4)
	#call replace(p3.p7,i12+i7/2+i8/2-i9/2,i,i12,i7,i8,i9,Md402,dotrewrite-d402-5)
	#call replace(p1.p6,i1/2-i13-i4/2-i5/2+i6/2,i,i1,i13,i4,i5,i6,Md402,dotrewrite-d402-6)
	#call replace(p1.p7,i12+i14+i7/2+i8/2-i9/2,i,i12,i14,i7,i8,i9,Md402,dotrewrite-d402-7)
	#call replace(p6.p7,-`Q2'/2+i10/2+i11-i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md402,dotrewrite-d402-8)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 17
* path: (1, 2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p8.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p8.p - p2.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p8.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md402,dotrewrite-d402-0)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(p2.p8,i2/2-i4/2+i8/2,i,i2,i4,i8,Md402,dotrewrite-d402-2)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Md402,dotrewrite-d402-3)
	#call replace(p2.p7,-i14-i7/2-i8/2+i9/2,i,i14,i7,i8,i9,Md402,dotrewrite-d402-4)
	#call replace(p5.p8,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md402,dotrewrite-d402-5)
	#call replace(p2.p5,i11-i13-i3/2-i5/2+i6/2,i,i11,i13,i3,i5,i6,Md402,dotrewrite-d402-6)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i12+i5/2+i7/2,i,i10,i11,i12,i5,i7,Md402,dotrewrite-d402-7)
#endif
#break
#case 39
* path: (3, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p4} = - p8.p + p9.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p3.p - p6.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-2)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md402,dotrewrite-d402-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-4)
	#call replace(Q.p6,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md402,dotrewrite-d402-5)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Md402,dotrewrite-d402-6)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i8/2,i,i12,i3,i8,Md402,dotrewrite-d402-7)
	#call replace(p4.p9,i14-i2/2+i4/2+i8/2,i,i14,i2,i4,i8,Md402,dotrewrite-d402-8)
	#call replace(p3.p9,`Q2'/2+i12-i3/2+i7/2-i9/2,i,i12,i3,i7,i9,Md402,dotrewrite-d402-9)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p7.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-0)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(Q.p6,`Q2'/2-i11+i3/2-i8/2,i,i11,i3,i8,Md402,dotrewrite-d402-2)
	#call replace(p4.p6,i1/2-i13-i3/2-i4/2,i,i1,i13,i3,i4,Md402,dotrewrite-d402-3)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i12+i5/2+i7/2,i,i10,i11,i12,i5,i7,Md402,dotrewrite-d402-4)
	#call replace(p6.p7,-`Q2'/2+i10/2+i11-i5/2+i8/2-i9/2,i,i10,i11,i5,i8,i9,Md402,dotrewrite-d402-5)
#endif
#break
#case 19
* path: (1, 2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p8.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p7} = + p8.p - p2.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p4} = + p9.p - p8.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md402,dotrewrite-d402-0)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md402,dotrewrite-d402-1)
	#call replace(p2.p8,i2/2-i4/2+i8/2,i,i2,i4,i8,Md402,dotrewrite-d402-2)
	#call replace(p8.p9,-i7/2+i8/2+i9/2,i,i7,i8,i9,Md402,dotrewrite-d402-3)
	#call replace(p5.p8,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md402,dotrewrite-d402-4)
	#call replace(Q.p9,`Q2'/2+i12-i3/2+i8/2,i,i12,i3,i8,Md402,dotrewrite-d402-5)
	#call replace(p2.p5,i11-i13-i3/2-i5/2+i6/2,i,i11,i13,i3,i5,i6,Md402,dotrewrite-d402-6)
	#call replace(p2.p9,-i14+i2/2-i4/2-i7/2+i9/2,i,i14,i2,i4,i7,i9,Md402,dotrewrite-d402-7)
	#call replace(p5.p9,`Q2'/2-i10/2+i12-i3/2+i6/2+i7/2,i,i10,i12,i3,i6,i7,Md402,dotrewrite-d402-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p7.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md402,dotrewrite-d402-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-2)
	#call replace(p1.p5,i13+i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md402,dotrewrite-d402-3)
	#call replace(p1.p7,i12+i14+i7/2+i8/2-i9/2,i,i12,i14,i7,i8,i9,Md402,dotrewrite-d402-4)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i12+i5/2+i7/2,i,i10,i11,i12,i5,i7,Md402,dotrewrite-d402-5)
#endif
#break
#default
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q4
* path: (0, 5, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md402,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p - p9.p;
	.sort:momrewrite-Md402-6;
	if (count(Md402,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md402-5;
	if (count(Md402,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p7.p;
	.sort:momrewrite-Md402-4;
	if (count(Md402,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md402-3;
	if (count(Md402,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md402-2;
	if (count(Md402,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md402-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd402()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md402,dotrewrite-d402-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md402,dotrewrite-d402-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md402,dotrewrite-d402-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md402,dotrewrite-d402-3)
	#call replace(p3.p7,i12+i7/2+i8/2-i9/2,i,i12,i7,i8,i9,Md402,dotrewrite-d402-4)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i12+i5/2+i7/2,i,i10,i11,i12,i5,i7,Md402,dotrewrite-d402-5)
#endif
#break
#endswitch
#break
*--#] d402 : 
*--#[ d357 :
#case Md357
#procedure SimpleDotd357()
if (count(Md357,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p4^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md357,dotrewrite-d357-2)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md357,dotrewrite-d357-3)
	#call replace(p2.p6,i11+i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md357,dotrewrite-d357-4)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md357,dotrewrite-d357-5)
	#call replace(p5.p6,-`Q2'/2+i10-i4/2+i7/2-i8/2+i9/2,i,i10,i4,i7,i8,i9,Md357,dotrewrite-d357-6)
#endif
#break
#case 57
* path: (5, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p7.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md357,dotrewrite-d357-1)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md357,dotrewrite-d357-2)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md357,dotrewrite-d357-3)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md357,dotrewrite-d357-4)
	#call replace(Q.p8,`Q2'/2+i11-i2/2+i7/2,i,i11,i2,i7,Md357,dotrewrite-d357-5)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md357,dotrewrite-d357-6)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md357,dotrewrite-d357-7)
	#call replace(p5.p7,`Q2'/2-i10+i4/2-i5/2-i7/2,i,i10,i4,i5,i7,Md357,dotrewrite-d357-8)
#endif
#break
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p1.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-0)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md357,dotrewrite-d357-1)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md357,dotrewrite-d357-2)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i9/2,i,i10,i11,i4,i6,i9,Md357,dotrewrite-d357-3)
	#call replace(p5.p6,-`Q2'/2+i10-i4/2+i7/2-i8/2+i9/2,i,i10,i4,i7,i8,i9,Md357,dotrewrite-d357-4)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#case 49
* path: (4, 9)
#case 55
* path: (5,)
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p1.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p9.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-0)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md357,dotrewrite-d357-1)
	#call replace(p1.p9,-i12+i13-i14,i,i12,i13,i14,Md357,dotrewrite-d357-2)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md357,dotrewrite-d357-3)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md357,dotrewrite-d357-4)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md357,dotrewrite-d357-5)
	#call replace(p4.p9,-`Q2'/2-i11+i4/2-i6/2+i9/2,i,i11,i4,i6,i9,Md357,dotrewrite-d357-6)
#endif
#break
#case Q8
* path: (0, 1, 7, 8)
#case 18
* path: (1, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p7.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md357,dotrewrite-d357-1)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md357,dotrewrite-d357-2)
	#call replace(p4.p7,i10-i2/2-i4/2+i5/2,i,i10,i2,i4,i5,Md357,dotrewrite-d357-3)
	#call replace(Q.p8,`Q2'/2+i11-i2/2+i7/2,i,i11,i2,i7,Md357,dotrewrite-d357-4)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md357,dotrewrite-d357-5)
	#call replace(p4.p8,`Q2'/2+i11-i2/2+i5/2+i6/2-i9/2,i,i11,i2,i5,i6,i9,Md357,dotrewrite-d357-6)
#endif
#break
#case 79
* path: (7, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p9.p - p8.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p7.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md357,dotrewrite-d357-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md357,dotrewrite-d357-2)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md357,dotrewrite-d357-3)
	#call replace(p1.p9,-i12+i13-i14,i,i12,i13,i14,Md357,dotrewrite-d357-4)
	#call replace(p6.p9,`Q2'/2-i10+i4/2-i6/2-i9/2,i,i10,i4,i6,i9,Md357,dotrewrite-d357-5)
	#call replace(p7.p9,-`Q2'/2+i10-i4/2+i5/2+i6/2-i8/2,i,i10,i4,i5,i6,i8,Md357,dotrewrite-d357-6)
#endif
#break
#case 48
* path: (4, 5, 8)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p1.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-0)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md357,dotrewrite-d357-1)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md357,dotrewrite-d357-2)
	#call replace(Q.p8,`Q2'/2+i11-i2/2+i7/2,i,i11,i2,i7,Md357,dotrewrite-d357-3)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md357,dotrewrite-d357-4)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md357,dotrewrite-d357-5)
	#call replace(p4.p8,`Q2'/2+i11-i2/2+i5/2+i6/2-i9/2,i,i11,i2,i5,i6,i9,Md357,dotrewrite-d357-6)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case Q9
* path: (0, 9)
#case 68
* path: (6, 8)
#case 69
* path: (6, 9)
#case 88
* path: (8,)
#case 89
* path: (8, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p7.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p - p9.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p6.p - p8.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md357,dotrewrite-d357-0)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md357,dotrewrite-d357-1)
	#call replace(p1.p9,-i12+i13-i14,i,i12,i13,i14,Md357,dotrewrite-d357-2)
	#call replace(p8.p9,i5/2-i8/2-i9/2,i,i5,i8,i9,Md357,dotrewrite-d357-3)
	#call replace(Q.p8,`Q2'/2+i11-i2/2+i7/2,i,i11,i2,i7,Md357,dotrewrite-d357-4)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md357,dotrewrite-d357-5)
	#call replace(p6.p9,`Q2'/2-i10+i4/2-i6/2-i9/2,i,i10,i4,i6,i9,Md357,dotrewrite-d357-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md357,dotrewrite-d357-2)
	#call replace(p2.p6,i11+i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md357,dotrewrite-d357-3)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i9/2,i,i10,i11,i4,i6,i9,Md357,dotrewrite-d357-4)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p3.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(p1.p3,-i1/2-i3/2+i7/2,i,i1,i3,i7,Md357,dotrewrite-d357-0)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i7/2,i,i12,i2,i7,Md357,dotrewrite-d357-1)
	#call replace(p3.p6,-i14-i6/2-i7/2+i8/2,i,i14,i6,i7,i8,Md357,dotrewrite-d357-2)
	#call replace(p3.p4,i10-i13-i2/2-i4/2+i5/2,i,i10,i13,i2,i4,i5,Md357,dotrewrite-d357-3)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i9/2,i,i10,i11,i4,i6,i9,Md357,dotrewrite-d357-4)
#endif
#break
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-1)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md357,dotrewrite-d357-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md357,dotrewrite-d357-3)
	#call replace(Q.p5,`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md357,dotrewrite-d357-4)
	#call replace(Q.p8,`Q2'/2+i11-i2/2+i7/2,i,i11,i2,i7,Md357,dotrewrite-d357-5)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md357,dotrewrite-d357-6)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md357,dotrewrite-d357-7)
	#call replace(p2.p8,`Q2'/2+i11-i2/2+i6/2-i8/2,i,i11,i2,i6,i8,Md357,dotrewrite-d357-8)
#endif
#break
#case Q9
* path: (0, 2, 4, 9)
#case 19
* path: (1, 2, 4, 9)
#case 29
* path: (2, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p5.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md357,dotrewrite-d357-1)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md357,dotrewrite-d357-2)
	#call replace(p1.p9,-i12+i13-i14,i,i12,i13,i14,Md357,dotrewrite-d357-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md357,dotrewrite-d357-4)
	#call replace(p4.p9,-`Q2'/2-i11+i4/2-i6/2+i9/2,i,i11,i4,i6,i9,Md357,dotrewrite-d357-5)
	#call replace(p2.p9,-`Q2'/2-i11+i4/2-i5/2-i6/2+i8/2,i,i11,i4,i5,i6,i8,Md357,dotrewrite-d357-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q6
* path: (0, 1, 7, 6)
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 6)
#case Q7
* path: (0, 6, 7)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#case 16
* path: (1, 7, 6)
#case 27
* path: (2, 1, 7)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 47
* path: (4, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md357,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md357-5;
	if (count(Md357,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md357-4;
	if (count(Md357,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p7.p;
	.sort:momrewrite-Md357-3;
	if (count(Md357,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md357-2;
	if (count(Md357,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md357-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd357()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md357,dotrewrite-d357-0)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md357,dotrewrite-d357-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md357,dotrewrite-d357-2)
	#call replace(p4.p7,i10-i2/2-i4/2+i5/2,i,i10,i2,i4,i5,Md357,dotrewrite-d357-3)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i9/2,i,i10,i11,i4,i6,i9,Md357,dotrewrite-d357-4)
#endif
#break
#endswitch
#break
*--#] d357 : 
*--#[ d366 :
#case Md366
#procedure SimpleDotd366()
if (count(Md366,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p4^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 5, 8)
#case 38
* path: (3, 7, 8)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	if (count(Md366,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md366,dotrewrite-d366-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md366,dotrewrite-d366-3)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md366,dotrewrite-d366-4)
	#call replace(Q.p5,`Q2'/2-i10+i3/2-i7/2,i,i10,i3,i7,Md366,dotrewrite-d366-5)
	#call replace(Q.p8,`Q2'/2+i11-i3/2+i7/2,i,i11,i3,i7,Md366,dotrewrite-d366-6)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md366,dotrewrite-d366-7)
	#call replace(p3.p8,`Q2'/2+i11-i3/2+i6/2-i8/2,i,i11,i3,i6,i8,Md366,dotrewrite-d366-8)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	if (count(Md366,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md366,dotrewrite-d366-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md366,dotrewrite-d366-3)
	#call replace(Q.p5,`Q2'/2-i10+i3/2-i7/2,i,i10,i3,i7,Md366,dotrewrite-d366-4)
	#call replace(p3.p6,i11+i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md366,dotrewrite-d366-5)
	#call replace(p5.p6,-`Q2'/2+i10-i4/2+i7/2-i8/2+i9/2,i,i10,i4,i7,i8,i9,Md366,dotrewrite-d366-6)
#endif
#break
#case 48
* path: (4, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p + p6.p - p8.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-0)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md366,dotrewrite-d366-1)
	#call replace(Q.p8,`Q2'/2+i11-i3/2+i7/2,i,i11,i3,i7,Md366,dotrewrite-d366-2)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md366,dotrewrite-d366-3)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i9/2,i,i10,i11,i4,i6,i9,Md366,dotrewrite-d366-4)
	#call replace(p4.p8,`Q2'/2+i11-i3/2+i5/2+i6/2-i9/2,i,i11,i3,i5,i6,i9,Md366,dotrewrite-d366-5)
#endif
#break
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	if (count(Md366,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-1)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md366,dotrewrite-d366-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md366,dotrewrite-d366-3)
	#call replace(Q.p5,`Q2'/2-i10+i3/2-i7/2,i,i10,i3,i7,Md366,dotrewrite-d366-4)
	#call replace(Q.p8,`Q2'/2+i11-i3/2+i7/2,i,i11,i3,i7,Md366,dotrewrite-d366-5)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md366,dotrewrite-d366-6)
	#call replace(p4.p8,`Q2'/2+i11-i3/2+i5/2+i6/2-i9/2,i,i11,i3,i5,i6,i9,Md366,dotrewrite-d366-7)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case Q9
* path: (0, 9)
#case 45
* path: (4, 5)
#case 49
* path: (4, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p9.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	if (count(Md366,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-1)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md366,dotrewrite-d366-2)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md366,dotrewrite-d366-3)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md366,dotrewrite-d366-4)
	#call replace(Q.p5,`Q2'/2-i10+i3/2-i7/2,i,i10,i3,i7,Md366,dotrewrite-d366-5)
	#call replace(p1.p9,-`Q2'/2-i1/2+i13-i14+i2/2,i,i1,i13,i14,i2,Md366,dotrewrite-d366-6)
	#call replace(p4.p9,-`Q2'/2-i11+i4/2-i6/2+i9/2,i,i11,i4,i6,i9,Md366,dotrewrite-d366-7)
#endif
#break
#case Q9
* path: (0, 1, 3, 4, 9)
#case 19
* path: (1, 3, 4, 9)
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p5.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md366,dotrewrite-d366-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md366,dotrewrite-d366-2)
	#call replace(Q.p9,-`Q2'+i10-i11,i,i10,i11,Md366,dotrewrite-d366-3)
	#call replace(p1.p9,-`Q2'/2-i1/2+i13-i14+i2/2,i,i1,i13,i14,i2,Md366,dotrewrite-d366-4)
	#call replace(p4.p9,-`Q2'/2-i11+i4/2-i6/2+i9/2,i,i11,i4,i6,i9,Md366,dotrewrite-d366-5)
	#call replace(p3.p9,-`Q2'/2-i11+i4/2-i5/2-i6/2+i8/2,i,i11,i4,i5,i6,i8,Md366,dotrewrite-d366-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 37
* path: (3, 7)
#case 36
* path: (3, 7, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md366,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md366-5;
	if (count(Md366,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md366-4;
	if (count(Md366,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md366-3;
	if (count(Md366,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md366-2;
	if (count(Md366,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md366-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd366()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md366,dotrewrite-d366-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md366,dotrewrite-d366-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md366,dotrewrite-d366-2)
	#call replace(p3.p6,i11+i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md366,dotrewrite-d366-3)
	#call replace(p4.p6,`Q2'/2-i10+i11+i4/2+i6/2-i9/2,i,i10,i11,i4,i6,i9,Md366,dotrewrite-d366-4)
#endif
#break
#endswitch
#break
*--#] d366 : 
*--#[ d299 :
#case Md299
#procedure SimpleDotd299()
if (count(Md299,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 6, 7)
#case 17
* path: (1, 2, 7)
#case 57
* path: (5, 6, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p7.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p5.p7 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md299,dotrewrite-d299-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md299,dotrewrite-d299-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md299,dotrewrite-d299-3)
	#call replace(p1.p7,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md299,dotrewrite-d299-4)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-5)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + p3.p + p4.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md299,dotrewrite-d299-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md299,dotrewrite-d299-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md299,dotrewrite-d299-3)
	#call replace(p3.p6,i10+i6/2+i7/2-i8/2,i,i10,i6,i7,i8,Md299,dotrewrite-d299-4)
	#call replace(p4.p6,-i10+i11-i6/2-i7/2+i8/2,i,i10,i11,i6,i7,i8,Md299,dotrewrite-d299-5)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md299,dotrewrite-d299-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md299,dotrewrite-d299-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md299,dotrewrite-d299-3)
	#call replace(p4.p6,-i10+i11-i6/2-i7/2+i8/2,i,i10,i11,i6,i7,i8,Md299,dotrewrite-d299-4)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-5)
#endif
#break
#case Q8
* path: (0, 5, 8)
#case 58
* path: (5, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p7.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md299,dotrewrite-d299-0)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md299,dotrewrite-d299-1)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md299,dotrewrite-d299-2)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i7/2,i,i10,i3,i7,Md299,dotrewrite-d299-3)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-4)
	#call replace(p1.p8,`Q2'/2+i11-i2/2-i3/2+i4/2,i,i11,i2,i3,i4,Md299,dotrewrite-d299-5)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p2.p5 = i12 - i13;
	if (count(Md299,1)) id p4.p5 = i13 - i14;
	if (count(Md299,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md299,dotrewrite-d299-3)
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md299,dotrewrite-d299-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md299,dotrewrite-d299-5)
	#call replace(p4.p6,-i10+i11-i6/2-i7/2+i8/2,i,i10,i11,i6,i7,i8,Md299,dotrewrite-d299-6)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-7)
#endif
#break
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p4.p5 = i13 - i14;
	if (count(Md299,1)) id p5.p7 = i12 - i14;
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md299,dotrewrite-d299-2)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md299,dotrewrite-d299-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md299,dotrewrite-d299-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md299,dotrewrite-d299-5)
	#call replace(p4.p6,-i10+i11-i6/2-i7/2+i8/2,i,i10,i11,i6,i7,i8,Md299,dotrewrite-d299-6)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-7)
#endif
#break
#case 38
* path: (3, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md299,dotrewrite-d299-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md299,dotrewrite-d299-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md299,dotrewrite-d299-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md299,dotrewrite-d299-3)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i7/2,i,i10,i3,i7,Md299,dotrewrite-d299-4)
	#call replace(p1.p8,`Q2'/2+i11-i2/2-i3/2+i4/2,i,i11,i2,i3,i4,Md299,dotrewrite-d299-5)
	#call replace(p3.p8,`Q2'/2+i10-i3/2+i6/2-i8/2,i,i10,i3,i6,i8,Md299,dotrewrite-d299-6)
#endif
#break
#case Q8
* path: (0, 2, 7, 8)
#case 18
* path: (1, 2, 7, 8)
#case 28
* path: (2, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p2.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p2.p5 = i12 - i13;
	if (count(Md299,1)) id p5.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md299,dotrewrite-d299-2)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md299,dotrewrite-d299-3)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md299,dotrewrite-d299-4)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md299,dotrewrite-d299-5)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md299,dotrewrite-d299-6)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i7/2,i,i10,i3,i7,Md299,dotrewrite-d299-7)
	#call replace(p2.p8,i10-i11+i2/2-i4/2+i7/2,i,i10,i11,i2,i4,i7,Md299,dotrewrite-d299-8)
#endif
#break
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = - p7.p + p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p9.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md299,dotrewrite-d299-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md299,dotrewrite-d299-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md299,dotrewrite-d299-2)
	#call replace(p5.p9,-i5/2+i8/2-i9/2,i,i5,i8,i9,Md299,dotrewrite-d299-3)
	#call replace(Q.p9,-`Q2'/2-i10-i12+i3/2-i7/2,i,i10,i12,i3,i7,Md299,dotrewrite-d299-4)
	#call replace(p1.p9,-`Q2'/2-i11-i13+i2/2+i3/2-i4/2,i,i11,i13,i2,i3,i4,Md299,dotrewrite-d299-5)
	#call replace(p3.p9,-`Q2'/2-i10-i14+i3/2-i6/2+i8/2,i,i10,i14,i3,i6,i8,Md299,dotrewrite-d299-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 26
* path: (2, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p2.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p2.p5 = i12 - i13;
	if (count(Md299,1)) id p2.p6 = i10 - i11;
	if (count(Md299,1)) id p5.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md299,dotrewrite-d299-3)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md299,dotrewrite-d299-4)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md299,dotrewrite-d299-5)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md299,dotrewrite-d299-6)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-7)
#endif
#break
#case 48
* path: (4, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	if (count(Md299,1)) id p4.p5 = i13 - i14;
	if (count(Md299,1)) id p5.p7 = i12 - i14;
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md299,dotrewrite-d299-2)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md299,dotrewrite-d299-3)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md299,dotrewrite-d299-4)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md299,dotrewrite-d299-5)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md299,dotrewrite-d299-6)
	#call replace(Q.p8,`Q2'/2+i10-i3/2+i7/2,i,i10,i3,i7,Md299,dotrewrite-d299-7)
	#call replace(p4.p8,-i10+i11-i2/2+i4/2-i6/2+i8/2,i,i10,i11,i2,i4,i6,i8,Md299,dotrewrite-d299-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 1, 3, 6)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 3, 6)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md299,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p - p8.p;
	.sort:momrewrite-Md299-5;
	if (count(Md299,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p6.p;
	.sort:momrewrite-Md299-4;
	if (count(Md299,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md299-3;
	if (count(Md299,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md299-2;
	if (count(Md299,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md299-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd299()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md299,dotrewrite-d299-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md299,dotrewrite-d299-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md299,dotrewrite-d299-2)
	#call replace(p3.p6,i10+i6/2+i7/2-i8/2,i,i10,i6,i7,i8,Md299,dotrewrite-d299-3)
	#call replace(p5.p6,-i12+i14-i5/2-i8/2+i9/2,i,i12,i14,i5,i8,i9,Md299,dotrewrite-d299-4)
#endif
#break
#endswitch
#break
*--#] d299 : 
*--#[ d302 :
#case Md302
#procedure SimpleDotd302()
if (count(Md302,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p6^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 6)
#case Q7
* path: (0, 6, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 16
* path: (1, 2, 7, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 57
* path: (5, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p7.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p5.p7 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md302,dotrewrite-d302-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md302,dotrewrite-d302-3)
	#call replace(p1.p7,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md302,dotrewrite-d302-4)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-5)
#endif
#break
#case Q4
* path: (0, 5, 3, 4)
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + p3.p + p4.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md302,dotrewrite-d302-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md302,dotrewrite-d302-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md302,dotrewrite-d302-3)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-4)
	#call replace(p3.p6,-`Q2'/2+i11+i14-i5/2+i7/2-i8/2+i9/2,i,i11,i14,i5,i7,i8,i9,Md302,dotrewrite-d302-5)
	#call replace(p4.p6,`Q2'/2+i10-i11-i14+i5/2-i7/2+i8/2-i9/2,i,i10,i11,i14,i5,i7,i8,i9,Md302,dotrewrite-d302-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md302,dotrewrite-d302-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md302,dotrewrite-d302-3)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-4)
	#call replace(p4.p6,`Q2'/2+i10-i11-i14+i5/2-i7/2+i8/2-i9/2,i,i10,i11,i14,i5,i7,i8,i9,Md302,dotrewrite-d302-5)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p7.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-0)
	#call replace(p5.p8,-i11+i13-i14,i,i11,i13,i14,Md302,dotrewrite-d302-1)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md302,dotrewrite-d302-2)
	#call replace(p1.p8,-`Q2'/2-i10+i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md302,dotrewrite-d302-3)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-4)
	#call replace(Q.p8,-i11-i14+i3/2+i5/2+i6/2-i7/2-i9/2,i,i11,i14,i3,i5,i6,i7,i9,Md302,dotrewrite-d302-5)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p2.p5 = i11 - i12;
	if (count(Md302,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md302,dotrewrite-d302-2)
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md302,dotrewrite-d302-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md302,dotrewrite-d302-4)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-5)
	#call replace(p2.p6,-`Q2'/2-i10+i11+i14-i5/2-i6/2+i9/2,i,i10,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-6)
	#call replace(p4.p6,`Q2'/2+i10-i11-i14+i5/2-i7/2+i8/2-i9/2,i,i10,i11,i14,i5,i7,i8,i9,Md302,dotrewrite-d302-7)
#endif
#break
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#case 46
* path: (4, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p4.p5 = i12 - i13;
	if (count(Md302,1)) id p5.p7 = i11 - i13;
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md302,dotrewrite-d302-2)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md302,dotrewrite-d302-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md302,dotrewrite-d302-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md302,dotrewrite-d302-5)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-6)
	#call replace(p4.p6,`Q2'/2+i10-i11-i14+i5/2-i7/2+i8/2-i9/2,i,i10,i11,i14,i5,i7,i8,i9,Md302,dotrewrite-d302-7)
#endif
#break
#case Q8
* path: (0, 1, 3, 8)
#case 18
* path: (1, 3, 8)
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p5} = - p8.p - p7.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md302,dotrewrite-d302-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md302,dotrewrite-d302-2)
	#call replace(p5.p8,-i11+i13-i14,i,i11,i13,i14,Md302,dotrewrite-d302-3)
	#call replace(p1.p8,-`Q2'/2-i10+i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md302,dotrewrite-d302-4)
	#call replace(p3.p8,-i11-i14+i3/2+i5/2+i8/2-i9/2,i,i11,i14,i3,i5,i8,i9,Md302,dotrewrite-d302-5)
	#call replace(Q.p8,-i11-i14+i3/2+i5/2+i6/2-i7/2-i9/2,i,i11,i14,i3,i5,i6,i7,i9,Md302,dotrewrite-d302-6)
#endif
#break
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p5} = - p8.p - p7.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + p3.p + p4.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md302,dotrewrite-d302-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md302,dotrewrite-d302-2)
	#call replace(p5.p8,-i11+i13-i14,i,i11,i13,i14,Md302,dotrewrite-d302-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md302,dotrewrite-d302-4)
	#call replace(p3.p8,-i11-i14+i3/2+i5/2+i8/2-i9/2,i,i11,i14,i3,i5,i8,i9,Md302,dotrewrite-d302-5)
	#call replace(Q.p8,-i11-i14+i3/2+i5/2+i6/2-i7/2-i9/2,i,i11,i14,i3,i5,i6,i7,i9,Md302,dotrewrite-d302-6)
	#call replace(p4.p8,-`Q2'/2-i10+i11+i14+i2/2-i4/2-i5/2-i8/2+i9/2,i,i10,i11,i14,i2,i4,i5,i8,i9,Md302,dotrewrite-d302-7)
#endif
#break
#case Q8
* path: (0, 5, 8)
#case 58
* path: (5, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p7.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p5} = - p7.p - p8.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p5.p7 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md302,dotrewrite-d302-2)
	#call replace(p5.p8,-i11+i13-i14,i,i11,i13,i14,Md302,dotrewrite-d302-3)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md302,dotrewrite-d302-4)
	#call replace(p1.p7,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md302,dotrewrite-d302-5)
	#call replace(p1.p8,-`Q2'/2-i10+i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md302,dotrewrite-d302-6)
	#call replace(Q.p8,-i11-i14+i3/2+i5/2+i6/2-i7/2-i9/2,i,i11,i14,i3,i5,i6,i7,i9,Md302,dotrewrite-d302-7)
#endif
#break
#case 28
* path: (2, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p2.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p5} = - p7.p - p8.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p2.p5 = i11 - i12;
	if (count(Md302,1)) id p5.p7 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md302,dotrewrite-d302-2)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md302,dotrewrite-d302-3)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md302,dotrewrite-d302-4)
	#call replace(p5.p8,-i11+i13-i14,i,i11,i13,i14,Md302,dotrewrite-d302-5)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md302,dotrewrite-d302-6)
	#call replace(Q.p8,-i11-i14+i3/2+i5/2+i6/2-i7/2-i9/2,i,i11,i14,i3,i5,i6,i7,i9,Md302,dotrewrite-d302-7)
	#call replace(p2.p8,`Q2'/2+i10-i11-i14-i2/2+i4/2+i5/2+i6/2-i7/2-i9/2,i,i10,i11,i14,i2,i4,i5,i6,i7,i9,Md302,dotrewrite-d302-8)
#endif
#break
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p5} = - p8.p - p7.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p5.p - p9.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md302,dotrewrite-d302-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md302,dotrewrite-d302-2)
	#call replace(p5.p9,i11+i14-i5,i,i11,i14,i5,Md302,dotrewrite-d302-3)
	#call replace(Q.p9,`Q2'/2+i14-i5/2-i6/2+i9/2,i,i14,i5,i6,i9,Md302,dotrewrite-d302-4)
	#call replace(p1.p9,`Q2'/2+i1/2+i10-i12-i2/2,i,i1,i10,i12,i2,Md302,dotrewrite-d302-5)
	#call replace(p3.p9,i11-i13+i14+i3/2-i5/2-i8/2+i9/2,i,i11,i13,i14,i3,i5,i8,i9,Md302,dotrewrite-d302-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case Q6
* path: (0, 2, 7, 6)
#case Q2
* path: (0, 6, 7, 2)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 26
* path: (2, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p2.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	if (count(Md302,1)) id p2.p5 = i11 - i12;
	if (count(Md302,1)) id p5.p7 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md302,dotrewrite-d302-2)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md302,dotrewrite-d302-3)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md302,dotrewrite-d302-4)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md302,dotrewrite-d302-5)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-6)
	#call replace(p2.p6,-`Q2'/2-i10+i11+i14-i5/2-i6/2+i9/2,i,i10,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-7)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md302,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md302-5;
	if (count(Md302,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md302-4;
	if (count(Md302,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md302-3;
	if (count(Md302,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md302-2;
	if (count(Md302,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p5.p;
	.sort:momrewrite-Md302-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd302()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md302,dotrewrite-d302-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md302,dotrewrite-d302-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md302,dotrewrite-d302-2)
	#call replace(Q.p6,-`Q2'/2+i11+i14-i5/2-i6/2+i9/2,i,i11,i14,i5,i6,i9,Md302,dotrewrite-d302-3)
	#call replace(p3.p6,-`Q2'/2+i11+i14-i5/2+i7/2-i8/2+i9/2,i,i11,i14,i5,i7,i8,i9,Md302,dotrewrite-d302-4)
#endif
#break
#endswitch
#break
*--#] d302 : 
*--#[ d375 :
#case Md375
#procedure SimpleDotd375()
if (count(Md375,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 18
* path: (1, 2, 8)
#case 17
* path: (1, 2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md375,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p8.p;
	.sort:momrewrite-Md375-5;
	if (count(Md375,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md375-4;
	if (count(Md375,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md375-3;
	if (count(Md375,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p8.p;
	.sort:momrewrite-Md375-2;
	if (count(Md375,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p8.p;
	.sort:momrewrite-Md375-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd375()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md375,dotrewrite-d375-0)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md375,dotrewrite-d375-1)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Md375,dotrewrite-d375-2)
	#call replace(p1.p8,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md375,dotrewrite-d375-3)
	#call replace(p5.p8,i12-i3/2-i5/2+i6/2,i,i12,i3,i5,i6,Md375,dotrewrite-d375-4)
#endif
#break
#case 56
* path: (5, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md375,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p8.p;
	.sort:momrewrite-Md375-5;
	if (count(Md375,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md375-4;
	if (count(Md375,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md375-3;
	if (count(Md375,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md375-2;
	if (count(Md375,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md375-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd375()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md375,dotrewrite-d375-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md375,dotrewrite-d375-1)
	#call replace(Q.p6,`Q2'/2-i12+i3/2-i8/2,i,i12,i3,i8,Md375,dotrewrite-d375-2)
	#call replace(p1.p6,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md375,dotrewrite-d375-3)
	#call replace(p6.p7,i10-i14+i7/2+i8/2-i9/2,i,i10,i14,i7,i8,i9,Md375,dotrewrite-d375-4)
#endif
#break
#case Q4
* path: (0, 5, 3, 4)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md375,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md375-5;
	if (count(Md375,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p8.p;
	.sort:momrewrite-Md375-4;
	if (count(Md375,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md375-3;
	if (count(Md375,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md375-2;
	if (count(Md375,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md375-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd375()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md375,dotrewrite-d375-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md375,dotrewrite-d375-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md375,dotrewrite-d375-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md375,dotrewrite-d375-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md375,dotrewrite-d375-4)
	#call replace(p3.p7,i10+i7/2+i8/2-i9/2,i,i10,i7,i8,i9,Md375,dotrewrite-d375-5)
	#call replace(p4.p7,-i10+i11-i7/2-i8/2+i9/2,i,i10,i11,i7,i8,i9,Md375,dotrewrite-d375-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md375,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p8.p;
	.sort:momrewrite-Md375-5;
	if (count(Md375,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md375-4;
	if (count(Md375,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md375-3;
	if (count(Md375,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md375-2;
	if (count(Md375,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md375-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd375()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md375,dotrewrite-d375-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md375,dotrewrite-d375-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md375,dotrewrite-d375-2)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md375,dotrewrite-d375-3)
	#call replace(p4.p7,-i10+i11-i7/2-i8/2+i9/2,i,i10,i11,i7,i8,i9,Md375,dotrewrite-d375-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md375,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p - p8.p;
	.sort:momrewrite-Md375-5;
	if (count(Md375,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md375-4;
	if (count(Md375,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md375-3;
	if (count(Md375,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md375-2;
	if (count(Md375,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md375-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd375()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md375,dotrewrite-d375-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md375,dotrewrite-d375-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md375,dotrewrite-d375-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md375,dotrewrite-d375-3)
	#call replace(p3.p7,i10+i7/2+i8/2-i9/2,i,i10,i7,i8,i9,Md375,dotrewrite-d375-4)
#endif
#break
#endswitch
#break
*--#] d375 : 
*--#[ d231 :
#case Md231
#procedure SimpleDotd231()
if (count(Md231,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p4.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md231,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md231-4;
	if (count(Md231,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md231-3;
	if (count(Md231,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md231-2;
	if (count(Md231,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md231-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd231()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md231,dotrewrite-d231-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md231,dotrewrite-d231-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md231,dotrewrite-d231-2)
	#call replace(p2.p6,i10+i6/2+i7/2-i8/2,i,i10,i6,i7,i8,Md231,dotrewrite-d231-3)
#endif
#break
#case 68
* path: (6, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md231,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p7.p;
	.sort:momrewrite-Md231-4;
	if (count(Md231,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md231-3;
	if (count(Md231,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md231-2;
	if (count(Md231,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p6.p + p8.p;
	.sort:momrewrite-Md231-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd231()
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md231,dotrewrite-d231-0)
	#call replace(Q.p8,-`Q2'/2-i10+i2/2-i7/2,i,i10,i2,i7,Md231,dotrewrite-d231-1)
	#call replace(p1.p8,-i1/2-i14+i3/2-i7/2,i,i1,i14,i3,i7,Md231,dotrewrite-d231-2)
	#call replace(p4.p8,-i11+i2/2+i4/2-i5/2-i9,i,i11,i2,i4,i5,i9,Md231,dotrewrite-d231-3)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md231,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md231-4;
	if (count(Md231,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md231-3;
	if (count(Md231,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p3.p;
	.sort:momrewrite-Md231-2;
	if (count(Md231,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md231-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd231()
	#call replace(p1.p3,-i1/2-i3/2+i7/2,i,i1,i3,i7,Md231,dotrewrite-d231-0)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i7/2,i,i12,i2,i7,Md231,dotrewrite-d231-1)
	#call replace(p3.p6,-i14-i6/2-i7/2+i8/2,i,i14,i6,i7,i8,Md231,dotrewrite-d231-2)
	#call replace(p3.p4,-i13-i2/2-i4/2+i5/2+i9,i,i13,i2,i4,i5,i9,Md231,dotrewrite-d231-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q6
* path: (0, 1, 7, 6)
#case Q4
* path: (0, 4)
#case Q6
* path: (0, 6)
#case Q7
* path: (0, 6, 7)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#case 16
* path: (1, 7, 6)
#case 27
* path: (2, 1, 7)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 47
* path: (4, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md231,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md231-4;
	if (count(Md231,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p7.p;
	.sort:momrewrite-Md231-3;
	if (count(Md231,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md231-2;
	if (count(Md231,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md231-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd231()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md231,dotrewrite-d231-0)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md231,dotrewrite-d231-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md231,dotrewrite-d231-2)
	#call replace(p4.p7,-i2/2-i4/2+i5/2+i9,i,i2,i4,i5,i9,Md231,dotrewrite-d231-3)
#endif
#break
#endswitch
#break
*--#] d231 : 
*--#[ d233 :
#case Md233
#procedure SimpleDotd233()
if (count(Md233,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p4.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md233,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md233-4;
	if (count(Md233,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md233-3;
	if (count(Md233,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md233-2;
	if (count(Md233,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md233-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd233()
	if (count(Md233,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md233,dotrewrite-d233-1)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md233,dotrewrite-d233-2)
	#call replace(Q.p5,`Q2'/2+i3/2-i7/2-i9,i,i3,i7,i9,Md233,dotrewrite-d233-3)
	#call replace(p5.p6,i10-i11+i6/2+i7/2-i8/2,i,i10,i11,i6,i7,i8,Md233,dotrewrite-d233-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 37
* path: (3, 7)
#case 36
* path: (3, 7, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md233,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md233-4;
	if (count(Md233,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md233-3;
	if (count(Md233,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md233-2;
	if (count(Md233,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md233-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd233()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md233,dotrewrite-d233-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md233,dotrewrite-d233-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md233,dotrewrite-d233-2)
	#call replace(p3.p6,i10+i6/2+i7/2-i8/2,i,i10,i6,i7,i8,Md233,dotrewrite-d233-3)
#endif
#break
#endswitch
#break
*--#] d233 : 
*--#[ d193 :
#case Md193
#procedure SimpleDotd193()
if (count(Md193,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p4.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 1, 3, 8)
#case 18
* path: (1, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p8.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md193,dotrewrite-d193-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md193,dotrewrite-d193-2)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md193,dotrewrite-d193-3)
	#call replace(Q.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md193,dotrewrite-d193-4)
	#call replace(p1.p8,i1/2-i4/2-i5/2+i8/2-i9,i,i1,i4,i5,i8,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case 28
* path: (2, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p8.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p7.p - p2.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-1)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md193,dotrewrite-d193-3)
	#call replace(Q.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md193,dotrewrite-d193-4)
	#call replace(p2.p8,-i1/2+i3/2+i4/2+i6/2-i7/2-i8/2+i9,i,i1,i3,i4,i6,i7,i8,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case Q8
* path: (0, 5, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p8.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-0)
	#call replace(p5.p8,i3/2-i5/2-i8/2,i,i3,i5,i8,Md193,dotrewrite-d193-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-2)
	#call replace(Q.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md193,dotrewrite-d193-3)
	#call replace(p4.p8,i1/2-i3/2-i4/2-i9,i,i1,i3,i4,i9,Md193,dotrewrite-d193-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p3.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p7.p - p2.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-2)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-3)
	#call replace(p5.p7,`Q2'/2-i3/2-i6/2+i8/2,i,i3,i6,i8,Md193,dotrewrite-d193-4)
	#call replace(p2.p5,`Q2'/2-i3/2-i6/2+i8/2-i9,i,i3,i6,i8,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case Q6
* path: (0, 2, 7, 6)
#case Q2
* path: (0, 6, 7, 2)
#case 16
* path: (1, 2, 7, 6)
#case 26
* path: (2, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p7.p - p2.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + Q.p + p6.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(Q.p6,-`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-2)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md193,dotrewrite-d193-4)
	#call replace(p2.p6,i1/2-i2/2-i3/2-i6/2+i8/2-i9,i,i1,i2,i3,i6,i8,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case 47
* path: (4, 7)
#case 57
* path: (5, 6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p3.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-1)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-3)
	#call replace(p5.p7,`Q2'/2-i3/2-i6/2+i8/2,i,i3,i6,i8,Md193,dotrewrite-d193-4)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p8.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p8.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-0)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-1)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md193,dotrewrite-d193-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-3)
	#call replace(Q.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md193,dotrewrite-d193-4)
	#call replace(p4.p8,i1/2-i3/2-i4/2-i9,i,i1,i3,i4,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p8.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + Q.p + p6.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p8.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p6,-`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-0)
	#call replace(p6.p8,-i6/2+i7/2-i8/2,i,i6,i7,i8,Md193,dotrewrite-d193-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-2)
	#call replace(Q.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md193,dotrewrite-d193-3)
	#call replace(p4.p8,i1/2-i3/2-i4/2-i9,i,i1,i3,i4,i9,Md193,dotrewrite-d193-4)
	#call replace(p4.p6,-i1/2+i2/2+i3/2-i7/2+i9,i,i1,i2,i3,i7,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case Q6
* path: (0, 6)
#case Q7
* path: (0, 6, 7)
#case 46
* path: (4, 7, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + Q.p + p6.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p - p7.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p6,-`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-1)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md193,dotrewrite-d193-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-4)
	#call replace(p4.p6,-i1/2+i2/2+i3/2-i7/2+i9,i,i1,i2,i3,i7,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p3.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md193,dotrewrite-d193-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-3)
	#call replace(p2.p5,`Q2'/2-i3/2-i6/2+i8/2-i9,i,i3,i6,i8,i9,Md193,dotrewrite-d193-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p2.p + p7.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p3.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md193,dotrewrite-d193-2)
	#call replace(p1.p5,i3/2+i5/2-i8/2+i9,i,i3,i5,i8,i9,Md193,dotrewrite-d193-3)
	#call replace(p1.p7,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md193,dotrewrite-d193-4)
	#call replace(p5.p7,`Q2'/2-i3/2-i6/2+i8/2,i,i3,i6,i8,Md193,dotrewrite-d193-5)
#endif
#break
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p8.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md193,dotrewrite-d193-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md193,dotrewrite-d193-1)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md193,dotrewrite-d193-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-3)
	#call replace(Q.p8,i3/2-i5/2+i6/2-i7/2,i,i3,i5,i6,i7,Md193,dotrewrite-d193-4)
	#call replace(p4.p8,i1/2-i3/2-i4/2-i9,i,i1,i3,i4,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 5, 3, 1)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p5.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md193,dotrewrite-d193-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md193,dotrewrite-d193-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-3)
	#call replace(p3.p5,i3/2+i5/2-i8/2,i,i3,i5,i8,Md193,dotrewrite-d193-4)
	#call replace(p1.p5,i3/2+i5/2-i8/2+i9,i,i3,i5,i8,i9,Md193,dotrewrite-d193-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p3.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md193,dotrewrite-d193-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md193,dotrewrite-d193-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-3)
	#call replace(p1.p5,i3/2+i5/2-i8/2+i9,i,i3,i5,i8,i9,Md193,dotrewrite-d193-4)
#endif
#break
#default
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q4
* path: (0, 5, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md193,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md193-5;
	if (count(Md193,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md193-4;
	if (count(Md193,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - Q.p;
	.sort:momrewrite-Md193-3;
	if (count(Md193,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md193-2;
	if (count(Md193,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p5.p;
	.sort:momrewrite-Md193-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd193()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md193,dotrewrite-d193-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md193,dotrewrite-d193-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i6/2,i,i5,i6,Md193,dotrewrite-d193-2)
	#call replace(p3.p5,i3/2+i5/2-i8/2,i,i3,i5,i8,Md193,dotrewrite-d193-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md193,dotrewrite-d193-4)
#endif
#break
#endswitch
#break
*--#] d193 : 
*--#[ d248 :
#case Md248
#procedure SimpleDotd248()
if (count(Md248,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p - p8.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md248,dotrewrite-d248-0)
	#call replace(Q.p8,`Q2'+i10-i9,i,i10,i9,Md248,dotrewrite-d248-1)
	#call replace(p1.p8,i12-i13+i14,i,i12,i13,i14,Md248,dotrewrite-d248-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md248,dotrewrite-d248-3)
	#call replace(p4.p8,`Q2'/2+i10-i4/2+i5/2-i8/2,i,i10,i4,i5,i8,Md248,dotrewrite-d248-4)
	#call replace(p2.p8,`Q2'/2+i10-i11+i2/2+i5/2-i7/2,i,i10,i11,i2,i5,i7,Md248,dotrewrite-d248-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p + p5.p + p7.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + Q.p + p5.p - p8.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md248,dotrewrite-d248-0)
	#call replace(Q.p8,`Q2'+i10-i9,i,i10,i9,Md248,dotrewrite-d248-1)
	#call replace(p1.p8,i12-i13+i14,i,i12,i13,i14,Md248,dotrewrite-d248-2)
	#call replace(Q.p7,-`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md248,dotrewrite-d248-3)
	#call replace(p1.p7,-i1/2-i14+i3/2-i6/2,i,i1,i14,i3,i6,Md248,dotrewrite-d248-4)
	#call replace(p5.p8,-`Q2'/2-i4/2+i5/2+i8/2+i9,i,i4,i5,i8,i9,Md248,dotrewrite-d248-5)
	#call replace(p7.p8,-i11+i2/2+i4/2-i7/2-i8/2,i,i11,i2,i4,i7,i8,Md248,dotrewrite-d248-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case Q5
* path: (0, 1, 6, 5)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case 11
* path: (1,)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 26
* path: (2, 1, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	if (count(Md248,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md248,dotrewrite-d248-1)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md248,dotrewrite-d248-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md248,dotrewrite-d248-3)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md248,dotrewrite-d248-4)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p2.p - p7.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p - p7.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	if (count(Md248,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md248,dotrewrite-d248-1)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md248,dotrewrite-d248-2)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md248,dotrewrite-d248-3)
	#call replace(Q.p7,-`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md248,dotrewrite-d248-4)
	#call replace(p1.p7,-i1/2-i14+i3/2-i6/2,i,i1,i14,i3,i6,Md248,dotrewrite-d248-5)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md248,dotrewrite-d248-6)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p3.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md248,dotrewrite-d248-0)
	#call replace(p3.p4,-i11-i13+i9,i,i11,i13,i9,Md248,dotrewrite-d248-1)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i6/2,i,i12,i2,i6,Md248,dotrewrite-d248-2)
	#call replace(p3.p5,-i14-i5/2-i6/2+i7/2,i,i14,i5,i6,i7,Md248,dotrewrite-d248-3)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md248,dotrewrite-d248-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p4.p - p7.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md248,dotrewrite-d248-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md248,dotrewrite-d248-1)
	#call replace(Q.p7,-`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md248,dotrewrite-d248-2)
	#call replace(p1.p7,-i1/2-i14+i3/2-i6/2,i,i1,i14,i3,i6,Md248,dotrewrite-d248-3)
	#call replace(p2.p7,-`Q2'/2-i10+i2/2-i5/2+i7/2,i,i10,i2,i5,i7,Md248,dotrewrite-d248-4)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md248,dotrewrite-d248-5)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md248,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md248-4;
	if (count(Md248,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md248-3;
	if (count(Md248,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md248-2;
	if (count(Md248,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md248-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd248()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md248,dotrewrite-d248-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md248,dotrewrite-d248-1)
	#call replace(p2.p5,i10+i5/2+i6/2-i7/2,i,i10,i5,i6,i7,Md248,dotrewrite-d248-2)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md248,dotrewrite-d248-3)
#endif
#break
#endswitch
#break
*--#] d248 : 
*--#[ d258 :
#case Md258
#procedure SimpleDotd258()
if (count(Md258,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p - p8.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md258,dotrewrite-d258-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md258,dotrewrite-d258-1)
	#call replace(Q.p8,`Q2'+i10-i9,i,i10,i9,Md258,dotrewrite-d258-2)
	#call replace(p1.p8,i12-i13+i14,i,i12,i13,i14,Md258,dotrewrite-d258-3)
	#call replace(p4.p8,`Q2'/2+i10-i4/2+i5/2-i8/2,i,i10,i4,i5,i8,Md258,dotrewrite-d258-4)
	#call replace(p2.p8,`Q2'/2+i10-i11+i2/2+i5/2-i7/2,i,i10,i11,i2,i5,i7,Md258,dotrewrite-d258-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p3.p + p1.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p - p6.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + Q.p + p5.p - p8.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md258,dotrewrite-d258-0)
	#call replace(Q.p8,`Q2'+i10-i9,i,i10,i9,Md258,dotrewrite-d258-1)
	#call replace(p1.p8,i12-i13+i14,i,i12,i13,i14,Md258,dotrewrite-d258-2)
	#call replace(Q.p7,-`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md258,dotrewrite-d258-3)
	#call replace(p1.p7,i1/2-i12-i14+i2/2-i3/2,i,i1,i12,i14,i2,i3,Md258,dotrewrite-d258-4)
	#call replace(p5.p8,-`Q2'/2-i4/2+i5/2+i8/2+i9,i,i4,i5,i8,i9,Md258,dotrewrite-d258-5)
	#call replace(p7.p8,-i11+i2/2+i4/2-i7/2-i8/2,i,i11,i2,i4,i7,i8,Md258,dotrewrite-d258-6)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 46
* path: (4, 5, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	if (count(Md258,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md258,dotrewrite-d258-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md258,dotrewrite-d258-2)
	#call replace(p1.p6,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md258,dotrewrite-d258-3)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md258,dotrewrite-d258-4)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case Q7
* path: (0, 6, 7)
#case 47
* path: (4, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p2.p - p7.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p - p7.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	if (count(Md258,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md258,dotrewrite-d258-1)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md258,dotrewrite-d258-2)
	#call replace(p1.p6,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md258,dotrewrite-d258-3)
	#call replace(Q.p7,-`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md258,dotrewrite-d258-4)
	#call replace(p1.p7,i1/2-i12-i14+i2/2-i3/2,i,i1,i12,i14,i2,i3,Md258,dotrewrite-d258-5)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md258,dotrewrite-d258-6)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p3.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	if (count(Md258,1)) id p3.p4 = i11 - i13;
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md258,dotrewrite-d258-1)
	#call replace(Q.p3,`Q2'/2-i12+i2/2-i6/2,i,i12,i2,i6,Md258,dotrewrite-d258-2)
	#call replace(p3.p5,i10-i14+i5/2+i6/2-i7/2,i,i10,i14,i5,i6,i7,Md258,dotrewrite-d258-3)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md258,dotrewrite-d258-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p4.p - p7.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md258,dotrewrite-d258-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md258,dotrewrite-d258-1)
	#call replace(Q.p7,-`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md258,dotrewrite-d258-2)
	#call replace(p1.p7,i1/2-i12-i14+i2/2-i3/2,i,i1,i12,i14,i2,i3,Md258,dotrewrite-d258-3)
	#call replace(p2.p7,-`Q2'/2-i10+i2/2-i5/2+i7/2,i,i10,i2,i5,i7,Md258,dotrewrite-d258-4)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md258,dotrewrite-d258-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md258,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md258-4;
	if (count(Md258,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md258-3;
	if (count(Md258,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md258-2;
	if (count(Md258,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md258-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd258()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md258,dotrewrite-d258-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md258,dotrewrite-d258-1)
	#call replace(p2.p5,i10+i5/2+i6/2-i7/2,i,i10,i5,i6,i7,Md258,dotrewrite-d258-2)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md258,dotrewrite-d258-3)
#endif
#break
#endswitch
#break
*--#] d258 : 
*--#[ d241 :
#case Md241
#procedure SimpleDotd241()
if (count(Md241,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p3.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md241,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md241-4;
	if (count(Md241,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md241-3;
	if (count(Md241,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md241-2;
	if (count(Md241,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p - p8.p;
	.sort:momrewrite-Md241-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd241()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md241,dotrewrite-d241-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md241,dotrewrite-d241-1)
	#call replace(Q.p8,`Q2'+i10-i9,i,i10,i9,Md241,dotrewrite-d241-2)
	#call replace(p1.p8,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md241,dotrewrite-d241-3)
	#call replace(p4.p8,`Q2'/2+i10-i4/2+i5/2-i8/2,i,i10,i4,i5,i8,Md241,dotrewrite-d241-4)
	#call replace(p3.p8,`Q2'/2+i10-i11+i3/2+i5/2-i7/2,i,i10,i11,i3,i5,i7,Md241,dotrewrite-d241-5)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case Q7
* path: (0, 4, 7)
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md241,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p7.p - p6.p;
	.sort:momrewrite-Md241-4;
	if (count(Md241,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md241-3;
	if (count(Md241,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md241-2;
	if (count(Md241,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p4.p - p7.p;
	.sort:momrewrite-Md241-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd241()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md241,dotrewrite-d241-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md241,dotrewrite-d241-1)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2,i,i10,i3,i6,Md241,dotrewrite-d241-2)
	#call replace(p1.p7,-`Q2'/2-i1/2+i12-i14+i2/2,i,i1,i12,i14,i2,Md241,dotrewrite-d241-3)
	#call replace(p3.p7,-`Q2'/2-i10+i3/2-i5/2+i7/2,i,i10,i3,i5,i7,Md241,dotrewrite-d241-4)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md241,dotrewrite-d241-5)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md241,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p3.p - p7.p;
	.sort:momrewrite-Md241-4;
	if (count(Md241,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md241-3;
	if (count(Md241,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md241-2;
	if (count(Md241,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p - p7.p;
	.sort:momrewrite-Md241-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd241()
	if (count(Md241,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md241,dotrewrite-d241-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md241,dotrewrite-d241-2)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md241,dotrewrite-d241-3)
	#call replace(p1.p6,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md241,dotrewrite-d241-4)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2,i,i10,i3,i6,Md241,dotrewrite-d241-5)
	#call replace(p1.p7,-`Q2'/2-i1/2+i12-i14+i2/2,i,i1,i12,i14,i2,Md241,dotrewrite-d241-6)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md241,dotrewrite-d241-7)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q5
* path: (0, 1, 6, 5)
#case Q6
* path: (0, 5, 6)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md241,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md241-4;
	if (count(Md241,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md241-3;
	if (count(Md241,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md241-2;
	if (count(Md241,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md241-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd241()
	if (count(Md241,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md241,dotrewrite-d241-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md241,dotrewrite-d241-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md241,dotrewrite-d241-3)
	#call replace(p1.p6,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md241,dotrewrite-d241-4)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md241,dotrewrite-d241-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md241,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md241-4;
	if (count(Md241,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md241-3;
	if (count(Md241,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p + p5.p + p7.p;
	.sort:momrewrite-Md241-2;
	if (count(Md241,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md241-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd241()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md241,dotrewrite-d241-0)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md241,dotrewrite-d241-1)
	#call replace(Q.p7,-`Q2'/2-i10+i3/2-i6/2,i,i10,i3,i6,Md241,dotrewrite-d241-2)
	#call replace(p1.p7,-`Q2'/2-i1/2+i12-i14+i2/2,i,i1,i12,i14,i2,Md241,dotrewrite-d241-3)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md241,dotrewrite-d241-4)
	#call replace(p4.p7,-`Q2'/2-i10+i11-i4/2-i5/2+i8/2,i,i10,i11,i4,i5,i8,Md241,dotrewrite-d241-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md241,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md241-4;
	if (count(Md241,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md241-3;
	if (count(Md241,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md241-2;
	if (count(Md241,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p4.p;
	.sort:momrewrite-Md241-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd241()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md241,dotrewrite-d241-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md241,dotrewrite-d241-1)
	#call replace(p3.p5,i10+i5/2+i6/2-i7/2,i,i10,i5,i6,i7,Md241,dotrewrite-d241-2)
	#call replace(p4.p5,`Q2'/2+i10+i4/2+i5/2-i8/2-i9,i,i10,i4,i5,i8,i9,Md241,dotrewrite-d241-3)
#endif
#break
#endswitch
#break
*--#] d241 : 
*--#[ d225 :
#case Md225
#procedure SimpleDotd225()
if (count(Md225,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p8^n? = i9^n;
	id p1.p8^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p6.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p + p6.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p4.p5 = i12 - i13;
	if (count(Md225,1)) id p5.p6 = -i11 + i13;
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-2)
	#call replace(p4.p6,i2/2-i4/2-i6/2,i,i2,i4,i6,Md225,dotrewrite-d225-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md225,dotrewrite-d225-4)
	#call replace(p4.p8,i10+i13-i14-i3/2-i5/2+i7/2-i8/2,i,i10,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-5)
	#call replace(p6.p8,-i13+i14+i3/2+i5/2-i7/2+i8/2-i9,i,i13,i14,i3,i5,i7,i8,i9,Md225,dotrewrite-d225-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p2.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md225,dotrewrite-d225-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md225,dotrewrite-d225-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md225,dotrewrite-d225-3)
	#call replace(p4.p8,i10+i13-i14-i3/2-i5/2+i7/2-i8/2,i,i10,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-4)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p2.p5 = i11 - i12;
	if (count(Md225,1)) id p2.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md225,dotrewrite-d225-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-3)
	#call replace(p2.p3,`Q2'/2-i1/2+i4/2-i6/2,i,i1,i4,i6,Md225,dotrewrite-d225-4)
	#call replace(p3.p8,-i13+i14+i3/2+i5/2-i7/2+i8/2,i,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-5)
#endif
#break
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p8} = + p3.p + p4.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md225,dotrewrite-d225-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md225,dotrewrite-d225-3)
	#call replace(p3.p8,-i13+i14+i3/2+i5/2-i7/2+i8/2,i,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-4)
	#call replace(p4.p8,i10+i13-i14-i3/2-i5/2+i7/2-i8/2,i,i10,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-5)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p2.p5 = i11 - i12;
	if (count(Md225,1)) id p4.p5 = i12 - i13;
	if (count(Md225,1)) id p2.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md225,dotrewrite-d225-3)
	#call replace(p2.p4,-i2/2-i4/2+i6/2,i,i2,i4,i6,Md225,dotrewrite-d225-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md225,dotrewrite-d225-5)
	#call replace(p4.p8,i10+i13-i14-i3/2-i5/2+i7/2-i8/2,i,i10,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-6)
#endif
#break
#case Q6
* path: (0, 6)
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p + p6.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p5.p6 = -i11 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md225,dotrewrite-d225-1)
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-2)
	#call replace(p1.p6,-`Q2'/2+i2/2+i3/2-i4/2,i,i2,i3,i4,Md225,dotrewrite-d225-3)
	#call replace(p6.p8,-i13+i14+i3/2+i5/2-i7/2+i8/2-i9,i,i13,i14,i3,i5,i7,i8,i9,Md225,dotrewrite-d225-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q2
* path: (0, 6, 2)
#case 26
* path: (2, 6)
#case 25
* path: (2, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p8} = + Q.p - p2.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p + p6.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	if (count(Md225,1)) id p2.p5 = i11 - i12;
	if (count(Md225,1)) id p5.p6 = -i11 + i13;
	if (count(Md225,1)) id p2.p8 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md225,dotrewrite-d225-3)
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-4)
	#call replace(p2.p6,-i2/2+i4/2-i6/2,i,i2,i4,i6,Md225,dotrewrite-d225-5)
	#call replace(p6.p8,-i13+i14+i3/2+i5/2-i7/2+i8/2-i9,i,i13,i14,i3,i5,i7,i8,i9,Md225,dotrewrite-d225-6)
#endif
#break
#case 57
* path: (5, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p8.p?!{p8,[P+p8],[P-p8],Q,p1,p5} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md225,dotrewrite-d225-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md225,dotrewrite-d225-2)
	#call replace(p5.p7,i13-i14-i5,i,i13,i14,i5,Md225,dotrewrite-d225-3)
	#call replace(Q.p7,`Q2'/2-i11+i3/2-i6/2-i9,i,i11,i3,i6,i9,Md225,dotrewrite-d225-4)
	#call replace(p1.p7,i1/2-i10-i12+i3/2-i4/2,i,i1,i10,i12,i3,i4,Md225,dotrewrite-d225-5)
	#call replace(p3.p7,-i14+i3/2-i5/2+i7/2-i8/2,i,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md225,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md225-4;
	if (count(Md225,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md225-3;
	if (count(Md225,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md225-2;
	if (count(Md225,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md225-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd225()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md225,dotrewrite-d225-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md225,dotrewrite-d225-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md225,dotrewrite-d225-2)
	#call replace(p3.p8,-i13+i14+i3/2+i5/2-i7/2+i8/2,i,i13,i14,i3,i5,i7,i8,Md225,dotrewrite-d225-3)
#endif
#break
#endswitch
#break
*--#] d225 : 
*--#[ d289 :
#case Md289
#procedure SimpleDotd289()
if (count(Md289,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p1.p8^n? = i9^n;
	id p3.p8^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p8^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md289,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p2.p;
	.sort:momrewrite-Md289-4;
	if (count(Md289,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md289-3;
	if (count(Md289,1)) id p3.p?!{p3,[P+p3],[P-p3],p5,p8} = + p1.p - p4.p;
	.sort:momrewrite-Md289-2;
	if (count(Md289,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md289-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd289()
	if (count(Md289,1)) id p4.p5 = i12 - i13;
	if (count(Md289,1)) id p4.p8 = -i10 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md289,dotrewrite-d289-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md289,dotrewrite-d289-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md289,dotrewrite-d289-4)
	#call replace(Q.p8,`Q2'/2-i11+i14+i5/2-i6/2+i8/2,i,i11,i14,i5,i6,i8,Md289,dotrewrite-d289-5)
#endif
#break
#case Q4
* path: (0, 5, 3, 4)
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md289,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md289-4;
	if (count(Md289,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p8} = + p3.p + p4.p;
	.sort:momrewrite-Md289-3;
	if (count(Md289,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md289-2;
	if (count(Md289,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md289-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd289()
	if (count(Md289,1)) id p4.p5 = i12 - i13;
	if (count(Md289,1)) id p4.p8 = -i10 + i9;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md289,dotrewrite-d289-2)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md289,dotrewrite-d289-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md289,dotrewrite-d289-4)
	#call replace(Q.p8,`Q2'/2-i11+i14+i5/2-i6/2+i8/2,i,i11,i14,i5,i6,i8,Md289,dotrewrite-d289-5)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md289,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md289-4;
	if (count(Md289,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md289-3;
	if (count(Md289,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md289-2;
	if (count(Md289,1)) id p8.p?!{p8,[P+p8],[P-p8],p1,p3,p5} = + Q.p - p5.p - p6.p;
	.sort:momrewrite-Md289-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd289()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md289,dotrewrite-d289-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md289,dotrewrite-d289-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md289,dotrewrite-d289-2)
	#call replace(p5.p6,i11-i14-i5,i,i11,i14,i5,Md289,dotrewrite-d289-3)
	#call replace(Q.p6,`Q2'/2-i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md289,dotrewrite-d289-4)
	#call replace(p1.p6,`Q2'/2+i1/2-i12-i2/2-i9,i,i1,i12,i2,i9,Md289,dotrewrite-d289-5)
	#call replace(p3.p6,`Q2'/2-i10-i13+i3/2-i7/2,i,i10,i13,i3,i7,Md289,dotrewrite-d289-6)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md289,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p7.p;
	.sort:momrewrite-Md289-4;
	if (count(Md289,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md289-3;
	if (count(Md289,1)) id p3.p?!{p3,[P+p3],[P-p3],p5,p8} = + Q.p + p7.p;
	.sort:momrewrite-Md289-2;
	if (count(Md289,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md289-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd289()
	if (count(Md289,1)) id p5.p7 = -i11 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md289,dotrewrite-d289-1)
	#call replace(Q.p7,-`Q2'/2+i3/2-i7/2,i,i3,i7,Md289,dotrewrite-d289-2)
	#call replace(p1.p7,-`Q2'/2+i2/2+i3/2-i4/2,i,i2,i3,i4,Md289,dotrewrite-d289-3)
	#call replace(Q.p8,`Q2'/2-i11+i14+i5/2-i6/2+i8/2,i,i11,i14,i5,i6,i8,Md289,dotrewrite-d289-4)
	#call replace(p7.p8,-`Q2'/2+i10+i11-i14-i5/2+i6/2-i8/2,i,i10,i11,i14,i5,i6,i8,Md289,dotrewrite-d289-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md289,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md289-4;
	if (count(Md289,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md289-3;
	if (count(Md289,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md289-2;
	if (count(Md289,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md289-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd289()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md289,dotrewrite-d289-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md289,dotrewrite-d289-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md289,dotrewrite-d289-2)
	#call replace(Q.p8,`Q2'/2-i11+i14+i5/2-i6/2+i8/2,i,i11,i14,i5,i6,i8,Md289,dotrewrite-d289-3)
#endif
#break
#endswitch
#break
*--#] d289 : 
*--#[ d150 :
#case Md150
#procedure SimpleDotd150()
if (count(Md150,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p5^n? = i8^n;
	id p3.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md150,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md150-4;
	if (count(Md150,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md150-3;
	if (count(Md150,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p + p6.p;
	.sort:momrewrite-Md150-2;
	if (count(Md150,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md150-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd150()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md150,dotrewrite-d150-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md150,dotrewrite-d150-1)
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md150,dotrewrite-d150-2)
	#call replace(p1.p6,-`Q2'/2+i2/2+i3/2-i4/2,i,i2,i3,i4,Md150,dotrewrite-d150-3)
	#call replace(p5.p6,-`Q2'/2-i5/2+i7/2+i9,i,i5,i7,i9,Md150,dotrewrite-d150-4)
#endif
#break
#case Q4
* path: (0, 5, 3, 4)
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md150,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md150-4;
	if (count(Md150,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md150-3;
	if (count(Md150,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md150-2;
	if (count(Md150,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md150-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd150()
	if (count(Md150,1)) id p4.p5 = i8 - i9;
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md150,dotrewrite-d150-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md150,dotrewrite-d150-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md150,dotrewrite-d150-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md150,dotrewrite-d150-4)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md150,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md150-4;
	if (count(Md150,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md150-3;
	if (count(Md150,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + Q.p - p7.p;
	.sort:momrewrite-Md150-2;
	if (count(Md150,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md150-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd150()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md150,dotrewrite-d150-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md150,dotrewrite-d150-1)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md150,dotrewrite-d150-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md150,dotrewrite-d150-3)
	#call replace(p3.p7,`Q2'/2+i3/2-i6/2-i9,i,i3,i6,i9,Md150,dotrewrite-d150-4)
	#call replace(p4.p7,i1/2-i2/2-i3/2+i6/2-i8+i9,i,i1,i2,i3,i6,i8,i9,Md150,dotrewrite-d150-5)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case Q7
* path: (0, 7)
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md150,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md150-4;
	if (count(Md150,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md150-3;
	if (count(Md150,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + Q.p - p7.p;
	.sort:momrewrite-Md150-2;
	if (count(Md150,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md150-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd150()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md150,dotrewrite-d150-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md150,dotrewrite-d150-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md150,dotrewrite-d150-2)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md150,dotrewrite-d150-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i2/2-i8,i,i1,i2,i8,Md150,dotrewrite-d150-4)
	#call replace(p3.p7,`Q2'/2+i3/2-i6/2-i9,i,i3,i6,i9,Md150,dotrewrite-d150-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md150,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p2.p;
	.sort:momrewrite-Md150-4;
	if (count(Md150,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md150-3;
	if (count(Md150,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md150-2;
	if (count(Md150,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md150-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd150()
	if (count(Md150,1)) id p4.p5 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md150,dotrewrite-d150-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md150,dotrewrite-d150-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md150,dotrewrite-d150-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md150,dotrewrite-d150-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 57
* path: (5, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md150,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md150-4;
	if (count(Md150,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md150-3;
	if (count(Md150,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md150-2;
	if (count(Md150,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md150-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd150()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md150,dotrewrite-d150-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md150,dotrewrite-d150-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md150,dotrewrite-d150-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md150,dotrewrite-d150-3)
#endif
#break
#endswitch
#break
*--#] d150 : 
*--#[ d152 :
#case Md152
#procedure SimpleDotd152()
if (count(Md152,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md152,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p3.p;
	.sort:momrewrite-Md152-3;
	if (count(Md152,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md152-2;
	if (count(Md152,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md152-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd152()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md152,dotrewrite-d152-0)
	#call replace(p3.p4,-i10-i13+i8,i,i10,i13,i8,Md152,dotrewrite-d152-1)
	#call replace(p3.p5,-i11-i14+i9,i,i11,i14,i9,Md152,dotrewrite-d152-2)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i6/2,i,i12,i2,i6,Md152,dotrewrite-d152-3)
	#call replace(p4.p5,-`Q2'/2-i4/2-i5/2+i7/2+i8+i9,i,i4,i5,i7,i8,i9,Md152,dotrewrite-d152-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q6
* path: (0, 4, 6)
#case 16
* path: (1, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md152,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p6.p;
	.sort:momrewrite-Md152-3;
	if (count(Md152,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p6.p;
	.sort:momrewrite-Md152-2;
	if (count(Md152,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md152-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd152()
	if (count(Md152,1)) id p4.p6 = i10 - i8;
	if (count(Md152,1)) id p5.p6 = i11 - i9;
	#call replace(Q.p6,-`Q2'/2+i2/2-i6/2,i,i2,i6,Md152,dotrewrite-d152-2)
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md152,dotrewrite-d152-3)
	#call replace(p4.p5,-`Q2'/2-i4/2-i5/2+i7/2+i8+i9,i,i4,i5,i7,i8,i9,Md152,dotrewrite-d152-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md152,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p;
	.sort:momrewrite-Md152-3;
	if (count(Md152,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md152-2;
	if (count(Md152,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md152-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd152()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md152,dotrewrite-d152-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md152,dotrewrite-d152-1)
	#call replace(p4.p5,-`Q2'/2-i4/2-i5/2+i7/2+i8+i9,i,i4,i5,i7,i8,i9,Md152,dotrewrite-d152-2)
#endif
#break
#endswitch
#break
*--#] d152 : 
*--#[ d151 :
#case Md151
#procedure SimpleDotd151()
if (count(Md151,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p3.p4^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md151,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md151-3;
	if (count(Md151,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md151-2;
	if (count(Md151,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md151-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd151()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md151,dotrewrite-d151-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md151,dotrewrite-d151-1)
	#call replace(p4.p5,-`Q2'/2-i4/2-i5/2+i7/2+i8+i9,i,i4,i5,i7,i8,i9,Md151,dotrewrite-d151-2)
#endif
#break
#endswitch
#break
*--#] d151 : 
*--#[ d56 :
#case Md56
#procedure SimpleDotd56()
if (count(Md56,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p2.p4^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md56,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p + p5.p;
	.sort:momrewrite-Md56-3;
	if (count(Md56,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md56-2;
	if (count(Md56,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md56-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd56()
	if (count(Md56,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md56,dotrewrite-d56-1)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md56,dotrewrite-d56-2)
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md56,dotrewrite-d56-3)
	#call replace(p5.p6,i2/2+i4/2-i5/2-i6/2-i7,i,i2,i4,i5,i6,i7,Md56,dotrewrite-d56-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md56,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + Q.p - p6.p;
	.sort:momrewrite-Md56-3;
	if (count(Md56,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md56-2;
	if (count(Md56,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md56-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd56()
	if (count(Md56,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md56,dotrewrite-d56-1)
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md56,dotrewrite-d56-2)
	#call replace(p1.p2,-i1/2+i3/2-i5/2+i8,i,i1,i3,i5,i8,Md56,dotrewrite-d56-3)
	#call replace(p2.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md56,dotrewrite-d56-4)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md56,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p3.p;
	.sort:momrewrite-Md56-3;
	if (count(Md56,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md56-2;
	if (count(Md56,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md56-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd56()
	#call replace(p1.p3,-i1/2-i3/2+i5/2,i,i1,i3,i5,Md56,dotrewrite-d56-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md56,dotrewrite-d56-1)
	#call replace(Q.p3,`Q2'/2-i2/2+i5/2-i8,i,i2,i5,i8,Md56,dotrewrite-d56-2)
	#call replace(p3.p4,`Q2'/2+i4/2-i6/2-i7-i9,i,i4,i6,i7,i9,Md56,dotrewrite-d56-3)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 4, 5)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md56,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p + p5.p;
	.sort:momrewrite-Md56-3;
	if (count(Md56,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md56-2;
	if (count(Md56,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md56-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd56()
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md56,dotrewrite-d56-0)
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md56,dotrewrite-d56-1)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md56,dotrewrite-d56-2)
	#call replace(p4.p5,-`Q2'/2-i4/2+i6/2+i7,i,i4,i6,i7,Md56,dotrewrite-d56-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#case 44
* path: (4,)
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md56,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md56-3;
	if (count(Md56,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md56-2;
	if (count(Md56,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md56-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd56()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md56,dotrewrite-d56-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md56,dotrewrite-d56-1)
	#call replace(p1.p2,-i1/2+i3/2-i5/2+i8,i,i1,i3,i5,i8,Md56,dotrewrite-d56-2)
#endif
#break
#endswitch
#break
*--#] d56 : 
*--#[ d105 :
#case Md105
#procedure SimpleDotd105()
if (count(Md105,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p3.p4^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md105,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md105-3;
	if (count(Md105,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p6.p;
	.sort:momrewrite-Md105-2;
	if (count(Md105,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md105-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd105()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md105,dotrewrite-d105-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md105,dotrewrite-d105-1)
	#call replace(Q.p6,`Q2'/2-i4/2+i6/2,i,i4,i6,Md105,dotrewrite-d105-2)
	#call replace(p1.p6,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md105,dotrewrite-d105-3)
	#call replace(p3.p6,`Q2'/2+i3/2-i5/2-i7,i,i3,i5,i7,Md105,dotrewrite-d105-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 35
* path: (3, 1, 5)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md105,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md105-3;
	if (count(Md105,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md105-2;
	if (count(Md105,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p4.p;
	.sort:momrewrite-Md105-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd105()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md105,dotrewrite-d105-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md105,dotrewrite-d105-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md105,dotrewrite-d105-2)
#endif
#break
#endswitch
#break
*--#] d105 : 
*--#[ d116 :
#case Md116
#procedure SimpleDotd116()
if (count(Md116,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p1.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p4.p - p6.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p6.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-0)
	#call replace(p4.p6,i2/2-i4/2-i6/2,i,i2,i4,i6,Md116,dotrewrite-d116-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md116,dotrewrite-d116-2)
	#call replace(p4.p5,-i3/2-i5/2+i7/2+i9,i,i3,i5,i7,i9,Md116,dotrewrite-d116-3)
	#call replace(p5.p6,i3/2+i5/2-i7/2-i8,i,i3,i5,i7,i8,Md116,dotrewrite-d116-4)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md116,dotrewrite-d116-1)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md116,dotrewrite-d116-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md116,dotrewrite-d116-3)
	#call replace(Q.p7,`Q2'/2+i3/2-i6/2-i8,i,i3,i6,i8,Md116,dotrewrite-d116-4)
	#call replace(p4.p7,i1/2-i4/2+i5/2-i7/2-i9,i,i1,i4,i5,i7,i9,Md116,dotrewrite-d116-5)
#endif
#break
#case 27
* path: (2, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p6.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md116,dotrewrite-d116-0)
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-1)
	#call replace(p2.p6,-i2/2+i4/2-i6/2,i,i2,i4,i6,Md116,dotrewrite-d116-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i6/2-i8,i,i3,i6,i8,Md116,dotrewrite-d116-3)
	#call replace(p6.p7,-`Q2'/2-i5/2+i6/2+i7/2+i8,i,i5,i6,i7,i8,Md116,dotrewrite-d116-4)
	#call replace(p2.p7,`Q2'/2-i1/2+i4/2-i6/2-i8+i9,i,i1,i4,i6,i8,i9,Md116,dotrewrite-d116-5)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p6.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md116,dotrewrite-d116-0)
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-1)
	#call replace(p1.p6,-`Q2'/2+i2/2+i3/2-i4/2,i,i2,i3,i4,Md116,dotrewrite-d116-2)
	#call replace(Q.p7,`Q2'/2+i3/2-i6/2-i8,i,i3,i6,i8,Md116,dotrewrite-d116-3)
	#call replace(p1.p7,i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md116,dotrewrite-d116-4)
	#call replace(p6.p7,-`Q2'/2-i5/2+i6/2+i7/2+i8,i,i5,i6,i7,i8,Md116,dotrewrite-d116-5)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md116,dotrewrite-d116-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md116,dotrewrite-d116-2)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md116,dotrewrite-d116-3)
	#call replace(Q.p7,`Q2'/2+i3/2-i6/2-i8,i,i3,i6,i8,Md116,dotrewrite-d116-4)
	#call replace(p1.p7,i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md116,dotrewrite-d116-5)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p4.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	if (count(Md116,1)) id p2.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md116,dotrewrite-d116-1)
	#call replace(p2.p4,-i2/2-i4/2+i6/2,i,i2,i4,i6,Md116,dotrewrite-d116-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md116,dotrewrite-d116-3)
	#call replace(p4.p5,-i3/2-i5/2+i7/2+i9,i,i3,i5,i7,i9,Md116,dotrewrite-d116-4)
#endif
#break
#case Q7
* path: (0, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p2.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p7.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md116,dotrewrite-d116-0)
	#call replace(p5.p7,i3/2-i5/2-i7/2,i,i3,i5,i7,Md116,dotrewrite-d116-1)
	#call replace(Q.p7,`Q2'/2+i3/2-i6/2-i8,i,i3,i6,i8,Md116,dotrewrite-d116-2)
	#call replace(p1.p7,i1/2+i3/2-i4/2-i9,i,i1,i3,i4,i9,Md116,dotrewrite-d116-3)
#endif
#break
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md116,dotrewrite-d116-1)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md116,dotrewrite-d116-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md116,dotrewrite-d116-3)
	#call replace(p4.p5,-i3/2-i5/2+i7/2+i9,i,i3,i5,i7,i9,Md116,dotrewrite-d116-4)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	if (count(Md116,1)) id p2.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md116,dotrewrite-d116-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-2)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md116,dotrewrite-d116-3)
	#call replace(p2.p3,`Q2'/2-i1/2+i4/2-i6/2,i,i1,i4,i6,Md116,dotrewrite-d116-4)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 25
* path: (2, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p + p6.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p6.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	if (count(Md116,1)) id p2.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md116,dotrewrite-d116-1)
	#call replace(Q.p6,-`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-2)
	#call replace(p2.p6,-i2/2+i4/2-i6/2,i,i2,i4,i6,Md116,dotrewrite-d116-3)
	#call replace(p5.p6,i3/2+i5/2-i7/2-i8,i,i3,i5,i7,i8,Md116,dotrewrite-d116-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p2.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p3.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md116,dotrewrite-d116-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md116,dotrewrite-d116-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i6/2,i,i1,i2,i3,i6,Md116,dotrewrite-d116-2)
	#call replace(p4.p5,-i3/2-i5/2+i7/2+i9,i,i3,i5,i7,i9,Md116,dotrewrite-d116-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md116,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md116-4;
	if (count(Md116,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md116-3;
	if (count(Md116,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - Q.p;
	.sort:momrewrite-Md116-2;
	if (count(Md116,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p;
	.sort:momrewrite-Md116-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd116()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md116,dotrewrite-d116-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md116,dotrewrite-d116-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md116,dotrewrite-d116-2)
	#call replace(p3.p5,i3/2+i5/2-i7/2,i,i3,i5,i7,Md116,dotrewrite-d116-3)
#endif
#break
#endswitch
#break
*--#] d116 : 
*--#[ d183 :
#case Md183
#procedure SimpleDotd183()
if (count(Md183,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md183,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p + p2.p;
	.sort:momrewrite-Md183-3;
	if (count(Md183,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p3.p;
	.sort:momrewrite-Md183-2;
	if (count(Md183,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p6} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md183-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd183()
	#call replace(p1.p3,-i1/2-i3/2+i5/2,i,i1,i3,i5,Md183,dotrewrite-d183-0)
	#call replace(p3.p4,-i10-i13+i8,i,i10,i13,i8,Md183,dotrewrite-d183-1)
	#call replace(p3.p6,-i11-i14+i9,i,i11,i14,i9,Md183,dotrewrite-d183-2)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i5/2,i,i12,i2,i5,Md183,dotrewrite-d183-3)
	#call replace(p4.p6,i10+i11-i2/2-i4/2-i6/2+i7/2,i,i10,i11,i2,i4,i6,i7,Md183,dotrewrite-d183-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md183,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p + p2.p;
	.sort:momrewrite-Md183-3;
	if (count(Md183,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p6} = + Q.p + p5.p;
	.sort:momrewrite-Md183-2;
	if (count(Md183,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md183-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd183()
	if (count(Md183,1)) id p4.p5 = i10 - i8;
	if (count(Md183,1)) id p5.p6 = i11 - i9;
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md183,dotrewrite-d183-2)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md183,dotrewrite-d183-3)
	#call replace(p4.p6,i10+i11-i2/2-i4/2-i6/2+i7/2,i,i10,i11,i2,i4,i6,i7,Md183,dotrewrite-d183-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md183,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md183-3;
	if (count(Md183,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md183-2;
	if (count(Md183,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md183-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd183()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md183,dotrewrite-d183-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i5/2,i,i1,i12,i3,i5,Md183,dotrewrite-d183-1)
	#call replace(p4.p6,i10+i11-i2/2-i4/2-i6/2+i7/2,i,i10,i11,i2,i4,i6,i7,Md183,dotrewrite-d183-2)
#endif
#break
#endswitch
#break
*--#] d183 : 
*--#[ d182 :
#case Md182
#procedure SimpleDotd182()
if (count(Md182,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md182,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p + p2.p;
	.sort:momrewrite-Md182-3;
	if (count(Md182,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p6} = + p1.p + p3.p;
	.sort:momrewrite-Md182-2;
	if (count(Md182,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md182-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd182()
	if (count(Md182,1)) id p3.p4 = i10 - i13;
	if (count(Md182,1)) id p3.p6 = i11 - i14;
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md182,dotrewrite-d182-2)
	#call replace(Q.p3,`Q2'/2-i12+i2/2-i5/2,i,i12,i2,i5,Md182,dotrewrite-d182-3)
	#call replace(p4.p6,i10+i11-i2/2-i4/2-i6/2+i7/2,i,i10,i11,i2,i4,i6,i7,Md182,dotrewrite-d182-4)
#endif
#break
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case Q4
* path: (0, 5, 4)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md182,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p + p2.p;
	.sort:momrewrite-Md182-3;
	if (count(Md182,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md182-2;
	if (count(Md182,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md182-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd182()
	if (count(Md182,1)) id p4.p5 = -i10 + i8;
	if (count(Md182,1)) id p5.p6 = -i11 + i9;
	#call replace(Q.p5,`Q2'/2-i2/2+i5/2,i,i2,i5,Md182,dotrewrite-d182-2)
	#call replace(p1.p5,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md182,dotrewrite-d182-3)
	#call replace(p4.p6,i10+i11-i2/2-i4/2-i6/2+i7/2,i,i10,i11,i2,i4,i6,i7,Md182,dotrewrite-d182-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md182,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md182-3;
	if (count(Md182,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md182-2;
	if (count(Md182,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md182-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd182()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md182,dotrewrite-d182-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md182,dotrewrite-d182-1)
	#call replace(p4.p6,i10+i11-i2/2-i4/2-i6/2+i7/2,i,i10,i11,i2,i4,i6,i7,Md182,dotrewrite-d182-2)
#endif
#break
#endswitch
#break
*--#] d182 : 
*--#[ d188 :
#case Md188
#procedure SimpleDotd188()
if (count(Md188,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p4^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p3.p4^n? = i10^n;
	id p3.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md188,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p + p3.p;
	.sort:momrewrite-Md188-3;
	if (count(Md188,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md188-2;
	if (count(Md188,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4,p6} = + Q.p - p5.p;
	.sort:momrewrite-Md188-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd188()
	if (count(Md188,1)) id p4.p5 = -i10 + i8;
	if (count(Md188,1)) id p5.p6 = -i11 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md188,dotrewrite-d188-2)
	#call replace(Q.p5,`Q2'/2-i3/2+i5/2,i,i3,i5,Md188,dotrewrite-d188-3)
	#call replace(p1.p5,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md188,dotrewrite-d188-4)
	#call replace(p4.p6,i10+i11-i3/2-i4/2-i6/2+i7/2,i,i10,i11,i3,i4,i6,i7,Md188,dotrewrite-d188-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md188,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md188-3;
	if (count(Md188,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md188-2;
	if (count(Md188,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p - p6.p;
	.sort:momrewrite-Md188-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd188()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md188,dotrewrite-d188-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md188,dotrewrite-d188-1)
	#call replace(p4.p6,i10+i11-i3/2-i4/2-i6/2+i7/2,i,i10,i11,i3,i4,i6,i7,Md188,dotrewrite-d188-2)
#endif
#break
#endswitch
#break
*--#] d188 : 
*--#[ d84 :
#case Md84
#procedure SimpleDotd84()
if (count(Md84,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md84,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p6.p;
	.sort:momrewrite-Md84-3;
	if (count(Md84,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Md84-2;
	if (count(Md84,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md84-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd84()
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md84,dotrewrite-d84-0)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md84,dotrewrite-d84-1)
	#call replace(Q.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md84,dotrewrite-d84-2)
	#call replace(p1.p6,-i1/2+i3/2-i5/2+i8-i9,i,i1,i3,i5,i8,i9,Md84,dotrewrite-d84-3)
	#call replace(p5.p6,-`Q2'/2-i4/2+i5/2+i6/2+i7,i,i4,i5,i6,i7,Md84,dotrewrite-d84-4)
#endif
#break
#case Q6
* path: (0, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md84,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p1.p;
	.sort:momrewrite-Md84-3;
	if (count(Md84,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md84-2;
	if (count(Md84,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p6.p;
	.sort:momrewrite-Md84-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd84()
	#call replace(p4.p6,i2/2-i4/2-i6/2,i,i2,i4,i6,Md84,dotrewrite-d84-0)
	#call replace(Q.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md84,dotrewrite-d84-1)
	#call replace(p1.p6,-i1/2+i3/2-i5/2+i8-i9,i,i1,i3,i5,i8,i9,Md84,dotrewrite-d84-2)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md84,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p2.p;
	.sort:momrewrite-Md84-3;
	if (count(Md84,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p1.p - p3.p;
	.sort:momrewrite-Md84-2;
	if (count(Md84,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md84-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd84()
	#call replace(p1.p3,-i1/2-i3/2+i5/2,i,i1,i3,i5,Md84,dotrewrite-d84-0)
	#call replace(Q.p3,`Q2'/2-i2/2+i5/2-i8,i,i2,i5,i8,Md84,dotrewrite-d84-1)
	#call replace(p3.p4,-i2/2-i4/2+i6/2+i7-i9,i,i2,i4,i6,i7,i9,Md84,dotrewrite-d84-2)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md84,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p6.p;
	.sort:momrewrite-Md84-3;
	if (count(Md84,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md84-2;
	if (count(Md84,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md84-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd84()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md84,dotrewrite-d84-0)
	#call replace(p2.p6,i2/2-i4/2+i6/2,i,i2,i4,i6,Md84,dotrewrite-d84-1)
	#call replace(p1.p2,-i1/2+i3/2-i5/2+i8,i,i1,i3,i5,i8,Md84,dotrewrite-d84-2)
	#call replace(Q.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md84,dotrewrite-d84-3)
	#call replace(p1.p6,-i1/2+i3/2-i5/2+i8-i9,i,i1,i3,i5,i8,i9,Md84,dotrewrite-d84-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md84,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p2.p;
	.sort:momrewrite-Md84-3;
	if (count(Md84,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p5.p;
	.sort:momrewrite-Md84-2;
	if (count(Md84,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p5.p;
	.sort:momrewrite-Md84-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd84()
	#call replace(Q.p5,-`Q2'/2+i2/2-i5/2,i,i2,i5,Md84,dotrewrite-d84-0)
	#call replace(p1.p5,-i1/2+i3/2-i5/2,i,i1,i3,i5,Md84,dotrewrite-d84-1)
	#call replace(p4.p5,i2/2+i4/2-i6/2-i7,i,i2,i4,i6,i7,Md84,dotrewrite-d84-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md84,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - Q.p;
	.sort:momrewrite-Md84-3;
	if (count(Md84,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p;
	.sort:momrewrite-Md84-2;
	if (count(Md84,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md84-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd84()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md84,dotrewrite-d84-0)
	#call replace(p2.p4,i2/2+i4/2-i6/2,i,i2,i4,i6,Md84,dotrewrite-d84-1)
	#call replace(p1.p2,-i1/2+i3/2-i5/2+i8,i,i1,i3,i5,i8,Md84,dotrewrite-d84-2)
#endif
#break
#endswitch
#break
*--#] d84 : 
*--#[ d82 :
#case Md82
#procedure SimpleDotd82()
if (count(Md82,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 5, 6)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md82,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p6.p;
	.sort:momrewrite-Md82-3;
	if (count(Md82,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p5.p;
	.sort:momrewrite-Md82-2;
	if (count(Md82,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md82-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd82()
	#call replace(Q.p5,`Q2'/2-i2/2+i5/2,i,i2,i5,Md82,dotrewrite-d82-0)
	#call replace(p1.p5,-i1/2-i2/2+i3/2+i8,i,i1,i2,i3,i8,Md82,dotrewrite-d82-1)
	#call replace(Q.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md82,dotrewrite-d82-2)
	#call replace(p1.p6,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md82,dotrewrite-d82-3)
	#call replace(p5.p6,`Q2'/2+i4/2-i5/2-i6/2-i7,i,i4,i5,i6,i7,Md82,dotrewrite-d82-4)
#endif
#break
#case Q6
* path: (0, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md82,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md82-3;
	if (count(Md82,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p6.p;
	.sort:momrewrite-Md82-2;
	if (count(Md82,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p - p6.p;
	.sort:momrewrite-Md82-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd82()
	#call replace(p4.p6,i2/2-i4/2-i6/2,i,i2,i4,i6,Md82,dotrewrite-d82-0)
	#call replace(Q.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md82,dotrewrite-d82-1)
	#call replace(p1.p6,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md82,dotrewrite-d82-2)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md82,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p2.p;
	.sort:momrewrite-Md82-3;
	if (count(Md82,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p3.p;
	.sort:momrewrite-Md82-2;
	if (count(Md82,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md82-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd82()
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md82,dotrewrite-d82-0)
	#call replace(Q.p3,`Q2'/2+i2/2-i5/2-i8,i,i2,i5,i8,Md82,dotrewrite-d82-1)
	#call replace(p3.p4,i2/2+i4/2-i6/2-i9,i,i2,i4,i6,i9,Md82,dotrewrite-d82-2)
#endif
#break
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md82,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md82-3;
	if (count(Md82,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p6.p;
	.sort:momrewrite-Md82-2;
	if (count(Md82,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md82-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd82()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md82,dotrewrite-d82-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md82,dotrewrite-d82-1)
	#call replace(p2.p6,i2/2-i4/2+i6/2,i,i2,i4,i6,Md82,dotrewrite-d82-2)
	#call replace(Q.p6,`Q2'/2+i2/2-i5/2-i7,i,i2,i5,i7,Md82,dotrewrite-d82-3)
	#call replace(p1.p6,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md82,dotrewrite-d82-4)
#endif
#break
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case Q4
* path: (0, 5, 4)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md82,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p2.p;
	.sort:momrewrite-Md82-3;
	if (count(Md82,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p5.p;
	.sort:momrewrite-Md82-2;
	if (count(Md82,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p5.p;
	.sort:momrewrite-Md82-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd82()
	#call replace(Q.p5,`Q2'/2-i2/2+i5/2,i,i2,i5,Md82,dotrewrite-d82-0)
	#call replace(p1.p5,-i1/2-i2/2+i3/2+i8,i,i1,i2,i3,i8,Md82,dotrewrite-d82-1)
	#call replace(p4.p5,-i2/2-i4/2+i6/2+i7,i,i2,i4,i6,i7,Md82,dotrewrite-d82-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md82,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md82-3;
	if (count(Md82,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md82-2;
	if (count(Md82,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p;
	.sort:momrewrite-Md82-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd82()
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md82,dotrewrite-d82-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md82,dotrewrite-d82-1)
	#call replace(p2.p4,i2/2+i4/2-i6/2,i,i2,i4,i6,Md82,dotrewrite-d82-2)
#endif
#break
#endswitch
#break
*--#] d82 : 
*--#[ d85 :
#case Md85
#procedure SimpleDotd85()
if (count(Md85,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md85,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md85-3;
	if (count(Md85,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md85-2;
	if (count(Md85,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p5.p;
	.sort:momrewrite-Md85-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd85()
	if (count(Md85,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md85,dotrewrite-d85-1)
	#call replace(Q.p5,`Q2'/2-i3/2+i5/2,i,i3,i5,Md85,dotrewrite-d85-2)
	#call replace(p1.p5,`Q2'/2+i1/2-i2/2-i8,i,i1,i2,i8,Md85,dotrewrite-d85-3)
	#call replace(Q.p6,`Q2'/2+i3/2-i5/2-i7,i,i3,i5,i7,Md85,dotrewrite-d85-4)
	#call replace(p5.p6,`Q2'/2+i4/2-i5/2-i6/2-i7,i,i4,i5,i6,i7,Md85,dotrewrite-d85-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q5
* path: (0, 5)
#case Q1
* path: (0, 5, 1)
#case 15
* path: (1, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md85,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p3.p;
	.sort:momrewrite-Md85-3;
	if (count(Md85,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md85-2;
	if (count(Md85,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p5.p;
	.sort:momrewrite-Md85-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd85()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md85,dotrewrite-d85-0)
	#call replace(Q.p5,`Q2'/2-i3/2+i5/2,i,i3,i5,Md85,dotrewrite-d85-1)
	#call replace(p1.p5,`Q2'/2+i1/2-i2/2-i8,i,i1,i2,i8,Md85,dotrewrite-d85-2)
	#call replace(p4.p5,-i3/2-i4/2+i6/2+i7,i,i3,i4,i6,i7,Md85,dotrewrite-d85-3)
#endif
#break
#case Q6
* path: (0, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md85,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md85-3;
	if (count(Md85,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p6.p;
	.sort:momrewrite-Md85-2;
	if (count(Md85,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p - p6.p;
	.sort:momrewrite-Md85-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd85()
	if (count(Md85,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md85,dotrewrite-d85-1)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md85,dotrewrite-d85-2)
	#call replace(Q.p6,`Q2'/2+i3/2-i5/2-i7,i,i3,i5,i7,Md85,dotrewrite-d85-3)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md85,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md85-3;
	if (count(Md85,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md85-2;
	if (count(Md85,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md85-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd85()
	if (count(Md85,1)) id p1.p6 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md85,dotrewrite-d85-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md85,dotrewrite-d85-2)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md85,dotrewrite-d85-3)
	#call replace(Q.p6,`Q2'/2+i3/2-i5/2-i7,i,i3,i5,i7,Md85,dotrewrite-d85-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md85,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md85-3;
	if (count(Md85,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p;
	.sort:momrewrite-Md85-2;
	if (count(Md85,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p;
	.sort:momrewrite-Md85-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd85()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md85,dotrewrite-d85-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md85,dotrewrite-d85-1)
	#call replace(p3.p4,i3/2+i4/2-i6/2,i,i3,i4,i6,Md85,dotrewrite-d85-2)
#endif
#break
#endswitch
#break
*--#] d85 : 
*--#[ d122 :
#case Md122
#procedure SimpleDotd122()
if (count(Md122,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case Q5
* path: (0, 1, 6, 5)
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case 11
* path: (1,)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 26
* path: (2, 1, 6)
#case 45
* path: (4, 5)
#case 46
* path: (4, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p6.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	if (count(Md122,1)) id p1.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md122,dotrewrite-d122-1)
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md122,dotrewrite-d122-2)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md122,dotrewrite-d122-3)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md122,dotrewrite-d122-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p7.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md122,dotrewrite-d122-0)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md122,dotrewrite-d122-1)
	#call replace(p1.p2,-i1/2+i3/2-i6/2+i8,i,i1,i3,i6,i8,Md122,dotrewrite-d122-2)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md122,dotrewrite-d122-3)
	#call replace(p1.p7,-i1/2+i3/2-i6/2+i8-i9,i,i1,i3,i6,i8,i9,Md122,dotrewrite-d122-4)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p7.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p3.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md122,dotrewrite-d122-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md122,dotrewrite-d122-1)
	#call replace(Q.p3,`Q2'/2-i2/2+i6/2-i8,i,i2,i6,i8,Md122,dotrewrite-d122-2)
	#call replace(p3.p4,`Q2'/2-i2/2-i5/2+i7/2-i9,i,i2,i5,i7,i9,Md122,dotrewrite-d122-3)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p6.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md122,dotrewrite-d122-0)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md122,dotrewrite-d122-1)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md122,dotrewrite-d122-2)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md122,dotrewrite-d122-3)
	#call replace(p1.p7,-i1/2+i3/2-i6/2+i8-i9,i,i1,i3,i6,i8,i9,Md122,dotrewrite-d122-4)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p7.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	if (count(Md122,1)) id p1.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md122,dotrewrite-d122-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md122,dotrewrite-d122-2)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md122,dotrewrite-d122-3)
	#call replace(p1.p7,-i1/2+i3/2-i6/2+i8-i9,i,i1,i3,i6,i8,i9,Md122,dotrewrite-d122-4)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p7.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md122,dotrewrite-d122-0)
	#call replace(p4.p7,i2/2-i4/2-i7/2,i,i2,i4,i7,Md122,dotrewrite-d122-1)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md122,dotrewrite-d122-2)
	#call replace(p1.p7,-i1/2+i3/2-i6/2+i8-i9,i,i1,i3,i6,i8,i9,Md122,dotrewrite-d122-3)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md122,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md122-4;
	if (count(Md122,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md122-3;
	if (count(Md122,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md122-2;
	if (count(Md122,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p;
	.sort:momrewrite-Md122-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd122()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md122,dotrewrite-d122-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md122,dotrewrite-d122-1)
	#call replace(p2.p4,i2/2+i4/2-i7/2,i,i2,i4,i7,Md122,dotrewrite-d122-2)
	#call replace(p1.p2,-i1/2+i3/2-i6/2+i8,i,i1,i3,i6,i8,Md122,dotrewrite-d122-3)
#endif
#break
#endswitch
#break
*--#] d122 : 
*--#[ d125 :
#case Md125
#procedure SimpleDotd125()
if (count(Md125,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p2.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	if (count(Md125,1)) id p1.p5 = -i8 + i9;
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md125,dotrewrite-d125-1)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md125,dotrewrite-d125-2)
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md125,dotrewrite-d125-3)
	#call replace(p2.p5,-`Q2'/2+i4/2+i6/2-i7/2,i,i4,i6,i7,Md125,dotrewrite-d125-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p7.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md125,dotrewrite-d125-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md125,dotrewrite-d125-1)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md125,dotrewrite-d125-2)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md125,dotrewrite-d125-3)
	#call replace(p1.p7,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md125,dotrewrite-d125-4)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p5.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p2.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p + p3.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md125,dotrewrite-d125-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md125,dotrewrite-d125-1)
	#call replace(Q.p3,`Q2'/2+i2/2-i6/2-i8,i,i2,i6,i8,Md125,dotrewrite-d125-2)
	#call replace(p3.p4,i2/2+i4/2-i7/2-i9,i,i2,i4,i7,i9,Md125,dotrewrite-d125-3)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p6.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md125,dotrewrite-d125-0)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md125,dotrewrite-d125-1)
	#call replace(p1.p6,-i1/2-i2/2+i3/2+i8,i,i1,i2,i3,i8,Md125,dotrewrite-d125-2)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md125,dotrewrite-d125-3)
	#call replace(p1.p7,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md125,dotrewrite-d125-4)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p7.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	if (count(Md125,1)) id p1.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md125,dotrewrite-d125-1)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md125,dotrewrite-d125-2)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md125,dotrewrite-d125-3)
	#call replace(p1.p7,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md125,dotrewrite-d125-4)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 16
* path: (1, 6)
#case 15
* path: (1, 6, 5)
#case 46
* path: (4, 5, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p6.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	if (count(Md125,1)) id p1.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md125,dotrewrite-d125-1)
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md125,dotrewrite-d125-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md125,dotrewrite-d125-3)
	#call replace(p1.p6,-i1/2-i2/2+i3/2+i8,i,i1,i2,i3,i8,Md125,dotrewrite-d125-4)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p2.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p5.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p7.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md125,dotrewrite-d125-0)
	#call replace(p4.p7,i2/2-i4/2-i7/2,i,i2,i4,i7,Md125,dotrewrite-d125-1)
	#call replace(Q.p7,i2/2-i4/2+i5/2-i6/2,i,i2,i4,i5,i6,Md125,dotrewrite-d125-2)
	#call replace(p1.p7,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md125,dotrewrite-d125-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md125,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md125-4;
	if (count(Md125,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md125-3;
	if (count(Md125,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md125-2;
	if (count(Md125,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p4.p;
	.sort:momrewrite-Md125-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd125()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md125,dotrewrite-d125-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md125,dotrewrite-d125-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md125,dotrewrite-d125-2)
	#call replace(p2.p4,i2/2+i4/2-i7/2,i,i2,i4,i7,Md125,dotrewrite-d125-3)
#endif
#break
#endswitch
#break
*--#] d125 : 
*--#[ d117 :
#case Md117
#procedure SimpleDotd117()
if (count(Md117,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 6, 5)
#case Q6
* path: (0, 5, 6)
#case 15
* path: (1, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-0)
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md117,dotrewrite-d117-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md117,dotrewrite-d117-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md117,dotrewrite-d117-3)
	#call replace(p1.p5,-`Q2'/2-i1/2+i2/2+i9,i,i1,i2,i9,Md117,dotrewrite-d117-4)
	#call replace(p1.p6,`Q2'/2+i1/2-i2/2-i8,i,i1,i2,i8,Md117,dotrewrite-d117-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p5.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md117,dotrewrite-d117-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md117,dotrewrite-d117-2)
	#call replace(p1.p6,`Q2'/2+i1/2-i2/2-i8,i,i1,i2,i8,Md117,dotrewrite-d117-3)
	#call replace(p4.p6,`Q2'/2-i3/2-i5/2+i7/2,i,i3,i5,i7,Md117,dotrewrite-d117-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p6.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p7.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	if (count(Md117,1)) id p1.p7 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md117,dotrewrite-d117-2)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md117,dotrewrite-d117-3)
	#call replace(p1.p6,`Q2'/2+i1/2-i2/2-i8,i,i1,i2,i8,Md117,dotrewrite-d117-4)
	#call replace(Q.p7,i3/2-i4/2+i5/2-i6/2,i,i3,i4,i5,i6,Md117,dotrewrite-d117-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p7.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p7.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	if (count(Md117,1)) id p1.p7 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-1)
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md117,dotrewrite-d117-2)
	#call replace(p5.p7,-i5/2+i6/2-i7/2,i,i5,i6,i7,Md117,dotrewrite-d117-3)
	#call replace(p1.p5,-`Q2'/2-i1/2+i2/2+i9,i,i1,i2,i9,Md117,dotrewrite-d117-4)
	#call replace(Q.p7,i3/2-i4/2+i5/2-i6/2,i,i3,i4,i5,i6,Md117,dotrewrite-d117-5)
#endif
#break
#case Q5
* path: (0, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p3.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md117,dotrewrite-d117-1)
	#call replace(Q.p5,-`Q2'/2+i4/2-i5/2,i,i4,i5,Md117,dotrewrite-d117-2)
	#call replace(p1.p5,-`Q2'/2-i1/2+i2/2+i9,i,i1,i2,i9,Md117,dotrewrite-d117-3)
	#call replace(p3.p5,-`Q2'/2+i4/2+i6/2-i7/2,i,i4,i6,i7,Md117,dotrewrite-d117-4)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p - p5.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p7.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	if (count(Md117,1)) id p1.p7 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md117,dotrewrite-d117-2)
	#call replace(p4.p7,i3/2-i4/2-i7/2,i,i3,i4,i7,Md117,dotrewrite-d117-3)
	#call replace(Q.p7,i3/2-i4/2+i5/2-i6/2,i,i3,i4,i5,i6,Md117,dotrewrite-d117-4)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p7.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	if (count(Md117,1)) id p1.p7 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md117,dotrewrite-d117-2)
	#call replace(p3.p7,i3/2-i4/2+i7/2,i,i3,i4,i7,Md117,dotrewrite-d117-3)
	#call replace(Q.p7,i3/2-i4/2+i5/2-i6/2,i,i3,i4,i5,i6,Md117,dotrewrite-d117-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md117,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md117-4;
	if (count(Md117,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - Q.p;
	.sort:momrewrite-Md117-3;
	if (count(Md117,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md117-2;
	if (count(Md117,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p4.p;
	.sort:momrewrite-Md117-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd117()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md117,dotrewrite-d117-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md117,dotrewrite-d117-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i5/2,i,i4,i5,Md117,dotrewrite-d117-2)
	#call replace(p3.p4,i3/2+i4/2-i7/2,i,i3,i4,i7,Md117,dotrewrite-d117-3)
#endif
#break
#endswitch
#break
*--#] d117 : 
*--#[ d253 :
#case Md253
#procedure SimpleDotd253()
if (count(Md253,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p7.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p8.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md253,dotrewrite-d253-0)
	#call replace(p4.p8,-i4/2+i7/2-i8/2,i,i4,i7,i8,Md253,dotrewrite-d253-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md253,dotrewrite-d253-2)
	#call replace(Q.p8,-`Q2'/2-i10+i2/2-i6/2-i9,i,i10,i2,i6,i9,Md253,dotrewrite-d253-3)
	#call replace(p1.p8,-i1/2-i13-i14+i3/2-i6/2,i,i1,i13,i14,i3,i6,Md253,dotrewrite-d253-4)
	#call replace(p2.p8,-`Q2'/2-i10-i11+i2/2-i5/2+i7/2,i,i10,i11,i2,i5,i7,Md253,dotrewrite-d253-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case 11
* path: (1,)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 46
* path: (4, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	if (count(Md253,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md253,dotrewrite-d253-1)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md253,dotrewrite-d253-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md253,dotrewrite-d253-3)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md253,dotrewrite-d253-4)
#endif
#break
#case Q7
* path: (0, 1, 6, 7)
#case Q7
* path: (0, 4, 7)
#case 17
* path: (1, 6, 7)
#case 47
* path: (4, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p - p6.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	if (count(Md253,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md253,dotrewrite-d253-1)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md253,dotrewrite-d253-2)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md253,dotrewrite-d253-3)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md253,dotrewrite-d253-4)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i6/2,i,i10,i2,i6,Md253,dotrewrite-d253-5)
	#call replace(p1.p7,i1/2+i14-i3/2+i6/2,i,i1,i14,i3,i6,Md253,dotrewrite-d253-6)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p5.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p3.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md253,dotrewrite-d253-0)
	#call replace(p3.p4,-i11-i13+i9,i,i11,i13,i9,Md253,dotrewrite-d253-1)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i6/2,i,i12,i2,i6,Md253,dotrewrite-d253-2)
	#call replace(p3.p5,-i14-i5/2-i6/2+i7/2,i,i14,i5,i6,i7,Md253,dotrewrite-d253-3)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md253,dotrewrite-d253-4)
#endif
#break
#case 27
* path: (2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p7.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md253,dotrewrite-d253-0)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md253,dotrewrite-d253-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md253,dotrewrite-d253-2)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i6/2,i,i10,i2,i6,Md253,dotrewrite-d253-3)
	#call replace(p1.p7,i1/2+i14-i3/2+i6/2,i,i1,i14,i3,i6,Md253,dotrewrite-d253-4)
	#call replace(p2.p7,`Q2'/2+i10-i2/2+i5/2-i7/2,i,i10,i2,i5,i7,Md253,dotrewrite-d253-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p + p5.p - p7.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md253,dotrewrite-d253-0)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md253,dotrewrite-d253-1)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i6/2,i,i10,i2,i6,Md253,dotrewrite-d253-2)
	#call replace(p1.p7,i1/2+i14-i3/2+i6/2,i,i1,i14,i3,i6,Md253,dotrewrite-d253-3)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md253,dotrewrite-d253-4)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 5)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md253,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md253-4;
	if (count(Md253,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p5.p;
	.sort:momrewrite-Md253-3;
	if (count(Md253,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md253-2;
	if (count(Md253,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md253-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd253()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md253,dotrewrite-d253-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md253,dotrewrite-d253-1)
	#call replace(p2.p5,i10+i5/2+i6/2-i7/2,i,i10,i5,i6,i7,Md253,dotrewrite-d253-2)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md253,dotrewrite-d253-3)
#endif
#break
#endswitch
#break
*--#] d253 : 
*--#[ d255 :
#case Md255
#procedure SimpleDotd255()
if (count(Md255,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p7.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p8.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md255,dotrewrite-d255-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md255,dotrewrite-d255-1)
	#call replace(p4.p8,-i4/2+i7/2-i8/2,i,i4,i7,i8,Md255,dotrewrite-d255-2)
	#call replace(Q.p8,-`Q2'/2-i10+i2/2-i6/2-i9,i,i10,i2,i6,i9,Md255,dotrewrite-d255-3)
	#call replace(p1.p8,i1/2-i12-i13-i14+i2/2-i3/2,i,i1,i12,i13,i14,i2,i3,Md255,dotrewrite-d255-4)
	#call replace(p2.p8,-`Q2'/2-i10-i11+i2/2-i5/2+i7/2,i,i10,i11,i2,i5,i7,Md255,dotrewrite-d255-5)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 16
* path: (1, 6)
#case 46
* path: (4, 5, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	if (count(Md255,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md255,dotrewrite-d255-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md255,dotrewrite-d255-2)
	#call replace(p1.p6,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md255,dotrewrite-d255-3)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md255,dotrewrite-d255-4)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case 17
* path: (1, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p6.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p - p6.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	if (count(Md255,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md255,dotrewrite-d255-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md255,dotrewrite-d255-2)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md255,dotrewrite-d255-3)
	#call replace(p1.p6,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md255,dotrewrite-d255-4)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i6/2,i,i10,i2,i6,Md255,dotrewrite-d255-5)
	#call replace(p1.p7,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md255,dotrewrite-d255-6)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p3.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	if (count(Md255,1)) id p3.p4 = i11 - i13;
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md255,dotrewrite-d255-1)
	#call replace(Q.p3,`Q2'/2-i12+i2/2-i6/2,i,i12,i2,i6,Md255,dotrewrite-d255-2)
	#call replace(p3.p5,i10-i14+i5/2+i6/2-i7/2,i,i10,i14,i5,i6,i7,Md255,dotrewrite-d255-3)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md255,dotrewrite-d255-4)
#endif
#break
#case 27
* path: (2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p7.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md255,dotrewrite-d255-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md255,dotrewrite-d255-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md255,dotrewrite-d255-2)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i6/2,i,i10,i2,i6,Md255,dotrewrite-d255-3)
	#call replace(p1.p7,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md255,dotrewrite-d255-4)
	#call replace(p2.p7,`Q2'/2+i10-i2/2+i5/2-i7/2,i,i10,i2,i5,i7,Md255,dotrewrite-d255-5)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 47
* path: (4, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p3.p + p1.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p - p6.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md255,dotrewrite-d255-0)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md255,dotrewrite-d255-1)
	#call replace(Q.p7,`Q2'/2+i10-i2/2+i6/2,i,i10,i2,i6,Md255,dotrewrite-d255-2)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md255,dotrewrite-d255-3)
	#call replace(p1.p7,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md255,dotrewrite-d255-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md255,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md255-4;
	if (count(Md255,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md255-3;
	if (count(Md255,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md255-2;
	if (count(Md255,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md255-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd255()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md255,dotrewrite-d255-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md255,dotrewrite-d255-1)
	#call replace(p2.p5,i10+i5/2+i6/2-i7/2,i,i10,i5,i6,i7,Md255,dotrewrite-d255-2)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md255,dotrewrite-d255-3)
#endif
#break
#endswitch
#break
*--#] d255 : 
*--#[ d247 :
#case Md247
#procedure SimpleDotd247()
if (count(Md247,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p3.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md247,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p7.p;
	.sort:momrewrite-Md247-4;
	if (count(Md247,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md247-3;
	if (count(Md247,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md247-2;
	if (count(Md247,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p8.p;
	.sort:momrewrite-Md247-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd247()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md247,dotrewrite-d247-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md247,dotrewrite-d247-1)
	#call replace(p4.p8,-i4/2+i7/2-i8/2,i,i4,i7,i8,Md247,dotrewrite-d247-2)
	#call replace(Q.p8,-`Q2'/2-i10+i3/2-i6/2-i9,i,i10,i3,i6,i9,Md247,dotrewrite-d247-3)
	#call replace(p1.p8,-`Q2'/2-i1/2+i12-i13-i14+i2/2,i,i1,i12,i13,i14,i2,Md247,dotrewrite-d247-4)
	#call replace(p3.p8,-`Q2'/2-i10-i11+i3/2-i5/2+i7/2,i,i10,i11,i3,i5,i7,Md247,dotrewrite-d247-5)
#endif
#break
#case Q7
* path: (0, 4, 7)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md247,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = - p6.p + p7.p;
	.sort:momrewrite-Md247-4;
	if (count(Md247,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md247-3;
	if (count(Md247,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md247-2;
	if (count(Md247,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md247-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd247()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md247,dotrewrite-d247-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md247,dotrewrite-d247-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md247,dotrewrite-d247-2)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i6/2,i,i10,i3,i6,Md247,dotrewrite-d247-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md247,dotrewrite-d247-4)
	#call replace(p3.p7,`Q2'/2+i10-i3/2+i5/2-i7/2,i,i10,i3,i5,i7,Md247,dotrewrite-d247-5)
#endif
#break
#case Q7
* path: (0, 1, 6, 7)
#case 17
* path: (1, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md247,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md247-4;
	if (count(Md247,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md247-3;
	if (count(Md247,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1} = + p7.p - p6.p;
	.sort:momrewrite-Md247-2;
	if (count(Md247,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md247-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd247()
	if (count(Md247,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md247,dotrewrite-d247-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md247,dotrewrite-d247-2)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md247,dotrewrite-d247-3)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md247,dotrewrite-d247-4)
	#call replace(p1.p6,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md247,dotrewrite-d247-5)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i6/2,i,i10,i3,i6,Md247,dotrewrite-d247-6)
	#call replace(p1.p7,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md247,dotrewrite-d247-7)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md247,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md247-4;
	if (count(Md247,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md247-3;
	if (count(Md247,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p6.p;
	.sort:momrewrite-Md247-2;
	if (count(Md247,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md247-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd247()
	if (count(Md247,1)) id p4.p6 = -i11 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md247,dotrewrite-d247-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md247,dotrewrite-d247-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md247,dotrewrite-d247-3)
	#call replace(p1.p6,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md247,dotrewrite-d247-4)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md247,dotrewrite-d247-5)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md247,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md247-4;
	if (count(Md247,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md247-3;
	if (count(Md247,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md247-2;
	if (count(Md247,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p + p5.p - p7.p;
	.sort:momrewrite-Md247-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd247()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md247,dotrewrite-d247-0)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md247,dotrewrite-d247-1)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md247,dotrewrite-d247-2)
	#call replace(Q.p7,`Q2'/2+i10-i3/2+i6/2,i,i10,i3,i6,Md247,dotrewrite-d247-3)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md247,dotrewrite-d247-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md247,dotrewrite-d247-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q5
* path: (0, 1, 3, 5)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q6
* path: (0, 3, 6)
#case Q4
* path: (0, 4)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md247,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p7.p;
	.sort:momrewrite-Md247-4;
	if (count(Md247,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md247-3;
	if (count(Md247,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md247-2;
	if (count(Md247,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md247-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd247()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md247,dotrewrite-d247-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md247,dotrewrite-d247-1)
	#call replace(p3.p5,i10+i5/2+i6/2-i7/2,i,i10,i5,i6,i7,Md247,dotrewrite-d247-2)
	#call replace(p4.p5,i11-i4/2-i7/2+i8/2-i9,i,i11,i4,i7,i8,i9,Md247,dotrewrite-d247-3)
#endif
#break
#endswitch
#break
*--#] d247 : 
*--#[ d300 :
#case Md300
#procedure SimpleDotd300()
if (count(Md300,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 9)
#case 49
* path: (4, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	if (count(Md300,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md300,dotrewrite-d300-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md300,dotrewrite-d300-3)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-4)
	#call replace(p1.p9,i1/2+i13+i14-i3/2+i7/2,i,i1,i13,i14,i3,i7,Md300,dotrewrite-d300-5)
	#call replace(p7.p9,i10-i11-i5/2+i7/2+i8/2,i,i10,i11,i5,i7,i8,Md300,dotrewrite-d300-6)
#endif
#break
#case Q7
* path: (0, 6, 5, 7)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md300,dotrewrite-d300-0)
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md300,dotrewrite-d300-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md300,dotrewrite-d300-3)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-4)
	#call replace(p5.p6,-i11+i2/2+i4/2-i5/2-i6/2,i,i11,i2,i4,i5,i6,Md300,dotrewrite-d300-5)
	#call replace(p1.p6,-i1/2+i12-i13-i14+i3/2-i7/2,i,i1,i12,i13,i14,i3,i7,Md300,dotrewrite-d300-6)
	#call replace(p6.p7,`Q2'/2-i10+i11-i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Md300,dotrewrite-d300-7)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 79
* path: (7, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p8.p - p7.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md300,dotrewrite-d300-0)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-1)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md300,dotrewrite-d300-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md300,dotrewrite-d300-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md300,dotrewrite-d300-5)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md300,dotrewrite-d300-6)
	#call replace(p1.p9,i1/2+i13+i14-i3/2+i7/2,i,i1,i13,i14,i3,i7,Md300,dotrewrite-d300-7)
	#call replace(p7.p9,i10-i11-i5/2+i7/2+i8/2,i,i10,i11,i5,i7,i8,Md300,dotrewrite-d300-8)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p7.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p4.p + p5.p + p6.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md300,dotrewrite-d300-0)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md300,dotrewrite-d300-1)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md300,dotrewrite-d300-3)
	#call replace(p5.p6,-i11+i2/2+i4/2-i5/2-i6/2,i,i11,i2,i4,i5,i6,Md300,dotrewrite-d300-4)
	#call replace(p1.p6,-i1/2+i12-i13-i14+i3/2-i7/2,i,i1,i12,i13,i14,i3,i7,Md300,dotrewrite-d300-5)
#endif
#break
#case 59
* path: (5, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p7.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md300,dotrewrite-d300-0)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-1)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md300,dotrewrite-d300-3)
	#call replace(p1.p9,i1/2+i13+i14-i3/2+i7/2,i,i1,i13,i14,i3,i7,Md300,dotrewrite-d300-4)
	#call replace(p5.p9,-i10+i11-i4/2+i5/2-i7/2+i9/2,i,i10,i11,i4,i5,i7,i9,Md300,dotrewrite-d300-5)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p5.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p3.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(p1.p3,-i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-0)
	#call replace(p3.p4,i10-i11-i13,i,i10,i11,i13,Md300,dotrewrite-d300-1)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i7/2,i,i12,i2,i7,Md300,dotrewrite-d300-2)
	#call replace(p3.p5,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md300,dotrewrite-d300-3)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-4)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md300,dotrewrite-d300-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q8
* path: (0, 1, 7, 8)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#case 18
* path: (1, 7, 8)
#case 27
* path: (2, 1, 7)
#case 44
* path: (4,)
#case 48
* path: (4, 8)
#case 68
* path: (6, 4, 8)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p8.p - p7.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	if (count(Md300,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md300,dotrewrite-d300-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-3)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md300,dotrewrite-d300-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md300,dotrewrite-d300-5)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md300,dotrewrite-d300-6)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p7.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p + p5.p - p8.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-0)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md300,dotrewrite-d300-1)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md300,dotrewrite-d300-2)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md300,dotrewrite-d300-3)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-4)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md300,dotrewrite-d300-5)
#endif
#break
#case 28
* path: (2, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md300,dotrewrite-d300-0)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md300,dotrewrite-d300-2)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md300,dotrewrite-d300-3)
	#call replace(p1.p8,i1/2+i14-i3/2+i7/2,i,i1,i14,i3,i7,Md300,dotrewrite-d300-4)
	#call replace(p2.p8,`Q2'/2-i10+i5/2-i6/2-i7/2-i8/2+i9/2,i,i10,i5,i6,i7,i8,i9,Md300,dotrewrite-d300-5)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q2
* path: (0, 6, 2)
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md300,dotrewrite-d300-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md300,dotrewrite-d300-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md300,dotrewrite-d300-2)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md300,dotrewrite-d300-3)
	#call replace(p1.p6,-i1/2+i12-i13-i14+i3/2-i7/2,i,i1,i12,i13,i14,i3,i7,Md300,dotrewrite-d300-4)
	#call replace(p2.p6,i10-i11+i2/2-i5/2+i6/2+i8/2-i9/2,i,i10,i11,i2,i5,i6,i8,i9,Md300,dotrewrite-d300-5)
#endif
#break
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	if (count(Md300,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md300,dotrewrite-d300-1)
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md300,dotrewrite-d300-2)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-3)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md300,dotrewrite-d300-4)
	#call replace(p1.p6,-i1/2+i12-i13-i14+i3/2-i7/2,i,i1,i12,i13,i14,i3,i7,Md300,dotrewrite-d300-5)
	#call replace(p6.p7,`Q2'/2-i10+i11-i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Md300,dotrewrite-d300-6)
#endif
#break
#case Q9
* path: (0, 2, 4, 9)
#case 19
* path: (1, 2, 4, 9)
#case 29
* path: (2, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md300,dotrewrite-d300-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md300,dotrewrite-d300-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md300,dotrewrite-d300-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md300,dotrewrite-d300-3)
	#call replace(p1.p9,i1/2+i13+i14-i3/2+i7/2,i,i1,i13,i14,i3,i7,Md300,dotrewrite-d300-4)
	#call replace(p2.p9,`Q2'/2-i10+i11+i5/2-i6/2-i7/2-i8/2+i9/2,i,i10,i11,i5,i6,i7,i8,i9,Md300,dotrewrite-d300-5)
#endif
#break
#case 45
* path: (4, 5)
#case 47
* path: (4, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	if (count(Md300,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md300,dotrewrite-d300-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md300,dotrewrite-d300-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md300,dotrewrite-d300-3)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-4)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md300,dotrewrite-d300-5)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 5)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md300,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md300-5;
	if (count(Md300,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md300-4;
	if (count(Md300,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p5.p;
	.sort:momrewrite-Md300-3;
	if (count(Md300,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md300-2;
	if (count(Md300,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md300-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd300()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md300,dotrewrite-d300-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md300,dotrewrite-d300-1)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md300,dotrewrite-d300-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md300,dotrewrite-d300-3)
	#call replace(p2.p5,-i10+i2/2+i5/2-i6/2-i8/2+i9/2,i,i10,i2,i5,i6,i8,i9,Md300,dotrewrite-d300-4)
#endif
#break
#endswitch
#break
*--#] d300 : 
*--#[ d303 :
#case Md303
#procedure SimpleDotd303()
if (count(Md303,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p2.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 9)
#case 49
* path: (4, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	if (count(Md303,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md303,dotrewrite-d303-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md303,dotrewrite-d303-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p7,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p7.p9,i10-i11-i5/2+i7/2+i8/2,i,i10,i11,i5,i7,i8,Md303,dotrewrite-d303-5)
	#call replace(p1.p9,-i1/2+i12+i13+i14-i2/2+i3/2,i,i1,i12,i13,i14,i2,i3,Md303,dotrewrite-d303-6)
#endif
#break
#case Q7
* path: (0, 6, 5, 7)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md303,dotrewrite-d303-0)
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md303,dotrewrite-d303-1)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md303,dotrewrite-d303-2)
	#call replace(p1.p7,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md303,dotrewrite-d303-3)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-4)
	#call replace(p1.p6,i1/2-i13-i14+i2/2-i3/2,i,i1,i13,i14,i2,i3,Md303,dotrewrite-d303-5)
	#call replace(p5.p6,-i11+i2/2+i4/2-i5/2-i6/2,i,i11,i2,i4,i5,i6,Md303,dotrewrite-d303-6)
	#call replace(p6.p7,`Q2'/2-i10+i11-i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Md303,dotrewrite-d303-7)
#endif
#break
#case Q9
* path: (0, 7, 8, 9)
#case Q8
* path: (0, 9, 8)
#case 79
* path: (7, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p8.p - p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md303,dotrewrite-d303-0)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md303,dotrewrite-d303-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md303,dotrewrite-d303-2)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p7,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md303,dotrewrite-d303-5)
	#call replace(p1.p8,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md303,dotrewrite-d303-6)
	#call replace(p7.p9,i10-i11-i5/2+i7/2+i8/2,i,i10,i11,i5,i7,i8,Md303,dotrewrite-d303-7)
	#call replace(p1.p9,-i1/2+i12+i13+i14-i2/2+i3/2,i,i1,i12,i13,i14,i2,i3,Md303,dotrewrite-d303-8)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p3.p + p1.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md303,dotrewrite-d303-0)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md303,dotrewrite-d303-1)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p6,i1/2-i13-i14+i2/2-i3/2,i,i1,i13,i14,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p5.p6,-i11+i2/2+i4/2-i5/2-i6/2,i,i11,i2,i4,i5,i6,Md303,dotrewrite-d303-5)
#endif
#break
#case 59
* path: (5, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p3.p + p1.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md303,dotrewrite-d303-0)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-1)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p9,-i1/2+i12+i13+i14-i2/2+i3/2,i,i1,i12,i13,i14,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p5.p9,-i10+i11-i4/2+i5/2-i7/2+i9/2,i,i10,i11,i4,i5,i7,i9,Md303,dotrewrite-d303-5)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p1.p + p3.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	if (count(Md303,1)) id p3.p4 = i11 - i13;
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md303,dotrewrite-d303-1)
	#call replace(Q.p3,`Q2'/2-i12+i2/2-i7/2,i,i12,i2,i7,Md303,dotrewrite-d303-2)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-3)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md303,dotrewrite-d303-4)
	#call replace(p3.p5,-i10-i14+i2/2+i5/2-i6/2-i8/2+i9/2,i,i10,i14,i2,i5,i6,i8,i9,Md303,dotrewrite-d303-5)
#endif
#break
#case Q8
* path: (0, 7, 8)
#case 18
* path: (1, 7, 8)
#case 48
* path: (4, 8)
#case 68
* path: (6, 4, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p8.p - p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	if (count(Md303,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md303,dotrewrite-d303-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-2)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md303,dotrewrite-d303-3)
	#call replace(p1.p7,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md303,dotrewrite-d303-5)
	#call replace(p1.p8,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md303,dotrewrite-d303-6)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + p3.p + p1.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + Q.p - p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-0)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md303,dotrewrite-d303-1)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md303,dotrewrite-d303-2)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-3)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md303,dotrewrite-d303-4)
	#call replace(p1.p8,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md303,dotrewrite-d303-5)
#endif
#break
#case 28
* path: (2, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md303,dotrewrite-d303-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md303,dotrewrite-d303-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-2)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p8,-i1/2+i12+i14-i2/2+i3/2,i,i1,i12,i14,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p2.p8,`Q2'/2-i10+i5/2-i6/2-i7/2-i8/2+i9/2,i,i10,i5,i6,i7,i8,i9,Md303,dotrewrite-d303-5)
#endif
#break
#case Q6
* path: (0, 1, 2, 6)
#case Q2
* path: (0, 6, 2)
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md303,dotrewrite-d303-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md303,dotrewrite-d303-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md303,dotrewrite-d303-2)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p6,i1/2-i13-i14+i2/2-i3/2,i,i1,i13,i14,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p2.p6,i10-i11+i2/2-i5/2+i6/2+i8/2-i9/2,i,i10,i11,i2,i5,i6,i8,i9,Md303,dotrewrite-d303-5)
#endif
#break
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	if (count(Md303,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md303,dotrewrite-d303-1)
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md303,dotrewrite-d303-2)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p7,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p1.p6,i1/2-i13-i14+i2/2-i3/2,i,i1,i13,i14,i2,i3,Md303,dotrewrite-d303-5)
	#call replace(p6.p7,`Q2'/2-i10+i11-i2/2+i5/2-i8/2,i,i10,i11,i2,i5,i8,Md303,dotrewrite-d303-6)
#endif
#break
#case 19
* path: (1, 2, 4, 9)
#case 29
* path: (2, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md303,dotrewrite-d303-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md303,dotrewrite-d303-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md303,dotrewrite-d303-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p1.p9,-i1/2+i12+i13+i14-i2/2+i3/2,i,i1,i12,i13,i14,i2,i3,Md303,dotrewrite-d303-4)
	#call replace(p2.p9,`Q2'/2-i10+i11+i5/2-i6/2-i7/2-i8/2+i9/2,i,i10,i11,i5,i6,i7,i8,i9,Md303,dotrewrite-d303-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 47
* path: (4, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p2.p?!{p2,[P+p2],[P-p2],p4} = + Q.p - p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	if (count(Md303,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md303,dotrewrite-d303-1)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md303,dotrewrite-d303-2)
	#call replace(p1.p7,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md303,dotrewrite-d303-3)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-4)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md303,dotrewrite-d303-5)
#endif
#break
#default
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md303,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md303-5;
	if (count(Md303,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md303-4;
	if (count(Md303,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md303-3;
	if (count(Md303,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md303-2;
	if (count(Md303,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md303-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd303()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md303,dotrewrite-d303-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md303,dotrewrite-d303-1)
	#call replace(Q.p5,-i10+i2/2-i6/2-i7/2+i9/2,i,i10,i2,i6,i7,i9,Md303,dotrewrite-d303-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md303,dotrewrite-d303-3)
	#call replace(p2.p5,-i10+i2/2+i5/2-i6/2-i8/2+i9/2,i,i10,i2,i5,i6,i8,i9,Md303,dotrewrite-d303-4)
#endif
#break
#endswitch
#break
*--#] d303 : 
*--#[ d296 :
#case Md296
#procedure SimpleDotd296()
if (count(Md296,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p3.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q1
* path: (0, 6, 3, 1)
#case Q7
* path: (0, 6, 3, 7)
#case Q4
* path: (0, 6, 4)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 3, 7)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md296,dotrewrite-d296-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md296,dotrewrite-d296-2)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md296,dotrewrite-d296-3)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md296,dotrewrite-d296-4)
	#call replace(p3.p6,i10-i11+i3/2-i5/2+i6/2+i8/2-i9/2,i,i10,i11,i3,i5,i6,i8,i9,Md296,dotrewrite-d296-5)
#endif
#break
#case Q9
* path: (0, 9)
#case 49
* path: (4, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p7.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	if (count(Md296,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md296,dotrewrite-d296-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md296,dotrewrite-d296-3)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md296,dotrewrite-d296-5)
	#call replace(p7.p9,i10-i11-i5/2+i7/2+i8/2,i,i10,i11,i5,i7,i8,Md296,dotrewrite-d296-6)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md296,dotrewrite-d296-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 17
* path: (1, 7)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 3, 7)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p7.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	if (count(Md296,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md296,dotrewrite-d296-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md296,dotrewrite-d296-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md296,dotrewrite-d296-4)
	#call replace(Q.p5,-i10+i3/2-i6/2-i7/2+i9/2,i,i10,i3,i6,i7,i9,Md296,dotrewrite-d296-5)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md296,dotrewrite-d296-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 79
* path: (7, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p7.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1,p3} = + p9.p - p8.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p8.p - p7.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md296,dotrewrite-d296-1)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md296,dotrewrite-d296-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md296,dotrewrite-d296-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md296,dotrewrite-d296-5)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md296,dotrewrite-d296-6)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md296,dotrewrite-d296-7)
	#call replace(p7.p9,i10-i11-i5/2+i7/2+i8/2,i,i10,i11,i5,i7,i8,Md296,dotrewrite-d296-8)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md296,dotrewrite-d296-9)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + p4.p + p5.p + p6.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md296,dotrewrite-d296-1)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md296,dotrewrite-d296-2)
	#call replace(p4.p6,i10-i4/2+i8/2-i9/2,i,i10,i4,i8,i9,Md296,dotrewrite-d296-3)
	#call replace(Q.p5,-i10+i3/2-i6/2-i7/2+i9/2,i,i10,i3,i6,i7,i9,Md296,dotrewrite-d296-4)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md296,dotrewrite-d296-5)
	#call replace(p5.p6,-i11+i3/2+i4/2-i5/2-i6/2,i,i11,i3,i4,i5,i6,Md296,dotrewrite-d296-6)
#endif
#break
#case 59
* path: (5, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + p2.p + p1.p - p7.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md296,dotrewrite-d296-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-2)
	#call replace(Q.p5,-i10+i3/2-i6/2-i7/2+i9/2,i,i10,i3,i6,i7,i9,Md296,dotrewrite-d296-3)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md296,dotrewrite-d296-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md296,dotrewrite-d296-5)
	#call replace(p5.p9,-i10+i11-i4/2+i5/2-i7/2+i9/2,i,i10,i11,i4,i5,i7,i9,Md296,dotrewrite-d296-6)
#endif
#break
#case Q8
* path: (0, 1, 7, 8)
#case 18
* path: (1, 7, 8)
#case 48
* path: (4, 8)
#case 68
* path: (6, 4, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p - p7.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p8.p - p7.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	if (count(Md296,1)) id p4.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md296,dotrewrite-d296-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-3)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md296,dotrewrite-d296-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md296,dotrewrite-d296-5)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md296,dotrewrite-d296-6)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md296,dotrewrite-d296-7)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md296,dotrewrite-d296-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-2)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md296,dotrewrite-d296-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md296,dotrewrite-d296-4)
	#call replace(p3.p8,`Q2'/2-i10+i5/2-i6/2-i7/2-i8/2+i9/2,i,i10,i5,i6,i7,i8,i9,Md296,dotrewrite-d296-5)
#endif
#break
#case Q9
* path: (0, 1, 3, 4, 9)
#case 19
* path: (1, 3, 4, 9)
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = - p7.p + p8.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md296,dotrewrite-d296-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md296,dotrewrite-d296-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-3)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md296,dotrewrite-d296-4)
	#call replace(p3.p9,`Q2'/2-i10+i11+i5/2-i6/2-i7/2-i8/2+i9/2,i,i10,i11,i5,i6,i7,i8,i9,Md296,dotrewrite-d296-5)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p4} = + Q.p + p5.p - p8.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md296,dotrewrite-d296-1)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md296,dotrewrite-d296-2)
	#call replace(Q.p8,`Q2'/2-i10-i6/2+i9/2,i,i10,i6,i9,Md296,dotrewrite-d296-3)
	#call replace(Q.p5,-i10+i3/2-i6/2-i7/2+i9/2,i,i10,i3,i6,i7,i9,Md296,dotrewrite-d296-4)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md296,dotrewrite-d296-5)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md296,dotrewrite-d296-6)
#endif
#break
#default
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md296,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md296-5;
	if (count(Md296,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md296-4;
	if (count(Md296,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md296-3;
	if (count(Md296,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md296-2;
	if (count(Md296,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md296-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd296()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md296,dotrewrite-d296-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md296,dotrewrite-d296-1)
	#call replace(Q.p5,-i10+i3/2-i6/2-i7/2+i9/2,i,i10,i3,i6,i7,i9,Md296,dotrewrite-d296-2)
	#call replace(p4.p5,-i10+i11-i4/2-i8/2+i9/2,i,i10,i11,i4,i8,i9,Md296,dotrewrite-d296-3)
	#call replace(p3.p5,-i10+i3/2+i5/2-i6/2-i8/2+i9/2,i,i10,i3,i5,i6,i8,i9,Md296,dotrewrite-d296-4)
#endif
#break
#endswitch
#break
*--#] d296 : 
*--#[ d295 :
#case Md295
#procedure SimpleDotd295()
if (count(Md295,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p6^n? = i10^n;
	id p3.p6^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p5.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 6, 3, 4)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + p3.p + p4.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	if (count(Md295,1)) id p4.p6 = i10 - i11;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md295,dotrewrite-d295-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md295,dotrewrite-d295-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md295,dotrewrite-d295-4)
	#call replace(p3.p5,i12+i5/2+i7/2-i8/2,i,i12,i5,i7,i8,Md295,dotrewrite-d295-5)
	#call replace(p4.p5,-i12+i13-i5/2-i7/2+i8/2,i,i12,i13,i5,i7,i8,Md295,dotrewrite-d295-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p4.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	if (count(Md295,1)) id p4.p6 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md295,dotrewrite-d295-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md295,dotrewrite-d295-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md295,dotrewrite-d295-4)
	#call replace(p4.p5,-i12+i13-i5/2-i7/2+i8/2,i,i12,i13,i5,i7,i8,Md295,dotrewrite-d295-5)
#endif
#break
#case Q7
* path: (0, 6, 5, 7)
#case 17
* path: (1, 2, 7)
#case 57
* path: (5, 7)
#case 67
* path: (6, 5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p7.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p7.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md295,dotrewrite-d295-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md295,dotrewrite-d295-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md295,dotrewrite-d295-3)
	#call replace(p1.p7,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md295,dotrewrite-d295-4)
	#call replace(p6.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md295,dotrewrite-d295-5)
#endif
#break
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p4.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p7.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	if (count(Md295,1)) id p4.p6 = i10 - i11;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md295,dotrewrite-d295-2)
	#call replace(p4.p7,-i2/2+i4/2+i7/2,i,i2,i4,i7,Md295,dotrewrite-d295-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md295,dotrewrite-d295-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md295,dotrewrite-d295-5)
	#call replace(p6.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md295,dotrewrite-d295-6)
	#call replace(p4.p5,-i12+i13-i5/2-i7/2+i8/2,i,i12,i13,i5,i7,i8,Md295,dotrewrite-d295-7)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + Q.p - p7.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p - p2.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	if (count(Md295,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md295,dotrewrite-d295-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-2)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md295,dotrewrite-d295-3)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md295,dotrewrite-d295-4)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md295,dotrewrite-d295-5)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md295,dotrewrite-d295-6)
	#call replace(p6.p7,`Q2'/2-i11+i6/2-i9/2,i,i11,i6,i9,Md295,dotrewrite-d295-7)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p3.p?!{p3,[P+p3],[P-p3],p6} = + p1.p - p4.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	if (count(Md295,1)) id p2.p5 = i12 - i13;
	if (count(Md295,1)) id p4.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md295,dotrewrite-d295-2)
	#call replace(p2.p4,-i2/2-i4/2+i7/2,i,i2,i4,i7,Md295,dotrewrite-d295-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md295,dotrewrite-d295-5)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md295,dotrewrite-d295-6)
	#call replace(p4.p5,-i12+i13-i5/2-i7/2+i8/2,i,i12,i13,i5,i7,i8,Md295,dotrewrite-d295-7)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	if (count(Md295,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md295,dotrewrite-d295-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md295,dotrewrite-d295-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-3)
	#call replace(p2.p3,`Q2'/2-i1/2+i4/2-i7/2,i,i1,i4,i7,Md295,dotrewrite-d295-4)
	#call replace(p3.p5,i12+i5/2+i7/2-i8/2,i,i12,i5,i7,i8,Md295,dotrewrite-d295-5)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md295,dotrewrite-d295-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q1
* path: (0, 6, 3, 1)
#case Q2
* path: (0, 6, 3, 1, 2)
#case Q5
* path: (0, 6, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 3, 6)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 1, 3, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 58
* path: (5, 3, 8)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md295,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md295-5;
	if (count(Md295,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md295-4;
	if (count(Md295,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md295-3;
	if (count(Md295,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md295-2;
	if (count(Md295,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md295-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd295()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md295,dotrewrite-d295-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md295,dotrewrite-d295-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md295,dotrewrite-d295-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md295,dotrewrite-d295-3)
	#call replace(p3.p5,i12+i5/2+i7/2-i8/2,i,i12,i5,i7,i8,Md295,dotrewrite-d295-4)
#endif
#break
#endswitch
#break
*--#] d295 : 
*--#[ d293 :
#case Md293
#procedure SimpleDotd293()
if (count(Md293,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p6^n? = i10^n;
	id p3.p6^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 58
* path: (5, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + Q.p - p9.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md293,dotrewrite-d293-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md293,dotrewrite-d293-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md293,dotrewrite-d293-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md293,dotrewrite-d293-3)
	#call replace(Q.p8,`Q2'/2-i12-i6/2+i9/2,i,i12,i6,i9,Md293,dotrewrite-d293-4)
	#call replace(p1.p8,`Q2'/2+i1/2-i10-i13-i2/2,i,i1,i10,i13,i2,Md293,dotrewrite-d293-5)
	#call replace(p3.p8,`Q2'/2-i11-i14+i3/2-i7/2,i,i11,i14,i3,i7,Md293,dotrewrite-d293-6)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p - p7.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p3.p?!{p3,[P+p3],[P-p3],p5,p6} = + Q.p + p7.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	if (count(Md293,1)) id p5.p7 = -i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md293,dotrewrite-d293-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md293,dotrewrite-d293-2)
	#call replace(Q.p7,-`Q2'/2+i3/2-i7/2,i,i3,i7,Md293,dotrewrite-d293-3)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md293,dotrewrite-d293-4)
	#call replace(p1.p7,-`Q2'/2+i2/2+i3/2-i4/2,i,i2,i3,i4,Md293,dotrewrite-d293-5)
	#call replace(p6.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md293,dotrewrite-d293-6)
#endif
#break
#case Q4
* path: (0, 6, 3, 4)
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + p3.p + p4.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	if (count(Md293,1)) id p4.p5 = i13 - i14;
	if (count(Md293,1)) id p4.p6 = i10 - i11;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md293,dotrewrite-d293-2)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md293,dotrewrite-d293-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md293,dotrewrite-d293-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md293,dotrewrite-d293-5)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md293,dotrewrite-d293-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p2.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p3.p?!{p3,[P+p3],[P-p3],p5,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	if (count(Md293,1)) id p4.p5 = i13 - i14;
	if (count(Md293,1)) id p4.p6 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md293,dotrewrite-d293-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md293,dotrewrite-d293-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md293,dotrewrite-d293-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md293,dotrewrite-d293-5)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md293,dotrewrite-d293-6)
#endif
#break
#case 49
* path: (4, 3, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p6} = + p3.p + p4.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + Q.p - p9.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	if (count(Md293,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md293,dotrewrite-d293-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md293,dotrewrite-d293-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md293,dotrewrite-d293-3)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md293,dotrewrite-d293-4)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md293,dotrewrite-d293-5)
	#call replace(p3.p9,`Q2'/2-i11+i3/2-i7/2,i,i11,i3,i7,Md293,dotrewrite-d293-6)
	#call replace(p4.p9,i1/2-i10+i11-i2/2-i3/2+i7/2,i,i1,i10,i11,i2,i3,i7,Md293,dotrewrite-d293-7)
#endif
#break
#case Q9
* path: (0, 1, 3, 5, 9)
#case Q9
* path: (0, 9)
#case 19
* path: (1, 3, 5, 9)
#case 39
* path: (3, 5, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + Q.p - p9.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md293,dotrewrite-d293-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md293,dotrewrite-d293-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md293,dotrewrite-d293-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md293,dotrewrite-d293-3)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md293,dotrewrite-d293-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md293,dotrewrite-d293-5)
	#call replace(p3.p9,`Q2'/2-i11+i3/2-i7/2,i,i11,i3,i7,Md293,dotrewrite-d293-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q1
* path: (0, 6, 3, 1)
#case Q5
* path: (0, 6, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md293,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md293-5;
	if (count(Md293,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md293-4;
	if (count(Md293,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md293-3;
	if (count(Md293,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - Q.p;
	.sort:momrewrite-Md293-2;
	if (count(Md293,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md293-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd293()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md293,dotrewrite-d293-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md293,dotrewrite-d293-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md293,dotrewrite-d293-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md293,dotrewrite-d293-3)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md293,dotrewrite-d293-4)
#endif
#break
#endswitch
#break
*--#] d293 : 
*--#[ d377 :
#case Md377
#procedure SimpleDotd377()
if (count(Md377,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p7^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p7.p + Q.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p5} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md377,dotrewrite-d377-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md377,dotrewrite-d377-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md377,dotrewrite-d377-2)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md377,dotrewrite-d377-3)
	#call replace(Q.p6,-i11+i3/2-i7/2-i8/2+i9/2,i,i11,i3,i7,i8,i9,Md377,dotrewrite-d377-4)
	#call replace(p1.p6,i1/2-i10-i12+i3/2-i4/2,i,i1,i10,i12,i3,i4,Md377,dotrewrite-d377-5)
	#call replace(p3.p6,-i14+i3/2-i5/2+i6/2-i7/2,i,i14,i3,i5,i6,i7,Md377,dotrewrite-d377-6)
#endif
#break
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p8.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	if (count(Md377,1)) id p5.p8 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md377,dotrewrite-d377-1)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md377,dotrewrite-d377-2)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md377,dotrewrite-d377-3)
	#call replace(p1.p8,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md377,dotrewrite-d377-4)
	#call replace(p7.p8,`Q2'/2+i13-i14-i3/2-i5/2+i6/2-i9/2,i,i13,i14,i3,i5,i6,i9,Md377,dotrewrite-d377-5)
#endif
#break
#case Q4
* path: (0, 7, 3, 4)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	if (count(Md377,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md377,dotrewrite-d377-1)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md377,dotrewrite-d377-2)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md377,dotrewrite-d377-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md377,dotrewrite-d377-4)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md377,dotrewrite-d377-5)
	#call replace(p4.p7,i10+i13-i14-i3/2-i5/2+i6/2-i7/2,i,i10,i13,i14,i3,i5,i6,i7,Md377,dotrewrite-d377-6)
#endif
#break
#case 39
* path: (3, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p5} = + Q.p - p9.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	if (count(Md377,1)) id p5.p9 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md377,dotrewrite-d377-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md377,dotrewrite-d377-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md377,dotrewrite-d377-3)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md377,dotrewrite-d377-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md377,dotrewrite-d377-5)
	#call replace(p3.p9,`Q2'/2+i13-i14-i5/2+i6/2-i7/2-i8/2,i,i13,i14,i5,i6,i7,i8,Md377,dotrewrite-d377-6)
#endif
#break
#case 19
* path: (1, 2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p8.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p8.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p7.p?!{p7,[P+p7],[P-p7],p1,p5} = + Q.p - p9.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p5.p - p8.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	if (count(Md377,1)) id p5.p8 = i11 - i13;
	if (count(Md377,1)) id p5.p9 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md377,dotrewrite-d377-2)
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md377,dotrewrite-d377-3)
	#call replace(Q.p9,`Q2'/2-i7/2+i9/2,i,i7,i9,Md377,dotrewrite-d377-4)
	#call replace(p1.p8,`Q2'/2-i2/2-i3/2+i4/2,i,i2,i3,i4,Md377,dotrewrite-d377-5)
	#call replace(p1.p9,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md377,dotrewrite-d377-6)
	#call replace(p8.p9,-i13+i14+i5/2-i6/2+i8/2+i9/2,i,i13,i14,i5,i6,i8,i9,Md377,dotrewrite-d377-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p2.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p - p4.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	if (count(Md377,1)) id p4.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md377,dotrewrite-d377-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md377,dotrewrite-d377-2)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md377,dotrewrite-d377-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md377,dotrewrite-d377-4)
	#call replace(p4.p7,i10+i13-i14-i3/2-i5/2+i6/2-i7/2,i,i10,i13,i14,i3,i5,i6,i7,Md377,dotrewrite-d377-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 1, 3, 7)
#case Q7
* path: (0, 7)
#case Q3
* path: (0, 7, 3)
#case Q1
* path: (0, 7, 3, 1)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 17
* path: (1, 3, 7)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md377,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md377-5;
	if (count(Md377,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md377-4;
	if (count(Md377,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md377-3;
	if (count(Md377,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p7.p;
	.sort:momrewrite-Md377-2;
	if (count(Md377,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md377-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd377()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md377,dotrewrite-d377-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md377,dotrewrite-d377-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md377,dotrewrite-d377-2)
	#call replace(Q.p7,`Q2'/2+i7/2-i9/2,i,i7,i9,Md377,dotrewrite-d377-3)
	#call replace(p3.p7,-i13+i14+i3/2+i5/2-i6/2+i7/2,i,i13,i14,i3,i5,i6,i7,Md377,dotrewrite-d377-4)
#endif
#break
#endswitch
#break
*--#] d377 : 
*--#[ d201 :
#case Md201
#procedure SimpleDotd201()
if (count(Md201,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p4.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md201,dotrewrite-d201-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md201,dotrewrite-d201-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md201,dotrewrite-d201-2)
	#call replace(Q.p5,i3/2-i6/2-i7/2+i8/2,i,i3,i6,i7,i8,Md201,dotrewrite-d201-3)
	#call replace(p4.p6,i1/2-i3/2-i4/2-i9,i,i1,i3,i4,i9,Md201,dotrewrite-d201-4)
#endif
#break
#case 18
* path: (1, 2, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p7.p - p2.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p8.p - p7.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md201,dotrewrite-d201-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md201,dotrewrite-d201-1)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md201,dotrewrite-d201-2)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md201,dotrewrite-d201-3)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md201,dotrewrite-d201-4)
	#call replace(p2.p8,i2/2-i4/2-i5/2+i8/2-i9,i,i2,i4,i5,i8,i9,Md201,dotrewrite-d201-5)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case Q1
* path: (0, 6, 3, 1)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p6.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md201,dotrewrite-d201-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md201,dotrewrite-d201-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md201,dotrewrite-d201-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md201,dotrewrite-d201-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md201,dotrewrite-d201-4)
	#call replace(p1.p6,i1/2-i4/2-i5/2+i6/2-i9,i,i1,i4,i5,i6,i9,Md201,dotrewrite-d201-5)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p7.p - p2.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md201,dotrewrite-d201-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md201,dotrewrite-d201-1)
	#call replace(p2.p7,i2/2-i4/2+i7/2,i,i2,i4,i7,Md201,dotrewrite-d201-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md201,dotrewrite-d201-3)
	#call replace(Q.p5,i3/2-i6/2-i7/2+i8/2,i,i3,i6,i7,i8,Md201,dotrewrite-d201-4)
	#call replace(p2.p5,-i5/2-i7/2+i8/2-i9,i,i5,i7,i8,i9,Md201,dotrewrite-d201-5)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md201,dotrewrite-d201-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md201,dotrewrite-d201-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md201,dotrewrite-d201-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md201,dotrewrite-d201-3)
	#call replace(Q.p5,i3/2-i6/2-i7/2+i8/2,i,i3,i6,i7,i8,Md201,dotrewrite-d201-4)
	#call replace(p1.p5,i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Md201,dotrewrite-d201-5)
#endif
#break
#case Q3
* path: (0, 6, 3)
#case Q4
* path: (0, 6, 3, 4)
#case 36
* path: (3, 6)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p5.p?!{p5,[P+p5],[P-p5],p4} = + p3.p - p6.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md201,dotrewrite-d201-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md201,dotrewrite-d201-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md201,dotrewrite-d201-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md201,dotrewrite-d201-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md201,dotrewrite-d201-4)
	#call replace(p4.p6,i1/2-i3/2-i4/2-i9,i,i1,i3,i4,i9,Md201,dotrewrite-d201-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p2.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md201,dotrewrite-d201-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md201,dotrewrite-d201-1)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md201,dotrewrite-d201-2)
	#call replace(Q.p5,i3/2-i6/2-i7/2+i8/2,i,i3,i6,i7,i8,Md201,dotrewrite-d201-3)
	#call replace(p1.p5,i3/2+i5/2-i6/2+i9,i,i3,i5,i6,i9,Md201,dotrewrite-d201-4)
#endif
#break
#default
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md201,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md201-5;
	if (count(Md201,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md201-4;
	if (count(Md201,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md201-3;
	if (count(Md201,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md201-2;
	if (count(Md201,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md201-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd201()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md201,dotrewrite-d201-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md201,dotrewrite-d201-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md201,dotrewrite-d201-2)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i7/2,i,i1,i2,i3,i7,Md201,dotrewrite-d201-3)
	#call replace(Q.p5,i3/2-i6/2-i7/2+i8/2,i,i3,i6,i7,i8,Md201,dotrewrite-d201-4)
#endif
#break
#endswitch
#break
*--#] d201 : 
*--#[ d223 :
#case Md223
#procedure SimpleDotd223()
if (count(Md223,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case 28
* path: (2, 4, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md223,dotrewrite-d223-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md223,dotrewrite-d223-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md223,dotrewrite-d223-2)
	#call replace(p1.p8,i1/2+i13+i14-i3/2+i7/2,i,i1,i13,i14,i3,i7,Md223,dotrewrite-d223-3)
	#call replace(p2.p8,`Q2'/2+i10+i11-i2/2-i7/2,i,i10,i11,i2,i7,Md223,dotrewrite-d223-4)
	#call replace(p4.p8,i11-i2/2+i4/2-i5/2+i6/2+i9,i,i11,i2,i4,i5,i6,i9,Md223,dotrewrite-d223-5)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case Q6
* path: (0, 6)
#case Q2
* path: (0, 6, 2)
#case Q1
* path: (0, 6, 2, 1)
#case Q4
* path: (0, 6, 4)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md223,dotrewrite-d223-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md223,dotrewrite-d223-1)
	#call replace(p2.p6,-i10-i11+i2,i,i10,i11,i2,Md223,dotrewrite-d223-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md223,dotrewrite-d223-3)
	#call replace(p4.p6,-i11+i2/2-i4/2+i5/2-i6/2,i,i11,i2,i4,i5,i6,Md223,dotrewrite-d223-4)
	#call replace(p1.p6,-i1/2+i12-i13-i14+i3/2-i7/2,i,i1,i12,i13,i14,i3,i7,Md223,dotrewrite-d223-5)
#endif
#break
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p2.p - p4.p - p6.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p7.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	if (count(Md223,1)) id p4.p7 = -i10 + i9;
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md223,dotrewrite-d223-1)
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md223,dotrewrite-d223-2)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md223,dotrewrite-d223-3)
	#call replace(p4.p6,-i11+i2/2-i4/2+i5/2-i6/2,i,i11,i2,i4,i5,i6,Md223,dotrewrite-d223-4)
	#call replace(p1.p6,-i1/2+i12-i13-i14+i3/2-i7/2,i,i1,i12,i13,i14,i3,i7,Md223,dotrewrite-d223-5)
	#call replace(p6.p7,`Q2'/2+i10+i11-i2+i6/2-i8/2,i,i10,i11,i2,i6,i8,Md223,dotrewrite-d223-6)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p3.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	#call replace(p1.p3,-i1/2-i3/2+i7/2,i,i1,i3,i7,Md223,dotrewrite-d223-0)
	#call replace(p3.p4,-i10-i13+i9,i,i10,i13,i9,Md223,dotrewrite-d223-1)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i7/2,i,i12,i2,i7,Md223,dotrewrite-d223-2)
	#call replace(Q.p5,i2/2-i6/2-i7/2+i8/2-i9,i,i2,i6,i7,i8,i9,Md223,dotrewrite-d223-3)
	#call replace(p4.p5,i10+i11-i2/2-i4/2-i5/2+i6/2,i,i10,i11,i2,i4,i5,i6,Md223,dotrewrite-d223-4)
	#call replace(p3.p5,-i11-i14+i2/2-i6/2-i7/2+i8/2-i9,i,i11,i14,i2,i6,i7,i8,i9,Md223,dotrewrite-d223-5)
#endif
#break
#case Q8
* path: (0, 1, 7, 8)
#case Q7
* path: (0, 8, 7)
#case 18
* path: (1, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p7.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p8.p - p4.p - p7.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	if (count(Md223,1)) id p4.p7 = -i10 + i9;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md223,dotrewrite-d223-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md223,dotrewrite-d223-2)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md223,dotrewrite-d223-3)
	#call replace(p1.p8,i1/2+i13+i14-i3/2+i7/2,i,i1,i13,i14,i3,i7,Md223,dotrewrite-d223-4)
	#call replace(p4.p8,i11-i2/2+i4/2-i5/2+i6/2+i9,i,i11,i2,i4,i5,i6,i9,Md223,dotrewrite-d223-5)
	#call replace(p7.p8,-i10-i11+i2/2-i6/2+i7/2+i8/2,i,i10,i11,i2,i6,i7,i8,Md223,dotrewrite-d223-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p7.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	if (count(Md223,1)) id p4.p7 = -i10 + i9;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md223,dotrewrite-d223-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md223,dotrewrite-d223-2)
	#call replace(Q.p5,i2/2-i6/2-i7/2+i8/2-i9,i,i2,i6,i7,i8,i9,Md223,dotrewrite-d223-3)
	#call replace(p4.p5,i10+i11-i2/2-i4/2-i5/2+i6/2,i,i10,i11,i2,i4,i5,i6,Md223,dotrewrite-d223-4)
	#call replace(p5.p7,-i11+i2/2-i6/2-i7/2+i8/2-i9,i,i11,i2,i6,i7,i8,i9,Md223,dotrewrite-d223-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 27
* path: (2, 1, 7)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md223,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md223-4;
	if (count(Md223,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md223-3;
	if (count(Md223,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md223-2;
	if (count(Md223,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md223-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd223()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md223,dotrewrite-d223-0)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md223,dotrewrite-d223-1)
	#call replace(Q.p5,i2/2-i6/2-i7/2+i8/2-i9,i,i2,i6,i7,i8,i9,Md223,dotrewrite-d223-2)
	#call replace(p4.p5,i10+i11-i2/2-i4/2-i5/2+i6/2,i,i10,i11,i2,i4,i5,i6,Md223,dotrewrite-d223-3)
#endif
#break
#endswitch
#break
*--#] d223 : 
*--#[ d224 :
#case Md224
#procedure SimpleDotd224()
if (count(Md224,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p3.p4^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q1
* path: (0, 6, 3, 1)
#case Q4
* path: (0, 6, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md224,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md224-4;
	if (count(Md224,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md224-3;
	if (count(Md224,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md224-2;
	if (count(Md224,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p3.p - p4.p - p6.p;
	.sort:momrewrite-Md224-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd224()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md224,dotrewrite-d224-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md224,dotrewrite-d224-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md224,dotrewrite-d224-2)
	#call replace(p1.p6,i12-i13-i14,i,i12,i13,i14,Md224,dotrewrite-d224-3)
	#call replace(p3.p6,-i10-i11+i3,i,i10,i11,i3,Md224,dotrewrite-d224-4)
	#call replace(p4.p6,-i11+i3/2-i4/2+i5/2-i6/2,i,i11,i3,i4,i5,i6,Md224,dotrewrite-d224-5)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 38
* path: (3, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md224,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p3.p - p4.p - p6.p;
	.sort:momrewrite-Md224-4;
	if (count(Md224,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md224-3;
	if (count(Md224,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md224-2;
	if (count(Md224,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md224-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd224()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md224,dotrewrite-d224-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md224,dotrewrite-d224-1)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md224,dotrewrite-d224-2)
	#call replace(p3.p8,`Q2'/2+i10+i11-i3/2-i7/2,i,i10,i11,i3,i7,Md224,dotrewrite-d224-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i12+i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md224,dotrewrite-d224-4)
	#call replace(p4.p8,i11-i3/2+i4/2-i5/2+i6/2+i9,i,i11,i3,i4,i5,i6,i9,Md224,dotrewrite-d224-5)
#endif
#break
#default
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md224,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p6.p + Q.p;
	.sort:momrewrite-Md224-4;
	if (count(Md224,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md224-3;
	if (count(Md224,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md224-2;
	if (count(Md224,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p4.p - p5.p;
	.sort:momrewrite-Md224-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd224()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md224,dotrewrite-d224-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md224,dotrewrite-d224-1)
	#call replace(Q.p5,i3/2-i6/2-i7/2+i8/2-i9,i,i3,i6,i7,i8,i9,Md224,dotrewrite-d224-2)
	#call replace(p4.p5,i10+i11-i3/2-i4/2-i5/2+i6/2,i,i10,i11,i3,i4,i5,i6,Md224,dotrewrite-d224-3)
#endif
#break
#endswitch
#break
*--#] d224 : 
*--#[ d123 :
#case Md123
#procedure SimpleDotd123()
if (count(Md123,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 2, 5)
#case Q2
* path: (0, 5, 2)
#case Q1
* path: (0, 5, 2, 1)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p5.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md123,dotrewrite-d123-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md123,dotrewrite-d123-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md123,dotrewrite-d123-2)
	#call replace(p1.p2,-i1/2+i3/2-i6/2+i8,i,i1,i3,i6,i8,Md123,dotrewrite-d123-3)
	#call replace(p1.p5,-i1/2+i3/2-i6/2+i8-i9,i,i1,i3,i6,i8,i9,Md123,dotrewrite-d123-4)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p4.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p6.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p3.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md123,dotrewrite-d123-0)
	#call replace(Q.p3,`Q2'/2-i2/2+i6/2-i8,i,i2,i6,i8,Md123,dotrewrite-d123-1)
	#call replace(Q.p4,i2/2-i5/2-i6/2+i7/2,i,i2,i5,i6,i7,Md123,dotrewrite-d123-2)
	#call replace(p3.p4,-i4/2-i6/2+i7/2-i9,i,i4,i6,i7,i9,Md123,dotrewrite-d123-3)
#endif
#break
#case Q7
* path: (0, 1, 6, 7)
#case Q6
* path: (0, 7, 6)
#case 17
* path: (1, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p6.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p7.p - p6.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md123,dotrewrite-d123-0)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md123,dotrewrite-d123-1)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md123,dotrewrite-d123-2)
	#call replace(p6.p7,-i4/2+i6/2+i7/2,i,i4,i6,i7,Md123,dotrewrite-d123-3)
	#call replace(p1.p7,i1/2-i3/2+i6/2+i9,i,i1,i3,i6,i9,Md123,dotrewrite-d123-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 27
* path: (2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md123,dotrewrite-d123-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md123,dotrewrite-d123-1)
	#call replace(p1.p2,-i1/2+i3/2-i6/2+i8,i,i1,i3,i6,i8,Md123,dotrewrite-d123-2)
	#call replace(Q.p4,i2/2-i5/2-i6/2+i7/2,i,i2,i5,i6,i7,Md123,dotrewrite-d123-3)
#endif
#break
#case Q7
* path: (0, 7)
#case 47
* path: (4, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p5.p + p4.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p4.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md123,dotrewrite-d123-0)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md123,dotrewrite-d123-1)
	#call replace(Q.p4,i2/2-i5/2-i6/2+i7/2,i,i2,i5,i6,i7,Md123,dotrewrite-d123-2)
	#call replace(p1.p7,i1/2-i3/2+i6/2+i9,i,i1,i3,i6,i9,Md123,dotrewrite-d123-3)
#endif
#break
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p6.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p7.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p4.p + p5.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md123,dotrewrite-d123-0)
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md123,dotrewrite-d123-1)
	#call replace(Q.p4,i2/2-i5/2-i6/2+i7/2,i,i2,i5,i6,i7,Md123,dotrewrite-d123-2)
	#call replace(p1.p5,-i1/2+i3/2-i6/2+i8-i9,i,i1,i3,i6,i8,i9,Md123,dotrewrite-d123-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q6
* path: (0, 1, 6)
#case 11
* path: (1,)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 56
* path: (5, 4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md123,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md123-4;
	if (count(Md123,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p6.p;
	.sort:momrewrite-Md123-3;
	if (count(Md123,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md123-2;
	if (count(Md123,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p6.p;
	.sort:momrewrite-Md123-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd123()
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md123,dotrewrite-d123-0)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md123,dotrewrite-d123-1)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md123,dotrewrite-d123-2)
	#call replace(Q.p4,i2/2-i5/2-i6/2+i7/2,i,i2,i5,i6,i7,Md123,dotrewrite-d123-3)
#endif
#break
#endswitch
#break
*--#] d123 : 
*--#[ d120 :
#case Md120
#procedure SimpleDotd120()
if (count(Md120,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p3^n? = i8^n;
	id p1.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md120,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md120-4;
	if (count(Md120,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md120-3;
	if (count(Md120,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md120-2;
	if (count(Md120,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md120-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd120()
	if (count(Md120,1)) id p1.p5 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md120,dotrewrite-d120-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md120,dotrewrite-d120-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md120,dotrewrite-d120-3)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md120,dotrewrite-d120-4)
#endif
#break
#case 37
* path: (3, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md120,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md120-4;
	if (count(Md120,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md120-3;
	if (count(Md120,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md120-2;
	if (count(Md120,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md120-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd120()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md120,dotrewrite-d120-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md120,dotrewrite-d120-1)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md120,dotrewrite-d120-2)
	#call replace(p3.p7,`Q2'/2+i4/2-i5/2-i6/2,i,i4,i5,i6,Md120,dotrewrite-d120-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i2/2-i8+i9,i,i1,i2,i8,i9,Md120,dotrewrite-d120-4)
#endif
#break
#case Q4
* path: (0, 5, 4)
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md120,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p4.p;
	.sort:momrewrite-Md120-4;
	if (count(Md120,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md120-3;
	if (count(Md120,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p4.p + p5.p;
	.sort:momrewrite-Md120-2;
	if (count(Md120,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md120-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd120()
	if (count(Md120,1)) id p1.p5 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md120,dotrewrite-d120-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md120,dotrewrite-d120-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md120,dotrewrite-d120-3)
	#call replace(Q.p4,i3/2-i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md120,dotrewrite-d120-4)
#endif
#break
#default
#case Q4
* path: (0, 1, 3, 4)
#case 14
* path: (1, 3, 4)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md120,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md120-4;
	if (count(Md120,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md120-3;
	if (count(Md120,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md120-2;
	if (count(Md120,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md120-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd120()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md120,dotrewrite-d120-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md120,dotrewrite-d120-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md120,dotrewrite-d120-2)
	#call replace(Q.p4,i3/2-i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md120,dotrewrite-d120-3)
#endif
#break
#endswitch
#break
*--#] d120 : 
*--#[ d249 :
#case Md249
#procedure SimpleDotd249()
if (count(Md249,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 2, 4, 8)
#case Q8
* path: (0, 8)
#case 18
* path: (1, 2, 4, 8)
#case 28
* path: (2, 4, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md249,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + Q.p - p8.p;
	.sort:momrewrite-Md249-4;
	if (count(Md249,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p;
	.sort:momrewrite-Md249-3;
	if (count(Md249,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md249-2;
	if (count(Md249,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md249-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd249()
	if (count(Md249,1)) id p1.p8 = i12 - i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md249,dotrewrite-d249-1)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md249,dotrewrite-d249-2)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md249,dotrewrite-d249-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md249,dotrewrite-d249-4)
	#call replace(p2.p8,`Q2'/2-i11+i2/2-i6/2,i,i11,i2,i6,Md249,dotrewrite-d249-5)
#endif
#break
#case 68
* path: (6, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md249,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p6.p;
	.sort:momrewrite-Md249-4;
	if (count(Md249,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p6.p;
	.sort:momrewrite-Md249-3;
	if (count(Md249,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + Q.p - p8.p;
	.sort:momrewrite-Md249-2;
	if (count(Md249,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md249-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd249()
	if (count(Md249,1)) id p4.p6 = i10 - i9;
	if (count(Md249,1)) id p1.p8 = i12 - i14;
	#call replace(Q.p6,-`Q2'/2+i2/2-i6/2,i,i2,i6,Md249,dotrewrite-d249-2)
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md249,dotrewrite-d249-3)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md249,dotrewrite-d249-4)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md249,dotrewrite-d249-5)
	#call replace(p6.p8,-i11+i2/2+i5/2-i6/2-i8/2,i,i11,i2,i5,i6,i8,Md249,dotrewrite-d249-6)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q6
* path: (0, 5, 6)
#case 16
* path: (1, 6)
#case 46
* path: (4, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md249,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md249-4;
	if (count(Md249,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p6.p;
	.sort:momrewrite-Md249-3;
	if (count(Md249,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p6.p;
	.sort:momrewrite-Md249-2;
	if (count(Md249,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md249-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd249()
	if (count(Md249,1)) id p4.p6 = i10 - i9;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md249,dotrewrite-d249-1)
	#call replace(Q.p6,-`Q2'/2+i2/2-i6/2,i,i2,i6,Md249,dotrewrite-d249-2)
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md249,dotrewrite-d249-3)
	#call replace(p4.p5,-i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md249,dotrewrite-d249-4)
	#call replace(p5.p6,-`Q2'/2+i11-i5/2+i8/2,i,i11,i5,i8,Md249,dotrewrite-d249-5)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md249,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md249-4;
	if (count(Md249,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p3.p;
	.sort:momrewrite-Md249-3;
	if (count(Md249,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md249-2;
	if (count(Md249,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md249-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd249()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md249,dotrewrite-d249-0)
	#call replace(p3.p4,-i10-i13+i9,i,i10,i13,i9,Md249,dotrewrite-d249-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md249,dotrewrite-d249-2)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i6/2,i,i12,i2,i6,Md249,dotrewrite-d249-3)
	#call replace(p4.p5,-i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md249,dotrewrite-d249-4)
	#call replace(p3.p5,`Q2'/2-i11-i14+i5/2-i8/2,i,i11,i14,i5,i8,Md249,dotrewrite-d249-5)
#endif
#break
#case 47
* path: (4, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md249,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + Q.p - p8.p;
	.sort:momrewrite-Md249-4;
	if (count(Md249,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p;
	.sort:momrewrite-Md249-3;
	if (count(Md249,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md249-2;
	if (count(Md249,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md249-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd249()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md249,dotrewrite-d249-0)
	#call replace(p1.p7,i12-i13-i14,i,i12,i13,i14,Md249,dotrewrite-d249-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md249,dotrewrite-d249-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md249,dotrewrite-d249-3)
	#call replace(Q.p7,`Q2'/2-i5/2+i8/2-i9,i,i5,i8,i9,Md249,dotrewrite-d249-4)
	#call replace(p2.p7,`Q2'/2-i10-i11+i2/2-i6/2,i,i10,i11,i2,i6,Md249,dotrewrite-d249-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 5)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q1
* path: (0, 5, 2, 1)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#case 26
* path: (2, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md249,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md249-4;
	if (count(Md249,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p;
	.sort:momrewrite-Md249-3;
	if (count(Md249,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md249-2;
	if (count(Md249,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md249-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd249()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md249,dotrewrite-d249-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md249,dotrewrite-d249-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md249,dotrewrite-d249-2)
	#call replace(p4.p5,-i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md249,dotrewrite-d249-3)
#endif
#break
#endswitch
#break
*--#] d249 : 
*--#[ d242 :
#case Md242
#procedure SimpleDotd242()
if (count(Md242,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p3.p4^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md242,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + Q.p - p8.p;
	.sort:momrewrite-Md242-4;
	if (count(Md242,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md242-3;
	if (count(Md242,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md242-2;
	if (count(Md242,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p7.p;
	.sort:momrewrite-Md242-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd242()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md242,dotrewrite-d242-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md242,dotrewrite-d242-1)
	#call replace(p4.p7,-i4/2-i7/2+i8/2,i,i4,i7,i8,Md242,dotrewrite-d242-2)
	#call replace(Q.p7,`Q2'/2-i5/2+i8/2-i9,i,i5,i8,i9,Md242,dotrewrite-d242-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i13-i14-i2/2,i,i1,i13,i14,i2,Md242,dotrewrite-d242-4)
	#call replace(p3.p7,`Q2'/2-i10-i11+i3/2-i6/2,i,i10,i11,i3,i6,Md242,dotrewrite-d242-5)
#endif
#break
#case Q8
* path: (0, 1, 3, 4, 8)
#case Q8
* path: (0, 8)
#case 18
* path: (1, 3, 4, 8)
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md242,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md242-4;
	if (count(Md242,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + Q.p - p8.p;
	.sort:momrewrite-Md242-3;
	if (count(Md242,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md242-2;
	if (count(Md242,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p4.p;
	.sort:momrewrite-Md242-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd242()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md242,dotrewrite-d242-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md242,dotrewrite-d242-1)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md242,dotrewrite-d242-2)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md242,dotrewrite-d242-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i14-i2/2,i,i1,i14,i2,Md242,dotrewrite-d242-4)
	#call replace(p3.p8,`Q2'/2-i11+i3/2-i6/2,i,i11,i3,i6,Md242,dotrewrite-d242-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md242,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + p8.p;
	.sort:momrewrite-Md242-4;
	if (count(Md242,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md242-3;
	if (count(Md242,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md242-2;
	if (count(Md242,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md242-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd242()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md242,dotrewrite-d242-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md242,dotrewrite-d242-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md242,dotrewrite-d242-2)
	#call replace(p4.p5,-i4/2+i7/2-i8/2+i9,i,i4,i7,i8,i9,Md242,dotrewrite-d242-3)
#endif
#break
#endswitch
#break
*--#] d242 : 
*--#[ d261 :
#case Md261
#procedure SimpleDotd261()
if (count(Md261,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p2.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md261,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md261-4;
	if (count(Md261,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p3.p;
	.sort:momrewrite-Md261-3;
	if (count(Md261,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md261-2;
	if (count(Md261,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md261-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd261()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md261,dotrewrite-d261-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md261,dotrewrite-d261-1)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i6/2,i,i12,i2,i6,Md261,dotrewrite-d261-2)
	#call replace(p3.p4,-i13-i4/2-i6/2+i7/2,i,i13,i4,i6,i7,Md261,dotrewrite-d261-3)
	#call replace(p3.p5,`Q2'/2-i10-i14+i5/2-i8/2,i,i10,i14,i5,i8,Md261,dotrewrite-d261-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case Q6
* path: (0, 5, 4, 6)
#case 16
* path: (1, 6)
#case 46
* path: (4, 6)
#case 56
* path: (5, 4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md261,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p6.p;
	.sort:momrewrite-Md261-4;
	if (count(Md261,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p - p1.p;
	.sort:momrewrite-Md261-3;
	if (count(Md261,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md261-2;
	if (count(Md261,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md261-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd261()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md261,dotrewrite-d261-0)
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md261,dotrewrite-d261-1)
	#call replace(p1.p6,i1/2-i3/2+i6/2,i,i1,i3,i6,Md261,dotrewrite-d261-2)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md261,dotrewrite-d261-3)
	#call replace(p5.p6,`Q2'/2-i10+i5/2-i8/2,i,i10,i5,i8,Md261,dotrewrite-d261-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 5)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q1
* path: (0, 5, 2, 1)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#case 44
* path: (4,)
#case 47
* path: (4, 2, 7)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md261,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md261-4;
	if (count(Md261,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md261-3;
	if (count(Md261,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md261-2;
	if (count(Md261,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md261-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd261()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md261,dotrewrite-d261-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md261,dotrewrite-d261-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md261,dotrewrite-d261-2)
	#call replace(p2.p4,i4/2+i6/2-i7/2+i9,i,i4,i6,i7,i9,Md261,dotrewrite-d261-3)
#endif
#break
#endswitch
#break
*--#] d261 : 
*--#[ d251 :
#case Md251
#procedure SimpleDotd251()
if (count(Md251,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p2.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md251,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md251-4;
	if (count(Md251,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + p1.p + p3.p;
	.sort:momrewrite-Md251-3;
	if (count(Md251,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md251-2;
	if (count(Md251,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md251-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd251()
	if (count(Md251,1)) id p3.p5 = i10 - i14;
	#call replace(p1.p3,-i1/2+i2/2-i3/2,i,i1,i2,i3,Md251,dotrewrite-d251-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md251,dotrewrite-d251-2)
	#call replace(Q.p3,`Q2'/2-i12+i2/2-i6/2,i,i12,i2,i6,Md251,dotrewrite-d251-3)
	#call replace(p3.p4,-i13+i4/2+i6/2-i7/2+i9,i,i13,i4,i6,i7,i9,Md251,dotrewrite-d251-4)
#endif
#break
#case Q6
* path: (0, 5, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 16
* path: (1, 6)
#case 46
* path: (4, 6)
#case 56
* path: (5, 4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md251,1)) id p2.p?!{p2,[P+p2],[P-p2],p5} = + Q.p - p6.p;
	.sort:momrewrite-Md251-4;
	if (count(Md251,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md251-3;
	if (count(Md251,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md251-2;
	if (count(Md251,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md251-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd251()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md251,dotrewrite-d251-0)
	#call replace(Q.p6,`Q2'/2-i2/2+i6/2,i,i2,i6,Md251,dotrewrite-d251-1)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md251,dotrewrite-d251-2)
	#call replace(p1.p6,-i1/2+i12-i2/2+i3/2,i,i1,i12,i2,i3,Md251,dotrewrite-d251-3)
	#call replace(p5.p6,`Q2'/2-i10+i5/2-i8/2,i,i10,i5,i8,Md251,dotrewrite-d251-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 2, 5)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q1
* path: (0, 5, 2, 1)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#case 44
* path: (4,)
#case 47
* path: (4, 2, 7)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md251,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md251-4;
	if (count(Md251,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p - p1.p;
	.sort:momrewrite-Md251-3;
	if (count(Md251,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md251-2;
	if (count(Md251,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md251-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd251()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md251,dotrewrite-d251-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md251,dotrewrite-d251-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md251,dotrewrite-d251-2)
	#call replace(p2.p4,i4/2+i6/2-i7/2+i9,i,i4,i6,i7,i9,Md251,dotrewrite-d251-3)
#endif
#break
#endswitch
#break
*--#] d251 : 
*--#[ d245 :
#case Md245
#procedure SimpleDotd245()
if (count(Md245,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md245,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md245-4;
	if (count(Md245,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p5} = + Q.p - p6.p;
	.sort:momrewrite-Md245-3;
	if (count(Md245,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md245-2;
	if (count(Md245,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md245-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd245()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md245,dotrewrite-d245-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md245,dotrewrite-d245-1)
	#call replace(Q.p6,`Q2'/2-i3/2+i6/2,i,i3,i6,Md245,dotrewrite-d245-2)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md245,dotrewrite-d245-3)
	#call replace(p1.p6,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md245,dotrewrite-d245-4)
	#call replace(p5.p6,`Q2'/2-i10+i5/2-i8/2,i,i10,i5,i8,Md245,dotrewrite-d245-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case Q6
* path: (0, 5, 3, 6)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 47
* path: (4, 3, 7)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 58
* path: (5, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md245,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md245-4;
	if (count(Md245,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md245-3;
	if (count(Md245,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md245-2;
	if (count(Md245,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md245-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd245()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md245,dotrewrite-d245-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md245,dotrewrite-d245-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md245,dotrewrite-d245-2)
	#call replace(p3.p4,i4/2+i6/2-i7/2+i9,i,i4,i6,i7,i9,Md245,dotrewrite-d245-3)
#endif
#break
#endswitch
#break
*--#] d245 : 
*--#[ d370 :
#case Md370
#procedure SimpleDotd370()
if (count(Md370,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p4^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q1
* path: (0, 6, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	if (count(Md370,1)) id p1.p6 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md370,dotrewrite-d370-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md370,dotrewrite-d370-3)
	#call replace(p4.p6,i11-i4/2+i8/2-i9/2,i,i11,i4,i8,i9,Md370,dotrewrite-d370-4)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md370,dotrewrite-d370-5)
#endif
#break
#case Q7
* path: (0, 6, 3, 7)
#case 67
* path: (6, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	if (count(Md370,1)) id p1.p6 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md370,dotrewrite-d370-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md370,dotrewrite-d370-3)
	#call replace(Q.p7,`Q2'-i10-i11,i,i10,i11,Md370,dotrewrite-d370-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Md370,dotrewrite-d370-5)
	#call replace(p3.p7,`Q2'/2-i11-i3/2+i4/2-i7/2,i,i11,i3,i4,i7,Md370,dotrewrite-d370-6)
	#call replace(p6.p7,`Q2'/2-i11-i3/2+i4/2+i5/2-i8/2,i,i11,i3,i4,i5,i8,Md370,dotrewrite-d370-7)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md370,dotrewrite-d370-1)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md370,dotrewrite-d370-2)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md370,dotrewrite-d370-3)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md370,dotrewrite-d370-4)
	#call replace(p1.p8,`Q2'/2+i1/2-i12-i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md370,dotrewrite-d370-5)
	#call replace(p3.p8,`Q2'/2-i11+i4/2+i5/2-i6/2-i7/2,i,i11,i4,i5,i6,i7,Md370,dotrewrite-d370-6)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-0)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md370,dotrewrite-d370-1)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md370,dotrewrite-d370-2)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md370,dotrewrite-d370-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i12-i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md370,dotrewrite-d370-4)
	#call replace(p3.p8,`Q2'/2-i11+i4/2+i5/2-i6/2-i7/2,i,i11,i4,i5,i6,i7,Md370,dotrewrite-d370-5)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	if (count(Md370,1)) id p1.p6 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md370,dotrewrite-d370-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md370,dotrewrite-d370-3)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md370,dotrewrite-d370-4)
	#call replace(p4.p6,i11-i4/2+i8/2-i9/2,i,i11,i4,i8,i9,Md370,dotrewrite-d370-5)
	#call replace(p4.p5,-`Q2'/2+i10-i3/2+i7/2-i8/2+i9/2,i,i10,i3,i7,i8,i9,Md370,dotrewrite-d370-6)
#endif
#break
#case 59
* path: (5, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p6.p + p5.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-0)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md370,dotrewrite-d370-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md370,dotrewrite-d370-2)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md370,dotrewrite-d370-3)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md370,dotrewrite-d370-4)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md370,dotrewrite-d370-5)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md370,dotrewrite-d370-6)
	#call replace(p5.p9,-`Q2'/2+i10-i3/2+i5/2+i9/2,i,i10,i3,i5,i9,Md370,dotrewrite-d370-7)
	#call replace(p1.p8,`Q2'/2+i1/2-i12-i13+i14-i2/2,i,i1,i12,i13,i14,i2,Md370,dotrewrite-d370-8)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 1, 7)
#case 15
* path: (1, 3, 5)
#case 17
* path: (1, 7)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p9.p - p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md370,dotrewrite-d370-1)
	#call replace(Q.p7,`Q2'-i10-i11,i,i10,i11,Md370,dotrewrite-d370-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md370,dotrewrite-d370-3)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md370,dotrewrite-d370-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i13-i2/2,i,i1,i12,i13,i2,Md370,dotrewrite-d370-5)
	#call replace(p3.p7,`Q2'/2-i11-i3/2+i4/2-i7/2,i,i11,i3,i4,i7,Md370,dotrewrite-d370-6)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md370,dotrewrite-d370-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md370,dotrewrite-d370-2)
	#call replace(p3.p9,i10-i3/2+i5/2-i6/2,i,i10,i3,i5,i6,Md370,dotrewrite-d370-3)
	#call replace(p1.p9,`Q2'/2+i1/2-i12+i14-i2/2,i,i1,i12,i14,i2,Md370,dotrewrite-d370-4)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md370,dotrewrite-d370-5)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md370,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md370-5;
	if (count(Md370,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md370-4;
	if (count(Md370,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md370-3;
	if (count(Md370,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md370-2;
	if (count(Md370,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md370-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd370()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md370,dotrewrite-d370-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md370,dotrewrite-d370-1)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md370,dotrewrite-d370-2)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md370,dotrewrite-d370-3)
	#call replace(p4.p5,-`Q2'/2+i10-i3/2+i7/2-i8/2+i9/2,i,i10,i3,i7,i8,i9,Md370,dotrewrite-d370-4)
#endif
#break
#endswitch
#break
*--#] d370 : 
*--#[ d342 :
#case Md342
#procedure SimpleDotd342()
if (count(Md342,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q1
* path: (0, 6, 3, 1)
#case 16
* path: (1, 3, 6)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p7.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	if (count(Md342,1)) id p1.p6 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md342,dotrewrite-d342-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md342,dotrewrite-d342-2)
	#call replace(p4.p6,i11-i4/2+i8/2-i9/2,i,i11,i4,i8,i9,Md342,dotrewrite-d342-3)
	#call replace(p1.p4,-i1/2+i12-i13+i2/2-i7/2,i,i1,i12,i13,i2,i7,Md342,dotrewrite-d342-4)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md342,dotrewrite-d342-5)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p8.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p7.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md342,dotrewrite-d342-0)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md342,dotrewrite-d342-1)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md342,dotrewrite-d342-2)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md342,dotrewrite-d342-3)
	#call replace(p1.p8,i1/2+i14-i2/2+i7/2,i,i1,i14,i2,i7,Md342,dotrewrite-d342-4)
	#call replace(p3.p8,`Q2'/2-i11+i4/2+i5/2-i6/2-i7/2,i,i11,i4,i5,i6,i7,Md342,dotrewrite-d342-5)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case Q7
* path: (0, 6, 5, 7)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p8.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p1.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p5.p + p6.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	if (count(Md342,1)) id p1.p6 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md342,dotrewrite-d342-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md342,dotrewrite-d342-2)
	#call replace(Q.p7,`Q2'-i10-i11,i,i10,i11,Md342,dotrewrite-d342-3)
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Md342,dotrewrite-d342-4)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md342,dotrewrite-d342-5)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md342,dotrewrite-d342-6)
	#call replace(p6.p7,`Q2'/2-i11-i3/2+i4/2+i5/2-i8/2,i,i11,i3,i4,i5,i8,Md342,dotrewrite-d342-7)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p7.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md342,dotrewrite-d342-0)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md342,dotrewrite-d342-1)
	#call replace(p1.p8,i1/2+i14-i2/2+i7/2,i,i1,i14,i2,i7,Md342,dotrewrite-d342-2)
	#call replace(p1.p4,-i1/2+i12-i13+i2/2-i7/2,i,i1,i12,i13,i2,i7,Md342,dotrewrite-d342-3)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md342,dotrewrite-d342-4)
	#call replace(p3.p8,`Q2'/2-i11+i4/2+i5/2-i6/2-i7/2,i,i11,i4,i5,i6,i7,Md342,dotrewrite-d342-5)
#endif
#break
#case 59
* path: (5, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p7.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p6.p + p5.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p8.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md342,dotrewrite-d342-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md342,dotrewrite-d342-1)
	#call replace(p1.p9,i12-i13+i14,i,i12,i13,i14,Md342,dotrewrite-d342-2)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md342,dotrewrite-d342-3)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md342,dotrewrite-d342-4)
	#call replace(Q.p8,`Q2'/2-i11-i6/2+i9/2,i,i11,i6,i9,Md342,dotrewrite-d342-5)
	#call replace(p1.p8,i1/2+i14-i2/2+i7/2,i,i1,i14,i2,i7,Md342,dotrewrite-d342-6)
	#call replace(p5.p9,-`Q2'/2+i10-i3/2+i5/2+i9/2,i,i10,i3,i5,i9,Md342,dotrewrite-d342-7)
#endif
#break
#case 12
* path: (1, 0, 2)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p8.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p5.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p2.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(p1.p2,-i1/2-i2/2+i7/2,i,i1,i2,i7,Md342,dotrewrite-d342-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md342,dotrewrite-d342-1)
	#call replace(Q.p2,`Q2'-i10-i11-i12,i,i10,i11,i12,Md342,dotrewrite-d342-2)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md342,dotrewrite-d342-3)
	#call replace(p2.p5,-i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md342,dotrewrite-d342-4)
	#call replace(p2.p3,`Q2'/2-i11-i13-i3/2+i4/2-i7/2,i,i11,i13,i3,i4,i7,Md342,dotrewrite-d342-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q3
* path: (0, 3)
#case Q5
* path: (0, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 37
* path: (3, 1, 7)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p9.p - p8.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p1.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md342,dotrewrite-d342-0)
	#call replace(Q.p7,`Q2'-i10-i11,i,i10,i11,Md342,dotrewrite-d342-1)
	#call replace(p1.p7,i1/2-i2/2+i7/2,i,i1,i2,i7,Md342,dotrewrite-d342-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md342,dotrewrite-d342-3)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md342,dotrewrite-d342-4)
	#call replace(p3.p7,`Q2'/2-i11-i3/2+i4/2-i7/2,i,i11,i3,i4,i7,Md342,dotrewrite-d342-5)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p7.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md342,dotrewrite-d342-0)
	#call replace(p1.p9,i12-i13+i14,i,i12,i13,i14,Md342,dotrewrite-d342-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md342,dotrewrite-d342-2)
	#call replace(p3.p9,i10-i3/2+i5/2-i6/2,i,i10,i3,i5,i6,Md342,dotrewrite-d342-3)
	#call replace(p1.p4,-i1/2+i12-i13+i2/2-i7/2,i,i1,i12,i13,i2,i7,Md342,dotrewrite-d342-4)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md342,dotrewrite-d342-5)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md342,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + p7.p;
	.sort:momrewrite-Md342-5;
	if (count(Md342,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + p8.p;
	.sort:momrewrite-Md342-4;
	if (count(Md342,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md342-3;
	if (count(Md342,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md342-2;
	if (count(Md342,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md342-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd342()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md342,dotrewrite-d342-0)
	#call replace(Q.p5,-`Q2'/2+i10-i6/2+i9/2,i,i10,i6,i9,Md342,dotrewrite-d342-1)
	#call replace(p1.p4,-i1/2+i12-i13+i2/2-i7/2,i,i1,i12,i13,i2,i7,Md342,dotrewrite-d342-2)
	#call replace(p3.p4,-`Q2'/2+i10+i11-i3/2-i4/2+i7/2,i,i10,i11,i3,i4,i7,Md342,dotrewrite-d342-3)
	#call replace(p4.p5,-`Q2'/2+i10-i3/2+i7/2-i8/2+i9/2,i,i10,i3,i7,i8,i9,Md342,dotrewrite-d342-4)
#endif
#break
#endswitch
#break
*--#] d342 : 
*--#[ d403 :
#case Md403
#procedure SimpleDotd403()
if (count(Md403,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p1^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p1.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	if (count(Md403,1)) id Q.p3 = i11 - i12;
	if (count(Md403,1)) id p3.p6 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md403,dotrewrite-d403-3)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md403,dotrewrite-d403-4)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md403,dotrewrite-d403-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i8/2,i,i1,i2,i5,i8,Md403,dotrewrite-d403-6)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-7)
#endif
#break
#case 37
* path: (3, 2, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p6} = + p2.p + p3.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p4.p - p7.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	if (count(Md403,1)) id Q.p3 = i11 - i12;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md403,dotrewrite-d403-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md403,dotrewrite-d403-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md403,dotrewrite-d403-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md403,dotrewrite-d403-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i8/2,i,i1,i2,i5,i8,Md403,dotrewrite-d403-6)
	#call replace(p2.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md403,dotrewrite-d403-7)
	#call replace(p3.p7,i1/2-i13+i14-i2/2+i5/2-i8/2,i,i1,i13,i14,i2,i5,i8,Md403,dotrewrite-d403-8)
#endif
#break
#case Q9
* path: (0, 9)
#case Q6
* path: (0, 9, 6)
#case 19
* path: (1, 9)
#case 16
* path: (1, 9, 6)
#case 29
* path: (2, 1, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md403,dotrewrite-d403-1)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md403,dotrewrite-d403-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-3)
	#call replace(p1.p9,-i1/2+i11-i4/2+i8/2,i,i1,i11,i4,i8,Md403,dotrewrite-d403-4)
	#call replace(p2.p9,i12-i2/2-i4/2+i5/2,i,i12,i2,i4,i5,Md403,dotrewrite-d403-5)
#endif
#break
#case Q10
* path: (0, 10)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md403,dotrewrite-d403-1)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md403,dotrewrite-d403-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-3)
	#call replace(p1.p10,-i1/2+i11+i13-i4/2+i8/2,i,i1,i11,i13,i4,i8,Md403,dotrewrite-d403-4)
	#call replace(p2.p10,i12+i14-i2/2-i4/2+i5/2,i,i12,i14,i2,i4,i5,Md403,dotrewrite-d403-5)
#endif
#break
#case 15
* path: (1, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p5.p - p8.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p8.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p8,-i1/2+i4/2-i8/2,i,i1,i4,i8,Md403,dotrewrite-d403-0)
	#call replace(p5.p8,i3/2-i5/2-i8/2,i,i3,i5,i8,Md403,dotrewrite-d403-1)
	#call replace(Q.p5,-`Q2'/2+i12-i4/2+i9/2,i,i12,i4,i9,Md403,dotrewrite-d403-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i8/2,i,i2,i3,i4,i8,Md403,dotrewrite-d403-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-4)
	#call replace(p5.p6,i14-i4/2-i6/2+i7/2,i,i14,i4,i6,i7,Md403,dotrewrite-d403-5)
	#call replace(Q.p8,`Q2'/2-i11+i4/2-i9/2,i,i11,i4,i9,Md403,dotrewrite-d403-6)
	#call replace(p6.p8,-i13+i4/2+i6/2-i7/2,i,i13,i4,i6,i7,Md403,dotrewrite-d403-7)
#endif
#break
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p6} = + p2.p + p3.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	if (count(Md403,1)) id Q.p3 = i11 - i12;
	if (count(Md403,1)) id p3.p6 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md403,dotrewrite-d403-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md403,dotrewrite-d403-4)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md403,dotrewrite-d403-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i8/2,i,i1,i2,i5,i8,Md403,dotrewrite-d403-6)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-7)
#endif
#break
#case Q10
* path: (0, 9, 10)
#case Q9
* path: (0, 10, 9)
#case Q1
* path: (0, 10, 9, 1)
#case 110
* path: (1, 9, 10)
#case 210
* path: (2, 1, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p10.p - p9.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md403,dotrewrite-d403-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md403,dotrewrite-d403-2)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md403,dotrewrite-d403-3)
	#call replace(p1.p9,-i1/2+i11-i4/2+i8/2,i,i1,i11,i4,i8,Md403,dotrewrite-d403-4)
	#call replace(p2.p9,i12-i2/2-i4/2+i5/2,i,i12,i2,i4,i5,Md403,dotrewrite-d403-5)
	#call replace(p1.p10,-i1/2+i11+i13-i4/2+i8/2,i,i1,i11,i13,i4,i8,Md403,dotrewrite-d403-6)
	#call replace(p2.p10,i12+i14-i2/2-i4/2+i5/2,i,i12,i14,i2,i4,i5,Md403,dotrewrite-d403-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case Q7
* path: (0, 9, 6, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 6, 9)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md403,dotrewrite-d403-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md403,dotrewrite-d403-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-3)
	#call replace(p1.p7,i1/2-i13+i4/2-i8/2,i,i1,i13,i4,i8,Md403,dotrewrite-d403-4)
	#call replace(p2.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md403,dotrewrite-d403-5)
#endif
#break
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p8.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p8.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(p1.p8,-i1/2+i4/2-i8/2,i,i1,i4,i8,Md403,dotrewrite-d403-1)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-2)
	#call replace(Q.p8,`Q2'/2-i11+i4/2-i9/2,i,i11,i4,i9,Md403,dotrewrite-d403-3)
	#call replace(p2.p8,-i1/2+i3/2+i4/2-i5/2,i,i1,i3,i4,i5,Md403,dotrewrite-d403-4)
	#call replace(p6.p8,-i13+i4/2+i6/2-i7/2,i,i13,i4,i6,i7,Md403,dotrewrite-d403-5)
#endif
#break
#case 39
* path: (3, 1, 9)
#case 36
* path: (3, 1, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	if (count(Md403,1)) id Q.p3 = i11 - i12;
	if (count(Md403,1)) id p3.p6 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-2)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md403,dotrewrite-d403-3)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md403,dotrewrite-d403-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-5)
	#call replace(p1.p9,-i1/2+i11-i4/2+i8/2,i,i1,i11,i4,i8,Md403,dotrewrite-d403-6)
	#call replace(p3.p9,-i1/2+i11-i12+i2/2-i5/2+i8/2,i,i1,i11,i12,i2,i5,i8,Md403,dotrewrite-d403-7)
#endif
#break
#case Q3
* path: (0, 10, 9, 1, 3)
#case 310
* path: (3, 1, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p10.p - p9.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	if (count(Md403,1)) id Q.p3 = i11 - i12;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md403,dotrewrite-d403-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md403,dotrewrite-d403-3)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md403,dotrewrite-d403-4)
	#call replace(p1.p9,-i1/2+i11-i4/2+i8/2,i,i1,i11,i4,i8,Md403,dotrewrite-d403-5)
	#call replace(p1.p10,-i1/2+i11+i13-i4/2+i8/2,i,i1,i11,i13,i4,i8,Md403,dotrewrite-d403-6)
	#call replace(p3.p9,-i1/2+i11-i12+i2/2-i5/2+i8/2,i,i1,i11,i12,i2,i5,i8,Md403,dotrewrite-d403-7)
	#call replace(p3.p10,-i1/2+i11-i12+i13-i14+i2/2-i5/2+i8/2,i,i1,i11,i12,i13,i14,i2,i5,i8,Md403,dotrewrite-d403-8)
#endif
#break
#case Q4
* path: (0, 7, 4)
#case Q2
* path: (0, 7, 4, 2)
#case 17
* path: (1, 2, 4, 7)
#case 27
* path: (2, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p4.p - p7.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p1.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md403,dotrewrite-d403-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md403,dotrewrite-d403-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md403,dotrewrite-d403-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md403,dotrewrite-d403-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md403,dotrewrite-d403-5)
	#call replace(p1.p7,i1/2-i13+i4/2-i8/2,i,i1,i13,i4,i8,Md403,dotrewrite-d403-6)
	#call replace(p2.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md403,dotrewrite-d403-7)
#endif
#break
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md403,dotrewrite-d403-1)
	#call replace(Q.p5,-`Q2'/2+i12-i4/2+i9/2,i,i12,i4,i9,Md403,dotrewrite-d403-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i8/2,i,i2,i3,i4,i8,Md403,dotrewrite-d403-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-4)
	#call replace(p5.p6,i14-i4/2-i6/2+i7/2,i,i14,i4,i6,i7,Md403,dotrewrite-d403-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 210
* path: (2, 4, 6, 10)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 410
* path: (4, 6, 10)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md403,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md403-6;
	if (count(Md403,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md403-5;
	if (count(Md403,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md403-4;
	if (count(Md403,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md403-3;
	if (count(Md403,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p1.p;
	.sort:momrewrite-Md403-2;
	if (count(Md403,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md403-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd403()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md403,dotrewrite-d403-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md403,dotrewrite-d403-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md403,dotrewrite-d403-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md403,dotrewrite-d403-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md403,dotrewrite-d403-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md403,dotrewrite-d403-5)
#endif
#break
#endswitch
#break
*--#] d403 : 
*--#[ d404 :
#case Md404
#procedure SimpleDotd404()
if (count(Md404,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p8.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md404,dotrewrite-d404-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md404,dotrewrite-d404-1)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-2)
	#call replace(p4.p8,i1/2-i4/2-i8/2,i,i1,i4,i8,Md404,dotrewrite-d404-3)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md404,dotrewrite-d404-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-5)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md404,dotrewrite-d404-6)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md404,dotrewrite-d404-7)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	if (count(Md404,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md404,dotrewrite-d404-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md404,dotrewrite-d404-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md404,dotrewrite-d404-3)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-5)
	#call replace(p2.p6,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md404,dotrewrite-d404-6)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md404,dotrewrite-d404-7)
#endif
#break
#case Q8
* path: (0, 10, 9, 8)
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md404,dotrewrite-d404-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md404,dotrewrite-d404-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md404,dotrewrite-d404-3)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-4)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md404,dotrewrite-d404-5)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md404,dotrewrite-d404-6)
	#call replace(p3.p10,i12-i13+i14+i3/2-i5/2+i8/2,i,i12,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-7)
	#call replace(p8.p10,i11-i2/2-i4/2-i6/2+i7/2+i8/2+i9/2,i,i11,i2,i4,i6,i7,i8,i9,Md404,dotrewrite-d404-8)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	if (count(Md404,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md404,dotrewrite-d404-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md404,dotrewrite-d404-2)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-4)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md404,dotrewrite-d404-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md404,dotrewrite-d404-6)
	#call replace(p2.p6,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md404,dotrewrite-d404-7)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p8.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(p1.p8,i1/2-i4/2+i8/2,i,i1,i4,i8,Md404,dotrewrite-d404-1)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-3)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md404,dotrewrite-d404-4)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md404,dotrewrite-d404-5)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	if (count(Md404,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md404,dotrewrite-d404-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md404,dotrewrite-d404-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md404,dotrewrite-d404-3)
	#call replace(p2.p4,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md404,dotrewrite-d404-4)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md404,dotrewrite-d404-5)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-6)
	#call replace(p2.p6,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md404,dotrewrite-d404-7)
#endif
#break
#case 39
* path: (3, 8, 9)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md404,dotrewrite-d404-1)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md404,dotrewrite-d404-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-4)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md404,dotrewrite-d404-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md404,dotrewrite-d404-6)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md404,dotrewrite-d404-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 6, 9)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md404,dotrewrite-d404-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md404,dotrewrite-d404-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-3)
	#call replace(p1.p7,i1/2-i11+i4/2-i8/2,i,i1,i11,i4,i8,Md404,dotrewrite-d404-4)
	#call replace(p3.p7,i13-i14-i3/2+i5/2-i8/2,i,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-5)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md404,dotrewrite-d404-1)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i4/2+i8/2,i,i2,i4,i8,Md404,dotrewrite-d404-4)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md404,dotrewrite-d404-5)
#endif
#break
#case 78
* path: (7, 4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p8.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p4.p - p7.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md404,dotrewrite-d404-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md404,dotrewrite-d404-1)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md404,dotrewrite-d404-2)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-3)
	#call replace(p4.p8,i1/2-i4/2-i8/2,i,i1,i4,i8,Md404,dotrewrite-d404-4)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md404,dotrewrite-d404-5)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md404,dotrewrite-d404-6)
	#call replace(p3.p7,i13-i14-i3/2+i5/2-i8/2,i,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-7)
	#call replace(p7.p8,i1/2-i11+i6/2-i7/2-i8/2,i,i1,i11,i6,i7,i8,Md404,dotrewrite-d404-8)
#endif
#break
#case Q7
* path: (0, 1, 4, 7)
#case Q4
* path: (0, 7, 4)
#case Q1
* path: (0, 7, 4, 1)
#case Q3
* path: (0, 7, 4, 3)
#case 17
* path: (1, 4, 7)
#case 27
* path: (2, 1, 4, 7)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p4.p - p7.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md404,dotrewrite-d404-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md404,dotrewrite-d404-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md404,dotrewrite-d404-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md404,dotrewrite-d404-4)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md404,dotrewrite-d404-5)
	#call replace(p1.p7,i1/2-i11+i4/2-i8/2,i,i1,i11,i4,i8,Md404,dotrewrite-d404-6)
	#call replace(p3.p7,i13-i14-i3/2+i5/2-i8/2,i,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-7)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p5.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(p3.p5,-i3/2-i5/2+i8/2,i,i3,i5,i8,Md404,dotrewrite-d404-1)
	#call replace(p1.p5,i1/2-i13-i4/2+i8/2,i,i1,i13,i4,i8,Md404,dotrewrite-d404-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-3)
	#call replace(Q.p5,i1/2-i12-i2/2-i4/2+i9/2,i,i1,i12,i2,i4,i9,Md404,dotrewrite-d404-4)
	#call replace(p5.p6,i11-i14-i4/2-i6/2+i7/2,i,i11,i14,i4,i6,i7,Md404,dotrewrite-d404-5)
#endif
#break
#case Q10
* path: (0, 10)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md404,dotrewrite-d404-1)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-3)
	#call replace(p1.p10,`Q2'/2+i11-i2/2-i4/2+i8/2,i,i11,i2,i4,i8,Md404,dotrewrite-d404-4)
	#call replace(p3.p10,i12-i13+i14+i3/2-i5/2+i8/2,i,i12,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-5)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 110
* path: (1, 2, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md404,dotrewrite-d404-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md404,dotrewrite-d404-2)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i4/2+i8/2,i,i2,i4,i8,Md404,dotrewrite-d404-4)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md404,dotrewrite-d404-5)
	#call replace(p1.p10,`Q2'/2+i11-i2/2-i4/2+i8/2,i,i11,i2,i4,i8,Md404,dotrewrite-d404-6)
	#call replace(p3.p10,i12-i13+i14+i3/2-i5/2+i8/2,i,i12,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-7)
#endif
#break
#case Q10
* path: (0, 2, 9, 10)
#case Q2
* path: (0, 10, 9, 2)
#case 210
* path: (2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	if (count(Md404,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md404,dotrewrite-d404-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md404,dotrewrite-d404-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md404,dotrewrite-d404-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md404,dotrewrite-d404-4)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md404,dotrewrite-d404-5)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md404,dotrewrite-d404-6)
	#call replace(p2.p10,i10/2-i11+i2/2+i4/2-i7/2-i8/2,i,i10,i11,i2,i4,i7,i8,Md404,dotrewrite-d404-7)
	#call replace(p3.p10,i12-i13+i14+i3/2-i5/2+i8/2,i,i12,i13,i14,i3,i5,i8,Md404,dotrewrite-d404-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 310
* path: (3, 4, 6, 10)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 410
* path: (4, 6, 10)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md404,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md404-6;
	if (count(Md404,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md404-5;
	if (count(Md404,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md404-4;
	if (count(Md404,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md404-3;
	if (count(Md404,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p;
	.sort:momrewrite-Md404-2;
	if (count(Md404,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md404-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd404()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md404,dotrewrite-d404-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md404,dotrewrite-d404-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md404,dotrewrite-d404-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md404,dotrewrite-d404-3)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md404,dotrewrite-d404-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md404,dotrewrite-d404-5)
#endif
#break
#endswitch
#break
*--#] d404 : 
*--#[ d405 :
#case Md405
#procedure SimpleDotd405()
if (count(Md405,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p8.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md405,dotrewrite-d405-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md405,dotrewrite-d405-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md405,dotrewrite-d405-2)
	#call replace(p4.p8,i1/2-i4/2-i8/2,i,i1,i4,i8,Md405,dotrewrite-d405-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-4)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md405,dotrewrite-d405-5)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md405,dotrewrite-d405-6)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md405,dotrewrite-d405-7)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q6
* path: (0, 2, 9, 6)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#case 27
* path: (2, 9, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	if (count(Md405,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md405,dotrewrite-d405-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md405,dotrewrite-d405-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md405,dotrewrite-d405-3)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-5)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md405,dotrewrite-d405-6)
	#call replace(p2.p6,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md405,dotrewrite-d405-7)
#endif
#break
#case Q8
* path: (0, 10, 9, 8)
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md405,dotrewrite-d405-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md405,dotrewrite-d405-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md405,dotrewrite-d405-2)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-3)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md405,dotrewrite-d405-4)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md405,dotrewrite-d405-5)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md405,dotrewrite-d405-6)
	#call replace(p3.p10,i12+i14-i3/2-i4/2+i5/2,i,i12,i14,i3,i4,i5,Md405,dotrewrite-d405-7)
	#call replace(p8.p10,i11-i2/2-i4/2-i6/2+i7/2+i8/2+i9/2,i,i11,i2,i4,i6,i7,i8,i9,Md405,dotrewrite-d405-8)
#endif
#break
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	if (count(Md405,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md405,dotrewrite-d405-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md405,dotrewrite-d405-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-3)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md405,dotrewrite-d405-4)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md405,dotrewrite-d405-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md405,dotrewrite-d405-6)
	#call replace(p2.p6,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md405,dotrewrite-d405-7)
#endif
#break
#case Q10
* path: (0, 10)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p6.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md405,dotrewrite-d405-1)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-3)
	#call replace(p1.p10,`Q2'/2+i11-i2/2-i4/2+i8/2,i,i11,i2,i4,i8,Md405,dotrewrite-d405-4)
	#call replace(p3.p10,i12+i14-i3/2-i4/2+i5/2,i,i12,i14,i3,i4,i5,Md405,dotrewrite-d405-5)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	if (count(Md405,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md405,dotrewrite-d405-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md405,dotrewrite-d405-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md405,dotrewrite-d405-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md405,dotrewrite-d405-4)
	#call replace(p2.p4,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md405,dotrewrite-d405-5)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-6)
	#call replace(p2.p6,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md405,dotrewrite-d405-7)
#endif
#break
#case 39
* path: (3, 8, 9)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md405,dotrewrite-d405-0)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md405,dotrewrite-d405-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-3)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md405,dotrewrite-d405-4)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md405,dotrewrite-d405-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md405,dotrewrite-d405-6)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md405,dotrewrite-d405-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 6, 9)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md405,dotrewrite-d405-1)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md405,dotrewrite-d405-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-3)
	#call replace(p1.p7,i1/2-i11+i4/2-i8/2,i,i1,i11,i4,i8,Md405,dotrewrite-d405-4)
	#call replace(p3.p7,-i14+i3/2+i4/2-i5/2,i,i14,i3,i4,i5,Md405,dotrewrite-d405-5)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 16
* path: (1, 2, 9, 6)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md405,dotrewrite-d405-1)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-2)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i4/2+i8/2,i,i2,i4,i8,Md405,dotrewrite-d405-4)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md405,dotrewrite-d405-5)
#endif
#break
#case 78
* path: (7, 4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p8.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p4.p - p7.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md405,dotrewrite-d405-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md405,dotrewrite-d405-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md405,dotrewrite-d405-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md405,dotrewrite-d405-3)
	#call replace(p4.p8,i1/2-i4/2-i8/2,i,i1,i4,i8,Md405,dotrewrite-d405-4)
	#call replace(p3.p7,-i14+i3/2+i4/2-i5/2,i,i14,i3,i4,i5,Md405,dotrewrite-d405-5)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md405,dotrewrite-d405-6)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md405,dotrewrite-d405-7)
	#call replace(p7.p8,i1/2-i11+i6/2-i7/2-i8/2,i,i1,i11,i6,i7,i8,Md405,dotrewrite-d405-8)
#endif
#break
#case Q7
* path: (0, 1, 3, 4, 7)
#case Q4
* path: (0, 7, 4)
#case Q3
* path: (0, 7, 4, 3)
#case 17
* path: (1, 3, 4, 7)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p4.p - p7.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md405,dotrewrite-d405-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md405,dotrewrite-d405-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md405,dotrewrite-d405-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md405,dotrewrite-d405-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md405,dotrewrite-d405-5)
	#call replace(p1.p7,i1/2-i11+i4/2-i8/2,i,i1,i11,i4,i8,Md405,dotrewrite-d405-6)
	#call replace(p3.p7,-i14+i3/2+i4/2-i5/2,i,i14,i3,i4,i5,Md405,dotrewrite-d405-7)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p + p5.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md405,dotrewrite-d405-1)
	#call replace(Q.p5,`Q2'/2-i12+i4/2-i9/2,i,i12,i4,i9,Md405,dotrewrite-d405-2)
	#call replace(p1.p5,i1/2-i13+i4/2-i8/2,i,i1,i13,i4,i8,Md405,dotrewrite-d405-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-4)
	#call replace(p5.p6,-i14+i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md405,dotrewrite-d405-5)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case Q1
* path: (0, 10, 9, 2, 1)
#case 110
* path: (1, 2, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md405,dotrewrite-d405-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md405,dotrewrite-d405-2)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i4/2+i8/2,i,i2,i4,i8,Md405,dotrewrite-d405-4)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md405,dotrewrite-d405-5)
	#call replace(p1.p10,`Q2'/2+i11-i2/2-i4/2+i8/2,i,i11,i2,i4,i8,Md405,dotrewrite-d405-6)
	#call replace(p3.p10,i12+i14-i3/2-i4/2+i5/2,i,i12,i14,i3,i4,i5,Md405,dotrewrite-d405-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p8.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(p1.p8,i1/2-i4/2+i8/2,i,i1,i4,i8,Md405,dotrewrite-d405-1)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-2)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md405,dotrewrite-d405-3)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md405,dotrewrite-d405-4)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md405,dotrewrite-d405-5)
#endif
#break
#case Q10
* path: (0, 2, 9, 10)
#case Q2
* path: (0, 10, 9, 2)
#case 210
* path: (2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p4.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	if (count(Md405,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md405,dotrewrite-d405-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md405,dotrewrite-d405-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md405,dotrewrite-d405-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md405,dotrewrite-d405-4)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md405,dotrewrite-d405-5)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md405,dotrewrite-d405-6)
	#call replace(p3.p10,i12+i14-i3/2-i4/2+i5/2,i,i12,i14,i3,i4,i5,Md405,dotrewrite-d405-7)
	#call replace(p2.p10,i10/2-i11+i2/2+i4/2-i7/2-i8/2,i,i10,i11,i2,i4,i7,i8,Md405,dotrewrite-d405-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 310
* path: (3, 4, 6, 10)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 410
* path: (4, 6, 10)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md405,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md405-6;
	if (count(Md405,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md405-5;
	if (count(Md405,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md405-4;
	if (count(Md405,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md405-3;
	if (count(Md405,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p;
	.sort:momrewrite-Md405-2;
	if (count(Md405,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md405-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd405()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md405,dotrewrite-d405-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md405,dotrewrite-d405-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md405,dotrewrite-d405-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md405,dotrewrite-d405-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md405,dotrewrite-d405-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md405,dotrewrite-d405-5)
#endif
#break
#endswitch
#break
*--#] d405 : 
*--#[ d406 :
#case Md406
#procedure SimpleDotd406()
if (count(Md406,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p4^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 36
* path: (3, 6)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-1)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-3)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(p3.p8,i1/2+i10/2-i12-i4/2+i5/2-i7/2-i9/2,i,i1,i10,i12,i4,i5,i7,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case Q8
* path: (0, 7, 5, 8)
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p8.p - p5.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md406,dotrewrite-d406-0)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-1)
	#call replace(p6.p7,-i10/2+i12-i6/2+i9/2,i,i10,i12,i6,i9,Md406,dotrewrite-d406-2)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-3)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-4)
	#call replace(p7.p8,i1/2-i13+i6/2-i7/2-i8/2,i,i1,i13,i6,i7,i8,Md406,dotrewrite-d406-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-6)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-7)
	#call replace(p5.p7,-i13+i14+i3/2-i5/2+i6/2-i7/2,i,i13,i14,i3,i5,i6,i7,Md406,dotrewrite-d406-8)
#endif
#break
#case Q10
* path: (0, 2, 9, 10)
#case Q9
* path: (0, 10, 9)
#case Q2
* path: (0, 10, 9, 2)
#case 110
* path: (1, 2, 9, 10)
#case 210
* path: (2, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1,p4} = + p10.p - p9.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-0)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md406,dotrewrite-d406-2)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-3)
	#call replace(p2.p4,-i1/2+i11+i3/2-i4/2,i,i1,i11,i3,i4,Md406,dotrewrite-d406-4)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-5)
	#call replace(p4.p9,-i1/2+i11+i3/2-i5/2+i8/2,i,i1,i11,i3,i5,i8,Md406,dotrewrite-d406-6)
	#call replace(p2.p10,i12-i13+i2/2-i8/2+i9/2,i,i12,i13,i2,i8,i9,Md406,dotrewrite-d406-7)
	#call replace(p4.p10,-i1/2+i11+i14+i3/2-i5/2+i8/2,i,i1,i11,i14,i3,i5,i8,Md406,dotrewrite-d406-8)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1,p4} = + p10.p - p9.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md406,dotrewrite-d406-2)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-3)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-4)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-5)
	#call replace(p4.p9,-i1/2+i11+i3/2-i5/2+i8/2,i,i1,i11,i3,i5,i8,Md406,dotrewrite-d406-6)
	#call replace(p4.p10,-i1/2+i11+i14+i3/2-i5/2+i8/2,i,i1,i11,i14,i3,i5,i8,Md406,dotrewrite-d406-7)
	#call replace(p8.p10,i10/2-i12+i13-i2/2-i6/2+i8/2,i,i10,i12,i13,i2,i6,i8,Md406,dotrewrite-d406-8)
#endif
#break
#case Q3
* path: (0, 7, 3)
#case Q4
* path: (0, 7, 3, 4)
#case 37
* path: (3, 7)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md406,dotrewrite-d406-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-3)
	#call replace(p6.p7,-i10/2+i12-i6/2+i9/2,i,i10,i12,i6,i9,Md406,dotrewrite-d406-4)
	#call replace(p4.p7,i1/2-i14-i3/2+i5/2-i8/2,i,i1,i14,i3,i5,i8,Md406,dotrewrite-d406-5)
	#call replace(p3.p7,-i10/2+i12-i13+i14+i3/2-i5/2+i7/2+i9/2,i,i10,i12,i13,i14,i3,i5,i7,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case 39
* path: (3, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-1)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-3)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-4)
	#call replace(p4.p9,-i1/2+i11+i3/2-i5/2+i8/2,i,i1,i11,i3,i5,i8,Md406,dotrewrite-d406-5)
	#call replace(p3.p9,`Q2'/2+i1/2+i10/2-i11-i12-i2/2-i3/2+i5/2-i7/2-i9/2,i,i1,i10,i11,i12,i2,i3,i5,i7,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 22
* path: (2,)
#case 24
* path: (2, 1, 4)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#case 44
* path: (4,)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#case 79
* path: (7, 6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-2)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-3)
	#call replace(p2.p4,-i1/2+i11+i3/2-i4/2,i,i1,i11,i3,i4,Md406,dotrewrite-d406-4)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-5)
	#call replace(p4.p9,-i1/2+i11+i3/2-i5/2+i8/2,i,i1,i11,i3,i5,i8,Md406,dotrewrite-d406-6)
#endif
#break
#case Q5
* path: (0, 7, 5)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md406,dotrewrite-d406-1)
	#call replace(p6.p7,-i10/2+i12-i6/2+i9/2,i,i10,i12,i6,i9,Md406,dotrewrite-d406-2)
	#call replace(p4.p7,i1/2-i14-i3/2+i5/2-i8/2,i,i1,i14,i3,i5,i8,Md406,dotrewrite-d406-3)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(p5.p7,-i13+i14+i3/2-i5/2+i6/2-i7/2,i,i13,i14,i3,i5,i6,i7,Md406,dotrewrite-d406-6)
#endif
#break
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p8.p - p5.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-2)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-3)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-6)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-7)
	#call replace(p2.p5,i1/2-i11-i2/2-i3/2+i4/2-i8/2+i9/2,i,i1,i11,i2,i3,i4,i8,i9,Md406,dotrewrite-d406-8)
#endif
#break
#case 310
* path: (3, 6, 10)
#case 410
* path: (4, 3, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md406,dotrewrite-d406-2)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-3)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-4)
	#call replace(p4.p10,-i1/2+i11+i14+i3/2-i5/2+i8/2,i,i1,i11,i14,i3,i5,i8,Md406,dotrewrite-d406-5)
	#call replace(p3.p10,`Q2'/2+i1/2+i10/2-i11-i12+i13-i14-i2/2-i3/2+i5/2-i7/2-i9/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i5,i7,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 18
* path: (1, 2, 8)
#case 28
* path: (2, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-2)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-3)
	#call replace(p2.p4,-i1/2+i11+i3/2-i4/2,i,i1,i11,i3,i4,Md406,dotrewrite-d406-4)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-5)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md406,dotrewrite-d406-2)
	#call replace(p2.p4,-i1/2+i11+i3/2-i4/2,i,i1,i11,i3,i4,Md406,dotrewrite-d406-3)
	#call replace(p6.p7,-i10/2+i12-i6/2+i9/2,i,i10,i12,i6,i9,Md406,dotrewrite-d406-4)
	#call replace(p4.p7,i1/2-i14-i3/2+i5/2-i8/2,i,i1,i14,i3,i5,i8,Md406,dotrewrite-d406-5)
	#call replace(p2.p7,`Q2'/2-i1/2-i12+i13+i8/2-i9/2,i,i1,i12,i13,i8,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = - p3.p + p1.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p2.p6 = i12 - i13;
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-3)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-4)
	#call replace(p2.p3,`Q2'/2-i11-i2/2-i3/2+i4/2,i,i11,i2,i3,i4,Md406,dotrewrite-d406-5)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-6)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-7)
	#call replace(p3.p8,i1/2+i10/2-i12-i4/2+i5/2-i7/2-i9/2,i,i1,i10,i12,i4,i5,i7,i9,Md406,dotrewrite-d406-8)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-3)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(p1.p8,i1/2+i10/2-i12-i7/2+i8/2-i9/2,i,i1,i10,i12,i7,i8,i9,Md406,dotrewrite-d406-6)
	#call replace(p3.p8,i1/2+i10/2-i12-i4/2+i5/2-i7/2-i9/2,i,i1,i10,i12,i4,i5,i7,i9,Md406,dotrewrite-d406-7)
#endif
#break
#case Q10
* path: (0, 10)
#case 610
* path: (6, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md406,dotrewrite-d406-2)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-3)
	#call replace(p2.p4,-i1/2+i11+i3/2-i4/2,i,i1,i11,i3,i4,Md406,dotrewrite-d406-4)
	#call replace(p2.p10,i12-i13+i2/2-i8/2+i9/2,i,i12,i13,i2,i8,i9,Md406,dotrewrite-d406-5)
	#call replace(p4.p10,-i1/2+i11+i14+i3/2-i5/2+i8/2,i,i1,i11,i14,i3,i5,i8,Md406,dotrewrite-d406-6)
#endif
#break
#case 35
* path: (3, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-1)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-3)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p3.p5,i10/2-i12+i3/2+i5/2-i7/2-i9/2,i,i10,i12,i3,i5,i7,i9,Md406,dotrewrite-d406-5)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-0)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-1)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-2)
	#call replace(p4.p9,-i1/2+i11+i3/2-i5/2+i8/2,i,i1,i11,i3,i5,i8,Md406,dotrewrite-d406-3)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(p5.p9,i1/2-i11-i2/2-i3/2+i5/2+i9/2,i,i1,i11,i2,i3,i5,i9,Md406,dotrewrite-d406-6)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case Q1
* path: (0, 7, 3, 1)
#case 17
* path: (1, 3, 7)
#case 27
* path: (2, 1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p8.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md406,dotrewrite-d406-3)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-4)
	#call replace(p6.p7,-i10/2+i12-i6/2+i9/2,i,i10,i12,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(p1.p7,i1/2-i10/2+i12-i13+i7/2-i8/2+i9/2,i,i1,i10,i12,i13,i7,i8,i9,Md406,dotrewrite-d406-6)
	#call replace(p3.p7,-i10/2+i12-i13+i14+i3/2-i5/2+i7/2+i9/2,i,i10,i12,i13,i14,i3,i5,i7,i9,Md406,dotrewrite-d406-7)
#endif
#break
#case 58
* path: (5, 8)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p8.p - p5.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-0)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-2)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-3)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-6)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-7)
	#call replace(p5.p9,i1/2-i11-i2/2-i3/2+i5/2+i9/2,i,i1,i11,i2,i3,i5,i9,Md406,dotrewrite-d406-8)
#endif
#break
#case 510
* path: (5, 6, 10)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md406,dotrewrite-d406-1)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-2)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-3)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-4)
	#call replace(p4.p10,-i1/2+i11+i14+i3/2-i5/2+i8/2,i,i1,i11,i14,i3,i5,i8,Md406,dotrewrite-d406-5)
	#call replace(p5.p10,i1/2+i10/2-i11-i12+i13-i14-i2/2-i3/2+i5/2-i6/2,i,i1,i10,i11,i12,i13,i14,i2,i3,i5,i6,Md406,dotrewrite-d406-6)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p4.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	if (count(Md406,1)) id p3.p6 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md406,dotrewrite-d406-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md406,dotrewrite-d406-3)
	#call replace(Q.p5,i1/2+i10/2-i11-i12-i2/2-i7/2,i,i1,i10,i11,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p3.p5,i10/2-i12+i3/2+i5/2-i7/2-i9/2,i,i10,i12,i3,i5,i7,i9,Md406,dotrewrite-d406-5)
	#call replace(p5.p6,i10/2-i12+i13-i14-i6/2-i9/2,i,i10,i12,i13,i14,i6,i9,Md406,dotrewrite-d406-6)
	#call replace(p1.p5,i10/2-i12+i3/2-i4/2-i7/2+i8/2-i9/2,i,i10,i12,i3,i4,i7,i8,i9,Md406,dotrewrite-d406-7)
#endif
#break
#case 49
* path: (4, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-0)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md406,dotrewrite-d406-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md406,dotrewrite-d406-2)
	#call replace(Q.p9,`Q2'/2+i10/2-i12-i7/2,i,i10,i12,i7,Md406,dotrewrite-d406-3)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-4)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-5)
	#call replace(p4.p9,-i1/2+i11+i3/2-i5/2+i8/2,i,i1,i11,i3,i5,i8,Md406,dotrewrite-d406-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md406,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md406-6;
	if (count(Md406,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md406-5;
	if (count(Md406,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md406-4;
	if (count(Md406,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md406-3;
	if (count(Md406,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md406-2;
	if (count(Md406,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p4.p;
	.sort:momrewrite-Md406-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd406()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md406,dotrewrite-d406-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md406,dotrewrite-d406-1)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md406,dotrewrite-d406-2)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i7/2,i,i1,i10,i12,i2,i7,Md406,dotrewrite-d406-3)
	#call replace(p6.p8,i10/2-i12+i13-i6/2-i9/2,i,i10,i12,i13,i6,i9,Md406,dotrewrite-d406-4)
	#call replace(p1.p8,i1/2+i10/2-i12-i7/2+i8/2-i9/2,i,i1,i10,i12,i7,i8,i9,Md406,dotrewrite-d406-5)
#endif
#break
#endswitch
#break
*--#] d406 : 
*--#[ d407 :
#case Md407
#procedure SimpleDotd407()
if (count(Md407,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md407,dotrewrite-d407-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md407,dotrewrite-d407-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md407,dotrewrite-d407-3)
	#call replace(p3.p10,i12-i13+i14,i,i12,i13,i14,Md407,dotrewrite-d407-4)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md407,dotrewrite-d407-6)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md407,dotrewrite-d407-7)
	#call replace(p8.p10,i11-i2/2-i5/2-i6/2+i7/2+i8/2+i9/2,i,i11,i2,i5,i6,i7,i8,i9,Md407,dotrewrite-d407-8)
#endif
#break
#case Q8
* path: (0, 7, 5, 8)
#case 27
* path: (2, 8, 5, 7)
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p5.p + p8.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p5.p - p7.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p7 = i13 - i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md407,dotrewrite-d407-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md407,dotrewrite-d407-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md407,dotrewrite-d407-3)
	#call replace(p5.p8,i1/2-i5/2-i8/2,i,i1,i5,i8,Md407,dotrewrite-d407-4)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md407,dotrewrite-d407-5)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md407,dotrewrite-d407-6)
	#call replace(p7.p8,i1/2-i11+i6/2-i7/2-i8/2,i,i1,i11,i6,i7,i8,Md407,dotrewrite-d407-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case Q6
* path: (0, 2, 9, 6)
#case 22
* path: (2,)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md407,dotrewrite-d407-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md407,dotrewrite-d407-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md407,dotrewrite-d407-3)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md407,dotrewrite-d407-5)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-6)
	#call replace(p2.p6,i10/2-i11+i5/2-i7/2-i9/2,i,i10,i11,i5,i7,i9,Md407,dotrewrite-d407-7)
#endif
#break
#case 39
* path: (3, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md407,dotrewrite-d407-1)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md407,dotrewrite-d407-3)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-4)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md407,dotrewrite-d407-5)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md407,dotrewrite-d407-6)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md407,dotrewrite-d407-7)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case Q1
* path: (0, 10, 9, 2, 1)
#case 110
* path: (1, 2, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md407,dotrewrite-d407-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md407,dotrewrite-d407-4)
	#call replace(p3.p10,i12-i13+i14,i,i12,i13,i14,Md407,dotrewrite-d407-5)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-6)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i8/2,i,i2,i5,i8,Md407,dotrewrite-d407-7)
	#call replace(p1.p10,`Q2'/2+i11-i2/2-i5/2+i8/2,i,i11,i2,i5,i8,Md407,dotrewrite-d407-8)
#endif
#break
#case Q10
* path: (0, 10)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p7.p + p6.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md407,dotrewrite-d407-2)
	#call replace(p3.p10,i12-i13+i14,i,i12,i13,i14,Md407,dotrewrite-d407-3)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-4)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-5)
	#call replace(p1.p10,`Q2'/2+i11-i2/2-i5/2+i8/2,i,i11,i2,i5,i8,Md407,dotrewrite-d407-6)
#endif
#break
#case Q7
* path: (0, 1, 3, 5, 7)
#case Q5
* path: (0, 7, 5)
#case Q3
* path: (0, 7, 5, 3)
#case 17
* path: (1, 3, 5, 7)
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p5.p - p7.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md407,dotrewrite-d407-3)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md407,dotrewrite-d407-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md407,dotrewrite-d407-5)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md407,dotrewrite-d407-6)
	#call replace(p1.p7,i1/2-i11+i5/2-i8/2,i,i1,i11,i5,i8,Md407,dotrewrite-d407-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 6, 9)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p6.p + p7.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md407,dotrewrite-d407-3)
	#call replace(p6.p7,i5/2-i6/2-i7/2,i,i5,i6,i7,Md407,dotrewrite-d407-4)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-5)
	#call replace(p1.p7,i1/2-i11+i5/2-i8/2,i,i1,i11,i5,i8,Md407,dotrewrite-d407-6)
#endif
#break
#case 25
* path: (2, 8, 5)
#case 58
* path: (5, 8)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p + p9.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p5.p + p8.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md407,dotrewrite-d407-0)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md407,dotrewrite-d407-1)
	#call replace(p5.p8,i1/2-i5/2-i8/2,i,i1,i5,i8,Md407,dotrewrite-d407-2)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md407,dotrewrite-d407-4)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md407,dotrewrite-d407-5)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md407,dotrewrite-d407-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 16
* path: (1, 2, 9, 6)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md407,dotrewrite-d407-3)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-4)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-5)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i8/2,i,i2,i5,i8,Md407,dotrewrite-d407-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p7.p + p6.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md407,dotrewrite-d407-0)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md407,dotrewrite-d407-1)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md407,dotrewrite-d407-2)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md407,dotrewrite-d407-4)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md407,dotrewrite-d407-5)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md407,dotrewrite-d407-6)
	#call replace(p2.p6,i10/2-i11+i5/2-i7/2-i9/2,i,i10,i11,i5,i7,i9,Md407,dotrewrite-d407-7)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p1.p - p8.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-1)
	#call replace(p1.p8,i1/2-i5/2+i8/2,i,i1,i5,i8,Md407,dotrewrite-d407-2)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md407,dotrewrite-d407-4)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md407,dotrewrite-d407-5)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md407,dotrewrite-d407-6)
#endif
#break
#case Q10
* path: (0, 2, 9, 10)
#case Q2
* path: (0, 10, 9, 2)
#case 210
* path: (2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	if (count(Md407,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md407,dotrewrite-d407-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md407,dotrewrite-d407-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md407,dotrewrite-d407-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md407,dotrewrite-d407-4)
	#call replace(p3.p10,i12-i13+i14,i,i12,i13,i14,Md407,dotrewrite-d407-5)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md407,dotrewrite-d407-6)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md407,dotrewrite-d407-7)
	#call replace(p2.p10,i10/2-i11+i2/2+i5/2-i7/2-i8/2,i,i10,i11,i2,i5,i7,i8,Md407,dotrewrite-d407-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#case 310
* path: (3, 5, 6, 10)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#case 510
* path: (5, 6, 10)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md407,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md407-6;
	if (count(Md407,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md407-5;
	if (count(Md407,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md407-4;
	if (count(Md407,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md407-3;
	if (count(Md407,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md407-2;
	if (count(Md407,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md407-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd407()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md407,dotrewrite-d407-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md407,dotrewrite-d407-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md407,dotrewrite-d407-2)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md407,dotrewrite-d407-3)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md407,dotrewrite-d407-4)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md407,dotrewrite-d407-5)
#endif
#break
#endswitch
#break
*--#] d407 : 
*--#[ d408 :
#case Md408
#procedure SimpleDotd408()
if (count(Md408,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p7^n? = i12^n;
	id p3.p7^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 7, 9)
#case Q1
* path: (0, 7, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 17
* path: (1, 2, 9, 7)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p9.p - p2.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + Q.p + p9.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md408,dotrewrite-d408-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-2)
	#call replace(Q.p9,-`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-3)
	#call replace(p1.p9,-`Q2'/2+i2/2+i5/2-i8/2,i,i2,i5,i8,Md408,dotrewrite-d408-4)
	#call replace(p3.p9,-i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md408,dotrewrite-d408-5)
	#call replace(p7.p9,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md408,dotrewrite-d408-6)
#endif
#break
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p - p6.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p6.p7 = i13 - i14;
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md408,dotrewrite-d408-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-3)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md408,dotrewrite-d408-4)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md408,dotrewrite-d408-5)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md408,dotrewrite-d408-6)
	#call replace(p2.p7,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md408,dotrewrite-d408-7)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-8)
	#call replace(p2.p6,-`Q2'/2+i11-i3/2+i4/2-i8/2+i9/2,i,i11,i3,i4,i8,i9,Md408,dotrewrite-d408-9)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 9, 5)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - Q.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md408,dotrewrite-d408-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md408,dotrewrite-d408-4)
	#call replace(p2.p5,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md408,dotrewrite-d408-5)
	#call replace(p2.p7,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md408,dotrewrite-d408-6)
#endif
#break
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p5.p + p8.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - Q.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p6.p7 = i13 - i14;
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-4)
	#call replace(p5.p8,i1/2-i5/2-i8/2,i,i1,i5,i8,Md408,dotrewrite-d408-5)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md408,dotrewrite-d408-6)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md408,dotrewrite-d408-7)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-8)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q7
* path: (0, 2, 9, 7)
#case Q2
* path: (0, 7, 9, 2)
#case 29
* path: (2, 9)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + Q.p + p9.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p9.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md408,dotrewrite-d408-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-1)
	#call replace(Q.p9,-`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-2)
	#call replace(p2.p9,-i2/2+i8/2-i9/2,i,i2,i8,i9,Md408,dotrewrite-d408-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md408,dotrewrite-d408-4)
	#call replace(p2.p7,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md408,dotrewrite-d408-5)
	#call replace(p3.p9,-i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md408,dotrewrite-d408-6)
	#call replace(p7.p9,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md408,dotrewrite-d408-7)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p - p6.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p6.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p4.p7 = i12 - i13;
	if (count(Md408,1)) id p6.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-3)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md408,dotrewrite-d408-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md408,dotrewrite-d408-6)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md408,dotrewrite-d408-7)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p - p6.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md408,dotrewrite-d408-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md408,dotrewrite-d408-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md408,dotrewrite-d408-4)
	#call replace(p2.p7,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md408,dotrewrite-d408-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-6)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md408,dotrewrite-d408-7)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p - p6.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p6.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md408,dotrewrite-d408-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-4)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md408,dotrewrite-d408-5)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i8/2,i,i3,i4,i5,i8,Md408,dotrewrite-d408-6)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p - p6.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p6.p7 = i13 - i14;
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-3)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md408,dotrewrite-d408-4)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md408,dotrewrite-d408-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-6)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md408,dotrewrite-d408-7)
#endif
#break
#case 49
* path: (4, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + Q.p + p9.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p4.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p4.p7 = i12 - i13;
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-2)
	#call replace(p4.p8,i4/2-i6/2+i8/2,i,i4,i6,i8,Md408,dotrewrite-d408-3)
	#call replace(Q.p9,-`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-4)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md408,dotrewrite-d408-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md408,dotrewrite-d408-6)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-7)
	#call replace(p7.p9,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md408,dotrewrite-d408-8)
	#call replace(p4.p9,-`Q2'/2+i11+i2/2-i3/2+i6/2-i8/2,i,i11,i2,i3,i6,i8,Md408,dotrewrite-d408-9)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p - p6.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p4.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p4.p7 = i12 - i13;
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-3)
	#call replace(p4.p8,i4/2-i6/2+i8/2,i,i4,i6,i8,Md408,dotrewrite-d408-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md408,dotrewrite-d408-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-6)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md408,dotrewrite-d408-7)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p - p8.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p1.p - p8.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md408,dotrewrite-d408-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-3)
	#call replace(p1.p8,i1/2-i5/2+i8/2,i,i1,i5,i8,Md408,dotrewrite-d408-4)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-5)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md408,dotrewrite-d408-6)
#endif
#break
#case Q6
* path: (0, 7, 5, 6)
#case 56
* path: (5, 6)
#case 67
* path: (6, 5, 7)
#case 69
* path: (6, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - Q.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p6.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md408,dotrewrite-d408-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-2)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md408,dotrewrite-d408-3)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-5)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md408,dotrewrite-d408-6)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i8/2,i,i3,i4,i5,i8,Md408,dotrewrite-d408-7)
#endif
#break
#case Q8
* path: (0, 7, 9, 8)
#case 78
* path: (7, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p8.p - p9.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + Q.p + p9.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p7.p8 = i12 - i14;
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-1)
	#call replace(Q.p9,-`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-2)
	#call replace(p8.p9,i2/2-i8/2-i9/2,i,i2,i8,i9,Md408,dotrewrite-d408-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md408,dotrewrite-d408-4)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md408,dotrewrite-d408-5)
	#call replace(p3.p9,-i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md408,dotrewrite-d408-6)
	#call replace(p7.p9,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md408,dotrewrite-d408-7)
#endif
#break
#case Q4
* path: (0, 7, 5, 3, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - Q.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p4.p7 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md408,dotrewrite-d408-5)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i8/2,i,i1,i3,i6,i8,Md408,dotrewrite-d408-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - Q.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	if (count(Md408,1)) id p4.p7 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md408,dotrewrite-d408-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-3)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md408,dotrewrite-d408-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md408,dotrewrite-d408-6)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i8/2,i,i1,i3,i6,i8,Md408,dotrewrite-d408-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case Q3
* path: (0, 7, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 39
* path: (3, 5, 9)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 59
* path: (5, 9)
#case 77
* path: (7,)
#case 710
* path: (7, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md408,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md408-6;
	if (count(Md408,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md408-5;
	if (count(Md408,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md408-4;
	if (count(Md408,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md408-3;
	if (count(Md408,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md408-2;
	if (count(Md408,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p - Q.p;
	.sort:momrewrite-Md408-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd408()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md408,dotrewrite-d408-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md408,dotrewrite-d408-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md408,dotrewrite-d408-2)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md408,dotrewrite-d408-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md408,dotrewrite-d408-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md408,dotrewrite-d408-5)
#endif
#break
#endswitch
#break
*--#] d408 : 
*--#[ d409 :
#case Md409
#procedure SimpleDotd409()
if (count(Md409,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p7^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 7, 9)
#case 19
* path: (1, 2, 9)
#case 17
* path: (1, 2, 9, 7)
#case 39
* path: (3, 1, 2, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md409,dotrewrite-d409-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md409,dotrewrite-d409-2)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Md409,dotrewrite-d409-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i8/2,i,i2,i5,i8,Md409,dotrewrite-d409-4)
	#call replace(p3.p9,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md409,dotrewrite-d409-5)
#endif
#break
#case 69
* path: (6, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md409,dotrewrite-d409-1)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Md409,dotrewrite-d409-2)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md409,dotrewrite-d409-3)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-4)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-5)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-6)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-7)
	#call replace(p6.p9,-`Q2'/2+i11-i3/2+i6/2+i9/2,i,i11,i3,i6,i9,Md409,dotrewrite-d409-8)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case 56
* path: (5, 6)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md409,dotrewrite-d409-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md409,dotrewrite-d409-1)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md409,dotrewrite-d409-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-3)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-4)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i8/2,i,i3,i4,i5,i8,Md409,dotrewrite-d409-5)
	#call replace(p5.p7,-i10/2+i12+i7/2+i9/2,i,i10,i12,i7,i9,Md409,dotrewrite-d409-6)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-7)
#endif
#break
#case Q8
* path: (0, 5, 6, 8)
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p5.p + p8.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md409,dotrewrite-d409-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-1)
	#call replace(p5.p8,i1/2-i5/2-i8/2,i,i1,i5,i8,Md409,dotrewrite-d409-2)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-3)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-4)
	#call replace(p5.p7,-i10/2+i12+i7/2+i9/2,i,i10,i12,i7,i9,Md409,dotrewrite-d409-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-6)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-7)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-8)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case Q7
* path: (0, 2, 9, 7)
#case Q2
* path: (0, 7, 9, 2)
#case 22
* path: (2,)
#case 29
* path: (2, 9)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md409,dotrewrite-d409-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md409,dotrewrite-d409-2)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md409,dotrewrite-d409-3)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Md409,dotrewrite-d409-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md409,dotrewrite-d409-5)
	#call replace(p3.p9,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md409,dotrewrite-d409-6)
#endif
#break
#case Q4
* path: (0, 5, 3, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md409,dotrewrite-d409-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md409,dotrewrite-d409-4)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i8/2,i,i1,i3,i6,i8,Md409,dotrewrite-d409-5)
	#call replace(p5.p7,-i10/2+i12+i7/2+i9/2,i,i10,i12,i7,i9,Md409,dotrewrite-d409-6)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p6.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-2)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md409,dotrewrite-d409-4)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-5)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md409,dotrewrite-d409-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md409,dotrewrite-d409-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md409,dotrewrite-d409-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-4)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md409,dotrewrite-d409-5)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-6)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md409,dotrewrite-d409-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-2)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-3)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i8/2,i,i3,i4,i5,i8,Md409,dotrewrite-d409-4)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-5)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-0)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-1)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-3)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md409,dotrewrite-d409-4)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-5)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-6)
#endif
#break
#case 49
* path: (4, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p4.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p4.p7 = i13 - i14;
	#call replace(p4.p8,i4/2-i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md409,dotrewrite-d409-2)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Md409,dotrewrite-d409-3)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md409,dotrewrite-d409-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md409,dotrewrite-d409-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-6)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-7)
	#call replace(p4.p9,`Q2'/2-i11-i2/2+i3/2-i6/2+i8/2,i,i11,i2,i3,i6,i8,Md409,dotrewrite-d409-8)
#endif
#break
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md409,dotrewrite-d409-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md409,dotrewrite-d409-2)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-3)
	#call replace(Q.p6,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md409,dotrewrite-d409-4)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-5)
	#call replace(p6.p7,i10/2-i12+i14-i7/2-i9/2,i,i10,i12,i14,i7,i9,Md409,dotrewrite-d409-6)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-7)
	#call replace(p2.p6,-`Q2'/2+i11-i3/2+i4/2-i8/2+i9/2,i,i11,i3,i4,i8,i9,Md409,dotrewrite-d409-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p4.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(p4.p8,i4/2-i6/2+i8/2,i,i4,i6,i8,Md409,dotrewrite-d409-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md409,dotrewrite-d409-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-4)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md409,dotrewrite-d409-5)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-6)
#endif
#break
#case 78
* path: (7, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md409,dotrewrite-d409-0)
	#call replace(p7.p9,i10/2-i7/2-i9/2,i,i10,i7,i9,Md409,dotrewrite-d409-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md409,dotrewrite-d409-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-3)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md409,dotrewrite-d409-4)
	#call replace(p3.p9,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md409,dotrewrite-d409-5)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-6)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p8.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p8.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md409,dotrewrite-d409-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(p1.p8,i1/2-i5/2+i8/2,i,i1,i5,i8,Md409,dotrewrite-d409-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md409,dotrewrite-d409-3)
	#call replace(p3.p8,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md409,dotrewrite-d409-4)
	#call replace(p7.p8,i10/2-i12+i13-i7/2-i9/2,i,i10,i12,i13,i7,i9,Md409,dotrewrite-d409-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	if (count(Md409,1)) id p4.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md409,dotrewrite-d409-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md409,dotrewrite-d409-3)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md409,dotrewrite-d409-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md409,dotrewrite-d409-5)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i8/2,i,i1,i3,i6,i8,Md409,dotrewrite-d409-6)
	#call replace(p5.p7,-i10/2+i12+i7/2+i9/2,i,i10,i12,i7,i9,Md409,dotrewrite-d409-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case Q7
* path: (0, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 59
* path: (5, 7, 9)
#case 77
* path: (7,)
#case 710
* path: (7, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md409,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p - p9.p;
	.sort:momrewrite-Md409-6;
	if (count(Md409,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md409-5;
	if (count(Md409,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md409-4;
	if (count(Md409,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md409-3;
	if (count(Md409,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md409-2;
	if (count(Md409,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md409-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd409()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md409,dotrewrite-d409-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md409,dotrewrite-d409-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md409,dotrewrite-d409-2)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md409,dotrewrite-d409-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md409,dotrewrite-d409-4)
	#call replace(p5.p7,-i10/2+i12+i7/2+i9/2,i,i10,i12,i7,i9,Md409,dotrewrite-d409-5)
#endif
#break
#endswitch
#break
*--#] d409 : 
*--#[ d410 :
#case Md410
#procedure SimpleDotd410()
if (count(Md410,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p7^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-0)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-1)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-2)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md410,dotrewrite-d410-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p9.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md410,dotrewrite-d410-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(p1.p9,i1/2-i5/2+i9/2,i,i1,i5,i9,Md410,dotrewrite-d410-2)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-3)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md410,dotrewrite-d410-4)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-5)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q7
* path: (0, 2, 10, 7)
#case Q2
* path: (0, 10, 2)
#case 210
* path: (2, 10)
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md410,dotrewrite-d410-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md410,dotrewrite-d410-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md410,dotrewrite-d410-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md410,dotrewrite-d410-4)
	#call replace(p3.p10,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md410,dotrewrite-d410-5)
	#call replace(p7.p10,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Md410,dotrewrite-d410-6)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md410,dotrewrite-d410-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md410,dotrewrite-d410-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md410,dotrewrite-d410-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md410,dotrewrite-d410-5)
	#call replace(p2.p5,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md410,dotrewrite-d410-6)
#endif
#break
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md410,dotrewrite-d410-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md410,dotrewrite-d410-2)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-4)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-6)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-7)
	#call replace(p2.p6,-`Q2'/2+i10/2+i11-i3/2+i4/2-i9/2,i,i10,i11,i3,i4,i9,Md410,dotrewrite-d410-8)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md410,dotrewrite-d410-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md410,dotrewrite-d410-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md410,dotrewrite-d410-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md410,dotrewrite-d410-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-6)
#endif
#break
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p5.p + p9.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md410,dotrewrite-d410-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md410,dotrewrite-d410-2)
	#call replace(p5.p9,i1/2-i5/2-i9/2,i,i1,i5,i9,Md410,dotrewrite-d410-3)
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-5)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-7)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-8)
#endif
#break
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 2, 1)
#case 110
* path: (1, 2, 10)
#case 17
* path: (1, 2, 10, 7)
#case 310
* path: (3, 1, 2, 10)
#case 710
* path: (7, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md410,dotrewrite-d410-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md410,dotrewrite-d410-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i5/2+i9/2,i,i2,i5,i9,Md410,dotrewrite-d410-3)
	#call replace(p3.p10,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md410,dotrewrite-d410-4)
	#call replace(p7.p10,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Md410,dotrewrite-d410-5)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p6.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-2)
	#call replace(p4.p6,-i4/2-i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md410,dotrewrite-d410-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-5)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-6)
#endif
#break
#case 610
* path: (6, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p6.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(p6.p9,-i4/2+i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md410,dotrewrite-d410-1)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md410,dotrewrite-d410-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-3)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-6)
	#call replace(p7.p10,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Md410,dotrewrite-d410-7)
	#call replace(p6.p10,-`Q2'/2+i10/2+i11-i3/2+i6/2,i,i10,i11,i3,i6,Md410,dotrewrite-d410-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p4.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(p4.p9,i4/2-i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md410,dotrewrite-d410-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-4)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md410,dotrewrite-d410-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-6)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p2.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md410,dotrewrite-d410-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-3)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i9/2,i,i3,i4,i5,i9,Md410,dotrewrite-d410-4)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-5)
#endif
#break
#case Q4
* path: (0, 10, 9, 4)
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p4.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p4.p7 = i13 - i14;
	#call replace(p4.p9,i4/2-i6/2+i9/2,i,i4,i6,i9,Md410,dotrewrite-d410-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md410,dotrewrite-d410-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md410,dotrewrite-d410-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md410,dotrewrite-d410-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-5)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-6)
	#call replace(p7.p10,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Md410,dotrewrite-d410-7)
	#call replace(p4.p10,`Q2'/2-i11-i2/2+i3/2-i6/2+i9/2,i,i11,i2,i3,i6,i9,Md410,dotrewrite-d410-8)
#endif
#break
#case Q6
* path: (0, 7, 5, 6)
#case 56
* path: (5, 6)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md410,dotrewrite-d410-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md410,dotrewrite-d410-1)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Md410,dotrewrite-d410-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md410,dotrewrite-d410-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i5/2,i,i10,i11,i5,Md410,dotrewrite-d410-5)
	#call replace(p1.p6,i3/2-i4/2-i5/2+i9/2,i,i3,i4,i5,i9,Md410,dotrewrite-d410-6)
	#call replace(p6.p7,i14-i5/2-i7/2+i8/2,i,i14,i5,i7,i8,Md410,dotrewrite-d410-7)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 79
* path: (7, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p + p9.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md410,dotrewrite-d410-0)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md410,dotrewrite-d410-1)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md410,dotrewrite-d410-2)
	#call replace(p3.p9,i1/2-i4/2-i5/2+i6/2,i,i1,i4,i5,i6,Md410,dotrewrite-d410-3)
	#call replace(p7.p9,i13-i5/2-i7/2+i8/2,i,i13,i5,i7,i8,Md410,dotrewrite-d410-4)
	#call replace(p3.p10,i11-i3/2-i5/2+i6/2,i,i11,i3,i5,i6,Md410,dotrewrite-d410-5)
	#call replace(p7.p10,i12-i5/2-i7/2+i8/2,i,i12,i5,i7,i8,Md410,dotrewrite-d410-6)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p4.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md410,dotrewrite-d410-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-3)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md410,dotrewrite-d410-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md410,dotrewrite-d410-5)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i9/2,i,i1,i3,i6,i9,Md410,dotrewrite-d410-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	if (count(Md410,1)) id p4.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md410,dotrewrite-d410-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-2)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md410,dotrewrite-d410-3)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Md410,dotrewrite-d410-4)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md410,dotrewrite-d410-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md410,dotrewrite-d410-6)
	#call replace(p4.p5,i1/2-i3/2+i6/2-i9/2,i,i1,i3,i6,i9,Md410,dotrewrite-d410-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case Q3
* path: (0, 7, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 510
* path: (5, 7, 10)
#case 77
* path: (7,)
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md410,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md410-6;
	if (count(Md410,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md410-5;
	if (count(Md410,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md410-4;
	if (count(Md410,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md410-3;
	if (count(Md410,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md410-2;
	if (count(Md410,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Md410-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd410()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md410,dotrewrite-d410-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md410,dotrewrite-d410-1)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md410,dotrewrite-d410-2)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Md410,dotrewrite-d410-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md410,dotrewrite-d410-4)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md410,dotrewrite-d410-5)
#endif
#break
#endswitch
#break
*--#] d410 : 
*--#[ d199 :
#case Md199
#procedure SimpleDotd199()
if (count(Md199,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md199,dotrewrite-d199-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md199,dotrewrite-d199-2)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i7/2,i,i1,i3,i5,i7,Md199,dotrewrite-d199-3)
	#call replace(Q.p5,i1/2-i2/2-i6/2+i8/2-i9,i,i1,i2,i6,i8,i9,Md199,dotrewrite-d199-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md199,dotrewrite-d199-1)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-2)
	#call replace(p2.p4,-i1/2+i3/2-i4/2+i9,i,i1,i3,i4,i9,Md199,dotrewrite-d199-3)
	#call replace(Q.p7,i1/2-i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md199,dotrewrite-d199-4)
#endif
#break
#case 57
* path: (5, 7)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p6.p + p7.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md199,dotrewrite-d199-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md199,dotrewrite-d199-1)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-2)
	#call replace(p6.p7,i1/2-i6/2-i7/2,i,i1,i6,i7,Md199,dotrewrite-d199-3)
	#call replace(Q.p7,i1/2-i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md199,dotrewrite-d199-4)
	#call replace(Q.p5,i1/2-i2/2-i6/2+i8/2-i9,i,i1,i2,i6,i8,i9,Md199,dotrewrite-d199-5)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md199,dotrewrite-d199-1)
	#call replace(p5.p7,-i4/2+i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-2)
	#call replace(Q.p7,i1/2-i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md199,dotrewrite-d199-3)
	#call replace(Q.p5,i1/2-i2/2-i6/2+i8/2-i9,i,i1,i2,i6,i8,i9,Md199,dotrewrite-d199-4)
	#call replace(p2.p5,i1/2-i2/2-i3/2+i4/2-i7/2+i8/2-i9,i,i1,i2,i3,i4,i7,i8,i9,Md199,dotrewrite-d199-5)
#endif
#break
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md199,dotrewrite-d199-1)
	#call replace(p2.p4,-i1/2+i3/2-i4/2+i9,i,i1,i3,i4,i9,Md199,dotrewrite-d199-2)
	#call replace(p2.p6,`Q2'/2-i1/2+i7/2-i8/2,i,i1,i7,i8,Md199,dotrewrite-d199-3)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i7/2,i,i1,i3,i5,i7,Md199,dotrewrite-d199-4)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 48
* path: (4, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md199,dotrewrite-d199-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md199,dotrewrite-d199-2)
	#call replace(Q.p7,i1/2-i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md199,dotrewrite-d199-3)
	#call replace(p4.p8,-i1/2+i3/2-i5/2+i7/2+i9,i,i1,i3,i5,i7,i9,Md199,dotrewrite-d199-4)
#endif
#break
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 2, 1)
#case 18
* path: (1, 2, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-1)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md199,dotrewrite-d199-2)
	#call replace(p1.p8,`Q2'/2-i2/2-i6/2+i7/2,i,i2,i6,i7,Md199,dotrewrite-d199-3)
	#call replace(p4.p8,-i1/2+i3/2-i5/2+i7/2+i9,i,i1,i3,i5,i7,i9,Md199,dotrewrite-d199-4)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q2
* path: (0, 8, 2)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p7.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p8.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(Q.p8,`Q2'/2-i6/2+i8/2,i,i6,i8,Md199,dotrewrite-d199-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md199,dotrewrite-d199-2)
	#call replace(p2.p4,-i1/2+i3/2-i4/2+i9,i,i1,i3,i4,i9,Md199,dotrewrite-d199-3)
	#call replace(p4.p8,-i1/2+i3/2-i5/2+i7/2+i9,i,i1,i3,i5,i7,i9,Md199,dotrewrite-d199-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p7.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-1)
	#call replace(p1.p7,i1/2-i6/2+i7/2,i,i1,i6,i7,Md199,dotrewrite-d199-2)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-3)
	#call replace(Q.p7,i1/2-i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md199,dotrewrite-d199-4)
#endif
#break
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md199,dotrewrite-d199-1)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md199,dotrewrite-d199-3)
	#call replace(Q.p5,i1/2-i2/2-i6/2+i8/2-i9,i,i1,i2,i6,i8,i9,Md199,dotrewrite-d199-4)
#endif
#break
#case 37
* path: (3, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p4.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-0)
	#call replace(p4.p7,i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-1)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md199,dotrewrite-d199-2)
	#call replace(Q.p7,i1/2-i2/2-i6/2+i8/2,i,i1,i2,i6,i8,Md199,dotrewrite-d199-3)
	#call replace(p3.p7,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md199,dotrewrite-d199-4)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p6.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md199,dotrewrite-d199-2)
	#call replace(p1.p6,i1/2+i6/2-i7/2,i,i1,i6,i7,Md199,dotrewrite-d199-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md199,dotrewrite-d199-4)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md199,dotrewrite-d199-5)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p4.p?!{p4,[P+p4],[P-p4],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md199,dotrewrite-d199-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md199,dotrewrite-d199-3)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md199,dotrewrite-d199-4)
	#call replace(Q.p5,i1/2-i2/2-i6/2+i8/2-i9,i,i1,i2,i6,i8,i9,Md199,dotrewrite-d199-5)
#endif
#break
#case Q3
* path: (0, 6, 3)
#case Q4
* path: (0, 6, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 6)
#case 38
* path: (3, 6, 8)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p4.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md199,dotrewrite-d199-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md199,dotrewrite-d199-2)
	#call replace(Q.p3,`Q2'/2+i1/2-i2/2-i9,i,i1,i2,i9,Md199,dotrewrite-d199-3)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i7/2,i,i1,i3,i5,i7,Md199,dotrewrite-d199-4)
#endif
#break
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-1)
	#call replace(p4.p5,-i4/2-i5/2+i7/2,i,i4,i5,i7,Md199,dotrewrite-d199-2)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md199,dotrewrite-d199-3)
	#call replace(Q.p5,i1/2-i2/2-i6/2+i8/2-i9,i,i1,i2,i6,i8,i9,Md199,dotrewrite-d199-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md199,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md199-5;
	if (count(Md199,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md199-4;
	if (count(Md199,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md199-3;
	if (count(Md199,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p6.p;
	.sort:momrewrite-Md199-2;
	if (count(Md199,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p6.p;
	.sort:momrewrite-Md199-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd199()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md199,dotrewrite-d199-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md199,dotrewrite-d199-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i8/2,i,i6,i8,Md199,dotrewrite-d199-2)
	#call replace(p1.p6,i1/2+i6/2-i7/2,i,i1,i6,i7,Md199,dotrewrite-d199-3)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i7/2,i,i1,i3,i5,i7,Md199,dotrewrite-d199-4)
#endif
#break
#endswitch
#break
*--#] d199 : 
*--#[ d358 :
#case Md358
#procedure SimpleDotd358()
if (count(Md358,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p6} = + p2.p + p3.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	if (count(Md358,1)) id Q.p3 = i10 - i11;
	if (count(Md358,1)) id p3.p6 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md358,dotrewrite-d358-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md358,dotrewrite-d358-4)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md358,dotrewrite-d358-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i8/2,i,i1,i2,i5,i8,Md358,dotrewrite-d358-6)
#endif
#break
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p5.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p5.p - p2.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md358,dotrewrite-d358-1)
	#call replace(Q.p5,-`Q2'/2+i11-i4/2+i9/2,i,i11,i4,i9,Md358,dotrewrite-d358-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i8/2,i,i2,i3,i4,i8,Md358,dotrewrite-d358-3)
	#call replace(p5.p6,i14-i4/2-i6/2+i7/2,i,i14,i4,i6,i7,Md358,dotrewrite-d358-4)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q2
* path: (0, 9, 1, 2)
#case Q6
* path: (0, 9, 6)
#case 19
* path: (1, 9)
#case 16
* path: (1, 9, 6)
#case 29
* path: (2, 1, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p8.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md358,dotrewrite-d358-1)
	#call replace(p1.p9,-i1/2+i10-i4/2+i8/2,i,i1,i10,i4,i8,Md358,dotrewrite-d358-2)
	#call replace(p2.p9,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md358,dotrewrite-d358-3)
	#call replace(p6.p9,i12-i4/2-i6/2+i7/2,i,i12,i4,i6,i7,Md358,dotrewrite-d358-4)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p1.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	if (count(Md358,1)) id Q.p3 = i10 - i11;
	if (count(Md358,1)) id p3.p6 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md358,dotrewrite-d358-3)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md358,dotrewrite-d358-4)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md358,dotrewrite-d358-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i8/2,i,i1,i2,i5,i8,Md358,dotrewrite-d358-6)
#endif
#break
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p8.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p8.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-0)
	#call replace(p1.p8,-i1/2+i4/2-i8/2,i,i1,i4,i8,Md358,dotrewrite-d358-1)
	#call replace(Q.p8,`Q2'/2-i10+i4/2-i9/2,i,i10,i4,i9,Md358,dotrewrite-d358-2)
	#call replace(p2.p8,-i1/2+i3/2+i4/2-i5/2,i,i1,i3,i4,i5,Md358,dotrewrite-d358-3)
	#call replace(p6.p8,-i13+i4/2+i6/2-i7/2,i,i13,i4,i6,i7,Md358,dotrewrite-d358-4)
#endif
#break
#case Q3
* path: (0, 9, 1, 3)
#case 39
* path: (3, 1, 9)
#case 36
* path: (3, 1, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p8.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	if (count(Md358,1)) id Q.p3 = i10 - i11;
	if (count(Md358,1)) id p3.p6 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-2)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md358,dotrewrite-d358-3)
	#call replace(p1.p9,-i1/2+i10-i4/2+i8/2,i,i1,i10,i4,i8,Md358,dotrewrite-d358-4)
	#call replace(p6.p9,i12-i4/2-i6/2+i7/2,i,i12,i4,i6,i7,Md358,dotrewrite-d358-5)
	#call replace(p3.p9,-i1/2+i10-i11+i2/2-i5/2+i8/2,i,i1,i10,i11,i2,i5,i8,Md358,dotrewrite-d358-6)
#endif
#break
#case 15
* path: (1, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p5.p - p8.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p8.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	#call replace(p1.p8,-i1/2+i4/2-i8/2,i,i1,i4,i8,Md358,dotrewrite-d358-0)
	#call replace(p5.p8,i3/2-i5/2-i8/2,i,i3,i5,i8,Md358,dotrewrite-d358-1)
	#call replace(Q.p5,-`Q2'/2+i11-i4/2+i9/2,i,i11,i4,i9,Md358,dotrewrite-d358-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i8/2,i,i2,i3,i4,i8,Md358,dotrewrite-d358-3)
	#call replace(p5.p6,i14-i4/2-i6/2+i7/2,i,i14,i4,i6,i7,Md358,dotrewrite-d358-4)
	#call replace(Q.p8,`Q2'/2-i10+i4/2-i9/2,i,i10,i4,i9,Md358,dotrewrite-d358-5)
	#call replace(p6.p8,-i13+i4/2+i6/2-i7/2,i,i13,i4,i6,i7,Md358,dotrewrite-d358-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q2
* path: (0, 6, 4, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md358,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md358-5;
	if (count(Md358,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md358-4;
	if (count(Md358,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md358-3;
	if (count(Md358,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p1.p;
	.sort:momrewrite-Md358-2;
	if (count(Md358,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md358-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd358()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md358,dotrewrite-d358-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md358,dotrewrite-d358-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md358,dotrewrite-d358-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md358,dotrewrite-d358-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md358,dotrewrite-d358-4)
#endif
#break
#endswitch
#break
*--#] d358 : 
*--#[ d359 :
#case Md359
#procedure SimpleDotd359()
if (count(Md359,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p3.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p3.p + p1.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	if (count(Md359,1)) id p2.p3 = i12 - i13;
	if (count(Md359,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md359,dotrewrite-d359-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md359,dotrewrite-d359-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md359,dotrewrite-d359-4)
	#call replace(p2.p4,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md359,dotrewrite-d359-5)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md359,dotrewrite-d359-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md359,dotrewrite-d359-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md359,dotrewrite-d359-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i4/2+i8/2,i,i2,i4,i8,Md359,dotrewrite-d359-2)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md359,dotrewrite-d359-3)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md359,dotrewrite-d359-4)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p8.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	if (count(Md359,1)) id p2.p3 = i12 - i13;
	if (count(Md359,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md359,dotrewrite-d359-2)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md359,dotrewrite-d359-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md359,dotrewrite-d359-4)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md359,dotrewrite-d359-5)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md359,dotrewrite-d359-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 39
* path: (3, 8, 9)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md359,dotrewrite-d359-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md359,dotrewrite-d359-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md359,dotrewrite-d359-2)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md359,dotrewrite-d359-3)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md359,dotrewrite-d359-4)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md359,dotrewrite-d359-5)
	#call replace(p3.p9,i12-i13+i3/2-i5/2+i8/2,i,i12,i13,i3,i5,i8,Md359,dotrewrite-d359-6)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p5.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md359,dotrewrite-d359-0)
	#call replace(p3.p5,-i3/2-i5/2+i8/2,i,i3,i5,i8,Md359,dotrewrite-d359-1)
	#call replace(p1.p5,i1/2-i13-i4/2+i8/2,i,i1,i13,i4,i8,Md359,dotrewrite-d359-2)
	#call replace(Q.p5,i1/2-i12-i2/2-i4/2+i9/2,i,i1,i12,i2,i4,i9,Md359,dotrewrite-d359-3)
	#call replace(p5.p6,i11-i14-i4/2-i6/2+i7/2,i,i11,i14,i4,i6,i7,Md359,dotrewrite-d359-4)
#endif
#break
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p8.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md359,dotrewrite-d359-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md359,dotrewrite-d359-1)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md359,dotrewrite-d359-2)
	#call replace(p4.p8,i1/2-i4/2-i8/2,i,i1,i4,i8,Md359,dotrewrite-d359-3)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md359,dotrewrite-d359-4)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md359,dotrewrite-d359-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md359,dotrewrite-d359-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	if (count(Md359,1)) id p2.p3 = i12 - i13;
	if (count(Md359,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md359,dotrewrite-d359-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md359,dotrewrite-d359-3)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md359,dotrewrite-d359-4)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md359,dotrewrite-d359-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md359,dotrewrite-d359-6)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p8.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p3.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md359,dotrewrite-d359-0)
	#call replace(p1.p8,i1/2-i4/2+i8/2,i,i1,i4,i8,Md359,dotrewrite-d359-1)
	#call replace(p3.p8,i3/2-i5/2+i8/2,i,i3,i5,i8,Md359,dotrewrite-d359-2)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md359,dotrewrite-d359-3)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md359,dotrewrite-d359-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q3
* path: (0, 6, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md359,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md359-5;
	if (count(Md359,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md359-4;
	if (count(Md359,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p;
	.sort:momrewrite-Md359-3;
	if (count(Md359,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md359-2;
	if (count(Md359,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md359-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd359()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md359,dotrewrite-d359-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md359,dotrewrite-d359-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md359,dotrewrite-d359-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md359,dotrewrite-d359-3)
	#call replace(p3.p4,i13-i3/2+i5/2-i8/2,i,i13,i3,i5,i8,Md359,dotrewrite-d359-4)
#endif
#break
#endswitch
#break
*--#] d359 : 
*--#[ d360 :
#case Md360
#procedure SimpleDotd360()
if (count(Md360,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	if (count(Md360,1)) id p2.p3 = i12 - i13;
	if (count(Md360,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md360,dotrewrite-d360-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md360,dotrewrite-d360-3)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md360,dotrewrite-d360-4)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md360,dotrewrite-d360-5)
	#call replace(p2.p4,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md360,dotrewrite-d360-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 16
* path: (1, 2, 9, 6)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md360,dotrewrite-d360-0)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md360,dotrewrite-d360-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i4/2+i8/2,i,i2,i4,i8,Md360,dotrewrite-d360-2)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md360,dotrewrite-d360-3)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md360,dotrewrite-d360-4)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q6
* path: (0, 2, 9, 6)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	if (count(Md360,1)) id p2.p3 = i12 - i13;
	if (count(Md360,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md360,dotrewrite-d360-2)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md360,dotrewrite-d360-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md360,dotrewrite-d360-4)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md360,dotrewrite-d360-5)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md360,dotrewrite-d360-6)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 39
* path: (3, 8, 9)
#case 68
* path: (6, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p9.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md360,dotrewrite-d360-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md360,dotrewrite-d360-1)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md360,dotrewrite-d360-2)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md360,dotrewrite-d360-3)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md360,dotrewrite-d360-4)
	#call replace(p3.p9,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md360,dotrewrite-d360-5)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md360,dotrewrite-d360-6)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p + p5.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md360,dotrewrite-d360-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md360,dotrewrite-d360-1)
	#call replace(Q.p5,`Q2'/2-i12+i4/2-i9/2,i,i12,i4,i9,Md360,dotrewrite-d360-2)
	#call replace(p1.p5,i1/2-i13+i4/2-i8/2,i,i1,i13,i4,i8,Md360,dotrewrite-d360-3)
	#call replace(p5.p6,-i14+i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md360,dotrewrite-d360-4)
#endif
#break
#case 48
* path: (4, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p8.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md360,dotrewrite-d360-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md360,dotrewrite-d360-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md360,dotrewrite-d360-2)
	#call replace(p4.p8,i1/2-i4/2-i8/2,i,i1,i4,i8,Md360,dotrewrite-d360-3)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md360,dotrewrite-d360-4)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md360,dotrewrite-d360-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md360,dotrewrite-d360-6)
#endif
#break
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p3.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	if (count(Md360,1)) id p2.p3 = i12 - i13;
	if (count(Md360,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md360,dotrewrite-d360-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md360,dotrewrite-d360-3)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md360,dotrewrite-d360-4)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md360,dotrewrite-d360-5)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md360,dotrewrite-d360-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p8.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md360,dotrewrite-d360-0)
	#call replace(p1.p8,i1/2-i4/2+i8/2,i,i1,i4,i8,Md360,dotrewrite-d360-1)
	#call replace(Q.p8,i1/2-i2/2-i4/2+i9/2,i,i1,i2,i4,i9,Md360,dotrewrite-d360-2)
	#call replace(p3.p8,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md360,dotrewrite-d360-3)
	#call replace(p6.p8,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md360,dotrewrite-d360-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q3
* path: (0, 6, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md360,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md360-5;
	if (count(Md360,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md360-4;
	if (count(Md360,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md360-3;
	if (count(Md360,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p;
	.sort:momrewrite-Md360-2;
	if (count(Md360,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md360-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd360()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md360,dotrewrite-d360-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md360,dotrewrite-d360-1)
	#call replace(p1.p4,i1/2+i4/2-i8/2,i,i1,i4,i8,Md360,dotrewrite-d360-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md360,dotrewrite-d360-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md360,dotrewrite-d360-4)
#endif
#break
#endswitch
#break
*--#] d360 : 
*--#[ d343 :
#case Md343
#procedure SimpleDotd343()
if (count(Md343,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p6^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p3.p6^n? = i13^n;
	id p5.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p4.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = + p3.p - p6.p - p7.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md343,dotrewrite-d343-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md343,dotrewrite-d343-1)
	#call replace(p6.p7,i13-i14-i6,i,i13,i14,i6,Md343,dotrewrite-d343-2)
	#call replace(p3.p7,-i14+i3/2-i5/2-i6/2+i7/2,i,i14,i3,i5,i6,i7,Md343,dotrewrite-d343-3)
	#call replace(Q.p7,`Q2'/2-i11+i13-i14-i6/2+i7/2-i9/2,i,i11,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-4)
	#call replace(p1.p7,i1/2-i12+i13-i14-i6/2+i7/2-i8/2,i,i1,i12,i13,i14,i6,i7,i8,Md343,dotrewrite-d343-5)
#endif
#break
#case 67
* path: (6, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p4.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = + p3.p - p6.p - p7.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md343,dotrewrite-d343-1)
	#call replace(p6.p7,i13-i14-i6,i,i13,i14,i6,Md343,dotrewrite-d343-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md343,dotrewrite-d343-3)
	#call replace(p3.p7,-i14+i3/2-i5/2-i6/2+i7/2,i,i14,i3,i5,i6,i7,Md343,dotrewrite-d343-4)
	#call replace(p2.p7,`Q2'/2-i1/2-i11+i12+i8/2-i9/2,i,i1,i11,i12,i8,i9,Md343,dotrewrite-d343-5)
	#call replace(Q.p7,`Q2'/2-i11+i13-i14-i6/2+i7/2-i9/2,i,i11,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case Q9
* path: (0, 9)
#case Q2
* path: (0, 9, 2)
#case Q1
* path: (0, 9, 2, 1)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#case 39
* path: (3, 6, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = - p4.p + p8.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p - p9.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md343,dotrewrite-d343-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md343,dotrewrite-d343-2)
	#call replace(p6.p9,i11-i13+i14,i,i11,i13,i14,Md343,dotrewrite-d343-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md343,dotrewrite-d343-4)
	#call replace(Q.p9,`Q2'/2-i13+i14+i6/2-i7/2+i9/2,i,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-5)
	#call replace(p3.p9,i10-i13+i14-i3/2+i5/2+i6/2-i7/2,i,i10,i13,i14,i3,i5,i6,i7,Md343,dotrewrite-d343-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = + p8.p - p4.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p6.p - p8.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p4.p6 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md343,dotrewrite-d343-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md343,dotrewrite-d343-2)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md343,dotrewrite-d343-3)
	#call replace(p6.p8,i12-i13+i14,i,i12,i13,i14,Md343,dotrewrite-d343-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md343,dotrewrite-d343-5)
	#call replace(p1.p8,i1/2-i13+i14+i6/2-i7/2+i8/2,i,i1,i13,i14,i6,i7,i8,Md343,dotrewrite-d343-6)
	#call replace(Q.p8,i1/2-i13+i14-i2/2+i6/2-i7/2+i9/2,i,i1,i13,i14,i2,i6,i7,i9,Md343,dotrewrite-d343-7)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 18
* path: (1, 2, 8)
#case 24
* path: (2, 1, 4)
#case 28
* path: (2, 8)
#case 48
* path: (4, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p + p3.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = + p8.p - p4.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p2.p6 = i11 - i12;
	if (count(Md343,1)) id p4.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md343,dotrewrite-d343-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md343,dotrewrite-d343-3)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md343,dotrewrite-d343-4)
	#call replace(p6.p8,i12-i13+i14,i,i12,i13,i14,Md343,dotrewrite-d343-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md343,dotrewrite-d343-6)
	#call replace(p2.p4,`Q2'/2-i10-i2/2+i3/2-i4/2,i,i10,i2,i3,i4,Md343,dotrewrite-d343-7)
	#call replace(Q.p8,i1/2-i13+i14-i2/2+i6/2-i7/2+i9/2,i,i1,i13,i14,i2,i6,i7,i9,Md343,dotrewrite-d343-8)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 49
* path: (4, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = + p8.p - p4.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p - p9.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p4.p6 = i12 - i13;
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md343,dotrewrite-d343-1)
	#call replace(p6.p8,i12-i13+i14,i,i12,i13,i14,Md343,dotrewrite-d343-2)
	#call replace(p6.p9,i11-i13+i14,i,i11,i13,i14,Md343,dotrewrite-d343-3)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md343,dotrewrite-d343-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md343,dotrewrite-d343-5)
	#call replace(Q.p9,`Q2'/2-i13+i14+i6/2-i7/2+i9/2,i,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-6)
	#call replace(p4.p9,`Q2'/2-i10-i2/2+i3/2-i5/2+i8/2,i,i10,i2,i3,i5,i8,Md343,dotrewrite-d343-7)
	#call replace(Q.p8,i1/2-i13+i14-i2/2+i6/2-i7/2+i9/2,i,i1,i13,i14,i2,i6,i7,i9,Md343,dotrewrite-d343-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p + p3.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p5.p?!{p5,[P+p5],[P-p5],p6} = + p8.p - p4.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p4.p6 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md343,dotrewrite-d343-1)
	#call replace(p4.p8,i4/2-i5/2+i8/2,i,i4,i5,i8,Md343,dotrewrite-d343-2)
	#call replace(p6.p8,i12-i13+i14,i,i12,i13,i14,Md343,dotrewrite-d343-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md343,dotrewrite-d343-4)
	#call replace(Q.p8,i1/2-i13+i14-i2/2+i6/2-i7/2+i9/2,i,i1,i13,i14,i2,i6,i7,i9,Md343,dotrewrite-d343-5)
	#call replace(p3.p8,i1/2-i13+i14-i4/2+i5/2+i6/2-i7/2,i,i1,i13,i14,i4,i5,i6,i7,Md343,dotrewrite-d343-6)
#endif
#break
#case 59
* path: (5, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p + p8.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p6.p - p9.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md343,dotrewrite-d343-1)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md343,dotrewrite-d343-2)
	#call replace(p6.p9,i11-i13+i14,i,i11,i13,i14,Md343,dotrewrite-d343-3)
	#call replace(p5.p9,-`Q2'/2+i10-i3/2+i5/2+i9/2,i,i10,i3,i5,i9,Md343,dotrewrite-d343-4)
	#call replace(p2.p5,-`Q2'/2+i10-i3/2+i4/2-i8/2+i9/2,i,i10,i3,i4,i8,i9,Md343,dotrewrite-d343-5)
	#call replace(Q.p9,`Q2'/2-i13+i14+i6/2-i7/2+i9/2,i,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-6)
	#call replace(Q.p5,-`Q2'/2+i10-i13+i14+i6/2-i7/2+i9/2,i,i10,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-7)
#endif
#break
#case 25
* path: (2, 8, 5)
#case 58
* path: (5, 8)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p - p6.p + p3.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p5.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p2.p6 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md343,dotrewrite-d343-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md343,dotrewrite-d343-2)
	#call replace(p5.p8,-i4/2+i5/2+i8/2,i,i4,i5,i8,Md343,dotrewrite-d343-3)
	#call replace(p6.p8,i12-i13+i14,i,i12,i13,i14,Md343,dotrewrite-d343-4)
	#call replace(p2.p5,-`Q2'/2+i10-i3/2+i4/2-i8/2+i9/2,i,i10,i3,i4,i8,i9,Md343,dotrewrite-d343-5)
	#call replace(Q.p5,-`Q2'/2+i10-i13+i14+i6/2-i7/2+i9/2,i,i10,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-6)
	#call replace(Q.p8,i1/2-i13+i14-i2/2+i6/2-i7/2+i9/2,i,i1,i13,i14,i2,i6,i7,i9,Md343,dotrewrite-d343-7)
#endif
#break
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q4
* path: (0, 6, 3, 4)
#case Q5
* path: (0, 6, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	if (count(Md343,1)) id p4.p6 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md343,dotrewrite-d343-1)
	#call replace(p4.p5,-i4/2-i5/2+i8/2,i,i4,i5,i8,Md343,dotrewrite-d343-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md343,dotrewrite-d343-3)
	#call replace(p3.p5,-i13+i14+i3/2+i5/2+i6/2-i7/2,i,i13,i14,i3,i5,i6,i7,Md343,dotrewrite-d343-4)
	#call replace(Q.p5,-`Q2'/2+i10-i13+i14+i6/2-i7/2+i9/2,i,i10,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-5)
#endif
#break
#default
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md343,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md343-5;
	if (count(Md343,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p4.p;
	.sort:momrewrite-Md343-4;
	if (count(Md343,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md343-3;
	if (count(Md343,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md343-2;
	if (count(Md343,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md343-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd343()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md343,dotrewrite-d343-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md343,dotrewrite-d343-1)
	#call replace(p3.p5,-i13+i14+i3/2+i5/2+i6/2-i7/2,i,i13,i14,i3,i5,i6,i7,Md343,dotrewrite-d343-2)
	#call replace(Q.p5,-`Q2'/2+i10-i13+i14+i6/2-i7/2+i9/2,i,i10,i13,i14,i6,i7,i9,Md343,dotrewrite-d343-3)
	#call replace(p1.p5,-i13+i14+i3/2-i4/2+i6/2-i7/2+i8/2,i,i13,i14,i3,i4,i6,i7,i8,Md343,dotrewrite-d343-4)
#endif
#break
#endswitch
#break
*--#] d343 : 
*--#[ d361 :
#case Md361
#procedure SimpleDotd361()
if (count(Md361,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 9, 8)
#case 39
* path: (3, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	if (count(Md361,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md361,dotrewrite-d361-1)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md361,dotrewrite-d361-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md361,dotrewrite-d361-3)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md361,dotrewrite-d361-4)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md361,dotrewrite-d361-5)
	#call replace(p6.p9,i10-i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md361,dotrewrite-d361-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q6
* path: (0, 2, 9, 6)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	if (count(Md361,1)) id p2.p6 = i10 - i11;
	if (count(Md361,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md361,dotrewrite-d361-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md361,dotrewrite-d361-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md361,dotrewrite-d361-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md361,dotrewrite-d361-5)
	#call replace(p6.p9,i10-i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md361,dotrewrite-d361-6)
#endif
#break
#case 58
* path: (5, 8)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p5.p + p8.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p8.p - p3.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md361,dotrewrite-d361-0)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md361,dotrewrite-d361-1)
	#call replace(p5.p8,i1/2-i5/2-i8/2,i,i1,i5,i8,Md361,dotrewrite-d361-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md361,dotrewrite-d361-3)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md361,dotrewrite-d361-4)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md361,dotrewrite-d361-5)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 16
* path: (1, 2, 9, 6)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	if (count(Md361,1)) id p3.p9 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md361,dotrewrite-d361-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md361,dotrewrite-d361-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md361,dotrewrite-d361-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i8/2,i,i2,i5,i8,Md361,dotrewrite-d361-4)
	#call replace(p6.p9,i10-i5/2-i6/2+i7/2,i,i10,i5,i6,i7,Md361,dotrewrite-d361-5)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	if (count(Md361,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md361,dotrewrite-d361-1)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md361,dotrewrite-d361-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md361,dotrewrite-d361-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md361,dotrewrite-d361-4)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md361,dotrewrite-d361-5)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md361,dotrewrite-d361-6)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	if (count(Md361,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md361,dotrewrite-d361-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md361,dotrewrite-d361-2)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md361,dotrewrite-d361-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md361,dotrewrite-d361-4)
	#call replace(p2.p5,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md361,dotrewrite-d361-5)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 38
* path: (3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p5.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p2.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p1.p - p8.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md361,dotrewrite-d361-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md361,dotrewrite-d361-1)
	#call replace(p1.p8,i1/2-i5/2+i8/2,i,i1,i5,i8,Md361,dotrewrite-d361-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md361,dotrewrite-d361-3)
	#call replace(p3.p8,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md361,dotrewrite-d361-4)
	#call replace(p6.p8,i11-i5/2-i6/2+i7/2,i,i11,i5,i6,i7,Md361,dotrewrite-d361-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case Q3
* path: (0, 6, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 59
* path: (5, 6, 9)
#case 66
* path: (6,)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md361,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md361-5;
	if (count(Md361,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md361-4;
	if (count(Md361,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md361-3;
	if (count(Md361,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md361-2;
	if (count(Md361,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md361-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd361()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md361,dotrewrite-d361-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md361,dotrewrite-d361-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md361,dotrewrite-d361-2)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md361,dotrewrite-d361-3)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md361,dotrewrite-d361-4)
#endif
#break
#endswitch
#break
*--#] d361 : 
*--#[ d240 :
#case Md240
#procedure SimpleDotd240()
if (count(Md240,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p5^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md240,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md240-4;
	if (count(Md240,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md240-3;
	if (count(Md240,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p1.p + p7.p;
	.sort:momrewrite-Md240-2;
	if (count(Md240,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md240-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd240()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md240,dotrewrite-d240-0)
	#call replace(p1.p7,-i1/2+i4/2-i7/2,i,i1,i4,i7,Md240,dotrewrite-d240-1)
	#call replace(Q.p7,`Q2'/2+i4/2-i8/2-i9,i,i4,i8,i9,Md240,dotrewrite-d240-2)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md240,dotrewrite-d240-3)
	#call replace(p5.p7,-i11+i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md240,dotrewrite-d240-4)
#endif
#break
#case Q4
* path: (0, 7, 4)
#case 47
* path: (4, 7)
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md240,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p4.p - p7.p;
	.sort:momrewrite-Md240-4;
	if (count(Md240,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md240-3;
	if (count(Md240,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md240-2;
	if (count(Md240,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p2.p - p7.p;
	.sort:momrewrite-Md240-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd240()
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md240,dotrewrite-d240-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md240,dotrewrite-d240-1)
	#call replace(p4.p7,-i1/2+i4/2+i7/2,i,i1,i4,i7,Md240,dotrewrite-d240-2)
	#call replace(Q.p7,`Q2'/2+i4/2-i8/2-i9,i,i4,i8,i9,Md240,dotrewrite-d240-3)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md240,dotrewrite-d240-4)
	#call replace(p5.p7,-i11+i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md240,dotrewrite-d240-5)
#endif
#break
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q2
* path: (0, 8, 1, 2)
#case Q5
* path: (0, 8, 5)
#case 18
* path: (1, 8)
#case 15
* path: (1, 8, 5)
#case 28
* path: (2, 1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md240,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md240-4;
	if (count(Md240,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md240-3;
	if (count(Md240,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p8.p;
	.sort:momrewrite-Md240-2;
	if (count(Md240,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md240-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd240()
	if (count(Md240,1)) id p2.p8 = i12 - i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md240,dotrewrite-d240-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md240,dotrewrite-d240-2)
	#call replace(p1.p8,-i1/2-i4/2+i7/2+i9,i,i1,i4,i7,i9,Md240,dotrewrite-d240-3)
	#call replace(p5.p8,i10-i4/2-i5/2+i6/2,i,i10,i4,i5,i6,Md240,dotrewrite-d240-4)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md240,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md240-4;
	if (count(Md240,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p4.p;
	.sort:momrewrite-Md240-3;
	if (count(Md240,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p8.p;
	.sort:momrewrite-Md240-2;
	if (count(Md240,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md240-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd240()
	if (count(Md240,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md240,dotrewrite-d240-1)
	#call replace(Q.p7,`Q2'/2+i4/2-i8/2-i9,i,i4,i8,i9,Md240,dotrewrite-d240-2)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md240,dotrewrite-d240-3)
	#call replace(p5.p7,-i11+i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md240,dotrewrite-d240-4)
	#call replace(p5.p8,i10-i4/2-i5/2+i6/2,i,i10,i4,i5,i6,Md240,dotrewrite-d240-5)
	#call replace(p7.p8,`Q2'/2+i1/2-i7/2-i8/2-i9,i,i1,i7,i8,i9,Md240,dotrewrite-d240-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 48
* path: (4, 5, 8)
#case 55
* path: (5,)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md240,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md240-4;
	if (count(Md240,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md240-3;
	if (count(Md240,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md240-2;
	if (count(Md240,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md240-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd240()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md240,dotrewrite-d240-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md240,dotrewrite-d240-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md240,dotrewrite-d240-2)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md240,dotrewrite-d240-3)
#endif
#break
#endswitch
#break
*--#] d240 : 
*--#[ d265 :
#case Md265
#procedure SimpleDotd265()
if (count(Md265,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p5^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p2.p5^n? = i13^n;
	id p4.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p2.p - p5.p - p6.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p - p6.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	if (count(Md265,1)) id Q.p3 = -i10 + i9;
	if (count(Md265,1)) id p3.p5 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-2)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md265,dotrewrite-d265-3)
	#call replace(p2.p6,-i14+i2/2-i4/2-i5/2+i6/2,i,i14,i2,i4,i5,i6,Md265,dotrewrite-d265-4)
	#call replace(p3.p6,i1/2-i12+i13-i2/2+i4/2-i7/2,i,i1,i12,i13,i2,i4,i7,Md265,dotrewrite-d265-5)
	#call replace(Q.p6,`Q2'/2-i11+i13-i14-i5/2+i6/2-i8/2,i,i11,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-6)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p2.p - p5.p - p6.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p - p6.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-0)
	#call replace(p5.p6,i13-i14-i5,i,i13,i14,i5,Md265,dotrewrite-d265-1)
	#call replace(p2.p6,-i14+i2/2-i4/2-i5/2+i6/2,i,i14,i2,i4,i5,i6,Md265,dotrewrite-d265-2)
	#call replace(Q.p6,`Q2'/2-i11+i13-i14-i5/2+i6/2-i8/2,i,i11,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-3)
	#call replace(p1.p6,i1/2-i12+i13-i14-i5/2+i6/2-i7/2,i,i1,i12,i13,i14,i5,i6,i7,Md265,dotrewrite-d265-4)
#endif
#break
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q3
* path: (0, 8, 1, 3)
#case Q5
* path: (0, 8, 5)
#case 18
* path: (1, 8)
#case 38
* path: (3, 1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p - p7.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p5} = + p1.p - p3.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	if (count(Md265,1)) id Q.p3 = -i10 + i9;
	if (count(Md265,1)) id p3.p5 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-2)
	#call replace(p5.p8,i11-i13+i14,i,i11,i13,i14,Md265,dotrewrite-d265-3)
	#call replace(Q.p8,`Q2'/2-i13+i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-4)
	#call replace(p3.p8,-i1/2-i10+i2/2-i4/2+i7/2+i9,i,i1,i10,i2,i4,i7,i9,Md265,dotrewrite-d265-5)
	#call replace(p1.p8,-i1/2-i13+i14+i5/2-i6/2+i7/2+i9,i,i1,i13,i14,i5,i6,i7,i9,Md265,dotrewrite-d265-6)
#endif
#break
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p - p7.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	if (count(Md265,1)) id Q.p3 = -i10 + i9;
	if (count(Md265,1)) id p3.p5 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-2)
	#call replace(p5.p8,i11-i13+i14,i,i11,i13,i14,Md265,dotrewrite-d265-3)
	#call replace(Q.p8,`Q2'/2-i13+i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-4)
	#call replace(p3.p8,-i1/2-i10+i2/2-i4/2+i7/2+i9,i,i1,i10,i2,i4,i7,i9,Md265,dotrewrite-d265-5)
	#call replace(p2.p8,i10-i13+i14-i2/2+i4/2+i5/2-i6/2,i,i10,i13,i14,i2,i4,i5,i6,Md265,dotrewrite-d265-6)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p - p7.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-0)
	#call replace(p5.p8,i11-i13+i14,i,i11,i13,i14,Md265,dotrewrite-d265-1)
	#call replace(Q.p8,`Q2'/2-i13+i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-2)
	#call replace(p1.p8,-i1/2-i13+i14+i5/2-i6/2+i7/2+i9,i,i1,i13,i14,i5,i6,i7,i9,Md265,dotrewrite-d265-3)
	#call replace(p2.p8,i10-i13+i14-i2/2+i4/2+i5/2-i6/2,i,i10,i13,i14,i2,i4,i5,i6,Md265,dotrewrite-d265-4)
#endif
#break
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p4.p - p2.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	if (count(Md265,1)) id Q.p3 = -i10 + i9;
	if (count(Md265,1)) id p3.p5 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-2)
	#call replace(p3.p4,-i3/2-i4/2+i7/2,i,i3,i4,i7,Md265,dotrewrite-d265-3)
	#call replace(p2.p4,-i13+i14+i2/2+i4/2+i5/2-i6/2,i,i13,i14,i2,i4,i5,i6,Md265,dotrewrite-d265-4)
	#call replace(Q.p4,-`Q2'/2+i10-i13+i14+i5/2-i6/2+i8/2,i,i10,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p5} = + p1.p - p3.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p - p7.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p7.p - p5.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	if (count(Md265,1)) id Q.p3 = -i10 + i9;
	if (count(Md265,1)) id p3.p5 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-2)
	#call replace(p3.p7,-i3/2+i4/2-i7/2,i,i3,i4,i7,Md265,dotrewrite-d265-3)
	#call replace(p5.p7,-i12+i13-i14,i,i12,i13,i14,Md265,dotrewrite-d265-4)
	#call replace(p1.p7,-i1/2+i13-i14-i5/2+i6/2-i7/2,i,i1,i13,i14,i5,i6,i7,Md265,dotrewrite-d265-5)
	#call replace(Q.p7,`Q2'/2+i13-i14-i5/2+i6/2-i8/2-i9,i,i13,i14,i5,i6,i8,i9,Md265,dotrewrite-d265-6)
#endif
#break
#case 14
* path: (1, 7, 4)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p5} = + p1.p - p3.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p7.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p7.p - p5.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	#call replace(p4.p7,i3/2-i4/2-i7/2,i,i3,i4,i7,Md265,dotrewrite-d265-0)
	#call replace(p5.p7,-i12+i13-i14,i,i12,i13,i14,Md265,dotrewrite-d265-1)
	#call replace(p1.p7,-i1/2+i13-i14-i5/2+i6/2-i7/2,i,i1,i13,i14,i5,i6,i7,Md265,dotrewrite-d265-2)
	#call replace(Q.p4,-`Q2'/2+i10-i13+i14+i5/2-i6/2+i8/2,i,i10,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-3)
	#call replace(p1.p4,-i13+i14+i2/2-i3/2+i5/2-i6/2+i7/2,i,i13,i14,i2,i3,i5,i6,i7,Md265,dotrewrite-d265-4)
	#call replace(Q.p7,`Q2'/2+i13-i14-i5/2+i6/2-i8/2-i9,i,i13,i14,i5,i6,i8,i9,Md265,dotrewrite-d265-5)
#endif
#break
#default
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md265,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md265-4;
	if (count(Md265,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md265-3;
	if (count(Md265,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p4.p - p5.p;
	.sort:momrewrite-Md265-2;
	if (count(Md265,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p4.p - p2.p;
	.sort:momrewrite-Md265-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd265()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md265,dotrewrite-d265-0)
	#call replace(p2.p4,-i13+i14+i2/2+i4/2+i5/2-i6/2,i,i13,i14,i2,i4,i5,i6,Md265,dotrewrite-d265-1)
	#call replace(Q.p4,-`Q2'/2+i10-i13+i14+i5/2-i6/2+i8/2,i,i10,i13,i14,i5,i6,i8,Md265,dotrewrite-d265-2)
	#call replace(p1.p4,-i13+i14+i2/2-i3/2+i5/2-i6/2+i7/2,i,i13,i14,i2,i3,i5,i6,i7,Md265,dotrewrite-d265-3)
#endif
#break
#endswitch
#break
*--#] d265 : 
*--#[ d226 :
#case Md226
#procedure SimpleDotd226()
if (count(Md226,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p1.p5^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 27
* path: (2, 7)
#case 37
* path: (3, 7)
#case 57
* path: (5, 3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + p4.p - p5.p + p3.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	if (count(Md226,1)) id p2.p3 = i11 - i12;
	if (count(Md226,1)) id p2.p5 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md226,dotrewrite-d226-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md226,dotrewrite-d226-3)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md226,dotrewrite-d226-4)
	#call replace(Q.p7,i1/2-i13-i14-i2/2+i3/2-i4/2+i8/2,i,i1,i13,i14,i2,i3,i4,i8,Md226,dotrewrite-d226-5)
	#call replace(p5.p7,i10-i13-i14+i3/2-i4/2-i5/2+i6/2,i,i10,i13,i14,i3,i4,i5,i6,Md226,dotrewrite-d226-6)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md226,dotrewrite-d226-0)
	#call replace(p3.p8,i11-i13-i14,i,i11,i13,i14,Md226,dotrewrite-d226-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md226,dotrewrite-d226-2)
	#call replace(Q.p8,`Q2'/2-i13-i14+i3/2-i4/2+i8/2,i,i13,i14,i3,i4,i8,Md226,dotrewrite-d226-3)
	#call replace(Q.p7,i1/2-i13-i14-i2/2+i3/2-i4/2+i8/2,i,i1,i13,i14,i2,i3,i4,i8,Md226,dotrewrite-d226-4)
	#call replace(p5.p7,i10-i13-i14+i3/2-i4/2-i5/2+i6/2,i,i10,i13,i14,i3,i4,i5,i6,Md226,dotrewrite-d226-5)
	#call replace(p5.p8,-i13-i14+i3/2-i4/2-i5/2+i6/2+i9,i,i13,i14,i3,i4,i5,i6,i9,Md226,dotrewrite-d226-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + p3.p + p4.p - p5.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md226,dotrewrite-d226-0)
	#call replace(p3.p4,i13+i14-i3,i,i13,i14,i3,Md226,dotrewrite-d226-1)
	#call replace(p4.p5,i14-i3/2+i4/2+i5/2-i6/2,i,i14,i3,i4,i5,i6,Md226,dotrewrite-d226-2)
	#call replace(Q.p4,`Q2'/2-i11+i13+i14-i3/2+i4/2-i8/2,i,i11,i13,i14,i3,i4,i8,Md226,dotrewrite-d226-3)
	#call replace(p1.p4,i1/2-i12+i13+i14-i3/2+i4/2-i7/2,i,i1,i12,i13,i14,i3,i4,i7,Md226,dotrewrite-d226-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q8
* path: (0, 8)
#case Q2
* path: (0, 8, 2)
#case Q1
* path: (0, 8, 2, 1)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p5.p - p8.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	if (count(Md226,1)) id p2.p3 = i11 - i12;
	if (count(Md226,1)) id p2.p5 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md226,dotrewrite-d226-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md226,dotrewrite-d226-3)
	#call replace(p3.p8,i11-i13-i14,i,i11,i13,i14,Md226,dotrewrite-d226-4)
	#call replace(Q.p8,`Q2'/2-i13-i14+i3/2-i4/2+i8/2,i,i13,i14,i3,i4,i8,Md226,dotrewrite-d226-5)
	#call replace(p5.p8,-i13-i14+i3/2-i4/2-i5/2+i6/2+i9,i,i13,i14,i3,i4,i5,i6,i9,Md226,dotrewrite-d226-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + p1.p - p5.p - p7.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md226,dotrewrite-d226-0)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md226,dotrewrite-d226-1)
	#call replace(p1.p7,i1/2-i13-i14+i3/2-i4/2+i7/2,i,i1,i13,i14,i3,i4,i7,Md226,dotrewrite-d226-2)
	#call replace(Q.p7,i1/2-i13-i14-i2/2+i3/2-i4/2+i8/2,i,i1,i13,i14,i2,i3,i4,i8,Md226,dotrewrite-d226-3)
	#call replace(p5.p7,i10-i13-i14+i3/2-i4/2-i5/2+i6/2,i,i10,i13,i14,i3,i4,i5,i6,Md226,dotrewrite-d226-4)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p + p1.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p - p3.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	if (count(Md226,1)) id p2.p3 = i11 - i12;
	if (count(Md226,1)) id p2.p5 = -i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md226,dotrewrite-d226-2)
	#call replace(p2.p6,`Q2'/2-i1/2+i10+i7/2-i8/2-i9,i,i1,i10,i7,i8,i9,Md226,dotrewrite-d226-3)
	#call replace(p5.p6,i13+i14-i3/2+i4/2-i5/2-i6/2,i,i13,i14,i3,i4,i5,i6,Md226,dotrewrite-d226-4)
	#call replace(Q.p6,`Q2'/2+i13+i14-i3/2+i4/2-i8/2-i9,i,i13,i14,i3,i4,i8,i9,Md226,dotrewrite-d226-5)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md226,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md226-4;
	if (count(Md226,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md226-3;
	if (count(Md226,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p - p3.p;
	.sort:momrewrite-Md226-2;
	if (count(Md226,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p5.p - p6.p;
	.sort:momrewrite-Md226-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd226()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md226,dotrewrite-d226-0)
	#call replace(p5.p6,i13+i14-i3/2+i4/2-i5/2-i6/2,i,i13,i14,i3,i4,i5,i6,Md226,dotrewrite-d226-1)
	#call replace(Q.p6,`Q2'/2+i13+i14-i3/2+i4/2-i8/2-i9,i,i13,i14,i3,i4,i8,i9,Md226,dotrewrite-d226-2)
	#call replace(p1.p6,i1/2-i10+i13+i14-i3/2+i4/2-i7/2,i,i1,i10,i13,i14,i3,i4,i7,Md226,dotrewrite-d226-3)
#endif
#break
#endswitch
#break
*--#] d226 : 
*--#[ d177 :
#case Md177
#procedure SimpleDotd177()
if (count(Md177,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id Q.p4^n? = i9^n;
	id p2.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id p1.p2^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 16
* path: (1, 0, 6)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md177,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p1.p + p6.p - p2.p;
	.sort:momrewrite-Md177-3;
	if (count(Md177,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p - p4.p;
	.sort:momrewrite-Md177-2;
	if (count(Md177,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md177-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd177()
	#call replace(p1.p6,-i1+i12+i13,i,i1,i12,i13,Md177,dotrewrite-d177-0)
	#call replace(p2.p6,-i1/2+i13+i2/2-i3/2+i6/2,i,i1,i13,i2,i3,i6,Md177,dotrewrite-d177-1)
	#call replace(Q.p6,`Q2'/2-i1/2-i11+i12+i13+i6/2-i7/2,i,i1,i11,i12,i13,i6,i7,Md177,dotrewrite-d177-2)
	#call replace(p4.p6,-i1/2+i12+i13-i14+i4/2-i5/2+i6/2,i,i1,i12,i13,i14,i4,i5,i6,Md177,dotrewrite-d177-3)
#endif
#break
#case Q7
* path: (0, 7)
#case Q1
* path: (0, 7, 1)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md177,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md177-3;
	if (count(Md177,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p - p7.p;
	.sort:momrewrite-Md177-2;
	if (count(Md177,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md177-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd177()
	#call replace(p1.p7,i11-i12-i13,i,i11,i12,i13,Md177,dotrewrite-d177-0)
	#call replace(Q.p7,`Q2'/2+i1/2-i12-i13-i6/2+i7/2,i,i1,i12,i13,i6,i7,Md177,dotrewrite-d177-1)
	#call replace(p2.p7,i1/2-i12-i13-i2/2+i3/2-i6/2+i8,i,i1,i12,i13,i2,i3,i6,i8,Md177,dotrewrite-d177-2)
	#call replace(p4.p7,i1/2-i12-i13-i4/2+i5/2-i6/2+i9,i,i1,i12,i13,i4,i5,i6,i9,Md177,dotrewrite-d177-3)
#endif
#break
#default
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md177,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p3.p - p4.p;
	.sort:momrewrite-Md177-3;
	if (count(Md177,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p3.p - p1.p;
	.sort:momrewrite-Md177-2;
	if (count(Md177,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p3.p;
	.sort:momrewrite-Md177-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd177()
	#call replace(p2.p3,-i1/2+i12+i13-i2/2-i3/2+i6/2,i,i1,i12,i13,i2,i3,i6,Md177,dotrewrite-d177-0)
	#call replace(Q.p3,`Q2'/2-i1/2+i12+i13+i6/2-i7/2-i8,i,i1,i12,i13,i6,i7,i8,Md177,dotrewrite-d177-1)
	#call replace(p3.p4,-i1/2-i10+i12+i13+i4/2-i5/2+i6/2,i,i1,i10,i12,i13,i4,i5,i6,Md177,dotrewrite-d177-2)
#endif
#break
#endswitch
#break
*--#] d177 : 
*--#[ d67 :
#case Md67
#procedure SimpleDotd67()
if (count(Md67,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p4^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md67,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p + Q.p;
	.sort:momrewrite-Md67-3;
	if (count(Md67,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p5.p;
	.sort:momrewrite-Md67-2;
	if (count(Md67,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p + p5.p - p2.p;
	.sort:momrewrite-Md67-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd67()
	#call replace(p4.p5,i1/2-i4/2-i5/2,i,i1,i4,i5,Md67,dotrewrite-d67-0)
	#call replace(Q.p5,`Q2'/2+i1/2-i6/2-i7,i,i1,i6,i7,Md67,dotrewrite-d67-1)
	#call replace(p2.p5,i1/2+i2/2-i3/2-i9,i,i1,i2,i3,i9,Md67,dotrewrite-d67-2)
#endif
#break
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md67,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md67-3;
	if (count(Md67,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p6.p;
	.sort:momrewrite-Md67-2;
	if (count(Md67,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p4.p - p6.p;
	.sort:momrewrite-Md67-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd67()
	#call replace(Q.p6,`Q2'/2-i1/2+i6/2,i,i1,i6,Md67,dotrewrite-d67-0)
	#call replace(p2.p6,-i1/2-i2/2+i3/2+i8,i,i1,i2,i3,i8,Md67,dotrewrite-d67-1)
	#call replace(p4.p6,-i1/2-i4/2+i5/2+i7,i,i1,i4,i5,i7,Md67,dotrewrite-d67-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 6, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 1, 6)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md67,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md67-3;
	if (count(Md67,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p4.p;
	.sort:momrewrite-Md67-2;
	if (count(Md67,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md67-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd67()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md67,dotrewrite-d67-0)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md67,dotrewrite-d67-1)
	#call replace(p1.p4,i1/2+i4/2-i5/2,i,i1,i4,i5,Md67,dotrewrite-d67-2)
#endif
#break
#endswitch
#break
*--#] d67 : 
*--#[ d126 :
#case Md126
#procedure SimpleDotd126()
if (count(Md126,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p1^n? = i8^n;
	id Q.p2^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 23
* path: (2, 3)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p2.p + p3.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	if (count(Md126,1)) id Q.p3 = i8 - i9;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md126,dotrewrite-d126-2)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md126,dotrewrite-d126-3)
	#call replace(Q.p4,-`Q2'/2-i5/2+i7/2+i9,i,i5,i7,i9,Md126,dotrewrite-d126-4)
#endif
#break
#case Q7
* path: (0, 7)
#case Q1
* path: (0, 7, 1)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-0)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md126,dotrewrite-d126-1)
	#call replace(p1.p7,-i1/2-i5/2+i6/2+i8,i,i1,i5,i6,i8,Md126,dotrewrite-d126-2)
	#call replace(p2.p7,-i2/2+i4/2-i5/2+i9,i,i2,i4,i5,i9,Md126,dotrewrite-d126-3)
#endif
#break
#case 14
* path: (1, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p4.p - p6.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md126,dotrewrite-d126-0)
	#call replace(p4.p6,i3/2-i4/2-i6/2,i,i3,i4,i6,Md126,dotrewrite-d126-1)
	#call replace(Q.p4,-`Q2'/2-i5/2+i7/2+i9,i,i5,i7,i9,Md126,dotrewrite-d126-2)
	#call replace(p1.p4,i2/2-i3/2-i5/2+i6/2,i,i2,i3,i5,i6,Md126,dotrewrite-d126-3)
	#call replace(Q.p6,`Q2'/2+i5/2-i7/2-i8,i,i5,i7,i8,Md126,dotrewrite-d126-4)
#endif
#break
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p6.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p6.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	if (count(Md126,1)) id Q.p3 = i8 - i9;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-1)
	#call replace(p1.p6,-i1/2+i5/2-i6/2,i,i1,i5,i6,Md126,dotrewrite-d126-2)
	#call replace(p3.p6,-i3/2+i4/2-i6/2,i,i3,i4,i6,Md126,dotrewrite-d126-3)
	#call replace(Q.p6,`Q2'/2+i5/2-i7/2-i8,i,i5,i7,i8,Md126,dotrewrite-d126-4)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md126,dotrewrite-d126-1)
	#call replace(Q.p4,-`Q2'/2-i5/2+i7/2+i9,i,i5,i7,i9,Md126,dotrewrite-d126-2)
	#call replace(p1.p4,i2/2-i3/2-i5/2+i6/2,i,i2,i3,i5,i6,Md126,dotrewrite-d126-3)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p1.p?!{p1,[P+p1],[P-p1],Q} = + p2.p + p3.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	if (count(Md126,1)) id Q.p3 = i8 - i9;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md126,dotrewrite-d126-2)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md126,dotrewrite-d126-3)
	#call replace(p3.p5,i1/2-i2/2+i4/2-i6/2,i,i1,i2,i4,i6,Md126,dotrewrite-d126-4)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p1.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	if (count(Md126,1)) id Q.p3 = i8 - i9;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md126,dotrewrite-d126-2)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md126,dotrewrite-d126-3)
	#call replace(p3.p5,i1/2-i2/2+i4/2-i6/2,i,i1,i2,i4,i6,Md126,dotrewrite-d126-4)
#endif
#break
#case Q3
* path: (0, 7, 1, 3)
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p3.p - p4.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	if (count(Md126,1)) id Q.p3 = i8 - i9;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-1)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md126,dotrewrite-d126-2)
	#call replace(p1.p7,-i1/2-i5/2+i6/2+i8,i,i1,i5,i6,i8,Md126,dotrewrite-d126-3)
	#call replace(p3.p7,-i1/2+i2/2-i4/2+i6/2+i8-i9,i,i1,i2,i4,i6,i8,i9,Md126,dotrewrite-d126-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 5)
#case Q2
* path: (0, 5, 2)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 27
* path: (2, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md126,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md126-4;
	if (count(Md126,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md126-3;
	if (count(Md126,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p1.p;
	.sort:momrewrite-Md126-2;
	if (count(Md126,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md126-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd126()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md126,dotrewrite-d126-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md126,dotrewrite-d126-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md126,dotrewrite-d126-2)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md126,dotrewrite-d126-3)
#endif
#break
#endswitch
#break
*--#] d126 : 
*--#[ d230 :
#case Md230
#procedure SimpleDotd230()
if (count(Md230,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md230,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md230-4;
	if (count(Md230,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p + p7.p;
	.sort:momrewrite-Md230-3;
	if (count(Md230,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p7.p - p2.p;
	.sort:momrewrite-Md230-2;
	if (count(Md230,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md230-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd230()
	#call replace(p1.p7,-i1/2+i3/2-i7/2,i,i1,i3,i7,Md230,dotrewrite-d230-0)
	#call replace(Q.p7,`Q2'/2-i12+i3/2-i8/2,i,i12,i3,i8,Md230,dotrewrite-d230-1)
	#call replace(p2.p7,-i13+i2/2+i3/2-i4/2,i,i13,i2,i3,i4,Md230,dotrewrite-d230-2)
	#call replace(p5.p7,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md230,dotrewrite-d230-3)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md230,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md230-4;
	if (count(Md230,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p4.p;
	.sort:momrewrite-Md230-3;
	if (count(Md230,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p - p1.p;
	.sort:momrewrite-Md230-2;
	if (count(Md230,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Md230-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd230()
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md230,dotrewrite-d230-0)
	#call replace(Q.p4,`Q2'/2+i3/2-i8/2-i9,i,i3,i8,i9,Md230,dotrewrite-d230-1)
	#call replace(p1.p4,i1/2-i13+i3/2-i7/2,i,i1,i13,i3,i7,Md230,dotrewrite-d230-2)
	#call replace(p4.p5,-i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md230,dotrewrite-d230-3)
#endif
#break
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q2
* path: (0, 8, 1, 2)
#case Q5
* path: (0, 8, 5)
#case 18
* path: (1, 8)
#case 15
* path: (1, 8, 5)
#case 28
* path: (2, 1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md230,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md230-4;
	if (count(Md230,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p8.p;
	.sort:momrewrite-Md230-3;
	if (count(Md230,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md230-2;
	if (count(Md230,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md230-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd230()
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md230,dotrewrite-d230-0)
	#call replace(p1.p8,-i1/2+i12-i3/2+i7/2,i,i1,i12,i3,i7,Md230,dotrewrite-d230-1)
	#call replace(p2.p8,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md230,dotrewrite-d230-2)
	#call replace(p5.p8,i10-i3/2-i5/2+i6/2,i,i10,i3,i5,i6,Md230,dotrewrite-d230-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md230,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p2.p;
	.sort:momrewrite-Md230-4;
	if (count(Md230,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md230-3;
	if (count(Md230,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p1.p;
	.sort:momrewrite-Md230-2;
	if (count(Md230,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md230-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd230()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md230,dotrewrite-d230-0)
	#call replace(p1.p3,i1/2+i3/2-i7/2,i,i1,i3,i7,Md230,dotrewrite-d230-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md230,dotrewrite-d230-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md230,dotrewrite-d230-3)
#endif
#break
#endswitch
#break
*--#] d230 : 
*--#[ d131 :
#case Md131
#procedure SimpleDotd131()
if (count(Md131,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p3^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	if (count(Md131,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md131,dotrewrite-d131-1)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md131,dotrewrite-d131-2)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md131,dotrewrite-d131-3)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md131,dotrewrite-d131-4)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p6.p + p7.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p5.p + p6.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md131,dotrewrite-d131-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md131,dotrewrite-d131-1)
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md131,dotrewrite-d131-2)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md131,dotrewrite-d131-3)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md131,dotrewrite-d131-4)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p7.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p5.p + Q.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md131,dotrewrite-d131-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md131,dotrewrite-d131-1)
	#call replace(Q.p4,`Q2'/2+i5/2-i7/2-i8,i,i5,i7,i8,Md131,dotrewrite-d131-2)
	#call replace(p1.p4,i1/2+i5/2-i6/2-i9,i,i1,i5,i6,i9,Md131,dotrewrite-d131-3)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p2.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md131,dotrewrite-d131-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md131,dotrewrite-d131-1)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md131,dotrewrite-d131-2)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md131,dotrewrite-d131-3)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case Q7
* path: (0, 7)
#case Q2
* path: (0, 7, 2)
#case Q1
* path: (0, 7, 2, 1)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p2.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	if (count(Md131,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md131,dotrewrite-d131-1)
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md131,dotrewrite-d131-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md131,dotrewrite-d131-3)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md131,dotrewrite-d131-4)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p + p7.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	if (count(Md131,1)) id p2.p3 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md131,dotrewrite-d131-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md131,dotrewrite-d131-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md131,dotrewrite-d131-3)
	#call replace(p2.p5,`Q2'/2-i1/2+i6/2-i7/2,i,i1,i6,i7,Md131,dotrewrite-d131-4)
#endif
#break
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p6.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p7.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	#call replace(Q.p7,`Q2'/2-i5/2+i7/2,i,i5,i7,Md131,dotrewrite-d131-0)
	#call replace(p6.p7,-i2/2+i6/2+i7/2,i,i2,i6,i7,Md131,dotrewrite-d131-1)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i7/2,i,i1,i2,i5,i7,Md131,dotrewrite-d131-2)
	#call replace(p3.p6,-i3/2+i4/2-i5/2+i9,i,i3,i4,i5,i9,Md131,dotrewrite-d131-3)
	#call replace(p3.p7,-i3/2+i4/2-i5/2+i8,i,i3,i4,i5,i8,Md131,dotrewrite-d131-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md131,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md131-4;
	if (count(Md131,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md131-3;
	if (count(Md131,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md131-2;
	if (count(Md131,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p5.p;
	.sort:momrewrite-Md131-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd131()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md131,dotrewrite-d131-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i7/2,i,i5,i7,Md131,dotrewrite-d131-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md131,dotrewrite-d131-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md131,dotrewrite-d131-3)
#endif
#break
#endswitch
#break
*--#] d131 : 
*--#[ d362 :
#case Md362
#procedure SimpleDotd362()
if (count(Md362,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p2.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 4, 2, 3)
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p5.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p6} = + p2.p + p3.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	if (count(Md362,1)) id Q.p3 = i10 - i11;
	if (count(Md362,1)) id p3.p6 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md362,dotrewrite-d362-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md362,dotrewrite-d362-4)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i7/2,i,i1,i2,i5,i7,Md362,dotrewrite-d362-5)
	#call replace(p4.p6,i12+i6/2+i8/2-i9/2,i,i12,i6,i8,i9,Md362,dotrewrite-d362-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	if (count(Md362,1)) id Q.p3 = i10 - i11;
	if (count(Md362,1)) id p3.p6 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md362,dotrewrite-d362-3)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md362,dotrewrite-d362-4)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i7/2,i,i1,i2,i5,i7,Md362,dotrewrite-d362-5)
	#call replace(p4.p6,i12+i6/2+i8/2-i9/2,i,i12,i6,i8,i9,Md362,dotrewrite-d362-6)
#endif
#break
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p5.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p5.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p2.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md362,dotrewrite-d362-1)
	#call replace(Q.p5,-`Q2'/2+i11-i4/2+i8/2,i,i11,i4,i8,Md362,dotrewrite-d362-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2,i,i2,i3,i4,i7,Md362,dotrewrite-d362-3)
	#call replace(p5.p6,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md362,dotrewrite-d362-4)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case Q8
* path: (0, 8)
#case Q6
* path: (0, 8, 6)
#case 18
* path: (1, 8)
#case 16
* path: (1, 8, 6)
#case 28
* path: (2, 1, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p7.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-0)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md362,dotrewrite-d362-1)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md362,dotrewrite-d362-2)
	#call replace(p1.p8,-i1/2+i10-i4/2+i7/2,i,i1,i10,i4,i7,Md362,dotrewrite-d362-3)
	#call replace(p2.p8,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md362,dotrewrite-d362-4)
#endif
#break
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p5.p - p7.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p7.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	#call replace(p1.p7,-i1/2+i4/2-i7/2,i,i1,i4,i7,Md362,dotrewrite-d362-0)
	#call replace(p5.p7,i3/2-i5/2-i7/2,i,i3,i5,i7,Md362,dotrewrite-d362-1)
	#call replace(Q.p5,-`Q2'/2+i11-i4/2+i8/2,i,i11,i4,i8,Md362,dotrewrite-d362-2)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2,i,i2,i3,i4,i7,Md362,dotrewrite-d362-3)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md362,dotrewrite-d362-4)
	#call replace(p5.p6,-i12+i14-i6/2-i8/2+i9/2,i,i12,i14,i6,i8,i9,Md362,dotrewrite-d362-5)
	#call replace(p6.p7,i12-i13+i6/2+i8/2-i9/2,i,i12,i13,i6,i8,i9,Md362,dotrewrite-d362-6)
#endif
#break
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p7.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p7.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-0)
	#call replace(p1.p7,-i1/2+i4/2-i7/2,i,i1,i4,i7,Md362,dotrewrite-d362-1)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md362,dotrewrite-d362-2)
	#call replace(p2.p7,-i1/2+i3/2+i4/2-i5/2,i,i1,i3,i4,i5,Md362,dotrewrite-d362-3)
	#call replace(p6.p7,i12-i13+i6/2+i8/2-i9/2,i,i12,i13,i6,i8,i9,Md362,dotrewrite-d362-4)
#endif
#break
#case 38
* path: (3, 1, 8)
#case 36
* path: (3, 1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p7.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	if (count(Md362,1)) id Q.p3 = i10 - i11;
	if (count(Md362,1)) id p3.p6 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-2)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md362,dotrewrite-d362-3)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md362,dotrewrite-d362-4)
	#call replace(p1.p8,-i1/2+i10-i4/2+i7/2,i,i1,i10,i4,i7,Md362,dotrewrite-d362-5)
	#call replace(p3.p8,-i1/2+i10-i11+i2/2-i5/2+i7/2,i,i1,i10,i11,i2,i5,i7,Md362,dotrewrite-d362-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md362,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md362-5;
	if (count(Md362,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md362-4;
	if (count(Md362,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md362-3;
	if (count(Md362,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md362-2;
	if (count(Md362,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md362-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd362()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md362,dotrewrite-d362-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md362,dotrewrite-d362-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md362,dotrewrite-d362-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md362,dotrewrite-d362-3)
	#call replace(p4.p6,i12+i6/2+i8/2-i9/2,i,i12,i6,i8,i9,Md362,dotrewrite-d362-4)
#endif
#break
#endswitch
#break
*--#] d362 : 
*--#[ d363 :
#case Md363
#procedure SimpleDotd363()
if (count(Md363,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 7, 8)
#case 67
* path: (6, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md363,dotrewrite-d363-0)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md363,dotrewrite-d363-1)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md363,dotrewrite-d363-2)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md363,dotrewrite-d363-3)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md363,dotrewrite-d363-4)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md363,dotrewrite-d363-5)
	#call replace(p3.p8,i12-i13+i3/2-i5/2+i7/2,i,i12,i13,i3,i5,i7,Md363,dotrewrite-d363-6)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p7.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md363,dotrewrite-d363-0)
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md363,dotrewrite-d363-1)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md363,dotrewrite-d363-2)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md363,dotrewrite-d363-3)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md363,dotrewrite-d363-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	if (count(Md363,1)) id p2.p3 = i12 - i13;
	if (count(Md363,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md363,dotrewrite-d363-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md363,dotrewrite-d363-3)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md363,dotrewrite-d363-4)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md363,dotrewrite-d363-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md363,dotrewrite-d363-6)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p5.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md363,dotrewrite-d363-0)
	#call replace(p3.p5,-i3/2-i5/2+i7/2,i,i3,i5,i7,Md363,dotrewrite-d363-1)
	#call replace(p1.p5,i1/2-i13-i4/2+i7/2,i,i1,i13,i4,i7,Md363,dotrewrite-d363-2)
	#call replace(Q.p5,i1/2-i12-i2/2-i4/2+i8/2,i,i1,i12,i2,i4,i8,Md363,dotrewrite-d363-3)
	#call replace(p5.p6,-i10+i11-i14-i6/2-i8/2+i9/2,i,i10,i11,i14,i6,i8,i9,Md363,dotrewrite-d363-4)
#endif
#break
#case Q7
* path: (0, 4, 3, 7)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p7.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md363,dotrewrite-d363-0)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md363,dotrewrite-d363-1)
	#call replace(p4.p7,i1/2-i4/2-i7/2,i,i1,i4,i7,Md363,dotrewrite-d363-2)
	#call replace(p3.p4,i13-i3/2+i5/2-i7/2,i,i13,i3,i5,i7,Md363,dotrewrite-d363-3)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md363,dotrewrite-d363-4)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md363,dotrewrite-d363-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md363,dotrewrite-d363-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p7.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	if (count(Md363,1)) id p2.p3 = i12 - i13;
	if (count(Md363,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md363,dotrewrite-d363-2)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md363,dotrewrite-d363-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md363,dotrewrite-d363-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md363,dotrewrite-d363-5)
	#call replace(p3.p8,i12-i13+i3/2-i5/2+i7/2,i,i12,i13,i3,i5,i7,Md363,dotrewrite-d363-6)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case 18
* path: (1, 2, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p7.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md363,dotrewrite-d363-0)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md363,dotrewrite-d363-1)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md363,dotrewrite-d363-2)
	#call replace(p1.p8,`Q2'/2-i2/2-i4/2+i7/2,i,i2,i4,i7,Md363,dotrewrite-d363-3)
	#call replace(p3.p8,i12-i13+i3/2-i5/2+i7/2,i,i12,i13,i3,i5,i7,Md363,dotrewrite-d363-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case Q4
* path: (0, 4)
#case Q1
* path: (0, 4, 1)
#case Q2
* path: (0, 4, 1, 2)
#case Q3
* path: (0, 4, 3)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md363,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md363-5;
	if (count(Md363,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md363-4;
	if (count(Md363,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p4.p;
	.sort:momrewrite-Md363-3;
	if (count(Md363,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md363-2;
	if (count(Md363,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md363-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd363()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md363,dotrewrite-d363-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md363,dotrewrite-d363-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md363,dotrewrite-d363-2)
	#call replace(p3.p4,i13-i3/2+i5/2-i7/2,i,i13,i3,i5,i7,Md363,dotrewrite-d363-3)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md363,dotrewrite-d363-4)
#endif
#break
#endswitch
#break
*--#] d363 : 
*--#[ d364 :
#case Md364
#procedure SimpleDotd364()
if (count(Md364,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 7, 8)
#case 67
* path: (6, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md364,dotrewrite-d364-0)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md364,dotrewrite-d364-1)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md364,dotrewrite-d364-2)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md364,dotrewrite-d364-3)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md364,dotrewrite-d364-4)
	#call replace(p3.p8,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md364,dotrewrite-d364-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md364,dotrewrite-d364-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p7.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md364,dotrewrite-d364-0)
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md364,dotrewrite-d364-1)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md364,dotrewrite-d364-2)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md364,dotrewrite-d364-3)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md364,dotrewrite-d364-4)
#endif
#break
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p3.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	if (count(Md364,1)) id p2.p3 = i12 - i13;
	if (count(Md364,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md364,dotrewrite-d364-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md364,dotrewrite-d364-3)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md364,dotrewrite-d364-4)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md364,dotrewrite-d364-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md364,dotrewrite-d364-6)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p + p5.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md364,dotrewrite-d364-0)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md364,dotrewrite-d364-1)
	#call replace(Q.p5,`Q2'/2-i12+i4/2-i8/2,i,i12,i4,i8,Md364,dotrewrite-d364-2)
	#call replace(p1.p5,i1/2-i13+i4/2-i7/2,i,i1,i13,i4,i7,Md364,dotrewrite-d364-3)
	#call replace(p5.p6,i10-i14+i6/2+i8/2-i9/2,i,i10,i14,i6,i8,i9,Md364,dotrewrite-d364-4)
#endif
#break
#case Q7
* path: (0, 4, 3, 7)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p7.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md364,dotrewrite-d364-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md364,dotrewrite-d364-1)
	#call replace(p4.p7,i1/2-i4/2-i7/2,i,i1,i4,i7,Md364,dotrewrite-d364-2)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md364,dotrewrite-d364-3)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md364,dotrewrite-d364-4)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md364,dotrewrite-d364-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md364,dotrewrite-d364-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q6
* path: (0, 2, 8, 6)
#case Q2
* path: (0, 6, 8, 2)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	if (count(Md364,1)) id p2.p3 = i12 - i13;
	if (count(Md364,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md364,dotrewrite-d364-2)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md364,dotrewrite-d364-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md364,dotrewrite-d364-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md364,dotrewrite-d364-5)
	#call replace(p3.p8,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md364,dotrewrite-d364-6)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case 18
* path: (1, 2, 8)
#case 16
* path: (1, 2, 8, 6)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md364,dotrewrite-d364-0)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md364,dotrewrite-d364-1)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md364,dotrewrite-d364-2)
	#call replace(p1.p8,`Q2'/2-i2/2-i4/2+i7/2,i,i2,i4,i7,Md364,dotrewrite-d364-3)
	#call replace(p3.p8,i12-i3/2-i4/2+i5/2,i,i12,i3,i4,i5,Md364,dotrewrite-d364-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 6, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md364,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md364-5;
	if (count(Md364,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md364-4;
	if (count(Md364,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md364-3;
	if (count(Md364,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p4.p;
	.sort:momrewrite-Md364-2;
	if (count(Md364,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md364-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd364()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md364,dotrewrite-d364-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md364,dotrewrite-d364-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md364,dotrewrite-d364-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md364,dotrewrite-d364-3)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md364,dotrewrite-d364-4)
#endif
#break
#endswitch
#break
*--#] d364 : 
*--#[ d365 :
#case Md365
#procedure SimpleDotd365()
if (count(Md365,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p7.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p8.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	if (count(Md365,1)) id p3.p8 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md365,dotrewrite-d365-1)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md365,dotrewrite-d365-2)
	#call replace(p7.p8,-i2/2+i7/2+i8/2,i,i2,i7,i8,Md365,dotrewrite-d365-3)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md365,dotrewrite-d365-4)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md365,dotrewrite-d365-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md365,dotrewrite-d365-6)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p1.p - p7.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md365,dotrewrite-d365-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md365,dotrewrite-d365-1)
	#call replace(p1.p7,i1/2-i5/2+i7/2,i,i1,i5,i7,Md365,dotrewrite-d365-2)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md365,dotrewrite-d365-3)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md365,dotrewrite-d365-4)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md365,dotrewrite-d365-5)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	if (count(Md365,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md365,dotrewrite-d365-1)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md365,dotrewrite-d365-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md365,dotrewrite-d365-3)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md365,dotrewrite-d365-4)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md365,dotrewrite-d365-5)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md365,dotrewrite-d365-6)
#endif
#break
#case Q7
* path: (0, 5, 7)
#case 57
* path: (5, 7)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p5.p + p7.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p7.p - p3.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md365,dotrewrite-d365-0)
	#call replace(p5.p7,i1/2-i5/2-i7/2,i,i1,i5,i7,Md365,dotrewrite-d365-1)
	#call replace(p5.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md365,dotrewrite-d365-2)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md365,dotrewrite-d365-3)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md365,dotrewrite-d365-4)
	#call replace(p6.p7,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md365,dotrewrite-d365-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q6
* path: (0, 2, 8, 6)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p8.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	if (count(Md365,1)) id p2.p6 = i10 - i11;
	if (count(Md365,1)) id p3.p8 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md365,dotrewrite-d365-2)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md365,dotrewrite-d365-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md365,dotrewrite-d365-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md365,dotrewrite-d365-5)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md365,dotrewrite-d365-6)
#endif
#break
#case Q2
* path: (0, 5, 7, 2)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	if (count(Md365,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md365,dotrewrite-d365-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md365,dotrewrite-d365-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md365,dotrewrite-d365-3)
	#call replace(p2.p5,`Q2'/2-i1/2+i7/2-i8/2,i,i1,i7,i8,Md365,dotrewrite-d365-4)
	#call replace(p5.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md365,dotrewrite-d365-5)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case 18
* path: (1, 2, 8)
#case 16
* path: (1, 2, 8, 6)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p8.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	if (count(Md365,1)) id p3.p8 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md365,dotrewrite-d365-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md365,dotrewrite-d365-2)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md365,dotrewrite-d365-3)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md365,dotrewrite-d365-4)
	#call replace(p1.p8,`Q2'/2-i2/2-i5/2+i7/2,i,i2,i5,i7,Md365,dotrewrite-d365-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md365,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md365-5;
	if (count(Md365,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md365-4;
	if (count(Md365,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md365-3;
	if (count(Md365,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p5.p;
	.sort:momrewrite-Md365-2;
	if (count(Md365,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md365-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd365()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md365,dotrewrite-d365-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md365,dotrewrite-d365-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md365,dotrewrite-d365-2)
	#call replace(p1.p5,i1/2+i5/2-i7/2,i,i1,i5,i7,Md365,dotrewrite-d365-3)
	#call replace(p5.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md365,dotrewrite-d365-4)
#endif
#break
#endswitch
#break
*--#] d365 : 
*--#[ d238 :
#case Md238
#procedure SimpleDotd238()
if (count(Md238,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p5^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 5, 7)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 17
* path: (1, 7)
#case 15
* path: (1, 7, 5)
#case 27
* path: (2, 1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md238,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md238-4;
	if (count(Md238,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p7.p;
	.sort:momrewrite-Md238-3;
	if (count(Md238,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md238-2;
	if (count(Md238,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md238-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd238()
	if (count(Md238,1)) id p2.p7 = i12 - i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md238,dotrewrite-d238-1)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md238,dotrewrite-d238-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md238,dotrewrite-d238-3)
	#call replace(p1.p7,-i1/2-i4/2+i6/2+i9,i,i1,i4,i6,i9,Md238,dotrewrite-d238-4)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md238,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md238-4;
	if (count(Md238,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md238-3;
	if (count(Md238,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p1.p + p6.p;
	.sort:momrewrite-Md238-2;
	if (count(Md238,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md238-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd238()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md238,dotrewrite-d238-0)
	#call replace(p1.p6,-i1/2+i4/2-i6/2,i,i1,i4,i6,Md238,dotrewrite-d238-1)
	#call replace(Q.p6,`Q2'/2+i4/2-i7/2-i9,i,i4,i7,i9,Md238,dotrewrite-d238-2)
	#call replace(p2.p6,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md238,dotrewrite-d238-3)
	#call replace(p5.p6,i10-i11+i5/2+i7/2-i8/2,i,i10,i11,i5,i7,i8,Md238,dotrewrite-d238-4)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md238,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md238-4;
	if (count(Md238,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p7.p;
	.sort:momrewrite-Md238-3;
	if (count(Md238,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md238-2;
	if (count(Md238,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + Q.p - p6.p - p7.p;
	.sort:momrewrite-Md238-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd238()
	if (count(Md238,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md238,dotrewrite-d238-1)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md238,dotrewrite-d238-2)
	#call replace(Q.p6,`Q2'/2+i4/2-i7/2-i9,i,i4,i7,i9,Md238,dotrewrite-d238-3)
	#call replace(p2.p6,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md238,dotrewrite-d238-4)
	#call replace(p5.p6,i10-i11+i5/2+i7/2-i8/2,i,i10,i11,i5,i7,i8,Md238,dotrewrite-d238-5)
	#call replace(p6.p7,`Q2'/2+i1/2-i6/2-i7/2-i9,i,i1,i6,i7,i9,Md238,dotrewrite-d238-6)
#endif
#break
#case Q6
* path: (0, 4, 6)
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md238,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md238-4;
	if (count(Md238,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p4.p - p6.p;
	.sort:momrewrite-Md238-3;
	if (count(Md238,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md238-2;
	if (count(Md238,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p2.p - p6.p;
	.sort:momrewrite-Md238-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd238()
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md238,dotrewrite-d238-0)
	#call replace(p4.p6,-i1/2+i4/2+i6/2,i,i1,i4,i6,Md238,dotrewrite-d238-1)
	#call replace(p4.p5,i10+i5/2+i7/2-i8/2,i,i10,i5,i7,i8,Md238,dotrewrite-d238-2)
	#call replace(Q.p6,`Q2'/2+i4/2-i7/2-i9,i,i4,i7,i9,Md238,dotrewrite-d238-3)
	#call replace(p2.p6,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md238,dotrewrite-d238-4)
	#call replace(p5.p6,i10-i11+i5/2+i7/2-i8/2,i,i10,i11,i5,i7,i8,Md238,dotrewrite-d238-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 4)
#case Q2
* path: (0, 4, 2)
#case Q1
* path: (0, 4, 2, 1)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 47
* path: (4, 5, 7)
#case 55
* path: (5,)
#case 58
* path: (5, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md238,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md238-4;
	if (count(Md238,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md238-3;
	if (count(Md238,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p1.p;
	.sort:momrewrite-Md238-2;
	if (count(Md238,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md238-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd238()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md238,dotrewrite-d238-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md238,dotrewrite-d238-1)
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Md238,dotrewrite-d238-2)
	#call replace(p4.p5,i10+i5/2+i7/2-i8/2,i,i10,i5,i7,i8,Md238,dotrewrite-d238-3)
#endif
#break
#endswitch
#break
*--#] d238 : 
*--#[ d228 :
#case Md228
#procedure SimpleDotd228()
if (count(Md228,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 5, 7)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 17
* path: (1, 7)
#case 15
* path: (1, 7, 5)
#case 27
* path: (2, 1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md228,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p7.p;
	.sort:momrewrite-Md228-4;
	if (count(Md228,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md228-3;
	if (count(Md228,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md228-2;
	if (count(Md228,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md228-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd228()
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md228,dotrewrite-d228-0)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md228,dotrewrite-d228-1)
	#call replace(p1.p7,-i1/2+i12-i3/2+i6/2,i,i1,i12,i3,i6,Md228,dotrewrite-d228-2)
	#call replace(p2.p7,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md228,dotrewrite-d228-3)
#endif
#break
#case 16
* path: (1, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md228,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md228-4;
	if (count(Md228,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p + p6.p;
	.sort:momrewrite-Md228-3;
	if (count(Md228,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p6.p - p2.p;
	.sort:momrewrite-Md228-2;
	if (count(Md228,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md228-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd228()
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md228,dotrewrite-d228-0)
	#call replace(Q.p6,`Q2'/2-i12+i3/2-i7/2,i,i12,i3,i7,Md228,dotrewrite-d228-1)
	#call replace(p2.p6,-i13+i2/2+i3/2-i4/2,i,i13,i2,i3,i4,Md228,dotrewrite-d228-2)
	#call replace(p5.p6,i10-i14+i5/2+i7/2-i8/2,i,i10,i14,i5,i7,i8,Md228,dotrewrite-d228-3)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md228,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md228-4;
	if (count(Md228,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p4.p;
	.sort:momrewrite-Md228-3;
	if (count(Md228,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p4.p - p1.p;
	.sort:momrewrite-Md228-2;
	if (count(Md228,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Md228-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd228()
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md228,dotrewrite-d228-0)
	#call replace(Q.p4,`Q2'/2+i3/2-i7/2-i9,i,i3,i7,i9,Md228,dotrewrite-d228-1)
	#call replace(p1.p4,i1/2-i13+i3/2-i6/2,i,i1,i13,i3,i6,Md228,dotrewrite-d228-2)
	#call replace(p4.p5,i10-i11+i5/2+i7/2-i8/2,i,i10,i11,i5,i7,i8,Md228,dotrewrite-d228-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 58
* path: (5, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md228,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md228-4;
	if (count(Md228,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p2.p;
	.sort:momrewrite-Md228-3;
	if (count(Md228,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p1.p;
	.sort:momrewrite-Md228-2;
	if (count(Md228,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md228-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd228()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md228,dotrewrite-d228-0)
	#call replace(p1.p3,i1/2+i3/2-i6/2,i,i1,i3,i6,Md228,dotrewrite-d228-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md228,dotrewrite-d228-2)
	#call replace(p3.p5,i10+i5/2+i7/2-i8/2,i,i10,i5,i7,i8,Md228,dotrewrite-d228-3)
#endif
#break
#endswitch
#break
*--#] d228 : 
*--#[ d367 :
#case Md367
#procedure SimpleDotd367()
if (count(Md367,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id p1.p6^n? = i12^n;
	id p2.p6^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p5.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p6} = + p2.p + p3.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	if (count(Md367,1)) id Q.p3 = i10 - i11;
	if (count(Md367,1)) id p3.p6 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md367,dotrewrite-d367-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md367,dotrewrite-d367-4)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i7/2,i,i1,i2,i5,i7,Md367,dotrewrite-d367-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	if (count(Md367,1)) id Q.p3 = i10 - i11;
	if (count(Md367,1)) id p3.p6 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md367,dotrewrite-d367-3)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md367,dotrewrite-d367-4)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-5)
	#call replace(p3.p4,i1/2-i2/2+i5/2-i7/2,i,i1,i2,i5,i7,Md367,dotrewrite-d367-6)
#endif
#break
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p5.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p2.p - p5.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p5.p - p2.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	if (count(Md367,1)) id p5.p6 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md367,dotrewrite-d367-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-3)
	#call replace(Q.p5,-`Q2'/2+i11-i4/2+i8/2,i,i11,i4,i8,Md367,dotrewrite-d367-4)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2,i,i2,i3,i4,i7,Md367,dotrewrite-d367-5)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case Q1
* path: (0, 6, 8, 1)
#case Q8
* path: (0, 8)
#case Q6
* path: (0, 8, 6)
#case 18
* path: (1, 8)
#case 16
* path: (1, 8, 6)
#case 28
* path: (2, 1, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p7.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md367,dotrewrite-d367-2)
	#call replace(p1.p8,-i1/2+i10-i4/2+i7/2,i,i1,i10,i4,i7,Md367,dotrewrite-d367-3)
	#call replace(p2.p8,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md367,dotrewrite-d367-4)
	#call replace(p6.p8,`Q2'/2-i14+i6/2-i9/2,i,i14,i6,i9,Md367,dotrewrite-d367-5)
#endif
#break
#case 15
* path: (1, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p5.p - p7.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p1.p + p7.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	if (count(Md367,1)) id p5.p6 = i13 - i14;
	if (count(Md367,1)) id p6.p7 = -i12 + i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-2)
	#call replace(p1.p7,-i1/2+i4/2-i7/2,i,i1,i4,i7,Md367,dotrewrite-d367-3)
	#call replace(p5.p7,i3/2-i5/2-i7/2,i,i3,i5,i7,Md367,dotrewrite-d367-4)
	#call replace(Q.p5,-`Q2'/2+i11-i4/2+i8/2,i,i11,i4,i8,Md367,dotrewrite-d367-5)
	#call replace(p1.p5,i2/2-i3/2-i4/2+i7/2,i,i2,i3,i4,i7,Md367,dotrewrite-d367-6)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md367,dotrewrite-d367-7)
#endif
#break
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p7.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p1.p + p7.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	if (count(Md367,1)) id p6.p7 = -i12 + i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-2)
	#call replace(p1.p7,-i1/2+i4/2-i7/2,i,i1,i4,i7,Md367,dotrewrite-d367-3)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md367,dotrewrite-d367-4)
	#call replace(p2.p7,-i1/2+i3/2+i4/2-i5/2,i,i1,i3,i4,i5,Md367,dotrewrite-d367-5)
#endif
#break
#case Q3
* path: (0, 6, 8, 1, 3)
#case 38
* path: (3, 1, 8)
#case 36
* path: (3, 1, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p - p7.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	if (count(Md367,1)) id Q.p3 = i10 - i11;
	if (count(Md367,1)) id p3.p6 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-3)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md367,dotrewrite-d367-4)
	#call replace(p1.p8,-i1/2+i10-i4/2+i7/2,i,i1,i10,i4,i7,Md367,dotrewrite-d367-5)
	#call replace(p6.p8,`Q2'/2-i14+i6/2-i9/2,i,i14,i6,i9,Md367,dotrewrite-d367-6)
	#call replace(p3.p8,-i1/2+i10-i11+i2/2-i5/2+i7/2,i,i1,i10,i11,i2,i5,i7,Md367,dotrewrite-d367-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q2
* path: (0, 6, 4, 2)
#case Q4
* path: (0, 8, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 28
* path: (2, 4, 8)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md367,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md367-5;
	if (count(Md367,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md367-4;
	if (count(Md367,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md367-3;
	if (count(Md367,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md367-2;
	if (count(Md367,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md367-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd367()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md367,dotrewrite-d367-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md367,dotrewrite-d367-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md367,dotrewrite-d367-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md367,dotrewrite-d367-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md367,dotrewrite-d367-4)
#endif
#break
#endswitch
#break
*--#] d367 : 
*--#[ d368 :
#case Md368
#procedure SimpleDotd368()
if (count(Md368,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p6^n? = i10^n;
	id p4.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 17
* path: (1, 2, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p1.p - p7.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	if (count(Md368,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md368,dotrewrite-d368-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-2)
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md368,dotrewrite-d368-3)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md368,dotrewrite-d368-4)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md368,dotrewrite-d368-5)
#endif
#break
#case Q7
* path: (0, 6, 8, 7)
#case 67
* path: (6, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p + p8.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	if (count(Md368,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-1)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md368,dotrewrite-d368-2)
	#call replace(Q.p8,-`Q2'/2+i4/2-i8/2,i,i4,i8,Md368,dotrewrite-d368-3)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md368,dotrewrite-d368-4)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md368,dotrewrite-d368-5)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md368,dotrewrite-d368-6)
	#call replace(p3.p8,-i12+i13-i3/2+i5/2-i7/2,i,i12,i13,i3,i5,i7,Md368,dotrewrite-d368-7)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p5.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md368,dotrewrite-d368-0)
	#call replace(p3.p5,-i3/2-i5/2+i7/2,i,i3,i5,i7,Md368,dotrewrite-d368-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-2)
	#call replace(p5.p6,i10-i11-i14,i,i10,i11,i14,Md368,dotrewrite-d368-3)
	#call replace(p1.p5,i1/2-i13-i4/2+i7/2,i,i1,i13,i4,i7,Md368,dotrewrite-d368-4)
	#call replace(Q.p5,i1/2-i12-i2/2-i4/2+i8/2,i,i1,i12,i2,i4,i8,Md368,dotrewrite-d368-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	if (count(Md368,1)) id p2.p3 = i12 - i13;
	if (count(Md368,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md368,dotrewrite-d368-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md368,dotrewrite-d368-4)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md368,dotrewrite-d368-5)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md368,dotrewrite-d368-6)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md368,dotrewrite-d368-7)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p7.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p3.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - Q.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	if (count(Md368,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md368,dotrewrite-d368-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-2)
	#call replace(p3.p7,i3/2-i5/2+i7/2,i,i3,i5,i7,Md368,dotrewrite-d368-3)
	#call replace(p4.p7,i1/2-i4/2-i7/2,i,i1,i4,i7,Md368,dotrewrite-d368-4)
	#call replace(p3.p4,i13-i3/2+i5/2-i7/2,i,i13,i3,i5,i7,Md368,dotrewrite-d368-5)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md368,dotrewrite-d368-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q2
* path: (0, 6, 8, 2)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p7.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p + p8.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	if (count(Md368,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md368,dotrewrite-d368-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-2)
	#call replace(Q.p8,-`Q2'/2+i4/2-i8/2,i,i4,i8,Md368,dotrewrite-d368-3)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md368,dotrewrite-d368-4)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md368,dotrewrite-d368-5)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md368,dotrewrite-d368-6)
	#call replace(p3.p8,-i12+i13-i3/2+i5/2-i7/2,i,i12,i13,i3,i5,i7,Md368,dotrewrite-d368-7)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case 18
* path: (1, 2, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p7.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p8.p - p2.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p + p8.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md368,dotrewrite-d368-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-1)
	#call replace(Q.p8,-`Q2'/2+i4/2-i8/2,i,i4,i8,Md368,dotrewrite-d368-2)
	#call replace(p1.p8,-`Q2'/2+i2/2+i4/2-i7/2,i,i2,i4,i7,Md368,dotrewrite-d368-3)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md368,dotrewrite-d368-4)
	#call replace(p3.p8,-i12+i13-i3/2+i5/2-i7/2,i,i12,i13,i3,i5,i7,Md368,dotrewrite-d368-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 4)
#case Q6
* path: (0, 1, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q1
* path: (0, 6, 4, 1)
#case Q3
* path: (0, 6, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 4)
#case 16
* path: (1, 4, 6)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 38
* path: (3, 4, 8)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md368,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md368-5;
	if (count(Md368,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p4.p;
	.sort:momrewrite-Md368-4;
	if (count(Md368,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - Q.p;
	.sort:momrewrite-Md368-3;
	if (count(Md368,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md368-2;
	if (count(Md368,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md368-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd368()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md368,dotrewrite-d368-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md368,dotrewrite-d368-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md368,dotrewrite-d368-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md368,dotrewrite-d368-3)
	#call replace(p3.p4,i13-i3/2+i5/2-i7/2,i,i13,i3,i5,i7,Md368,dotrewrite-d368-4)
#endif
#break
#endswitch
#break
*--#] d368 : 
*--#[ d369 :
#case Md369
#procedure SimpleDotd369()
if (count(Md369,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p6^n? = i10^n;
	id p4.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 24
* path: (2, 8, 4)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - Q.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md369,dotrewrite-d369-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md369,dotrewrite-d369-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md369,dotrewrite-d369-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-4)
	#call replace(p2.p4,`Q2'/2-i1/2+i7/2-i8/2,i,i1,i7,i8,Md369,dotrewrite-d369-5)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md369,dotrewrite-d369-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 37
* path: (3, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p1.p - p7.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md369,dotrewrite-d369-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-2)
	#call replace(p1.p7,i1/2-i4/2+i7/2,i,i1,i4,i7,Md369,dotrewrite-d369-3)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md369,dotrewrite-d369-4)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md369,dotrewrite-d369-5)
#endif
#break
#case Q7
* path: (0, 6, 8, 7)
#case 67
* path: (6, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p + p8.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p3.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-1)
	#call replace(Q.p8,-`Q2'/2+i4/2-i8/2,i,i4,i8,Md369,dotrewrite-d369-2)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md369,dotrewrite-d369-3)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md369,dotrewrite-d369-4)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md369,dotrewrite-d369-5)
	#call replace(p3.p8,-i12+i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md369,dotrewrite-d369-6)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md369,dotrewrite-d369-7)
#endif
#break
#case 35
* path: (3, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p3.p + p5.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p5.p6 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md369,dotrewrite-d369-1)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md369,dotrewrite-d369-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-3)
	#call replace(Q.p5,`Q2'/2-i12+i4/2-i8/2,i,i12,i4,i8,Md369,dotrewrite-d369-4)
	#call replace(p1.p5,i1/2-i13+i4/2-i7/2,i,i1,i13,i4,i7,Md369,dotrewrite-d369-5)
#endif
#break
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + p5.p + p3.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p2.p3 = i12 - i13;
	if (count(Md369,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md369,dotrewrite-d369-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md369,dotrewrite-d369-4)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md369,dotrewrite-d369-5)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md369,dotrewrite-d369-6)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md369,dotrewrite-d369-7)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + p4.p + p7.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - Q.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md369,dotrewrite-d369-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md369,dotrewrite-d369-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-3)
	#call replace(p4.p7,i1/2-i4/2-i7/2,i,i1,i4,i7,Md369,dotrewrite-d369-4)
	#call replace(Q.p7,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md369,dotrewrite-d369-5)
	#call replace(p3.p7,i13-i3/2-i4/2+i5/2,i,i13,i3,i4,i5,Md369,dotrewrite-d369-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q6
* path: (0, 2, 8, 6)
#case Q2
* path: (0, 6, 8, 2)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p + p8.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p3.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	if (count(Md369,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md369,dotrewrite-d369-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-2)
	#call replace(Q.p8,-`Q2'/2+i4/2-i8/2,i,i4,i8,Md369,dotrewrite-d369-3)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md369,dotrewrite-d369-4)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md369,dotrewrite-d369-5)
	#call replace(p3.p8,-i12+i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md369,dotrewrite-d369-6)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md369,dotrewrite-d369-7)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case Q1
* path: (0, 6, 8, 2, 1)
#case 18
* path: (1, 2, 8)
#case 16
* path: (1, 2, 8, 6)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p4.p?!{p4,[P+p4],[P-p4],p6} = + Q.p + p8.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p + p8.p - p3.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md369,dotrewrite-d369-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-1)
	#call replace(Q.p8,-`Q2'/2+i4/2-i8/2,i,i4,i8,Md369,dotrewrite-d369-2)
	#call replace(p1.p8,-`Q2'/2+i2/2+i4/2-i7/2,i,i2,i4,i7,Md369,dotrewrite-d369-3)
	#call replace(p3.p8,-i12+i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md369,dotrewrite-d369-4)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md369,dotrewrite-d369-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q3
* path: (0, 6, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 38
* path: (3, 4, 8)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 48
* path: (4, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md369,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md369-5;
	if (count(Md369,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p4.p - p3.p;
	.sort:momrewrite-Md369-4;
	if (count(Md369,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p4.p;
	.sort:momrewrite-Md369-3;
	if (count(Md369,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - Q.p;
	.sort:momrewrite-Md369-2;
	if (count(Md369,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md369-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd369()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md369,dotrewrite-d369-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md369,dotrewrite-d369-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md369,dotrewrite-d369-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md369,dotrewrite-d369-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md369,dotrewrite-d369-4)
#endif
#break
#endswitch
#break
*--#] d369 : 
*--#[ d371 :
#case Md371
#procedure SimpleDotd371()
if (count(Md371,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p6^n? = i10^n;
	id p5.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p - p8.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p5.p?!{p5,[P+p5],[P-p5],p3,p6} = + Q.p + p8.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	if (count(Md371,1)) id p6.p7 = i10 - i11;
	if (count(Md371,1)) id p3.p8 = -i12 + i13;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-2)
	#call replace(Q.p8,-`Q2'/2+i5/2-i8/2,i,i5,i8,Md371,dotrewrite-d371-3)
	#call replace(p7.p8,i2/2-i7/2-i8/2,i,i2,i7,i8,Md371,dotrewrite-d371-4)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md371,dotrewrite-d371-5)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md371,dotrewrite-d371-6)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md371,dotrewrite-d371-7)
#endif
#break
#case 17
* path: (1, 2, 7)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p5.p?!{p5,[P+p5],[P-p5],p3,p6} = + p1.p - p7.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	if (count(Md371,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md371,dotrewrite-d371-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md371,dotrewrite-d371-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-3)
	#call replace(p1.p7,i1/2-i5/2+i7/2,i,i1,i5,i7,Md371,dotrewrite-d371-4)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md371,dotrewrite-d371-5)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md371,dotrewrite-d371-6)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p5.p?!{p5,[P+p5],[P-p5],p3,p6} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	if (count(Md371,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md371,dotrewrite-d371-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md371,dotrewrite-d371-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md371,dotrewrite-d371-4)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md371,dotrewrite-d371-5)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md371,dotrewrite-d371-6)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md371,dotrewrite-d371-7)
#endif
#break
#case Q7
* path: (0, 6, 5, 7)
#case 25
* path: (2, 7, 5)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 67
* path: (6, 5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p5.p + p7.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - Q.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p7.p - p3.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	if (count(Md371,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md371,dotrewrite-d371-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-2)
	#call replace(p5.p7,i1/2-i5/2-i7/2,i,i1,i5,i7,Md371,dotrewrite-d371-3)
	#call replace(Q.p7,i1/2-i2/2-i5/2+i8/2,i,i1,i2,i5,i8,Md371,dotrewrite-d371-4)
	#call replace(p3.p7,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md371,dotrewrite-d371-5)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case Q6
* path: (0, 2, 8, 6)
#case Q2
* path: (0, 6, 8, 2)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p5.p?!{p5,[P+p5],[P-p5],p3,p6} = + Q.p + p8.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	if (count(Md371,1)) id p3.p8 = -i12 + i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md371,dotrewrite-d371-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-2)
	#call replace(Q.p8,-`Q2'/2+i5/2-i8/2,i,i5,i8,Md371,dotrewrite-d371-3)
	#call replace(p2.p8,-i2/2+i7/2-i8/2,i,i2,i7,i8,Md371,dotrewrite-d371-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md371,dotrewrite-d371-5)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md371,dotrewrite-d371-6)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md371,dotrewrite-d371-7)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - Q.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md371,dotrewrite-d371-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md371,dotrewrite-d371-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-2)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md371,dotrewrite-d371-3)
	#call replace(p2.p5,`Q2'/2-i1/2+i7/2-i8/2,i,i1,i7,i8,Md371,dotrewrite-d371-4)
	#call replace(p2.p6,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md371,dotrewrite-d371-5)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case Q1
* path: (0, 6, 8, 2, 1)
#case 18
* path: (1, 2, 8)
#case 16
* path: (1, 2, 8, 6)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p8.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p5.p?!{p5,[P+p5],[P-p5],p3,p6} = + Q.p + p8.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	if (count(Md371,1)) id p3.p8 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md371,dotrewrite-d371-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md371,dotrewrite-d371-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-3)
	#call replace(Q.p8,-`Q2'/2+i5/2-i8/2,i,i5,i8,Md371,dotrewrite-d371-4)
	#call replace(p1.p8,-`Q2'/2+i2/2+i5/2-i7/2,i,i2,i5,i7,Md371,dotrewrite-d371-5)
	#call replace(p6.p8,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md371,dotrewrite-d371-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case Q3
* path: (0, 6, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 1, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 58
* path: (5, 8)
#case 66
* path: (6,)
#case 69
* path: (6, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md371,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md371-5;
	if (count(Md371,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md371-4;
	if (count(Md371,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p5.p;
	.sort:momrewrite-Md371-3;
	if (count(Md371,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - Q.p;
	.sort:momrewrite-Md371-2;
	if (count(Md371,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md371-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd371()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md371,dotrewrite-d371-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md371,dotrewrite-d371-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md371,dotrewrite-d371-2)
	#call replace(p1.p5,i1/2+i5/2-i7/2,i,i1,i5,i7,Md371,dotrewrite-d371-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md371,dotrewrite-d371-4)
#endif
#break
#endswitch
#break
*--#] d371 : 
*--#[ d237 :
#case Md237
#procedure SimpleDotd237()
if (count(Md237,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p1^n? = i9^n;
	id p1.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 5, 7)
#case Q1
* path: (0, 5, 7, 1)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 17
* path: (1, 7)
#case 15
* path: (1, 7, 5)
#case 27
* path: (2, 1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md237,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md237-4;
	if (count(Md237,1)) id p4.p?!{p4,[P+p4],[P-p4],p2,p5} = + Q.p - p7.p;
	.sort:momrewrite-Md237-3;
	if (count(Md237,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md237-2;
	if (count(Md237,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md237-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd237()
	if (count(Md237,1)) id p2.p7 = i12 - i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md237,dotrewrite-d237-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md237,dotrewrite-d237-2)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md237,dotrewrite-d237-3)
	#call replace(p1.p7,-i1/2-i4/2+i6/2+i9,i,i1,i4,i6,i9,Md237,dotrewrite-d237-4)
	#call replace(p5.p7,`Q2'/2-i11+i5/2-i8/2,i,i11,i5,i8,Md237,dotrewrite-d237-5)
#endif
#break
#case Q6
* path: (0, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md237,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md237-4;
	if (count(Md237,1)) id p4.p?!{p4,[P+p4],[P-p4],p2,p5} = + p1.p + p6.p;
	.sort:momrewrite-Md237-3;
	if (count(Md237,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md237-2;
	if (count(Md237,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md237-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd237()
	if (count(Md237,1)) id p5.p6 = -i10 + i11;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md237,dotrewrite-d237-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md237,dotrewrite-d237-2)
	#call replace(p1.p6,-i1/2+i4/2-i6/2,i,i1,i4,i6,Md237,dotrewrite-d237-3)
	#call replace(Q.p6,`Q2'/2+i4/2-i7/2-i9,i,i4,i7,i9,Md237,dotrewrite-d237-4)
	#call replace(p2.p6,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md237,dotrewrite-d237-5)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md237,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md237-4;
	if (count(Md237,1)) id p4.p?!{p4,[P+p4],[P-p4],p2,p5} = + Q.p - p7.p;
	.sort:momrewrite-Md237-3;
	if (count(Md237,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md237-2;
	if (count(Md237,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + Q.p - p6.p - p7.p;
	.sort:momrewrite-Md237-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd237()
	if (count(Md237,1)) id p5.p6 = -i10 + i11;
	if (count(Md237,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md237,dotrewrite-d237-2)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md237,dotrewrite-d237-3)
	#call replace(Q.p6,`Q2'/2+i4/2-i7/2-i9,i,i4,i7,i9,Md237,dotrewrite-d237-4)
	#call replace(p2.p6,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md237,dotrewrite-d237-5)
	#call replace(p5.p7,`Q2'/2-i11+i5/2-i8/2,i,i11,i5,i8,Md237,dotrewrite-d237-6)
	#call replace(p6.p7,`Q2'/2+i1/2-i6/2-i7/2-i9,i,i1,i6,i7,i9,Md237,dotrewrite-d237-7)
#endif
#break
#case Q6
* path: (0, 5, 4, 6)
#case Q4
* path: (0, 6, 4)
#case 46
* path: (4, 6)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md237,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p4.p - p6.p;
	.sort:momrewrite-Md237-4;
	if (count(Md237,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md237-3;
	if (count(Md237,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md237-2;
	if (count(Md237,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p4.p - p2.p - p6.p;
	.sort:momrewrite-Md237-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd237()
	if (count(Md237,1)) id p5.p6 = -i10 + i11;
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md237,dotrewrite-d237-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md237,dotrewrite-d237-2)
	#call replace(p4.p6,-i1/2+i4/2+i6/2,i,i1,i4,i6,Md237,dotrewrite-d237-3)
	#call replace(Q.p6,`Q2'/2+i4/2-i7/2-i9,i,i4,i7,i9,Md237,dotrewrite-d237-4)
	#call replace(p2.p6,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md237,dotrewrite-d237-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 5)
#case Q4
* path: (0, 5, 4)
#case Q2
* path: (0, 5, 4, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 47
* path: (4, 7)
#case 55
* path: (5,)
#case 58
* path: (5, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md237,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md237-4;
	if (count(Md237,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p1.p;
	.sort:momrewrite-Md237-3;
	if (count(Md237,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md237-2;
	if (count(Md237,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md237-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd237()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md237,dotrewrite-d237-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md237,dotrewrite-d237-1)
	#call replace(p1.p4,i1/2+i4/2-i6/2,i,i1,i4,i6,Md237,dotrewrite-d237-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md237,dotrewrite-d237-3)
#endif
#break
#endswitch
#break
*--#] d237 : 
*--#[ d227 :
#case Md227
#procedure SimpleDotd227()
if (count(Md227,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id p2.p5^n? = i10^n;
	id p3.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 5, 7)
#case Q1
* path: (0, 5, 7, 1)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 17
* path: (1, 7)
#case 15
* path: (1, 7, 5)
#case 27
* path: (2, 1, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md227,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + Q.p - p7.p;
	.sort:momrewrite-Md227-4;
	if (count(Md227,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md227-3;
	if (count(Md227,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md227-2;
	if (count(Md227,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md227-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd227()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md227,dotrewrite-d227-0)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md227,dotrewrite-d227-1)
	#call replace(p1.p7,-i1/2+i12-i3/2+i6/2,i,i1,i12,i3,i6,Md227,dotrewrite-d227-2)
	#call replace(p2.p7,-i2/2-i3/2+i4/2+i9,i,i2,i3,i4,i9,Md227,dotrewrite-d227-3)
	#call replace(p5.p7,`Q2'/2-i11+i5/2-i8/2,i,i11,i5,i8,Md227,dotrewrite-d227-4)
#endif
#break
#case 16
* path: (1, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md227,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p1.p + p6.p;
	.sort:momrewrite-Md227-4;
	if (count(Md227,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md227-3;
	if (count(Md227,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p + p6.p - p2.p;
	.sort:momrewrite-Md227-2;
	if (count(Md227,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p6.p;
	.sort:momrewrite-Md227-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd227()
	if (count(Md227,1)) id p5.p6 = i11 - i14;
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md227,dotrewrite-d227-1)
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md227,dotrewrite-d227-2)
	#call replace(Q.p6,`Q2'/2-i12+i3/2-i7/2,i,i12,i3,i7,Md227,dotrewrite-d227-3)
	#call replace(p2.p6,-i13+i2/2+i3/2-i4/2,i,i13,i2,i3,i4,Md227,dotrewrite-d227-4)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md227,1)) id p3.p?!{p3,[P+p3],[P-p3],p5} = + p2.p + p4.p;
	.sort:momrewrite-Md227-4;
	if (count(Md227,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md227-3;
	if (count(Md227,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p4.p - p1.p;
	.sort:momrewrite-Md227-2;
	if (count(Md227,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p - p4.p;
	.sort:momrewrite-Md227-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd227()
	if (count(Md227,1)) id p4.p5 = -i10 + i11;
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md227,dotrewrite-d227-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md227,dotrewrite-d227-2)
	#call replace(Q.p4,`Q2'/2+i3/2-i7/2-i9,i,i3,i7,i9,Md227,dotrewrite-d227-3)
	#call replace(p1.p4,i1/2-i13+i3/2-i6/2,i,i1,i13,i3,i6,Md227,dotrewrite-d227-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q2
* path: (0, 5, 3, 2)
#case Q3
* path: (0, 7, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 58
* path: (5, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md227,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p2.p;
	.sort:momrewrite-Md227-4;
	if (count(Md227,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p1.p;
	.sort:momrewrite-Md227-3;
	if (count(Md227,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md227-2;
	if (count(Md227,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md227-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd227()
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md227,dotrewrite-d227-0)
	#call replace(p1.p3,i1/2+i3/2-i6/2,i,i1,i3,i6,Md227,dotrewrite-d227-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md227,dotrewrite-d227-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md227,dotrewrite-d227-3)
#endif
#break
#endswitch
#break
*--#] d227 : 
*--#[ d372 :
#case Md372
#procedure SimpleDotd372()
if (count(Md372,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id p1.p5^n? = i11^n;
	id Q.p2^n? = i12^n;
	id p2.p4^n? = i13^n;
	id p2.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 5, 8)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p5.p + p6.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p - p1.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p6 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md372,dotrewrite-d372-2)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md372,dotrewrite-d372-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-4)
	#call replace(p1.p6,i1/2-i11+i4/2-i7/2,i,i1,i11,i4,i7,Md372,dotrewrite-d372-5)
#endif
#break
#case 79
* path: (7, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p8.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md372,dotrewrite-d372-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md372,dotrewrite-d372-2)
	#call replace(p2.p9,i12-i13+i14,i,i12,i13,i14,Md372,dotrewrite-d372-3)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md372,dotrewrite-d372-4)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md372,dotrewrite-d372-5)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md372,dotrewrite-d372-6)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md372,dotrewrite-d372-7)
	#call replace(p7.p9,`Q2'/2+i1/2-i10-i11+i4/2+i5/2-i6/2-i7/2-i8/2,i,i1,i10,i11,i4,i5,i6,i7,i8,Md372,dotrewrite-d372-8)
#endif
#break
#case Q4
* path: (0, 6, 4)
#case Q2
* path: (0, 6, 4, 2)
#case 16
* path: (1, 2, 4, 6)
#case 26
* path: (2, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p4.p - p6.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p6 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md372,dotrewrite-d372-2)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md372,dotrewrite-d372-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md372,dotrewrite-d372-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md372,dotrewrite-d372-5)
	#call replace(p1.p6,i1/2-i11+i4/2-i7/2,i,i1,i11,i4,i7,Md372,dotrewrite-d372-6)
#endif
#break
#case Q9
* path: (0, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p6.p + p5.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md372,dotrewrite-d372-1)
	#call replace(p2.p9,i12-i13+i14,i,i12,i13,i14,Md372,dotrewrite-d372-2)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md372,dotrewrite-d372-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-4)
	#call replace(p1.p9,-i1/2+i10+i11-i4/2+i7/2,i,i1,i10,i11,i4,i7,Md372,dotrewrite-d372-5)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p8.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + Q.p - p7.p - p8.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p8 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md372,dotrewrite-d372-1)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md372,dotrewrite-d372-2)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-3)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md372,dotrewrite-d372-4)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md372,dotrewrite-d372-5)
	#call replace(p5.p7,-i11+i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md372,dotrewrite-d372-6)
	#call replace(p7.p8,`Q2'/2+i1/2-i10-i7/2-i8/2,i,i1,i10,i7,i8,Md372,dotrewrite-d372-7)
#endif
#break
#case Q4
* path: (0, 7, 4)
#case 47
* path: (4, 7)
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p4.p - p7.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md372,dotrewrite-d372-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md372,dotrewrite-d372-1)
	#call replace(p4.p7,-i1/2+i4/2+i7/2,i,i1,i4,i7,Md372,dotrewrite-d372-2)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-3)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md372,dotrewrite-d372-4)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md372,dotrewrite-d372-5)
	#call replace(p5.p7,-i11+i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md372,dotrewrite-d372-6)
#endif
#break
#case Q7
* path: (0, 6, 4, 7)
#case Q6
* path: (0, 7, 4, 6)
#case 67
* path: (6, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p4.p - p7.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p4.p - p6.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p6 = i13 - i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md372,dotrewrite-d372-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md372,dotrewrite-d372-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md372,dotrewrite-d372-3)
	#call replace(p4.p7,-i1/2+i4/2+i7/2,i,i1,i4,i7,Md372,dotrewrite-d372-4)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md372,dotrewrite-d372-5)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md372,dotrewrite-d372-6)
	#call replace(p6.p7,-i1/2+i11-i5/2+i6/2+i7/2,i,i1,i11,i5,i6,i7,Md372,dotrewrite-d372-7)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case 18
* path: (1, 8)
#case 15
* path: (1, 8, 5)
#case 28
* path: (2, 1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p8.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p8 = i12 - i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md372,dotrewrite-d372-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md372,dotrewrite-d372-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-4)
	#call replace(p1.p8,-i1/2+i10-i4/2+i7/2,i,i1,i10,i4,i7,Md372,dotrewrite-d372-5)
#endif
#break
#case Q7
* path: (0, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + p1.p + p7.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-0)
	#call replace(p1.p7,-i1/2+i4/2-i7/2,i,i1,i4,i7,Md372,dotrewrite-d372-1)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-2)
	#call replace(Q.p7,`Q2'/2-i10+i4/2-i8/2,i,i10,i4,i8,Md372,dotrewrite-d372-3)
	#call replace(p2.p7,-i1/2+i13-i2/2+i3/2,i,i1,i13,i2,i3,Md372,dotrewrite-d372-4)
	#call replace(p5.p7,-i11+i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md372,dotrewrite-d372-5)
#endif
#break
#case Q9
* path: (0, 8, 9)
#case Q8
* path: (0, 9, 8)
#case Q1
* path: (0, 9, 8, 1)
#case 19
* path: (1, 8, 9)
#case 29
* path: (2, 1, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p4.p?!{p4,[P+p4],[P-p4],p2} = + Q.p - p8.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	if (count(Md372,1)) id p2.p8 = i12 - i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md372,dotrewrite-d372-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md372,dotrewrite-d372-3)
	#call replace(p2.p9,i12-i13+i14,i,i12,i13,i14,Md372,dotrewrite-d372-4)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md372,dotrewrite-d372-5)
	#call replace(p1.p8,-i1/2+i10-i4/2+i7/2,i,i1,i10,i4,i7,Md372,dotrewrite-d372-6)
	#call replace(p1.p9,-i1/2+i10+i11-i4/2+i7/2,i,i1,i10,i11,i4,i7,Md372,dotrewrite-d372-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 48
* path: (4, 5, 8)
#case 49
* path: (4, 5, 9)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md372,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md372-5;
	if (count(Md372,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md372-4;
	if (count(Md372,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md372-3;
	if (count(Md372,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p1.p;
	.sort:momrewrite-Md372-2;
	if (count(Md372,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md372-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd372()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md372,dotrewrite-d372-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md372,dotrewrite-d372-1)
	#call replace(p1.p4,i1/2+i4/2-i7/2,i,i1,i4,i7,Md372,dotrewrite-d372-2)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md372,dotrewrite-d372-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md372,dotrewrite-d372-4)
#endif
#break
#endswitch
#break
*--#] d372 : 
*--#[ d341 :
#case Md341
#procedure SimpleDotd341()
if (count(Md341,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 1, 2, 6)
#case Q1
* path: (0, 6, 2, 1)
#case 16
* path: (1, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p2.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p - p1.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md341,dotrewrite-d341-4)
	#call replace(p1.p6,i1/2+i12-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i12,i13,i6,i7,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p2.p6,i12-i13+i14+i2/2-i4/2+i6/2+i8/2-i9/2,i,i12,i13,i14,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case 29
* path: (2, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md341,dotrewrite-d341-4)
	#call replace(p3.p9,-i1/2+i11+i14+i2/2-i4/2+i7/2,i,i1,i11,i14,i2,i4,i7,Md341,dotrewrite-d341-5)
	#call replace(p2.p9,i10-i11-i12+i13-i14-i2/2+i4/2-i6/2-i8/2+i9/2,i,i10,i11,i12,i13,i14,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md341,dotrewrite-d341-3)
	#call replace(Q.p8,`Q2'/2-i12-i6/2+i9/2,i,i12,i6,i9,Md341,dotrewrite-d341-4)
	#call replace(p3.p8,-i1/2+i11+i2/2-i4/2+i7/2,i,i1,i11,i2,i4,i7,Md341,dotrewrite-d341-5)
	#call replace(p2.p8,i10-i11-i12-i2/2+i4/2-i6/2-i8/2+i9/2,i,i10,i11,i12,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p - p7.p + Q.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(p3.p7,-i3/2+i4/2-i7/2,i,i3,i4,i7,Md341,dotrewrite-d341-3)
	#call replace(Q.p7,`Q2'/2-i10+i12+i6/2-i9/2,i,i10,i12,i6,i9,Md341,dotrewrite-d341-4)
	#call replace(p5.p7,i12-i13+i5/2+i8/2-i9/2,i,i12,i13,i5,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p2.p7,-i1/2+i12+i3/2-i4/2+i6/2+i8/2-i9/2,i,i1,i12,i3,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p4.p - p2.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(p3.p4,-i3/2-i4/2+i7/2,i,i3,i4,i7,Md341,dotrewrite-d341-3)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md341,dotrewrite-d341-4)
	#call replace(p2.p4,-i12+i2/2+i4/2-i6/2-i8/2+i9/2,i,i12,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p4.p5,-i12+i13-i14-i5/2-i8/2+i9/2,i,i12,i13,i14,i5,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case Q2
* path: (0, 6, 2)
#case Q3
* path: (0, 6, 2, 3)
#case 26
* path: (2, 6)
#case 36
* path: (3, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p5} = + p2.p + p3.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md341,dotrewrite-d341-4)
	#call replace(p3.p6,i1/2-i14-i2/2+i4/2-i7/2,i,i1,i14,i2,i4,i7,Md341,dotrewrite-d341-5)
	#call replace(p2.p6,i12-i13+i14+i2/2-i4/2+i6/2+i8/2-i9/2,i,i12,i13,i14,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case 14
* path: (1, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p4.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p2.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p + p4.p - p2.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p2.p4,-i12+i2/2+i4/2-i6/2-i8/2+i9/2,i,i12,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-4)
	#call replace(p4.p5,-i12+i13-i14-i5/2-i8/2+i9/2,i,i12,i13,i14,i5,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p1.p4,-i12+i2/2-i3/2-i6/2+i7/2-i8/2+i9/2,i,i12,i2,i3,i6,i7,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case 18
* path: (1, 8)
#case 38
* path: (3, 1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-0)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md341,dotrewrite-d341-1)
	#call replace(Q.p8,`Q2'/2-i12-i6/2+i9/2,i,i12,i6,i9,Md341,dotrewrite-d341-2)
	#call replace(p3.p8,-i1/2+i11+i2/2-i4/2+i7/2,i,i1,i11,i2,i4,i7,Md341,dotrewrite-d341-3)
	#call replace(p1.p8,-i1/2+i10-i12-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i12,i6,i7,i8,i9,Md341,dotrewrite-d341-4)
#endif
#break
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 5, 8)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p - p1.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md341,dotrewrite-d341-1)
	#call replace(p5.p6,i12-i5/2+i8/2-i9/2,i,i12,i5,i8,i9,Md341,dotrewrite-d341-2)
	#call replace(p3.p6,i1/2-i14-i2/2+i4/2-i7/2,i,i1,i14,i2,i4,i7,Md341,dotrewrite-d341-3)
	#call replace(p1.p6,i1/2+i12-i13+i6/2-i7/2+i8/2-i9/2,i,i1,i12,i13,i6,i7,i8,i9,Md341,dotrewrite-d341-4)
#endif
#break
#case 28
* path: (2, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p2.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md341,dotrewrite-d341-3)
	#call replace(Q.p8,`Q2'/2-i12-i6/2+i9/2,i,i12,i6,i9,Md341,dotrewrite-d341-4)
	#call replace(p1.p8,-i1/2+i10-i12-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i12,i6,i7,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p2.p8,i10-i11-i12-i2/2+i4/2-i6/2-i8/2+i9/2,i,i10,i11,i12,i2,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p2.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	if (count(Md341,1)) id Q.p2 = i10 - i11;
	if (count(Md341,1)) id p2.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-2)
	#call replace(Q.p7,`Q2'/2-i10+i12+i6/2-i9/2,i,i10,i12,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p5.p7,i12-i13+i5/2+i8/2-i9/2,i,i12,i13,i5,i8,i9,Md341,dotrewrite-d341-4)
	#call replace(p1.p7,-i1/2+i12+i6/2-i7/2+i8/2-i9/2,i,i1,i12,i6,i7,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p2.p7,-i1/2+i12+i3/2-i4/2+i6/2+i8/2-i9/2,i,i1,i12,i3,i4,i6,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#case Q9
* path: (0, 8, 9)
#case Q8
* path: (0, 9, 8)
#case 19
* path: (1, 8, 9)
#case 39
* path: (3, 1, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p1,p3} = + p9.p - p8.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md341,dotrewrite-d341-1)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md341,dotrewrite-d341-2)
	#call replace(Q.p8,`Q2'/2-i12-i6/2+i9/2,i,i12,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p3.p8,-i1/2+i11+i2/2-i4/2+i7/2,i,i1,i11,i2,i4,i7,Md341,dotrewrite-d341-4)
	#call replace(p3.p9,-i1/2+i11+i14+i2/2-i4/2+i7/2,i,i1,i11,i14,i2,i4,i7,Md341,dotrewrite-d341-5)
	#call replace(p1.p8,-i1/2+i10-i12-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i12,i6,i7,i8,i9,Md341,dotrewrite-d341-6)
	#call replace(p1.p9,-i1/2+i10-i12+i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i12,i13,i6,i7,i8,i9,Md341,dotrewrite-d341-7)
#endif
#break
#case Q9
* path: (0, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md341,dotrewrite-d341-1)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md341,dotrewrite-d341-2)
	#call replace(p3.p9,-i1/2+i11+i14+i2/2-i4/2+i7/2,i,i1,i11,i14,i2,i4,i7,Md341,dotrewrite-d341-3)
	#call replace(p1.p9,-i1/2+i10-i12+i13-i6/2+i7/2-i8/2+i9/2,i,i1,i10,i12,i13,i6,i7,i8,i9,Md341,dotrewrite-d341-4)
#endif
#break
#case 14
* path: (1, 7, 4)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = - p4.p - p7.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	#call replace(p4.p7,i3/2-i4/2-i7/2,i,i3,i4,i7,Md341,dotrewrite-d341-0)
	#call replace(Q.p7,`Q2'/2-i10+i12+i6/2-i9/2,i,i10,i12,i6,i9,Md341,dotrewrite-d341-1)
	#call replace(p5.p7,i12-i13+i5/2+i8/2-i9/2,i,i12,i13,i5,i8,i9,Md341,dotrewrite-d341-2)
	#call replace(Q.p4,-`Q2'/2+i10-i11-i12-i6/2+i9/2,i,i10,i11,i12,i6,i9,Md341,dotrewrite-d341-3)
	#call replace(p4.p5,-i12+i13-i14-i5/2-i8/2+i9/2,i,i12,i13,i14,i5,i8,i9,Md341,dotrewrite-d341-4)
	#call replace(p1.p7,-i1/2+i12+i6/2-i7/2+i8/2-i9/2,i,i1,i12,i6,i7,i8,i9,Md341,dotrewrite-d341-5)
	#call replace(p1.p4,-i12+i2/2-i3/2-i6/2+i7/2-i8/2+i9/2,i,i12,i2,i3,i6,i7,i8,i9,Md341,dotrewrite-d341-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 7)
#case 33
* path: (3,)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md341,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md341-5;
	if (count(Md341,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md341-4;
	if (count(Md341,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md341-3;
	if (count(Md341,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p7.p;
	.sort:momrewrite-Md341-2;
	if (count(Md341,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md341-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd341()
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md341,dotrewrite-d341-0)
	#call replace(p3.p7,-i3/2+i4/2-i7/2,i,i3,i4,i7,Md341,dotrewrite-d341-1)
	#call replace(Q.p7,`Q2'/2-i10+i12+i6/2-i9/2,i,i10,i12,i6,i9,Md341,dotrewrite-d341-2)
	#call replace(p5.p7,i12-i13+i5/2+i8/2-i9/2,i,i12,i13,i5,i8,i9,Md341,dotrewrite-d341-3)
	#call replace(p1.p7,-i1/2+i12+i6/2-i7/2+i8/2-i9/2,i,i1,i12,i6,i7,i8,i9,Md341,dotrewrite-d341-4)
#endif
#break
#endswitch
#break
*--#] d341 : 
*--#[ d373 :
#case Md373
#procedure SimpleDotd373()
if (count(Md373,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p5^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 57
* path: (5, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md373,dotrewrite-d373-0)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md373,dotrewrite-d373-1)
	#call replace(p1.p7,i1/2-i13-i14+i3/2-i4/2+i7/2,i,i1,i13,i14,i3,i4,i7,Md373,dotrewrite-d373-2)
	#call replace(Q.p5,i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-3)
	#call replace(Q.p7,i1/2-i13-i14-i2/2+i3/2-i4/2+i8/2,i,i1,i13,i14,i2,i3,i4,i8,Md373,dotrewrite-d373-4)
	#call replace(p5.p7,i10-i13-i14+i3/2-i4/2-i5/2+i6/2,i,i10,i13,i14,i3,i4,i5,i6,Md373,dotrewrite-d373-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p9.p - p8.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md373,dotrewrite-d373-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md373,dotrewrite-d373-1)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md373,dotrewrite-d373-2)
	#call replace(p6.p7,i1/2-i10+i5/2-i6/2-i7/2,i,i1,i10,i5,i6,i7,Md373,dotrewrite-d373-3)
	#call replace(p1.p7,i1/2-i13-i14+i3/2-i4/2+i7/2,i,i1,i13,i14,i3,i4,i7,Md373,dotrewrite-d373-4)
	#call replace(p1.p6,i1/2-i10+i13+i14-i3/2+i4/2-i7/2,i,i1,i10,i13,i14,i3,i4,i7,Md373,dotrewrite-d373-5)
	#call replace(Q.p7,i1/2-i13-i14-i2/2+i3/2-i4/2+i8/2,i,i1,i13,i14,i2,i3,i4,i8,Md373,dotrewrite-d373-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case Q9
* path: (0, 2, 8, 9)
#case 19
* path: (1, 2, 8, 9)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 29
* path: (2, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p9.p - p8.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	if (count(Md373,1)) id p2.p3 = i11 - i12;
	if (count(Md373,1)) id p3.p9 = i11 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md373,dotrewrite-d373-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md373,dotrewrite-d373-3)
	#call replace(p3.p8,i11-i13-i14,i,i11,i13,i14,Md373,dotrewrite-d373-4)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md373,dotrewrite-d373-5)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md373,dotrewrite-d373-6)
	#call replace(Q.p8,`Q2'/2-i13-i14+i3/2-i4/2+i8/2,i,i13,i14,i3,i4,i8,Md373,dotrewrite-d373-7)
	#call replace(p2.p9,-i10+i13+i14+i2/2-i3/2+i4/2-i6/2-i7/2+i9/2,i,i10,i13,i14,i2,i3,i4,i6,i7,i9,Md373,dotrewrite-d373-8)
#endif
#break
#case 27
* path: (2, 7)
#case 23
* path: (2, 7, 3)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p9.p - p8.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	if (count(Md373,1)) id p2.p3 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md373,dotrewrite-d373-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md373,dotrewrite-d373-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md373,dotrewrite-d373-3)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md373,dotrewrite-d373-4)
	#call replace(p6.p7,i1/2-i10+i5/2-i6/2-i7/2,i,i1,i10,i5,i6,i7,Md373,dotrewrite-d373-5)
	#call replace(Q.p7,i1/2-i13-i14-i2/2+i3/2-i4/2+i8/2,i,i1,i13,i14,i2,i3,i4,i8,Md373,dotrewrite-d373-6)
	#call replace(p2.p6,`Q2'/2-i1/2+i10-i13-i14+i3/2-i4/2+i6/2+i7/2-i9/2,i,i1,i10,i13,i14,i3,i4,i6,i7,i9,Md373,dotrewrite-d373-7)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p2.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md373,dotrewrite-d373-0)
	#call replace(p3.p4,i13+i14-i3,i,i13,i14,i3,Md373,dotrewrite-d373-1)
	#call replace(p4.p5,i14-i3/2+i4/2+i5/2-i6/2,i,i14,i3,i4,i5,i6,Md373,dotrewrite-d373-2)
	#call replace(Q.p4,`Q2'/2-i11+i13+i14-i3/2+i4/2-i8/2,i,i11,i13,i14,i3,i4,i8,Md373,dotrewrite-d373-3)
	#call replace(p1.p4,i1/2-i12+i13+i14-i3/2+i4/2-i7/2,i,i1,i12,i13,i14,i3,i4,i7,Md373,dotrewrite-d373-4)
	#call replace(Q.p5,i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 19
* path: (1, 3, 6, 9)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p - p7.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	if (count(Md373,1)) id p3.p9 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md373,dotrewrite-d373-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md373,dotrewrite-d373-2)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md373,dotrewrite-d373-3)
	#call replace(Q.p5,i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-4)
	#call replace(p1.p9,`Q2'/2+i10-i13-i14-i2/2+i3/2-i4/2+i7/2,i,i10,i13,i14,i2,i3,i4,i7,Md373,dotrewrite-d373-5)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 18
* path: (1, 7, 8)
#case 38
* path: (3, 5, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md373,dotrewrite-d373-0)
	#call replace(p3.p8,i11-i13-i14,i,i11,i13,i14,Md373,dotrewrite-d373-1)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md373,dotrewrite-d373-2)
	#call replace(Q.p8,`Q2'/2-i13-i14+i3/2-i4/2+i8/2,i,i13,i14,i3,i4,i8,Md373,dotrewrite-d373-3)
	#call replace(Q.p5,i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-4)
	#call replace(p1.p8,`Q2'/2-i13-i14-i2/2+i3/2-i4/2+i7/2,i,i13,i14,i2,i3,i4,i7,Md373,dotrewrite-d373-5)
#endif
#break
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p6.p?!{p6,[P+p6],[P-p6],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p5} = + Q.p - p2.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p - p8.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	if (count(Md373,1)) id p2.p3 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md373,dotrewrite-d373-1)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md373,dotrewrite-d373-2)
	#call replace(p3.p8,i11-i13-i14,i,i11,i13,i14,Md373,dotrewrite-d373-3)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md373,dotrewrite-d373-4)
	#call replace(Q.p8,`Q2'/2-i13-i14+i3/2-i4/2+i8/2,i,i13,i14,i3,i4,i8,Md373,dotrewrite-d373-5)
	#call replace(Q.p5,i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-6)
	#call replace(p2.p5,-i10+i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i10,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-7)
#endif
#break
#default
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md373,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p + p8.p;
	.sort:momrewrite-Md373-5;
	if (count(Md373,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md373-4;
	if (count(Md373,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md373-3;
	if (count(Md373,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md373-2;
	if (count(Md373,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p + p6.p - p3.p;
	.sort:momrewrite-Md373-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd373()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md373,dotrewrite-d373-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md373,dotrewrite-d373-1)
	#call replace(p5.p6,i13+i14-i3/2+i4/2-i5/2-i6/2,i,i13,i14,i3,i4,i5,i6,Md373,dotrewrite-d373-2)
	#call replace(Q.p5,i13+i14-i3/2+i4/2-i6/2-i8/2+i9/2,i,i13,i14,i3,i4,i6,i8,i9,Md373,dotrewrite-d373-3)
	#call replace(p1.p6,i1/2-i10+i13+i14-i3/2+i4/2-i7/2,i,i1,i10,i13,i14,i3,i4,i7,Md373,dotrewrite-d373-4)
#endif
#break
#endswitch
#break
*--#] d373 : 
*--#[ d376 :
#case Md376
#procedure SimpleDotd376()
if (count(Md376,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p2^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 6)
#case Q5
* path: (0, 6, 5)
#case Q6
* path: (0, 8, 5, 6)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 68
* path: (6, 5, 8)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p3.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p - p1.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md376,dotrewrite-d376-0)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md376,dotrewrite-d376-1)
	#call replace(Q.p5,i3/2-i6/2-i8/2+i9/2,i,i3,i6,i8,i9,Md376,dotrewrite-d376-2)
	#call replace(p1.p6,i1/2-i14+i3/2-i7/2,i,i1,i14,i3,i7,Md376,dotrewrite-d376-3)
	#call replace(p2.p6,-i11+i2/2+i3/2-i4/2,i,i11,i2,i3,i4,Md376,dotrewrite-d376-4)
#endif
#break
#case Q9
* path: (0, 9)
#case 59
* path: (5, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p3.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p5.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md376,dotrewrite-d376-0)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md376,dotrewrite-d376-1)
	#call replace(Q.p5,i3/2-i6/2-i8/2+i9/2,i,i3,i6,i8,i9,Md376,dotrewrite-d376-2)
	#call replace(p1.p9,-i1/2+i12+i14-i3/2+i7/2,i,i1,i12,i14,i3,i7,Md376,dotrewrite-d376-3)
	#call replace(p2.p9,i10+i11-i2/2-i3/2+i4/2,i,i10,i11,i2,i3,i4,Md376,dotrewrite-d376-4)
#endif
#break
#case Q9
* path: (0, 8, 9)
#case Q8
* path: (0, 9, 8)
#case Q1
* path: (0, 9, 8, 1)
#case 19
* path: (1, 8, 9)
#case 29
* path: (2, 1, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p3.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p8.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p9.p - p8.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md376,dotrewrite-d376-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md376,dotrewrite-d376-1)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md376,dotrewrite-d376-2)
	#call replace(p1.p8,-i1/2+i12-i3/2+i7/2,i,i1,i12,i3,i7,Md376,dotrewrite-d376-3)
	#call replace(p2.p8,i10-i2/2-i3/2+i4/2,i,i10,i2,i3,i4,Md376,dotrewrite-d376-4)
	#call replace(p1.p9,-i1/2+i12+i14-i3/2+i7/2,i,i1,i12,i14,i3,i7,Md376,dotrewrite-d376-5)
	#call replace(p2.p9,i10+i11-i2/2-i3/2+i4/2,i,i10,i11,i2,i3,i4,Md376,dotrewrite-d376-6)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p3.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p + p7.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(p1.p7,-i1/2+i3/2-i7/2,i,i1,i3,i7,Md376,dotrewrite-d376-0)
	#call replace(Q.p5,i3/2-i6/2-i8/2+i9/2,i,i3,i6,i8,i9,Md376,dotrewrite-d376-1)
	#call replace(Q.p7,`Q2'/2-i12+i3/2-i8/2,i,i12,i3,i8,Md376,dotrewrite-d376-2)
	#call replace(p2.p7,-i13+i2/2+i3/2-i4/2,i,i13,i2,i3,i4,Md376,dotrewrite-d376-3)
	#call replace(p5.p7,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md376,dotrewrite-d376-4)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case 18
* path: (1, 8)
#case 15
* path: (1, 8, 5)
#case 28
* path: (2, 1, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p2.p + p3.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p8.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(Q.p8,`Q2'/2-i3/2+i8/2,i,i3,i8,Md376,dotrewrite-d376-0)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md376,dotrewrite-d376-1)
	#call replace(Q.p5,i3/2-i6/2-i8/2+i9/2,i,i3,i6,i8,i9,Md376,dotrewrite-d376-2)
	#call replace(p1.p8,-i1/2+i12-i3/2+i7/2,i,i1,i12,i3,i7,Md376,dotrewrite-d376-3)
	#call replace(p2.p8,i10-i2/2-i3/2+i4/2,i,i10,i2,i3,i4,Md376,dotrewrite-d376-4)
#endif
#break
#case Q3
* path: (0, 6, 3)
#case Q2
* path: (0, 6, 3, 2)
#case 16
* path: (1, 2, 3, 6)
#case 26
* path: (2, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p2.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p3.p - p6.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p1.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md376,dotrewrite-d376-0)
	#call replace(p1.p3,i1/2+i3/2-i7/2,i,i1,i3,i7,Md376,dotrewrite-d376-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md376,dotrewrite-d376-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md376,dotrewrite-d376-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md376,dotrewrite-d376-4)
	#call replace(p1.p6,i1/2-i14+i3/2-i7/2,i,i1,i14,i3,i7,Md376,dotrewrite-d376-5)
	#call replace(p2.p6,-i11+i2/2+i3/2-i4/2,i,i11,i2,i3,i4,Md376,dotrewrite-d376-6)
#endif
#break
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p2.p + p4.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p4.p - p1.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(p2.p4,-i2/2+i3/2-i4/2,i,i2,i3,i4,Md376,dotrewrite-d376-0)
	#call replace(Q.p4,`Q2'/2-i10+i3/2-i8/2,i,i10,i3,i8,Md376,dotrewrite-d376-1)
	#call replace(p1.p4,i1/2-i13+i3/2-i7/2,i,i1,i13,i3,i7,Md376,dotrewrite-d376-2)
	#call replace(Q.p5,i3/2-i6/2-i8/2+i9/2,i,i3,i6,i8,i9,Md376,dotrewrite-d376-3)
	#call replace(p4.p5,-i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md376,dotrewrite-d376-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 39
* path: (3, 5, 9)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md376,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md376-5;
	if (count(Md376,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p3.p - p2.p;
	.sort:momrewrite-Md376-4;
	if (count(Md376,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md376-3;
	if (count(Md376,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p1.p;
	.sort:momrewrite-Md376-2;
	if (count(Md376,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md376-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd376()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md376,dotrewrite-d376-0)
	#call replace(p1.p3,i1/2+i3/2-i7/2,i,i1,i3,i7,Md376,dotrewrite-d376-1)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md376,dotrewrite-d376-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md376,dotrewrite-d376-3)
	#call replace(Q.p5,i3/2-i6/2-i8/2+i9/2,i,i3,i6,i8,i9,Md376,dotrewrite-d376-4)
#endif
#break
#endswitch
#break
*--#] d376 : 
*--#[ d411 :
#case Md411
#procedure SimpleDotd411()
if (count(Md411,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p1.p4^n? = i11^n;
	id Q.p1^n? = i12^n;
	id Q.p2^n? = i13^n;
	id Q.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 1)
#case Q2
* path: (0, 10, 1, 2)
#case 110
* path: (1, 10)
#case 210
* path: (2, 1, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md411,dotrewrite-d411-2)
	#call replace(p1.p10,-i1/2+i12-i7/2+i9/2,i,i1,i12,i7,i9,Md411,dotrewrite-d411-3)
	#call replace(p2.p10,i13-i2/2-i7/2+i8/2,i,i13,i2,i7,i8,Md411,dotrewrite-d411-4)
	#call replace(p4.p10,i14-i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md411,dotrewrite-d411-5)
#endif
#break
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md411,dotrewrite-d411-3)
	#call replace(p1.p5,i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md411,dotrewrite-d411-4)
	#call replace(Q.p6,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md411,dotrewrite-d411-5)
	#call replace(p1.p6,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md411,dotrewrite-d411-6)
	#call replace(p2.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md411,dotrewrite-d411-7)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p3 = i12 - i13;
	if (count(Md411,1)) id Q.p5 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-2)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-3)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md411,dotrewrite-d411-4)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md411,dotrewrite-d411-5)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md411,dotrewrite-d411-6)
	#call replace(Q.p8,-`Q2'/2+i10/2+i13-i7/2,i,i10,i13,i7,Md411,dotrewrite-d411-7)
	#call replace(p3.p5,i1/2-i11-i3/2+i4/2-i5/2,i,i1,i11,i3,i4,i5,Md411,dotrewrite-d411-8)
#endif
#break
#case Q3
* path: (0, 10, 1, 3)
#case 310
* path: (3, 1, 10)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p3 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md411,dotrewrite-d411-2)
	#call replace(p3.p4,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md411,dotrewrite-d411-3)
	#call replace(p1.p10,-i1/2+i12-i7/2+i9/2,i,i1,i12,i7,i9,Md411,dotrewrite-d411-4)
	#call replace(p4.p10,i14-i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md411,dotrewrite-d411-5)
	#call replace(p3.p10,-i1/2+i12-i13+i2/2-i8/2+i9/2,i,i1,i12,i13,i2,i8,i9,Md411,dotrewrite-d411-6)
#endif
#break
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p3 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md411,dotrewrite-d411-3)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md411,dotrewrite-d411-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md411,dotrewrite-d411-5)
	#call replace(p3.p4,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md411,dotrewrite-d411-6)
	#call replace(p3.p7,i1/2-i2/2+i8/2-i9/2,i,i1,i2,i8,i9,Md411,dotrewrite-d411-7)
#endif
#break
#case Q5
* path: (0, 1, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p1.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md411,dotrewrite-d411-3)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-4)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md411,dotrewrite-d411-5)
	#call replace(p1.p5,i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md411,dotrewrite-d411-6)
	#call replace(p5.p7,i2/2-i4/2+i6/2-i8/2,i,i2,i4,i6,i8,Md411,dotrewrite-d411-7)
#endif
#break
#case 16
* path: (1, 9, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p9.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p6.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p9.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	#call replace(p6.p8,-i5/2+i6/2+i8/2,i,i5,i6,i8,Md411,dotrewrite-d411-0)
	#call replace(p1.p9,-i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-1)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md411,dotrewrite-d411-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md411,dotrewrite-d411-3)
	#call replace(p1.p6,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md411,dotrewrite-d411-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i13-i7/2,i,i10,i13,i7,Md411,dotrewrite-d411-5)
	#call replace(p1.p8,i2/2-i3/2-i7/2+i9/2,i,i2,i3,i7,i9,Md411,dotrewrite-d411-6)
	#call replace(Q.p9,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md411,dotrewrite-d411-7)
	#call replace(p6.p9,i1/2-i11+i4/2-i6/2-i9/2,i,i1,i11,i4,i6,i9,Md411,dotrewrite-d411-8)
#endif
#break
#case 16
* path: (1, 2, 4, 6)
#case 26
* path: (2, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md411,dotrewrite-d411-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i14-i7/2,i,i10,i14,i7,Md411,dotrewrite-d411-3)
	#call replace(p1.p6,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md411,dotrewrite-d411-4)
	#call replace(p2.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md411,dotrewrite-d411-5)
#endif
#break
#case 28
* path: (2, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p8.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p3 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-2)
	#call replace(p2.p8,i2/2-i7/2+i8/2,i,i2,i7,i8,Md411,dotrewrite-d411-3)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md411,dotrewrite-d411-4)
	#call replace(p3.p4,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md411,dotrewrite-d411-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i13-i7/2,i,i10,i13,i7,Md411,dotrewrite-d411-6)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md411,dotrewrite-d411-7)
#endif
#break
#case 18
* path: (1, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p3 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(p3.p8,-i3/2-i8/2+i9/2,i,i3,i8,i9,Md411,dotrewrite-d411-2)
	#call replace(p3.p4,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md411,dotrewrite-d411-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i13-i7/2,i,i10,i13,i7,Md411,dotrewrite-d411-4)
	#call replace(p1.p8,i2/2-i3/2-i7/2+i9/2,i,i2,i3,i7,i9,Md411,dotrewrite-d411-5)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md411,dotrewrite-d411-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 37
* path: (3, 1, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p1.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p3 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md411,dotrewrite-d411-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md411,dotrewrite-d411-4)
	#call replace(p3.p4,i11-i2/2-i4/2+i5/2,i,i11,i2,i4,i5,Md411,dotrewrite-d411-5)
	#call replace(p3.p7,i1/2-i2/2+i8/2-i9/2,i,i1,i2,i8,i9,Md411,dotrewrite-d411-6)
#endif
#break
#case 18
* path: (1, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p9.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p9.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	#call replace(p1.p9,-i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-0)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md411,dotrewrite-d411-1)
	#call replace(Q.p8,-`Q2'/2+i10/2+i13-i7/2,i,i10,i13,i7,Md411,dotrewrite-d411-2)
	#call replace(p1.p8,i2/2-i3/2-i7/2+i9/2,i,i2,i3,i7,i9,Md411,dotrewrite-d411-3)
	#call replace(p4.p8,i2/2-i5/2+i6/2-i7/2,i,i2,i5,i6,i7,Md411,dotrewrite-d411-4)
	#call replace(Q.p9,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md411,dotrewrite-d411-5)
	#call replace(p4.p9,-i11+i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md411,dotrewrite-d411-6)
#endif
#break
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p9.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p9.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-1)
	#call replace(p1.p9,-i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-2)
	#call replace(Q.p9,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md411,dotrewrite-d411-3)
	#call replace(p2.p9,-i1/2+i3/2+i7/2-i8/2,i,i1,i3,i7,i8,Md411,dotrewrite-d411-4)
	#call replace(p4.p9,-i11+i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md411,dotrewrite-d411-5)
#endif
#break
#case Q5
* path: (0, 7, 4, 5)
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p1.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p5 = i13 - i14;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md411,dotrewrite-d411-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md411,dotrewrite-d411-4)
	#call replace(p1.p5,i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md411,dotrewrite-d411-5)
	#call replace(p5.p7,i2/2-i4/2+i6/2-i8/2,i,i2,i4,i6,i8,Md411,dotrewrite-d411-6)
#endif
#break
#case 510
* path: (5, 2, 1, 10)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p3.p - p8.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p5.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	if (count(Md411,1)) id Q.p5 = i13 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md411,dotrewrite-d411-3)
	#call replace(p1.p5,i1/2-i11+i2/2-i3/2,i,i1,i11,i2,i3,Md411,dotrewrite-d411-4)
	#call replace(p1.p10,-i1/2+i12-i7/2+i9/2,i,i1,i12,i7,i9,Md411,dotrewrite-d411-5)
	#call replace(p2.p10,i13-i2/2-i7/2+i8/2,i,i13,i2,i7,i8,Md411,dotrewrite-d411-6)
	#call replace(p5.p10,i13-i14-i2/2+i4/2-i6/2+i8/2,i,i13,i14,i2,i4,i6,i8,Md411,dotrewrite-d411-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case Q2
* path: (0, 7, 4, 2)
#case Q7
* path: (0, 10, 7)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 17
* path: (1, 10, 7)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 27
* path: (2, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 410
* path: (4, 7, 10)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md411,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md411-6;
	if (count(Md411,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md411-5;
	if (count(Md411,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md411-4;
	if (count(Md411,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md411-3;
	if (count(Md411,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p - p7.p;
	.sort:momrewrite-Md411-2;
	if (count(Md411,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p - p1.p;
	.sort:momrewrite-Md411-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd411()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md411,dotrewrite-d411-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md411,dotrewrite-d411-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md411,dotrewrite-d411-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md411,dotrewrite-d411-3)
	#call replace(p2.p7,i2/2+i7/2-i8/2,i,i2,i7,i8,Md411,dotrewrite-d411-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md411,dotrewrite-d411-5)
#endif
#break
#endswitch
#break
*--#] d411 : 
*--#[ d412 :
#case Md412
#procedure SimpleDotd412()
if (count(Md412,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p1.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 79
* path: (7, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p7.p + p9.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md412,dotrewrite-d412-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md412,dotrewrite-d412-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md412,dotrewrite-d412-3)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md412,dotrewrite-d412-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md412,dotrewrite-d412-5)
	#call replace(p3.p9,i13-i3/2-i7/2+i8/2,i,i13,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p4.p9,i14-i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md412,dotrewrite-d412-7)
#endif
#break
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md412,dotrewrite-d412-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md412,dotrewrite-d412-3)
	#call replace(p1.p6,-i1/2+i14-i7/2+i9/2,i,i1,i14,i7,i9,Md412,dotrewrite-d412-4)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md412,dotrewrite-d412-5)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q2
* path: (0, 10, 2)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id p2.p3 = i11 - i13;
	if (count(Md412,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md412,dotrewrite-d412-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md412,dotrewrite-d412-4)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md412,dotrewrite-d412-5)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md412,dotrewrite-d412-7)
#endif
#break
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 2, 1)
#case 110
* path: (1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md412,dotrewrite-d412-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i7/2+i9/2,i,i2,i7,i9,Md412,dotrewrite-d412-3)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md412,dotrewrite-d412-4)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md412,dotrewrite-d412-5)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case 19
* path: (1, 9)
#case 39
* path: (3, 9)
#case 49
* path: (4, 3, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p9.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-1)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md412,dotrewrite-d412-2)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md412,dotrewrite-d412-3)
	#call replace(p3.p9,i13-i3/2-i7/2+i8/2,i,i13,i3,i7,i8,Md412,dotrewrite-d412-4)
	#call replace(p4.p9,i14-i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md412,dotrewrite-d412-5)
#endif
#break
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p8.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p8.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-0)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md412,dotrewrite-d412-1)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Md412,dotrewrite-d412-2)
	#call replace(Q.p6,-`Q2'/2+i10/2+i12-i7/2,i,i10,i12,i7,Md412,dotrewrite-d412-3)
	#call replace(p1.p6,-i1/2+i14-i7/2+i9/2,i,i1,i14,i7,i9,Md412,dotrewrite-d412-4)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md412,dotrewrite-d412-5)
	#call replace(Q.p8,`Q2'/2-i10/2-i11+i7/2,i,i10,i11,i7,Md412,dotrewrite-d412-6)
	#call replace(p1.p8,i1/2-i13+i7/2-i9/2,i,i1,i13,i7,i9,Md412,dotrewrite-d412-7)
#endif
#break
#case 510
* path: (5, 3, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id Q.p5 = i11 - i12;
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md412,dotrewrite-d412-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md412,dotrewrite-d412-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md412,dotrewrite-d412-4)
	#call replace(p3.p9,i13-i3/2-i7/2+i8/2,i,i13,i3,i7,i8,Md412,dotrewrite-d412-5)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p5.p9,i13-i14-i3/2+i4/2-i6/2+i8/2,i,i13,i14,i3,i4,i6,i8,Md412,dotrewrite-d412-7)
	#call replace(p5.p10,i11-i12-i3/2+i4/2-i6/2+i8/2,i,i11,i12,i3,i4,i6,i8,Md412,dotrewrite-d412-8)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 310
* path: (3, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md412,dotrewrite-d412-1)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md412,dotrewrite-d412-2)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md412,dotrewrite-d412-3)
	#call replace(p3.p9,i13-i3/2-i7/2+i8/2,i,i13,i3,i7,i8,Md412,dotrewrite-d412-4)
	#call replace(p4.p9,i14-i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md412,dotrewrite-d412-5)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p4.p10,i12-i4/2+i6/2-i7/2,i,i12,i4,i6,i7,Md412,dotrewrite-d412-7)
#endif
#break
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p - p8.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p8.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-1)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md412,dotrewrite-d412-2)
	#call replace(Q.p8,`Q2'/2-i10/2-i11+i7/2,i,i10,i11,i7,Md412,dotrewrite-d412-3)
	#call replace(p1.p8,i1/2-i13+i7/2-i9/2,i,i1,i13,i7,i9,Md412,dotrewrite-d412-4)
	#call replace(p4.p8,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md412,dotrewrite-d412-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 10, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id p2.p3 = i11 - i13;
	if (count(Md412,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md412,dotrewrite-d412-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md412,dotrewrite-d412-4)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md412,dotrewrite-d412-5)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md412,dotrewrite-d412-6)
	#call replace(p2.p7,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md412,dotrewrite-d412-7)
#endif
#break
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p9.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id Q.p5 = i11 - i12;
	if (count(Md412,1)) id p1.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-3)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md412,dotrewrite-d412-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md412,dotrewrite-d412-5)
	#call replace(p3.p9,i13-i3/2-i7/2+i8/2,i,i13,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p5.p9,i13-i14-i3/2+i4/2-i6/2+i8/2,i,i13,i14,i3,i4,i6,i8,Md412,dotrewrite-d412-7)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 25
* path: (2, 1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id Q.p5 = i11 - i12;
	if (count(Md412,1)) id p1.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md412,dotrewrite-d412-4)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md412,dotrewrite-d412-5)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md412,dotrewrite-d412-7)
#endif
#break
#case Q5
* path: (0, 7, 4, 5)
#case 45
* path: (4, 5)
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p4.p + p5.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id Q.p5 = i11 - i12;
	if (count(Md412,1)) id p1.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md412,dotrewrite-d412-4)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md412,dotrewrite-d412-5)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md412,dotrewrite-d412-6)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md412,dotrewrite-d412-7)
#endif
#break
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	if (count(Md412,1)) id p2.p3 = i11 - i13;
	if (count(Md412,1)) id p2.p4 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md412,dotrewrite-d412-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-3)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md412,dotrewrite-d412-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md412,dotrewrite-d412-5)
	#call replace(p3.p9,i13-i3/2-i7/2+i8/2,i,i13,i3,i7,i8,Md412,dotrewrite-d412-6)
	#call replace(p4.p9,i14-i4/2+i6/2-i7/2,i,i14,i4,i6,i7,Md412,dotrewrite-d412-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case Q3
* path: (0, 7, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 10, 7)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#case 410
* path: (4, 7, 10)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md412,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md412-6;
	if (count(Md412,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md412-5;
	if (count(Md412,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md412-4;
	if (count(Md412,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p7.p;
	.sort:momrewrite-Md412-3;
	if (count(Md412,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md412-2;
	if (count(Md412,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md412-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd412()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md412,dotrewrite-d412-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md412,dotrewrite-d412-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md412,dotrewrite-d412-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md412,dotrewrite-d412-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md412,dotrewrite-d412-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md412,dotrewrite-d412-5)
#endif
#break
#endswitch
#break
*--#] d412 : 
*--#[ d413 :
#case Md413
#procedure SimpleDotd413()
if (count(Md413,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 2, 1)
#case 110
* path: (1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i7/2+i9/2,i,i2,i7,i9,Md413,dotrewrite-d413-3)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md413,dotrewrite-d413-4)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md413,dotrewrite-d413-5)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md413,dotrewrite-d413-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md413,dotrewrite-d413-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md413,dotrewrite-d413-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md413,dotrewrite-d413-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md413,dotrewrite-d413-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md413,dotrewrite-d413-4)
	#call replace(p2.p7,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md413,dotrewrite-d413-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p4.p5 = i13 - i14;
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md413,dotrewrite-d413-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md413,dotrewrite-d413-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md413,dotrewrite-d413-7)
	#call replace(p4.p10,`Q2'/2-i11-i2/2+i3/2-i8/2+i9/2,i,i11,i2,i3,i8,i9,Md413,dotrewrite-d413-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md413,dotrewrite-d413-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md413,dotrewrite-d413-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case 79
* path: (7, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md413,dotrewrite-d413-0)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-1)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md413,dotrewrite-d413-2)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md413,dotrewrite-d413-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md413,dotrewrite-d413-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case 28
* path: (2, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md413,dotrewrite-d413-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-2)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md413,dotrewrite-d413-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-6)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-7)
	#call replace(p2.p8,-`Q2'/2+i10/2+i11-i3/2+i4/2-i9/2,i,i10,i11,i3,i4,i9,Md413,dotrewrite-d413-8)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md413,dotrewrite-d413-0)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md413,dotrewrite-d413-1)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-2)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md413,dotrewrite-d413-3)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md413,dotrewrite-d413-4)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-5)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case Q8
* path: (0, 1, 4, 8)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md413,dotrewrite-d413-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-6)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md413,dotrewrite-d413-7)
#endif
#break
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-4)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md413,dotrewrite-d413-5)
#endif
#break
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md413,dotrewrite-d413-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-2)
	#call replace(p3.p6,-i14+i3/2-i7/2+i8/2,i,i14,i3,i7,i8,Md413,dotrewrite-d413-3)
	#call replace(Q.p6,-`Q2'/2+i10/2+i11-i12-i7/2,i,i10,i11,i12,i7,Md413,dotrewrite-d413-4)
	#call replace(p1.p6,-i13+i3/2-i4/2-i7/2+i9/2,i,i13,i3,i4,i7,i9,Md413,dotrewrite-d413-5)
#endif
#break
#case 59
* path: (5, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-0)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-1)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md413,dotrewrite-d413-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case Q8
* path: (0, 7, 5, 8)
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md413,dotrewrite-d413-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md413,dotrewrite-d413-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md413,dotrewrite-d413-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-6)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md413,dotrewrite-d413-7)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md413,dotrewrite-d413-0)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md413,dotrewrite-d413-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md413,dotrewrite-d413-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md413,dotrewrite-d413-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md413,dotrewrite-d413-7)
	#call replace(p8.p10,-`Q2'/2+i10/2+i11-i3/2+i8/2,i,i10,i11,i3,i8,Md413,dotrewrite-d413-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q2
* path: (0, 10, 2)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md413,dotrewrite-d413-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md413,dotrewrite-d413-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md413,dotrewrite-d413-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md413,dotrewrite-d413-5)
	#call replace(p5.p10,i12-i14+i5/2-i6/2+i8/2,i,i12,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p9.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md413,dotrewrite-d413-2)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md413,dotrewrite-d413-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md413,dotrewrite-d413-4)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md413,dotrewrite-d413-5)
#endif
#break
#case Q4
* path: (0, 7, 3, 4)
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md413,dotrewrite-d413-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md413,dotrewrite-d413-5)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md413,dotrewrite-d413-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	if (count(Md413,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md413,dotrewrite-d413-3)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md413,dotrewrite-d413-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md413,dotrewrite-d413-5)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md413,dotrewrite-d413-6)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md413,dotrewrite-d413-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 1, 3, 7)
#case Q7
* path: (0, 7)
#case Q3
* path: (0, 7, 3)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 17
* path: (1, 3, 7)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 310
* path: (3, 7, 10)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 510
* path: (5, 7, 10)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md413,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md413-6;
	if (count(Md413,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md413-5;
	if (count(Md413,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md413-4;
	if (count(Md413,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md413-3;
	if (count(Md413,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md413-2;
	if (count(Md413,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md413-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd413()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md413,dotrewrite-d413-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md413,dotrewrite-d413-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md413,dotrewrite-d413-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md413,dotrewrite-d413-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md413,dotrewrite-d413-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md413,dotrewrite-d413-5)
#endif
#break
#endswitch
#break
*--#] d413 : 
*--#[ d414 :
#case Md414
#procedure SimpleDotd414()
if (count(Md414,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 2, 1)
#case 110
* path: (1, 2, 10)
#case 310
* path: (3, 1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md414,dotrewrite-d414-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i7/2+i9/2,i,i2,i7,i9,Md414,dotrewrite-d414-3)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md414,dotrewrite-d414-4)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md414,dotrewrite-d414-5)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md414,dotrewrite-d414-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md414,dotrewrite-d414-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md414,dotrewrite-d414-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md414,dotrewrite-d414-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 10, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md414,dotrewrite-d414-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md414,dotrewrite-d414-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md414,dotrewrite-d414-5)
	#call replace(p2.p7,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md414,dotrewrite-d414-6)
#endif
#break
#case Q4
* path: (0, 10, 9, 4)
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p4.p5 = i13 - i14;
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md414,dotrewrite-d414-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md414,dotrewrite-d414-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md414,dotrewrite-d414-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md414,dotrewrite-d414-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-6)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md414,dotrewrite-d414-7)
	#call replace(p4.p10,`Q2'/2-i11-i2/2+i3/2-i8/2+i9/2,i,i11,i2,i3,i8,i9,Md414,dotrewrite-d414-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md414,dotrewrite-d414-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md414,dotrewrite-d414-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md414,dotrewrite-d414-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case 79
* path: (7, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md414,dotrewrite-d414-0)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-1)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-2)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md414,dotrewrite-d414-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md414,dotrewrite-d414-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case 28
* path: (2, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md414,dotrewrite-d414-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md414,dotrewrite-d414-2)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md414,dotrewrite-d414-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md414,dotrewrite-d414-4)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md414,dotrewrite-d414-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-6)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-7)
	#call replace(p2.p8,-`Q2'/2+i10/2+i11-i3/2+i4/2-i9/2,i,i10,i11,i3,i4,i9,Md414,dotrewrite-d414-8)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md414,dotrewrite-d414-0)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md414,dotrewrite-d414-1)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-2)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md414,dotrewrite-d414-3)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md414,dotrewrite-d414-5)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case Q8
* path: (0, 1, 3, 8)
#case 18
* path: (1, 3, 8)
#case 38
* path: (3, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md414,dotrewrite-d414-3)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md414,dotrewrite-d414-4)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md414,dotrewrite-d414-5)
#endif
#break
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md414,dotrewrite-d414-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md414,dotrewrite-d414-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md414,dotrewrite-d414-5)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-2)
	#call replace(Q.p6,`Q2'/2-i10/2-i12+i7/2,i,i10,i12,i7,Md414,dotrewrite-d414-3)
	#call replace(p1.p6,i1/2-i13+i7/2-i9/2,i,i1,i13,i7,i9,Md414,dotrewrite-d414-4)
	#call replace(p3.p6,-i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md414,dotrewrite-d414-5)
#endif
#break
#case 59
* path: (5, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p - p8.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-0)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md414,dotrewrite-d414-1)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md414,dotrewrite-d414-2)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md414,dotrewrite-d414-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md414,dotrewrite-d414-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case Q8
* path: (0, 7, 5, 8)
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md414,dotrewrite-d414-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md414,dotrewrite-d414-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md414,dotrewrite-d414-5)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md414,dotrewrite-d414-6)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md414,dotrewrite-d414-7)
#endif
#break
#case 810
* path: (8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md414,dotrewrite-d414-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md414,dotrewrite-d414-1)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md414,dotrewrite-d414-2)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md414,dotrewrite-d414-3)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md414,dotrewrite-d414-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-6)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md414,dotrewrite-d414-7)
	#call replace(p8.p10,-`Q2'/2+i10/2+i11-i3/2+i8/2,i,i10,i11,i3,i8,Md414,dotrewrite-d414-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q2
* path: (0, 10, 2)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md414,dotrewrite-d414-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md414,dotrewrite-d414-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md414,dotrewrite-d414-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md414,dotrewrite-d414-4)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md414,dotrewrite-d414-5)
	#call replace(p5.p10,i12-i5/2+i6/2-i7/2,i,i12,i5,i6,i7,Md414,dotrewrite-d414-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p7.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p9.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md414,dotrewrite-d414-2)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md414,dotrewrite-d414-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md414,dotrewrite-d414-4)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md414,dotrewrite-d414-5)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md414,dotrewrite-d414-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md414,dotrewrite-d414-5)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md414,dotrewrite-d414-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	if (count(Md414,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md414,dotrewrite-d414-3)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md414,dotrewrite-d414-4)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md414,dotrewrite-d414-6)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md414,dotrewrite-d414-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case Q3
* path: (0, 7, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 10, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 510
* path: (5, 7, 10)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md414,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md414-6;
	if (count(Md414,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md414-5;
	if (count(Md414,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md414-4;
	if (count(Md414,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md414-3;
	if (count(Md414,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md414-2;
	if (count(Md414,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md414-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd414()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md414,dotrewrite-d414-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md414,dotrewrite-d414-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md414,dotrewrite-d414-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md414,dotrewrite-d414-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md414,dotrewrite-d414-4)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md414,dotrewrite-d414-5)
#endif
#break
#endswitch
#break
*--#] d414 : 
*--#[ d415 :
#case Md415
#procedure SimpleDotd415()
if (count(Md415,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 2, 1)
#case 110
* path: (1, 2, 10)
#case 310
* path: (3, 1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p10 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md415,dotrewrite-d415-4)
	#call replace(p1.p10,`Q2'/2-i2/2-i7/2+i9/2,i,i2,i7,i9,Md415,dotrewrite-d415-5)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md415,dotrewrite-d415-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p2.p5 = i12 - i13;
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md415,dotrewrite-d415-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-3)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md415,dotrewrite-d415-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md415,dotrewrite-d415-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-6)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md415,dotrewrite-d415-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 10, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md415,dotrewrite-d415-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md415,dotrewrite-d415-5)
	#call replace(p2.p7,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md415,dotrewrite-d415-6)
#endif
#break
#case Q4
* path: (0, 7, 8, 4)
#case 47
* path: (4, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-0)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-1)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md415,dotrewrite-d415-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-6)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-7)
#endif
#break
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p1.p - p9.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-2)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md415,dotrewrite-d415-3)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-5)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-7)
#endif
#break
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	if (count(Md415,1)) id p5.p10 = i12 - i14;
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md415,dotrewrite-d415-3)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md415,dotrewrite-d415-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-5)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-7)
	#call replace(p4.p10,`Q2'/2-i11-i2/2+i3/2-i8/2+i9/2,i,i11,i2,i3,i8,i9,Md415,dotrewrite-d415-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-6)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md415,dotrewrite-d415-7)
#endif
#break
#case 59
* path: (5, 8, 9)
#case 79
* path: (7, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-1)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-2)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md415,dotrewrite-d415-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-5)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-7)
#endif
#break
#case 28
* path: (2, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p2.p5 = i12 - i13;
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md415,dotrewrite-d415-2)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md415,dotrewrite-d415-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-5)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-7)
	#call replace(p2.p8,-`Q2'/2+i10/2+i11-i3/2+i4/2-i9/2,i,i10,i11,i3,i4,i9,Md415,dotrewrite-d415-8)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	if (count(Md415,1)) id p5.p10 = i12 - i14;
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md415,dotrewrite-d415-3)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md415,dotrewrite-d415-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-5)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md415,dotrewrite-d415-6)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md415,dotrewrite-d415-7)
#endif
#break
#case Q8
* path: (0, 1, 4, 8)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-4)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-5)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md415,dotrewrite-d415-6)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-7)
#endif
#break
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p3.p - p8.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-4)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md415,dotrewrite-d415-5)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-6)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p3.p - p8.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-1)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md415,dotrewrite-d415-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-5)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-6)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-7)
#endif
#break
#case Q8
* path: (0, 7, 8)
#case 78
* path: (7, 8)
#case 810
* path: (8, 7, 10)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-0)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md415,dotrewrite-d415-2)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-3)
	#call replace(Q.p8,-`Q2'/2+i10/2+i11-i7/2,i,i10,i11,i7,Md415,dotrewrite-d415-4)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md415,dotrewrite-d415-5)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md415,dotrewrite-d415-6)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q2
* path: (0, 10, 2)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + Q.p - p10.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p2.p5 = i12 - i13;
	if (count(Md415,1)) id p5.p10 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md415,dotrewrite-d415-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md415,dotrewrite-d415-4)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md415,dotrewrite-d415-5)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md415,dotrewrite-d415-6)
	#call replace(p3.p10,i11-i3/2-i7/2+i8/2,i,i11,i3,i7,i8,Md415,dotrewrite-d415-7)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p7.p?!{p7,[P+p7],[P-p7],p5} = + p1.p - p9.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	if (count(Md415,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-3)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md415,dotrewrite-d415-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i7/2,i,i1,i10,i2,i7,Md415,dotrewrite-d415-5)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md415,dotrewrite-d415-6)
#endif
#break
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-5)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md415,dotrewrite-d415-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md415,dotrewrite-d415-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md415,dotrewrite-d415-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md415,dotrewrite-d415-5)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md415,dotrewrite-d415-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case Q3
* path: (0, 7, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 10, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 57
* path: (5, 7)
#case 510
* path: (5, 7, 10)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md415,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md415-6;
	if (count(Md415,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md415-5;
	if (count(Md415,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md415-4;
	if (count(Md415,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md415-3;
	if (count(Md415,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md415-2;
	if (count(Md415,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md415-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd415()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md415,dotrewrite-d415-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md415,dotrewrite-d415-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md415,dotrewrite-d415-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md415,dotrewrite-d415-3)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md415,dotrewrite-d415-4)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md415,dotrewrite-d415-5)
#endif
#break
#endswitch
#break
*--#] d415 : 
*--#[ d416 :
#case Md416
#procedure SimpleDotd416()
if (count(Md416,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p6^n? = i12^n;
	id Q.p8^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 3, 5)
#case Q3
* path: (0, 5, 3)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#case 310
* path: (3, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p4.p + p9.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p2.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md416,dotrewrite-d416-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-3)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-4)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md416,dotrewrite-d416-5)
	#call replace(p3.p10,-`Q2'/2+i10/2-i13+i3/2-i8/2,i,i10,i13,i3,i8,Md416,dotrewrite-d416-6)
	#call replace(p1.p10,-`Q2'+i10/2+i11-i13+i2/2-i9/2,i,i10,i11,i13,i2,i9,Md416,dotrewrite-d416-7)
	#call replace(p5.p10,-`Q2'/2+i10/2+i12-i13+i5/2-i7/2,i,i10,i12,i13,i5,i7,Md416,dotrewrite-d416-8)
#endif
#break
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 58
* path: (5, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md416,dotrewrite-d416-5)
	#call replace(p4.p5,i1/2-i14-i4/2-i5/2+i6/2,i,i1,i14,i4,i5,i6,Md416,dotrewrite-d416-6)
	#call replace(p5.p8,`Q2'/2-i10/2-i11+i13+i3/2-i6/2+i7/2,i,i10,i11,i13,i3,i6,i7,Md416,dotrewrite-d416-7)
#endif
#break
#case Q7
* path: (0, 7)
#case 57
* path: (5, 7)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	if (count(Md416,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md416,dotrewrite-d416-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-3)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-4)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md416,dotrewrite-d416-5)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i13+i5/2+i7/2,i,i10,i11,i13,i5,i7,Md416,dotrewrite-d416-6)
	#call replace(p1.p7,`Q2'/2-i10/2-i11+i13-i14+i3/2-i4/2+i9/2,i,i10,i11,i13,i14,i3,i4,i9,Md416,dotrewrite-d416-7)
#endif
#break
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p4.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md416,dotrewrite-d416-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md416,dotrewrite-d416-5)
	#call replace(p2.p4,`Q2'/2-i11-i2/2+i3/2-i4/2,i,i11,i2,i3,i4,Md416,dotrewrite-d416-6)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-7)
	#call replace(p6.p9,i14-i3/2+i5/2-i7/2+i8/2,i,i14,i3,i5,i7,i8,Md416,dotrewrite-d416-8)
#endif
#break
#case 59
* path: (5, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p4.p + p9.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p10.p - p9.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-1)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-2)
	#call replace(p9.p10,-i10/2+i2/2-i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-4)
	#call replace(p6.p9,i14-i3/2+i5/2-i7/2+i8/2,i,i14,i3,i5,i7,i8,Md416,dotrewrite-d416-5)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p5.p10,-`Q2'/2+i10/2+i12-i13+i5/2-i7/2,i,i10,i12,i13,i5,i7,Md416,dotrewrite-d416-7)
	#call replace(p5.p9,`Q2'/2+i1/2-i10/2-i11+i13-i14+i3/2-i4/2-i5/2+i7/2,i,i1,i10,i11,i13,i14,i3,i4,i5,i7,Md416,dotrewrite-d416-8)
#endif
#break
#case Q7
* path: (0, 2, 10, 7)
#case 17
* path: (1, 2, 10, 7)
#case 27
* path: (2, 10, 7)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p2.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id p2.p6 = i12 - i14;
	if (count(Md416,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md416,dotrewrite-d416-2)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-3)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-4)
	#call replace(p2.p10,-i10/2-i2/2+i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-5)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p7.p10,`Q2'/2-i10/2-i11+i12+i5/2-i7/2,i,i10,i11,i12,i5,i7,Md416,dotrewrite-d416-7)
	#call replace(p2.p7,-`Q2'/2+i10/2+i11-i12+i14-i3/2+i4/2-i9/2,i,i10,i11,i12,i14,i3,i4,i9,Md416,dotrewrite-d416-8)
#endif
#break
#case 25
* path: (2, 10, 5)
#case 510
* path: (5, 10)
#case 610
* path: (6, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p4.p + p9.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p2.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	if (count(Md416,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md416,dotrewrite-d416-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-3)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-4)
	#call replace(p2.p10,-i10/2-i2/2+i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-5)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p2.p5,-i1/2+i11-i12+i14-i3/2+i4/2,i,i1,i11,i12,i14,i3,i4,Md416,dotrewrite-d416-7)
	#call replace(p5.p10,-`Q2'/2+i10/2+i12-i13+i5/2-i7/2,i,i10,i12,i13,i5,i7,Md416,dotrewrite-d416-8)
#endif
#break
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p10.p - p9.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p4.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-0)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-1)
	#call replace(p9.p10,-i10/2+i2/2-i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-3)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md416,dotrewrite-d416-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-5)
	#call replace(p6.p9,i14-i3/2+i5/2-i7/2+i8/2,i,i14,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md416,dotrewrite-d416-7)
	#call replace(p4.p10,-`Q2'/2+i11+i2/2-i3/2+i8/2-i9/2,i,i11,i2,i3,i8,i9,Md416,dotrewrite-d416-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p9.p - p4.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-3)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md416,dotrewrite-d416-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-5)
	#call replace(p6.p9,i14-i3/2+i5/2-i7/2+i8/2,i,i14,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p3.p9,`Q2'/2+i1/2-i10/2-i11+i13-i4/2+i8/2,i,i1,i10,i11,i13,i4,i8,Md416,dotrewrite-d416-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q10
* path: (0, 2, 10)
#case Q10
* path: (0, 10)
#case Q2
* path: (0, 10, 2)
#case Q1
* path: (0, 10, 2, 1)
#case 12
* path: (1, 2)
#case 110
* path: (1, 2, 10)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 1, 3, 6)
#case 210
* path: (2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = - p4.p + p9.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p10.p - p2.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md416,dotrewrite-d416-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-2)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-3)
	#call replace(p2.p10,-i10/2-i2/2+i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-4)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md416,dotrewrite-d416-5)
	#call replace(p3.p10,-`Q2'/2+i10/2-i13+i3/2-i8/2,i,i10,i13,i3,i8,Md416,dotrewrite-d416-6)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md416,dotrewrite-d416-7)
#endif
#break
#case 37
* path: (3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p8.p?!{p8,[P+p8],[P-p8],Q} = + p7.p + p6.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	if (count(Md416,1)) id Q.p7 = -i12 + i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md416,dotrewrite-d416-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-3)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-4)
	#call replace(p1.p5,i1/2-i14+i3/2-i4/2,i,i1,i14,i3,i4,Md416,dotrewrite-d416-5)
	#call replace(p5.p7,`Q2'/2-i10/2-i11+i13+i5/2+i7/2,i,i10,i11,i13,i5,i7,Md416,dotrewrite-d416-6)
	#call replace(p3.p7,`Q2'/2-i10/2-i11+i13+i5/2-i6/2+i8/2,i,i10,i11,i13,i5,i6,i8,Md416,dotrewrite-d416-7)
	#call replace(p1.p7,`Q2'/2-i10/2-i11+i13-i14+i3/2-i4/2+i9/2,i,i10,i11,i13,i14,i3,i4,i9,Md416,dotrewrite-d416-8)
#endif
#break
#case Q4
* path: (0, 5, 3, 4)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p5.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p5 = i11 - i12;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-4)
	#call replace(p4.p5,i1/2-i14-i4/2-i5/2+i6/2,i,i1,i14,i4,i5,i6,Md416,dotrewrite-d416-5)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md416,dotrewrite-d416-6)
	#call replace(p5.p8,`Q2'/2-i10/2-i11+i13+i3/2-i6/2+i7/2,i,i10,i11,i13,i3,i6,i7,Md416,dotrewrite-d416-7)
#endif
#break
#case Q8
* path: (0, 7, 8)
#case 78
* path: (7, 8)
#case 79
* path: (7, 8, 9)
#case 710
* path: (7, 10)
#case 810
* path: (8, 7, 10)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p10.p - p9.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p7 = -i12 + i13;
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-1)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-2)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-3)
	#call replace(p9.p10,-i10/2+i2/2-i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-5)
	#call replace(p8.p10,`Q2'/2-i10/2-i11+i3/2-i8/2,i,i10,i11,i3,i8,Md416,dotrewrite-d416-6)
	#call replace(p7.p9,-i14+i3/2-i4/2-i5/2+i7/2+i9/2,i,i14,i3,i4,i5,i7,i9,Md416,dotrewrite-d416-7)
	#call replace(p7.p10,`Q2'/2-i10/2-i11+i12+i5/2-i7/2,i,i10,i11,i12,i5,i7,Md416,dotrewrite-d416-8)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q8
* path: (0, 1, 4, 8)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 18
* path: (1, 4, 8)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md416,dotrewrite-d416-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md416,dotrewrite-d416-5)
	#call replace(p1.p8,`Q2'/2-i10/2-i11+i13+i3/2-i4/2+i9/2,i,i10,i11,i13,i3,i4,i9,Md416,dotrewrite-d416-6)
#endif
#break
#case 47
* path: (4, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p7.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id Q.p7 = -i12 + i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-2)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-4)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md416,dotrewrite-d416-5)
	#call replace(p3.p7,`Q2'/2-i10/2-i11+i13+i5/2-i6/2+i8/2,i,i10,i11,i13,i5,i6,i8,Md416,dotrewrite-d416-6)
	#call replace(p4.p7,-i14+i3/2-i4/2-i5/2+i6/2-i8/2+i9/2,i,i14,i3,i4,i5,i6,i8,i9,Md416,dotrewrite-d416-7)
#endif
#break
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 36
* path: (3, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 6)
#case 48
* path: (4, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-1)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md416,dotrewrite-d416-4)
	#call replace(p4.p6,i14-i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md416,dotrewrite-d416-5)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md416,dotrewrite-d416-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#case 28
* path: (2, 9, 8)
#case 69
* path: (6, 8, 9)
#case 89
* path: (8, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	if (count(Md416,1)) id p2.p6 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md416,dotrewrite-d416-1)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-2)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-5)
	#call replace(p6.p9,i14-i3/2+i5/2-i7/2+i8/2,i,i14,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p2.p8,-`Q2'/2+i10/2+i11-i3/2+i4/2-i9/2,i,i10,i11,i3,i4,i9,Md416,dotrewrite-d416-7)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + Q.p - p2.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p10.p - p9.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-0)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md416,dotrewrite-d416-1)
	#call replace(Q.p10,-`Q2'+i11-i13,i,i11,i13,Md416,dotrewrite-d416-2)
	#call replace(p9.p10,-i10/2+i2/2-i9/2,i,i10,i2,i9,Md416,dotrewrite-d416-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11+i13-i2/2,i,i1,i11,i13,i2,Md416,dotrewrite-d416-4)
	#call replace(p6.p9,i14-i3/2+i5/2-i7/2+i8/2,i,i14,i3,i5,i7,i8,Md416,dotrewrite-d416-5)
	#call replace(p6.p10,-i12+i3/2-i5/2+i7/2-i8/2,i,i12,i3,i5,i7,i8,Md416,dotrewrite-d416-6)
	#call replace(p8.p10,`Q2'/2-i10/2-i11+i3/2-i8/2,i,i10,i11,i3,i8,Md416,dotrewrite-d416-7)
#endif
#break
#default
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md416,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p2.p - p9.p;
	.sort:momrewrite-Md416-6;
	if (count(Md416,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md416-5;
	if (count(Md416,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md416-4;
	if (count(Md416,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md416-3;
	if (count(Md416,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md416-2;
	if (count(Md416,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md416-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd416()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md416,dotrewrite-d416-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md416,dotrewrite-d416-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md416,dotrewrite-d416-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md416,dotrewrite-d416-3)
	#call replace(p3.p8,`Q2'/2-i10/2-i11+i13+i3/2+i8/2,i,i10,i11,i13,i3,i8,Md416,dotrewrite-d416-4)
	#call replace(p1.p8,`Q2'/2-i10/2-i11+i13+i3/2-i4/2+i9/2,i,i10,i11,i13,i3,i4,i9,Md416,dotrewrite-d416-5)
#endif
#break
#endswitch
#break
*--#] d416 : 
*--#[ d417 :
#case Md417
#procedure SimpleDotd417()
if (count(Md417,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p4.p5^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p5^n? = i13^n;
	id Q.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 10, 4)
#case 310
* path: (3, 4, 10)
#case 410
* path: (4, 10)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-3)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Md417,dotrewrite-d417-4)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-5)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-6)
#endif
#break
#case 89
* path: (8, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p + p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p7.p + p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-3)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-4)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-6)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Md417,dotrewrite-d417-7)
	#call replace(p4.p7,-i1/2+i10/2+i11+i3/2-i9/2,i,i1,i10,i11,i3,i9,Md417,dotrewrite-d417-8)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-3)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-5)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md417,dotrewrite-d417-6)
#endif
#break
#case 36
* path: (3, 6)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p3.p - p6.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p9.p - p6.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p6 = i12 - i13;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-2)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-3)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-4)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-5)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-6)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-7)
	#call replace(p4.p6,i1/2-i11-i3/2-i4/2,i,i1,i11,i3,i4,Md417,dotrewrite-d417-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p + p1.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md417,dotrewrite-d417-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md417,dotrewrite-d417-2)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Md417,dotrewrite-d417-3)
	#call replace(p2.p5,-i11+i13-i3/2-i5/2+i6/2,i,i11,i13,i3,i5,i6,Md417,dotrewrite-d417-4)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-5)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-6)
	#call replace(p2.p10,`Q2'/2-i10/2-i13+i14-i2/2+i8/2,i,i10,i13,i14,i2,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p6.p + p7.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p6 = i12 - i13;
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-2)
	#call replace(p6.p7,-i6/2-i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-4)
	#call replace(p4.p6,i1/2-i11-i3/2-i4/2,i,i1,i11,i3,i4,Md417,dotrewrite-d417-5)
	#call replace(p4.p7,-i1/2+i10/2+i11+i3/2-i9/2,i,i1,i10,i11,i3,i9,Md417,dotrewrite-d417-6)
#endif
#break
#case Q7
* path: (0, 2, 8, 7)
#case 27
* path: (2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p + p1.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p7.p + p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md417,dotrewrite-d417-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-2)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-3)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md417,dotrewrite-d417-4)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md417,dotrewrite-d417-5)
	#call replace(p2.p8,-i1/2+i10/2+i13-i14-i8/2,i,i1,i10,i13,i14,i8,Md417,dotrewrite-d417-6)
	#call replace(p2.p7,i1/2-i10/2-i11+i14-i3/2-i5/2+i6/2+i8/2,i,i1,i10,i11,i14,i3,i5,i6,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case Q8
* path: (0, 8)
#case Q5
* path: (0, 8, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-2)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-5)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Md417,dotrewrite-d417-6)
#endif
#break
#case Q10
* path: (0, 10)
#case 510
* path: (5, 8, 10)
#case 810
* path: (8, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p9.p + p10.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p10.p + p8.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-3)
	#call replace(p8.p10,i1/2-i10/2-i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-4)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Md417,dotrewrite-d417-5)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-6)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p9.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p10.p + p8.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p + p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p10.p - p9.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-3)
	#call replace(p8.p10,i1/2-i10/2-i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-4)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-5)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md417,dotrewrite-d417-6)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-7)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-8)
#endif
#break
#case 17
* path: (1, 2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p7.p + p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md417,dotrewrite-d417-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-2)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-3)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-4)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-5)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md417,dotrewrite-d417-6)
	#call replace(p1.p7,-i1/2+i10/2+i11+i3/2+i5/2-i6/2-i8/2,i,i1,i10,i11,i3,i5,i6,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p7.p + p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-1)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-2)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-4)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md417,dotrewrite-d417-5)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Md417,dotrewrite-d417-6)
	#call replace(p4.p7,-i1/2+i10/2+i11+i3/2-i9/2,i,i1,i10,i11,i3,i9,Md417,dotrewrite-d417-7)
#endif
#break
#case 29
* path: (2, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p10.p - p9.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md417,dotrewrite-d417-0)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-1)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-2)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md417,dotrewrite-d417-3)
	#call replace(p2.p5,-i11+i13-i3/2-i5/2+i6/2,i,i11,i13,i3,i5,i6,Md417,dotrewrite-d417-4)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-5)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-6)
	#call replace(p2.p10,`Q2'/2-i10/2-i13+i14-i2/2+i8/2,i,i10,i13,i14,i2,i8,Md417,dotrewrite-d417-7)
	#call replace(p2.p9,-i10/2+i12-i13+i14-i3/2+i4/2+i8/2,i,i10,i12,i13,i14,i3,i4,i8,Md417,dotrewrite-d417-8)
#endif
#break
#case 47
* path: (4, 9, 7)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-0)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-1)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-2)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-4)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md417,dotrewrite-d417-5)
	#call replace(p4.p7,-i1/2+i10/2+i11+i3/2-i9/2,i,i1,i10,i11,i3,i9,Md417,dotrewrite-d417-6)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 26
* path: (2, 1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p3.p - p6.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p6 = i12 - i13;
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md417,dotrewrite-d417-2)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-4)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-5)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-6)
	#call replace(p6.p8,i3/2-i5/2+i7/2-i9/2,i,i3,i5,i7,i9,Md417,dotrewrite-d417-7)
	#call replace(p1.p6,i1/2-i11-i4/2-i5/2+i6/2,i,i1,i11,i4,i5,i6,Md417,dotrewrite-d417-8)
#endif
#break
#case 610
* path: (6, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p10.p - p9.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p3.p - p6.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p9.p - p6.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p9.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p6 = i12 - i13;
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p3.p9,i3/2-i8/2+i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-3)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-4)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-5)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Md417,dotrewrite-d417-6)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-7)
	#call replace(p6.p10,i1/2-i11-i3/2-i4/2+i6/2-i7/2+i9/2,i,i1,i11,i3,i4,i6,i7,i9,Md417,dotrewrite-d417-8)
#endif
#break
#case Q6
* path: (0, 8, 5, 6)
#case 68
* path: (6, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p6 = i12 - i13;
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-4)
	#call replace(p4.p6,i1/2-i11-i3/2-i4/2,i,i1,i11,i3,i4,Md417,dotrewrite-d417-5)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Md417,dotrewrite-d417-6)
	#call replace(p6.p8,i3/2-i5/2+i7/2-i9/2,i,i3,i5,i7,i9,Md417,dotrewrite-d417-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p4.p + p10.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p10.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md417,dotrewrite-d417-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-2)
	#call replace(p1.p10,i1/2+i10/2-i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-3)
	#call replace(p1.p5,i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md417,dotrewrite-d417-4)
	#call replace(p3.p10,i1/2-i4/2-i8/2+i9/2,i,i1,i4,i8,i9,Md417,dotrewrite-d417-5)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-6)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case Q9
* path: (0, 1, 4, 9)
#case 19
* path: (1, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = - p6.p + p9.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md417,dotrewrite-d417-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-4)
	#call replace(p1.p5,i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md417,dotrewrite-d417-5)
	#call replace(p1.p9,i10/2+i3/2-i4/2-i8/2,i,i10,i3,i4,i8,Md417,dotrewrite-d417-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 25
* path: (2, 8, 5)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = - p3.p + p1.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md417,dotrewrite-d417-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-2)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-4)
	#call replace(p2.p3,-i1/2+i12-i3/2+i4/2,i,i1,i12,i3,i4,Md417,dotrewrite-d417-5)
	#call replace(p2.p5,-i11+i13-i3/2-i5/2+i6/2,i,i11,i13,i3,i5,i6,Md417,dotrewrite-d417-6)
	#call replace(p2.p8,-i1/2+i10/2+i13-i14-i8/2,i,i1,i10,i13,i14,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md417,dotrewrite-d417-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-2)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-3)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-5)
	#call replace(p1.p5,i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md417,dotrewrite-d417-6)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Md417,dotrewrite-d417-7)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 2, 1, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p1.p - p8.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p1.p - p3.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p - p8.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md417,dotrewrite-d417-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-3)
	#call replace(p1.p8,i1/2-i10/2+i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-4)
	#call replace(p3.p8,i3/2+i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-5)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-6)
	#call replace(p1.p5,i11+i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md417,dotrewrite-d417-7)
#endif
#break
#case 48
* path: (4, 10, 8)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p7.p + p9.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p10.p + p8.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p - p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p4.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-1)
	#call replace(p4.p10,i10/2+i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-2)
	#call replace(p8.p10,i1/2-i10/2-i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-4)
	#call replace(p4.p8,i1/2-i10/2-i3/2+i9/2,i,i1,i10,i3,i9,Md417,dotrewrite-d417-5)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-6)
	#call replace(p5.p10,i11+i3/2-i6/2+i7/2-i8/2,i,i11,i3,i6,i7,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case 59
* path: (5, 6, 9)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p5.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p4.p + p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p9.p - p6.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p6 = i12 - i13;
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p4.p9,i10/2-i4/2-i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-3)
	#call replace(p6.p9,i6/2-i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-5)
	#call replace(p4.p6,i1/2-i11-i3/2-i4/2,i,i1,i11,i3,i4,Md417,dotrewrite-d417-6)
	#call replace(p5.p9,i3/2-i6/2+i7/2-i8/2,i,i3,i6,i7,i8,Md417,dotrewrite-d417-7)
#endif
#break
#case 710
* path: (7, 8, 10)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p10.p + p8.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p8.p + p9.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p4.p?!{p4,[P+p4],[P-p4],p5} = + p10.p - p9.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p5.p?!{p5,[P+p5],[P-p5],Q,p4} = + p7.p + p8.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p7.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	if (count(Md417,1)) id Q.p8 = i13 - i14;
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-1)
	#call replace(Q.p9,i12-i13+i14,i,i12,i13,i14,Md417,dotrewrite-d417-2)
	#call replace(p7.p9,-i6/2+i7/2+i9/2,i,i6,i7,i9,Md417,dotrewrite-d417-3)
	#call replace(p8.p9,i3/2-i8/2-i9/2,i,i3,i8,i9,Md417,dotrewrite-d417-4)
	#call replace(p8.p10,i1/2-i10/2-i8/2,i,i1,i10,i8,Md417,dotrewrite-d417-5)
	#call replace(p9.p10,i10/2-i4/2+i9/2,i,i10,i4,i9,Md417,dotrewrite-d417-6)
	#call replace(Q.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md417,dotrewrite-d417-7)
	#call replace(p7.p10,-i1/2+i10/2+i11+i3/2-i6/2+i7/2,i,i1,i10,i11,i3,i6,i7,Md417,dotrewrite-d417-8)
#endif
#break
#default
#case 37
* path: (3, 5, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md417,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p9.p + p4.p;
	.sort:momrewrite-Md417-6;
	if (count(Md417,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md417-5;
	if (count(Md417,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p6.p;
	.sort:momrewrite-Md417-4;
	if (count(Md417,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md417-3;
	if (count(Md417,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md417-2;
	if (count(Md417,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p - p7.p;
	.sort:momrewrite-Md417-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd417()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md417,dotrewrite-d417-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md417,dotrewrite-d417-1)
	#call replace(p5.p7,i5/2+i7/2-i8/2,i,i5,i7,i8,Md417,dotrewrite-d417-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md417,dotrewrite-d417-3)
	#call replace(p3.p7,i5/2-i6/2-i8/2+i9/2,i,i5,i6,i8,i9,Md417,dotrewrite-d417-4)
	#call replace(p4.p7,-i1/2+i10/2+i11+i3/2-i9/2,i,i1,i10,i11,i3,i9,Md417,dotrewrite-d417-5)
#endif
#break
#endswitch
#break
*--#] d417 : 
*--#[ d322 :
#case Md322
#procedure SimpleDotd322()
if (count(Md322,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p3.p9^n? = i10^n;
	id p4.p9^n? = i11^n;
	id Q.p3^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p9} = + p4.p + p5.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p9.p - p6.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p5 = i12 - i13;
	if (count(Md322,1)) id p5.p9 = i10 - i11;
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md322,dotrewrite-d322-3)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md322,dotrewrite-d322-4)
	#call replace(p6.p9,-i1/2+i11+i7/2+i9/2,i,i1,i11,i7,i9,Md322,dotrewrite-d322-5)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-6)
#endif
#break
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p - p8.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p8.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p8.p + p9.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-0)
	#call replace(Q.p8,-i12+i13-i14,i,i12,i13,i14,Md322,dotrewrite-d322-1)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-2)
	#call replace(p4.p8,-i3/2+i5/2-i6/2+i7/2,i,i3,i5,i6,i7,Md322,dotrewrite-d322-3)
	#call replace(p8.p9,i1/2-i10-i7/2-i9/2,i,i1,i10,i7,i9,Md322,dotrewrite-d322-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-5)
#endif
#break
#case Q9
* path: (0, 1, 9)
#case 19
* path: (1, 9)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p - p8.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p9.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p9.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md322,dotrewrite-d322-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-1)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md322,dotrewrite-d322-2)
	#call replace(p1.p3,i10+i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md322,dotrewrite-d322-3)
	#call replace(p1.p4,i11+i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md322,dotrewrite-d322-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-5)
#endif
#break
#case Q5
* path: (0, 9, 3, 5)
#case 35
* path: (3, 5)
#case 59
* path: (5, 3, 9)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p7.p + p9.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p3.p - p5.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p5 = i12 - i13;
	if (count(Md322,1)) id Q.p7 = i13 - i14;
	if (count(Md322,1)) id p5.p9 = i10 - i11;
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-4)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md322,dotrewrite-d322-5)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md322,dotrewrite-d322-6)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-7)
#endif
#break
#case Q7
* path: (0, 7)
#case Q4
* path: (0, 7, 4)
#case Q9
* path: (0, 9)
#case Q3
* path: (0, 9, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 39
* path: (3, 9)
#case 44
* path: (4,)
#case 49
* path: (4, 3, 9)
#case 47
* path: (4, 7)
#case 49
* path: (4, 7, 9)
#case 77
* path: (7,)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p7.p + p9.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p7 = i13 - i14;
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-2)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md322,dotrewrite-d322-3)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md322,dotrewrite-d322-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-5)
#endif
#break
#case 36
* path: (3, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p3.p - p5.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p - p8.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p8.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p8.p + p9.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	#call replace(Q.p8,-i12+i13-i14,i,i12,i13,i14,Md322,dotrewrite-d322-0)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-1)
	#call replace(p6.p8,i5/2-i6/2-i8/2,i,i5,i6,i8,Md322,dotrewrite-d322-2)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md322,dotrewrite-d322-3)
	#call replace(p6.p9,-i1/2+i11+i7/2+i9/2,i,i1,i11,i7,i9,Md322,dotrewrite-d322-4)
	#call replace(p8.p9,i1/2-i10-i7/2-i9/2,i,i1,i10,i7,i9,Md322,dotrewrite-d322-5)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 2, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = + p1.p - p7.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md322,dotrewrite-d322-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md322,dotrewrite-d322-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md322,dotrewrite-d322-5)
	#call replace(p1.p3,i10+i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md322,dotrewrite-d322-6)
	#call replace(p1.p4,i11+i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md322,dotrewrite-d322-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 24
* path: (2, 7, 4)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = + Q.p - p2.p - p7.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md322,dotrewrite-d322-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md322,dotrewrite-d322-4)
	#call replace(p2.p3,-i10+i12-i3/2-i7/2+i8/2,i,i10,i12,i3,i7,i8,Md322,dotrewrite-d322-5)
	#call replace(p2.p4,-i11+i13-i4/2+i6/2-i7/2,i,i11,i13,i4,i6,i7,Md322,dotrewrite-d322-6)
	#call replace(p2.p7,-i1/2+i13-i14-i7/2+i9/2,i,i1,i13,i14,i7,i9,Md322,dotrewrite-d322-7)
#endif
#break
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p7.p + p9.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p9} = + p4.p + p5.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p5 = i12 - i13;
	if (count(Md322,1)) id Q.p7 = i13 - i14;
	if (count(Md322,1)) id p5.p9 = i10 - i11;
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md322,dotrewrite-d322-4)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md322,dotrewrite-d322-5)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md322,dotrewrite-d322-6)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-7)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 25
* path: (2, 1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p4.p - p7.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p9} = + p3.p - p5.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p - p3.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p9.p?!{p9,[P+p9],[P-p9],p3,p4} = + p1.p - p7.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	if (count(Md322,1)) id Q.p5 = i12 - i13;
	if (count(Md322,1)) id Q.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md322,dotrewrite-d322-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-3)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md322,dotrewrite-d322-4)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md322,dotrewrite-d322-5)
	#call replace(p1.p3,i10+i3/2+i7/2-i8/2,i,i10,i3,i7,i8,Md322,dotrewrite-d322-6)
	#call replace(p5.p7,i3/2-i4/2+i6/2-i8/2,i,i3,i4,i6,i8,Md322,dotrewrite-d322-7)
	#call replace(p1.p5,i10-i11+i3/2-i4/2+i6/2-i8/2,i,i10,i11,i3,i4,i6,i8,Md322,dotrewrite-d322-8)
#endif
#break
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p - p8.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p + p1.p - p9.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md322,dotrewrite-d322-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-1)
	#call replace(p2.p3,-i10+i12-i3/2-i7/2+i8/2,i,i10,i12,i3,i7,i8,Md322,dotrewrite-d322-2)
	#call replace(p2.p4,-i11+i13-i4/2+i6/2-i7/2,i,i11,i13,i4,i6,i7,Md322,dotrewrite-d322-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-4)
	#call replace(p2.p9,`Q2'/2-i13+i14-i2/2+i7/2-i9/2,i,i13,i14,i2,i7,i9,Md322,dotrewrite-d322-5)
#endif
#break
#default
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md322,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md322-5;
	if (count(Md322,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p6.p;
	.sort:momrewrite-Md322-4;
	if (count(Md322,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md322-3;
	if (count(Md322,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md322-2;
	if (count(Md322,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p4.p + p9.p - p6.p;
	.sort:momrewrite-Md322-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd322()
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md322,dotrewrite-d322-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md322,dotrewrite-d322-1)
	#call replace(p3.p6,i4/2-i5/2-i7/2+i8/2,i,i4,i5,i7,i8,Md322,dotrewrite-d322-2)
	#call replace(p6.p9,-i1/2+i11+i7/2+i9/2,i,i1,i11,i7,i9,Md322,dotrewrite-d322-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md322,dotrewrite-d322-4)
#endif
#break
#endswitch
#break
*--#] d322 : 
*--#[ d317 :
#case Md317
#procedure SimpleDotd317()
if (count(Md317,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + Q.p - p2.p - p9.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md317,dotrewrite-d317-1)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md317,dotrewrite-d317-2)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md317,dotrewrite-d317-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md317,dotrewrite-d317-4)
	#call replace(p2.p9,`Q2'/2-i11-i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md317,dotrewrite-d317-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md317,dotrewrite-d317-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md317,dotrewrite-d317-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-2)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md317,dotrewrite-d317-3)
	#call replace(p2.p7,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md317,dotrewrite-d317-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md317,dotrewrite-d317-5)
#endif
#break
#case Q4
* path: (0, 9, 4)
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p + p4.p - p9.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md317,dotrewrite-d317-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md317,dotrewrite-d317-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md317,dotrewrite-d317-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md317,dotrewrite-d317-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md317,dotrewrite-d317-6)
#endif
#break
#case 59
* path: (5, 7, 9)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-0)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md317,dotrewrite-d317-1)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md317,dotrewrite-d317-2)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md317,dotrewrite-d317-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md317,dotrewrite-d317-4)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md317,dotrewrite-d317-5)
#endif
#break
#case 28
* path: (2, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + Q.p - p2.p - p9.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p2.p5 = i12 - i13;
	if (count(Md317,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md317,dotrewrite-d317-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md317,dotrewrite-d317-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md317,dotrewrite-d317-5)
	#call replace(p2.p9,`Q2'/2-i11-i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md317,dotrewrite-d317-6)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md317,dotrewrite-d317-7)
	#call replace(p2.p8,i10-i11-i3/2+i4/2+i7/2-i9/2,i,i10,i11,i3,i4,i7,i9,Md317,dotrewrite-d317-8)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q8
* path: (0, 1, 4, 8)
#case 14
* path: (1, 4)
#case 18
* path: (1, 4, 8)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p1.p - p4.p - p8.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p4.p5 = i13 - i14;
	if (count(Md317,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md317,dotrewrite-d317-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-3)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md317,dotrewrite-d317-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md317,dotrewrite-d317-6)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md317,dotrewrite-d317-7)
#endif
#break
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md317,dotrewrite-d317-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-3)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-4)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md317,dotrewrite-d317-5)
#endif
#break
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p4.p5 = i13 - i14;
	if (count(Md317,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-3)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md317,dotrewrite-d317-4)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md317,dotrewrite-d317-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p6.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md317,dotrewrite-d317-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-1)
	#call replace(Q.p6,i10-i11-i12,i,i10,i11,i12,Md317,dotrewrite-d317-2)
	#call replace(p5.p6,-i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-3)
	#call replace(p3.p6,-i14+i3/2-i7/2+i8/2,i,i14,i3,i7,i8,Md317,dotrewrite-d317-4)
	#call replace(p1.p6,-i13+i3/2-i4/2-i7/2+i9/2,i,i13,i3,i4,i7,i9,Md317,dotrewrite-d317-5)
#endif
#break
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md317,dotrewrite-d317-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md317,dotrewrite-d317-2)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md317,dotrewrite-d317-5)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md317,dotrewrite-d317-6)
#endif
#break
#case Q9
* path: (0, 9)
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p1.p - p9.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md317,dotrewrite-d317-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-1)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md317,dotrewrite-d317-2)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md317,dotrewrite-d317-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md317,dotrewrite-d317-4)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md317,dotrewrite-d317-5)
#endif
#break
#case 47
* path: (4, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md317,dotrewrite-d317-3)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md317,dotrewrite-d317-4)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md317,dotrewrite-d317-5)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p5.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	if (count(Md317,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-1)
	#call replace(p5.p8,i5/2-i6/2+i8/2,i,i5,i6,i8,Md317,dotrewrite-d317-2)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md317,dotrewrite-d317-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md317,dotrewrite-d317-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md317,dotrewrite-d317-5)
	#call replace(p5.p9,i13-i14+i5/2-i6/2+i8/2,i,i13,i14,i5,i6,i8,Md317,dotrewrite-d317-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 2, 1)
#case Q7
* path: (0, 7)
#case Q3
* path: (0, 7, 3)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md317,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md317-5;
	if (count(Md317,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md317-4;
	if (count(Md317,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md317-3;
	if (count(Md317,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md317-2;
	if (count(Md317,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p7.p;
	.sort:momrewrite-Md317-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd317()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md317,dotrewrite-d317-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md317,dotrewrite-d317-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md317,dotrewrite-d317-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md317,dotrewrite-d317-3)
	#call replace(p5.p7,i14-i5/2+i6/2-i8/2,i,i14,i5,i6,i8,Md317,dotrewrite-d317-4)
#endif
#break
#endswitch
#break
*--#] d317 : 
*--#[ d318 :
#case Md318
#procedure SimpleDotd318()
if (count(Md318,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p3.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md318,dotrewrite-d318-1)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md318,dotrewrite-d318-2)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md318,dotrewrite-d318-4)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-5)
	#call replace(p2.p9,`Q2'/2-i11-i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md318,dotrewrite-d318-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md318,dotrewrite-d318-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md318,dotrewrite-d318-4)
	#call replace(p2.p7,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md318,dotrewrite-d318-5)
#endif
#break
#case 47
* path: (4, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p9.p - p4.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p4.p5 = i13 - i14;
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md318,dotrewrite-d318-2)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md318,dotrewrite-d318-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md318,dotrewrite-d318-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md318,dotrewrite-d318-5)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-6)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-7)
#endif
#break
#case Q4
* path: (0, 9, 4)
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-1)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md318,dotrewrite-d318-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md318,dotrewrite-d318-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md318,dotrewrite-d318-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-6)
#endif
#break
#case 59
* path: (5, 7, 9)
#case 79
* path: (7, 9)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-0)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-1)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md318,dotrewrite-d318-2)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md318,dotrewrite-d318-4)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-5)
#endif
#break
#case Q8
* path: (0, 1, 3, 8)
#case 18
* path: (1, 3, 8)
#case 38
* path: (3, 8)
#case 58
* path: (5, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md318,dotrewrite-d318-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-3)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md318,dotrewrite-d318-4)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md318,dotrewrite-d318-5)
#endif
#break
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p4.p5 = i13 - i14;
	if (count(Md318,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-3)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md318,dotrewrite-d318-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md318,dotrewrite-d318-5)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md318,dotrewrite-d318-6)
#endif
#break
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p5.p - p6.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id Q.p6 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md318,dotrewrite-d318-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-2)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-3)
	#call replace(p1.p6,i1/2-i13+i7/2-i9/2,i,i1,i13,i7,i9,Md318,dotrewrite-d318-4)
	#call replace(p3.p6,-i14+i3/2+i7/2-i8/2,i,i14,i3,i7,i8,Md318,dotrewrite-d318-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p - p7.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p4.p5 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md318,dotrewrite-d318-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md318,dotrewrite-d318-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md318,dotrewrite-d318-5)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md318,dotrewrite-d318-6)
#endif
#break
#case 78
* path: (7, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p7.p + p8.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md318,dotrewrite-d318-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md318,dotrewrite-d318-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-4)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md318,dotrewrite-d318-5)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md318,dotrewrite-d318-6)
#endif
#break
#case Q9
* path: (0, 9)
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p1.p - p9.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p - p9.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md318,dotrewrite-d318-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-1)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md318,dotrewrite-d318-2)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-3)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md318,dotrewrite-d318-4)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-5)
#endif
#break
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p4.p5 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-2)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md318,dotrewrite-d318-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md318,dotrewrite-d318-5)
#endif
#break
#case 28
* path: (2, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p6.p + p5.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p - p8.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p5} = + p1.p - p4.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id p2.p5 = i12 - i13;
	if (count(Md318,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md318,dotrewrite-d318-2)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md318,dotrewrite-d318-3)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md318,dotrewrite-d318-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-6)
	#call replace(p2.p9,`Q2'/2-i11-i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md318,dotrewrite-d318-7)
	#call replace(p2.p8,i10-i11-i3/2+i4/2+i7/2-i9/2,i,i10,i11,i3,i4,i7,i9,Md318,dotrewrite-d318-8)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p3.p - p8.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p - p8.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	if (count(Md318,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-1)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md318,dotrewrite-d318-2)
	#call replace(p5.p8,i14-i5/2+i6/2-i7/2,i,i14,i5,i6,i7,Md318,dotrewrite-d318-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md318,dotrewrite-d318-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md318,dotrewrite-d318-5)
	#call replace(p5.p9,i13-i5/2+i6/2-i7/2,i,i13,i5,i6,i7,Md318,dotrewrite-d318-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 2, 1, 3)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md318,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md318-5;
	if (count(Md318,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md318-4;
	if (count(Md318,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p - p5.p;
	.sort:momrewrite-Md318-3;
	if (count(Md318,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md318-2;
	if (count(Md318,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md318-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd318()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md318,dotrewrite-d318-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md318,dotrewrite-d318-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md318,dotrewrite-d318-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md318,dotrewrite-d318-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md318,dotrewrite-d318-4)
#endif
#break
#endswitch
#break
*--#] d318 : 
*--#[ d312 :
#case Md312
#procedure SimpleDotd312()
if (count(Md312,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p5^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p5.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + Q.p - p2.p - p9.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p2.p5 = i12 - i13;
	if (count(Md312,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md312,dotrewrite-d312-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md312,dotrewrite-d312-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md312,dotrewrite-d312-5)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md312,dotrewrite-d312-6)
	#call replace(p2.p9,`Q2'/2-i11-i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md312,dotrewrite-d312-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p2.p5 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md312,dotrewrite-d312-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-2)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-3)
	#call replace(p2.p3,-i1/2+i10-i3/2+i4/2,i,i1,i10,i3,i4,Md312,dotrewrite-d312-4)
	#call replace(p2.p7,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md312,dotrewrite-d312-5)
#endif
#break
#case 48
* path: (4, 8)
#case 47
* path: (4, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p - p5.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id Q.p8 = i10 - i11;
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md312,dotrewrite-d312-1)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md312,dotrewrite-d312-5)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md312,dotrewrite-d312-6)
#endif
#break
#case Q4
* path: (0, 9, 4)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p5.p + p6.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p8.p + p7.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p5.p9 = i13 - i14;
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md312,dotrewrite-d312-1)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md312,dotrewrite-d312-5)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md312,dotrewrite-d312-6)
#endif
#break
#case 39
* path: (3, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p4.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + p3.p + p4.p - p9.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p5.p9 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-2)
	#call replace(p4.p9,i4/2-i8/2+i9/2,i,i4,i8,i9,Md312,dotrewrite-d312-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-5)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md312,dotrewrite-d312-6)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md312,dotrewrite-d312-7)
#endif
#break
#case Q9
* path: (0, 9)
#case 59
* path: (5, 7, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p8.p + p9.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p5.p9 = i13 - i14;
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-2)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-3)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md312,dotrewrite-d312-4)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md312,dotrewrite-d312-5)
#endif
#break
#case Q8
* path: (0, 1, 4, 8)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + p1.p - p4.p - p8.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md312,dotrewrite-d312-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-2)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md312,dotrewrite-d312-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-5)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md312,dotrewrite-d312-6)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md312,dotrewrite-d312-7)
#endif
#break
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p7.p + p9.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p8.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p - p5.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id Q.p8 = i10 - i11;
	if (count(Md312,1)) id p5.p9 = i13 - i14;
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-2)
	#call replace(p7.p9,i1/2-i7/2-i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-3)
	#call replace(p8.p9,-i4/2+i8/2+i9/2,i,i4,i8,i9,Md312,dotrewrite-d312-4)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md312,dotrewrite-d312-5)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md312,dotrewrite-d312-6)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + p3.p - p8.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p8.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id Q.p8 = i10 - i11;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-2)
	#call replace(p3.p8,i3/2-i7/2+i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-3)
	#call replace(p4.p8,-i4/2-i8/2+i9/2,i,i4,i8,i9,Md312,dotrewrite-d312-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-5)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-6)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md312,dotrewrite-d312-7)
#endif
#break
#case Q8
* path: (0, 7, 8)
#case 58
* path: (5, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p - p5.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md312,dotrewrite-d312-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-2)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-3)
	#call replace(p1.p8,i3/2-i4/2-i7/2+i9/2,i,i3,i4,i7,i9,Md312,dotrewrite-d312-4)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md312,dotrewrite-d312-5)
#endif
#break
#case 28
* path: (2, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p7.p + p8.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p - p5.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p2.p5 = i12 - i13;
	if (count(Md312,1)) id Q.p8 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md312,dotrewrite-d312-2)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-3)
	#call replace(p2.p7,-i1/2+i11-i7/2+i9/2,i,i1,i11,i7,i9,Md312,dotrewrite-d312-4)
	#call replace(p5.p8,-i14+i3/2+i5/2-i6/2,i,i14,i3,i5,i6,Md312,dotrewrite-d312-5)
	#call replace(p2.p8,i10-i11-i3/2+i4/2+i7/2-i9/2,i,i10,i11,i3,i4,i7,i9,Md312,dotrewrite-d312-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p + p9.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p5} = + p1.p - p9.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	if (count(Md312,1)) id p5.p9 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md312,dotrewrite-d312-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-3)
	#call replace(p1.p9,i1/2-i7/2+i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-4)
	#call replace(Q.p9,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md312,dotrewrite-d312-5)
	#call replace(p3.p9,i1/2-i4/2-i7/2+i8/2,i,i1,i4,i7,i8,Md312,dotrewrite-d312-6)
#endif
#break
#case 34
* path: (3, 4)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p4.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + p3.p + p4.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-1)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md312,dotrewrite-d312-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p - p7.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md312,dotrewrite-d312-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-1)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md312,dotrewrite-d312-3)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md312,dotrewrite-d312-4)
	#call replace(p4.p7,i1/2-i3/2+i8/2-i9/2,i,i1,i3,i8,i9,Md312,dotrewrite-d312-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q1
* path: (0, 2, 1)
#case Q3
* path: (0, 2, 1, 3)
#case Q7
* path: (0, 7)
#case Q5
* path: (0, 7, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#case 55
* path: (5,)
#case 56
* path: (5, 3, 6)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md312,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md312-5;
	if (count(Md312,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md312-4;
	if (count(Md312,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md312-3;
	if (count(Md312,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p7.p;
	.sort:momrewrite-Md312-2;
	if (count(Md312,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p7.p;
	.sort:momrewrite-Md312-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd312()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md312,dotrewrite-d312-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md312,dotrewrite-d312-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md312,dotrewrite-d312-2)
	#call replace(p1.p7,i1/2+i7/2-i9/2,i,i1,i7,i9,Md312,dotrewrite-d312-3)
	#call replace(p3.p7,i3/2+i7/2-i8/2,i,i3,i7,i8,Md312,dotrewrite-d312-4)
#endif
#break
#endswitch
#break
*--#] d312 : 
*--#[ d277 :
#case Md277
#procedure SimpleDotd277()
if (count(Md277,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p3^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 24
* path: (2, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id p2.p3 = -i11 + i9;
	if (count(Md277,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md277,dotrewrite-d277-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md277,dotrewrite-d277-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md277,dotrewrite-d277-4)
	#call replace(p2.p6,-i1/2+i10-i6/2+i8/2,i,i1,i10,i6,i8,Md277,dotrewrite-d277-5)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p6.p + p8.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id p4.p8 = i13 - i14;
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md277,dotrewrite-d277-1)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md277,dotrewrite-d277-2)
	#call replace(p6.p8,i1/2-i6/2-i8/2,i,i1,i6,i8,Md277,dotrewrite-d277-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md277,dotrewrite-d277-4)
	#call replace(p3.p8,i11-i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md277,dotrewrite-d277-5)
#endif
#break
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p4} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id p2.p3 = -i11 + i9;
	if (count(Md277,1)) id p2.p4 = i12 - i13;
	if (count(Md277,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md277,dotrewrite-d277-3)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md277,dotrewrite-d277-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md277,dotrewrite-d277-5)
	#call replace(p3.p8,i11-i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md277,dotrewrite-d277-6)
	#call replace(p2.p8,`Q2'/2-i10-i2/2+i6/2-i8/2,i,i10,i2,i6,i8,Md277,dotrewrite-d277-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q3
* path: (0, 8, 3)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p4} = + p1.p - p8.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md277,dotrewrite-d277-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md277,dotrewrite-d277-2)
	#call replace(p1.p8,i1/2-i6/2+i8/2,i,i1,i6,i8,Md277,dotrewrite-d277-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md277,dotrewrite-d277-4)
	#call replace(p3.p8,i11-i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md277,dotrewrite-d277-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 37
* path: (3, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p4} = + p3.p + p7.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id Q.p7 = i10 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md277,dotrewrite-d277-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md277,dotrewrite-d277-2)
	#call replace(p3.p7,-i3/2+i6/2-i7/2,i,i3,i6,i7,Md277,dotrewrite-d277-3)
	#call replace(p1.p7,i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md277,dotrewrite-d277-4)
	#call replace(p4.p7,i14-i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md277,dotrewrite-d277-5)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p6.p - p7.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p6.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p - p7.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id Q.p7 = i10 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md277,dotrewrite-d277-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md277,dotrewrite-d277-2)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md277,dotrewrite-d277-3)
	#call replace(p1.p7,i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md277,dotrewrite-d277-4)
	#call replace(p4.p7,i14-i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md277,dotrewrite-d277-5)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p6.p + p8.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p6.p - p7.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p - p7.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	if (count(Md277,1)) id Q.p7 = i10 - i9;
	if (count(Md277,1)) id p4.p8 = i13 - i14;
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md277,dotrewrite-d277-2)
	#call replace(p6.p8,i1/2-i6/2-i8/2,i,i1,i6,i8,Md277,dotrewrite-d277-3)
	#call replace(p4.p7,i14-i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md277,dotrewrite-d277-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2,i,i1,i10,i2,Md277,dotrewrite-d277-5)
	#call replace(p7.p8,i1/2-i11+i3/2-i7/2-i8/2,i,i1,i11,i3,i7,i8,Md277,dotrewrite-d277-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md277,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md277-4;
	if (count(Md277,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md277-3;
	if (count(Md277,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md277-2;
	if (count(Md277,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p6.p;
	.sort:momrewrite-Md277-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd277()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md277,dotrewrite-d277-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md277,dotrewrite-d277-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md277,dotrewrite-d277-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md277,dotrewrite-d277-3)
#endif
#break
#endswitch
#break
*--#] d277 : 
*--#[ d274 :
#case Md274
#procedure SimpleDotd274()
if (count(Md274,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p4^n? = i9^n;
	id Q.p5^n? = i10^n;
	id p1.p4^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 24
* path: (2, 6, 4)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p6.p - p4.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	if (count(Md274,1)) id p2.p3 = i12 - i13;
	if (count(Md274,1)) id p2.p4 = -i11 + i9;
	if (count(Md274,1)) id Q.p6 = i10 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md274,dotrewrite-d274-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md274,dotrewrite-d274-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md274,dotrewrite-d274-5)
	#call replace(p2.p6,-i1/2+i10-i6/2+i8/2+i9,i,i1,i10,i6,i8,i9,Md274,dotrewrite-d274-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q1
* path: (0, 2, 1)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p6.p - p4.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p6.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	if (count(Md274,1)) id Q.p6 = i10 + i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md274,dotrewrite-d274-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md274,dotrewrite-d274-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md274,dotrewrite-d274-3)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md274,dotrewrite-d274-4)
#endif
#break
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p6.p + p8.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p6.p - p4.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	if (count(Md274,1)) id Q.p6 = i10 + i9;
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md274,dotrewrite-d274-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md274,dotrewrite-d274-2)
	#call replace(p6.p8,i1/2-i6/2-i8/2,i,i1,i6,i8,Md274,dotrewrite-d274-3)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md274,dotrewrite-d274-4)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md274,dotrewrite-d274-5)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md274,dotrewrite-d274-6)
#endif
#break
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p4.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p7.p - p4.p + p3.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	if (count(Md274,1)) id p2.p3 = i12 - i13;
	if (count(Md274,1)) id p2.p4 = -i11 + i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md274,dotrewrite-d274-2)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md274,dotrewrite-d274-3)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md274,dotrewrite-d274-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md274,dotrewrite-d274-5)
	#call replace(p2.p8,`Q2'/2-i10-i2/2+i6/2-i8/2-i9,i,i10,i2,i6,i8,i9,Md274,dotrewrite-d274-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q8
* path: (0, 8)
#case Q3
* path: (0, 8, 3)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p8.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p1.p - p4.p - p8.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md274,dotrewrite-d274-0)
	#call replace(p1.p8,i1/2-i6/2+i8/2,i,i1,i6,i8,Md274,dotrewrite-d274-1)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md274,dotrewrite-d274-2)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md274,dotrewrite-d274-3)
	#call replace(Q.p8,`Q2'/2+i1/2-i10-i2/2-i9,i,i1,i10,i2,i9,Md274,dotrewrite-d274-4)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p7.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p5.p?!{p5,[P+p5],[P-p5],Q} = + p3.p + p7.p - p4.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md274,dotrewrite-d274-0)
	#call replace(Q.p7,i10-i12+i9,i,i10,i12,i9,Md274,dotrewrite-d274-1)
	#call replace(p3.p7,-i3/2+i6/2-i7/2,i,i3,i6,i7,Md274,dotrewrite-d274-2)
	#call replace(p1.p7,i1/2-i13+i6/2-i8/2,i,i1,i13,i6,i8,Md274,dotrewrite-d274-3)
	#call replace(p4.p7,-i14+i4/2-i5/2+i6/2,i,i14,i4,i5,i6,Md274,dotrewrite-d274-4)
#endif
#break
#default
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md274,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md274-4;
	if (count(Md274,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md274-3;
	if (count(Md274,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p - p3.p;
	.sort:momrewrite-Md274-2;
	if (count(Md274,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p4.p - p5.p;
	.sort:momrewrite-Md274-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd274()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md274,dotrewrite-d274-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md274,dotrewrite-d274-1)
	#call replace(p1.p5,i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md274,dotrewrite-d274-2)
	#call replace(p3.p5,-i14+i3/2+i6/2-i7/2,i,i14,i3,i6,i7,Md274,dotrewrite-d274-3)
#endif
#break
#endswitch
#break
*--#] d274 : 
*--#[ d340 :
#case Md340
#procedure SimpleDotd340()
if (count(Md340,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p1.p4^n? = i10^n;
	id Q.p1^n? = i11^n;
	id Q.p2^n? = i12^n;
	id Q.p4^n? = i13^n;
	id Q.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 16
* path: (1, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p7.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p5 = i12 - i13;
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-1)
	#call replace(Q.p9,`Q2'-i13+i14,i,i13,i14,Md340,dotrewrite-d340-2)
	#call replace(p1.p5,i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md340,dotrewrite-d340-3)
	#call replace(p6.p9,-`Q2'/2+i13-i4/2+i6/2+i9/2,i,i13,i4,i6,i9,Md340,dotrewrite-d340-4)
	#call replace(p5.p9,i12-i13-i2/2+i4/2-i6/2+i7/2,i,i12,i13,i2,i4,i6,i7,Md340,dotrewrite-d340-5)
	#call replace(p1.p6,`Q2'/2-i1/2+i10-i13+i14+i8/2-i9/2,i,i1,i10,i13,i14,i8,i9,Md340,dotrewrite-d340-6)
	#call replace(p1.p9,`Q2'/2-i1/2+i11-i13+i14+i8/2-i9/2,i,i1,i11,i13,i14,i8,i9,Md340,dotrewrite-d340-7)
#endif
#break
#case Q9
* path: (0, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p6.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p8.p - p9.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	#call replace(Q.p7,i12-i13+i14,i,i12,i13,i14,Md340,dotrewrite-d340-0)
	#call replace(p6.p7,-i5/2+i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-1)
	#call replace(Q.p8,-i11+i13-i14,i,i11,i13,i14,Md340,dotrewrite-d340-2)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md340,dotrewrite-d340-3)
	#call replace(Q.p9,`Q2'-i13+i14,i,i13,i14,Md340,dotrewrite-d340-4)
	#call replace(p6.p8,i1/2-i10+i4/2-i6/2-i8/2,i,i1,i10,i4,i6,i8,Md340,dotrewrite-d340-5)
	#call replace(p6.p9,-`Q2'/2+i13-i4/2+i6/2+i9/2,i,i13,i4,i6,i9,Md340,dotrewrite-d340-6)
	#call replace(p7.p9,-`Q2'/2+i12-i2/2+i7/2+i9/2,i,i12,i2,i7,i9,Md340,dotrewrite-d340-7)
	#call replace(p8.p9,`Q2'/2+i1/2-i11-i8/2-i9/2,i,i1,i11,i8,i9,Md340,dotrewrite-d340-8)
#endif
#break
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 27
* path: (2, 3, 7)
#case 33
* path: (3,)
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p2.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p3 = i11 - i12;
	if (count(Md340,1)) id Q.p5 = i12 - i13;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-2)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md340,dotrewrite-d340-3)
	#call replace(Q.p7,i12-i13+i14,i,i12,i13,i14,Md340,dotrewrite-d340-4)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md340,dotrewrite-d340-5)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-6)
	#call replace(p3.p5,i1/2-i10-i3/2+i4/2-i5/2,i,i1,i10,i3,i4,i5,Md340,dotrewrite-d340-7)
	#call replace(p2.p7,`Q2'/2-i13+i14+i2/2+i7/2-i9/2,i,i13,i14,i2,i7,i9,Md340,dotrewrite-d340-8)
#endif
#break
#case 17
* path: (1, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p5 = i12 - i13;
	#call replace(Q.p7,i12-i13+i14,i,i12,i13,i14,Md340,dotrewrite-d340-1)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-2)
	#call replace(Q.p8,-i11+i13-i14,i,i11,i13,i14,Md340,dotrewrite-d340-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md340,dotrewrite-d340-4)
	#call replace(p1.p5,i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md340,dotrewrite-d340-5)
	#call replace(p1.p8,-`Q2'/2-i1/2+i13-i14-i8/2+i9/2,i,i1,i13,i14,i8,i9,Md340,dotrewrite-d340-6)
	#call replace(p5.p8,-i1/2+i10+i3/2-i4/2+i6/2-i7/2,i,i1,i10,i3,i4,i6,i7,Md340,dotrewrite-d340-7)
	#call replace(p1.p7,`Q2'/2-i13+i14+i2/2-i3/2+i8/2-i9/2,i,i13,i14,i2,i3,i8,i9,Md340,dotrewrite-d340-8)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p3 = i11 - i12;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-1)
	#call replace(Q.p8,-i11+i13-i14,i,i11,i13,i14,Md340,dotrewrite-d340-2)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md340,dotrewrite-d340-3)
	#call replace(p3.p4,i10-i2/2-i4/2+i5/2,i,i10,i2,i4,i5,Md340,dotrewrite-d340-4)
	#call replace(p1.p8,-`Q2'/2-i1/2+i13-i14-i8/2+i9/2,i,i1,i13,i14,i8,i9,Md340,dotrewrite-d340-5)
	#call replace(p4.p8,-`Q2'/2-i10+i13-i14+i4/2-i6/2+i9/2,i,i10,i13,i14,i4,i6,i9,Md340,dotrewrite-d340-6)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q5
* path: (0, 1, 2, 5)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p2.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p5 = i12 - i13;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md340,dotrewrite-d340-2)
	#call replace(Q.p7,i12-i13+i14,i,i12,i13,i14,Md340,dotrewrite-d340-3)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-4)
	#call replace(p1.p5,i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md340,dotrewrite-d340-5)
	#call replace(p2.p7,`Q2'/2-i13+i14+i2/2+i7/2-i9/2,i,i13,i14,i2,i7,i9,Md340,dotrewrite-d340-6)
	#call replace(p1.p7,`Q2'/2-i13+i14+i2/2-i3/2+i8/2-i9/2,i,i13,i14,i2,i3,i8,i9,Md340,dotrewrite-d340-7)
#endif
#break
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p4.p + p5.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p + p6.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p4.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p5 = i12 - i13;
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md340,dotrewrite-d340-1)
	#call replace(p5.p6,-i5/2-i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-2)
	#call replace(p1.p5,i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md340,dotrewrite-d340-3)
	#call replace(p4.p6,`Q2'/2-i13+i14+i4/2+i6/2-i9/2,i,i13,i14,i4,i6,i9,Md340,dotrewrite-d340-4)
	#call replace(p1.p6,`Q2'/2-i1/2+i10-i13+i14+i8/2-i9/2,i,i1,i10,i13,i14,i8,i9,Md340,dotrewrite-d340-5)
#endif
#break
#case 14
* path: (1, 2, 4)
#case 29
* path: (2, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md340,dotrewrite-d340-1)
	#call replace(Q.p9,`Q2'-i13+i14,i,i13,i14,Md340,dotrewrite-d340-2)
	#call replace(p4.p9,`Q2'/2+i14-i4/2+i6/2-i9/2,i,i14,i4,i6,i9,Md340,dotrewrite-d340-3)
	#call replace(p1.p9,`Q2'/2-i1/2+i11-i13+i14+i8/2-i9/2,i,i1,i11,i13,i14,i8,i9,Md340,dotrewrite-d340-4)
	#call replace(p2.p9,`Q2'/2+i12-i13+i14-i2/2+i7/2-i9/2,i,i12,i13,i14,i2,i7,i9,Md340,dotrewrite-d340-5)
#endif
#break
#case Q1
* path: (0, 9, 1)
#case Q3
* path: (0, 9, 1, 3)
#case 19
* path: (1, 9)
#case 39
* path: (3, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = - p5.p + p7.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p3 = i11 - i12;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-1)
	#call replace(Q.p9,`Q2'-i13+i14,i,i13,i14,Md340,dotrewrite-d340-2)
	#call replace(p3.p4,i10-i2/2-i4/2+i5/2,i,i10,i2,i4,i5,Md340,dotrewrite-d340-3)
	#call replace(p4.p9,`Q2'/2+i14-i4/2+i6/2-i9/2,i,i14,i4,i6,i9,Md340,dotrewrite-d340-4)
	#call replace(p3.p9,-i1/2+i11-i12+i2/2-i7/2+i8/2,i,i1,i11,i12,i2,i7,i8,Md340,dotrewrite-d340-5)
	#call replace(p1.p9,`Q2'/2-i1/2+i11-i13+i14+i8/2-i9/2,i,i1,i11,i13,i14,i8,i9,Md340,dotrewrite-d340-6)
#endif
#break
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p4.p?!{p4,[P+p4],[P-p4],Q,p1} = + p2.p - p5.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p1.p + Q.p - p8.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p6.p?!{p6,[P+p6],[P-p6],Q} = + p7.p - p5.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	if (count(Md340,1)) id Q.p3 = i11 - i12;
	if (count(Md340,1)) id Q.p5 = i12 - i13;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-2)
	#call replace(Q.p7,i12-i13+i14,i,i12,i13,i14,Md340,dotrewrite-d340-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md340,dotrewrite-d340-4)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md340,dotrewrite-d340-5)
	#call replace(p1.p5,i1/2-i10+i2/2-i3/2,i,i1,i10,i2,i3,Md340,dotrewrite-d340-6)
	#call replace(p3.p5,i1/2-i10-i3/2+i4/2-i5/2,i,i1,i10,i3,i4,i5,Md340,dotrewrite-d340-7)
	#call replace(p1.p7,`Q2'/2-i13+i14+i2/2-i3/2+i8/2-i9/2,i,i13,i14,i2,i3,i8,i9,Md340,dotrewrite-d340-8)
#endif
#break
#default
#if ( `MOMS' > 0 )
	if (count(Md340,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md340-5;
	if (count(Md340,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p5.p;
	.sort:momrewrite-Md340-4;
	if (count(Md340,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md340-3;
	if (count(Md340,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md340-2;
	if (count(Md340,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p6.p - p4.p;
	.sort:momrewrite-Md340-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd340()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md340,dotrewrite-d340-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md340,dotrewrite-d340-1)
	#call replace(p4.p6,`Q2'/2-i13+i14+i4/2+i6/2-i9/2,i,i13,i14,i4,i6,i9,Md340,dotrewrite-d340-2)
	#call replace(p1.p6,`Q2'/2-i1/2+i10-i13+i14+i8/2-i9/2,i,i1,i10,i13,i14,i8,i9,Md340,dotrewrite-d340-3)
	#call replace(p2.p6,`Q2'/2-i13+i14+i4/2-i5/2+i7/2-i9/2,i,i13,i14,i4,i5,i7,i9,Md340,dotrewrite-d340-4)
#endif
#break
#endswitch
#break
*--#] d340 : 
*--#[ d192 :
#case Md192
#procedure SimpleDotd192()
if (count(Md192,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p3.p4^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 2, 5)
#case 15
* path: (1, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md192,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - Q.p;
	.sort:momrewrite-Md192-5;
	if (count(Md192,1)) id p3.p?!{p3,[P+p3],[P-p3],p4} = + p1.p - p2.p;
	.sort:momrewrite-Md192-4;
	if (count(Md192,1)) id p4.p?!{p4,[P+p4],[P-p4],p3} = + p2.p - p5.p;
	.sort:momrewrite-Md192-3;
	if (count(Md192,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md192-2;
	if (count(Md192,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Md192-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd192()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Md192,dotrewrite-d192-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md192,dotrewrite-d192-1)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md192,dotrewrite-d192-2)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md192,dotrewrite-d192-3)
	#call replace(Q.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md192,dotrewrite-d192-4)
	#call replace(p1.p5,i1/2-i3/2-i4/2+i5/2-i9,i,i1,i3,i4,i5,i9,Md192,dotrewrite-d192-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 17
* path: (1, 3, 7)
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md192,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p + p5.p;
	.sort:momrewrite-Md192-5;
	if (count(Md192,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md192-4;
	if (count(Md192,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p1.p - p3.p;
	.sort:momrewrite-Md192-3;
	if (count(Md192,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - Q.p;
	.sort:momrewrite-Md192-2;
	if (count(Md192,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Md192-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd192()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Md192,dotrewrite-d192-0)
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md192,dotrewrite-d192-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md192,dotrewrite-d192-2)
	#call replace(Q.p3,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md192,dotrewrite-d192-3)
	#call replace(p1.p4,i2/2+i4/2-i5/2+i9,i,i2,i4,i5,i9,Md192,dotrewrite-d192-4)
#endif
#break
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 2, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md192,1)) id p3.p?!{p3,[P+p3],[P-p3],p4} = + p1.p - p2.p;
	.sort:momrewrite-Md192-5;
	if (count(Md192,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md192-4;
	if (count(Md192,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - Q.p;
	.sort:momrewrite-Md192-3;
	if (count(Md192,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md192-2;
	if (count(Md192,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Md192-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd192()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Md192,dotrewrite-d192-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md192,dotrewrite-d192-1)
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md192,dotrewrite-d192-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md192,dotrewrite-d192-3)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md192,dotrewrite-d192-4)
	#call replace(p1.p4,i2/2+i4/2-i5/2+i9,i,i2,i4,i5,i9,Md192,dotrewrite-d192-5)
#endif
#break
#case 35
* path: (3, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md192,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - Q.p;
	.sort:momrewrite-Md192-5;
	if (count(Md192,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p;
	.sort:momrewrite-Md192-4;
	if (count(Md192,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p;
	.sort:momrewrite-Md192-3;
	if (count(Md192,1)) id p4.p?!{p4,[P+p4],[P-p4],p3} = + p2.p - p5.p;
	.sort:momrewrite-Md192-2;
	if (count(Md192,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md192-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd192()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md192,dotrewrite-d192-0)
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md192,dotrewrite-d192-1)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md192,dotrewrite-d192-2)
	#call replace(Q.p3,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md192,dotrewrite-d192-3)
	#call replace(Q.p5,i2/2-i4/2+i6/2-i7/2,i,i2,i4,i6,i7,Md192,dotrewrite-d192-4)
	#call replace(p3.p5,i1/2-i2/2-i3/2-i9,i,i1,i2,i3,i9,Md192,dotrewrite-d192-5)
#endif
#break
#case 17
* path: (1, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md192,1)) id p3.p?!{p3,[P+p3],[P-p3],p4} = - p2.p + p1.p;
	.sort:momrewrite-Md192-5;
	if (count(Md192,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p6.p + p7.p;
	.sort:momrewrite-Md192-4;
	if (count(Md192,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p + p7.p;
	.sort:momrewrite-Md192-3;
	if (count(Md192,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - Q.p;
	.sort:momrewrite-Md192-2;
	if (count(Md192,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p;
	.sort:momrewrite-Md192-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd192()
	#call replace(Q.p1,`Q2'/2+i1/2-i8/2,i,i1,i8,Md192,dotrewrite-d192-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md192,dotrewrite-d192-1)
	#call replace(Q.p7,-`Q2'/2+i2/2-i7/2,i,i2,i7,Md192,dotrewrite-d192-2)
	#call replace(p1.p4,i2/2+i4/2-i5/2+i9,i,i2,i4,i5,i9,Md192,dotrewrite-d192-3)
	#call replace(p1.p7,-`Q2'/2+i2/2-i3/2+i8/2,i,i2,i3,i8,Md192,dotrewrite-d192-4)
	#call replace(p4.p7,-`Q2'/2+i2/2-i5/2+i6/2,i,i2,i5,i6,Md192,dotrewrite-d192-5)
#endif
#break
#default
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 27
* path: (2, 3, 7)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md192,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p1.p + Q.p;
	.sort:momrewrite-Md192-5;
	if (count(Md192,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p2.p + p3.p;
	.sort:momrewrite-Md192-4;
	if (count(Md192,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md192-3;
	if (count(Md192,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - Q.p;
	.sort:momrewrite-Md192-2;
	if (count(Md192,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md192-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd192()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md192,dotrewrite-d192-0)
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md192,dotrewrite-d192-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i6/2,i,i4,i6,Md192,dotrewrite-d192-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md192,dotrewrite-d192-3)
	#call replace(Q.p3,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md192,dotrewrite-d192-4)
#endif
#break
#endswitch
#break
*--#] d192 : 
*--#[ d148 :
#case Md148
#procedure SimpleDotd148()
if (count(Md148,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p + p6.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md148,dotrewrite-d148-0)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Md148,dotrewrite-d148-1)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md148,dotrewrite-d148-2)
	#call replace(p3.p6,-`Q2'/2+i1/2-i4/2+i5/2,i,i1,i4,i5,Md148,dotrewrite-d148-3)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	if (count(Md148,1)) id p2.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i3/2-i5/2,i,i3,i5,Md148,dotrewrite-d148-1)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md148,dotrewrite-d148-2)
	#call replace(Q.p4,i1/2-i3/2+i5/2-i6/2,i,i1,i3,i5,i6,Md148,dotrewrite-d148-3)
	#call replace(p2.p4,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md148,dotrewrite-d148-4)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p + p4.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md148,dotrewrite-d148-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md148,dotrewrite-d148-1)
	#call replace(Q.p4,i1/2-i3/2+i5/2-i6/2,i,i1,i3,i5,i6,Md148,dotrewrite-d148-2)
	#call replace(p2.p4,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md148,dotrewrite-d148-3)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + p1.p - p4.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md148,dotrewrite-d148-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md148,dotrewrite-d148-1)
	#call replace(p1.p2,-i2/2-i6/2+i7/2+i8,i,i2,i6,i7,i8,Md148,dotrewrite-d148-2)
	#call replace(Q.p4,i1/2-i3/2+i5/2-i6/2,i,i1,i3,i5,i6,Md148,dotrewrite-d148-3)
	#call replace(p2.p4,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md148,dotrewrite-d148-4)
#endif
#break
#case 27
* path: (2, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p + p6.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p7.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md148,dotrewrite-d148-0)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md148,dotrewrite-d148-1)
	#call replace(Q.p7,`Q2'/2-i1/2+i6/2-i8,i,i1,i6,i8,Md148,dotrewrite-d148-2)
	#call replace(p3.p7,`Q2'/2-i1/2+i4/2-i5/2-i9,i,i1,i4,i5,i9,Md148,dotrewrite-d148-3)
#endif
#break
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Md148,dotrewrite-d148-0)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md148,dotrewrite-d148-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md148,dotrewrite-d148-2)
	#call replace(Q.p4,i1/2-i3/2+i5/2-i6/2,i,i1,i3,i5,i6,Md148,dotrewrite-d148-3)
	#call replace(p2.p4,-i2/2-i6/2+i7/2+i8-i9,i,i2,i6,i7,i8,i9,Md148,dotrewrite-d148-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 6)
#case Q5
* path: (0, 5)
#case Q6
* path: (0, 5, 6)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 6)
#case 25
* path: (2, 6, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p6.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p3.p?!{p3,[P+p3],[P-p3],p2} = + Q.p + p5.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p5.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	if (count(Md148,1)) id p2.p5 = -i8 + i9;
	#call replace(Q.p5,-`Q2'/2+i3/2-i5/2,i,i3,i5,Md148,dotrewrite-d148-1)
	#call replace(Q.p6,-`Q2'/2+i1/2-i6/2,i,i1,i6,Md148,dotrewrite-d148-2)
	#call replace(p2.p6,-i2/2-i6/2+i7/2,i,i2,i6,i7,Md148,dotrewrite-d148-3)
	#call replace(p5.p6,-i4/2+i5/2+i6/2,i,i4,i5,i6,Md148,dotrewrite-d148-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q3
* path: (0, 3)
#case Q1
* path: (0, 3, 1)
#case Q2
* path: (0, 3, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md148,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p2.p - p6.p;
	.sort:momrewrite-Md148-4;
	if (count(Md148,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md148-3;
	if (count(Md148,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md148-2;
	if (count(Md148,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - Q.p;
	.sort:momrewrite-Md148-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd148()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md148,dotrewrite-d148-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md148,dotrewrite-d148-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md148,dotrewrite-d148-2)
	#call replace(p1.p2,-i2/2-i6/2+i7/2+i8,i,i2,i6,i7,i8,Md148,dotrewrite-d148-3)
#endif
#break
#endswitch
#break
*--#] d148 : 
*--#[ d149 :
#case Md149
#procedure SimpleDotd149()
if (count(Md149,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 2, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md149,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md149-4;
	if (count(Md149,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + p2.p - p4.p;
	.sort:momrewrite-Md149-3;
	if (count(Md149,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md149-2;
	if (count(Md149,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md149-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd149()
	if (count(Md149,1)) id p1.p4 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md149,dotrewrite-d149-1)
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md149,dotrewrite-d149-2)
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md149,dotrewrite-d149-3)
	#call replace(Q.p4,i2/2-i3/2+i5/2-i6/2,i,i2,i3,i5,i6,Md149,dotrewrite-d149-4)
#endif
#break
#case 25
* path: (2, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md149,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md149-4;
	if (count(Md149,1)) id p3.p?!{p3,[P+p3],[P-p3],p1} = + Q.p + p5.p;
	.sort:momrewrite-Md149-3;
	if (count(Md149,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md149-2;
	if (count(Md149,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md149-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd149()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md149,dotrewrite-d149-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md149,dotrewrite-d149-1)
	#call replace(Q.p5,-`Q2'/2+i3/2-i5/2,i,i3,i5,Md149,dotrewrite-d149-2)
	#call replace(p1.p5,-`Q2'/2-i1/2+i7/2+i9,i,i1,i7,i9,Md149,dotrewrite-d149-3)
	#call replace(p2.p5,-`Q2'/2+i3/2-i4/2+i6/2,i,i3,i4,i6,Md149,dotrewrite-d149-4)
#endif
#break
#case Q4
* path: (0, 3, 4)
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md149,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p4.p - p5.p;
	.sort:momrewrite-Md149-4;
	if (count(Md149,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + p3.p + p4.p;
	.sort:momrewrite-Md149-3;
	if (count(Md149,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md149-2;
	if (count(Md149,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md149-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd149()
	if (count(Md149,1)) id p1.p4 = i8 - i9;
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md149,dotrewrite-d149-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md149,dotrewrite-d149-2)
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md149,dotrewrite-d149-3)
	#call replace(Q.p4,i2/2-i3/2+i5/2-i6/2,i,i2,i3,i5,i6,Md149,dotrewrite-d149-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q3
* path: (0, 3)
#case Q2
* path: (0, 3, 2)
#case Q1
* path: (0, 3, 2, 1)
#case 11
* path: (1,)
#case 17
* path: (1, 0, 7)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 26
* path: (2, 6)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md149,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md149-4;
	if (count(Md149,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - Q.p;
	.sort:momrewrite-Md149-3;
	if (count(Md149,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p;
	.sort:momrewrite-Md149-2;
	if (count(Md149,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p;
	.sort:momrewrite-Md149-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd149()
	#call replace(Q.p1,`Q2'/2+i1/2-i7/2,i,i1,i7,Md149,dotrewrite-d149-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md149,dotrewrite-d149-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i5/2,i,i3,i5,Md149,dotrewrite-d149-2)
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md149,dotrewrite-d149-3)
#endif
#break
#endswitch
#break
*--#] d149 : 
*--#[ d55 :
#case Md55
#procedure SimpleDotd55()
if (count(Md55,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md55,1)) id p2.p?!{p2,[P+p2],[P-p2],p1} = + Q.p - p5.p;
	.sort:momrewrite-Md55-3;
	if (count(Md55,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md55-2;
	if (count(Md55,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md55-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd55()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md55,dotrewrite-d55-0)
	#call replace(Q.p5,`Q2'/2-i2/2+i5/2,i,i2,i5,Md55,dotrewrite-d55-1)
	#call replace(p3.p5,-i3/2+i4/2-i5/2,i,i3,i4,i5,Md55,dotrewrite-d55-2)
	#call replace(p1.p5,`Q2'/2+i1/2-i6/2-i8,i,i1,i6,i8,Md55,dotrewrite-d55-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q2
* path: (0, 2)
#case Q1
* path: (0, 2, 1)
#case Q5
* path: (0, 2, 5)
#case Q3
* path: (0, 3)
#case 11
* path: (1,)
#case 16
* path: (1, 0, 6)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md55,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p - p5.p;
	.sort:momrewrite-Md55-3;
	if (count(Md55,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md55-2;
	if (count(Md55,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md55-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd55()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md55,dotrewrite-d55-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md55,dotrewrite-d55-1)
	#call replace(p2.p3,i3/2-i4/2+i5/2+i7,i,i3,i4,i5,i7,Md55,dotrewrite-d55-2)
#endif
#break
#endswitch
#break
*--#] d55 : 
*--#[ d54 :
#case Md54
#procedure SimpleDotd54()
if (count(Md54,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p2.p3^n? = i7^n;
	id p1.p2^n? = i8^n;
	id p1.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case 11
* path: (1,)
#case 16
* path: (1, 0, 6)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 2, 6)
#case 22
* path: (2,)
#case 25
* path: (2, 1, 5)
#if ( `MOMS' > 0 )
	if (count(Md54,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p3.p;
	.sort:momrewrite-Md54-3;
	if (count(Md54,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p2.p;
	.sort:momrewrite-Md54-2;
	if (count(Md54,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p;
	.sort:momrewrite-Md54-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd54()
	#call replace(Q.p1,`Q2'/2+i1/2-i6/2,i,i1,i6,Md54,dotrewrite-d54-0)
	#call replace(Q.p2,`Q2'/2+i2/2-i5/2,i,i2,i5,Md54,dotrewrite-d54-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i4/2,i,i3,i4,Md54,dotrewrite-d54-2)
#endif
#break
#endswitch
#break
*--#] d54 : 
*--#[ d106 :
#case Md106
#procedure SimpleDotd106()
if (count(Md106,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md106,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md106-3;
	if (count(Md106,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p6.p;
	.sort:momrewrite-Md106-2;
	if (count(Md106,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md106-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd106()
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md106,dotrewrite-d106-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md106,dotrewrite-d106-1)
	#call replace(p3.p6,-i3/2+i4/2-i5/2-i9,i,i3,i4,i5,i9,Md106,dotrewrite-d106-2)
#endif
#break
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md106,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md106-3;
	if (count(Md106,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md106-2;
	if (count(Md106,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md106-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd106()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md106,dotrewrite-d106-0)
	#call replace(p1.p2,-i2/2-i5/2+i6/2+i8,i,i2,i5,i6,i8,Md106,dotrewrite-d106-1)
	#call replace(p1.p3,i3/2-i4/2+i5/2+i7,i,i3,i4,i5,i7,Md106,dotrewrite-d106-2)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md106,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md106-3;
	if (count(Md106,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md106-2;
	if (count(Md106,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p5.p;
	.sort:momrewrite-Md106-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd106()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md106,dotrewrite-d106-0)
	#call replace(p2.p5,-i2/2-i5/2+i6/2,i,i2,i5,i6,Md106,dotrewrite-d106-1)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md106,dotrewrite-d106-2)
#endif
#break
#endswitch
#break
*--#] d106 : 
*--#[ d107 :
#case Md107
#procedure SimpleDotd107()
if (count(Md107,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id Q.p3^n? = i7^n;
	id Q.p2^n? = i8^n;
	id p2.p3^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 26
* path: (2, 0, 6)
#if ( `MOMS' > 0 )
	if (count(Md107,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md107-3;
	if (count(Md107,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p - p6.p;
	.sort:momrewrite-Md107-2;
	if (count(Md107,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md107-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd107()
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md107,dotrewrite-d107-0)
	#call replace(Q.p6,`Q2'/2-i1/2+i5/2-i8,i,i1,i5,i8,Md107,dotrewrite-d107-1)
	#call replace(p3.p6,-i1/2-i3/2+i4/2+i7-i9,i,i1,i3,i4,i7,i9,Md107,dotrewrite-d107-2)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md107,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md107-3;
	if (count(Md107,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p + p5.p;
	.sort:momrewrite-Md107-2;
	if (count(Md107,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p2.p - p5.p;
	.sort:momrewrite-Md107-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd107()
	#call replace(Q.p5,-`Q2'/2+i1/2-i5/2,i,i1,i5,Md107,dotrewrite-d107-0)
	#call replace(p2.p5,-i2/2-i5/2+i6/2,i,i2,i5,i6,Md107,dotrewrite-d107-1)
	#call replace(p3.p5,i1/2+i3/2-i4/2-i7,i,i1,i3,i4,i7,Md107,dotrewrite-d107-2)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q2
* path: (0, 2)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#if ( `MOMS' > 0 )
	if (count(Md107,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md107-3;
	if (count(Md107,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - Q.p;
	.sort:momrewrite-Md107-2;
	if (count(Md107,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md107-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd107()
	#call replace(Q.p1,`Q2'/2+i1/2-i5/2,i,i1,i5,Md107,dotrewrite-d107-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md107,dotrewrite-d107-1)
	#call replace(p1.p2,-i2/2-i5/2+i6/2+i8,i,i2,i5,i6,i8,Md107,dotrewrite-d107-2)
#endif
#break
#endswitch
#break
*--#] d107 : 
*--#[ d346 :
#case Md346
#procedure SimpleDotd346()
if (count(Md346,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 9, 8)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p + p1.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + Q.p - p8.p - p9.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id p4.p8 = -i13 + i14;
	if (count(Md346,1)) id p4.p9 = i12 - i14;
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md346,dotrewrite-d346-4)
	#call replace(p2.p8,-i1/2+i3/2+i6/2-i7/2,i,i1,i3,i6,i7,Md346,dotrewrite-d346-5)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md346,dotrewrite-d346-6)
	#call replace(p8.p9,`Q2'/2+i1/2-i10-i8/2-i9/2,i,i1,i10,i8,i9,Md346,dotrewrite-d346-7)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md346,dotrewrite-d346-2)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-3)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-4)
	#call replace(p3.p6,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md346,dotrewrite-d346-5)
#endif
#break
#case 36
* path: (3, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p3.p + p6.p + p7.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md346,dotrewrite-d346-1)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md346,dotrewrite-d346-2)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-3)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-4)
	#call replace(p3.p6,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md346,dotrewrite-d346-5)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-6)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-7)
#endif
#break
#case Q7
* path: (0, 8, 7)
#case 48
* path: (4, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p1.p + p8.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id p4.p8 = -i13 + i14;
	#call replace(p1.p8,-i1/2+i6/2-i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-1)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md346,dotrewrite-d346-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(p1.p7,i2/2-i3/2-i6/2+i8/2,i,i2,i3,i6,i8,Md346,dotrewrite-d346-4)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-5)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md346,dotrewrite-d346-6)
#endif
#break
#case Q3
* path: (0, 9, 1, 3)
#case 39
* path: (3, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	if (count(Md346,1)) id p4.p9 = i12 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-4)
	#call replace(p1.p9,-i1/2+i10-i6/2+i8/2,i,i1,i10,i6,i8,Md346,dotrewrite-d346-5)
	#call replace(p3.p9,-i1/2+i10-i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Md346,dotrewrite-d346-6)
#endif
#break
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p2.p - p3.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-4)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-5)
	#call replace(p3.p6,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md346,dotrewrite-d346-6)
#endif
#break
#case Q8
* path: (0, 8)
#case 18
* path: (1, 8)
#case 28
* path: (2, 1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p1.p + p8.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id p4.p8 = -i13 + i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-2)
	#call replace(p1.p8,-i1/2+i6/2-i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-3)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md346,dotrewrite-d346-4)
	#call replace(p2.p8,-i1/2+i3/2+i6/2-i7/2,i,i1,i3,i6,i7,Md346,dotrewrite-d346-5)
#endif
#break
#case Q7
* path: (0, 6, 7)
#case 67
* path: (6, 7)
#case 79
* path: (7, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p8.p - p7.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md346,dotrewrite-d346-0)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(p1.p7,i2/2-i3/2-i6/2+i8/2,i,i2,i3,i6,i8,Md346,dotrewrite-d346-4)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-5)
#endif
#break
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = - p9.p + Q.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-1)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md346,dotrewrite-d346-2)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-3)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-4)
	#call replace(p1.p7,i2/2-i3/2-i6/2+i8/2,i,i2,i3,i6,i8,Md346,dotrewrite-d346-5)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-6)
#endif
#break
#case 27
* path: (2, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p2.p - p7.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p2.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-2)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-3)
	#call replace(p3.p7,-i3/2-i7/2+i8/2,i,i3,i7,i8,Md346,dotrewrite-d346-4)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-5)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-6)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-7)
#endif
#break
#case 68
* path: (6, 7, 8)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p6.p - p8.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p6.p + p7.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id p4.p8 = -i13 + i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md346,dotrewrite-d346-1)
	#call replace(p6.p7,i2/2-i6/2-i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-2)
	#call replace(p6.p8,-i1/2+i6/2+i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-3)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md346,dotrewrite-d346-4)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-5)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-6)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md346,dotrewrite-d346-7)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q2
* path: (0, 9, 1, 2)
#case 19
* path: (1, 9)
#case 29
* path: (2, 1, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id p4.p9 = i12 - i14;
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(p1.p9,-i1/2+i10-i6/2+i8/2,i,i1,i10,i6,i8,Md346,dotrewrite-d346-4)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md346,dotrewrite-d346-5)
#endif
#break
#case 38
* path: (3, 8)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p2.p?!{p2,[P+p2],[P-p2],Q} = + p1.p - p3.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p1.p + p8.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	if (count(Md346,1)) id Q.p3 = i10 - i11;
	if (count(Md346,1)) id p4.p8 = -i13 + i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-2)
	#call replace(p1.p8,-i1/2+i6/2-i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-3)
	#call replace(p3.p8,-i3/2+i7/2-i8/2,i,i3,i7,i8,Md346,dotrewrite-d346-4)
	#call replace(p3.p4,i13-i2/2-i4/2+i5/2,i,i13,i2,i4,i5,Md346,dotrewrite-d346-5)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md346,dotrewrite-d346-6)
#endif
#break
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p2.p - p7.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p2.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-1)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-2)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md346,dotrewrite-d346-3)
	#call replace(p1.p7,i2/2-i3/2-i6/2+i8/2,i,i2,i3,i6,i8,Md346,dotrewrite-d346-4)
	#call replace(p4.p7,-i14+i2/2+i4/2-i5/2,i,i14,i2,i4,i5,Md346,dotrewrite-d346-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q6
* path: (0, 9, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 9, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 2, 5)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md346,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md346-5;
	if (count(Md346,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md346-4;
	if (count(Md346,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md346-3;
	if (count(Md346,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md346-2;
	if (count(Md346,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md346-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd346()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md346,dotrewrite-d346-0)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md346,dotrewrite-d346-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md346,dotrewrite-d346-2)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md346,dotrewrite-d346-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md346,dotrewrite-d346-4)
#endif
#break
#endswitch
#break
*--#] d346 : 
*--#[ d348 :
#case Md348
#procedure SimpleDotd348()
if (count(Md348,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p2.p3 = i10 - i11;
	if (count(Md348,1)) id p2.p4 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md348,dotrewrite-d348-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md348,dotrewrite-d348-4)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md348,dotrewrite-d348-5)
	#call replace(p2.p6,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md348,dotrewrite-d348-6)
#endif
#break
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p2.p3 = i10 - i11;
	if (count(Md348,1)) id p2.p4 = i12 - i13;
	if (count(Md348,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md348,dotrewrite-d348-3)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-4)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md348,dotrewrite-d348-5)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md348,dotrewrite-d348-6)
	#call replace(p3.p8,i11-i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md348,dotrewrite-d348-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p1.p - p8.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md348,dotrewrite-d348-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-2)
	#call replace(p1.p8,i1/2-i6/2+i8/2,i,i1,i6,i8,Md348,dotrewrite-d348-3)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md348,dotrewrite-d348-4)
	#call replace(p3.p8,i11-i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md348,dotrewrite-d348-5)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 27
* path: (2, 1, 7)
#case 37
* path: (3, 7)
#case 47
* path: (4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + p3.p + p7.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md348,dotrewrite-d348-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-1)
	#call replace(p3.p7,-i3/2+i6/2-i7/2,i,i3,i6,i7,Md348,dotrewrite-d348-2)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md348,dotrewrite-d348-3)
	#call replace(p1.p7,i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md348,dotrewrite-d348-4)
	#call replace(p4.p7,i14-i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md348,dotrewrite-d348-5)
#endif
#break
#case Q6
* path: (0, 1, 7, 6)
#case Q7
* path: (0, 6, 7)
#case 16
* path: (1, 7, 6)
#case 67
* path: (6, 7)
#case 79
* path: (7, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p6.p - p7.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p6.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md348,dotrewrite-d348-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md348,dotrewrite-d348-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md348,dotrewrite-d348-2)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md348,dotrewrite-d348-3)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md348,dotrewrite-d348-4)
	#call replace(p1.p7,i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md348,dotrewrite-d348-5)
	#call replace(p4.p7,i14-i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md348,dotrewrite-d348-6)
#endif
#break
#case 68
* path: (6, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p6.p + p8.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p6.p - p7.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p4.p8 = i13 - i14;
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md348,dotrewrite-d348-1)
	#call replace(p6.p7,-i3/2+i6/2+i7/2,i,i3,i6,i7,Md348,dotrewrite-d348-2)
	#call replace(p6.p8,i1/2-i6/2-i8/2,i,i1,i6,i8,Md348,dotrewrite-d348-3)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md348,dotrewrite-d348-4)
	#call replace(p4.p7,i14-i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md348,dotrewrite-d348-5)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md348,dotrewrite-d348-6)
	#call replace(p7.p8,i1/2-i11+i3/2-i7/2-i8/2,i,i1,i11,i3,i7,i8,Md348,dotrewrite-d348-7)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 39
* path: (3, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p4.p8 = i13 - i14;
	if (count(Md348,1)) id p4.p9 = i12 - i14;
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md348,dotrewrite-d348-3)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md348,dotrewrite-d348-4)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md348,dotrewrite-d348-5)
	#call replace(p3.p8,i11-i3/2-i6/2+i7/2,i,i11,i3,i6,i7,Md348,dotrewrite-d348-6)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md348,dotrewrite-d348-7)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p4.p9 = i12 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md348,dotrewrite-d348-1)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md348,dotrewrite-d348-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i6/2+i8/2,i,i2,i6,i8,Md348,dotrewrite-d348-4)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md348,dotrewrite-d348-5)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p6.p?!{p6,[P+p6],[P-p6],p4} = + Q.p - p9.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	if (count(Md348,1)) id p2.p3 = i10 - i11;
	if (count(Md348,1)) id p2.p4 = i12 - i13;
	if (count(Md348,1)) id p4.p9 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md348,dotrewrite-d348-3)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-4)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md348,dotrewrite-d348-5)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md348,dotrewrite-d348-6)
	#call replace(p3.p9,i10-i3/2-i6/2+i7/2,i,i10,i3,i6,i7,Md348,dotrewrite-d348-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q3
* path: (0, 6, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md348,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md348-5;
	if (count(Md348,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md348-4;
	if (count(Md348,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md348-3;
	if (count(Md348,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p6.p;
	.sort:momrewrite-Md348-2;
	if (count(Md348,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md348-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd348()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md348,dotrewrite-d348-0)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md348,dotrewrite-d348-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md348,dotrewrite-d348-2)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md348,dotrewrite-d348-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md348,dotrewrite-d348-4)
#endif
#break
#endswitch
#break
*--#] d348 : 
*--#[ d268 :
#case Md268
#procedure SimpleDotd268()
if (count(Md268,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p3.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q2
* path: (0, 8, 1, 2)
#case 18
* path: (1, 8)
#case 28
* path: (2, 1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md268,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md268-4;
	if (count(Md268,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p8.p;
	.sort:momrewrite-Md268-3;
	if (count(Md268,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md268-2;
	if (count(Md268,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md268-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd268()
	if (count(Md268,1)) id p3.p8 = i10 - i11;
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md268,dotrewrite-d268-1)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md268,dotrewrite-d268-2)
	#call replace(p1.p8,-i1/2+i12-i5/2+i7/2,i,i1,i12,i5,i7,Md268,dotrewrite-d268-3)
	#call replace(p2.p8,-i2/2-i5/2+i6/2+i9,i,i2,i5,i6,i9,Md268,dotrewrite-d268-4)
#endif
#break
#case Q6
* path: (0, 5, 6)
#case 15
* path: (1, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md268,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md268-4;
	if (count(Md268,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p5.p - p6.p;
	.sort:momrewrite-Md268-3;
	if (count(Md268,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p1.p;
	.sort:momrewrite-Md268-2;
	if (count(Md268,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md268-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd268()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md268,dotrewrite-d268-0)
	#call replace(p1.p5,i1/2+i5/2-i7/2,i,i1,i5,i7,Md268,dotrewrite-d268-1)
	#call replace(p5.p6,-i2/2+i5/2+i6/2,i,i2,i5,i6,Md268,dotrewrite-d268-2)
	#call replace(Q.p6,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md268,dotrewrite-d268-3)
	#call replace(p1.p6,i1/2-i13+i5/2-i7/2,i,i1,i13,i5,i7,Md268,dotrewrite-d268-4)
	#call replace(p3.p6,i11-i2/2-i3/2+i4/2,i,i11,i2,i3,i4,Md268,dotrewrite-d268-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 6)
#case 36
* path: (3, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md268,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md268-4;
	if (count(Md268,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p2.p + p6.p;
	.sort:momrewrite-Md268-3;
	if (count(Md268,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p - p1.p;
	.sort:momrewrite-Md268-2;
	if (count(Md268,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md268-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd268()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md268,dotrewrite-d268-0)
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md268,dotrewrite-d268-1)
	#call replace(Q.p6,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md268,dotrewrite-d268-2)
	#call replace(p1.p6,i1/2-i13+i5/2-i7/2,i,i1,i13,i5,i7,Md268,dotrewrite-d268-3)
	#call replace(p3.p6,i11-i2/2-i3/2+i4/2,i,i11,i2,i3,i4,Md268,dotrewrite-d268-4)
#endif
#break
#case 68
* path: (6, 1, 8)
#if ( `MOMS' > 0 )
	if (count(Md268,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p2.p;
	.sort:momrewrite-Md268-4;
	if (count(Md268,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p8.p;
	.sort:momrewrite-Md268-3;
	if (count(Md268,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + Q.p - p6.p - p8.p;
	.sort:momrewrite-Md268-2;
	if (count(Md268,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md268-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd268()
	if (count(Md268,1)) id p3.p8 = i10 - i11;
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md268,dotrewrite-d268-1)
	#call replace(Q.p6,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md268,dotrewrite-d268-2)
	#call replace(p1.p6,i1/2-i13+i5/2-i7/2,i,i1,i13,i5,i7,Md268,dotrewrite-d268-3)
	#call replace(p3.p6,i11-i2/2-i3/2+i4/2,i,i11,i2,i3,i4,Md268,dotrewrite-d268-4)
	#call replace(p1.p8,-i1/2+i12-i5/2+i7/2,i,i1,i12,i5,i7,Md268,dotrewrite-d268-5)
	#call replace(p6.p8,`Q2'/2+i2/2-i6/2-i8/2-i9,i,i2,i6,i8,i9,Md268,dotrewrite-d268-6)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md268,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md268-4;
	if (count(Md268,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p1.p + p7.p;
	.sort:momrewrite-Md268-3;
	if (count(Md268,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p7.p - p2.p;
	.sort:momrewrite-Md268-2;
	if (count(Md268,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md268-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd268()
	if (count(Md268,1)) id p3.p7 = i11 - i14;
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md268,dotrewrite-d268-1)
	#call replace(p1.p7,-i1/2+i5/2-i7/2,i,i1,i5,i7,Md268,dotrewrite-d268-2)
	#call replace(Q.p7,`Q2'/2-i12+i5/2-i8/2,i,i12,i5,i8,Md268,dotrewrite-d268-3)
	#call replace(p2.p7,-i13+i2/2+i5/2-i6/2,i,i13,i2,i5,i6,Md268,dotrewrite-d268-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q5
* path: (0, 8, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 2, 4)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md268,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md268-4;
	if (count(Md268,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p2.p;
	.sort:momrewrite-Md268-3;
	if (count(Md268,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p1.p;
	.sort:momrewrite-Md268-2;
	if (count(Md268,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md268-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd268()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md268,dotrewrite-d268-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md268,dotrewrite-d268-1)
	#call replace(p1.p5,i1/2+i5/2-i7/2,i,i1,i5,i7,Md268,dotrewrite-d268-2)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md268,dotrewrite-d268-3)
#endif
#break
#endswitch
#break
*--#] d268 : 
*--#[ d350 :
#case Md350
#procedure SimpleDotd350()
if (count(Md350,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p1^n? = i10^n;
	id Q.p2^n? = i11^n;
	id Q.p4^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p2.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 23
* path: (2, 3)
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p1.p?!{p1,[P+p1],[P-p1],Q,p4} = + p2.p + p3.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p2.p - p3.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	if (count(Md350,1)) id Q.p3 = i10 - i11;
	if (count(Md350,1)) id p3.p4 = i13 - i14;
	#call replace(p2.p3,i1/2-i2/2-i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md350,dotrewrite-d350-3)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md350,dotrewrite-d350-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md350,dotrewrite-d350-5)
	#call replace(p3.p6,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md350,dotrewrite-d350-6)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	if (count(Md350,1)) id Q.p3 = i10 - i11;
	if (count(Md350,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md350,dotrewrite-d350-3)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md350,dotrewrite-d350-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md350,dotrewrite-d350-5)
	#call replace(p3.p6,i1/2-i2/2+i7/2-i8/2,i,i1,i2,i7,i8,Md350,dotrewrite-d350-6)
#endif
#break
#case 18
* path: (1, 8)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p8.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-0)
	#call replace(p1.p8,-i1/2+i6/2-i8/2,i,i1,i6,i8,Md350,dotrewrite-d350-1)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md350,dotrewrite-d350-2)
	#call replace(p2.p8,-i1/2+i3/2+i6/2-i7/2,i,i1,i3,i6,i7,Md350,dotrewrite-d350-3)
	#call replace(p4.p8,-i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md350,dotrewrite-d350-4)
#endif
#break
#case 17
* path: (1, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p7.p - p8.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p8.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	#call replace(p1.p8,-i1/2+i6/2-i8/2,i,i1,i6,i8,Md350,dotrewrite-d350-0)
	#call replace(p7.p8,i3/2-i7/2-i8/2,i,i3,i7,i8,Md350,dotrewrite-d350-1)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md350,dotrewrite-d350-2)
	#call replace(p1.p7,i2/2-i3/2-i6/2+i8/2,i,i2,i3,i6,i8,Md350,dotrewrite-d350-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md350,dotrewrite-d350-4)
	#call replace(Q.p8,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md350,dotrewrite-d350-5)
	#call replace(p4.p8,-i13+i4/2-i5/2+i6/2,i,i13,i4,i5,i6,Md350,dotrewrite-d350-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q2
* path: (0, 9, 1, 2)
#case 19
* path: (1, 9)
#case 29
* path: (2, 1, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md350,dotrewrite-d350-1)
	#call replace(p1.p9,-i1/2+i10-i6/2+i8/2,i,i1,i10,i6,i8,Md350,dotrewrite-d350-2)
	#call replace(p2.p9,i11-i2/2-i6/2+i7/2,i,i11,i2,i6,i7,Md350,dotrewrite-d350-3)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md350,dotrewrite-d350-4)
#endif
#break
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p3.p - p7.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - p7.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p + p7.p - p2.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-0)
	#call replace(p2.p7,i2/2-i6/2+i7/2,i,i2,i6,i7,Md350,dotrewrite-d350-1)
	#call replace(Q.p7,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md350,dotrewrite-d350-2)
	#call replace(p1.p7,i2/2-i3/2-i6/2+i8/2,i,i2,i3,i6,i8,Md350,dotrewrite-d350-3)
	#call replace(p4.p7,i14-i4/2+i5/2-i6/2,i,i14,i4,i5,i6,Md350,dotrewrite-d350-4)
#endif
#break
#case Q3
* path: (0, 9, 1, 3)
#case 39
* path: (3, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p4} = + p1.p - p3.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	if (count(Md350,1)) id Q.p3 = i10 - i11;
	if (count(Md350,1)) id p3.p4 = i13 - i14;
	#call replace(p1.p3,i1/2-i2/2+i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md350,dotrewrite-d350-3)
	#call replace(p1.p9,-i1/2+i10-i6/2+i8/2,i,i1,i10,i6,i8,Md350,dotrewrite-d350-4)
	#call replace(p4.p9,i12-i4/2+i5/2-i6/2,i,i12,i4,i5,i6,Md350,dotrewrite-d350-5)
	#call replace(p3.p9,-i1/2+i10-i11+i2/2-i7/2+i8/2,i,i1,i10,i11,i2,i7,i8,Md350,dotrewrite-d350-6)
#endif
#break
#case 45
* path: (4, 2, 5)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p - p8.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p5.p - p1.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md350,dotrewrite-d350-1)
	#call replace(Q.p5,`Q2'/2-i12+i6/2-i9/2,i,i12,i6,i9,Md350,dotrewrite-d350-2)
	#call replace(p1.p5,i1/2-i13+i6/2-i8/2,i,i1,i13,i6,i8,Md350,dotrewrite-d350-3)
	#call replace(p2.p5,-i14+i2/2+i6/2-i7/2,i,i14,i2,i6,i7,Md350,dotrewrite-d350-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q4
* path: (0, 1, 2, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q2
* path: (0, 6, 4, 2)
#case Q6
* path: (0, 9, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 9, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md350,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p2.p;
	.sort:momrewrite-Md350-5;
	if (count(Md350,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md350-4;
	if (count(Md350,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - p6.p;
	.sort:momrewrite-Md350-3;
	if (count(Md350,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md350-2;
	if (count(Md350,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md350-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd350()
	#call replace(p1.p2,i1/2+i2/2-i3/2,i,i1,i2,i3,Md350,dotrewrite-d350-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md350,dotrewrite-d350-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md350,dotrewrite-d350-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md350,dotrewrite-d350-3)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md350,dotrewrite-d350-4)
#endif
#break
#endswitch
#break
*--#] d350 : 
*--#[ d351 :
#case Md351
#procedure SimpleDotd351()
if (count(Md351,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p4^n? = i10^n;
	id p1.p4^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p4^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 9, 6)
#case 22
* path: (2,)
#case 26
* path: (2, 9, 6)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	if (count(Md351,1)) id p2.p3 = i12 - i13;
	if (count(Md351,1)) id p2.p4 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md351,dotrewrite-d351-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md351,dotrewrite-d351-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md351,dotrewrite-d351-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md351,dotrewrite-d351-5)
	#call replace(p2.p6,`Q2'/2-i1/2+i8/2-i9/2,i,i1,i8,i9,Md351,dotrewrite-d351-6)
#endif
#break
#case 68
* path: (6, 9, 8)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + p6.p + p8.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md351,dotrewrite-d351-0)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md351,dotrewrite-d351-1)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md351,dotrewrite-d351-2)
	#call replace(p6.p8,i1/2-i6/2-i8/2,i,i1,i6,i8,Md351,dotrewrite-d351-3)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md351,dotrewrite-d351-4)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md351,dotrewrite-d351-5)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md351,dotrewrite-d351-6)
#endif
#break
#case 28
* path: (2, 8)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p3.p + p1.p - p8.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	if (count(Md351,1)) id p2.p3 = i12 - i13;
	if (count(Md351,1)) id p2.p4 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md351,dotrewrite-d351-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md351,dotrewrite-d351-3)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md351,dotrewrite-d351-4)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md351,dotrewrite-d351-5)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md351,dotrewrite-d351-6)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p8.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p3.p - p8.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md351,dotrewrite-d351-0)
	#call replace(p1.p8,i1/2-i6/2+i8/2,i,i1,i6,i8,Md351,dotrewrite-d351-1)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md351,dotrewrite-d351-2)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md351,dotrewrite-d351-3)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md351,dotrewrite-d351-4)
#endif
#break
#case 37
* path: (3, 1, 7)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p7.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p3.p - p7.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md351,dotrewrite-d351-0)
	#call replace(p3.p7,-i3/2+i6/2-i7/2,i,i3,i6,i7,Md351,dotrewrite-d351-1)
	#call replace(Q.p7,`Q2'/2-i12+i6/2-i9/2,i,i12,i6,i9,Md351,dotrewrite-d351-2)
	#call replace(p1.p7,i1/2-i13+i6/2-i8/2,i,i1,i13,i6,i8,Md351,dotrewrite-d351-3)
	#call replace(p4.p7,-i14+i4/2-i5/2+i6/2,i,i14,i4,i5,i6,Md351,dotrewrite-d351-4)
#endif
#break
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p5.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p + p5.p - p3.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md351,dotrewrite-d351-0)
	#call replace(p4.p5,-i4/2-i5/2+i6/2,i,i4,i5,i6,Md351,dotrewrite-d351-1)
	#call replace(Q.p5,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md351,dotrewrite-d351-2)
	#call replace(p1.p5,i1/2-i11+i6/2-i8/2,i,i1,i11,i6,i8,Md351,dotrewrite-d351-3)
	#call replace(p3.p5,-i14+i3/2+i6/2-i7/2,i,i14,i3,i6,i7,Md351,dotrewrite-d351-4)
#endif
#break
#case Q8
* path: (0, 9, 8)
#case 39
* path: (3, 8, 9)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p8.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md351,dotrewrite-d351-0)
	#call replace(p8.p9,-i2/2+i8/2+i9/2,i,i2,i8,i9,Md351,dotrewrite-d351-1)
	#call replace(Q.p8,i1/2-i2/2-i6/2+i9/2,i,i1,i2,i6,i9,Md351,dotrewrite-d351-2)
	#call replace(p3.p8,i13-i3/2-i6/2+i7/2,i,i13,i3,i6,i7,Md351,dotrewrite-d351-3)
	#call replace(p4.p8,i11-i4/2+i5/2-i6/2,i,i11,i4,i5,i6,Md351,dotrewrite-d351-4)
	#call replace(p3.p9,i12-i3/2-i6/2+i7/2,i,i12,i3,i6,i7,Md351,dotrewrite-d351-5)
	#call replace(p4.p9,i10-i4/2+i5/2-i6/2,i,i10,i4,i5,i6,Md351,dotrewrite-d351-6)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case 19
* path: (1, 2, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md351,dotrewrite-d351-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md351,dotrewrite-d351-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i6/2+i8/2,i,i2,i6,i8,Md351,dotrewrite-d351-2)
	#call replace(p3.p9,i12-i3/2-i6/2+i7/2,i,i12,i3,i6,i7,Md351,dotrewrite-d351-3)
	#call replace(p4.p9,i10-i4/2+i5/2-i6/2,i,i10,i4,i5,i6,Md351,dotrewrite-d351-4)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p6.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p4} = + Q.p - p2.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p - p9.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	if (count(Md351,1)) id p2.p3 = i12 - i13;
	if (count(Md351,1)) id p2.p4 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md351,dotrewrite-d351-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md351,dotrewrite-d351-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md351,dotrewrite-d351-4)
	#call replace(p3.p9,i12-i3/2-i6/2+i7/2,i,i12,i3,i6,i7,Md351,dotrewrite-d351-5)
	#call replace(p4.p9,i10-i4/2+i5/2-i6/2,i,i10,i4,i5,i6,Md351,dotrewrite-d351-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q3
* path: (0, 6, 4, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 9, 6)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 23
* path: (2, 1, 3)
#case 24
* path: (2, 1, 3, 4)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 49
* path: (4, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md351,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md351-5;
	if (count(Md351,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p6.p - p4.p;
	.sort:momrewrite-Md351-4;
	if (count(Md351,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p3.p;
	.sort:momrewrite-Md351-3;
	if (count(Md351,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p6.p;
	.sort:momrewrite-Md351-2;
	if (count(Md351,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md351-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd351()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md351,dotrewrite-d351-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md351,dotrewrite-d351-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md351,dotrewrite-d351-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md351,dotrewrite-d351-3)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md351,dotrewrite-d351-4)
#endif
#break
#endswitch
#break
*--#] d351 : 
*--#[ d269 :
#case Md269
#procedure SimpleDotd269()
if (count(Md269,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p2^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p2.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 8)
#case Q1
* path: (0, 8, 1)
#case Q2
* path: (0, 8, 1, 2)
#case 18
* path: (1, 8)
#case 28
* path: (2, 1, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md269,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md269-4;
	if (count(Md269,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p8.p;
	.sort:momrewrite-Md269-3;
	if (count(Md269,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p8.p;
	.sort:momrewrite-Md269-2;
	if (count(Md269,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md269-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd269()
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md269,dotrewrite-d269-0)
	#call replace(p1.p8,-i1/2+i12-i5/2+i7/2,i,i1,i12,i5,i7,Md269,dotrewrite-d269-1)
	#call replace(p2.p8,-i2/2-i5/2+i6/2+i9,i,i2,i5,i6,i9,Md269,dotrewrite-d269-2)
	#call replace(p3.p8,i10-i3/2+i4/2-i5/2,i,i10,i3,i4,i5,Md269,dotrewrite-d269-3)
#endif
#break
#case 34
* path: (3, 2, 4)
#if ( `MOMS' > 0 )
	if (count(Md269,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md269-4;
	if (count(Md269,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md269-3;
	if (count(Md269,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p - p2.p;
	.sort:momrewrite-Md269-2;
	if (count(Md269,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p4.p - p1.p;
	.sort:momrewrite-Md269-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd269()
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md269,dotrewrite-d269-0)
	#call replace(Q.p4,`Q2'/2-i10+i5/2-i8/2,i,i10,i5,i8,Md269,dotrewrite-d269-1)
	#call replace(p1.p4,i1/2-i14+i5/2-i7/2,i,i1,i14,i5,i7,Md269,dotrewrite-d269-2)
	#call replace(p2.p4,-i11+i2/2+i5/2-i6/2,i,i11,i2,i5,i6,Md269,dotrewrite-d269-3)
#endif
#break
#case 17
* path: (1, 0, 7)
#if ( `MOMS' > 0 )
	if (count(Md269,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md269-4;
	if (count(Md269,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p + p7.p;
	.sort:momrewrite-Md269-3;
	if (count(Md269,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p7.p - p2.p;
	.sort:momrewrite-Md269-2;
	if (count(Md269,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p7.p;
	.sort:momrewrite-Md269-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd269()
	#call replace(p1.p7,-i1/2+i5/2-i7/2,i,i1,i5,i7,Md269,dotrewrite-d269-0)
	#call replace(Q.p7,`Q2'/2-i12+i5/2-i8/2,i,i12,i5,i8,Md269,dotrewrite-d269-1)
	#call replace(p2.p7,-i13+i2/2+i5/2-i6/2,i,i13,i2,i5,i6,Md269,dotrewrite-d269-2)
	#call replace(p3.p7,-i14+i3/2-i4/2+i5/2,i,i14,i3,i4,i5,Md269,dotrewrite-d269-3)
#endif
#break
#case 26
* path: (2, 1, 6)
#if ( `MOMS' > 0 )
	if (count(Md269,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md269-4;
	if (count(Md269,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p + p6.p;
	.sort:momrewrite-Md269-3;
	if (count(Md269,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p6.p - p1.p;
	.sort:momrewrite-Md269-2;
	if (count(Md269,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p - p6.p;
	.sort:momrewrite-Md269-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd269()
	#call replace(p2.p6,-i2/2+i5/2-i6/2,i,i2,i5,i6,Md269,dotrewrite-d269-0)
	#call replace(Q.p6,`Q2'/2+i5/2-i8/2-i9,i,i5,i8,i9,Md269,dotrewrite-d269-1)
	#call replace(p1.p6,i1/2-i13+i5/2-i7/2,i,i1,i13,i5,i7,Md269,dotrewrite-d269-2)
	#call replace(p3.p6,-i11+i3/2-i4/2+i5/2,i,i11,i3,i4,i5,Md269,dotrewrite-d269-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q5
* path: (0, 8, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 15
* path: (1, 8, 5)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 25
* path: (2, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 38
* path: (3, 5, 8)
#case 55
* path: (5,)
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md269,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md269-4;
	if (count(Md269,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p5.p - p2.p;
	.sort:momrewrite-Md269-3;
	if (count(Md269,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p1.p;
	.sort:momrewrite-Md269-2;
	if (count(Md269,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md269-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd269()
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md269,dotrewrite-d269-0)
	#call replace(p1.p5,i1/2+i5/2-i7/2,i,i1,i5,i7,Md269,dotrewrite-d269-1)
	#call replace(p2.p5,i2/2+i5/2-i6/2,i,i2,i5,i6,Md269,dotrewrite-d269-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md269,dotrewrite-d269-3)
#endif
#break
#endswitch
#break
*--#] d269 : 
*--#[ d355 :
#case Md355
#procedure SimpleDotd355()
if (count(Md355,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p2^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p2^n? = i13^n;
	id p1.p3^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 6, 3, 4)
#case 34
* path: (3, 4)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p2.p?!{p2,[P+p2],[P-p2],Q,p1} = + p3.p + p4.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	if (count(Md355,1)) id Q.p4 = i10 - i11;
	if (count(Md355,1)) id p1.p4 = i13 - i14;
	#call replace(p3.p4,i2/2-i3/2-i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md355,dotrewrite-d355-3)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md355,dotrewrite-d355-4)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md355,dotrewrite-d355-5)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md355,dotrewrite-d355-6)
#endif
#break
#case 49
* path: (4, 2, 1, 9)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	if (count(Md355,1)) id Q.p4 = i10 - i11;
	if (count(Md355,1)) id p1.p4 = i13 - i14;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md355,dotrewrite-d355-3)
	#call replace(p1.p9,-i1/2+i12-i6/2+i8/2,i,i1,i12,i6,i8,Md355,dotrewrite-d355-4)
	#call replace(p2.p9,i10-i2/2-i6/2+i7/2,i,i10,i2,i6,i7,Md355,dotrewrite-d355-5)
	#call replace(p4.p9,i10-i11-i2/2+i3/2-i5/2+i7/2,i,i10,i11,i2,i3,i5,i7,Md355,dotrewrite-d355-6)
#endif
#break
#case Q4
* path: (0, 1, 2, 4)
#case 14
* path: (1, 2, 4)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	if (count(Md355,1)) id Q.p4 = i10 - i11;
	if (count(Md355,1)) id p1.p4 = i13 - i14;
	#call replace(p2.p4,i2/2-i3/2+i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md355,dotrewrite-d355-3)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md355,dotrewrite-d355-4)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md355,dotrewrite-d355-5)
	#call replace(p4.p6,i2/2-i3/2+i5/2-i7/2,i,i2,i3,i5,i7,Md355,dotrewrite-d355-6)
#endif
#break
#case 18
* path: (1, 0, 8)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p8.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p1.p - p8.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-0)
	#call replace(p1.p8,-i1/2+i6/2-i8/2,i,i1,i6,i8,Md355,dotrewrite-d355-1)
	#call replace(Q.p8,`Q2'/2-i12+i6/2-i9/2,i,i12,i6,i9,Md355,dotrewrite-d355-2)
	#call replace(p2.p8,-i13+i2/2+i6/2-i7/2,i,i13,i2,i6,i7,Md355,dotrewrite-d355-3)
	#call replace(p3.p8,-i14+i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md355,dotrewrite-d355-4)
#endif
#break
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 1)
#case Q2
* path: (0, 9, 1, 2)
#case 19
* path: (1, 9)
#case 29
* path: (2, 1, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p1.p - p9.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-0)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md355,dotrewrite-d355-1)
	#call replace(p1.p9,-i1/2+i12-i6/2+i8/2,i,i1,i12,i6,i8,Md355,dotrewrite-d355-2)
	#call replace(p2.p9,i10-i2/2-i6/2+i7/2,i,i10,i2,i6,i7,Md355,dotrewrite-d355-3)
	#call replace(p3.p9,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md355,dotrewrite-d355-4)
#endif
#break
#case 25
* path: (2, 3, 5)
#case 35
* path: (3, 5)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p5.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - p1.p - p5.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md355,dotrewrite-d355-1)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md355,dotrewrite-d355-2)
	#call replace(p1.p5,-i1/2+i14-i6/2+i8/2,i,i1,i14,i6,i8,Md355,dotrewrite-d355-3)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md355,dotrewrite-d355-4)
#endif
#break
#case 25
* path: (2, 7, 5)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p1} = + p2.p - p4.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p5.p - p7.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p - p1.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md355,dotrewrite-d355-0)
	#call replace(p5.p7,i4/2-i5/2-i7/2,i,i4,i5,i7,Md355,dotrewrite-d355-1)
	#call replace(Q.p5,-`Q2'/2+i11-i6/2+i9/2,i,i11,i6,i9,Md355,dotrewrite-d355-2)
	#call replace(p1.p5,-i1/2+i14-i6/2+i8/2,i,i1,i14,i6,i8,Md355,dotrewrite-d355-3)
	#call replace(p2.p5,i3/2-i4/2-i6/2+i7/2,i,i3,i4,i6,i7,Md355,dotrewrite-d355-4)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md355,dotrewrite-d355-5)
	#call replace(p1.p7,i1/2-i13+i6/2-i8/2,i,i1,i13,i6,i8,Md355,dotrewrite-d355-6)
#endif
#break
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p - p7.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p + p7.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p7.p - p1.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-0)
	#call replace(p2.p7,-i2/2+i6/2-i7/2,i,i2,i6,i7,Md355,dotrewrite-d355-1)
	#call replace(Q.p7,`Q2'/2-i10+i6/2-i9/2,i,i10,i6,i9,Md355,dotrewrite-d355-2)
	#call replace(p1.p7,i1/2-i13+i6/2-i8/2,i,i1,i13,i6,i8,Md355,dotrewrite-d355-3)
	#call replace(p3.p7,-i2/2+i4/2-i5/2+i6/2,i,i2,i4,i5,i6,Md355,dotrewrite-d355-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 1, 2)
#case Q3
* path: (0, 1, 2, 3)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case Q6
* path: (0, 9, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 16
* path: (1, 9, 6)
#case 22
* path: (2,)
#case 23
* path: (2, 3)
#case 26
* path: (2, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 39
* path: (3, 6, 9)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md355,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p2.p - p3.p;
	.sort:momrewrite-Md355-5;
	if (count(Md355,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md355-4;
	if (count(Md355,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p6.p - p2.p;
	.sort:momrewrite-Md355-3;
	if (count(Md355,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p1.p;
	.sort:momrewrite-Md355-2;
	if (count(Md355,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md355-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd355()
	#call replace(p2.p3,i2/2+i3/2-i4/2,i,i2,i3,i4,Md355,dotrewrite-d355-0)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md355,dotrewrite-d355-1)
	#call replace(p1.p6,i1/2+i6/2-i8/2,i,i1,i6,i8,Md355,dotrewrite-d355-2)
	#call replace(p2.p6,i2/2+i6/2-i7/2,i,i2,i6,i7,Md355,dotrewrite-d355-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md355,dotrewrite-d355-4)
#endif
#break
#endswitch
#break
*--#] d355 : 
*--#[ d418 :
#case Md418
#procedure SimpleDotd418()
if (count(Md418,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q8
* path: (0, 2, 7, 8)
#case 18
* path: (1, 2, 7, 8)
#case 28
* path: (2, 7, 8)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p7.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	if (count(Md418,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md418,dotrewrite-d418-1)
	#call replace(p2.p7,-i2/2-i7/2+i9/2,i,i2,i7,i9,Md418,dotrewrite-d418-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md418,dotrewrite-d418-3)
	#call replace(p2.p8,i10/2-i6/2+i7/2-i9/2,i,i10,i6,i7,i9,Md418,dotrewrite-d418-4)
	#call replace(p3.p8,-i14+i3/2-i4/2+i6/2,i,i14,i3,i4,i6,Md418,dotrewrite-d418-5)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md418,dotrewrite-d418-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 27
* path: (2, 7)
#case 26
* path: (2, 7, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p6.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p7.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	if (count(Md418,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md418,dotrewrite-d418-1)
	#call replace(p2.p6,i10/2-i2/2-i6/2,i,i10,i2,i6,Md418,dotrewrite-d418-2)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md418,dotrewrite-d418-3)
	#call replace(p2.p7,-i2/2-i7/2+i9/2,i,i2,i7,i9,Md418,dotrewrite-d418-4)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md418,dotrewrite-d418-5)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md418,dotrewrite-d418-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 19
* path: (1, 2, 9)
#case 29
* path: (2, 9)
#case 39
* path: (3, 1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p6.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p9.p - p2.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	if (count(Md418,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md418,dotrewrite-d418-1)
	#call replace(p2.p6,i10/2-i2/2-i6/2,i,i10,i2,i6,Md418,dotrewrite-d418-2)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md418,dotrewrite-d418-3)
	#call replace(p2.p9,i2/2-i7/2+i9/2,i,i2,i7,i9,Md418,dotrewrite-d418-4)
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md418,dotrewrite-d418-5)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md418,dotrewrite-d418-6)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md418,dotrewrite-d418-7)
	#call replace(p6.p9,i10/2-i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md418,dotrewrite-d418-8)
#endif
#break
#case 18
* path: (1, 5, 10, 8)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = - p2.p + p9.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p8.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md418,dotrewrite-d418-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md418,dotrewrite-d418-1)
	#call replace(p8.p10,i10/2+i8/2-i9/2,i,i10,i8,i9,Md418,dotrewrite-d418-2)
	#call replace(p3.p8,-i14+i3/2-i4/2+i6/2,i,i14,i3,i4,i6,Md418,dotrewrite-d418-3)
	#call replace(p1.p10,`Q2'/2-i2/2-i5/2+i6/2,i,i2,i5,i6,Md418,dotrewrite-d418-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md418,dotrewrite-d418-5)
	#call replace(p3.p10,i12-i13+i3/2-i4/2+i6/2,i,i12,i13,i3,i4,i6,Md418,dotrewrite-d418-6)
	#call replace(p1.p8,i1/2-i11-i2/2-i5/2+i6/2-i7/2+i9/2,i,i1,i11,i2,i5,i6,i7,i9,Md418,dotrewrite-d418-7)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md418,dotrewrite-d418-0)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md418,dotrewrite-d418-1)
	#call replace(p1.p4,i1/2-i13-i5/2+i6/2,i,i1,i13,i5,i6,Md418,dotrewrite-d418-2)
	#call replace(p1.p7,i11+i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md418,dotrewrite-d418-3)
	#call replace(p4.p7,-i14+i6/2+i7/2-i8/2,i,i14,i6,i7,i8,Md418,dotrewrite-d418-4)
	#call replace(Q.p4,i1/2+i10/2-i12-i2/2-i5/2,i,i1,i10,i12,i2,i5,Md418,dotrewrite-d418-5)
#endif
#break
#case 69
* path: (6, 7, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p7.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md418,dotrewrite-d418-0)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md418,dotrewrite-d418-1)
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md418,dotrewrite-d418-2)
	#call replace(p7.p9,-i2/2+i7/2+i9/2,i,i2,i7,i9,Md418,dotrewrite-d418-3)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md418,dotrewrite-d418-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md418,dotrewrite-d418-5)
	#call replace(p6.p9,i10/2-i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md418,dotrewrite-d418-6)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case Q10
* path: (0, 1, 5, 10)
#case 15
* path: (1, 5)
#case 110
* path: (1, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md418,dotrewrite-d418-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md418,dotrewrite-d418-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md418,dotrewrite-d418-2)
	#call replace(p3.p5,i13-i3/2+i4/2-i6/2,i,i13,i3,i4,i6,Md418,dotrewrite-d418-3)
	#call replace(p1.p7,i11+i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md418,dotrewrite-d418-4)
	#call replace(p5.p7,i11+i2/2-i6/2+i8/2-i9/2,i,i11,i2,i6,i8,i9,Md418,dotrewrite-d418-5)
#endif
#break
#case 210
* path: (2, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p6.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p2.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p9.p - p2.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	if (count(Md418,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md418,dotrewrite-d418-1)
	#call replace(p2.p9,i2/2-i7/2+i9/2,i,i2,i7,i9,Md418,dotrewrite-d418-2)
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md418,dotrewrite-d418-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md418,dotrewrite-d418-4)
	#call replace(p2.p10,i10/2+i2/2-i6/2,i,i10,i2,i6,Md418,dotrewrite-d418-5)
	#call replace(p9.p10,i10/2-i8/2+i9/2,i,i10,i8,i9,Md418,dotrewrite-d418-6)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md418,dotrewrite-d418-7)
	#call replace(p3.p10,i12-i13+i3/2-i4/2+i6/2,i,i12,i13,i3,i4,i6,Md418,dotrewrite-d418-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md418,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md418-6;
	if (count(Md418,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md418-5;
	if (count(Md418,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md418-4;
	if (count(Md418,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md418-3;
	if (count(Md418,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md418-2;
	if (count(Md418,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md418-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd418()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md418,dotrewrite-d418-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md418,dotrewrite-d418-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md418,dotrewrite-d418-2)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md418,dotrewrite-d418-3)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md418,dotrewrite-d418-4)
	#call replace(p1.p7,i11+i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md418,dotrewrite-d418-5)
#endif
#break
#endswitch
#break
*--#] d418 : 
*--#[ d419 :
#case Md419
#procedure SimpleDotd419()
if (count(Md419,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p7^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 610
* path: (6, 8, 10)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p6.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p6.p - p8.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p8.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md419,dotrewrite-d419-1)
	#call replace(p6.p10,i10/2-i2/2+i6/2,i,i10,i2,i6,Md419,dotrewrite-d419-2)
	#call replace(p8.p10,i10/2+i8/2-i9/2,i,i10,i8,i9,Md419,dotrewrite-d419-3)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-4)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-5)
	#call replace(p3.p10,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md419,dotrewrite-d419-6)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md419,dotrewrite-d419-7)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md419,dotrewrite-d419-8)
#endif
#break
#case Q10
* path: (0, 10)
#case 310
* path: (3, 5, 10)
#case 510
* path: (5, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p2.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p7.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	if (count(Md419,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md419,dotrewrite-d419-1)
	#call replace(p2.p7,-i2/2-i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md419,dotrewrite-d419-3)
	#call replace(p2.p10,i10/2+i2/2-i6/2,i,i10,i2,i6,Md419,dotrewrite-d419-4)
	#call replace(p3.p10,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md419,dotrewrite-d419-5)
	#call replace(p7.p10,-i2/2+i6/2-i8/2+i9/2,i,i2,i6,i8,i9,Md419,dotrewrite-d419-6)
#endif
#break
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p7.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-0)
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md419,dotrewrite-d419-1)
	#call replace(p7.p9,-i2/2+i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-2)
	#call replace(p8.p9,i10/2-i8/2-i9/2,i,i10,i8,i9,Md419,dotrewrite-d419-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md419,dotrewrite-d419-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md419,dotrewrite-d419-5)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md419,dotrewrite-d419-6)
#endif
#break
#case 69
* path: (6, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p7.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-0)
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md419,dotrewrite-d419-1)
	#call replace(p7.p9,-i2/2+i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-2)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-4)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md419,dotrewrite-d419-5)
	#call replace(p6.p9,i10/2-i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md419,dotrewrite-d419-6)
#endif
#break
#case Q8
* path: (0, 1, 6, 8)
#case 18
* path: (1, 6, 8)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p6.p - p8.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md419,dotrewrite-d419-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md419,dotrewrite-d419-1)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-2)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md419,dotrewrite-d419-5)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md419,dotrewrite-d419-6)
	#call replace(p1.p8,i1/2-i11-i2/2-i5/2+i6/2-i7/2+i9/2,i,i1,i11,i2,i5,i6,i7,i9,Md419,dotrewrite-d419-7)
#endif
#break
#case 28
* path: (2, 7, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p7.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	if (count(Md419,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md419,dotrewrite-d419-1)
	#call replace(p2.p7,-i2/2-i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-3)
	#call replace(p2.p8,i10/2-i6/2+i7/2-i9/2,i,i10,i6,i7,i9,Md419,dotrewrite-d419-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md419,dotrewrite-d419-5)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md419,dotrewrite-d419-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 26
* path: (2, 1, 6)
#case 27
* path: (2, 7)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p6.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p7.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	if (count(Md419,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md419,dotrewrite-d419-1)
	#call replace(p2.p6,i10/2-i2/2-i6/2,i,i10,i2,i6,Md419,dotrewrite-d419-2)
	#call replace(p2.p7,-i2/2-i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-3)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-4)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-5)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-6)
#endif
#break
#case Q6
* path: (0, 5, 3, 6)
#case 56
* path: (5, 3, 6)
#case 57
* path: (5, 3, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p + p9.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p10.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p5.p + p6.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md419,dotrewrite-d419-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md419,dotrewrite-d419-1)
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md419,dotrewrite-d419-2)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-3)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-4)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-5)
	#call replace(p5.p7,i11+i2/2-i6/2+i8/2-i9/2,i,i11,i2,i6,i8,i9,Md419,dotrewrite-d419-6)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p5.p + Q.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md419,dotrewrite-d419-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md419,dotrewrite-d419-1)
	#call replace(Q.p4,`Q2'/2-i10/2-i12+i5/2,i,i10,i12,i5,Md419,dotrewrite-d419-2)
	#call replace(p1.p4,i1/2-i13+i5/2-i6/2,i,i1,i13,i5,i6,Md419,dotrewrite-d419-3)
	#call replace(p1.p7,i11+i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md419,dotrewrite-d419-4)
	#call replace(p4.p7,i11-i14+i2/2-i6/2+i8/2-i9/2,i,i11,i14,i2,i6,i8,i9,Md419,dotrewrite-d419-5)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 59
* path: (5, 10, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p7.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md419,dotrewrite-d419-0)
	#call replace(p7.p9,-i2/2+i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md419,dotrewrite-d419-2)
	#call replace(p9.p10,i10/2-i8/2+i9/2,i,i10,i8,i9,Md419,dotrewrite-d419-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md419,dotrewrite-d419-4)
	#call replace(p3.p10,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md419,dotrewrite-d419-5)
	#call replace(p7.p10,-i2/2+i6/2-i8/2+i9/2,i,i2,i6,i8,i9,Md419,dotrewrite-d419-6)
#endif
#break
#case 38
* path: (3, 6, 8)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p6.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p6.p - p8.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	if (count(Md419,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md419,dotrewrite-d419-1)
	#call replace(p2.p6,i10/2-i2/2-i6/2,i,i10,i2,i6,Md419,dotrewrite-d419-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-3)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-4)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-5)
	#call replace(p2.p8,i10/2-i6/2+i7/2-i9/2,i,i10,i6,i7,i9,Md419,dotrewrite-d419-6)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md419,dotrewrite-d419-7)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md419,dotrewrite-d419-8)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 15
* path: (1, 3, 5)
#case 25
* path: (2, 1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md419,dotrewrite-d419-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md419,dotrewrite-d419-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md419,dotrewrite-d419-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md419,dotrewrite-d419-3)
	#call replace(p1.p7,i11+i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md419,dotrewrite-d419-4)
	#call replace(p5.p7,i11+i2/2-i6/2+i8/2-i9/2,i,i11,i2,i6,i8,i9,Md419,dotrewrite-d419-5)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q10
* path: (0, 2, 9, 10)
#case Q2
* path: (0, 10, 9, 2)
#case 19
* path: (1, 2, 9)
#case 110
* path: (1, 2, 9, 10)
#case 29
* path: (2, 9)
#case 210
* path: (2, 9, 10)
#case 39
* path: (3, 1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p10.p - p2.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = + p9.p - p2.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	if (count(Md419,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md419,dotrewrite-d419-1)
	#call replace(p2.p9,i2/2-i7/2+i9/2,i,i2,i7,i9,Md419,dotrewrite-d419-2)
	#call replace(p3.p9,i12-i13+i14,i,i12,i13,i14,Md419,dotrewrite-d419-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md419,dotrewrite-d419-4)
	#call replace(p2.p10,i10/2+i2/2-i6/2,i,i10,i2,i6,Md419,dotrewrite-d419-5)
	#call replace(p9.p10,i10/2-i8/2+i9/2,i,i10,i8,i9,Md419,dotrewrite-d419-6)
	#call replace(Q.p9,`Q2'/2-i1/2+i11+i2/2,i,i1,i11,i2,Md419,dotrewrite-d419-7)
	#call replace(p3.p10,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md419,dotrewrite-d419-8)
#endif
#break
#case Q8
* path: (0, 10, 8)
#case Q7
* path: (0, 10, 8, 7)
#case 58
* path: (5, 10, 8)
#case 710
* path: (7, 8, 10)
#case 810
* path: (8, 10)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p7.p + p9.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p8.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md419,dotrewrite-d419-1)
	#call replace(p8.p10,i10/2+i8/2-i9/2,i,i10,i8,i9,Md419,dotrewrite-d419-2)
	#call replace(p3.p10,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md419,dotrewrite-d419-3)
	#call replace(p7.p10,-i2/2+i6/2-i8/2+i9/2,i,i2,i6,i8,i9,Md419,dotrewrite-d419-4)
	#call replace(Q.p8,i1/2+i10/2-i11-i2/2-i5/2,i,i1,i10,i11,i2,i5,Md419,dotrewrite-d419-5)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md419,dotrewrite-d419-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 6)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md419,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md419-6;
	if (count(Md419,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md419-5;
	if (count(Md419,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md419-4;
	if (count(Md419,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md419-3;
	if (count(Md419,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md419-2;
	if (count(Md419,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md419-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd419()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md419,dotrewrite-d419-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md419,dotrewrite-d419-1)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md419,dotrewrite-d419-2)
	#call replace(Q.p6,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md419,dotrewrite-d419-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md419,dotrewrite-d419-4)
	#call replace(p1.p7,i11+i2/2+i7/2-i9/2,i,i11,i2,i7,i9,Md419,dotrewrite-d419-5)
#endif
#break
#endswitch
#break
*--#] d419 : 
*--#[ d420 :
#case Md420
#procedure SimpleDotd420()
if (count(Md420,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md420,dotrewrite-d420-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md420,dotrewrite-d420-2)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md420,dotrewrite-d420-3)
	#call replace(p4.p5,i1/2-i13-i4/2-i5/2+i6/2,i,i1,i13,i4,i5,i6,Md420,dotrewrite-d420-4)
	#call replace(p4.p7,i12-i14+i2/2+i7/2-i9/2,i,i12,i14,i2,i7,i9,Md420,dotrewrite-d420-5)
	#call replace(p5.p7,i1/2-i12-i13+i14-i2/2+i6/2-i8/2+i9/2,i,i1,i12,i13,i14,i2,i6,i8,i9,Md420,dotrewrite-d420-6)
#endif
#break
#case Q8
* path: (0, 1, 4, 8)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = - p2.p + p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p8.p + p10.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md420,dotrewrite-d420-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md420,dotrewrite-d420-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md420,dotrewrite-d420-3)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md420,dotrewrite-d420-4)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i6/2,i,i1,i10,i12,i2,i6,Md420,dotrewrite-d420-5)
	#call replace(p1.p8,i1-i12-i13-i2/2-i7/2+i9/2,i,i1,i12,i13,i2,i7,i9,Md420,dotrewrite-d420-6)
	#call replace(p6.p8,i1/2-i12-i2/2-i6/2-i8/2+i9/2,i,i1,i12,i2,i6,i8,i9,Md420,dotrewrite-d420-7)
	#call replace(p4.p8,i1/2-i12-i13+i14-i2/2+i4/2-i5/2+i6/2-i7/2+i9/2,i,i1,i12,i13,i14,i2,i4,i5,i6,i7,i9,Md420,dotrewrite-d420-8)
#endif
#break
#case 38
* path: (3, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + Q.p - p10.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p8.p + p9.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-0)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md420,dotrewrite-d420-1)
	#call replace(p4.p7,i12-i14+i2/2+i7/2-i9/2,i,i12,i14,i2,i7,i9,Md420,dotrewrite-d420-2)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i6/2,i,i1,i10,i12,i2,i6,Md420,dotrewrite-d420-3)
	#call replace(p3.p8,i1/2-i14-i4/2+i5/2-i6/2,i,i1,i14,i4,i5,i6,Md420,dotrewrite-d420-4)
	#call replace(p7.p8,i1/2-i13+i6/2-i7/2-i8/2,i,i1,i13,i6,i7,i8,Md420,dotrewrite-d420-5)
	#call replace(p4.p8,i1/2-i12-i13+i14-i2/2+i4/2-i5/2+i6/2-i7/2+i9/2,i,i1,i12,i13,i14,i2,i4,i5,i6,i7,i9,Md420,dotrewrite-d420-6)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md420,dotrewrite-d420-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md420,dotrewrite-d420-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md420,dotrewrite-d420-3)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md420,dotrewrite-d420-4)
	#call replace(p1.p7,i12+i2/2+i7/2-i9/2,i,i12,i2,i7,i9,Md420,dotrewrite-d420-5)
	#call replace(p4.p7,i12-i14+i2/2+i7/2-i9/2,i,i12,i14,i2,i7,i9,Md420,dotrewrite-d420-6)
	#call replace(p6.p7,-i1/2+i12+i13+i2/2-i6/2+i8/2-i9/2,i,i1,i12,i13,i2,i6,i8,i9,Md420,dotrewrite-d420-7)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p1.p?!{p1,[P+p1],[P-p1],p6} = + p3.p + p4.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-0)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md420,dotrewrite-d420-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md420,dotrewrite-d420-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md420,dotrewrite-d420-3)
	#call replace(p4.p6,i13-i3/2+i5/2-i6/2,i,i13,i3,i5,i6,Md420,dotrewrite-d420-4)
	#call replace(p4.p7,i12-i14+i2/2+i7/2-i9/2,i,i12,i14,i2,i7,i9,Md420,dotrewrite-d420-5)
	#call replace(p6.p7,-i1/2+i12+i13+i2/2-i6/2+i8/2-i9/2,i,i1,i12,i13,i2,i6,i8,i9,Md420,dotrewrite-d420-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 110
* path: (1, 2, 9, 10)
#case 39
* path: (3, 1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p3} = - p2.p + p9.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + Q.p - p10.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md420,dotrewrite-d420-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md420,dotrewrite-d420-2)
	#call replace(p9.p10,i10/2-i8/2+i9/2,i,i10,i8,i9,Md420,dotrewrite-d420-3)
	#call replace(Q.p9,`Q2'/2-i1/2+i12+i2/2,i,i1,i12,i2,Md420,dotrewrite-d420-4)
	#call replace(p1.p10,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md420,dotrewrite-d420-5)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md420,dotrewrite-d420-6)
	#call replace(p1.p9,`Q2'/2-i1/2+i12+i7/2-i9/2,i,i1,i12,i7,i9,Md420,dotrewrite-d420-7)
	#call replace(p3.p9,-i1/2+i11+i14-i3/2+i4/2,i,i1,i11,i14,i3,i4,Md420,dotrewrite-d420-8)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md420,dotrewrite-d420-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md420,dotrewrite-d420-2)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md420,dotrewrite-d420-3)
	#call replace(p1.p5,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md420,dotrewrite-d420-4)
	#call replace(p1.p7,i12+i2/2+i7/2-i9/2,i,i12,i2,i7,i9,Md420,dotrewrite-d420-5)
	#call replace(p5.p7,i1/2-i12-i13+i14-i2/2+i6/2-i8/2+i9/2,i,i1,i12,i13,i14,i2,i6,i8,i9,Md420,dotrewrite-d420-6)
#endif
#break
#case 15
* path: (1, 4, 5)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p6.p?!{p6,[P+p6],[P-p6],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md420,dotrewrite-d420-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-1)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md420,dotrewrite-d420-2)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md420,dotrewrite-d420-3)
	#call replace(p1.p5,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md420,dotrewrite-d420-4)
	#call replace(p1.p7,i12+i2/2+i7/2-i9/2,i,i12,i2,i7,i9,Md420,dotrewrite-d420-5)
	#call replace(p4.p5,i1/2-i13-i4/2-i5/2+i6/2,i,i1,i13,i4,i5,i6,Md420,dotrewrite-d420-6)
	#call replace(p4.p7,i12-i14+i2/2+i7/2-i9/2,i,i12,i14,i2,i7,i9,Md420,dotrewrite-d420-7)
	#call replace(p5.p7,i1/2-i12-i13+i14-i2/2+i6/2-i8/2+i9/2,i,i1,i12,i13,i14,i2,i6,i8,i9,Md420,dotrewrite-d420-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md420,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p10.p - p9.p;
	.sort:momrewrite-Md420-6;
	if (count(Md420,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p2.p;
	.sort:momrewrite-Md420-5;
	if (count(Md420,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md420-4;
	if (count(Md420,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md420-3;
	if (count(Md420,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md420-2;
	if (count(Md420,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md420-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd420()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md420,dotrewrite-d420-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md420,dotrewrite-d420-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md420,dotrewrite-d420-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md420,dotrewrite-d420-3)
	#call replace(p1.p7,i12+i2/2+i7/2-i9/2,i,i12,i2,i7,i9,Md420,dotrewrite-d420-4)
	#call replace(p6.p7,-i1/2+i12+i13+i2/2-i6/2+i8/2-i9/2,i,i1,i12,i13,i2,i6,i8,i9,Md420,dotrewrite-d420-5)
#endif
#break
#endswitch
#break
*--#] d420 : 
*--#[ d309 :
#case Md309
#procedure SimpleDotd309()
if (count(Md309,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p6.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p8.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p - p3.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md309,dotrewrite-d309-0)
	#call replace(p3.p8,i11-i12+i14,i,i11,i12,i14,Md309,dotrewrite-d309-1)
	#call replace(p6.p8,-i2/2+i6/2+i8/2,i,i2,i6,i8,Md309,dotrewrite-d309-2)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Md309,dotrewrite-d309-3)
	#call replace(Q.p8,`Q2'/2-i1/2+i10+i2/2,i,i1,i10,i2,Md309,dotrewrite-d309-4)
	#call replace(Q.p7,i1/2-i10-i2/2-i5/2+i9/2,i,i1,i10,i2,i5,i9,Md309,dotrewrite-d309-5)
	#call replace(p6.p7,i12-i13-i3/2+i4/2-i6/2-i7/2,i,i12,i13,i3,i4,i6,i7,Md309,dotrewrite-d309-6)
#endif
#break
#case 16
* path: (1, 3, 6)
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p8.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p2.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md309,dotrewrite-d309-0)
	#call replace(p3.p4,i12-i13-i3,i,i12,i13,i3,Md309,dotrewrite-d309-1)
	#call replace(p1.p6,i10+i2/2+i6/2-i8/2,i,i10,i2,i6,i8,Md309,dotrewrite-d309-2)
	#call replace(Q.p4,i1/2-i11-i2/2-i5/2+i9/2,i,i1,i11,i2,i5,i9,Md309,dotrewrite-d309-3)
	#call replace(p1.p4,i1/2-i13-i3/2+i4/2-i5/2,i,i1,i13,i3,i4,i5,Md309,dotrewrite-d309-4)
	#call replace(p4.p6,i12-i13-i14-i3/2+i4/2+i6/2-i7/2,i,i12,i13,i14,i3,i4,i6,i7,Md309,dotrewrite-d309-5)
#endif
#break
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p8.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p2.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p - p3.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md309,dotrewrite-d309-0)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md309,dotrewrite-d309-1)
	#call replace(p1.p6,i10+i2/2+i6/2-i8/2,i,i10,i2,i6,i8,Md309,dotrewrite-d309-2)
	#call replace(Q.p7,i1/2-i10-i2/2-i5/2+i9/2,i,i1,i10,i2,i5,i9,Md309,dotrewrite-d309-3)
	#call replace(p6.p7,i12-i13-i3/2+i4/2-i6/2-i7/2,i,i12,i13,i3,i4,i6,i7,Md309,dotrewrite-d309-4)
	#call replace(p1.p7,i1/2-i10+i12-i13-i2/2-i3/2+i4/2-i5/2-i6/2+i8/2,i,i1,i10,i12,i13,i2,i3,i4,i5,i6,i8,Md309,dotrewrite-d309-5)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 22
* path: (2,)
#case 23
* path: (2, 1, 3)
#case 28
* path: (2, 8)
#case 29
* path: (2, 8, 9)
#case 33
* path: (3,)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = + p8.p - p2.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p8.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p2.p - p3.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	if (count(Md309,1)) id p2.p3 = i11 - i12;
	if (count(Md309,1)) id p3.p9 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md309,dotrewrite-d309-2)
	#call replace(p2.p8,i2/2-i6/2+i8/2,i,i2,i6,i8,Md309,dotrewrite-d309-3)
	#call replace(p3.p8,i11-i12+i14,i,i11,i12,i14,Md309,dotrewrite-d309-4)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md309,dotrewrite-d309-5)
	#call replace(p8.p9,-i7/2+i8/2+i9/2,i,i7,i8,i9,Md309,dotrewrite-d309-6)
	#call replace(Q.p8,`Q2'/2-i1/2+i10+i2/2,i,i1,i10,i2,Md309,dotrewrite-d309-7)
	#call replace(p2.p9,-i12+i13+i2/2+i3/2-i4/2+i9/2,i,i12,i13,i2,i3,i4,i9,Md309,dotrewrite-d309-8)
#endif
#break
#case Q6
* path: (0, 2, 6)
#case 16
* path: (1, 2, 6)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p8.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p6.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p2.p - p3.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	if (count(Md309,1)) id p2.p3 = i11 - i12;
	if (count(Md309,1)) id p3.p9 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md309,dotrewrite-d309-2)
	#call replace(p2.p6,-i2/2-i6/2+i8/2,i,i2,i6,i8,Md309,dotrewrite-d309-3)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md309,dotrewrite-d309-4)
	#call replace(p2.p9,-i12+i13+i2/2+i3/2-i4/2+i9/2,i,i12,i13,i2,i3,i4,i9,Md309,dotrewrite-d309-5)
	#call replace(p6.p9,i12-i13-i2/2-i3/2+i4/2-i7/2+i8/2,i,i12,i13,i2,i3,i4,i7,i8,Md309,dotrewrite-d309-6)
#endif
#break
#case 36
* path: (3, 6)
#case 38
* path: (3, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p8.p - p6.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p8.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	if (count(Md309,1)) id p3.p9 = i11 - i13;
	#call replace(p3.p8,i11-i12+i14,i,i11,i12,i14,Md309,dotrewrite-d309-1)
	#call replace(p6.p8,-i2/2+i6/2+i8/2,i,i2,i6,i8,Md309,dotrewrite-d309-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md309,dotrewrite-d309-3)
	#call replace(p8.p9,-i7/2+i8/2+i9/2,i,i7,i8,i9,Md309,dotrewrite-d309-4)
	#call replace(Q.p8,`Q2'/2-i1/2+i10+i2/2,i,i1,i10,i2,Md309,dotrewrite-d309-5)
	#call replace(p6.p9,i12-i13-i2/2-i3/2+i4/2-i7/2+i8/2,i,i12,i13,i2,i3,i4,i7,i8,Md309,dotrewrite-d309-6)
#endif
#break
#case 27
* path: (2, 6, 7)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p8.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p6.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p - p3.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	if (count(Md309,1)) id p2.p3 = i11 - i12;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md309,dotrewrite-d309-1)
	#call replace(p2.p6,-i2/2-i6/2+i8/2,i,i2,i6,i8,Md309,dotrewrite-d309-2)
	#call replace(p3.p7,i12-i13-i14,i,i12,i13,i14,Md309,dotrewrite-d309-3)
	#call replace(Q.p7,i1/2-i10-i2/2-i5/2+i9/2,i,i1,i10,i2,i5,i9,Md309,dotrewrite-d309-4)
	#call replace(p6.p7,i12-i13-i3/2+i4/2-i6/2-i7/2,i,i12,i13,i3,i4,i6,i7,Md309,dotrewrite-d309-5)
	#call replace(p2.p7,-i12+i13+i3/2-i4/2+i6/2-i8/2+i9/2,i,i12,i13,i3,i4,i6,i8,i9,Md309,dotrewrite-d309-6)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q9
* path: (0, 1, 5, 9)
#case 11
* path: (1,)
#case 13
* path: (1, 3)
#case 19
* path: (1, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p3} = - p2.p + p8.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p9.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p8.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	if (count(Md309,1)) id p3.p9 = i11 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md309,dotrewrite-d309-1)
	#call replace(p3.p8,i11-i12+i14,i,i11,i12,i14,Md309,dotrewrite-d309-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md309,dotrewrite-d309-3)
	#call replace(p8.p9,-i7/2+i8/2+i9/2,i,i7,i8,i9,Md309,dotrewrite-d309-4)
	#call replace(Q.p8,`Q2'/2-i1/2+i10+i2/2,i,i1,i10,i2,Md309,dotrewrite-d309-5)
	#call replace(p1.p8,`Q2'/2-i1/2+i10+i6/2-i8/2,i,i1,i10,i6,i8,Md309,dotrewrite-d309-6)
	#call replace(p1.p9,`Q2'/2+i12-i13-i2/2-i3/2+i4/2-i5/2,i,i12,i13,i2,i3,i4,i5,Md309,dotrewrite-d309-7)
#endif
#break
#default
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md309,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p9.p - p8.p;
	.sort:momrewrite-Md309-5;
	if (count(Md309,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p2.p;
	.sort:momrewrite-Md309-4;
	if (count(Md309,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md309-3;
	if (count(Md309,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md309-2;
	if (count(Md309,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md309-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd309()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md309,dotrewrite-d309-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md309,dotrewrite-d309-1)
	#call replace(p1.p6,i10+i2/2+i6/2-i8/2,i,i10,i2,i6,i8,Md309,dotrewrite-d309-2)
	#call replace(p1.p5,i1/2-i12+i13+i3/2-i4/2+i5/2,i,i1,i12,i13,i3,i4,i5,Md309,dotrewrite-d309-3)
	#call replace(p5.p6,i10-i12+i13+i2/2+i3/2-i4/2+i7/2-i8/2,i,i10,i12,i13,i2,i3,i4,i7,i8,Md309,dotrewrite-d309-4)
#endif
#break
#endswitch
#break
*--#] d309 : 
*--#[ d195 :
#case Md195
#procedure SimpleDotd195()
if (count(Md195,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p7^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 55
* path: (5,)
#case 56
* path: (5, 6)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p5.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md195,dotrewrite-d195-0)
	#call replace(p5.p7,-i2/2+i5/2+i7/2,i,i2,i5,i7,Md195,dotrewrite-d195-1)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md195,dotrewrite-d195-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i9,i,i1,i2,i9,Md195,dotrewrite-d195-3)
	#call replace(Q.p6,`Q2'/2-i4/2+i8/2-i9,i,i4,i8,i9,Md195,dotrewrite-d195-4)
#endif
#break
#case 26
* path: (2, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p + p5.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p2.p5,-i2/2-i5/2+i7/2,i,i2,i5,i7,Md195,dotrewrite-d195-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md195,dotrewrite-d195-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i9,i,i1,i2,i9,Md195,dotrewrite-d195-3)
	#call replace(Q.p6,`Q2'/2-i4/2+i8/2-i9,i,i4,i8,i9,Md195,dotrewrite-d195-4)
	#call replace(p2.p6,-i3/2+i5/2-i7/2+i8/2,i,i3,i5,i7,i8,Md195,dotrewrite-d195-5)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p2.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md195,dotrewrite-d195-1)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md195,dotrewrite-d195-2)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md195,dotrewrite-d195-3)
	#call replace(Q.p6,`Q2'/2-i4/2+i8/2-i9,i,i4,i8,i9,Md195,dotrewrite-d195-4)
	#call replace(p1.p6,`Q2'/2+i3/2-i4/2-i5/2+i7/2-i9,i,i3,i4,i5,i7,i9,Md195,dotrewrite-d195-5)
#endif
#break
#case 35
* path: (3, 5)
#case 37
* path: (3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p7.p - p5.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md195,dotrewrite-d195-0)
	#call replace(p5.p7,-i2/2+i5/2+i7/2,i,i2,i5,i7,Md195,dotrewrite-d195-1)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md195,dotrewrite-d195-2)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i9,i,i1,i2,i9,Md195,dotrewrite-d195-3)
	#call replace(p3.p7,-i2/2+i5/2-i6/2+i8/2,i,i2,i5,i6,i8,Md195,dotrewrite-d195-4)
#endif
#break
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p2.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p3.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p2.p3,-i2/2-i3/2+i8/2,i,i2,i3,i8,Md195,dotrewrite-d195-1)
	#call replace(p2.p7,i2/2-i5/2+i7/2,i,i2,i5,i7,Md195,dotrewrite-d195-2)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md195,dotrewrite-d195-3)
	#call replace(p3.p7,-i2/2+i5/2-i6/2+i8/2,i,i2,i5,i6,i8,Md195,dotrewrite-d195-4)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p2.p + p5.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p2.p + p3.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p2.p3,-i2/2-i3/2+i8/2,i,i2,i3,i8,Md195,dotrewrite-d195-1)
	#call replace(p2.p5,-i2/2-i5/2+i7/2,i,i2,i5,i7,Md195,dotrewrite-d195-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md195,dotrewrite-d195-3)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md195,dotrewrite-d195-4)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i9,i,i1,i2,i9,Md195,dotrewrite-d195-5)
#endif
#break
#case 15
* path: (1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p7.p?!{p7,[P+p7],[P-p7],Q} = + p5.p + p2.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md195,dotrewrite-d195-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md195,dotrewrite-d195-2)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md195,dotrewrite-d195-3)
	#call replace(Q.p5,-`Q2'/2+i1/2-i2/2+i9,i,i1,i2,i9,Md195,dotrewrite-d195-4)
	#call replace(p1.p5,-`Q2'/2+i1/2+i5/2-i7/2+i9,i,i1,i5,i7,i9,Md195,dotrewrite-d195-5)
#endif
#break
#case Q1
* path: (0, 1)
#case Q4
* path: (0, 1, 4)
#case Q8
* path: (0, 1, 4, 8)
#case 11
* path: (1,)
#case 14
* path: (1, 4)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p7.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md195,dotrewrite-d195-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md195,dotrewrite-d195-2)
	#call replace(p1.p7,-i2/2+i5/2-i7/2+i9,i,i2,i5,i7,i9,Md195,dotrewrite-d195-3)
	#call replace(p4.p7,i6/2-i7/2-i8/2+i9,i,i6,i7,i8,i9,Md195,dotrewrite-d195-4)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case 13
* path: (1, 3)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p2.p + p7.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md195,dotrewrite-d195-1)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i8/2,i,i1,i2,i4,i8,Md195,dotrewrite-d195-2)
	#call replace(p1.p7,-i2/2+i5/2-i7/2+i9,i,i2,i5,i7,i9,Md195,dotrewrite-d195-3)
	#call replace(p3.p7,-i2/2+i5/2-i6/2+i8/2,i,i2,i5,i6,i8,Md195,dotrewrite-d195-4)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 28
* path: (2, 7, 8)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md195,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + Q.p - p2.p;
	.sort:momrewrite-Md195-5;
	if (count(Md195,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p2.p;
	.sort:momrewrite-Md195-4;
	if (count(Md195,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p8.p;
	.sort:momrewrite-Md195-3;
	if (count(Md195,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p7.p - p2.p;
	.sort:momrewrite-Md195-2;
	if (count(Md195,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p8.p - p7.p;
	.sort:momrewrite-Md195-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd195()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md195,dotrewrite-d195-0)
	#call replace(p2.p7,i2/2-i5/2+i7/2,i,i2,i5,i7,Md195,dotrewrite-d195-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md195,dotrewrite-d195-2)
	#call replace(p2.p8,i2/2-i3/2+i8/2,i,i2,i3,i8,Md195,dotrewrite-d195-3)
	#call replace(p7.p8,-i6/2+i7/2+i8/2,i,i6,i7,i8,Md195,dotrewrite-d195-4)
#endif
#break
#endswitch
#break
*--#] d195 : 
*--#[ d286 :
#case Md286
#procedure SimpleDotd286()
if (count(Md286,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p6^n? = i9^n;
	id p1.p6^n? = i10^n;
	id Q.p3^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p3.p5^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md286,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md286-4;
	if (count(Md286,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + Q.p - p8.p;
	.sort:momrewrite-Md286-3;
	if (count(Md286,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p2.p - p3.p;
	.sort:momrewrite-Md286-2;
	if (count(Md286,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p2.p - p6.p;
	.sort:momrewrite-Md286-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd286()
	if (count(Md286,1)) id p2.p3 = i11 - i12;
	if (count(Md286,1)) id p2.p6 = -i10 + i9;
	if (count(Md286,1)) id p3.p8 = i11 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md286,dotrewrite-d286-3)
	#call replace(Q.p8,`Q2'/2-i5/2+i8/2,i,i5,i8,Md286,dotrewrite-d286-4)
	#call replace(p2.p8,-i12+i13+i2/2+i3/2-i4/2+i8/2,i,i12,i13,i2,i3,i4,i8,Md286,dotrewrite-d286-5)
	#call replace(p6.p8,-i10+i12-i13-i3/2+i4/2+i6/2-i7/2+i9,i,i10,i12,i13,i3,i4,i6,i7,i9,Md286,dotrewrite-d286-6)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md286,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + Q.p;
	.sort:momrewrite-Md286-4;
	if (count(Md286,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md286-3;
	if (count(Md286,1)) id p5.p?!{p5,[P+p5],[P-p5],p3} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md286-2;
	if (count(Md286,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p3.p + p4.p - p6.p;
	.sort:momrewrite-Md286-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd286()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md286,dotrewrite-d286-0)
	#call replace(p3.p4,i12-i13-i3,i,i12,i13,i3,Md286,dotrewrite-d286-1)
	#call replace(Q.p4,i1/2-i11-i2/2-i5/2+i8/2,i,i1,i11,i2,i5,i8,Md286,dotrewrite-d286-2)
	#call replace(p1.p4,i1/2-i13-i3/2+i4/2-i5/2,i,i1,i13,i3,i4,i5,Md286,dotrewrite-d286-3)
	#call replace(p4.p6,i12-i13-i14-i3/2+i4/2+i6/2-i7/2,i,i12,i13,i14,i3,i4,i6,i7,Md286,dotrewrite-d286-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 16
* path: (1, 2, 6)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 15
* path: (1, 5)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md286,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md286-4;
	if (count(Md286,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md286-3;
	if (count(Md286,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md286-2;
	if (count(Md286,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p - p5.p - p6.p;
	.sort:momrewrite-Md286-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd286()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md286,dotrewrite-d286-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md286,dotrewrite-d286-1)
	#call replace(p1.p5,i1/2-i12+i13+i3/2-i4/2+i5/2,i,i1,i12,i13,i3,i4,i5,Md286,dotrewrite-d286-2)
	#call replace(p5.p6,i10-i12+i13+i3/2-i4/2-i6/2+i7/2,i,i10,i12,i13,i3,i4,i6,i7,Md286,dotrewrite-d286-3)
#endif
#break
#endswitch
#break
*--#] d286 : 
*--#[ d138 :
#case Md138
#procedure SimpleDotd138()
if (count(Md138,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id Q.p5^n? = i8^n;
	id p1.p5^n? = i9^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q2
* path: (0, 2)
#case Q5
* path: (0, 2, 5)
#case 22
* path: (2,)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md138,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md138-4;
	if (count(Md138,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md138-3;
	if (count(Md138,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md138-2;
	if (count(Md138,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p + p3.p;
	.sort:momrewrite-Md138-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd138()
	if (count(Md138,1)) id p2.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md138,dotrewrite-d138-1)
	#call replace(p2.p3,-i2/2-i3/2+i7/2,i,i2,i3,i7,Md138,dotrewrite-d138-2)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md138,dotrewrite-d138-3)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i7/2,i,i1,i2,i4,i7,Md138,dotrewrite-d138-4)
#endif
#break
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md138,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md138-4;
	if (count(Md138,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md138-3;
	if (count(Md138,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p2.p;
	.sort:momrewrite-Md138-2;
	if (count(Md138,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + Q.p - p7.p;
	.sort:momrewrite-Md138-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd138()
	if (count(Md138,1)) id p2.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md138,dotrewrite-d138-1)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md138,dotrewrite-d138-2)
	#call replace(p2.p7,i2/2-i3/2+i7/2,i,i2,i3,i7,Md138,dotrewrite-d138-3)
	#call replace(p5.p7,i3/2+i5/2-i6/2+i8-i9,i,i3,i5,i6,i8,i9,Md138,dotrewrite-d138-4)
#endif
#break
#case 56
* path: (5, 2, 6)
#if ( `MOMS' > 0 )
	if (count(Md138,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + Q.p;
	.sort:momrewrite-Md138-4;
	if (count(Md138,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md138-3;
	if (count(Md138,1)) id p1.p?!{p1,[P+p1],[P-p1],p5} = + Q.p - p2.p;
	.sort:momrewrite-Md138-2;
	if (count(Md138,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p5.p + p6.p;
	.sort:momrewrite-Md138-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd138()
	if (count(Md138,1)) id p2.p5 = i8 - i9;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md138,dotrewrite-d138-1)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md138,dotrewrite-d138-2)
	#call replace(Q.p6,i1/2-i2/2-i4/2+i7/2-i8,i,i1,i2,i4,i7,i8,Md138,dotrewrite-d138-3)
	#call replace(p2.p6,-i2/2-i3/2+i7/2-i8+i9,i,i2,i3,i7,i8,i9,Md138,dotrewrite-d138-4)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md138,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p5.p + p3.p;
	.sort:momrewrite-Md138-4;
	if (count(Md138,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md138-3;
	if (count(Md138,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p1.p - p4.p;
	.sort:momrewrite-Md138-2;
	if (count(Md138,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md138-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd138()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md138,dotrewrite-d138-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md138,dotrewrite-d138-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md138,dotrewrite-d138-2)
	#call replace(p4.p5,-i3/2-i5/2+i6/2+i9,i,i3,i5,i6,i9,Md138,dotrewrite-d138-3)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 15
* path: (1, 2, 5)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md138,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p + Q.p;
	.sort:momrewrite-Md138-4;
	if (count(Md138,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md138-3;
	if (count(Md138,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md138-2;
	if (count(Md138,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md138-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd138()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md138,dotrewrite-d138-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md138,dotrewrite-d138-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md138,dotrewrite-d138-2)
	#call replace(Q.p3,i1/2-i2/2-i4/2+i7/2,i,i1,i2,i4,i7,Md138,dotrewrite-d138-3)
#endif
#break
#endswitch
#break
*--#] d138 : 
*--#[ d329 :
#case Md329
#procedure SimpleDotd329()
if (count(Md329,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md329,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md329-5;
	if (count(Md329,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md329-4;
	if (count(Md329,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md329-3;
	if (count(Md329,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md329-2;
	if (count(Md329,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md329-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd329()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md329,dotrewrite-d329-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md329,dotrewrite-d329-1)
	#call replace(Q.p4,`Q2'/2-i12+i5/2-i9/2,i,i12,i5,i9,Md329,dotrewrite-d329-2)
	#call replace(p1.p4,i1/2-i13+i5/2-i6/2,i,i1,i13,i5,i6,Md329,dotrewrite-d329-3)
	#call replace(p4.p7,i10-i14-i7/2+i8/2-i9/2,i,i10,i14,i7,i8,i9,Md329,dotrewrite-d329-4)
#endif
#break
#case 19
* path: (1, 2, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md329,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md329-5;
	if (count(Md329,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md329-4;
	if (count(Md329,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md329-3;
	if (count(Md329,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md329-2;
	if (count(Md329,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p9.p - Q.p;
	.sort:momrewrite-Md329-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd329()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md329,dotrewrite-d329-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md329,dotrewrite-d329-1)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md329,dotrewrite-d329-2)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i6/2,i,i2,i5,i6,Md329,dotrewrite-d329-3)
	#call replace(p3.p9,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md329,dotrewrite-d329-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md329,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md329-5;
	if (count(Md329,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md329-4;
	if (count(Md329,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md329-3;
	if (count(Md329,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md329-2;
	if (count(Md329,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p6.p;
	.sort:momrewrite-Md329-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd329()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md329,dotrewrite-d329-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md329,dotrewrite-d329-1)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md329,dotrewrite-d329-2)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md329,dotrewrite-d329-3)
	#call replace(p6.p7,-i10+i11+i7/2-i8/2+i9/2,i,i10,i11,i7,i8,i9,Md329,dotrewrite-d329-4)
#endif
#break
#case Q6
* path: (0, 5, 3, 6)
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md329,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md329-5;
	if (count(Md329,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md329-4;
	if (count(Md329,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md329-3;
	if (count(Md329,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md329-2;
	if (count(Md329,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md329-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd329()
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md329,dotrewrite-d329-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md329,dotrewrite-d329-1)
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md329,dotrewrite-d329-2)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md329,dotrewrite-d329-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md329,dotrewrite-d329-4)
	#call replace(p5.p7,i10-i7/2+i8/2-i9/2,i,i10,i7,i8,i9,Md329,dotrewrite-d329-5)
	#call replace(p6.p7,-i10+i11+i7/2-i8/2+i9/2,i,i10,i11,i7,i8,i9,Md329,dotrewrite-d329-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case Q1
* path: (0, 5, 3, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 39
* path: (3, 5, 9)
#case 55
* path: (5,)
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md329,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md329-5;
	if (count(Md329,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md329-4;
	if (count(Md329,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md329-3;
	if (count(Md329,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md329-2;
	if (count(Md329,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md329-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd329()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md329,dotrewrite-d329-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md329,dotrewrite-d329-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md329,dotrewrite-d329-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md329,dotrewrite-d329-3)
	#call replace(p5.p7,i10-i7/2+i8/2-i9/2,i,i10,i7,i8,i9,Md329,dotrewrite-d329-4)
#endif
#break
#endswitch
#break
*--#] d329 : 
*--#[ d330 :
#case Md330
#procedure SimpleDotd330()
if (count(Md330,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p5.p7^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 1, 6, 9)
#case 19
* path: (1, 6, 9)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + Q.p - p9.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p9.p - Q.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	if (count(Md330,1)) id p7.p9 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md330,dotrewrite-d330-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md330,dotrewrite-d330-2)
	#call replace(p1.p7,i10+i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md330,dotrewrite-d330-3)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i6/2,i,i2,i5,i6,Md330,dotrewrite-d330-4)
	#call replace(p3.p9,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md330,dotrewrite-d330-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p1.p - p6.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p6.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md330,dotrewrite-d330-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md330,dotrewrite-d330-1)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md330,dotrewrite-d330-2)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md330,dotrewrite-d330-3)
	#call replace(p1.p7,i10+i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md330,dotrewrite-d330-4)
	#call replace(p6.p7,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md330,dotrewrite-d330-5)
#endif
#break
#case 26
* path: (2, 1, 6)
#case 26
* path: (2, 7, 6)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p - p6.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p6.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	if (count(Md330,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md330,dotrewrite-d330-1)
	#call replace(p2.p6,-i2/2-i6/2+i9/2,i,i2,i6,i9,Md330,dotrewrite-d330-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md330,dotrewrite-d330-3)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md330,dotrewrite-d330-4)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md330,dotrewrite-d330-5)
	#call replace(p6.p7,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md330,dotrewrite-d330-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	if (count(Md330,1)) id p2.p3 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md330,dotrewrite-d330-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md330,dotrewrite-d330-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md330,dotrewrite-d330-3)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md330,dotrewrite-d330-4)
	#call replace(p2.p5,`Q2'/2-i1/2+i6/2-i9/2,i,i1,i6,i9,Md330,dotrewrite-d330-5)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	if (count(Md330,1)) id p4.p7 = i11 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md330,dotrewrite-d330-1)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md330,dotrewrite-d330-2)
	#call replace(Q.p4,`Q2'/2-i12+i5/2-i9/2,i,i12,i5,i9,Md330,dotrewrite-d330-3)
	#call replace(p1.p4,i1/2-i13+i5/2-i6/2,i,i1,i13,i5,i6,Md330,dotrewrite-d330-4)
	#call replace(p1.p7,i10+i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md330,dotrewrite-d330-5)
#endif
#break
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + p5.p + p6.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md330,dotrewrite-d330-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md330,dotrewrite-d330-1)
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md330,dotrewrite-d330-2)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md330,dotrewrite-d330-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md330,dotrewrite-d330-4)
	#call replace(p6.p7,i10-i11+i2/2+i7/2-i8/2,i,i10,i11,i2,i7,i8,Md330,dotrewrite-d330-5)
#endif
#break
#case Q9
* path: (0, 2, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p1.p?!{p1,[P+p1],[P-p1],p3} = + Q.p - p2.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p5.p?!{p5,[P+p5],[P-p5],p7} = + Q.p - p9.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p2.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p - p7.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	if (count(Md330,1)) id p2.p3 = i12 - i13;
	if (count(Md330,1)) id p7.p9 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md330,dotrewrite-d330-2)
	#call replace(p2.p7,-i2/2-i7/2+i8/2,i,i2,i7,i8,Md330,dotrewrite-d330-3)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md330,dotrewrite-d330-4)
	#call replace(p2.p9,i2/2-i6/2+i9/2,i,i2,i6,i9,Md330,dotrewrite-d330-5)
	#call replace(p3.p9,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md330,dotrewrite-d330-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 25
* path: (2, 1, 3, 5)
#case 33
* path: (3,)
#case 34
* path: (3, 5, 4)
#if ( `MOMS' > 0 )
	if (count(Md330,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p2.p;
	.sort:momrewrite-Md330-5;
	if (count(Md330,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md330-4;
	if (count(Md330,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md330-3;
	if (count(Md330,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md330-2;
	if (count(Md330,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md330-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd330()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md330,dotrewrite-d330-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md330,dotrewrite-d330-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md330,dotrewrite-d330-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md330,dotrewrite-d330-3)
	#call replace(p1.p7,i10+i2/2+i7/2-i8/2,i,i10,i2,i7,i8,Md330,dotrewrite-d330-4)
#endif
#break
#endswitch
#break
*--#] d330 : 
*--#[ d331 :
#case Md331
#procedure SimpleDotd331()
if (count(Md331,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q9
* path: (0, 9)
#case Q1
* path: (0, 9, 2, 1)
#case Q7
* path: (0, 9, 7)
#case 19
* path: (1, 2, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p + p9.p - Q.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md331,dotrewrite-d331-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md331,dotrewrite-d331-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i6/2,i,i2,i5,i6,Md331,dotrewrite-d331-2)
	#call replace(p3.p9,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md331,dotrewrite-d331-3)
	#call replace(p7.p9,i10-i11+i6/2+i7/2-i8/2,i,i10,i11,i6,i7,i8,Md331,dotrewrite-d331-4)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 26
* path: (2, 1, 6)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p6.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md331,dotrewrite-d331-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md331,dotrewrite-d331-1)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md331,dotrewrite-d331-2)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md331,dotrewrite-d331-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md331,dotrewrite-d331-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q7
* path: (0, 2, 7)
#case 22
* path: (2,)
#case 27
* path: (2, 7)
#case 25
* path: (2, 9, 5)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p2.p - p5.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	if (count(Md331,1)) id p2.p3 = i12 - i13;
	if (count(Md331,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md331,dotrewrite-d331-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md331,dotrewrite-d331-3)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md331,dotrewrite-d331-4)
	#call replace(p2.p5,`Q2'/2-i1/2+i6/2-i9/2,i,i1,i6,i9,Md331,dotrewrite-d331-5)
	#call replace(p5.p7,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md331,dotrewrite-d331-6)
#endif
#break
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md331,dotrewrite-d331-0)
	#call replace(p3.p4,-i3/2-i4/2+i5/2,i,i3,i4,i5,Md331,dotrewrite-d331-1)
	#call replace(Q.p4,`Q2'/2-i12+i5/2-i9/2,i,i12,i5,i9,Md331,dotrewrite-d331-2)
	#call replace(p1.p4,i1/2-i13+i5/2-i6/2,i,i1,i13,i5,i6,Md331,dotrewrite-d331-3)
	#call replace(p4.p7,i11-i14-i6/2-i7/2+i8/2,i,i11,i14,i6,i7,i8,Md331,dotrewrite-d331-4)
#endif
#break
#case Q6
* path: (0, 5, 3, 6)
#case 56
* path: (5, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md331,dotrewrite-d331-0)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md331,dotrewrite-d331-1)
	#call replace(p5.p6,i1/2-i5/2-i6/2,i,i1,i5,i6,Md331,dotrewrite-d331-2)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md331,dotrewrite-d331-3)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md331,dotrewrite-d331-4)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md331,dotrewrite-d331-5)
	#call replace(p5.p7,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md331,dotrewrite-d331-6)
#endif
#break
#case 78
* path: (7, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p + p4.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p - p6.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p7.p + p8.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	if (count(Md331,1)) id p2.p3 = i12 - i13;
	if (count(Md331,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md331,dotrewrite-d331-2)
	#call replace(p7.p8,i6/2-i7/2-i8/2,i,i6,i7,i8,Md331,dotrewrite-d331-3)
	#call replace(Q.p8,i1/2-i10-i2/2-i5/2+i9/2,i,i1,i10,i2,i5,i9,Md331,dotrewrite-d331-4)
	#call replace(p2.p8,-i10+i11-i2/2-i6/2+i9/2,i,i10,i11,i2,i6,i9,Md331,dotrewrite-d331-5)
	#call replace(p3.p8,i13-i14-i3/2+i4/2-i5/2,i,i13,i14,i3,i4,i5,Md331,dotrewrite-d331-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case Q2
* path: (0, 9, 2)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p9.p - p2.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	if (count(Md331,1)) id p2.p3 = i12 - i13;
	if (count(Md331,1)) id p2.p7 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md331,dotrewrite-d331-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md331,dotrewrite-d331-3)
	#call replace(p2.p9,i2/2-i6/2+i9/2,i,i2,i6,i9,Md331,dotrewrite-d331-4)
	#call replace(p3.p9,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md331,dotrewrite-d331-5)
	#call replace(p7.p9,i10-i11+i6/2+i7/2-i8/2,i,i10,i11,i6,i7,i8,Md331,dotrewrite-d331-6)
#endif
#break
#case 69
* path: (6, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p5.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p9.p - p6.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p7} = + Q.p + p6.p - p9.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md331,dotrewrite-d331-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md331,dotrewrite-d331-1)
	#call replace(p6.p9,-i2/2+i6/2+i9/2,i,i2,i6,i9,Md331,dotrewrite-d331-2)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md331,dotrewrite-d331-3)
	#call replace(p3.p6,i13-i3/2+i4/2-i5/2,i,i13,i3,i4,i5,Md331,dotrewrite-d331-4)
	#call replace(p3.p9,i12-i3/2+i4/2-i5/2,i,i12,i3,i4,i5,Md331,dotrewrite-d331-5)
	#call replace(p7.p9,i10-i11+i6/2+i7/2-i8/2,i,i10,i11,i6,i7,i8,Md331,dotrewrite-d331-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q5
* path: (0, 5)
#case Q3
* path: (0, 5, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 35
* path: (3, 5)
#case 39
* path: (3, 5, 9)
#case 55
* path: (5,)
#case 59
* path: (5, 9)
#case 57
* path: (5, 9, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md331,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md331-5;
	if (count(Md331,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md331-4;
	if (count(Md331,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p5.p - p3.p;
	.sort:momrewrite-Md331-3;
	if (count(Md331,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md331-2;
	if (count(Md331,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md331-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd331()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md331,dotrewrite-d331-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md331,dotrewrite-d331-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md331,dotrewrite-d331-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md331,dotrewrite-d331-3)
	#call replace(p5.p7,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md331,dotrewrite-d331-4)
#endif
#break
#endswitch
#break
*--#] d331 : 
*--#[ d335 :
#case Md335
#procedure SimpleDotd335()
if (count(Md335,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p7^n? = i10^n;
	id p1.p7^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md335,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md335-5;
	if (count(Md335,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md335-4;
	if (count(Md335,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md335-3;
	if (count(Md335,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p + p4.p;
	.sort:momrewrite-Md335-2;
	if (count(Md335,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md335-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd335()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md335,dotrewrite-d335-0)
	#call replace(p3.p4,-i3/2-i4/2+i6/2,i,i3,i4,i6,Md335,dotrewrite-d335-1)
	#call replace(p1.p4,i1/2-i13-i5/2+i6/2,i,i1,i13,i5,i6,Md335,dotrewrite-d335-2)
	#call replace(p4.p7,-i14+i6/2+i7/2-i8/2,i,i14,i6,i7,i8,Md335,dotrewrite-d335-3)
	#call replace(Q.p4,i1/2-i12-i2/2-i5/2+i9/2,i,i1,i12,i2,i5,i9,Md335,dotrewrite-d335-4)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md335,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md335-5;
	if (count(Md335,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p + p3.p;
	.sort:momrewrite-Md335-4;
	if (count(Md335,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md335-3;
	if (count(Md335,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md335-2;
	if (count(Md335,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md335-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd335()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md335,dotrewrite-d335-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md335,dotrewrite-d335-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i6/2,i,i2,i5,i6,Md335,dotrewrite-d335-2)
	#call replace(p3.p9,i12-i13+i3/2-i4/2+i6/2,i,i12,i13,i3,i4,i6,Md335,dotrewrite-d335-3)
	#call replace(p7.p9,i10-i11+i6/2+i7/2-i8/2,i,i10,i11,i6,i7,i8,Md335,dotrewrite-d335-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md335,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p6.p;
	.sort:momrewrite-Md335-5;
	if (count(Md335,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md335-4;
	if (count(Md335,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p5.p;
	.sort:momrewrite-Md335-3;
	if (count(Md335,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md335-2;
	if (count(Md335,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md335-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd335()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md335,dotrewrite-d335-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md335,dotrewrite-d335-1)
	#call replace(p1.p5,i1/2+i5/2-i6/2,i,i1,i5,i6,Md335,dotrewrite-d335-2)
	#call replace(p3.p5,i13-i3/2+i4/2-i6/2,i,i13,i3,i4,i6,Md335,dotrewrite-d335-3)
	#call replace(p5.p7,i11-i6/2-i7/2+i8/2,i,i11,i6,i7,i8,Md335,dotrewrite-d335-4)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 37
* path: (3, 6, 7)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md335,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md335-5;
	if (count(Md335,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md335-4;
	if (count(Md335,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p - p3.p;
	.sort:momrewrite-Md335-3;
	if (count(Md335,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p6.p;
	.sort:momrewrite-Md335-2;
	if (count(Md335,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p - p7.p;
	.sort:momrewrite-Md335-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd335()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md335,dotrewrite-d335-0)
	#call replace(p1.p6,i1/2-i5/2+i6/2,i,i1,i5,i6,Md335,dotrewrite-d335-1)
	#call replace(p3.p6,i3/2-i4/2+i6/2,i,i3,i4,i6,Md335,dotrewrite-d335-2)
	#call replace(p6.p7,i6/2+i7/2-i8/2,i,i6,i7,i8,Md335,dotrewrite-d335-3)
	#call replace(Q.p6,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md335,dotrewrite-d335-4)
#endif
#break
#endswitch
#break
*--#] d335 : 
*--#[ d421 :
#case Md421
#procedure SimpleDotd421()
if (count(Md421,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p6^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p1.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q3
* path: (0, 1, 3)
#case Q7
* path: (0, 1, 3, 7)
#case 13
* path: (1, 3)
#case 17
* path: (1, 3, 7)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 37
* path: (3, 7)
#case 39
* path: (3, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p3.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p9.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	if (count(Md421,1)) id Q.p3 = i11 + i12;
	if (count(Md421,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-2)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-3)
	#call replace(p1.p9,i1/2-i5/2+i9/2,i,i1,i5,i9,Md421,dotrewrite-d421-4)
	#call replace(p3.p9,i3/2-i4/2+i9/2,i,i3,i4,i9,Md421,dotrewrite-d421-5)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md421,dotrewrite-d421-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md421,dotrewrite-d421-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p + p8.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-0)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md421,dotrewrite-d421-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i5/2+i9/2,i,i2,i5,i9,Md421,dotrewrite-d421-3)
	#call replace(p7.p10,i12-i14+i7/2-i8/2+i9/2,i,i12,i14,i7,i8,i9,Md421,dotrewrite-d421-4)
	#call replace(p6.p10,i11-i13+i3/2-i4/2-i7/2+i8/2,i,i11,i13,i3,i4,i7,i8,Md421,dotrewrite-d421-5)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 110
* path: (1, 5, 10)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p + p8.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p5.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p5.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-0)
	#call replace(Q.p5,`Q2'/2-i10/2+i5/2,i,i10,i5,Md421,dotrewrite-d421-1)
	#call replace(p1.p5,i1/2+i5/2-i9/2,i,i1,i5,i9,Md421,dotrewrite-d421-2)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-3)
	#call replace(p5.p7,i14-i7/2+i8/2-i9/2,i,i14,i7,i8,i9,Md421,dotrewrite-d421-4)
	#call replace(p5.p6,i13-i3/2+i4/2+i7/2-i8/2,i,i13,i3,i4,i7,i8,Md421,dotrewrite-d421-5)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p6.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p4.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	if (count(Md421,1)) id Q.p3 = i11 + i12;
	if (count(Md421,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-2)
	#call replace(p3.p4,-i3/2-i4/2+i9/2,i,i3,i4,i9,Md421,dotrewrite-d421-3)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-4)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md421,dotrewrite-d421-5)
	#call replace(p1.p4,i1/2-i13-i14-i5/2+i9/2,i,i1,i13,i14,i5,i9,Md421,dotrewrite-d421-6)
	#call replace(Q.p4,i1/2+i10/2-i11-i12-i2/2-i5/2,i,i1,i10,i11,i12,i2,i5,Md421,dotrewrite-d421-7)
#endif
#break
#case Q2
* path: (0, 2)
#case Q9
* path: (0, 2, 9)
#case 22
* path: (2,)
#case 29
* path: (2, 9)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p + p8.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	if (count(Md421,1)) id p2.p6 = i11 - i13;
	if (count(Md421,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md421,dotrewrite-d421-2)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-3)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md421,dotrewrite-d421-4)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md421,dotrewrite-d421-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md421,dotrewrite-d421-6)
	#call replace(p6.p9,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md421,dotrewrite-d421-7)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#case 26
* path: (2, 1, 3, 6)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p3.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p9.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	if (count(Md421,1)) id Q.p3 = i11 + i12;
	if (count(Md421,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-3)
	#call replace(p1.p9,i1/2-i5/2+i9/2,i,i1,i5,i9,Md421,dotrewrite-d421-4)
	#call replace(p3.p9,i3/2-i4/2+i9/2,i,i3,i4,i9,Md421,dotrewrite-d421-5)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md421,dotrewrite-d421-6)
	#call replace(p6.p9,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md421,dotrewrite-d421-7)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p + p8.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p1.p?!{p1,[P+p1],[P-p1],p6,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	if (count(Md421,1)) id p2.p6 = i11 - i13;
	if (count(Md421,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md421,dotrewrite-d421-2)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-3)
	#call replace(Q.p10,`Q2'/2+i10/2-i5/2,i,i10,i5,Md421,dotrewrite-d421-4)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md421,dotrewrite-d421-5)
	#call replace(p7.p10,i12-i14+i7/2-i8/2+i9/2,i,i12,i14,i7,i8,i9,Md421,dotrewrite-d421-6)
	#call replace(p6.p10,i11-i13+i3/2-i4/2-i7/2+i8/2,i,i11,i13,i3,i4,i7,i8,Md421,dotrewrite-d421-7)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p6.p + p3.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p4.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p3.p + p4.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	if (count(Md421,1)) id Q.p3 = i11 + i12;
	if (count(Md421,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-2)
	#call replace(p3.p4,-i3/2-i4/2+i9/2,i,i3,i4,i9,Md421,dotrewrite-d421-3)
	#call replace(p4.p8,i4/2-i6/2+i8/2,i,i4,i6,i8,Md421,dotrewrite-d421-4)
	#call replace(p1.p8,i1/2-i14-i5/2+i9/2,i,i1,i14,i5,i9,Md421,dotrewrite-d421-5)
	#call replace(p3.p8,-i4/2+i6/2-i7/2+i9/2,i,i4,i6,i7,i9,Md421,dotrewrite-d421-6)
	#call replace(p1.p4,i1/2-i13-i14-i5/2+i9/2,i,i1,i13,i14,i5,i9,Md421,dotrewrite-d421-7)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i5/2,i,i1,i10,i12,i2,i5,Md421,dotrewrite-d421-8)
	#call replace(Q.p4,i1/2+i10/2-i11-i12-i2/2-i5/2,i,i1,i10,i11,i12,i2,i5,Md421,dotrewrite-d421-9)
#endif
#break
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p10.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p8.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-0)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-1)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md421,dotrewrite-d421-2)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Md421,dotrewrite-d421-3)
	#call replace(p1.p8,i1/2-i14-i5/2+i9/2,i,i1,i14,i5,i9,Md421,dotrewrite-d421-4)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i5/2,i,i1,i10,i12,i2,i5,Md421,dotrewrite-d421-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 19
* path: (1, 2, 9)
#case 66
* path: (6,)
#case 67
* path: (6, 7)
#case 69
* path: (6, 7, 9)
#case 77
* path: (7,)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md421,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md421-6;
	if (count(Md421,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p + p8.p;
	.sort:momrewrite-Md421-5;
	if (count(Md421,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md421-4;
	if (count(Md421,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md421-3;
	if (count(Md421,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p9.p;
	.sort:momrewrite-Md421-2;
	if (count(Md421,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md421-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd421()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md421,dotrewrite-d421-0)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md421,dotrewrite-d421-1)
	#call replace(p1.p9,i1/2-i5/2+i9/2,i,i1,i5,i9,Md421,dotrewrite-d421-2)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md421,dotrewrite-d421-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i5/2,i,i1,i10,i2,i5,Md421,dotrewrite-d421-4)
	#call replace(p6.p9,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md421,dotrewrite-d421-5)
#endif
#break
#endswitch
#break
*--#] d421 : 
*--#[ d422 :
#case Md422
#procedure SimpleDotd422()
if (count(Md422,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p7^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 19
* path: (1, 2, 9)
#case 39
* path: (3, 1, 2, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p9.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md422,dotrewrite-d422-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(p1.p9,i1/2-i6/2+i9/2,i,i1,i6,i9,Md422,dotrewrite-d422-2)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md422,dotrewrite-d422-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md422,dotrewrite-d422-4)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md422,dotrewrite-d422-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p4.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p9.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p4.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md422,dotrewrite-d422-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-2)
	#call replace(p1.p9,i1/2-i6/2+i9/2,i,i1,i6,i9,Md422,dotrewrite-d422-3)
	#call replace(p4.p9,i4/2-i5/2+i9/2,i,i4,i5,i9,Md422,dotrewrite-d422-4)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md422,dotrewrite-d422-5)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md422,dotrewrite-d422-6)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md422,dotrewrite-d422-7)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md422,dotrewrite-d422-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md422,dotrewrite-d422-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md422,dotrewrite-d422-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md422,dotrewrite-d422-4)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md422,dotrewrite-d422-5)
	#call replace(p7.p10,i12-i13+i7/2-i8/2+i9/2,i,i12,i13,i7,i8,i9,Md422,dotrewrite-d422-6)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md422,dotrewrite-d422-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md422,dotrewrite-d422-2)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md422,dotrewrite-d422-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md422,dotrewrite-d422-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md422,dotrewrite-d422-5)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md422,dotrewrite-d422-6)
#endif
#break
#case 110
* path: (1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md422,dotrewrite-d422-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md422,dotrewrite-d422-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i6/2+i9/2,i,i2,i6,i9,Md422,dotrewrite-d422-3)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md422,dotrewrite-d422-4)
	#call replace(p7.p10,i12-i13+i7/2-i8/2+i9/2,i,i12,i13,i7,i8,i9,Md422,dotrewrite-d422-5)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md422,dotrewrite-d422-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md422,dotrewrite-d422-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md422,dotrewrite-d422-4)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i9/2,i,i1,i3,i5,i9,Md422,dotrewrite-d422-5)
	#call replace(p6.p7,i13-i7/2+i8/2-i9/2,i,i13,i7,i8,i9,Md422,dotrewrite-d422-6)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 25
* path: (2, 1, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md422,dotrewrite-d422-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md422,dotrewrite-d422-2)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md422,dotrewrite-d422-3)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i9/2,i,i3,i4,i6,i9,Md422,dotrewrite-d422-4)
	#call replace(p5.p7,-i13+i14+i7/2-i8/2+i9/2,i,i13,i14,i7,i8,i9,Md422,dotrewrite-d422-5)
#endif
#break
#case 49
* path: (4, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p4.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p7.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(p4.p9,i4/2-i5/2+i9/2,i,i4,i5,i9,Md422,dotrewrite-d422-2)
	#call replace(p7.p9,i7/2-i8/2+i9/2,i,i7,i8,i9,Md422,dotrewrite-d422-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md422,dotrewrite-d422-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md422,dotrewrite-d422-5)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md422,dotrewrite-d422-6)
#endif
#break
#case Q2
* path: (0, 2)
#case Q6
* path: (0, 2, 10, 6)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md422,dotrewrite-d422-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md422,dotrewrite-d422-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md422,dotrewrite-d422-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md422,dotrewrite-d422-4)
	#call replace(p2.p6,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md422,dotrewrite-d422-5)
	#call replace(p6.p7,i13-i7/2+i8/2-i9/2,i,i13,i7,i8,i9,Md422,dotrewrite-d422-6)
#endif
#break
#case 78
* path: (7, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p8.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p4.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md422,dotrewrite-d422-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-2)
	#call replace(p7.p8,-i7/2-i8/2+i9/2,i,i7,i8,i9,Md422,dotrewrite-d422-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md422,dotrewrite-d422-4)
	#call replace(p1.p8,i1/2-i13-i6/2+i9/2,i,i1,i13,i6,i9,Md422,dotrewrite-d422-5)
	#call replace(Q.p8,i1/2+i10/2-i12-i2/2-i6/2,i,i1,i10,i12,i2,i6,Md422,dotrewrite-d422-6)
	#call replace(p4.p8,-i13+i14+i4/2-i5/2+i9/2,i,i13,i14,i4,i5,i9,Md422,dotrewrite-d422-7)
#endif
#break
#case 45
* path: (4, 5)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p5.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md422,dotrewrite-d422-2)
	#call replace(p4.p5,-i4/2-i5/2+i9/2,i,i4,i5,i9,Md422,dotrewrite-d422-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md422,dotrewrite-d422-4)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md422,dotrewrite-d422-5)
	#call replace(p5.p7,-i13+i14+i7/2-i8/2+i9/2,i,i13,i14,i7,i8,i9,Md422,dotrewrite-d422-6)
#endif
#break
#case 25
* path: (2, 10, 6, 5)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	if (count(Md422,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md422,dotrewrite-d422-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md422,dotrewrite-d422-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md422,dotrewrite-d422-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md422,dotrewrite-d422-4)
	#call replace(p2.p6,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md422,dotrewrite-d422-5)
	#call replace(p6.p7,i13-i7/2+i8/2-i9/2,i,i13,i7,i8,i9,Md422,dotrewrite-d422-6)
	#call replace(p5.p7,-i13+i14+i7/2-i8/2+i9/2,i,i13,i14,i7,i8,i9,Md422,dotrewrite-d422-7)
	#call replace(p2.p5,-`Q2'/2+i10/2+i11-i3/2+i4/2-i9/2,i,i10,i11,i3,i4,i9,Md422,dotrewrite-d422-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md422,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p9.p;
	.sort:momrewrite-Md422-6;
	if (count(Md422,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md422-5;
	if (count(Md422,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md422-4;
	if (count(Md422,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md422-3;
	if (count(Md422,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md422-2;
	if (count(Md422,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p6.p;
	.sort:momrewrite-Md422-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd422()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md422,dotrewrite-d422-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md422,dotrewrite-d422-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md422,dotrewrite-d422-2)
	#call replace(p1.p6,i1/2+i6/2-i9/2,i,i1,i6,i9,Md422,dotrewrite-d422-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md422,dotrewrite-d422-4)
	#call replace(p6.p7,i13-i7/2+i8/2-i9/2,i,i13,i7,i8,i9,Md422,dotrewrite-d422-5)
#endif
#break
#endswitch
#break
*--#] d422 : 
*--#[ d423 :
#case Md423
#procedure SimpleDotd423()
if (count(Md423,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p7^n? = i13^n;
	id p3.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 69
* path: (6, 10, 9)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p6.p + p9.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md423,dotrewrite-d423-0)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-1)
	#call replace(p6.p9,i1/2-i6/2-i9/2,i,i1,i6,i9,Md423,dotrewrite-d423-2)
	#call replace(p6.p7,i14+i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Md423,dotrewrite-d423-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-4)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md423,dotrewrite-d423-5)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#case 79
* path: (7, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p1.p - p9.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md423,dotrewrite-d423-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(p1.p9,i1/2-i6/2+i9/2,i,i1,i6,i9,Md423,dotrewrite-d423-2)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-3)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md423,dotrewrite-d423-4)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-5)
#endif
#break
#case 410
* path: (4, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p4.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p4.p7 = i13 - i14;
	#call replace(p4.p9,i4/2-i5/2+i9/2,i,i4,i5,i9,Md423,dotrewrite-d423-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md423,dotrewrite-d423-2)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md423,dotrewrite-d423-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md423,dotrewrite-d423-4)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-5)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
	#call replace(p7.p10,i12-i14-i5/2-i7/2+i8/2,i,i12,i14,i5,i7,i8,Md423,dotrewrite-d423-7)
	#call replace(p4.p10,`Q2'/2-i11-i2/2+i3/2-i5/2+i9/2,i,i11,i2,i3,i5,i9,Md423,dotrewrite-d423-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case Q2
* path: (0, 10, 2)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p2.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md423,dotrewrite-d423-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md423,dotrewrite-d423-2)
	#call replace(p2.p10,i10/2+i2/2-i9/2,i,i10,i2,i9,Md423,dotrewrite-d423-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md423,dotrewrite-d423-4)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md423,dotrewrite-d423-5)
	#call replace(p7.p10,i12-i14-i5/2-i7/2+i8/2,i,i12,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case Q7
* path: (0, 6, 5, 7)
#case 56
* path: (5, 6)
#case 510
* path: (5, 6, 10)
#case 67
* path: (6, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p5.p + p6.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p6.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md423,dotrewrite-d423-0)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md423,dotrewrite-d423-1)
	#call replace(p1.p6,i1/2+i6/2-i9/2,i,i1,i6,i9,Md423,dotrewrite-d423-2)
	#call replace(p5.p6,i3/2-i5/2-i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md423,dotrewrite-d423-4)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md423,dotrewrite-d423-5)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i9/2,i,i3,i4,i6,i9,Md423,dotrewrite-d423-6)
	#call replace(p6.p7,i14+i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Md423,dotrewrite-d423-7)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md423,dotrewrite-d423-1)
	#call replace(p2.p9,i10/2-i2/2-i9/2,i,i10,i2,i9,Md423,dotrewrite-d423-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md423,dotrewrite-d423-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-4)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md423,dotrewrite-d423-5)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case Q10
* path: (0, 10)
#case Q1
* path: (0, 10, 2, 1)
#case 110
* path: (1, 2, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md423,dotrewrite-d423-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md423,dotrewrite-d423-2)
	#call replace(p1.p10,`Q2'/2-i2/2-i6/2+i9/2,i,i2,i6,i9,Md423,dotrewrite-d423-3)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md423,dotrewrite-d423-4)
	#call replace(p7.p10,i12-i14-i5/2-i7/2+i8/2,i,i12,i14,i5,i7,i8,Md423,dotrewrite-d423-5)
#endif
#break
#case Q4
* path: (0, 6, 3, 4)
#case 46
* path: (4, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md423,dotrewrite-d423-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md423,dotrewrite-d423-4)
	#call replace(p4.p6,i1/2-i3/2+i5/2-i9/2,i,i1,i3,i5,i9,Md423,dotrewrite-d423-5)
	#call replace(p6.p7,i14+i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case 59
* path: (5, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p5.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-0)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md423,dotrewrite-d423-1)
	#call replace(p5.p9,-i4/2+i5/2+i9/2,i,i4,i5,i9,Md423,dotrewrite-d423-2)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md423,dotrewrite-d423-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-4)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md423,dotrewrite-d423-5)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case 39
* path: (3, 4, 9)
#case 49
* path: (4, 9)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p2.p + p9.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p4.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(p4.p9,i4/2-i5/2+i9/2,i,i4,i5,i9,Md423,dotrewrite-d423-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md423,dotrewrite-d423-3)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-4)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md423,dotrewrite-d423-5)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#case 26
* path: (2, 10, 6)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p2.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md423,dotrewrite-d423-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md423,dotrewrite-d423-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md423,dotrewrite-d423-4)
	#call replace(p2.p6,`Q2'/2-i1/2-i10/2+i9/2,i,i1,i10,i9,Md423,dotrewrite-d423-5)
	#call replace(p6.p7,i14+i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case 78
* path: (7, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p - p8.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(p7.p8,i5/2-i7/2-i8/2,i,i5,i7,i8,Md423,dotrewrite-d423-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md423,dotrewrite-d423-3)
	#call replace(p3.p8,-i14-i3/2-i5/2+i6/2,i,i14,i3,i5,i6,Md423,dotrewrite-d423-4)
	#call replace(Q.p8,`Q2'/2-i10/2-i11-i12+i6/2,i,i10,i11,i12,i6,Md423,dotrewrite-d423-5)
	#call replace(p4.p8,-i13+i14+i4/2+i5/2-i9/2,i,i13,i14,i4,i5,i9,Md423,dotrewrite-d423-6)
#endif
#break
#case Q9
* path: (0, 10, 9)
#case 710
* path: (7, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + Q.p - p2.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + p10.p - p9.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md423,dotrewrite-d423-0)
	#call replace(p9.p10,i10/2-i2/2+i9/2,i,i10,i2,i9,Md423,dotrewrite-d423-1)
	#call replace(Q.p9,i1/2+i10/2-i2/2-i6/2,i,i1,i10,i2,i6,Md423,dotrewrite-d423-2)
	#call replace(p3.p9,i1/2-i4/2+i5/2-i6/2,i,i1,i4,i5,i6,Md423,dotrewrite-d423-3)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md423,dotrewrite-d423-4)
	#call replace(p7.p9,i13-i14-i5/2-i7/2+i8/2,i,i13,i14,i5,i7,i8,Md423,dotrewrite-d423-5)
	#call replace(p7.p10,i12-i14-i5/2-i7/2+i8/2,i,i12,i14,i5,i7,i8,Md423,dotrewrite-d423-6)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 3, 5)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p1.p?!{p1,[P+p1],[P-p1],p7} = + p3.p + p4.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p5.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p4.p7 = i13 - i14;
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-2)
	#call replace(p4.p5,-i4/2-i5/2+i9/2,i,i4,i5,i9,Md423,dotrewrite-d423-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md423,dotrewrite-d423-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md423,dotrewrite-d423-5)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md423,dotrewrite-d423-6)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 25
* path: (2, 1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p2.p + p10.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md423,dotrewrite-d423-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md423,dotrewrite-d423-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md423,dotrewrite-d423-4)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i9/2,i,i3,i4,i6,i9,Md423,dotrewrite-d423-5)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 24
* path: (2, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p3.p?!{p3,[P+p3],[P-p3],Q,p7} = + p1.p - p4.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p4.p + p5.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	if (count(Md423,1)) id p4.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md423,dotrewrite-d423-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-2)
	#call replace(p4.p5,-i4/2-i5/2+i9/2,i,i4,i5,i9,Md423,dotrewrite-d423-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md423,dotrewrite-d423-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md423,dotrewrite-d423-5)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md423,dotrewrite-d423-6)
	#call replace(p1.p5,i3/2-i4/2-i6/2+i9/2,i,i3,i4,i6,i9,Md423,dotrewrite-d423-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case Q6
* path: (0, 6)
#case Q3
* path: (0, 6, 3)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 310
* path: (3, 6, 10)
#case 66
* path: (6,)
#case 610
* path: (6, 10)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md423,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p - p5.p;
	.sort:momrewrite-Md423-6;
	if (count(Md423,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md423-5;
	if (count(Md423,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md423-4;
	if (count(Md423,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md423-3;
	if (count(Md423,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p6.p;
	.sort:momrewrite-Md423-2;
	if (count(Md423,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p1.p - p6.p;
	.sort:momrewrite-Md423-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd423()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md423,dotrewrite-d423-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md423,dotrewrite-d423-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md423,dotrewrite-d423-2)
	#call replace(p1.p6,i1/2+i6/2-i9/2,i,i1,i6,i9,Md423,dotrewrite-d423-3)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md423,dotrewrite-d423-4)
	#call replace(p6.p7,i14+i5/2+i7/2-i8/2,i,i14,i5,i7,i8,Md423,dotrewrite-d423-5)
#endif
#break
#endswitch
#break
*--#] d423 : 
*--#[ d424 :
#case Md424
#procedure SimpleDotd424()
if (count(Md424,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id Q.p3^n? = i11^n;
	id Q.p7^n? = i12^n;
	id p1.p5^n? = i13^n;
	id p1.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p4.p - p8.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-1)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md424,dotrewrite-d424-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md424,dotrewrite-d424-5)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md424,dotrewrite-d424-6)
	#call replace(p3.p8,i1/2-i14-i3/2+i7/2-i8/2,i,i1,i14,i3,i7,i8,Md424,dotrewrite-d424-7)
	#call replace(p5.p8,i13-i3/2+i6/2+i7/2-i9/2,i,i13,i3,i6,i7,i9,Md424,dotrewrite-d424-8)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p9.p - p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p1.p9 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-2)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-3)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-4)
	#call replace(Q.p9,-`Q2'/2+i10/2+i11+i12-i6/2,i,i10,i11,i12,i6,Md424,dotrewrite-d424-5)
	#call replace(p3.p9,i14+i3/2-i4/2+i5/2-i6/2-i7/2+i8/2,i,i14,i3,i4,i5,i6,i7,i8,Md424,dotrewrite-d424-6)
#endif
#break
#case 25
* path: (2, 9, 5)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p9.p - p5.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-1)
	#call replace(p5.p9,i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md424,dotrewrite-d424-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-4)
	#call replace(p2.p5,-`Q2'/2+i10/2+i11-i13-i6/2,i,i10,i11,i13,i6,Md424,dotrewrite-d424-5)
	#call replace(Q.p9,-`Q2'/2+i10/2+i11+i12-i6/2,i,i10,i11,i12,i6,Md424,dotrewrite-d424-6)
	#call replace(p2.p9,-`Q2'/2+i10/2+i11+i12-i13-i14-i6/2,i,i10,i11,i12,i13,i14,i6,Md424,dotrewrite-d424-7)
	#call replace(p3.p9,i14+i3/2-i4/2+i5/2-i6/2-i7/2+i8/2,i,i14,i3,i4,i5,i6,i7,i8,Md424,dotrewrite-d424-8)
#endif
#break
#case Q10
* path: (0, 2, 10)
#case 210
* path: (2, 10)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md424,dotrewrite-d424-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md424,dotrewrite-d424-3)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-4)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md424,dotrewrite-d424-5)
	#call replace(p2.p10,i10/2-i13+i2/2+i3/2-i4/2-i6/2,i,i10,i13,i2,i3,i4,i6,Md424,dotrewrite-d424-6)
	#call replace(p7.p10,i12-i14+i4/2-i5/2-i8/2+i9/2,i,i12,i14,i4,i5,i8,i9,Md424,dotrewrite-d424-7)
#endif
#break
#case Q2
* path: (0, 2)
#case 22
* path: (2,)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md424,dotrewrite-d424-4)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-5)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-6)
	#call replace(p2.p5,-`Q2'/2+i10/2+i11-i13-i6/2,i,i10,i11,i13,i6,Md424,dotrewrite-d424-7)
#endif
#break
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p9.p - p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p1.p9 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(p7.p8,i4/2-i7/2-i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-2)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-3)
	#call replace(p1.p8,i1/2-i14-i3/2+i4/2,i,i1,i14,i3,i4,Md424,dotrewrite-d424-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md424,dotrewrite-d424-5)
	#call replace(Q.p9,-`Q2'/2+i10/2+i11+i12-i6/2,i,i10,i11,i12,i6,Md424,dotrewrite-d424-6)
	#call replace(p8.p9,i13-i3/2+i4/2+i6/2-i8/2-i9/2,i,i13,i3,i4,i6,i8,i9,Md424,dotrewrite-d424-7)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#case 27
* path: (2, 9, 7)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p9.p - p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-2)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md424,dotrewrite-d424-3)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-4)
	#call replace(Q.p9,-`Q2'/2+i10/2+i11+i12-i6/2,i,i10,i11,i12,i6,Md424,dotrewrite-d424-5)
	#call replace(p2.p9,-`Q2'/2+i10/2+i11+i12-i13-i14-i6/2,i,i10,i11,i12,i13,i14,i6,Md424,dotrewrite-d424-6)
	#call replace(p3.p9,i14+i3/2-i4/2+i5/2-i6/2-i7/2+i8/2,i,i14,i3,i4,i5,i6,i7,i8,Md424,dotrewrite-d424-7)
#endif
#break
#case 110
* path: (1, 2, 10)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p10.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-1)
	#call replace(Q.p10,`Q2'/2+i10/2-i6/2,i,i10,i6,Md424,dotrewrite-d424-2)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-3)
	#call replace(p3.p10,i11-i3/2+i5/2-i6/2,i,i11,i3,i5,i6,Md424,dotrewrite-d424-4)
	#call replace(p1.p10,`Q2'/2+i13-i2/2-i3/2+i4/2,i,i13,i2,i3,i4,Md424,dotrewrite-d424-5)
	#call replace(p7.p10,i12-i14+i4/2-i5/2-i8/2+i9/2,i,i12,i14,i4,i5,i8,i9,Md424,dotrewrite-d424-6)
#endif
#break
#case 49
* path: (4, 7, 9)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p9.p - p7.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p1.p9 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-2)
	#call replace(p4.p7,i4/2+i7/2-i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-3)
	#call replace(p7.p9,-i5/2+i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-4)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md424,dotrewrite-d424-5)
	#call replace(Q.p9,-`Q2'/2+i10/2+i11+i12-i6/2,i,i10,i11,i12,i6,Md424,dotrewrite-d424-6)
	#call replace(p4.p9,i13-i3/2+i4/2-i5/2+i6/2+i7/2-i8/2,i,i13,i3,i4,i5,i6,i7,i8,Md424,dotrewrite-d424-7)
#endif
#break
#case 18
* path: (1, 4, 8)
#case 48
* path: (4, 8)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p4.p - p8.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-1)
	#call replace(p4.p8,i4/2-i7/2+i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-2)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md424,dotrewrite-d424-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-4)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md424,dotrewrite-d424-5)
	#call replace(p1.p8,i1/2-i14-i3/2+i4/2,i,i1,i14,i3,i4,Md424,dotrewrite-d424-6)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md424,dotrewrite-d424-7)
	#call replace(p5.p8,i13-i3/2+i6/2+i7/2-i9/2,i,i13,i3,i6,i7,i9,Md424,dotrewrite-d424-8)
#endif
#break
#case Q6
* path: (0, 1, 3, 6)
#case 16
* path: (1, 3, 6)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md424,dotrewrite-d424-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-3)
	#call replace(p1.p6,i1/2-i13+i3/2-i4/2,i,i1,i13,i3,i4,Md424,dotrewrite-d424-4)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-5)
	#call replace(p6.p7,i14-i4/2+i5/2+i8/2-i9/2,i,i14,i4,i5,i8,i9,Md424,dotrewrite-d424-6)
#endif
#break
#case Q6
* path: (0, 2, 10, 6)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p3.p + p1.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p7.p + p5.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p6.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p3.p - p6.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(Q.p6,`Q2'/2-i10/2+i6/2,i,i10,i6,Md424,dotrewrite-d424-2)
	#call replace(p3.p6,i3/2-i5/2+i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-3)
	#call replace(p2.p3,-i1/2+i11-i3/2+i4/2,i,i1,i11,i3,i4,Md424,dotrewrite-d424-4)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-5)
	#call replace(p6.p7,i14-i4/2+i5/2+i8/2-i9/2,i,i14,i4,i5,i8,i9,Md424,dotrewrite-d424-6)
	#call replace(p2.p6,`Q2'/2-i1/2-i10/2+i13-i3/2+i4/2+i6/2,i,i1,i10,i13,i3,i4,i6,Md424,dotrewrite-d424-7)
#endif
#break
#case 18
* path: (1, 2, 8)
#case 78
* path: (7, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-1)
	#call replace(p7.p8,i4/2-i7/2-i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-2)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-3)
	#call replace(p1.p8,i1/2-i14-i3/2+i4/2,i,i1,i14,i3,i4,Md424,dotrewrite-d424-4)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md424,dotrewrite-d424-5)
	#call replace(p5.p8,i13-i3/2+i6/2+i7/2-i9/2,i,i13,i3,i6,i7,i9,Md424,dotrewrite-d424-6)
#endif
#break
#case Q8
* path: (0, 2, 8)
#case 28
* path: (2, 8)
#case 27
* path: (2, 8, 7)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + Q.p - p2.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p7.p + p8.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	if (count(Md424,1)) id p2.p7 = i12 - i14;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md424,dotrewrite-d424-1)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-2)
	#call replace(p7.p8,i4/2-i7/2-i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-4)
	#call replace(p2.p5,-`Q2'/2+i10/2+i11-i13-i6/2,i,i10,i11,i13,i6,Md424,dotrewrite-d424-5)
	#call replace(Q.p8,`Q2'/2+i1/2-i11-i12-i2/2,i,i1,i11,i12,i2,Md424,dotrewrite-d424-6)
	#call replace(p5.p8,i13-i3/2+i6/2+i7/2-i9/2,i,i13,i3,i6,i7,i9,Md424,dotrewrite-d424-7)
	#call replace(p2.p8,`Q2'/2-i11-i12+i14-i2/2+i3/2-i4/2,i,i11,i12,i14,i2,i3,i4,Md424,dotrewrite-d424-8)
#endif
#break
#case 34
* path: (3, 4)
#case 37
* path: (3, 4, 7)
#case 45
* path: (4, 3, 5)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p1.p?!{p1,[P+p1],[P-p1],p5,p7} = + p3.p + p4.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p7.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-0)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-1)
	#call replace(p4.p7,i4/2+i7/2-i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md424,dotrewrite-d424-4)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-5)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md424,dotrewrite-d424-6)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-7)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case Q7
* path: (0, 1, 4, 7)
#case 14
* path: (1, 4)
#case 17
* path: (1, 4, 7)
#case 24
* path: (2, 1, 4)
#case 44
* path: (4,)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p3.p?!{p3,[P+p3],[P-p3],Q} = + p1.p - p4.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - p7.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-1)
	#call replace(p4.p7,i4/2+i7/2-i8/2,i,i4,i7,i8,Md424,dotrewrite-d424-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-3)
	#call replace(Q.p4,`Q2'/2+i1/2-i11-i2/2,i,i1,i11,i2,Md424,dotrewrite-d424-4)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-5)
	#call replace(p4.p5,i13-i3/2-i5/2+i6/2,i,i13,i3,i5,i6,Md424,dotrewrite-d424-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md424,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p6.p + Q.p;
	.sort:momrewrite-Md424-6;
	if (count(Md424,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p7.p + p4.p;
	.sort:momrewrite-Md424-5;
	if (count(Md424,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md424-4;
	if (count(Md424,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p;
	.sort:momrewrite-Md424-3;
	if (count(Md424,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p3.p - p5.p;
	.sort:momrewrite-Md424-2;
	if (count(Md424,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p7.p;
	.sort:momrewrite-Md424-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd424()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md424,dotrewrite-d424-0)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md424,dotrewrite-d424-1)
	#call replace(p3.p5,i3/2+i5/2-i6/2,i,i3,i5,i6,Md424,dotrewrite-d424-2)
	#call replace(p5.p7,-i5/2-i7/2+i9/2,i,i5,i7,i9,Md424,dotrewrite-d424-3)
	#call replace(Q.p5,-`Q2'/2+i10/2+i11-i6/2,i,i10,i11,i6,Md424,dotrewrite-d424-4)
	#call replace(p3.p7,i14-i4/2-i7/2+i8/2,i,i14,i4,i7,i8,Md424,dotrewrite-d424-5)
#endif
#break
#endswitch
#break
*--#] d424 : 
*--#[ d307 :
#case Md307
#procedure SimpleDotd307()
if (count(Md307,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id Q.p7^n? = i11^n;
	id p1.p5^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p1.p7^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 17
* path: (1, 2, 7)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p1.p - p7.p - p8.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-0)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md307,dotrewrite-d307-1)
	#call replace(p1.p8,i1-i12-i14,i,i1,i12,i14,Md307,dotrewrite-d307-2)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md307,dotrewrite-d307-3)
	#call replace(Q.p8,i1/2-i11-i2/2-i5/2+i9/2,i,i1,i11,i2,i5,i9,Md307,dotrewrite-d307-4)
	#call replace(p7.p8,i1/2-i12+i5/2-i7/2-i8/2,i,i1,i12,i5,i7,i8,Md307,dotrewrite-d307-5)
#endif
#break
#case 34
* path: (3, 4)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p + p6.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	if (count(Md307,1)) id Q.p3 = i10 + i11;
	if (count(Md307,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md307,dotrewrite-d307-3)
	#call replace(p4.p6,-i4/2-i6/2+i8/2,i,i4,i6,i8,Md307,dotrewrite-d307-4)
	#call replace(p1.p4,i1-i12-i13-i14,i,i1,i12,i13,i14,Md307,dotrewrite-d307-5)
	#call replace(p3.p4,i1/2-i12-i3/2-i4/2+i5/2,i,i1,i12,i3,i4,i5,Md307,dotrewrite-d307-6)
	#call replace(Q.p4,i1/2-i10-i11-i2/2-i5/2+i9/2,i,i1,i10,i11,i2,i5,i9,Md307,dotrewrite-d307-7)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-0)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md307,dotrewrite-d307-1)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md307,dotrewrite-d307-2)
	#call replace(p1.p9,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md307,dotrewrite-d307-3)
	#call replace(p6.p9,i10-i13+i3/2-i4/2-i7/2+i8/2,i,i10,i13,i3,i4,i7,i8,Md307,dotrewrite-d307-4)
	#call replace(p7.p9,i1/2+i11-i12-i14+i5/2+i7/2-i8/2,i,i1,i11,i12,i14,i5,i7,i8,Md307,dotrewrite-d307-5)
#endif
#break
#case 38
* path: (3, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = - p6.p + p3.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p8.p - p4.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	if (count(Md307,1)) id Q.p3 = i10 + i11;
	if (count(Md307,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-2)
	#call replace(p1.p8,i1-i12-i14,i,i1,i12,i14,Md307,dotrewrite-d307-3)
	#call replace(p4.p8,i4/2-i6/2+i8/2,i,i4,i6,i8,Md307,dotrewrite-d307-4)
	#call replace(p1.p4,i1-i12-i13-i14,i,i1,i12,i13,i14,Md307,dotrewrite-d307-5)
	#call replace(p3.p4,i1/2-i12-i3/2-i4/2+i5/2,i,i1,i12,i3,i4,i5,Md307,dotrewrite-d307-6)
	#call replace(Q.p8,i1/2-i11-i2/2-i5/2+i9/2,i,i1,i11,i2,i5,i9,Md307,dotrewrite-d307-7)
	#call replace(Q.p4,i1/2-i10-i11-i2/2-i5/2+i9/2,i,i1,i10,i11,i2,i5,i9,Md307,dotrewrite-d307-8)
	#call replace(p3.p8,i1/2-i12-i4/2+i5/2+i6/2-i7/2,i,i1,i12,i4,i5,i6,i7,Md307,dotrewrite-d307-9)
#endif
#break
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p5.p?!{p5,[P+p5],[P-p5],p1} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p6.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p7.p?!{p7,[P+p7],[P-p7],Q,p1} = + p3.p - p6.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	if (count(Md307,1)) id Q.p3 = i10 + i11;
	if (count(Md307,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-2)
	#call replace(p3.p6,i3/2+i6/2-i7/2,i,i3,i6,i7,Md307,dotrewrite-d307-3)
	#call replace(p1.p8,i1-i12-i14,i,i1,i12,i14,Md307,dotrewrite-d307-4)
	#call replace(p6.p8,-i4/2+i6/2+i8/2,i,i4,i6,i8,Md307,dotrewrite-d307-5)
	#call replace(Q.p8,i1/2-i11-i2/2-i5/2+i9/2,i,i1,i11,i2,i5,i9,Md307,dotrewrite-d307-6)
	#call replace(p3.p8,i1/2-i12-i4/2+i5/2+i6/2-i7/2,i,i1,i12,i4,i5,i6,i7,Md307,dotrewrite-d307-7)
#endif
#break
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p6.p?!{p6,[P+p6],[P-p6],Q,p1} = + p3.p - p7.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	if (count(Md307,1)) id Q.p3 = i10 + i11;
	if (count(Md307,1)) id p1.p3 = i13 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md307,dotrewrite-d307-3)
	#call replace(p3.p7,i3/2-i6/2+i7/2,i,i3,i6,i7,Md307,dotrewrite-d307-4)
	#call replace(p5.p7,-i1/2+i12+i14-i5/2-i7/2+i8/2,i,i1,i12,i14,i5,i7,i8,Md307,dotrewrite-d307-5)
	#call replace(p3.p5,-i1/2+i12+i13+i14-i3/2+i4/2-i5/2,i,i1,i12,i13,i14,i3,i4,i5,Md307,dotrewrite-d307-6)
#endif
#break
#default
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#if ( `MOMS' > 0 )
	if (count(Md307,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p4.p;
	.sort:momrewrite-Md307-5;
	if (count(Md307,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md307-4;
	if (count(Md307,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md307-3;
	if (count(Md307,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p6.p + p7.p;
	.sort:momrewrite-Md307-2;
	if (count(Md307,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md307-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd307()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md307,dotrewrite-d307-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md307,dotrewrite-d307-1)
	#call replace(p6.p7,i3/2-i6/2-i7/2,i,i3,i6,i7,Md307,dotrewrite-d307-2)
	#call replace(p5.p6,i13-i3/2+i4/2+i7/2-i8/2,i,i13,i3,i4,i7,i8,Md307,dotrewrite-d307-3)
	#call replace(p5.p7,-i1/2+i12+i14-i5/2-i7/2+i8/2,i,i1,i12,i14,i5,i7,i8,Md307,dotrewrite-d307-4)
#endif
#break
#endswitch
#break
*--#] d307 : 
*--#[ d313 :
#case Md313
#procedure SimpleDotd313()
if (count(Md313,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p3^n? = i10^n;
	id p1.p3^n? = i11^n;
	id Q.p6^n? = i12^n;
	id p1.p6^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 24
* path: (2, 1, 4)
#case 34
* path: (3, 4)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p4.p - p6.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p4.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md313,dotrewrite-d313-0)
	#call replace(p3.p4,-i3/2-i4/2+i8/2,i,i3,i4,i8,Md313,dotrewrite-d313-1)
	#call replace(p4.p6,-i4/2-i6/2+i7/2,i,i4,i6,i7,Md313,dotrewrite-d313-2)
	#call replace(p1.p4,i1/2-i11-i5/2+i8/2,i,i1,i11,i5,i8,Md313,dotrewrite-d313-3)
	#call replace(Q.p4,i1/2-i10-i2/2-i5/2+i9/2,i,i1,i10,i2,i5,i9,Md313,dotrewrite-d313-4)
#endif
#break
#case 67
* path: (6, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p4.p?!{p4,[P+p4],[P-p4]} = - p6.p - p7.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md313,dotrewrite-d313-0)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md313,dotrewrite-d313-1)
	#call replace(p3.p7,-i14+i3/2+i4/2-i8/2,i,i14,i3,i4,i8,Md313,dotrewrite-d313-2)
	#call replace(p1.p7,-i1/2+i11-i13+i5/2-i8/2,i,i1,i11,i13,i5,i8,Md313,dotrewrite-d313-3)
	#call replace(Q.p7,-i1/2+i10-i12+i2/2+i5/2-i9/2,i,i1,i10,i12,i2,i5,i9,Md313,dotrewrite-d313-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 19
* path: (1, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md313,dotrewrite-d313-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md313,dotrewrite-d313-1)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md313,dotrewrite-d313-2)
	#call replace(p3.p5,i11-i3/2+i4/2-i8/2,i,i11,i3,i4,i8,Md313,dotrewrite-d313-3)
	#call replace(p5.p6,i13-i14+i4/2+i6/2-i7/2,i,i13,i14,i4,i6,i7,Md313,dotrewrite-d313-4)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p2.p - p3.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	if (count(Md313,1)) id p2.p3 = i10 - i11;
	if (count(Md313,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md313,dotrewrite-d313-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md313,dotrewrite-d313-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md313,dotrewrite-d313-4)
	#call replace(p3.p9,i10-i11+i3/2-i4/2+i8/2,i,i10,i11,i3,i4,i8,Md313,dotrewrite-d313-5)
	#call replace(p6.p9,i12-i13+i14-i4/2-i6/2+i7/2,i,i12,i13,i14,i4,i6,i7,Md313,dotrewrite-d313-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md313,dotrewrite-d313-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md313,dotrewrite-d313-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i8/2,i,i2,i5,i8,Md313,dotrewrite-d313-2)
	#call replace(p3.p9,i10-i11+i3/2-i4/2+i8/2,i,i10,i11,i3,i4,i8,Md313,dotrewrite-d313-3)
	#call replace(p6.p9,i12-i13+i14-i4/2-i6/2+i7/2,i,i12,i13,i14,i4,i6,i7,Md313,dotrewrite-d313-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p3.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	if (count(Md313,1)) id p2.p3 = i10 - i11;
	if (count(Md313,1)) id p2.p6 = i12 - i13;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md313,dotrewrite-d313-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md313,dotrewrite-d313-3)
	#call replace(p3.p8,i3/2-i4/2+i8/2,i,i3,i4,i8,Md313,dotrewrite-d313-4)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md313,dotrewrite-d313-5)
	#call replace(p6.p8,i14-i4/2-i6/2+i7/2,i,i14,i4,i6,i7,Md313,dotrewrite-d313-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 18
* path: (1, 3, 8)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 38
* path: (3, 8)
#case 48
* path: (4, 3, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md313,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p - p4.p;
	.sort:momrewrite-Md313-5;
	if (count(Md313,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md313-4;
	if (count(Md313,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md313-3;
	if (count(Md313,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p3.p;
	.sort:momrewrite-Md313-2;
	if (count(Md313,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p8.p;
	.sort:momrewrite-Md313-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd313()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md313,dotrewrite-d313-0)
	#call replace(p1.p8,i1/2-i5/2+i8/2,i,i1,i5,i8,Md313,dotrewrite-d313-1)
	#call replace(p3.p8,i3/2-i4/2+i8/2,i,i3,i4,i8,Md313,dotrewrite-d313-2)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md313,dotrewrite-d313-3)
	#call replace(p6.p8,i14-i4/2-i6/2+i7/2,i,i14,i4,i6,i7,Md313,dotrewrite-d313-4)
#endif
#break
#endswitch
#break
*--#] d313 : 
*--#[ d319 :
#case Md319
#procedure SimpleDotd319()
if (count(Md319,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p1.p6^n? = i11^n;
	id Q.p3^n? = i12^n;
	id p1.p3^n? = i13^n;
	id p3.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 34
* path: (3, 1, 4)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p5.p + Q.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p4.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p3.p - p4.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md319,dotrewrite-d319-0)
	#call replace(p3.p4,-i3/2-i4/2+i8/2,i,i3,i4,i8,Md319,dotrewrite-d319-1)
	#call replace(p1.p4,i1/2-i13-i5/2+i8/2,i,i1,i13,i5,i8,Md319,dotrewrite-d319-2)
	#call replace(p4.p6,-i14+i6/2-i7/2+i8/2,i,i14,i6,i7,i8,Md319,dotrewrite-d319-3)
	#call replace(Q.p4,i1/2-i12-i2/2-i5/2+i9/2,i,i1,i12,i2,i5,i9,Md319,dotrewrite-d319-4)
#endif
#break
#case 67
* path: (6, 3, 7)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p6.p + p7.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p6.p + p7.p - p3.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md319,dotrewrite-d319-0)
	#call replace(p6.p7,-i6/2-i7/2+i8/2,i,i6,i7,i8,Md319,dotrewrite-d319-1)
	#call replace(p1.p7,i1/2-i11-i5/2+i8/2,i,i1,i11,i5,i8,Md319,dotrewrite-d319-2)
	#call replace(p3.p7,-i14+i3/2-i4/2+i8/2,i,i14,i3,i4,i8,Md319,dotrewrite-d319-3)
	#call replace(Q.p7,i1/2-i10-i2/2-i5/2+i9/2,i,i1,i10,i2,i5,i9,Md319,dotrewrite-d319-4)
#endif
#break
#case Q5
* path: (0, 1, 5)
#case 15
* path: (1, 5)
#case 19
* path: (1, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p - p5.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md319,dotrewrite-d319-0)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md319,dotrewrite-d319-1)
	#call replace(p1.p5,i1/2+i5/2-i8/2,i,i1,i5,i8,Md319,dotrewrite-d319-2)
	#call replace(p3.p5,i13-i3/2+i4/2-i8/2,i,i13,i3,i4,i8,Md319,dotrewrite-d319-3)
	#call replace(p5.p6,i11-i6/2+i7/2-i8/2,i,i11,i6,i7,i8,Md319,dotrewrite-d319-4)
#endif
#break
#case Q9
* path: (0, 2, 9)
#case 29
* path: (2, 9)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p2.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p9.p - p2.p - p3.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	if (count(Md319,1)) id p2.p3 = i12 - i13;
	if (count(Md319,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md319,dotrewrite-d319-2)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md319,dotrewrite-d319-3)
	#call replace(p2.p9,i2/2-i8/2+i9/2,i,i2,i8,i9,Md319,dotrewrite-d319-4)
	#call replace(p3.p9,i12-i13+i3/2-i4/2+i8/2,i,i12,i13,i3,i4,i8,Md319,dotrewrite-d319-5)
	#call replace(p6.p9,i10-i11+i6/2-i7/2+i8/2,i,i10,i11,i6,i7,i8,Md319,dotrewrite-d319-6)
#endif
#break
#case 19
* path: (1, 2, 9)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p8.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p2.p + p9.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p1.p - p3.p - p5.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md319,dotrewrite-d319-0)
	#call replace(Q.p9,`Q2'/2-i5/2+i9/2,i,i5,i9,Md319,dotrewrite-d319-1)
	#call replace(p1.p9,`Q2'/2-i2/2-i5/2+i8/2,i,i2,i5,i8,Md319,dotrewrite-d319-2)
	#call replace(p3.p9,i12-i13+i3/2-i4/2+i8/2,i,i12,i13,i3,i4,i8,Md319,dotrewrite-d319-3)
	#call replace(p6.p9,i10-i11+i6/2-i7/2+i8/2,i,i10,i11,i6,i7,i8,Md319,dotrewrite-d319-4)
#endif
#break
#case Q2
* path: (0, 2)
#case Q8
* path: (0, 2, 8)
#case 22
* path: (2,)
#case 28
* path: (2, 8)
#case 26
* path: (2, 8, 6)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + Q.p - p9.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p1.p?!{p1,[P+p1],[P-p1],p3,p6} = + Q.p - p2.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p3.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	if (count(Md319,1)) id p2.p3 = i12 - i13;
	if (count(Md319,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2-i1/2+i2/2,i,i1,i2,Md319,dotrewrite-d319-2)
	#call replace(p2.p8,-i2/2-i8/2+i9/2,i,i2,i8,i9,Md319,dotrewrite-d319-3)
	#call replace(p3.p8,i3/2-i4/2+i8/2,i,i3,i4,i8,Md319,dotrewrite-d319-4)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md319,dotrewrite-d319-5)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md319,dotrewrite-d319-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q6
* path: (0, 1, 3, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 18
* path: (1, 2, 8)
#case 13
* path: (1, 3)
#case 16
* path: (1, 3, 6)
#case 23
* path: (2, 1, 3)
#case 33
* path: (3,)
#case 36
* path: (3, 6)
#case 38
* path: (3, 6, 8)
#case 66
* path: (6,)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md319,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p2.p + p8.p;
	.sort:momrewrite-Md319-5;
	if (count(Md319,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md319-4;
	if (count(Md319,1)) id p4.p?!{p4,[P+p4],[P-p4]} = + p8.p - p3.p;
	.sort:momrewrite-Md319-3;
	if (count(Md319,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p1.p - p8.p;
	.sort:momrewrite-Md319-2;
	if (count(Md319,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p6.p;
	.sort:momrewrite-Md319-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd319()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md319,dotrewrite-d319-0)
	#call replace(p1.p8,i1/2-i5/2+i8/2,i,i1,i5,i8,Md319,dotrewrite-d319-1)
	#call replace(p3.p8,i3/2-i4/2+i8/2,i,i3,i4,i8,Md319,dotrewrite-d319-2)
	#call replace(p6.p8,i6/2-i7/2+i8/2,i,i6,i7,i8,Md319,dotrewrite-d319-3)
	#call replace(Q.p8,i1/2-i2/2-i5/2+i9/2,i,i1,i2,i5,i9,Md319,dotrewrite-d319-4)
#endif
#break
#endswitch
#break
*--#] d319 : 
*--#[ d425 :
#case Md425
#procedure SimpleDotd425()
if (count(Md425,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p2.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 29
* path: (2, 5, 9)
#case 69
* path: (6, 9)
#case 99
* path: (9,)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md425,dotrewrite-d425-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md425,dotrewrite-d425-2)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md425,dotrewrite-d425-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md425,dotrewrite-d425-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-5)
	#call replace(p2.p9,`Q2'/2-i4/2+i5/2-i8/2,i,i4,i5,i8,Md425,dotrewrite-d425-6)
#endif
#break
#case 59
* path: (5, 9)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p4.p + p5.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md425,dotrewrite-d425-1)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md425,dotrewrite-d425-2)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md425,dotrewrite-d425-3)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md425,dotrewrite-d425-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-5)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md425,dotrewrite-d425-6)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md425,dotrewrite-d425-7)
#endif
#break
#case Q10
* path: (0, 1, 8, 9, 10)
#case Q9
* path: (0, 10, 9)
#case Q8
* path: (0, 10, 9, 8)
#case 110
* path: (1, 8, 9, 10)
#case 810
* path: (8, 9, 10)
#case 910
* path: (9, 10)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p8.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p10.p - p9.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md425,dotrewrite-d425-1)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md425,dotrewrite-d425-2)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md425,dotrewrite-d425-3)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md425,dotrewrite-d425-4)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md425,dotrewrite-d425-5)
	#call replace(p1.p10,i12-i13+i14,i,i12,i13,i14,Md425,dotrewrite-d425-6)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md425,dotrewrite-d425-7)
	#call replace(p8.p10,i10/2-i11+i4/2-i5/2-i7/2+i8/2,i,i10,i11,i4,i5,i7,i8,Md425,dotrewrite-d425-8)
#endif
#break
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p9.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md425,dotrewrite-d425-0)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-1)
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md425,dotrewrite-d425-2)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md425,dotrewrite-d425-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-4)
	#call replace(p4.p8,`Q2'/2-i2/2+i5/2-i9/2,i,i2,i5,i9,Md425,dotrewrite-d425-5)
	#call replace(p6.p8,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md425,dotrewrite-d425-6)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p5.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md425,dotrewrite-d425-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md425,dotrewrite-d425-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md425,dotrewrite-d425-2)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md425,dotrewrite-d425-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-4)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md425,dotrewrite-d425-5)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md425,dotrewrite-d425-6)
#endif
#break
#case Q10
* path: (0, 10)
#case 610
* path: (6, 10)
#case 1010
* path: (10,)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p7.p + p6.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p10.p - p6.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md425,dotrewrite-d425-0)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md425,dotrewrite-d425-1)
	#call replace(p1.p10,i12-i13+i14,i,i12,i13,i14,Md425,dotrewrite-d425-2)
	#call replace(p6.p10,i10/2+i6/2-i9/2,i,i10,i6,i9,Md425,dotrewrite-d425-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md425,dotrewrite-d425-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-5)
	#call replace(p2.p10,`Q2'/2+i11-i4/2+i5/2-i8/2,i,i11,i4,i5,i8,Md425,dotrewrite-d425-6)
#endif
#break
#case 45
* path: (4, 5)
#case 49
* path: (4, 5, 9)
#case 55
* path: (5,)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p4.p + p5.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md425,dotrewrite-d425-0)
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md425,dotrewrite-d425-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-2)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md425,dotrewrite-d425-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-4)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md425,dotrewrite-d425-5)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md425,dotrewrite-d425-6)
#endif
#break
#case 510
* path: (5, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p4.p + p5.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p10.p - p9.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md425,dotrewrite-d425-1)
	#call replace(p5.p9,i5/2-i8/2+i9/2,i,i5,i8,i9,Md425,dotrewrite-d425-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md425,dotrewrite-d425-3)
	#call replace(p1.p10,i12-i13+i14,i,i12,i13,i14,Md425,dotrewrite-d425-4)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md425,dotrewrite-d425-5)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md425,dotrewrite-d425-6)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md425,dotrewrite-d425-7)
	#call replace(p5.p10,i11-i4/2+i5/2-i6/2+i7/2-i8/2+i9/2,i,i11,i4,i5,i6,i7,i8,i9,Md425,dotrewrite-d425-8)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p7.p + p6.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md425,dotrewrite-d425-0)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md425,dotrewrite-d425-1)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md425,dotrewrite-d425-2)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md425,dotrewrite-d425-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-4)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md425,dotrewrite-d425-5)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md425,dotrewrite-d425-6)
	#call replace(p6.p8,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md425,dotrewrite-d425-7)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case Q9
* path: (0, 1, 8, 9)
#case 18
* path: (1, 8)
#case 19
* path: (1, 8, 9)
#case 68
* path: (6, 9, 8)
#case 88
* path: (8,)
#case 89
* path: (8, 9)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p8.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md425,dotrewrite-d425-1)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md425,dotrewrite-d425-2)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md425,dotrewrite-d425-3)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md425,dotrewrite-d425-4)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md425,dotrewrite-d425-5)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-6)
	#call replace(p6.p8,i10/2-i11+i4/2-i7/2-i9/2,i,i10,i11,i4,i7,i9,Md425,dotrewrite-d425-7)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p4.p + p5.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p9.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p3.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(p1.p3,-i1/2-i3/2+i8/2,i,i1,i3,i8,Md425,dotrewrite-d425-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md425,dotrewrite-d425-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-2)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i8/2,i,i12,i2,i8,Md425,dotrewrite-d425-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-4)
	#call replace(p3.p4,`Q2'/2-i13-i2/2+i5/2-i9/2,i,i13,i2,i5,i9,Md425,dotrewrite-d425-5)
	#call replace(p3.p6,i10/2-i11-i14+i4/2-i7/2-i9/2,i,i10,i11,i14,i4,i7,i9,Md425,dotrewrite-d425-6)
#endif
#break
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#case 79
* path: (7, 6, 9)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p6.p + p7.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md425,dotrewrite-d425-1)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md425,dotrewrite-d425-2)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md425,dotrewrite-d425-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-5)
	#call replace(p2.p7,-i11+i2/2+i4/2-i5/2,i,i11,i2,i4,i5,Md425,dotrewrite-d425-6)
#endif
#break
#case Q7
* path: (0, 2, 4, 7)
#case Q4
* path: (0, 7, 4)
#case Q2
* path: (0, 7, 4, 2)
#case Q1
* path: (0, 7, 4, 2, 1)
#case 17
* path: (1, 2, 4, 7)
#case 27
* path: (2, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p4.p - p7.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md425,dotrewrite-d425-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md425,dotrewrite-d425-2)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md425,dotrewrite-d425-3)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md425,dotrewrite-d425-4)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-5)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md425,dotrewrite-d425-6)
	#call replace(p2.p7,-i11+i2/2+i4/2-i5/2,i,i11,i2,i4,i5,Md425,dotrewrite-d425-7)
#endif
#break
#case Q5
* path: (0, 7, 4, 5)
#case 57
* path: (5, 4, 7)
#case 78
* path: (7, 4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p4.p + p5.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p2} = + p4.p - p7.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	if (count(Md425,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md425,dotrewrite-d425-1)
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md425,dotrewrite-d425-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md425,dotrewrite-d425-3)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-4)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md425,dotrewrite-d425-5)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md425,dotrewrite-d425-6)
	#call replace(p5.p7,-i11+i2/2-i5/2+i6/2-i7/2,i,i11,i2,i5,i6,i7,Md425,dotrewrite-d425-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q6
* path: (0, 2, 4, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 2, 4, 6)
#case 22
* path: (2,)
#case 28
* path: (2, 1, 8)
#case 24
* path: (2, 4)
#case 26
* path: (2, 4, 6)
#case 210
* path: (2, 4, 6, 10)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 410
* path: (4, 6, 10)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md425,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md425-6;
	if (count(Md425,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p + p8.p;
	.sort:momrewrite-Md425-5;
	if (count(Md425,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md425-4;
	if (count(Md425,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md425-3;
	if (count(Md425,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md425-2;
	if (count(Md425,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md425-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd425()
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md425,dotrewrite-d425-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md425,dotrewrite-d425-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md425,dotrewrite-d425-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md425,dotrewrite-d425-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md425,dotrewrite-d425-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md425,dotrewrite-d425-5)
#endif
#break
#endswitch
#break
*--#] d425 : 
*--#[ d426 :
#case Md426
#procedure SimpleDotd426()
if (count(Md426,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p3.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 7)
#case Q6
* path: (0, 7, 6)
#case 67
* path: (6, 7)
#case 77
* path: (7,)
#case 710
* path: (7, 10)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p6.p + p7.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	if (count(Md426,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md426,dotrewrite-d426-2)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md426,dotrewrite-d426-3)
	#call replace(p6.p7,i4/2-i6/2-i7/2,i,i4,i6,i7,Md426,dotrewrite-d426-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md426,dotrewrite-d426-5)
	#call replace(p3.p7,-i11+i3/2+i4/2-i5/2,i,i11,i3,i4,i5,Md426,dotrewrite-d426-6)
#endif
#break
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#case 39
* path: (3, 5, 9)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + p10.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	if (count(Md426,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md426,dotrewrite-d426-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md426,dotrewrite-d426-3)
	#call replace(Q.p5,i3/2-i4/2-i8/2+i9/2,i,i3,i4,i8,i9,Md426,dotrewrite-d426-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md426,dotrewrite-d426-5)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md426,dotrewrite-d426-6)
#endif
#break
#case 45
* path: (4, 5)
#case 49
* path: (4, 5, 9)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p4.p + p5.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	if (count(Md426,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md426,dotrewrite-d426-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md426,dotrewrite-d426-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md426,dotrewrite-d426-4)
	#call replace(Q.p5,i3/2-i4/2-i8/2+i9/2,i,i3,i4,i8,i9,Md426,dotrewrite-d426-5)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md426,dotrewrite-d426-6)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md426,dotrewrite-d426-7)
#endif
#break
#case Q7
* path: (0, 1, 3, 4, 7)
#case Q4
* path: (0, 7, 4)
#case Q3
* path: (0, 7, 4, 3)
#case Q1
* path: (0, 7, 4, 3, 1)
#case 17
* path: (1, 3, 4, 7)
#case 37
* path: (3, 4, 7)
#case 47
* path: (4, 7)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p4.p - p7.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	if (count(Md426,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md426,dotrewrite-d426-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md426,dotrewrite-d426-3)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md426,dotrewrite-d426-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md426,dotrewrite-d426-5)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md426,dotrewrite-d426-6)
	#call replace(p3.p7,-i11+i3/2+i4/2-i5/2,i,i11,i3,i4,i5,Md426,dotrewrite-d426-7)
#endif
#break
#case 39
* path: (3, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + p6.p + p9.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md426,dotrewrite-d426-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md426,dotrewrite-d426-2)
	#call replace(p6.p9,i10/2-i6/2-i9/2,i,i10,i6,i9,Md426,dotrewrite-d426-3)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md426,dotrewrite-d426-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md426,dotrewrite-d426-5)
	#call replace(p3.p9,`Q2'/2-i4/2+i5/2-i8/2,i,i4,i5,i8,Md426,dotrewrite-d426-6)
#endif
#break
#case 310
* path: (3, 8, 9, 10)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p10.p - p9.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p10.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md426,dotrewrite-d426-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md426,dotrewrite-d426-2)
	#call replace(Q.p10,`Q2'/2+i10/2-i7/2,i,i10,i7,Md426,dotrewrite-d426-3)
	#call replace(p9.p10,i10/2-i6/2+i9/2,i,i10,i6,i9,Md426,dotrewrite-d426-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md426,dotrewrite-d426-5)
	#call replace(p3.p9,`Q2'/2-i4/2+i5/2-i8/2,i,i4,i5,i8,Md426,dotrewrite-d426-6)
	#call replace(p1.p10,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md426,dotrewrite-d426-7)
	#call replace(p3.p10,`Q2'/2+i11-i4/2+i5/2-i8/2,i,i11,i4,i5,i8,Md426,dotrewrite-d426-8)
#endif
#break
#case Q5
* path: (0, 7, 4, 5)
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p + p9.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p4.p + p5.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p6.p?!{p6,[P+p6],[P-p6],p1,p3} = + p4.p - p7.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	if (count(Md426,1)) id p1.p5 = i12 - i13;
	if (count(Md426,1)) id p1.p7 = i13 - i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md426,dotrewrite-d426-3)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md426,dotrewrite-d426-4)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md426,dotrewrite-d426-5)
	#call replace(p4.p7,i4/2-i6/2+i7/2,i,i4,i6,i7,Md426,dotrewrite-d426-6)
	#call replace(Q.p5,i3/2-i4/2-i8/2+i9/2,i,i3,i4,i8,i9,Md426,dotrewrite-d426-7)
	#call replace(p5.p7,-i11+i3/2-i5/2+i6/2-i7/2,i,i11,i3,i5,i6,i7,Md426,dotrewrite-d426-8)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 3, 4, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 3, 4, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 310
* path: (3, 4, 6, 10)
#case 38
* path: (3, 8)
#case 44
* path: (4,)
#case 46
* path: (4, 6)
#case 410
* path: (4, 6, 10)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md426,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md426-6;
	if (count(Md426,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md426-5;
	if (count(Md426,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md426-4;
	if (count(Md426,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md426-3;
	if (count(Md426,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p3.p;
	.sort:momrewrite-Md426-2;
	if (count(Md426,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md426-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd426()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md426,dotrewrite-d426-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md426,dotrewrite-d426-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md426,dotrewrite-d426-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md426,dotrewrite-d426-3)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md426,dotrewrite-d426-4)
	#call replace(Q.p6,i10/2+i4/2-i7/2-i9/2,i,i10,i4,i7,i9,Md426,dotrewrite-d426-5)
#endif
#break
#endswitch
#break
*--#] d426 : 
*--#[ d427 :
#case Md427
#procedure SimpleDotd427()
if (count(Md427,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p10.p10^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p3.p6^n? = i12^n;
	id p4.p5^n? = i13^n;
	id p4.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case 18
* path: (1, 2, 8)
#if ( `MOMS' > 0 )
	if (count(Md427,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md427-6;
	if (count(Md427,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = - p2.p - p8.p;
	.sort:momrewrite-Md427-5;
	if (count(Md427,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md427-4;
	if (count(Md427,1)) id p3.p?!{p3,[P+p3],[P-p3],p5,p6} = + Q.p + p8.p;
	.sort:momrewrite-Md427-3;
	if (count(Md427,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md427-2;
	if (count(Md427,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md427-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd427()
	if (count(Md427,1)) id p1.p5 = i11 + i13;
	if (count(Md427,1)) id p1.p6 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md427,dotrewrite-d427-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md427,dotrewrite-d427-3)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md427,dotrewrite-d427-4)
	#call replace(Q.p8,-`Q2'/2+i3/2-i8/2,i,i3,i8,Md427,dotrewrite-d427-5)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md427,dotrewrite-d427-6)
	#call replace(p1.p8,-`Q2'/2+i2/2+i3/2-i4/2,i,i2,i3,i4,Md427,dotrewrite-d427-7)
	#call replace(p5.p8,-`Q2'/2+i11-i5/2+i9/2,i,i11,i5,i9,Md427,dotrewrite-d427-8)
	#call replace(p6.p8,-i10/2+i12-i5/2+i7/2+i9/2,i,i10,i12,i5,i7,i9,Md427,dotrewrite-d427-9)
#endif
#break
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q5
* path: (0, 1, 3, 5)
#case Q6
* path: (0, 1, 3, 5, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 3)
#case 15
* path: (1, 3, 5)
#case 16
* path: (1, 3, 5, 6)
#case 18
* path: (1, 3, 8)
#if ( `MOMS' > 0 )
	if (count(Md427,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md427-6;
	if (count(Md427,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md427-5;
	if (count(Md427,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md427-4;
	if (count(Md427,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md427-3;
	if (count(Md427,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - Q.p;
	.sort:momrewrite-Md427-2;
	if (count(Md427,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md427-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd427()
	if (count(Md427,1)) id p1.p5 = i11 + i13;
	if (count(Md427,1)) id p1.p6 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md427,dotrewrite-d427-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md427,dotrewrite-d427-3)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md427,dotrewrite-d427-4)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md427,dotrewrite-d427-5)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md427,dotrewrite-d427-6)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md427,dotrewrite-d427-7)
#endif
#break
#case Q7
* path: (0, 1, 3, 5, 7)
#case 17
* path: (1, 3, 5, 7)
#if ( `MOMS' > 0 )
	if (count(Md427,1)) id p10.p?!{p10,[P+p10],[P-p10]} = + Q.p - p7.p;
	.sort:momrewrite-Md427-6;
	if (count(Md427,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md427-5;
	if (count(Md427,1)) id p4.p?!{p4,[P+p4],[P-p4],p5,p6} = + p1.p - p3.p;
	.sort:momrewrite-Md427-4;
	if (count(Md427,1)) id p6.p?!{p6,[P+p6],[P-p6],p3,p4} = + p5.p - p7.p;
	.sort:momrewrite-Md427-3;
	if (count(Md427,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - Q.p;
	.sort:momrewrite-Md427-2;
	if (count(Md427,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md427-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd427()
	if (count(Md427,1)) id p1.p5 = i11 + i13;
	if (count(Md427,1)) id p3.p7 = i11 - i12;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md427,dotrewrite-d427-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md427,dotrewrite-d427-3)
	#call replace(p1.p3,i1/2+i3/2-i4/2,i,i1,i3,i4,Md427,dotrewrite-d427-4)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md427,dotrewrite-d427-5)
	#call replace(Q.p7,`Q2'/2-i10/2+i7/2,i,i10,i7,Md427,dotrewrite-d427-6)
	#call replace(p5.p7,i5/2-i6/2+i7/2,i,i5,i6,i7,Md427,dotrewrite-d427-7)
	#call replace(p1.p7,i11-i12+i13-i14,i,i11,i12,i13,i14,Md427,dotrewrite-d427-8)
#endif
#break
#case Q4
* path: (0, 1, 4)
#case 14
* path: (1, 4)
#case 18
* path: (1, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md427,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md427-6;
	if (count(Md427,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p4.p - p2.p;
	.sort:momrewrite-Md427-5;
	if (count(Md427,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md427-4;
	if (count(Md427,1)) id p3.p?!{p3,[P+p3],[P-p3],p5,p6} = + p1.p - p4.p;
	.sort:momrewrite-Md427-3;
	if (count(Md427,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md427-2;
	if (count(Md427,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md427-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd427()
	if (count(Md427,1)) id p1.p5 = i11 + i13;
	if (count(Md427,1)) id p1.p6 = i12 + i14;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md427,dotrewrite-d427-2)
	#call replace(p1.p4,i1/2-i3/2+i4/2,i,i1,i3,i4,Md427,dotrewrite-d427-3)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md427,dotrewrite-d427-4)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md427,dotrewrite-d427-5)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md427,dotrewrite-d427-6)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md427,dotrewrite-d427-7)
#endif
#break
#default
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 35
* path: (3, 5)
#case 36
* path: (3, 5, 6)
#case 38
* path: (3, 8)
#case 44
* path: (4,)
#case 46
* path: (4, 3, 5, 6)
#if ( `MOMS' > 0 )
	if (count(Md427,1)) id p10.p?!{p10,[P+p10],[P-p10]} = - p7.p + Q.p;
	.sort:momrewrite-Md427-6;
	if (count(Md427,1)) id p2.p?!{p2,[P+p2],[P-p2]} = - p1.p + Q.p;
	.sort:momrewrite-Md427-5;
	if (count(Md427,1)) id p1.p?!{p1,[P+p1],[P-p1]} = + p3.p + p4.p;
	.sort:momrewrite-Md427-4;
	if (count(Md427,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p5.p - p6.p;
	.sort:momrewrite-Md427-3;
	if (count(Md427,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p - Q.p;
	.sort:momrewrite-Md427-2;
	if (count(Md427,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p5.p;
	.sort:momrewrite-Md427-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd427()
	#call replace(Q.p3,`Q2'/2+i3/2-i8/2,i,i3,i8,Md427,dotrewrite-d427-0)
	#call replace(p3.p4,i1/2-i3/2-i4/2,i,i1,i3,i4,Md427,dotrewrite-d427-1)
	#call replace(Q.p5,`Q2'/2+i5/2-i9/2,i,i5,i9,Md427,dotrewrite-d427-2)
	#call replace(p5.p6,i5/2+i6/2-i7/2,i,i5,i6,i7,Md427,dotrewrite-d427-3)
	#call replace(Q.p4,i1/2-i2/2-i3/2+i8/2,i,i1,i2,i3,i8,Md427,dotrewrite-d427-4)
	#call replace(Q.p6,i10/2+i5/2-i7/2-i9/2,i,i10,i5,i7,i9,Md427,dotrewrite-d427-5)
#endif
#break
#endswitch
#break
*--#] d427 : 
*--#[ d292 :
#case Md292
#procedure SimpleDotd292()
if (count(Md292,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + p5.p + p6.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	if (count(Md292,1)) id p1.p6 = i13 - i14;
	if (count(Md292,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md292,dotrewrite-d292-2)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md292,dotrewrite-d292-3)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md292,dotrewrite-d292-4)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md292,dotrewrite-d292-5)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md292,dotrewrite-d292-6)
#endif
#break
#case Q6
* path: (0, 2, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q2
* path: (0, 6, 4, 2)
#case Q1
* path: (0, 6, 4, 2, 1)
#case 16
* path: (1, 2, 4, 6)
#case 26
* path: (2, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p4.p - p6.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	if (count(Md292,1)) id p1.p6 = i13 - i14;
	if (count(Md292,1)) id p2.p6 = i10 - i11;
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md292,dotrewrite-d292-2)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md292,dotrewrite-d292-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md292,dotrewrite-d292-4)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md292,dotrewrite-d292-5)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md292,dotrewrite-d292-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case Q7
* path: (0, 6, 4, 7)
#case 17
* path: (1, 7)
#case 47
* path: (4, 7)
#case 67
* path: (6, 4, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p7.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p7.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p4.p - p6.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	if (count(Md292,1)) id p1.p6 = i13 - i14;
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md292,dotrewrite-d292-1)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md292,dotrewrite-d292-2)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md292,dotrewrite-d292-3)
	#call replace(Q.p7,-`Q2'/2+i2/2-i7/2,i,i2,i7,Md292,dotrewrite-d292-4)
	#call replace(p1.p7,-i1/2+i3/2-i7/2,i,i1,i3,i7,Md292,dotrewrite-d292-5)
	#call replace(p4.p7,-`Q2'/2+i10-i4/2+i8/2,i,i10,i4,i8,Md292,dotrewrite-d292-6)
	#call replace(p6.p7,-`Q2'/2+i10-i11-i6/2+i9/2,i,i10,i11,i6,i9,Md292,dotrewrite-d292-7)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p1.p - p3.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	#call replace(p1.p3,-i1/2-i3/2+i7/2,i,i1,i3,i7,Md292,dotrewrite-d292-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md292,dotrewrite-d292-1)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md292,dotrewrite-d292-2)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i7/2,i,i12,i2,i7,Md292,dotrewrite-d292-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md292,dotrewrite-d292-4)
	#call replace(p3.p4,`Q2'/2-i10-i13+i4/2-i8/2,i,i10,i13,i4,i8,Md292,dotrewrite-d292-5)
	#call replace(p3.p5,-i11-i14+i4/2-i6/2-i8/2+i9/2,i,i11,i14,i4,i6,i8,i9,Md292,dotrewrite-d292-6)
#endif
#break
#case 49
* path: (4, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p2} = + p4.p - p6.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md292,dotrewrite-d292-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md292,dotrewrite-d292-1)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md292,dotrewrite-d292-2)
	#call replace(p1.p9,i12-i13+i14,i,i12,i13,i14,Md292,dotrewrite-d292-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md292,dotrewrite-d292-4)
	#call replace(p4.p9,`Q2'/2+i5/2-i6/2-i8/2,i,i5,i6,i8,Md292,dotrewrite-d292-5)
	#call replace(p2.p9,`Q2'/2-i10+i11+i2/2-i7/2,i,i10,i11,i2,i7,Md292,dotrewrite-d292-6)
#endif
#break
#case 57
* path: (5, 4, 7)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p7.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p7.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md292,dotrewrite-d292-0)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md292,dotrewrite-d292-1)
	#call replace(Q.p7,-`Q2'/2+i2/2-i7/2,i,i2,i7,Md292,dotrewrite-d292-2)
	#call replace(p1.p7,-i1/2+i3/2-i7/2,i,i1,i3,i7,Md292,dotrewrite-d292-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md292,dotrewrite-d292-4)
	#call replace(p4.p7,-`Q2'/2+i10-i4/2+i8/2,i,i10,i4,i8,Md292,dotrewrite-d292-5)
	#call replace(p5.p7,i11-i4/2+i6/2+i8/2-i9/2,i,i11,i4,i6,i8,i9,Md292,dotrewrite-d292-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 4, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 4, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 25
* path: (2, 4, 5)
#case 27
* path: (2, 7)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 49
* path: (4, 5, 9)
#case 48
* path: (4, 8)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md292,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md292-5;
	if (count(Md292,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md292-4;
	if (count(Md292,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p2.p - Q.p;
	.sort:momrewrite-Md292-3;
	if (count(Md292,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md292-2;
	if (count(Md292,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md292-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd292()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md292,dotrewrite-d292-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md292,dotrewrite-d292-1)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md292,dotrewrite-d292-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md292,dotrewrite-d292-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md292,dotrewrite-d292-4)
#endif
#break
#endswitch
#break
*--#] d292 : 
*--#[ d294 :
#case Md294
#procedure SimpleDotd294()
if (count(Md294,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p3.p4^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q6
* path: (0, 1, 3, 4, 6)
#case Q6
* path: (0, 6)
#case Q4
* path: (0, 6, 4)
#case Q3
* path: (0, 6, 4, 3)
#case Q1
* path: (0, 6, 4, 3, 1)
#case 16
* path: (1, 3, 4, 6)
#case 36
* path: (3, 4, 6)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 9)
#if ( `MOMS' > 0 )
	if (count(Md294,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md294-5;
	if (count(Md294,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p4.p - p6.p;
	.sort:momrewrite-Md294-4;
	if (count(Md294,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md294-3;
	if (count(Md294,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md294-2;
	if (count(Md294,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md294-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd294()
	if (count(Md294,1)) id p1.p6 = i13 - i14;
	if (count(Md294,1)) id p3.p6 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md294,dotrewrite-d294-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md294,dotrewrite-d294-3)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md294,dotrewrite-d294-4)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md294,dotrewrite-d294-5)
	#call replace(p4.p6,i4/2-i5/2+i6/2,i,i4,i5,i6,Md294,dotrewrite-d294-6)
#endif
#break
#case Q5
* path: (0, 6, 5)
#case 56
* path: (5, 6)
#if ( `MOMS' > 0 )
	if (count(Md294,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p9.p - p5.p;
	.sort:momrewrite-Md294-5;
	if (count(Md294,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md294-4;
	if (count(Md294,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + p5.p + p6.p;
	.sort:momrewrite-Md294-3;
	if (count(Md294,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md294-2;
	if (count(Md294,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md294-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd294()
	if (count(Md294,1)) id p1.p6 = i13 - i14;
	if (count(Md294,1)) id p3.p6 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md294,dotrewrite-d294-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md294,dotrewrite-d294-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md294,dotrewrite-d294-4)
	#call replace(p5.p6,i4/2-i5/2-i6/2,i,i4,i5,i6,Md294,dotrewrite-d294-5)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md294,dotrewrite-d294-6)
#endif
#break
#case 49
* path: (4, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md294,1)) id p5.p?!{p5,[P+p5],[P-p5],p1,p3} = + p4.p - p6.p;
	.sort:momrewrite-Md294-5;
	if (count(Md294,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md294-4;
	if (count(Md294,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p9.p;
	.sort:momrewrite-Md294-3;
	if (count(Md294,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md294-2;
	if (count(Md294,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md294-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd294()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md294,dotrewrite-d294-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md294,dotrewrite-d294-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md294,dotrewrite-d294-2)
	#call replace(Q.p9,`Q2'/2-i6/2+i9/2,i,i6,i9,Md294,dotrewrite-d294-3)
	#call replace(p4.p9,`Q2'/2+i5/2-i6/2-i8/2,i,i5,i6,i8,Md294,dotrewrite-d294-4)
	#call replace(p1.p9,`Q2'/2+i1/2-i13+i14-i2/2,i,i1,i13,i14,i2,Md294,dotrewrite-d294-5)
	#call replace(p3.p9,`Q2'/2-i10+i11+i3/2-i7/2,i,i10,i11,i3,i7,Md294,dotrewrite-d294-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q5
* path: (0, 1, 3, 4, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 15
* path: (1, 3, 4, 5)
#case 33
* path: (3,)
#case 37
* path: (3, 1, 7)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 49
* path: (4, 5, 9)
#case 48
* path: (4, 8)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md294,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p + Q.p;
	.sort:momrewrite-Md294-5;
	if (count(Md294,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md294-4;
	if (count(Md294,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p4.p - p5.p;
	.sort:momrewrite-Md294-3;
	if (count(Md294,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md294-2;
	if (count(Md294,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md294-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd294()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md294,dotrewrite-d294-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md294,dotrewrite-d294-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md294,dotrewrite-d294-2)
	#call replace(p4.p5,i4/2+i5/2-i6/2,i,i4,i5,i6,Md294,dotrewrite-d294-3)
	#call replace(Q.p5,i4/2-i6/2-i8/2+i9/2,i,i4,i6,i8,i9,Md294,dotrewrite-d294-4)
#endif
#break
#endswitch
#break
*--#] d294 : 
*--#[ d291 :
#case Md291
#procedure SimpleDotd291()
if (count(Md291,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p3.p4^n? = i9^n;
	id p3.p5^n? = i10^n;
	id p4.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q5
* path: (0, 1, 3, 4, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 12
* path: (1, 3, 2)
#case 14
* path: (1, 3, 4)
#case 15
* path: (1, 3, 4, 5)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md291,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md291-4;
	if (count(Md291,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md291-3;
	if (count(Md291,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md291-2;
	if (count(Md291,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p5.p;
	.sort:momrewrite-Md291-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd291()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md291,dotrewrite-d291-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md291,dotrewrite-d291-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md291,dotrewrite-d291-2)
	#call replace(Q.p5,`Q2'/2+i5/2-i8/2,i,i5,i8,Md291,dotrewrite-d291-3)
#endif
#break
#endswitch
#break
*--#] d291 : 
*--#[ d290 :
#case Md290
#procedure SimpleDotd290()
if (count(Md290,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p3.p4^n? = i10^n;
	id p3.p5^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 1, 3, 7)
#case 17
* path: (1, 3, 7)
#case 37
* path: (3, 7)
#case 57
* path: (5, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md290,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md290-4;
	if (count(Md290,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p3} = + Q.p - p7.p;
	.sort:momrewrite-Md290-3;
	if (count(Md290,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md290-2;
	if (count(Md290,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md290-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd290()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md290,dotrewrite-d290-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md290,dotrewrite-d290-1)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md290,dotrewrite-d290-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md290,dotrewrite-d290-3)
	#call replace(p1.p7,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md290,dotrewrite-d290-4)
	#call replace(p3.p7,`Q2'/2-i10+i3/2-i6/2,i,i10,i3,i6,Md290,dotrewrite-d290-5)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q5
* path: (0, 1, 3, 4, 5)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case Q7
* path: (0, 4, 7)
#case Q5
* path: (0, 5)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 15
* path: (1, 3, 4, 5)
#case 33
* path: (3,)
#case 36
* path: (3, 1, 6)
#case 34
* path: (3, 4)
#case 35
* path: (3, 4, 5)
#case 44
* path: (4,)
#case 45
* path: (4, 5)
#case 47
* path: (4, 7)
#case 55
* path: (5,)
#case 58
* path: (5, 4, 8)
#if ( `MOMS' > 0 )
	if (count(Md290,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md290-4;
	if (count(Md290,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md290-3;
	if (count(Md290,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + Q.p - p3.p;
	.sort:momrewrite-Md290-2;
	if (count(Md290,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md290-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd290()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md290,dotrewrite-d290-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i6/2,i,i3,i6,Md290,dotrewrite-d290-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md290,dotrewrite-d290-2)
	#call replace(p4.p5,i5/2+i7/2-i8/2+i9,i,i5,i7,i8,i9,Md290,dotrewrite-d290-3)
#endif
#break
#endswitch
#break
*--#] d290 : 
*--#[ d288 :
#case Md288
#procedure SimpleDotd288()
if (count(Md288,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id Q.p5^n? = i9^n;
	id p2.p4^n? = i10^n;
	id p2.p5^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p5^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q7
* path: (0, 2, 7)
#case 17
* path: (1, 2, 7)
#case 27
* path: (2, 7)
#if ( `MOMS' > 0 )
	if (count(Md288,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + Q.p - p7.p;
	.sort:momrewrite-Md288-4;
	if (count(Md288,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p;
	.sort:momrewrite-Md288-3;
	if (count(Md288,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md288-2;
	if (count(Md288,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md288-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd288()
	if (count(Md288,1)) id p1.p7 = i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md288,dotrewrite-d288-1)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md288,dotrewrite-d288-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md288,dotrewrite-d288-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md288,dotrewrite-d288-4)
	#call replace(p2.p7,`Q2'/2-i10+i2/2-i6/2,i,i10,i2,i6,Md288,dotrewrite-d288-5)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md288,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md288-4;
	if (count(Md288,1)) id p6.p?!{p6,[P+p6],[P-p6]} = - p1.p - p3.p;
	.sort:momrewrite-Md288-3;
	if (count(Md288,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md288-2;
	if (count(Md288,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md288-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd288()
	#call replace(p1.p3,-i1/2-i3/2+i6/2,i,i1,i3,i6,Md288,dotrewrite-d288-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md288,dotrewrite-d288-1)
	#call replace(p3.p5,-i11-i14+i9,i,i11,i14,i9,Md288,dotrewrite-d288-2)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i6/2,i,i12,i2,i6,Md288,dotrewrite-d288-3)
	#call replace(p4.p5,i5/2+i7/2-i8/2+i9,i,i5,i7,i8,i9,Md288,dotrewrite-d288-4)
	#call replace(p3.p4,`Q2'/2-i10-i13+i4/2-i7/2,i,i10,i13,i4,i7,Md288,dotrewrite-d288-5)
#endif
#break
#case Q6
* path: (0, 1, 6)
#case 16
* path: (1, 6)
#case 66
* path: (6,)
#if ( `MOMS' > 0 )
	if (count(Md288,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md288-4;
	if (count(Md288,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p6.p;
	.sort:momrewrite-Md288-3;
	if (count(Md288,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p6.p;
	.sort:momrewrite-Md288-2;
	if (count(Md288,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md288-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd288()
	if (count(Md288,1)) id p5.p6 = i11 - i9;
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md288,dotrewrite-d288-1)
	#call replace(Q.p6,-`Q2'/2+i2/2-i6/2,i,i2,i6,Md288,dotrewrite-d288-2)
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md288,dotrewrite-d288-3)
	#call replace(p4.p5,i5/2+i7/2-i8/2+i9,i,i5,i7,i8,i9,Md288,dotrewrite-d288-4)
	#call replace(p4.p6,-`Q2'/2+i10-i4/2+i7/2,i,i10,i4,i7,Md288,dotrewrite-d288-5)
#endif
#break
#case 67
* path: (6, 7)
#if ( `MOMS' > 0 )
	if (count(Md288,1)) id p2.p?!{p2,[P+p2],[P-p2],p4,p5} = + Q.p + p6.p;
	.sort:momrewrite-Md288-4;
	if (count(Md288,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p1.p - p6.p;
	.sort:momrewrite-Md288-3;
	if (count(Md288,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p2} = + Q.p - p7.p;
	.sort:momrewrite-Md288-2;
	if (count(Md288,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md288-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd288()
	if (count(Md288,1)) id p5.p6 = i11 - i9;
	if (count(Md288,1)) id p1.p7 = i12 - i13;
	#call replace(Q.p6,-`Q2'/2+i2/2-i6/2,i,i2,i6,Md288,dotrewrite-d288-2)
	#call replace(p1.p6,-i1/2+i3/2-i6/2,i,i1,i3,i6,Md288,dotrewrite-d288-3)
	#call replace(Q.p7,`Q2'/2-i4/2+i7/2,i,i4,i7,Md288,dotrewrite-d288-4)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md288,dotrewrite-d288-5)
	#call replace(p6.p7,-i10+i2/2+i4/2-i6/2-i7/2,i,i10,i2,i4,i6,i7,Md288,dotrewrite-d288-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q5
* path: (0, 2, 4, 5)
#case Q6
* path: (0, 2, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 2, 4)
#case 15
* path: (1, 2, 4, 5)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#case 26
* path: (2, 6)
#if ( `MOMS' > 0 )
	if (count(Md288,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md288-4;
	if (count(Md288,1)) id p6.p?!{p6,[P+p6],[P-p6]} = + p2.p - Q.p;
	.sort:momrewrite-Md288-3;
	if (count(Md288,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p;
	.sort:momrewrite-Md288-2;
	if (count(Md288,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md288-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd288()
	#call replace(Q.p2,`Q2'/2+i2/2-i6/2,i,i2,i6,Md288,dotrewrite-d288-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i7/2,i,i4,i7,Md288,dotrewrite-d288-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i6/2,i,i1,i12,i3,i6,Md288,dotrewrite-d288-2)
	#call replace(p4.p5,i5/2+i7/2-i8/2+i9,i,i5,i7,i8,i9,Md288,dotrewrite-d288-3)
#endif
#break
#endswitch
#break
*--#] d288 : 
*--#[ d297 :
#case Md297
#procedure SimpleDotd297()
if (count(Md297,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id p3.p6^n? = i10^n;
	id p4.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md297,1)) id p8.p?!{p8,[P+p8],[P-p8]} = - p5.p - p7.p;
	.sort:momrewrite-Md297-5;
	if (count(Md297,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md297-4;
	if (count(Md297,1)) id p4.p?!{p4,[P+p4],[P-p4],p1,p6} = + p3.p - p5.p;
	.sort:momrewrite-Md297-3;
	if (count(Md297,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md297-2;
	if (count(Md297,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md297-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd297()
	if (count(Md297,1)) id p1.p5 = i12 - i13;
	if (count(Md297,1)) id p5.p6 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md297,dotrewrite-d297-2)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md297,dotrewrite-d297-3)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md297,dotrewrite-d297-4)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md297,dotrewrite-d297-5)
	#call replace(Q.p5,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md297,dotrewrite-d297-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 3, 4, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 12
* path: (1, 3, 2)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 3, 4, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 38
* path: (3, 4, 8)
#case 37
* path: (3, 7)
#if ( `MOMS' > 0 )
	if (count(Md297,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md297-5;
	if (count(Md297,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md297-4;
	if (count(Md297,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md297-3;
	if (count(Md297,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p4.p - Q.p;
	.sort:momrewrite-Md297-2;
	if (count(Md297,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p6.p;
	.sort:momrewrite-Md297-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd297()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md297,dotrewrite-d297-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md297,dotrewrite-d297-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md297,dotrewrite-d297-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md297,dotrewrite-d297-3)
	#call replace(Q.p6,`Q2'/2+i6/2-i9/2,i,i6,i9,Md297,dotrewrite-d297-4)
#endif
#break
#endswitch
#break
*--#] d297 : 
*--#[ d298 :
#case Md298
#procedure SimpleDotd298()
if (count(Md298,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p3.p6^n? = i11^n;
	id p1.p3^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 1, 3, 5)
#case 15
* path: (1, 3, 5)
#case 35
* path: (3, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	if (count(Md298,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-1)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md298,dotrewrite-d298-2)
	#call replace(p3.p5,i3/2-i4/2+i5/2,i,i3,i4,i5,Md298,dotrewrite-d298-3)
	#call replace(Q.p5,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md298,dotrewrite-d298-4)
	#call replace(p5.p6,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md298,dotrewrite-d298-5)
#endif
#break
#case Q5
* path: (0, 4, 5)
#case 45
* path: (4, 5)
#case 48
* path: (4, 5, 8)
#case 56
* path: (5, 4, 6)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + p4.p + p5.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p4.p - p5.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	if (count(Md298,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md298,dotrewrite-d298-2)
	#call replace(p4.p5,i3/2-i4/2-i5/2,i,i3,i4,i5,Md298,dotrewrite-d298-3)
	#call replace(Q.p5,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md298,dotrewrite-d298-4)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md298,dotrewrite-d298-5)
	#call replace(p5.p6,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md298,dotrewrite-d298-6)
#endif
#break
#case Q7
* path: (0, 1, 7)
#case 17
* path: (1, 7)
#case 77
* path: (7,)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p3.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + Q.p - p7.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	if (count(Md298,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md298,dotrewrite-d298-2)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md298,dotrewrite-d298-3)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md298,dotrewrite-d298-4)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md298,dotrewrite-d298-5)
	#call replace(p4.p7,`Q2'/2-i3/2+i5/2-i8/2,i,i3,i5,i8,Md298,dotrewrite-d298-6)
#endif
#break
#case 58
* path: (5, 8)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p8.p - p5.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + Q.p + p5.p - p8.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	if (count(Md298,1)) id p1.p5 = i12 - i13;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md298,dotrewrite-d298-2)
	#call replace(p5.p8,i5/2-i7/2+i8/2,i,i5,i7,i8,Md298,dotrewrite-d298-3)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md298,dotrewrite-d298-4)
	#call replace(Q.p5,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md298,dotrewrite-d298-5)
	#call replace(p1.p8,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md298,dotrewrite-d298-6)
	#call replace(p5.p6,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md298,dotrewrite-d298-7)
#endif
#break
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p3.p - p5.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + Q.p - p7.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	if (count(Md298,1)) id p1.p5 = i12 - i13;
	if (count(Md298,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-2)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md298,dotrewrite-d298-3)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md298,dotrewrite-d298-4)
	#call replace(Q.p5,i3/2-i4/2-i7/2+i8/2,i,i3,i4,i7,i8,Md298,dotrewrite-d298-5)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md298,dotrewrite-d298-6)
	#call replace(p5.p6,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md298,dotrewrite-d298-7)
#endif
#break
#case Q8
* path: (0, 6, 8)
#case 38
* path: (3, 5, 8)
#case 68
* path: (6, 8)
#case 88
* path: (8,)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p8.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md298,dotrewrite-d298-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md298,dotrewrite-d298-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md298,dotrewrite-d298-3)
	#call replace(p1.p8,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md298,dotrewrite-d298-4)
	#call replace(p3.p8,`Q2'/2-i4/2+i5/2-i7/2,i,i4,i5,i7,Md298,dotrewrite-d298-5)
#endif
#break
#case Q8
* path: (0, 1, 7, 8)
#case 18
* path: (1, 7, 8)
#case 67
* path: (6, 8, 7)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p3.p?!{p3,[P+p3],[P-p3],p1,p6} = + Q.p - p7.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p7.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	if (count(Md298,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-1)
	#call replace(Q.p7,`Q2'/2-i3/2+i7/2,i,i3,i7,Md298,dotrewrite-d298-2)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md298,dotrewrite-d298-3)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md298,dotrewrite-d298-4)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md298,dotrewrite-d298-5)
	#call replace(p1.p7,`Q2'/2+i1/2-i12-i2/2,i,i1,i12,i2,Md298,dotrewrite-d298-6)
	#call replace(p1.p8,`Q2'/2+i1/2-i13-i2/2,i,i1,i13,i2,Md298,dotrewrite-d298-7)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q3
* path: (0, 1, 3)
#case Q4
* path: (0, 1, 3, 4)
#case Q6
* path: (0, 1, 3, 4, 6)
#case Q4
* path: (0, 4)
#case Q3
* path: (0, 4, 3)
#case Q1
* path: (0, 4, 3, 1)
#case Q7
* path: (0, 4, 3, 7)
#case Q6
* path: (0, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 0, 2)
#case 13
* path: (1, 3)
#case 14
* path: (1, 3, 4)
#case 16
* path: (1, 3, 4, 6)
#case 33
* path: (3,)
#case 34
* path: (3, 4)
#case 36
* path: (3, 4, 6)
#case 37
* path: (3, 7)
#case 44
* path: (4,)
#case 47
* path: (4, 3, 7)
#case 46
* path: (4, 6)
#case 66
* path: (6,)
#case 69
* path: (6, 4, 9)
#if ( `MOMS' > 0 )
	if (count(Md298,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md298-5;
	if (count(Md298,1)) id p2.p?!{p2,[P+p2],[P-p2]} = + Q.p - p1.p;
	.sort:momrewrite-Md298-4;
	if (count(Md298,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p3.p - p4.p;
	.sort:momrewrite-Md298-3;
	if (count(Md298,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p3.p;
	.sort:momrewrite-Md298-2;
	if (count(Md298,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md298-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd298()
	#call replace(Q.p1,`Q2'/2+i1/2-i2/2,i,i1,i2,Md298,dotrewrite-d298-0)
	#call replace(Q.p3,`Q2'/2+i3/2-i7/2,i,i3,i7,Md298,dotrewrite-d298-1)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md298,dotrewrite-d298-2)
	#call replace(p3.p4,i3/2+i4/2-i5/2,i,i3,i4,i5,Md298,dotrewrite-d298-3)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md298,dotrewrite-d298-4)
#endif
#break
#endswitch
#break
*--#] d298 : 
*--#[ d301 :
#case Md301
#procedure SimpleDotd301()
if (count(Md301,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p2.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q1
* path: (0, 1)
#case Q7
* path: (0, 1, 7)
#case Q8
* path: (0, 1, 7, 8)
#case 11
* path: (1,)
#case 17
* path: (1, 7)
#case 18
* path: (1, 7, 8)
#case 27
* path: (2, 1, 7)
#case 77
* path: (7,)
#case 78
* path: (7, 8)
#if ( `MOMS' > 0 )
	if (count(Md301,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p7.p;
	.sort:momrewrite-Md301-5;
	if (count(Md301,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md301-4;
	if (count(Md301,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md301-3;
	if (count(Md301,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p8.p - p7.p;
	.sort:momrewrite-Md301-2;
	if (count(Md301,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md301-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd301()
	if (count(Md301,1)) id p6.p7 = i10 - i11;
	if (count(Md301,1)) id p1.p8 = i12 - i13;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md301,dotrewrite-d301-2)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md301,dotrewrite-d301-3)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md301,dotrewrite-d301-4)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md301,dotrewrite-d301-5)
	#call replace(p7.p8,-i5/2+i7/2+i8/2,i,i5,i7,i8,Md301,dotrewrite-d301-6)
#endif
#break
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md301,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md301-5;
	if (count(Md301,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p7.p + p5.p;
	.sort:momrewrite-Md301-4;
	if (count(Md301,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p5.p;
	.sort:momrewrite-Md301-3;
	if (count(Md301,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md301-2;
	if (count(Md301,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md301-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd301()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md301,dotrewrite-d301-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md301,dotrewrite-d301-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md301,dotrewrite-d301-2)
	#call replace(Q.p5,i2/2-i4/2-i7/2+i8/2,i,i2,i4,i7,i8,Md301,dotrewrite-d301-3)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md301,dotrewrite-d301-4)
	#call replace(p5.p6,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md301,dotrewrite-d301-5)
#endif
#break
#case Q8
* path: (0, 2, 5, 8)
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md301,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p8.p;
	.sort:momrewrite-Md301-5;
	if (count(Md301,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md301-4;
	if (count(Md301,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md301-3;
	if (count(Md301,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md301-2;
	if (count(Md301,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md301-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd301()
	if (count(Md301,1)) id p1.p8 = i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md301,dotrewrite-d301-1)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md301,dotrewrite-d301-2)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md301,dotrewrite-d301-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md301,dotrewrite-d301-4)
	#call replace(p2.p8,`Q2'/2-i4/2+i5/2-i7/2,i,i4,i5,i7,Md301,dotrewrite-d301-5)
#endif
#break
#case 27
* path: (2, 5, 7)
#case 55
* path: (5,)
#case 57
* path: (5, 7)
#if ( `MOMS' > 0 )
	if (count(Md301,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p5.p;
	.sort:momrewrite-Md301-5;
	if (count(Md301,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md301-4;
	if (count(Md301,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p7.p;
	.sort:momrewrite-Md301-3;
	if (count(Md301,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p7.p - p1.p;
	.sort:momrewrite-Md301-2;
	if (count(Md301,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p5.p + p7.p;
	.sort:momrewrite-Md301-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd301()
	if (count(Md301,1)) id p6.p7 = i10 - i11;
	#call replace(Q.p7,`Q2'/2-i2/2+i7/2,i,i2,i7,Md301,dotrewrite-d301-1)
	#call replace(p1.p7,i1/2-i3/2+i7/2,i,i1,i3,i7,Md301,dotrewrite-d301-2)
	#call replace(p5.p7,-i5/2-i7/2+i8/2,i,i5,i7,i8,Md301,dotrewrite-d301-3)
	#call replace(Q.p5,i2/2-i4/2-i7/2+i8/2,i,i2,i4,i7,i8,Md301,dotrewrite-d301-4)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i7/2,i,i1,i12,i13,i3,i7,Md301,dotrewrite-d301-5)
	#call replace(p5.p6,-i10+i11-i6/2-i8/2+i9/2,i,i10,i11,i6,i8,i9,Md301,dotrewrite-d301-6)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md301,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p7.p + p8.p;
	.sort:momrewrite-Md301-5;
	if (count(Md301,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p8.p;
	.sort:momrewrite-Md301-4;
	if (count(Md301,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p1.p + p3.p;
	.sort:momrewrite-Md301-3;
	if (count(Md301,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md301-2;
	if (count(Md301,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md301-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd301()
	if (count(Md301,1)) id p1.p8 = i12 - i13;
	#call replace(p1.p3,-i1/2-i3/2+i7/2,i,i1,i3,i7,Md301,dotrewrite-d301-1)
	#call replace(p3.p6,i10-i11-i14,i,i10,i11,i14,Md301,dotrewrite-d301-2)
	#call replace(Q.p8,`Q2'/2-i4/2+i8/2,i,i4,i8,Md301,dotrewrite-d301-3)
	#call replace(p6.p8,-i6/2-i8/2+i9/2,i,i6,i8,i9,Md301,dotrewrite-d301-4)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i7/2,i,i12,i2,i7,Md301,dotrewrite-d301-5)
	#call replace(p3.p8,-i12+i13-i5/2+i7/2+i8/2,i,i12,i13,i5,i7,i8,Md301,dotrewrite-d301-6)
#endif
#break
#default
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q6
* path: (0, 2, 4, 6)
#case 12
* path: (1, 2)
#case 13
* path: (1, 2, 3)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 2, 4, 6)
#case 22
* path: (2,)
#case 24
* path: (2, 4)
#if ( `MOMS' > 0 )
	if (count(Md301,1)) id p9.p?!{p9,[P+p9],[P-p9]} = - p6.p - p8.p;
	.sort:momrewrite-Md301-5;
	if (count(Md301,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md301-4;
	if (count(Md301,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + Q.p - p2.p;
	.sort:momrewrite-Md301-3;
	if (count(Md301,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p4.p;
	.sort:momrewrite-Md301-2;
	if (count(Md301,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md301-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd301()
	#call replace(Q.p2,`Q2'/2+i2/2-i7/2,i,i2,i7,Md301,dotrewrite-d301-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i8/2,i,i4,i8,Md301,dotrewrite-d301-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md301,dotrewrite-d301-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i7/2,i,i1,i12,i3,i7,Md301,dotrewrite-d301-3)
	#call replace(p4.p6,i10+i6/2+i8/2-i9/2,i,i10,i6,i8,i9,Md301,dotrewrite-d301-4)
#endif
#break
#endswitch
#break
*--#] d301 : 
*--#[ d304 :
#case Md304
#procedure SimpleDotd304()
if (count(Md304,1));
	id Q.Q^n? = `Q2'^n;
	id p1.p1^n? = i1^n;
	id p2.p2^n? = i2^n;
	id p3.p3^n? = i3^n;
	id p4.p4^n? = i4^n;
	id p5.p5^n? = i5^n;
	id p6.p6^n? = i6^n;
	id p7.p7^n? = i7^n;
	id p8.p8^n? = i8^n;
	id p9.p9^n? = i9^n;
	id Q.p6^n? = i10^n;
	id p2.p6^n? = i11^n;
	id Q.p1^n? = i12^n;
	id p1.p4^n? = i13^n;
	id p1.p6^n? = i14^n;
endif;
#endprocedure
#switch `SUBTOPO'
#case Q5
* path: (0, 2, 5)
#case 15
* path: (1, 2, 5)
#case 25
* path: (2, 5)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p8.p + p5.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p5.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md304,dotrewrite-d304-0)
	#call replace(p2.p5,i2/2-i4/2+i5/2,i,i2,i4,i5,Md304,dotrewrite-d304-1)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md304,dotrewrite-d304-2)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md304,dotrewrite-d304-3)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md304,dotrewrite-d304-4)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md304,dotrewrite-d304-5)
#endif
#break
#case Q9
* path: (0, 1, 8, 9)
#case 19
* path: (1, 8, 9)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p9.p - p8.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	if (count(Md304,1)) id p6.p8 = i10 - i11;
	if (count(Md304,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md304,dotrewrite-d304-2)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md304,dotrewrite-d304-3)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md304,dotrewrite-d304-4)
	#call replace(p8.p9,-i5/2+i8/2+i9/2,i,i5,i8,i9,Md304,dotrewrite-d304-5)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md304,dotrewrite-d304-6)
#endif
#break
#case 29
* path: (2, 5, 9)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p8.p + p9.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + Q.p - p9.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	if (count(Md304,1)) id p1.p9 = i12 - i13;
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md304,dotrewrite-d304-1)
	#call replace(Q.p9,`Q2'/2-i4/2+i9/2,i,i4,i9,Md304,dotrewrite-d304-2)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md304,dotrewrite-d304-3)
	#call replace(p2.p9,`Q2'/2-i4/2+i5/2-i8/2,i,i4,i5,i8,Md304,dotrewrite-d304-4)
	#call replace(p6.p9,i10-i4/2-i6/2+i7/2,i,i10,i4,i6,i7,Md304,dotrewrite-d304-5)
#endif
#break
#case Q8
* path: (0, 1, 8)
#case 18
* path: (1, 8)
#case 13
* path: (1, 8, 3)
#case 48
* path: (4, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	if (count(Md304,1)) id p6.p8 = i10 - i11;
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md304,dotrewrite-d304-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md304,dotrewrite-d304-2)
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md304,dotrewrite-d304-3)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md304,dotrewrite-d304-4)
	#call replace(p4.p8,`Q2'/2-i2/2+i5/2-i9/2,i,i2,i5,i9,Md304,dotrewrite-d304-5)
#endif
#break
#case 13
* path: (1, 0, 3)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p5.p?!{p5,[P+p5],[P-p5]} = - p4.p + p2.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p1.p + p3.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p1.p - p3.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	#call replace(p1.p3,-i1/2-i3/2+i8/2,i,i1,i3,i8,Md304,dotrewrite-d304-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md304,dotrewrite-d304-1)
	#call replace(p3.p6,i10-i11-i14,i,i10,i11,i14,Md304,dotrewrite-d304-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md304,dotrewrite-d304-3)
	#call replace(Q.p3,`Q2'/2-i12-i2/2+i8/2,i,i12,i2,i8,Md304,dotrewrite-d304-4)
	#call replace(p3.p4,`Q2'/2-i13-i2/2+i5/2-i9/2,i,i13,i2,i5,i9,Md304,dotrewrite-d304-5)
#endif
#break
#case 45
* path: (4, 5)
#case 55
* path: (5,)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + p3.p + p1.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = - p2.p - p1.p + Q.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + p4.p + p5.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md304,dotrewrite-d304-0)
	#call replace(p4.p5,i2/2-i4/2-i5/2,i,i2,i4,i5,Md304,dotrewrite-d304-1)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md304,dotrewrite-d304-2)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md304,dotrewrite-d304-3)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md304,dotrewrite-d304-4)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md304,dotrewrite-d304-5)
#endif
#break
#case 15
* path: (1, 8, 5)
#case 28
* path: (2, 5, 8)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = - p6.p + p4.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p4.p?!{p4,[P+p4],[P-p4],p1} = + p2.p - p5.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p2.p?!{p2,[P+p2],[P-p2],p6} = + Q.p - p8.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + p8.p - p1.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + p5.p + p8.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	if (count(Md304,1)) id p6.p8 = i10 - i11;
	#call replace(Q.p8,`Q2'/2-i2/2+i8/2,i,i2,i8,Md304,dotrewrite-d304-1)
	#call replace(p1.p8,i1/2-i3/2+i8/2,i,i1,i3,i8,Md304,dotrewrite-d304-2)
	#call replace(p5.p8,-i5/2-i8/2+i9/2,i,i5,i8,i9,Md304,dotrewrite-d304-3)
	#call replace(Q.p5,i2/2-i4/2-i8/2+i9/2,i,i2,i4,i8,i9,Md304,dotrewrite-d304-4)
	#call replace(p5.p6,i11-i4/2-i6/2+i7/2,i,i11,i4,i6,i7,Md304,dotrewrite-d304-5)
	#call replace(p1.p5,-i1/2+i12-i13+i3/2-i8/2,i,i1,i12,i13,i3,i8,Md304,dotrewrite-d304-6)
#endif
#break
#default
#case Q1
* path: (0, 1)
#case Q2
* path: (0, 2)
#case Q4
* path: (0, 2, 4)
#case Q6
* path: (0, 2, 4, 6)
#case 11
* path: (1,)
#case 12
* path: (1, 2)
#case 14
* path: (1, 2, 4)
#case 16
* path: (1, 2, 4, 6)
#case 22
* path: (2,)
#case 28
* path: (2, 1, 8)
#case 24
* path: (2, 4)
#case 44
* path: (4,)
#if ( `MOMS' > 0 )
	if (count(Md304,1)) id p5.p?!{p5,[P+p5],[P-p5]} = + p2.p - p4.p;
	.sort:momrewrite-Md304-5;
	if (count(Md304,1)) id p7.p?!{p7,[P+p7],[P-p7]} = + p4.p - p6.p;
	.sort:momrewrite-Md304-4;
	if (count(Md304,1)) id p8.p?!{p8,[P+p8],[P-p8]} = + Q.p - p2.p;
	.sort:momrewrite-Md304-3;
	if (count(Md304,1)) id p9.p?!{p9,[P+p9],[P-p9]} = + Q.p - p4.p;
	.sort:momrewrite-Md304-2;
	if (count(Md304,1)) id p3.p?!{p3,[P+p3],[P-p3]} = + Q.p - p1.p - p2.p;
	.sort:momrewrite-Md304-1;
#endif
#if ( `DOTS' > 0 )
	#call SimpleDotd304()
	#call replace(Q.p2,`Q2'/2+i2/2-i8/2,i,i2,i8,Md304,dotrewrite-d304-0)
	#call replace(Q.p4,`Q2'/2+i4/2-i9/2,i,i4,i9,Md304,dotrewrite-d304-1)
	#call replace(p2.p4,i2/2+i4/2-i5/2,i,i2,i4,i5,Md304,dotrewrite-d304-2)
	#call replace(p4.p6,i4/2+i6/2-i7/2,i,i4,i6,i7,Md304,dotrewrite-d304-3)
	#call replace(p1.p2,-i1/2+i12+i3/2-i8/2,i,i1,i12,i3,i8,Md304,dotrewrite-d304-4)
#endif
#break
#endswitch
#break
*--#] d304 : 
#endswitch
#endprocedure
