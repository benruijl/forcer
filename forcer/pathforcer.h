#ifndef `FORCERMAINHFILE'
#define FORCERMAINHFILE
*--#[ setup :

AutoDeclare CFunction Z,Y;
AutoDeclare Symbol M,i,j;
Symbol Q2;
#ifndef `SETQONE'
    #define SETQONE "1"
#endif
#if `SETQONE'
    #define Q2 "1"
#else
    #define Q2 "Q2"
#endif

#ifndef `SORTLIMIT'
    #define SORTLIMIT "0"
#endif

#include- forcer-aux.h
#include- forcer-rules.h
#include- turbo.h

*--#] setup : 
*--#[ DoForcer :

#procedure DoForcer()
*--#[ topocount :
#do i={no2,no1,haha,la4,j1,j6,j2,j5,j11,no3,j4,no6,lala,nono,cross,bebe,bubu,\
lastar5,nostar0,nostar5,nostar6,bustar5,fastar2,fastar3,t1star05,t1star24,\
t1star34,t1star45,t1star55,\
d1,...,d438}
	#define HASTOPO`i' "0"
	if (count(M`i',1)) redefine HASTOPO`i' "1";
#enddo
.sort:topocount;
*--#] topocount : 
*--#[ 11 edges :
*--#[ reduce-j4 :
#procedure Preparej4()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-4 3-5 4-5 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5
* Apply automorphisms
if (match(Mj4*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n5+$n3+$n8)
	#call hash(1,$n14,$n13,$n12,$n11,$n4,$n3,$n8,$n5,$n6,$n7,$n10,$n9,$n1,$n2,$n7+$n9+$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i9,i4,i10,i5,i7,i7,i5,i9,i3,i10,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zj4 automorphism;

#call CheckRemovedPropagators(j4,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj4M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12);
	#call replace(i1,j1+j10+2*j11-2*j13-j7,j,j1,j7,j10,j11,j13,Mj4M1,dotmapMj4M1R1)
	#call replace(i14,j12-j14+j2/2-j5/2+j6/2-j7/2,j,j2,j5,j6,j7,j12,j14,Mj4M1,dotmapMj4M1R2)
	if (count(Mj4M1,1)) Multiply replace_(Mj4M1,Md386,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd386 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj4M2,1)) Multiply replace_(i1,j1,i3,j8,i4,j9,i5,j6,i6,j5,i7,j4,i8,j7,i9,j2,i10,j3,i11,j10);
	#call replace(i2,j1+j10+2*j11-2*j13-j7,j,j1,j7,j10,j11,j13,Mj4M2,dotmapMj4M2R1)
	#call replace(i12,`Q2'/2-j10/2-j11+j7/2,j,j7,j10,j11,Mj4M2,dotmapMj4M2R2)
	#call replace(i13,`Q2'/2-j10/2+j12+j7/2,j,j7,j10,j12,Mj4M2,dotmapMj4M2R3)
	#call replace(i14,-j10/2+j13+j14+j3/2-j5/2+j6/2+j8/2-j9/2,j,j3,j5,j6,j8,j9,j10,j13,j14,Mj4M2,dotmapMj4M2R4)
	if (count(Mj4M2,1)) Multiply replace_(Mj4M2,Md386,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd386 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mj4M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i3,j1-2*j13+j3,j,j1,j3,j13,Mj4M3,dotmapMj4M3R1)
	#call replace(i12,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Mj4M3,dotmapMj4M3R2)
	#call replace(i13,`Q2'/2-j10/2+j12+j7/2,j,j7,j10,j12,Mj4M3,dotmapMj4M3R3)
	#call replace(i14,j1/2-j10/2+j11-j13+j14+j7/2-j8/2+j9/2,j,j1,j7,j8,j9,j10,j11,j13,j14,Mj4M3,dotmapMj4M3R4)
	if (count(Mj4M3,1)) Multiply replace_(Mj4M3,Md387,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd387 "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4 and change topology to d388
	if (count(Mj4M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j14);
	#call replace(i4,j1-2*j13+j3,j,j1,j3,j13,Mj4M4,dotmapMj4M4R1)
	if (count(Mj4M4,1)) Multiply replace_(Mj4M4,Md388,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd388 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d389
	if (count(Mj4M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i5,-2*j14+j3+j5,j,j3,j5,j14,Mj4M5,dotmapMj4M5R1)
	#call replace(i13,j11-j12,j,j11,j12,Mj4M5,dotmapMj4M5R2)
	#call replace(i14,j1/2-j13+j3/2-j4/2,j,j1,j3,j4,j13,Mj4M5,dotmapMj4M5R3)
	if (count(Mj4M5,1)) Multiply replace_(Mj4M5,Md389,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd389 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d390
	if (count(Mj4M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j13);
	#call replace(i6,-2*j14+j3+j5,j,j3,j5,j14,Mj4M6,dotmapMj4M6R1)
	if (count(Mj4M6,1)) Multiply replace_(Mj4M6,Md390,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd390 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d389
	if (count(Mj4M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j5,i6,j6,i8,j7,i9,j3,i10,j4,i11,j10,i13,j12);
	#call replace(i7,2*j14+j6+j7-j8,j,j6,j7,j8,j14,Mj4M7,dotmapMj4M7R1)
	#call replace(i12,`Q2'/2-j10/2+j11+j7/2,j,j7,j10,j11,Mj4M7,dotmapMj4M7R2)
	#call replace(i14,j12-j13,j,j12,j13,Mj4M7,dotmapMj4M7R3)
	if (count(Mj4M7,1)) Multiply replace_(Mj4M7,Md389,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd389 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d391
	if (count(Mj4M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i8,-`Q2'+j10+2*j11-2*j13,j,j10,j11,j13,Mj4M8,dotmapMj4M8R1)
	#call replace(i13,j11-j12,j,j11,j12,Mj4M8,dotmapMj4M8R2)
	#call replace(i14,j1/2-j14+j3/2-j4/2,j,j1,j3,j4,j14,Mj4M8,dotmapMj4M8R3)
	if (count(Mj4M8,1)) Multiply replace_(Mj4M8,Md391,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd391 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mj4M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j6,i6,j5,i7,j4,i8,j7,i10,j3,i11,j10,i13,j12);
	#call replace(i9,j1-2*j13+j3,j,j1,j3,j13,Mj4M9,dotmapMj4M9R1)
	#call replace(i12,-j1/2-j10/2+j11+j2/2+j7/2,j,j1,j2,j7,j10,j11,Mj4M9,dotmapMj4M9R2)
	#call replace(i14,j12-j14,j,j12,j14,Mj4M9,dotmapMj4M9R3)
	if (count(Mj4M9,1)) Multiply replace_(Mj4M9,Md387,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd387 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4 and change topology to d388
	if (count(Mj4M10,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j6,i6,j5,i7,j4,i8,j7,i9,j3,i11,j10);
	#call replace(i10,j1+2*j13+j3,j,j1,j3,j13,Mj4M10,dotmapMj4M10R1)
	#call replace(i12,`Q2'/2-j10/2+j11+j7/2,j,j7,j10,j11,Mj4M10,dotmapMj4M10R2)
	#call replace(i13,`Q2'/2-j10/2+j12+j7/2,j,j7,j10,j12,Mj4M10,dotmapMj4M10R3)
	#call replace(i14,-j11+j12+j13-j14+j2/2+j8/2-j9/2,j,j2,j8,j9,j11,j12,j13,j14,Mj4M10,dotmapMj4M10R4)
	if (count(Mj4M10,1)) Multiply replace_(Mj4M10,Md388,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd388 "1"
#endif

#if `$M11'
* map dots to p0.p3,p0.p5,p0.p8,p1.p5 and change topology to d392
	if (count(Mj4M11,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i10,j10,i12,j11,i13,j12,i14,j14);
	#call replace(i11,`Q2'-2*j13+j8,j,j8,j13,Mj4M11,dotmapMj4M11R1)
	if (count(Mj4M11,1)) Multiply replace_(Mj4M11,Md392,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd392 "1"
#endif
.sort:reduce j4;
#endif
#endprocedure

#procedure Reducej4()
	#call Preparej4()
	#if `$DOACTION'
#ifdef `HASSCHEMEZj4'
		#call MtoZ(Mj4,Zj4,i,14)
		#call Reduce(j4)
		#call ZtoM(Zj4,Mj4,i,14)
#else
		#if `USETURBO'
			#call TurboMj4()
		#endif
		#call triangleS(Mj4,i6,i7,i5,i3,i8,i13,i14,0,0)
#endif
		#call Preparej4()
	#endif
#endprocedure
*--#] reduce-j4 : 
*--#[ reduce-no3 :
#procedure Prepareno3()
* Topology: 0-1 4-8 7-8 1-4 1-5 3-4 2-7 6-7 2-5 5-6 2-3 3-6 8-9
* Dots: p0.p6,p0.p8,p3.p6
* Apply automorphisms
if (match(Mno3*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n10,$n11,$n6,$n7,$n8,$n9,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n12,$n13,$n11,$n10,$n7,$n6,$n9,$n8,$n5,$n2,$n1,$n4,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n13)*replace_(i6,i7,i7,i6,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 1); Multiply sign_($n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i9,i7,i8,i8,i7,i9,i6,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply sign_($n12+$n13+$n14)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i8,i7,i9,i8,i6,i9,i7,i12,i13,i13,i12);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zno3 automorphism;

#call CheckRemovedPropagators(no3,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p7,p0.p1,p0.p5,p0.p7 and change topology to d393
	if (count(Mno3M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j13,i13,j14);
	#call replace(i1,`Q2'+j1+2*j12,j,j1,j12,Mno3M1,dotmapMno3M1R1)
	#call replace(i14,-j1/2-j10/2+j11+j13-j3/2+j4/2-j5/2+j6/2-j7/2+j8/2+j9/2,j,j1,j3,j4,j5,j6,j7,j8,j9,j10,j11,j13,Mno3M1,dotmapMno3M1R2)
	if (count(Mno3M1,1)) Multiply replace_(Mno3M1,Md393,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd393 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p7,p0.p9,p2.p9 and change topology to d394
	if (count(Mno3M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j12);
	#call replace(i2,j1-2*j11-j2+j3,j,j1,j2,j3,j11,Mno3M2,dotmapMno3M2R1)
	#call replace(i12,-j12-j13,j,j12,j13,Mno3M2,dotmapMno3M2R2)
	#call replace(i14,-j12-j14-j3/2-j7/2+j8/2,j,j3,j7,j8,j12,j14,Mno3M2,dotmapMno3M2R3)
	if (count(Mno3M2,1)) Multiply replace_(Mno3M2,Md394,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd394 "1"
#endif

#if `$M3'
* map dots to p1.p7,p0.p1,p0.p5,p0.p7 and change topology to d393
	if (count(Mno3M3,1)) Multiply replace_(i1,j2,i2,j3,i4,j1,i5,j4,i6,j7,i7,j8,i8,j5,i9,j6,i10,j9,i11,j10,i12,j14,i13,j13);
	#call replace(i3,`Q2'+j1-2*j12,j,j1,j12,Mno3M3,dotmapMno3M3R1)
	#call replace(i14,-j11+j14,j,j11,j14,Mno3M3,dotmapMno3M3R2)
	if (count(Mno3M3,1)) Multiply replace_(Mno3M3,Md393,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd393 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p7,p0.p9,p2.p9 and change topology to d394
	if (count(Mno3M4,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i5,j4,i6,j7,i7,j8,i8,j5,i9,j6,i10,j9,i11,j10,i12,j12);
	#call replace(i4,j1+2*j11-j2+j3,j,j1,j2,j3,j11,Mno3M4,dotmapMno3M4R1)
	#call replace(i13,-j12-j13,j,j12,j13,Mno3M4,dotmapMno3M4R2)
	#call replace(i14,-j1/2-j10/2-j11+j12+j13-j14+j2/2-j3/2+j4/2-j5/2+j6/2+j9/2,j,j1,j2,j3,j4,j5,j6,j9,j10,j11,j12,j13,j14,Mno3M4,dotmapMno3M4R3)
	if (count(Mno3M4,1)) Multiply replace_(Mno3M4,Md394,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd394 "1"
#endif

#if `$M5'
* map dots to p1.p2,p2.p4,p0.p2,p0.p3 and change topology to no6
	if (count(Mno3M5,1)) Multiply replace_(i1,j1,i2,j8,i3,j5,i4,j4,i6,j7,i7,j9,i8,j10,i9,j3,i10,j6,i11,j2);
	#call replace(i5,-2*j11-2*j12+2*j13-j2+j6,j,j2,j6,j11,j12,j13,Mno3M5,dotmapMno3M5R1)
	#call replace(i12,`Q2'/2-j1/2-j13-j14+j8/2,j,j1,j8,j13,j14,Mno3M5,dotmapMno3M5R2)
	#call replace(i13,-`Q2'/2+j14-j4/2+j5/2,j,j4,j5,j14,Mno3M5,dotmapMno3M5R3)
	#call replace(i14,`Q2'/2-j1/2-j10/2-j11-j14-j2/2+j3/2+j6/2,j,j1,j2,j3,j6,j10,j11,j14,Mno3M5,dotmapMno3M5R4)
	if (count(Mno3M5,1)) Multiply replace_(Mno3M5,Mno6,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOno6 "1"
#endif

#if `$M6'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mno3M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i6,-2*j11-2*j12+2*j13+2*j14+j4-j5+j6,j,j4,j5,j6,j11,j12,j13,j14,Mno3M6,dotmapMno3M6R1)
	#call replace(i12,`Q2'/2-j11-j12-j3/2+j4/2,j,j3,j4,j11,j12,Mno3M6,dotmapMno3M6R2)
	#call replace(i13,-`Q2'/2+j11+j3/2-j4/2,j,j3,j4,j11,Mno3M6,dotmapMno3M6R3)
	#call replace(i14,`Q2'/2-j10/2-j11-j14-j3/2+j5/2-j7/2+j8/2+j9/2,j,j3,j5,j7,j8,j9,j10,j11,j14,Mno3M6,dotmapMno3M6R4)
	if (count(Mno3M6,1)) Multiply replace_(Mno3M6,Md396,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd396 "1"
#endif

#if `$M7'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mno3M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j8,i9,j7,i10,j10,i11,j9,i13,j11);
	#call replace(i7,2*j11+2*j12-2*j13-2*j14+j4-j5+j6,j,j4,j5,j6,j11,j12,j13,j14,Mno3M7,dotmapMno3M7R1)
	#call replace(i12,-j1/2-j11-j12+j2/2+j3/2-j4/2,j,j1,j2,j3,j4,j11,j12,Mno3M7,dotmapMno3M7R2)
	#call replace(i14,-j1/2+j10/2-j11-j14+j3/2-j4/2+j7/2-j8/2-j9/2,j,j1,j3,j4,j7,j8,j9,j10,j11,j14,Mno3M7,dotmapMno3M7R3)
	if (count(Mno3M7,1)) Multiply replace_(Mno3M7,Md396,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd396 "1"
#endif

#if `$M8'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mno3M8,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5,i6,j7,i7,j8,i9,j6,i10,j9,i11,j10);
	#call replace(i8,-2*j11+2*j12+2*j13-2*j14+j4-j5+j6,j,j4,j5,j6,j11,j12,j13,j14,Mno3M8,dotmapMno3M8R1)
	#call replace(i12,`Q2'/2-j11-j3/2+j4/2,j,j3,j4,j11,Mno3M8,dotmapMno3M8R2)
	#call replace(i13,-`Q2'/2+j11-j12+j3/2-j4/2,j,j3,j4,j11,j12,Mno3M8,dotmapMno3M8R3)
	#call replace(i14,`Q2'/2-j13-j2/2-j3/2+j5/2,j,j2,j3,j5,j13,Mno3M8,dotmapMno3M8R4)
	if (count(Mno3M8,1)) Multiply replace_(Mno3M8,Md396,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd396 "1"
#endif

#if `$M9'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mno3M9,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5,i6,j8,i7,j7,i8,j6,i10,j10,i11,j9,i12,j11,i14,j13);
	#call replace(i9,-2*j11-2*j12+2*j13+2*j14+j4-j5+j6,j,j4,j5,j6,j11,j12,j13,j14,Mno3M9,dotmapMno3M9R1)
	#call replace(i13,j1/2-j11-j12-j2/2-j3/2+j4/2,j,j1,j2,j3,j4,j11,j12,Mno3M9,dotmapMno3M9R2)
	if (count(Mno3M9,1)) Multiply replace_(Mno3M9,Md396,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd396 "1"
#endif

#if `$M10'
* map dots to p0.p7,p0.p8,p1.p8,p3.p7 and change topology to d397
	if (count(Mno3M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j10,i13,j12);
	#call replace(i10,j10+2*j11+2*j12-2*j13-2*j14+j6-j7+j8-j9,j,j6,j7,j8,j9,j10,j11,j12,j13,j14,Mno3M10,dotmapMno3M10R1)
	#call replace(i12,`Q2'/2-j1/2-j11+j2/2,j,j1,j2,j11,Mno3M10,dotmapMno3M10R2)
	#call replace(i14,`Q2'/2-j1/2-j14-j4/2+j5/2,j,j1,j4,j5,j14,Mno3M10,dotmapMno3M10R3)
	if (count(Mno3M10,1)) Multiply replace_(Mno3M10,Md397,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd397 "1"
#endif

#if `$M11'
* map dots to p0.p7,p0.p8,p1.p8,p3.p7 and change topology to d397
	if (count(Mno3M11,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i7,j6,i8,j9,i9,j8,i10,j10,i12,j11,i14,j14);
	#call replace(i11,j10+2*j11+2*j12-2*j13-2*j14+j6-j7+j8-j9,j,j6,j7,j8,j9,j10,j11,j12,j13,j14,Mno3M11,dotmapMno3M11R1)
	#call replace(i13,-`Q2'/2-j12+j3/2-j4/2,j,j3,j4,j12,Mno3M11,dotmapMno3M11R2)
	if (count(Mno3M11,1)) Multiply replace_(Mno3M11,Md397,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd397 "1"
#endif
.sort:reduce no3;
#endif
#endprocedure

#procedure Reduceno3()
	#call Prepareno3()
	#if `$DOACTION'
#ifdef `HASSCHEMEZno3'
		#call MtoZ(Mno3,Zno3,i,14)
		#call Reduce(no3)
		#call ZtoM(Zno3,Mno3,i,14)
#else
		#if `USETURBO'
			#call TurboMno3()
		#endif
		#call diamondS(Mno3,3,0,i11,i9,i7,i10,i8,i6,i5,i4,i2,i12,i13,i14,0,0,0)
#endif
		#call Prepareno3()
	#endif
#endprocedure
*--#] reduce-no3 : 
*--#[ reduce-j11 :
#procedure Preparej11()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 3-7 4-6 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p5,p4.p5,p4.p7
* Apply automorphisms
if (match(Mj11*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n8,$n7,$n9,$n11,$n10,$n5,$n6,$n4,$n3,$n2,$n1,$n4+$n3+$n9)
	#call hash(1,$n14,$n13,$n12,$n8,$n5,$n3,$n11,$n6,$n7,$n10,$n4,$n9,$n1,$n2,$n4+$n9+$n3)
endif;
if (($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n3+$n9)
	#call hash(3,$n13,$n14,$n12,$n11,$n6,$n3,$n8,$n5,$n10,$n7,$n4,$n9,$n1,$n2,$n4+$n9+$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n14)*replace_(i5,i6,i6,i5,i7,i10,i8,i11,i10,i7,i11,i8);
elseif ($bestiso == 1); Multiply sign_($n13)*replace_(i1,i2,i2,i1,i3,i9,i5,i10,i6,i7,i7,i6,i8,i11,i9,i3,i10,i5,i11,i8);
elseif ($bestiso == 3); Multiply sign_($n12)*replace_(i1,i2,i2,i1,i3,i9,i5,i7,i6,i10,i7,i5,i9,i3,i10,i6,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zj11 automorphism;

#call CheckRemovedPropagators(j11,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p1,p1.p4,p1.p6 and change topology to d398
	if (count(Mj11M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Mj11M1,dotmapMj11M1R1)
	#call replace(i13,j11-j13-j2/2-j4/2+j5/2,j,j2,j4,j5,j11,j13,Mj11M1,dotmapMj11M1R2)
	#call replace(i14,-j14-j6/2-j8/2+j9/2,j,j6,j8,j9,j14,Mj11M1,dotmapMj11M1R3)
	if (count(Mj11M1,1)) Multiply replace_(Mj11M1,Md398,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd398 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p1,p1.p4,p1.p6 and change topology to d398
	if (count(Mj11M2,1)) Multiply replace_(i1,j1,i3,j8,i4,j3,i5,j6,i6,j9,i7,j4,i8,j7,i9,j2,i10,j5,i11,j10);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Mj11M2,dotmapMj11M2R1)
	#call replace(i12,`Q2'/2-j10/2+j11+j7/2,j,j7,j10,j11,Mj11M2,dotmapMj11M2R2)
	#call replace(i13,j14-j6/2-j8/2+j9/2,j,j6,j8,j9,j14,Mj11M2,dotmapMj11M2R3)
	#call replace(i14,-j11+j13-j2/2-j4/2+j5/2,j,j2,j4,j5,j11,j13,Mj11M2,dotmapMj11M2R4)
	if (count(Mj11M2,1)) Multiply replace_(Mj11M2,Md398,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd398 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p8,p1.p6,p1.p7 and change topology to d399
	if (count(Mj11M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i3,`Q2'-2*j12+j8,j,j8,j12,Mj11M3,dotmapMj11M3R1)
	#call replace(i12,`Q2'/2-j10/2+j11+j7/2,j,j7,j10,j11,Mj11M3,dotmapMj11M3R2)
	#call replace(i13,-`Q2'/2+j12+j13+j14-j4/2+j5/2-j8/2,j,j4,j5,j8,j12,j13,j14,Mj11M3,dotmapMj11M3R3)
	#call replace(i14,-j11+j13-j6/2-j8/2+j9/2,j,j6,j8,j9,j11,j13,Mj11M3,dotmapMj11M3R4)
	if (count(Mj11M3,1)) Multiply replace_(Mj11M3,Md399,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd399 "1"
#endif

#if `$M4'
* map dots to p0.p4,p1.p3,p1.p4,p1.p6 and change topology to d400
	if (count(Mj11M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i4,j1-2*j12+j3,j,j1,j3,j12,Mj11M4,dotmapMj11M4R1)
	#call replace(i13,j13-j3/2-j4/2+j5/2,j,j3,j4,j5,j13,Mj11M4,dotmapMj11M4R2)
	#call replace(i14,`Q2'/2-j10/2-j11+j14-j6/2+j7/2-j8/2+j9/2,j,j6,j7,j8,j9,j10,j11,j14,Mj11M4,dotmapMj11M4R3)
	if (count(Mj11M4,1)) Multiply replace_(Mj11M4,Md400,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd400 "1"
#endif

#if `$M5'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mj11M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i14,j14);
	#call replace(i5,-2*j12+j3+j5,j,j3,j5,j12,Mj11M5,dotmapMj11M5R1)
	#call replace(i12,`Q2'/2-j11+j3/2-j8/2,j,j3,j8,j11,Mj11M5,dotmapMj11M5R2)
	#call replace(i13,j1/2-j13-j3/2-j4/2,j,j1,j3,j4,j13,Mj11M5,dotmapMj11M5R3)
	if (count(Mj11M5,1)) Multiply replace_(Mj11M5,Md401,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd401 "1"
#endif

#if `$M6'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mj11M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j9,i8,j10,i9,j8,i10,j6,i11,j7,i12,j11,i13,j13);
	#call replace(i6,-2*j12+j3+j5,j,j3,j5,j12,Mj11M6,dotmapMj11M6R1)
	#call replace(i14,-j14+j2/2-j4/2-j8/2,j,j2,j4,j8,j14,Mj11M6,dotmapMj11M6R2)
	if (count(Mj11M6,1)) Multiply replace_(Mj11M6,Md401,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd401 "1"
#endif

#if `$M7'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mj11M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j4,i5,j6,i6,j9,i8,j7,i9,j3,i10,j5,i11,j10,i13,j14);
	#call replace(i7,2*j12+j3+j5,j,j3,j5,j12,Mj11M7,dotmapMj11M7R1)
	#call replace(i12,-j10/2+j11-j3/2+j7/2+j8/2,j,j3,j7,j8,j10,j11,Mj11M7,dotmapMj11M7R2)
	#call replace(i14,j1/2+j13-j3/2-j4/2,j,j1,j3,j4,j13,Mj11M7,dotmapMj11M7R3)
	if (count(Mj11M7,1)) Multiply replace_(Mj11M7,Md401,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd401 "1"
#endif

#if `$M8'
* map dots to p0.p5,p0.p7,p4.p5,p4.p7 and change topology to d402
	if (count(Mj11M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i8,-`Q2'+j10+2*j11-2*j12,j,j10,j11,j12,Mj11M8,dotmapMj11M8R1)
	if (count(Mj11M8,1)) Multiply replace_(Mj11M8,Md402,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd402 "1"
#endif

#if `$M9'
* map dots to p0.p6,p0.p8,p1.p6,p1.p7 and change topology to d399
	if (count(Mj11M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j3,i5,j6,i6,j9,i7,j4,i8,j7,i10,j5,i11,j10,i12,j11);
	#call replace(i9,`Q2'-2*j12+j8,j,j8,j12,Mj11M9,dotmapMj11M9R1)
	#call replace(i13,j11-j13-j6/2-j8/2+j9/2,j,j6,j8,j9,j11,j13,Mj11M9,dotmapMj11M9R2)
	#call replace(i14,-`Q2'/2+j12-j13+j14-j4/2+j5/2-j8/2,j,j4,j5,j8,j12,j13,j14,Mj11M9,dotmapMj11M9R3)
	if (count(Mj11M9,1)) Multiply replace_(Mj11M9,Md399,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd399 "1"
#endif

#if `$M10'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mj11M10,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j4,i5,j9,i6,j6,i7,j5,i8,j10,i9,j3,i11,j7,i14,j13);
	#call replace(i10,2*j12+j3+j5,j,j3,j5,j12,Mj11M10,dotmapMj11M10R1)
	#call replace(i12,`Q2'/2+j10/2+j11-j7/2,j,j7,j10,j11,Mj11M10,dotmapMj11M10R2)
	#call replace(i13,-j14+j2/2-j4/2-j8/2,j,j2,j4,j8,j14,Mj11M10,dotmapMj11M10R3)
	if (count(Mj11M10,1)) Multiply replace_(Mj11M10,Md401,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd401 "1"
#endif

#if `$M11'
* map dots to p0.p5,p0.p7,p4.p5,p4.p7 and change topology to d402
	if (count(Mj11M11,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j6,i6,j5,i7,j9,i8,j10,i9,j8,i10,j7);
	#call replace(i11,-`Q2'+j10+2*j11+2*j12,j,j10,j11,j12,Mj11M11,dotmapMj11M11R1)
	#call replace(i12,`Q2'/2-j11+j3/2-j8/2,j,j3,j8,j11,Mj11M11,dotmapMj11M11R2)
	#call replace(i13,j1/2-j13-j3/2-j4/2,j,j1,j3,j4,j13,Mj11M11,dotmapMj11M11R3)
	#call replace(i14,j14+j2/2-j4/2-j8/2,j,j2,j4,j8,j14,Mj11M11,dotmapMj11M11R4)
	if (count(Mj11M11,1)) Multiply replace_(Mj11M11,Md402,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd402 "1"
#endif
.sort:reduce j11;
#endif
#endprocedure

#procedure Reducej11()
	#call Preparej11()
	#if `$DOACTION'
#ifdef `HASSCHEMEZj11'
		#call MtoZ(Mj11,Zj11,i,14)
		#call Reduce(j11)
		#call ZtoM(Zj11,Mj11,i,14)
#else
		#if `USETURBO'
			#call TurboMj11()
		#endif
		#call triangleS(Mj11,i1,i2,i4,i3,i9,i13,i14,0,0)
#endif
		#call Preparej11()
	#endif
#endprocedure
*--#] reduce-j11 : 
*--#[ reduce-j5 :
#procedure Preparej5()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-4 3-5 4-7 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p1.p7,p3.p7
* Apply automorphisms
if (match(Mj5*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zj5 automorphism;

#call CheckRemovedPropagators(j5,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p5,p0.p7,p4.p5,p4.p7 and change topology to d402
	if (count(Mj5M1,1)) Multiply replace_(i2,j7,i3,j5,i4,j10,i5,j3,i6,j6,i7,j4,i8,j1,i9,j9,i10,j8,i11,j2,i12,j11,i14,j13);
	#call replace(i1,`Q2'-2*j12+j7,j,j7,j12,Mj5M1,dotmapMj5M1R1)
	#call replace(i13,-j1/2-j14+j2/2+j3/2-j8/2,j,j1,j2,j3,j8,j14,Mj5M1,dotmapMj5M1R2)
	if (count(Mj5M1,1)) Multiply replace_(Mj5M1,Md402,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd402 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p1.p6,p2.p6 and change topology to d403
	if (count(Mj5M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j13,i14,j14);
	#call replace(i2,`Q2'+j1-2*j11,j,j1,j11,Mj5M2,dotmapMj5M2R1)
	if (count(Mj5M2,1)) Multiply replace_(Mj5M2,Md403,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd403 "1"
#endif

#if `$M3'
* map dots to p1.p6,p0.p3,p1.p3,p3.p6 and change topology to d404
	if (count(Mj5M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11);
	#call replace(i3,j1-2*j13+j3,j,j1,j3,j13,Mj5M3,dotmapMj5M3R1)
	#call replace(i12,`Q2'/2+j1/2-j12-j2/2,j,j1,j2,j12,Mj5M3,dotmapMj5M3R2)
	#call replace(i14,j11-j14,j,j11,j14,Mj5M3,dotmapMj5M3R3)
	if (count(Mj5M3,1)) Multiply replace_(Mj5M3,Md404,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd404 "1"
#endif

#if `$M4'
* map dots to p1.p6,p0.p3,p1.p3,p3.p6 and change topology to d405
	if (count(Mj5M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j14);
	#call replace(i4,j1-2*j13+j3,j,j1,j3,j13,Mj5M4,dotmapMj5M4R1)
	if (count(Mj5M4,1)) Multiply replace_(Mj5M4,Md405,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd405 "1"
#endif

#if `$M5'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(Mj5M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j13);
	#call replace(i5,-j10+2*j12+j7+j9,j,j7,j9,j10,j12,Mj5M5,dotmapMj5M5R1)
	#call replace(i12,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Mj5M5,dotmapMj5M5R2)
	#call replace(i14,j13-j14,j,j13,j14,Mj5M5,dotmapMj5M5R3)
	if (count(Mj5M5,1)) Multiply replace_(Mj5M5,Md406,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd406 "1"
#endif

#if `$M6'
* map dots to p1.p6,p0.p3,p3.p5,p3.p6 and change topology to d407
	if (count(Mj5M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j14);
	#call replace(i6,-2*j13+j3+j5,j,j3,j5,j13,Mj5M6,dotmapMj5M6R1)
	if (count(Mj5M6,1)) Multiply replace_(Mj5M6,Md407,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd407 "1"
#endif

#if `$M7'
* map dots to p0.p3,p1.p7,p3.p7,p5.p7 and change topology to d408
	if (count(Mj5M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i7,-2*j14+j5+j7,j,j5,j7,j14,Mj5M7,dotmapMj5M7R1)
	#call replace(i13,j1/2-j12+j5/2-j8/2,j,j1,j5,j8,j12,Mj5M7,dotmapMj5M7R2)
	#call replace(i14,-j13+j3/2+j5/2-j6/2,j,j3,j5,j6,j13,Mj5M7,dotmapMj5M7R3)
	if (count(Mj5M7,1)) Multiply replace_(Mj5M7,Md408,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd408 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p7,p1.p7,p3.p7 and change topology to d409
	if (count(Mj5M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i8,j10-2*j12+j5-j9,j,j5,j9,j10,j12,Mj5M8,dotmapMj5M8R1)
	if (count(Mj5M8,1)) Multiply replace_(Mj5M8,Md409,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd409 "1"
#endif

#if `$M9'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mj5M9,1)) Multiply replace_(i1,j10,i2,j7,i3,j9,i4,j5,i5,j8,i6,j6,i7,j4,i8,j2,i10,j3,i11,j1);
	#call replace(i9,j10-2*j11+2*j12+j6-j9,j,j6,j9,j10,j11,j12,Mj5M9,dotmapMj5M9R1)
	#call replace(i12,`Q2'/2+j10/2-j11-j7/2,j,j7,j10,j11,Mj5M9,dotmapMj5M9R2)
	#call replace(i13,j13+j14-j2/2+j4/2+j8/2,j,j2,j4,j8,j13,j14,Mj5M9,dotmapMj5M9R3)
	#call replace(i14,j14-j2/2+j4/2+j8/2,j,j2,j4,j8,j14,Mj5M9,dotmapMj5M9R4)
	if (count(Mj5M9,1)) Multiply replace_(Mj5M9,Md401,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd401 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4 and change topology to d388
	if (count(Mj5M10,1)) Multiply replace_(i1,j7,i2,j10,i3,j6,i4,j4,i5,j8,i6,j5,i7,j9,i8,j2,i9,j3,i11,j1);
	#call replace(i10,j10+2*j11-j7+j8,j,j7,j8,j10,j11,Mj5M10,dotmapMj5M10R1)
	#call replace(i12,`Q2'/2-j10/2-j12+j7/2,j,j7,j10,j12,Mj5M10,dotmapMj5M10R2)
	#call replace(i13,-j11+j13-j2/2-j3/2+j7/2+j9/2,j,j2,j3,j7,j9,j11,j13,Mj5M10,dotmapMj5M10R3)
	#call replace(i14,-j11+j12+j13-j14-j2/2-j5/2+j6/2+j9/2,j,j2,j5,j6,j9,j11,j12,j13,j14,Mj5M10,dotmapMj5M10R4)
	if (count(Mj5M10,1)) Multiply replace_(Mj5M10,Md388,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd388 "1"
#endif

#if `$M11'
* map dots to p0.p3,p0.p7,p1.p7,p3.p7 and change topology to d410
	if (count(Mj5M11,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i10,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i11,j10+2*j12-j5+j8,j,j5,j8,j10,j12,Mj5M11,dotmapMj5M11R1)
	if (count(Mj5M11,1)) Multiply replace_(Mj5M11,Md410,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd410 "1"
#endif
.sort:reduce j5;
#endif
#endprocedure

#procedure Reducej5()
	#call Preparej5()
	#if `$DOACTION'
#ifdef `HASSCHEMEZj5'
		#call MtoZ(Mj5,Zj5,i,14)
		#call Reduce(j5)
		#call ZtoM(Zj5,Mj5,i,14)
#else
		#if `USETURBO'
			#call TurboMj5()
		#endif
		#call triangleS(Mj5,i4,i6,i3,i1,i5,i12,i14,0,0)
#endif
		#call Preparej5()
	#endif
#endprocedure
*--#] reduce-j5 : 
*--#[ reduce-j2 :
#procedure Preparej2()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-5 4-5 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5
* Apply automorphisms
if (match(Mj2*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zj2 automorphism;

#call CheckRemovedPropagators(j2,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj2M1,1)) Multiply replace_(i2,j3,i3,j2,i4,j1,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12);
	#call replace(i1,-j10+2*j13+j3+j7,j,j3,j7,j10,j13,Mj2M1,dotmapMj2M1R1)
	#call replace(i14,j14+j4/2-j6/2+j7/2,j,j4,j6,j7,j14,Mj2M1,dotmapMj2M1R2)
	if (count(Mj2M1,1)) Multiply replace_(Mj2M1,Md386,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd386 "1"
#endif

#if `$M2'
* map dots to p1.p4,p0.p1,p0.p2,p0.p4 and change topology to d411
	if (count(Mj2M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j13,i13,j14,i14,j11);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Mj2M2,dotmapMj2M2R1)
	if (count(Mj2M2,1)) Multiply replace_(Mj2M2,Md411,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd411 "1"
#endif

#if `$M3'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mj2M3,1)) Multiply replace_(i1,j2,i2,j1,i4,j9,i5,j7,i6,j6,i7,j8,i8,j4,i9,j10,i10,j5,i11,j3);
	#call replace(i3,-2*j12+2*j14+j2+j9,j,j2,j9,j12,j14,Mj2M3,dotmapMj2M3R1)
	#call replace(i12,`Q2'/2-j1/2-j12+j2/2,j,j1,j2,j12,Mj2M3,dotmapMj2M3R2)
	#call replace(i13,`Q2'/2+j11-j3/2+j4/2,j,j3,j4,j11,Mj2M3,dotmapMj2M3R3)
	#call replace(i14,j11-j13+j2/2+j4/2-j5/2,j,j2,j4,j5,j11,j13,Mj2M3,dotmapMj2M3R4)
	if (count(Mj2M3,1)) Multiply replace_(Mj2M3,Md396,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd396 "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4 and change topology to d412
	if (count(Mj2M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j14);
	#call replace(i4,j1-2*j13+j3,j,j1,j3,j13,Mj2M4,dotmapMj2M4R1)
	if (count(Mj2M4,1)) Multiply replace_(Mj2M4,Md412,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd412 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d413
	if (count(Mj2M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i5,-2*j14+j3+j5,j,j3,j5,j14,Mj2M5,dotmapMj2M5R1)
	#call replace(i13,j11-j12,j,j11,j12,Mj2M5,dotmapMj2M5R2)
	#call replace(i14,j1/2-j13+j3/2-j4/2,j,j1,j3,j4,j13,Mj2M5,dotmapMj2M5R3)
	if (count(Mj2M5,1)) Multiply replace_(Mj2M5,Md413,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd413 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d414
	if (count(Mj2M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j13);
	#call replace(i6,-2*j14+j3+j5,j,j3,j5,j14,Mj2M6,dotmapMj2M6R1)
	if (count(Mj2M6,1)) Multiply replace_(Mj2M6,Md414,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd414 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p5,p1.p5,p5.p7 and change topology to d415
	if (count(Mj2M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j13);
	#call replace(i7,-2*j14+j5+j7,j,j5,j7,j14,Mj2M7,dotmapMj2M7R1)
	if (count(Mj2M7,1)) Multiply replace_(Mj2M7,Md415,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd415 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(Mj2M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i8,-`Q2'+j10+2*j11-2*j13,j,j10,j11,j13,Mj2M8,dotmapMj2M8R1)
	#call replace(i13,j11-j12,j,j11,j12,Mj2M8,dotmapMj2M8R2)
	#call replace(i14,j1/2-j14+j3/2-j4/2,j,j1,j3,j4,j14,Mj2M8,dotmapMj2M8R3)
	if (count(Mj2M8,1)) Multiply replace_(Mj2M8,Md416,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd416 "1"
#endif

#if `$M9'
* map dots to p0.p7,p0.p8,p1.p8,p3.p7 and change topology to d397
	if (count(Mj2M9,1)) Multiply replace_(i1,j4,i2,j3,i3,j9,i4,j8,i5,j7,i6,j10,i7,j6,i8,j2,i10,j5,i11,j1,i13,j11);
	#call replace(i9,2*j12-2*j13-j4+j5+j9,j,j4,j5,j9,j12,j13,Mj2M9,dotmapMj2M9R1)
	#call replace(i12,`Q2'/2-j12-j3/2+j4/2,j,j3,j4,j12,Mj2M9,dotmapMj2M9R2)
	#call replace(i14,j11-j14,j,j11,j14,Mj2M9,dotmapMj2M9R3)
	if (count(Mj2M9,1)) Multiply replace_(Mj2M9,Md397,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd397 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4 and change topology to d388
	if (count(Mj2M10,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j6,i6,j5,i7,j4,i8,j7,i9,j3,i11,j10);
	#call replace(i10,2*j11-2*j13+j7-j8+j9,j,j7,j8,j9,j11,j13,Mj2M10,dotmapMj2M10R1)
	#call replace(i12,`Q2'/2-j10/2+j11+j7/2,j,j7,j10,j11,Mj2M10,dotmapMj2M10R2)
	#call replace(i13,`Q2'/2-j10/2+j12+j7/2,j,j7,j10,j12,Mj2M10,dotmapMj2M10R3)
	#call replace(i14,-j11+j12+j13-j14+j2/2+j8/2-j9/2,j,j2,j8,j9,j11,j12,j13,j14,Mj2M10,dotmapMj2M10R4)
	if (count(Mj2M10,1)) Multiply replace_(Mj2M10,Md388,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd388 "1"
#endif

#if `$M11'
* map dots to p4.p5,p0.p3,p0.p5,p0.p7 and change topology to d417
	if (count(Mj2M11,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i10,j10,i12,j12,i13,j13);
	#call replace(i11,`Q2'-2*j13+2*j14+j8,j,j8,j13,j14,Mj2M11,dotmapMj2M11R1)
	#call replace(i14,j11+j3/2+j5/2-j6/2,j,j3,j5,j6,j11,Mj2M11,dotmapMj2M11R2)
	if (count(Mj2M11,1)) Multiply replace_(Mj2M11,Md417,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd417 "1"
#endif
.sort:reduce j2;
#endif
#endprocedure

#procedure Reducej2()
	#call Preparej2()
	#if `$DOACTION'
#ifdef `HASSCHEMEZj2'
		#call MtoZ(Mj2,Zj2,i,14)
		#call Reduce(j2)
		#call ZtoM(Zj2,Mj2,i,14)
#else
		#if `USETURBO'
			#call TurboMj2()
		#endif
		#call triangleS(Mj2,i6,i7,i5,i3,i8,i13,i14,0,0)
#endif
		#call Preparej2()
	#endif
#endprocedure
*--#] reduce-j2 : 
*--#[ reduce-j6 :
#procedure Preparej6()
* Topology: 0-1 1-2 1-6 2-3 2-4 3-4 3-8 4-5 5-6 5-7 6-7 7-8 8-9
* Dots: p0.p3,p0.p8,p3.p8
* Apply automorphisms
if (match(Mj6*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n6,$n3,$n5,$n4,$n7,$n11,$n9,$n8,$n10,$n1,$n2,$n10+$n2+$n11)
	#call hash(1,$n14,$n13,$n12,$n1,$n3,$n4,$n5,$n7,$n2,$n8,$n9,$n10,$n6,$n11,$n10+$n11+$n2)
endif;
if (($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n3+$n1+$n6)
	#call hash(3,$n14,$n13,$n12,$n2,$n10,$n8,$n9,$n7,$n1,$n4,$n5,$n3,$n11,$n6,$n3+$n6+$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n13+$n14)*replace_(i1,i2,i2,i1,i3,i10,i4,i8,i5,i9,i6,i11,i8,i4,i9,i5,i10,i3,i11,i6);
elseif ($bestiso == 1); Multiply replace_(i1,i11,i2,i6,i3,i10,i4,i9,i5,i8,i6,i2,i8,i5,i9,i4,i10,i3,i11,i1);
elseif ($bestiso == 3); Multiply sign_($n13+$n14)*replace_(i1,i6,i2,i11,i4,i5,i5,i4,i6,i1,i8,i9,i9,i8,i11,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zj6 automorphism;

#call CheckRemovedPropagators(j6,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj6M1,1)) Multiply replace_(i2,j2,i3,j3,i4,j1,i5,j9,i6,j10,i7,j8,i8,j5,i9,j6,i10,j4,i11,j7);
	#call replace(i1,`Q2'-2*j11+j2,j,j2,j11,Mj6M1,dotmapMj6M1R1)
	#call replace(i12,`Q2'/2+j10/2+j13-j7/2,j,j7,j10,j13,Mj6M1,dotmapMj6M1R2)
	#call replace(i13,-j11+j12,j,j11,j12,Mj6M1,dotmapMj6M1R3)
	#call replace(i14,-j1/2-j10/2-j11+j12-j13+j14+j2/2+j3/2-j4/2+j6/2,j,j1,j2,j3,j4,j6,j10,j11,j12,j13,j14,Mj6M1,dotmapMj6M1R4)
	if (count(Mj6M1,1)) Multiply replace_(Mj6M1,Md386,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd386 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj6M2,1)) Multiply replace_(i1,j2,i3,j4,i4,j5,i5,j6,i6,j7,i7,j8,i8,j1,i9,j9,i10,j3,i11,j10,i12,j12);
	#call replace(i2,`Q2'-2*j11+j2,j,j2,j11,Mj6M2,dotmapMj6M2R1)
	#call replace(i13,-`Q2'/2+j10/2+j11-j13-j7/2,j,j7,j10,j11,j13,Mj6M2,dotmapMj6M2R2)
	#call replace(i14,-j14+j2/2-j5/2+j6/2-j7/2,j,j2,j5,j6,j7,j14,Mj6M2,dotmapMj6M2R3)
	if (count(Mj6M2,1)) Multiply replace_(Mj6M2,Md386,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd386 "1"
#endif

#if `$M3'
* map dots to p0.p7,p0.p3,p1.p3,p3.p7 and change topology to d418
	if (count(Mj6M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11);
	#call replace(i3,j1-2*j13+j3,j,j1,j3,j13,Mj6M3,dotmapMj6M3R1)
	#call replace(i12,`Q2'/2+j1/2-j12-j2/2,j,j1,j2,j12,Mj6M3,dotmapMj6M3R2)
	#call replace(i14,j11-j14+j2/2+j7/2-j9/2,j,j2,j7,j9,j11,j14,Mj6M3,dotmapMj6M3R3)
	if (count(Mj6M3,1)) Multiply replace_(Mj6M3,Md418,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd418 "1"
#endif

#if `$M4'
* map dots to p0.p7,p0.p3,p1.p3,p3.p7 and change topology to d419
	if (count(Mj6M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j14);
	#call replace(i4,j1-2*j13+j3,j,j1,j3,j13,Mj6M4,dotmapMj6M4R1)
	if (count(Mj6M4,1)) Multiply replace_(Mj6M4,Md419,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd419 "1"
#endif

#if `$M5'
* map dots to p0.p7,p0.p3,p1.p3,p3.p7 and change topology to d419
	if (count(Mj6M5,1)) Multiply replace_(i1,j5,i2,j10,i3,j3,i4,j4,i6,j1,i7,j6,i8,j8,i9,j7,i10,j9,i11,j2,i12,j12);
	#call replace(i5,j1-2*j13+j3,j,j1,j3,j13,Mj6M5,dotmapMj6M5R1)
	#call replace(i13,-j1/2-j10/2-j11+j2/2+j5/2,j,j1,j2,j5,j10,j11,Mj6M5,dotmapMj6M5R2)
	#call replace(i14,-j13-j14+j3/2-j4/2+j5/2,j,j3,j4,j5,j13,j14,Mj6M5,dotmapMj6M5R3)
	if (count(Mj6M5,1)) Multiply replace_(Mj6M5,Md419,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd419 "1"
#endif

#if `$M6'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj6M6,1)) Multiply replace_(i1,j10,i2,j7,i3,j3,i4,j9,i5,j1,i7,j8,i8,j6,i9,j5,i10,j4,i11,j2);
	#call replace(i6,`Q2'+2*j11+j2,j,j2,j11,Mj6M6,dotmapMj6M6R1)
	#call replace(i12,`Q2'/2+j10/2-j13-j7/2,j,j7,j10,j13,Mj6M6,dotmapMj6M6R2)
	#call replace(i13,-`Q2'/2+j10/2+j12-j7/2,j,j7,j10,j12,Mj6M6,dotmapMj6M6R3)
	#call replace(i14,-`Q2'/2+j12+j13-j14+j3/2-j4/2+j6/2-j9/2,j,j3,j4,j6,j9,j12,j13,j14,Mj6M6,dotmapMj6M6R4)
	if (count(Mj6M6,1)) Multiply replace_(Mj6M6,Md386,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,i14);
	#redefine HASTOPOd386 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p7,p1.p6,p3.p7 and change topology to d420
	if (count(Mj6M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j14);
	#call replace(i7,j1-2*j13+j6,j,j1,j6,j13,Mj6M7,dotmapMj6M7R1)
	if (count(Mj6M7,1)) Multiply replace_(Mj6M7,Md420,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd420 "1"
#endif

#if `$M8'
* map dots to p0.p7,p0.p3,p1.p3,p3.p7 and change topology to d419
	if (count(Mj6M8,1)) Multiply replace_(i1,j2,i2,j1,i3,j9,i4,j7,i5,j8,i6,j10,i7,j6,i9,j3,i10,j4,i11,j5);
	#call replace(i8,2*j13+j4-j5+j6,j,j4,j5,j6,j13,Mj6M8,dotmapMj6M8R1)
	#call replace(i12,`Q2'/2-j1/2-j11+j2/2,j,j1,j2,j11,Mj6M8,dotmapMj6M8R2)
	#call replace(i13,-j1/2-j10/2-j12+j2/2+j5/2,j,j1,j2,j5,j10,j12,Mj6M8,dotmapMj6M8R3)
	#call replace(i14,-j10/2-j12+j13+j14+j2/2-j7/2+j8/2,j,j2,j7,j8,j10,j12,j13,j14,Mj6M8,dotmapMj6M8R4)
	if (count(Mj6M8,1)) Multiply replace_(Mj6M8,Md419,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd419 "1"
#endif

#if `$M9'
* map dots to p0.p7,p0.p3,p1.p3,p3.p7 and change topology to d419
	if (count(Mj6M9,1)) Multiply replace_(i1,j10,i2,j5,i3,j9,i4,j8,i5,j7,i6,j2,i7,j6,i8,j3,i10,j4,i11,j1,i13,j12);
	#call replace(i9,-2*j13+j4-j5+j6,j,j4,j5,j6,j13,Mj6M9,dotmapMj6M9R1)
	#call replace(i12,`Q2'/2-j1/2+j11+j2/2,j,j1,j2,j11,Mj6M9,dotmapMj6M9R2)
	#call replace(i14,j12-j13+j14,j,j12,j13,j14,Mj6M9,dotmapMj6M9R3)
	if (count(Mj6M9,1)) Multiply replace_(Mj6M9,Md419,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd419 "1"
#endif

#if `$M10'
* map dots to p0.p7,p0.p3,p1.p3,p3.p7 and change topology to d418
	if (count(Mj6M10,1)) Multiply replace_(i1,j2,i2,j1,i3,j9,i4,j7,i5,j8,i6,j10,i7,j6,i8,j3,i9,j4,i11,j5,i13,j12);
	#call replace(i10,j1+2*j13+j3,j,j1,j3,j13,Mj6M10,dotmapMj6M10R1)
	#call replace(i12,`Q2'/2-j1/2-j11+j2/2,j,j1,j2,j11,Mj6M10,dotmapMj6M10R2)
	#call replace(i14,j12-j13-j14,j,j12,j13,j14,Mj6M10,dotmapMj6M10R3)
	if (count(Mj6M10,1)) Multiply replace_(Mj6M10,Md418,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd418 "1"
#endif

#if `$M11'
* map dots to p0.p2,p0.p4,p0.p9,p4.p9 and change topology to d386
	if (count(Mj6M11,1)) Multiply replace_(i1,j7,i2,j10,i3,j4,i4,j6,i5,j5,i6,j2,i7,j8,i8,j9,i9,j1,i10,j3,i12,j12,i13,j13,i14,j14);
	#call replace(i11,`Q2'-2*j11+j2,j,j2,j11,Mj6M11,dotmapMj6M11R1)
	if (count(Mj6M11,1)) Multiply replace_(Mj6M11,Md386,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd386 "1"
#endif
.sort:reduce j6;
#endif
#endprocedure

#procedure Reducej6()
	#call Preparej6()
	#if `$DOACTION'
#ifdef `HASSCHEMEZj6'
		#call MtoZ(Mj6,Zj6,i,14)
		#call Reduce(j6)
		#call ZtoM(Zj6,Mj6,i,14)
#else
		#if `USETURBO'
			#call TurboMj6()
		#endif
		#call triangleS(Mj6,i4,i5,i3,i1,i6,i12,i14,0,0)
#endif
		#call Preparej6()
	#endif
#endprocedure
*--#] reduce-j6 : 
*--#[ reduce-j1 :
#procedure Preparej1()
* Topology: 0-1 1-2 1-7 2-3 2-4 3-5 3-8 4-5 4-6 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p7,p1.p7
* Apply automorphisms
if (match(Mj1*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n4+$n5)
	#call hash(1,$n14,$n13,$n12,$n2,$n10,$n8,$n9,$n7,$n1,$n4,$n5,$n3,$n11,$n6,$n7+$n5+$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i6,i2,i11,i4,i5,i5,i4,i6,i1,i8,i9,i9,i8,i11,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zj1 automorphism;

#call CheckRemovedPropagators(j1,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p5,p0.p8,p1.p5 and change topology to d392
	if (count(Mj1M1,1)) Multiply replace_(i2,j10,i3,j4,i4,j8,i5,j3,i6,j1,i7,j5,i8,j7,i9,j6,i10,j9,i11,j2,i13,j12);
	#call replace(i1,j1+j10+2*j11+2*j13-j2,j,j1,j2,j10,j11,j13,Mj1M1,dotmapMj1M1R1)
	#call replace(i12,`Q2'/2+j1/2+j11-j2/2,j,j1,j2,j11,Mj1M1,dotmapMj1M1R2)
	#call replace(i14,j14-j3/2+j6/2-j7/2+j8/2,j,j3,j6,j7,j8,j14,Mj1M1,dotmapMj1M1R3)
	if (count(Mj1M1,1)) Multiply replace_(Mj1M1,Md392,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,i14);
	#redefine HASTOPOd392 "1"
#endif

#if `$M2'
* map dots to p4.p5,p0.p3,p0.p5,p0.p7 and change topology to d417
	if (count(Mj1M2,1)) Multiply replace_(i1,j10,i3,j4,i4,j9,i5,j3,i6,j1,i7,j6,i8,j7,i9,j5,i10,j8,i11,j2);
	#call replace(i2,-j1+j10-2*j13-2*j14+j2,j,j1,j2,j10,j13,j14,Mj1M2,dotmapMj1M2R1)
	#call replace(i12,`Q2'/2+j1/2+j12-j2/2,j,j1,j2,j12,Mj1M2,dotmapMj1M2R2)
	#call replace(i13,-j12+j13,j,j12,j13,Mj1M2,dotmapMj1M2R3)
	#call replace(i14,j1/2+j11-j3/2-j4/2+j6/2-j7/2+j9/2,j,j1,j3,j4,j6,j7,j9,j11,Mj1M2,dotmapMj1M2R4)
	if (count(Mj1M2,1)) Multiply replace_(Mj1M2,Md417,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd417 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p7,p1.p6,p1.p7 and change topology to d421
	if (count(Mj1M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11,i14,j13);
	#call replace(i3,j1-2*j13-2*j14+j3,j,j1,j3,j13,j14,Mj1M3,dotmapMj1M3R1)
	#call replace(i12,`Q2'/2+j1/2-j11-j12-j2/2,j,j1,j2,j11,j12,Mj1M3,dotmapMj1M3R2)
	if (count(Mj1M3,1)) Multiply replace_(Mj1M3,Md421,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd421 "1"
#endif

#if `$M4'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mj1M4,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i5,j8,i6,j4,i7,j6,i8,j9,i9,j10,i10,j5,i11,j3);
	#call replace(i4,-2*j11+2*j13-j4+j5+j7,j,j4,j5,j7,j11,j13,Mj1M4,dotmapMj1M4R1)
	#call replace(i12,`Q2'/2+j11-j3/2+j4/2,j,j3,j4,j11,Mj1M4,dotmapMj1M4R2)
	#call replace(i13,-j1/2-j11-j12+j2/2+j3/2-j4/2,j,j1,j2,j3,j4,j11,j12,Mj1M4,dotmapMj1M4R3)
	#call replace(i14,-j11-j12+j13+j14+j2/2-j4/2+j5/2,j,j2,j4,j5,j11,j12,j13,j14,Mj1M4,dotmapMj1M4R4)
	if (count(Mj1M4,1)) Multiply replace_(Mj1M4,Md396,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd396 "1"
#endif

#if `$M5'
* map dots to p0.p8,p0.p9,p1.p8,p1.p9 and change topology to d396
	if (count(Mj1M5,1)) Multiply replace_(i1,j4,i2,j3,i3,j7,i4,j8,i6,j2,i7,j6,i8,j10,i9,j9,i10,j5,i11,j1);
	#call replace(i5,2*j11-2*j13-j4+j5+j7,j,j4,j5,j7,j11,j13,Mj1M5,dotmapMj1M5R1)
	#call replace(i12,`Q2'/2-j11-j3/2+j4/2,j,j3,j4,j11,Mj1M5,dotmapMj1M5R2)
	#call replace(i13,-j1/2+j11+j12+j2/2+j3/2-j4/2,j,j1,j2,j3,j4,j11,j12,Mj1M5,dotmapMj1M5R3)
	#call replace(i14,-j10/2+j12-j14+j2/2-j7/2+j8/2+j9/2,j,j2,j7,j8,j9,j10,j12,j14,Mj1M5,dotmapMj1M5R4)
	if (count(Mj1M5,1)) Multiply replace_(Mj1M5,Md396,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd396 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p5,p0.p8,p1.p5 and change topology to d392
	if (count(Mj1M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j8,i7,j5,i8,j6,i9,j7,i10,j9,i11,j10,i13,j12,i14,j14);
	#call replace(i6,j1+j10-2*j11-2*j13-j2,j,j1,j2,j10,j11,j13,Mj1M6,dotmapMj1M6R1)
	#call replace(i12,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Mj1M6,dotmapMj1M6R2)
	if (count(Mj1M6,1)) Multiply replace_(Mj1M6,Md392,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd392 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p7,p1.p7,p3.p7 and change topology to d422
	if (count(Mj1M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i7,-2*j13+2*j14+j4+j7,j,j4,j7,j13,j14,Mj1M7,dotmapMj1M7R1)
	#call replace(i13,`Q2'/2+j1/2-j11-j12-j2/2,j,j1,j2,j11,j12,Mj1M7,dotmapMj1M7R2)
	#call replace(i14,j1/2-j13-j3/2+j4/2,j,j1,j3,j4,j13,Mj1M7,dotmapMj1M7R3)
	if (count(Mj1M7,1)) Multiply replace_(Mj1M7,Md422,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd422 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p7,p1.p7,p3.p7 and change topology to d423
	if (count(Mj1M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j13);
	#call replace(i8,-2*j13+2*j14+j4+j7,j,j4,j7,j13,j14,Mj1M8,dotmapMj1M8R1)
	if (count(Mj1M8,1)) Multiply replace_(Mj1M8,Md423,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd423 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p7,p1.p7,p3.p7 and change topology to d423
	if (count(Mj1M9,1)) Multiply replace_(i1,j6,i2,j10,i3,j3,i4,j5,i5,j4,i6,j1,i7,j7,i8,j8,i10,j9,i11,j2,i12,j11,i13,j12);
	#call replace(i9,-2*j13+2*j14+j4+j7,j,j4,j7,j13,j14,Mj1M9,dotmapMj1M9R1)
	#call replace(i14,j14+j5/2+j7/2-j8/2,j,j5,j7,j8,j14,Mj1M9,dotmapMj1M9R2)
	if (count(Mj1M9,1)) Multiply replace_(Mj1M9,Md423,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd423 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p7,p1.p5,p1.p7 and change topology to d424
	if (count(Mj1M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j10,i12,j11,i13,j12,i14,j14);
	#call replace(i10,2*j13-j3+j4+j6,j,j3,j4,j6,j13,Mj1M10,dotmapMj1M10R1)
	if (count(Mj1M10,1)) Multiply replace_(Mj1M10,Md424,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd424 "1"
#endif

#if `$M11'
* map dots to p4.p5,p0.p3,p0.p5,p0.p7 and change topology to d417
	if (count(Mj1M11,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j9,i6,j10,i7,j6,i8,j5,i9,j7,i10,j8);
	#call replace(i11,-j1+j10+2*j13+2*j14+j2,j,j1,j2,j10,j13,j14,Mj1M11,dotmapMj1M11R1)
	#call replace(i12,`Q2'/2+j1/2-j12-j2/2,j,j1,j2,j12,Mj1M11,dotmapMj1M11R2)
	#call replace(i13,j12-j13,j,j12,j13,Mj1M11,dotmapMj1M11R3)
	#call replace(i14,j1/2-j11-j4/2-j5/2+j6/2,j,j1,j4,j5,j6,j11,Mj1M11,dotmapMj1M11R4)
	if (count(Mj1M11,1)) Multiply replace_(Mj1M11,Md417,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd417 "1"
#endif
.sort:reduce j1;
#endif
#endprocedure

#procedure Reducej1()
	#call Preparej1()
	#if `$DOACTION'
#ifdef `HASSCHEMEZj1'
		#call MtoZ(Mj1,Zj1,i,14)
		#call Reduce(j1)
		#call ZtoM(Zj1,Mj1,i,14)
#else
		#if `USETURBO'
			#call TurboMj1()
		#endif
		#call triangleS(Mj1,i8,i9,i7,i4,i5,i13,i14,0,0)
#endif
		#call Preparej1()
	#endif
#endprocedure
*--#] reduce-j1 : 
*--#[ reduce-la4 :
#procedure Preparela4()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 3-6 4-7 4-8 5-6 6-7 7-8 8-9
* Dots: p3.p7,p4.p5,p4.p7
* Apply automorphisms
if (match(Mla4*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n3+$n9)
	#call hash(1,$n14,$n12,$n13,$n2,$n9,$n10,$n1,$n4,$n6,$n3,$n7,$n5,$n11,$n8,$n7+$n5+$n10)
if (($n12==0)&&($n13==0));
	#call hash(2,$n14,$n13,$n12,$n8,$n5,$n3,$n11,$n7,$n6,$n10,$n4,$n9,$n1,$n2,$n4+$n9+$n3)
	#call hash(3,$n14,$n13,$n12,$n1,$n3,$n5,$n2,$n4,$n6,$n9,$n7,$n10,$n8,$n11,$n7+$n10+$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n13)*replace_(i1,i8,i2,i11,i3,i5,i4,i7,i5,i3,i7,i4,i8,i1,i9,i10,i10,i9,i11,i2,i12,i13,i13,i12);
elseif ($bestiso == 2); Multiply sign_($n12+$n13)*replace_(i1,i2,i2,i1,i3,i9,i5,i10,i8,i11,i9,i3,i10,i5,i11,i8);
elseif ($bestiso == 3); Multiply replace_(i1,i11,i2,i8,i3,i10,i4,i7,i5,i9,i7,i4,i8,i2,i9,i5,i10,i3,i11,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zla4 automorphism;

#call CheckRemovedPropagators(la4,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p2.p6,p0.p1,p1.p4,p1.p6 and change topology to d425
	if (count(Mla4M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Mla4M1,dotmapMla4M1R1)
	#call replace(i13,`Q2'/2-j13-j2/2+j5/2-j9/2,j,j2,j5,j9,j13,Mla4M1,dotmapMla4M1R2)
	#call replace(i14,j10/2-j11-j14+j4/2-j7/2-j9/2,j,j4,j7,j9,j10,j11,j14,Mla4M1,dotmapMla4M1R3)
	if (count(Mla4M1,1)) Multiply replace_(Mla4M1,Md425,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd425 "1"
#endif

#if `$M2'
* map dots to p2.p6,p0.p1,p1.p4,p1.p6 and change topology to d425
	if (count(Mla4M2,1)) Multiply replace_(i1,j1,i3,j8,i4,j3,i5,j9,i6,j5,i7,j6,i8,j10,i9,j2,i10,j4,i11,j7);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Mla4M2,dotmapMla4M2R1)
	#call replace(i12,-j10/2-j11-j4/2+j7/2+j9/2,j,j4,j7,j9,j10,j11,Mla4M2,dotmapMla4M2R2)
	#call replace(i13,j12-j13+j5/2-j8/2-j9/2,j,j5,j8,j9,j12,j13,Mla4M2,dotmapMla4M2R3)
	#call replace(i14,j10/2+j11+j14+j4/2-j7/2-j9/2,j,j4,j7,j9,j10,j11,j14,Mla4M2,dotmapMla4M2R4)
	if (count(Mla4M2,1)) Multiply replace_(Mla4M2,Md425,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd425 "1"
#endif

#if `$M3'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mla4M3,1)) Multiply replace_(i1,j7,i2,j10,i4,j5,i5,j3,i6,j6,i7,j4,i8,j1,i9,j9,i10,j8,i11,j2,i13,j12,i14,j13);
	#call replace(i3,-j10-2*j11+j7+j9,j,j7,j9,j10,j11,Mla4M3,dotmapMla4M3R1)
	#call replace(i12,-j1/2+j14+j3/2+j4/2,j,j1,j3,j4,j14,Mla4M3,dotmapMla4M3R2)
	if (count(Mla4M3,1)) Multiply replace_(Mla4M3,Md401,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd401 "1"
#endif

#if `$M4'
* map dots to p3.p6,p1.p3,p1.p4,p1.p6 and change topology to d426
	if (count(Mla4M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i4,j1-2*j12+j3,j,j1,j3,j12,Mla4M4,dotmapMla4M4R1)
	#call replace(i13,j13-j3/2-j4/2+j5/2,j,j3,j4,j5,j13,Mla4M4,dotmapMla4M4R2)
	#call replace(i14,-j11+j14,j,j11,j14,Mla4M4,dotmapMla4M4R3)
	if (count(Mla4M4,1)) Multiply replace_(Mla4M4,Md426,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd426 "1"
#endif

#if `$M5'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mla4M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j6,i7,j5,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i14,j13);
	#call replace(i5,-j10+2*j11+j7+j9,j,j7,j9,j10,j11,Mla4M5,dotmapMla4M5R1)
	#call replace(i13,j1/2-j14-j3/2-j4/2,j,j1,j3,j4,j14,Mla4M5,dotmapMla4M5R2)
	if (count(Mla4M5,1)) Multiply replace_(Mla4M5,Md401,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd401 "1"
#endif

#if `$M6'
* map dots to p3.p5,p3.p6,p4.p5,p4.p6 and change topology to d427
	if (count(Mla4M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j13,i14,j14);
	#call replace(i6,-2*j11+j3+j5,j,j3,j5,j11,Mla4M6,dotmapMla4M6R1)
	if (count(Mla4M6,1)) Multiply replace_(Mla4M6,Md427,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd427 "1"
#endif

#if `$M7'
* map dots to p3.p6,p1.p3,p1.p4,p1.p6 and change topology to d426
	if (count(Mla4M7,1)) Multiply replace_(i1,j7,i2,j10,i3,j4,i4,j6,i5,j3,i6,j5,i8,j1,i9,j9,i10,j8,i11,j2,i13,j11);
	#call replace(i7,j1-2*j12+j3,j,j1,j3,j12,Mla4M7,dotmapMla4M7R1)
	#call replace(i12,-j13+j3/2+j4/2-j5/2,j,j3,j4,j5,j13,Mla4M7,dotmapMla4M7R2)
	#call replace(i14,j11-j14,j,j11,j14,Mla4M7,dotmapMla4M7R3)
	if (count(Mla4M7,1)) Multiply replace_(Mla4M7,Md426,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd426 "1"
#endif

#if `$M8'
* map dots to p2.p6,p0.p1,p1.p4,p1.p6 and change topology to d425
	if (count(Mla4M8,1)) Multiply replace_(i1,j7,i2,j10,i3,j4,i4,j6,i5,j2,i6,j5,i7,j1,i9,j9,i10,j8,i11,j3,i12,j13,i13,j11,i14,j14);
	#call replace(i8,-2*j12+j2+j3-j8,j,j2,j3,j8,j12,Mla4M8,dotmapMla4M8R1)
	if (count(Mla4M8,1)) Multiply replace_(Mla4M8,Md425,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd425 "1"
#endif

#if `$M9'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mla4M9,1)) Multiply replace_(i1,j10,i2,j7,i3,j9,i4,j5,i5,j8,i6,j6,i7,j4,i8,j2,i10,j3,i11,j1,i14,j13);
	#call replace(i9,-j10+2*j11+j7+j9,j,j7,j9,j10,j11,Mla4M9,dotmapMla4M9R1)
	#call replace(i12,j14-j2/2+j4/2+j8/2,j,j2,j4,j8,j14,Mla4M9,dotmapMla4M9R2)
	#call replace(i13,j11-j12,j,j11,j12,Mla4M9,dotmapMla4M9R3)
	if (count(Mla4M9,1)) Multiply replace_(Mla4M9,Md401,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd401 "1"
#endif

#if `$M10'
* map dots to p0.p5,p3.p5,p4.p5,p4.p6 and change topology to d401
	if (count(Mla4M10,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j4,i5,j9,i6,j6,i7,j5,i8,j10,i9,j3,i11,j7,i14,j13);
	#call replace(i10,-j10-2*j11+j7+j9,j,j7,j9,j10,j11,Mla4M10,dotmapMla4M10R1)
	#call replace(i12,j11-j12,j,j11,j12,Mla4M10,dotmapMla4M10R2)
	#call replace(i13,-j14+j2/2-j4/2-j8/2,j,j2,j4,j8,j14,Mla4M10,dotmapMla4M10R3)
	if (count(Mla4M10,1)) Multiply replace_(Mla4M10,Md401,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd401 "1"
#endif

#if `$M11'
* map dots to p2.p6,p0.p1,p1.p4,p1.p6 and change topology to d425
	if (count(Mla4M11,1)) Multiply replace_(i1,j10,i2,j7,i3,j9,i4,j6,i5,j8,i6,j5,i7,j1,i8,j3,i9,j4,i10,j2,i14,j14);
	#call replace(i11,2*j12+j2+j3-j8,j,j2,j3,j8,j12,Mla4M11,dotmapMla4M11R1)
	#call replace(i12,j12-j13,j,j12,j13,Mla4M11,dotmapMla4M11R2)
	#call replace(i13,j10/2-j11+j4/2-j7/2-j9/2,j,j4,j7,j9,j10,j11,Mla4M11,dotmapMla4M11R3)
	if (count(Mla4M11,1)) Multiply replace_(Mla4M11,Md425,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd425 "1"
#endif
.sort:reduce la4;
#endif
#endprocedure

#procedure Reducela4()
	#call Preparela4()
	#if `$DOACTION'
#ifdef `HASSCHEMEZla4'
		#call MtoZ(Mla4,Zla4,i,14)
		#call Reduce(la4)
		#call ZtoM(Zla4,Mla4,i,14)
#else
		#if `USETURBO'
			#call TurboMla4()
		#endif
		#call triangleS(Mla4,i1,i2,i4,i3,i9,i13,i14,0,0)
#endif
		#call Preparela4()
	#endif
#endprocedure
*--#] reduce-la4 : 
*--#[ reduce-haha :
#procedure Preparehaha()
* Topology: 0-3 5-8 4-5 3-4 2-3 1-2 1-8 5-6 1-6 4-7 2-7 6-7 8-9
* Dots: p0.p2,p0.p5,p1.p4
* Apply automorphisms
if (match(Mhaha*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n14==0));
	#call hash(0,$n14,$n12,$n13,$n11,$n9,$n10,$n7,$n8,$n1,$n2,$n3,$n4,$n5,$n6)
	#call hash(1,$n14,$n13,$n12,$n11,$n8,$n7,$n10,$n9,$n4,$n5,$n6,$n1,$n2,$n3)
endif;
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n12,$n13,$n11,$n7,$n8,$n9,$n10,$n3,$n2,$n1,$n6,$n5,$n4)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n12+$n13+$n14)*replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1,i7,i8,i8,i7,i9,i10,i10,i9,i12,i13,i13,i12);
elseif ($bestiso == 1); Multiply sign_($n14)*replace_(i1,i3,i3,i1,i4,i6,i6,i4,i7,i9,i8,i10,i9,i7,i10,i8);
elseif ($bestiso == 3); Multiply sign_($n12+$n13)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i7,i10,i8,i9,i9,i8,i10,i7,i12,i13,i13,i12);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zhaha automorphism;

#call CheckRemovedPropagators(haha,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(MhahaM1,1)) Multiply replace_(i2,j10,i3,j2,i4,j1,i5,j3,i6,j5,i7,j7,i8,j6,i9,j9,i10,j4,i11,j8,i13,j11);
	#call replace(i1,`Q2'+2*j11+2*j12+j5,j,j5,j11,j12,MhahaM1,dotmapMhahaM1R1)
	#call replace(i12,`Q2'+j11+j13,j,j11,j13,MhahaM1,dotmapMhahaM1R2)
	#call replace(i14,-`Q2'/2+j14+j2/2+j3/2-j4/2,j,j2,j3,j4,j14,MhahaM1,dotmapMhahaM1R3)
	if (count(MhahaM1,1)) Multiply replace_(MhahaM1,Md416,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd416 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p7,p1.p5,p1.p7 and change topology to d424
	if (count(MhahaM2,1)) Multiply replace_(i1,j10,i3,j2,i4,j1,i5,j3,i6,j6,i7,j9,i8,j5,i9,j8,i10,j4,i11,j7,i13,j11);
	#call replace(i2,`Q2'+2*j11+2*j12+2*j14+j3-j4+j8,j,j3,j4,j8,j11,j12,j14,MhahaM2,dotmapMhahaM2R1)
	#call replace(i12,`Q2'+j11+j12,j,j11,j12,MhahaM2,dotmapMhahaM2R2)
	#call replace(i14,-`Q2'/2+j13+j2/2+j3/2-j4/2,j,j2,j3,j4,j13,MhahaM2,dotmapMhahaM2R3)
	if (count(MhahaM2,1)) Multiply replace_(MhahaM2,Md424,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd424 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(MhahaM3,1)) Multiply replace_(i1,j2,i2,j10,i4,j5,i5,j3,i6,j1,i7,j9,i8,j4,i9,j7,i10,j6,i11,j8,i13,j11);
	#call replace(i3,`Q2'+2*j11-2*j12+j5,j,j5,j11,j12,MhahaM3,dotmapMhahaM3R1)
	#call replace(i12,`Q2'+j11+j13,j,j11,j13,MhahaM3,dotmapMhahaM3R2)
	#call replace(i14,j1/2+j11-j12+j14+j3/2-j4/2,j,j1,j3,j4,j11,j12,j14,MhahaM3,dotmapMhahaM3R3)
	if (count(MhahaM3,1)) Multiply replace_(MhahaM3,Md416,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd416 "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(MhahaM4,1)) Multiply replace_(i1,j1,i2,j3,i3,j5,i5,j10,i6,j2,i7,j4,i8,j9,i9,j6,i10,j7,i11,j8,i12,j11);
	#call replace(i4,`Q2'-2*j11-2*j12+j5,j,j5,j11,j12,MhahaM4,dotmapMhahaM4R1)
	#call replace(i13,-`Q2'+j11-j13,j,j11,j13,MhahaM4,dotmapMhahaM4R2)
	#call replace(i14,-`Q2'/2+j14+j2/2+j3/2-j4/2,j,j2,j3,j4,j14,MhahaM4,dotmapMhahaM4R3)
	if (count(MhahaM4,1)) Multiply replace_(MhahaM4,Md416,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd416 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p7,p1.p5,p1.p7 and change topology to d424
	if (count(MhahaM5,1)) Multiply replace_(i1,j6,i2,j3,i3,j1,i4,j2,i6,j10,i7,j5,i8,j9,i9,j4,i10,j8,i11,j7,i12,j11);
	#call replace(i5,`Q2'-2*j11+2*j12-2*j14+j3-j4+j8,j,j3,j4,j8,j11,j12,j14,MhahaM5,dotmapMhahaM5R1)
	#call replace(i13,-`Q2'+j11-j12,j,j11,j12,MhahaM5,dotmapMhahaM5R2)
	#call replace(i14,-`Q2'/2+j1/2+j10/2-j13+j3/2-j4/2-j6/2,j,j1,j3,j4,j6,j10,j13,MhahaM5,dotmapMhahaM5R3)
	if (count(MhahaM5,1)) Multiply replace_(MhahaM5,Md424,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd424 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(MhahaM6,1)) Multiply replace_(i1,j5,i2,j3,i3,j1,i4,j2,i5,j10,i7,j6,i8,j7,i9,j4,i10,j9,i11,j8,i12,j11);
	#call replace(i6,`Q2'-2*j11+2*j12+j5,j,j5,j11,j12,MhahaM6,dotmapMhahaM6R1)
	#call replace(i13,-`Q2'+j11-j13,j,j11,j13,MhahaM6,dotmapMhahaM6R2)
	#call replace(i14,j1/2-j11+j12-j14+j3/2-j4/2,j,j1,j3,j4,j11,j12,j14,MhahaM6,dotmapMhahaM6R3)
	if (count(MhahaM6,1)) Multiply replace_(MhahaM6,Md416,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd416 "1"
#endif

#if `$M7'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(MhahaM7,1)) Multiply replace_(i1,j7,i2,j3,i3,j1,i4,j2,i5,j9,i6,j10,i8,j6,i9,j4,i10,j8,i11,j5);
	#call replace(i7,j10+2*j12-2*j13+2*j14+j5-j9,j,j5,j9,j10,j12,j13,j14,MhahaM7,dotmapMhahaM7R1)
	#call replace(i12,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,MhahaM7,dotmapMhahaM7R2)
	#call replace(i13,-`Q2'/2-j10/2-j12+j7/2,j,j7,j10,j12,MhahaM7,dotmapMhahaM7R3)
	#call replace(i14,-`Q2'/2+j1/2-j12+j13-j8/2+j9/2,j,j1,j8,j9,j12,j13,MhahaM7,dotmapMhahaM7R4)
	if (count(MhahaM7,1)) Multiply replace_(MhahaM7,Md406,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd406 "1"
#endif

#if `$M8'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(MhahaM8,1)) Multiply replace_(i1,j10,i2,j9,i3,j2,i4,j1,i5,j3,i6,j7,i7,j6,i9,j8,i10,j4,i11,j5);
	#call replace(i8,j10-2*j12-2*j13-2*j14+j5-j9,j,j5,j9,j10,j12,j13,j14,MhahaM8,dotmapMhahaM8R1)
	#call replace(i12,`Q2'/2+j10/2-j12-j7/2,j,j7,j10,j12,MhahaM8,dotmapMhahaM8R2)
	#call replace(i13,-`Q2'/2-j1/2+j11+j2/2,j,j1,j2,j11,MhahaM8,dotmapMhahaM8R3)
	#call replace(i14,-`Q2'/2-j10/2+j12+j13+j2/2+j7/2-j8/2+j9/2,j,j2,j7,j8,j9,j10,j12,j13,MhahaM8,dotmapMhahaM8R4)
	if (count(MhahaM8,1)) Multiply replace_(MhahaM8,Md406,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd406 "1"
#endif

#if `$M9'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(MhahaM9,1)) Multiply replace_(i1,j1,i2,j3,i3,j7,i4,j10,i5,j9,i6,j2,i7,j4,i8,j8,i10,j6,i11,j5);
	#call replace(i9,j10-2*j12+2*j13+2*j14+j5-j9,j,j5,j9,j10,j12,j13,j14,MhahaM9,dotmapMhahaM9R1)
	#call replace(i12,`Q2'/2+j1/2+j11-j2/2,j,j1,j2,j11,MhahaM9,dotmapMhahaM9R2)
	#call replace(i13,-`Q2'/2-j10/2+j12+j7/2,j,j7,j10,j12,MhahaM9,dotmapMhahaM9R3)
	#call replace(i14,-`Q2'/2-j10/2+j12-j13+j2/2+j7/2-j8/2+j9/2,j,j2,j7,j8,j9,j10,j12,j13,MhahaM9,dotmapMhahaM9R4)
	if (count(MhahaM9,1)) Multiply replace_(MhahaM9,Md406,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd406 "1"
#endif

#if `$M10'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(MhahaM10,1)) Multiply replace_(i1,j2,i2,j9,i3,j10,i4,j7,i5,j3,i6,j1,i7,j8,i8,j4,i9,j6,i11,j5);
	#call replace(i10,j10+2*j12-2*j13-2*j14+j5-j9,j,j5,j9,j10,j12,j13,j14,MhahaM10,dotmapMhahaM10R1)
	#call replace(i12,`Q2'/2+j10/2+j12-j7/2,j,j7,j10,j12,MhahaM10,dotmapMhahaM10R2)
	#call replace(i13,-`Q2'/2-j1/2-j11+j2/2,j,j1,j2,j11,MhahaM10,dotmapMhahaM10R3)
	#call replace(i14,-`Q2'/2+j1/2-j12+j13-j8/2+j9/2,j,j1,j8,j9,j12,j13,MhahaM10,dotmapMhahaM10R4)
	if (count(MhahaM10,1)) Multiply replace_(MhahaM10,Md406,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd406 "1"
#endif

#if `$M11'
* map dots to p0.p3,p0.p7,p1.p6,p3.p7 and change topology to d420
	if (count(MhahaM11,1)) Multiply replace_(i1,j10,i2,j9,i3,j2,i4,j1,i5,j3,i6,j6,i7,j8,i8,j5,i9,j7,i10,j4,i13,j11);
	#call replace(i11,2*j12+2*j14-j2+j4+j9,j,j2,j4,j9,j12,j14,MhahaM11,dotmapMhahaM11R1)
	#call replace(i12,`Q2'/2-j1/2-j12+j2/2,j,j1,j2,j12,MhahaM11,dotmapMhahaM11R2)
	#call replace(i14,-`Q2'/2-j1/2-j13+j2/2,j,j1,j2,j13,MhahaM11,dotmapMhahaM11R3)
	if (count(MhahaM11,1)) Multiply replace_(MhahaM11,Md420,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd420 "1"
#endif
.sort:reduce haha;
#endif
#endprocedure

#procedure Reducehaha()
	#call Preparehaha()
	#if `$DOACTION'
		#call MtoZ(Mhaha,Zhaha,i,14)
		id Zhaha(n1?,...,n14?) = Zhaha(n1,...,n14) * 2^(n12+n13+n14);
		.sort:convert haha;
		#call Reduce(haha)
		id Zhaha(n1?,...,n14?) = Zhaha(n1,...,n14) * 1/2^(n12+n13+n14);
		#call ZtoM(Zhaha,Mhaha,i,14)
		#call Preparehaha()
	#endif
#endprocedure
*--#] reduce-haha : 
*--#[ reduce-no1 :
#procedure Prepareno1()
* Topology: 0-1 4-8 3-4 2-3 1-2 1-5 5-6 6-7 7-8 3-7 2-6 4-5 8-9
* Dots: p2.p4,p0.p2,p0.p3
* Apply automorphisms
if (match(Mno1*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n10,$n4,$n3,$n2,$n1,$n8,$n7,$n6,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i5,i2,i6,i3,i7,i4,i8,i5,i1,i6,i2,i7,i3,i8,i4,i9,i10,i10,i9);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zno1 automorphism;

#call CheckRemovedPropagators(no1,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(Mno1M1,1)) Multiply replace_(i2,j5,i3,j3,i4,j1,i5,j2,i6,j9,i7,j8,i8,j7,i9,j6,i10,j4,i11,j10,i14,j11);
	#call replace(i1,`Q2'-2*j12-2*j13+j7,j,j7,j12,j13,Mno1M1,dotmapMno1M1R1)
	#call replace(i12,j1/2-j14+j3/2-j4/2,j,j1,j3,j4,j14,Mno1M1,dotmapMno1M1R2)
	#call replace(i13,j11-j12,j,j11,j12,Mno1M1,dotmapMno1M1R3)
	if (count(Mno1M1,1)) Multiply replace_(Mno1M1,Md416,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd416 "1"
#endif

#if `$M2'
* map dots to p0.p6,p0.p8,p1.p6,p1.p7 and change topology to d399
	if (count(Mno1M2,1)) Multiply replace_(i1,j1,i3,j4,i4,j7,i5,j10,i6,j9,i7,j8,i8,j2,i9,j3,i10,j6,i11,j5);
	#call replace(i2,-`Q2'+2*j12-2*j13+2*j14+j3+j5-j8,j,j3,j5,j8,j12,j13,j14,Mno1M2,dotmapMno1M2R1)
	#call replace(i12,-`Q2'/2-j11+j12+j14+j5/2+j7/2-j9/2,j,j5,j7,j9,j11,j12,j14,Mno1M2,dotmapMno1M2R2)
	#call replace(i13,j1/2-j10/2-j11+j12-j2/2+j7/2,j,j1,j2,j7,j10,j11,j12,Mno1M2,dotmapMno1M2R3)
	#call replace(i14,`Q2'/2-j10/2-j11+j7/2,j,j7,j10,j11,Mno1M2,dotmapMno1M2R4)
	if (count(Mno1M2,1)) Multiply replace_(Mno1M2,Md399,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd399 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mno1M3,1)) Multiply replace_(i1,j10,i2,j3,i4,j1,i5,j2,i6,j8,i7,j6,i8,j7,i9,j4,i10,j5,i11,j9,i12,j13,i13,j11);
	#call replace(i3,-j10+2*j11-2*j14+j5+j7-j8+j9,j,j5,j7,j8,j9,j10,j11,j14,Mno1M3,dotmapMno1M3R1)
	#call replace(i14,`Q2'/2-j10/2+j11-j12+j7/2,j,j7,j10,j11,j12,Mno1M3,dotmapMno1M3R2)
	if (count(Mno1M3,1)) Multiply replace_(Mno1M3,Md387,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd387 "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d391
	if (count(Mno1M4,1)) Multiply replace_(i1,j1,i2,j4,i3,j10,i5,j5,i6,j6,i7,j8,i8,j2,i9,j9,i10,j7,i11,j3);
	#call replace(i4,`Q2'+2*j11-2*j12+j5,j,j5,j11,j12,Mno1M4,dotmapMno1M4R1)
	#call replace(i12,`Q2'/2+j11-j14-j2/2+j4/2+j5/2-j6/2,j,j2,j4,j5,j6,j11,j14,Mno1M4,dotmapMno1M4R2)
	#call replace(i13,`Q2'/2+j1/2+j11-j2/2,j,j1,j2,j11,Mno1M4,dotmapMno1M4R3)
	#call replace(i14,`Q2'+j11-j13,j,j11,j13,Mno1M4,dotmapMno1M4R4)
	if (count(Mno1M4,1)) Multiply replace_(Mno1M4,Md391,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd391 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d416
	if (count(Mno1M5,1)) Multiply replace_(i1,j2,i2,j9,i3,j8,i4,j7,i6,j5,i7,j3,i8,j1,i9,j4,i10,j6,i11,j10,i14,j13);
	#call replace(i5,`Q2'-2*j12-2*j13+j7,j,j7,j12,j13,Mno1M5,dotmapMno1M5R1)
	#call replace(i12,-j14+j3/2-j4/2-j5/2+j7/2+j9/2,j,j3,j4,j5,j7,j9,j14,Mno1M5,dotmapMno1M5R2)
	#call replace(i13,-`Q2'/2-j1/2+j11+j13+j2/2,j,j1,j2,j11,j13,Mno1M5,dotmapMno1M5R3)
	if (count(Mno1M5,1)) Multiply replace_(Mno1M5,Md416,<j1,i1>,...,<j10,i10>,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd416 "1"
#endif

#if `$M6'
* map dots to p0.p6,p0.p8,p1.p6,p1.p7 and change topology to d399
	if (count(Mno1M6,1)) Multiply replace_(i1,j7,i2,j6,i3,j8,i4,j2,i5,j1,i7,j5,i8,j10,i9,j9,i10,j3,i11,j4,i13,j11,i14,j12);
	#call replace(i6,j1+2*j13-2*j14+j4,j,j1,j4,j13,j14,Mno1M6,dotmapMno1M6R1)
	#call replace(i12,j11-j13,j,j11,j13,Mno1M6,dotmapMno1M6R2)
	if (count(Mno1M6,1)) Multiply replace_(Mno1M6,Md399,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd399 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mno1M7,1)) Multiply replace_(i1,j2,i2,j8,i3,j6,i4,j7,i5,j10,i6,j3,i8,j1,i9,j5,i10,j4,i11,j9,i14,j12);
	#call replace(i7,-j10+2*j11-2*j14+j5+j7-j8+j9,j,j5,j7,j8,j9,j10,j11,j14,Mno1M7,dotmapMno1M7R1)
	#call replace(i12,-j1/2+j13-j3/2+j7/2+j8/2,j,j1,j3,j7,j8,j13,Mno1M7,dotmapMno1M7R2)
	#call replace(i13,-j1/2-j10/2+j11+j2/2+j7/2,j,j1,j2,j7,j10,j11,Mno1M7,dotmapMno1M7R3)
	if (count(Mno1M7,1)) Multiply replace_(Mno1M7,Md387,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd387 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p6,p0.p8,p1.p6 and change topology to d391
	if (count(Mno1M8,1)) Multiply replace_(i1,j7,i2,j6,i3,j3,i4,j1,i5,j2,i6,j9,i7,j10,i9,j5,i10,j4,i11,j8,i12,j14,i13,j12,i14,j11);
	#call replace(i8,`Q2'-2*j12+2*j13+j7,j,j7,j12,j13,Mno1M8,dotmapMno1M8R1)
	if (count(Mno1M8,1)) Multiply replace_(Mno1M8,Md391,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd391 "1"
#endif

#if `$M9'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(Mno1M9,1)) Multiply replace_(i1,j10,i2,j6,i3,j3,i4,j1,i5,j2,i6,j8,i7,j5,i8,j7,i10,j4,i11,j9,i12,j13,i13,j12);
	#call replace(i9,-2*j13+2*j14+j3+j6,j,j3,j6,j13,j14,Mno1M9,dotmapMno1M9R1)
	#call replace(i14,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Mno1M9,dotmapMno1M9R2)
	if (count(Mno1M9,1)) Multiply replace_(Mno1M9,Md406,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd406 "1"
#endif

#if `$M10'
* map dots to p0.p4,p0.p6,p1.p6,p4.p6 and change topology to d406
	if (count(Mno1M10,1)) Multiply replace_(i1,j2,i2,j8,i3,j5,i4,j7,i5,j10,i6,j6,i7,j3,i8,j1,i9,j4,i11,j9);
	#call replace(i10,2*j13-2*j14+j3+j6,j,j3,j6,j13,j14,Mno1M10,dotmapMno1M10R1)
	#call replace(i12,-j1/2-j13-j6/2+j7/2+j8/2,j,j1,j6,j7,j8,j13,Mno1M10,dotmapMno1M10R2)
	#call replace(i13,-j1/2-j10/2-j12+j2/2+j7/2,j,j1,j2,j7,j10,j12,Mno1M10,dotmapMno1M10R3)
	#call replace(i14,-j1/2-j10/2+j11-j12+j2/2+j7/2,j,j1,j2,j7,j10,j11,j12,Mno1M10,dotmapMno1M10R4)
	if (count(Mno1M10,1)) Multiply replace_(Mno1M10,Md406,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd406 "1"
#endif

#if `$M11'
* map dots to p1.p2,p2.p4,p0.p2,p0.p3 and change topology to no6
	if (count(Mno1M11,1)) Multiply replace_(i1,j1,i2,j6,i3,j10,i4,j4,i5,j5,i6,j2,i7,j9,i8,j8,i9,j7,i10,j3);
	#call replace(i11,2*j12-2*j13+j2+j5,j,j2,j5,j12,j13,Mno1M11,dotmapMno1M11R1)
	#call replace(i12,-j11+j13-j2/2+j4/2+j6/2-j8/2,j,j2,j4,j6,j8,j11,j13,Mno1M11,dotmapMno1M11R2)
	#call replace(i13,j1/2+j13+j4/2-j5/2-j8/2,j,j1,j4,j5,j8,j13,Mno1M11,dotmapMno1M11R3)
	#call replace(i14,`Q2'/2-j14+j4/2-j5/2,j,j4,j5,j14,Mno1M11,dotmapMno1M11R4)
	if (count(Mno1M11,1)) Multiply replace_(Mno1M11,Mno6,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOno6 "1"
#endif
.sort:reduce no1;
#endif
#endprocedure

#procedure Reduceno1()
	#call Prepareno1()
	#if `$DOACTION'
		#call MtoZ(Mno1,Zno1,i,14)
		id Zno1(n1?,...,n14?) = Zno1(n1,...,n14) * 2^(n12+n13+n14);
		.sort:convert no1;
		#call Reduce(no1)
		id Zno1(n1?,...,n14?) = Zno1(n1,...,n14) * 1/2^(n12+n13+n14);
		#call ZtoM(Zno1,Mno1,i,14)
		#call Prepareno1()
	#endif
#endprocedure
*--#] reduce-no1 : 
*--#[ reduce-no2 :
#procedure Prepareno2()
* Topology: 0-1 5-8 4-5 2-4 1-2 1-6 3-6 3-7 7-8 5-6 3-4 2-7 8-9
* Dots: p0.p2,p1.p4,p0.p3
* Apply automorphisms
if (match(Mno2*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n9,$n10,$n11,$n1,$n2,$n3,$n4,$n5,$n6,$n7,$n8)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n3,$n2,$n1,$n8,$n7,$n6,$n5)
endif;
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n12,$n13,$n14,$n9,$n10,$n11,$n5,$n6,$n7,$n8,$n1,$n2,$n3,$n4)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n14)*replace_(i1,i8,i2,i7,i3,i6,i4,i5,i5,i4,i6,i3,i7,i2,i8,i1,i9,i11,i11,i9);
elseif ($bestiso == 1); Multiply sign_($n12)*replace_(i1,i5,i2,i6,i3,i7,i4,i8,i5,i1,i6,i2,i7,i3,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i8,i6,i7,i7,i6,i8,i5,i9,i11,i11,i9,i12,i14,i14,i12);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zno2 automorphism;

#call CheckRemovedPropagators(no2,11,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p7,p0.p9,p2.p9 and change topology to d394
	if (count(Mno2M1,1)) Multiply replace_(i2,j5,i3,j7,i4,j3,i5,j2,i6,j4,i7,j10,i8,j6,i9,j1,i10,j9,i11,j8,i14,j12);
	#call replace(i1,2*j11+2*j12+2*j13+j2-j3+j6,j,j2,j3,j6,j11,j12,j13,Mno2M1,dotmapMno2M1R1)
	#call replace(i12,j12+j13,j,j12,j13,Mno2M1,dotmapMno2M1R2)
	#call replace(i13,`Q2'/2-j1/2+j11+j13-j14+j4/2+j7/2-j8/2,j,j1,j4,j7,j8,j11,j13,j14,Mno2M1,dotmapMno2M1R3)
	if (count(Mno2M1,1)) Multiply replace_(Mno2M1,Md394,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd394 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mno2M2,1)) Multiply replace_(i1,j1,i3,j3,i4,j10,i5,j7,i6,j6,i7,j8,i8,j2,i9,j4,i10,j5,i11,j9,i14,j11);
	#call replace(i2,j10-2*j11+2*j13-2*j14+j4-j7+j8-j9,j,j4,j7,j8,j9,j10,j11,j13,j14,Mno2M2,dotmapMno2M2R1)
	#call replace(i12,j1/2+j10/2-j12-j2/2-j7/2,j,j1,j2,j7,j10,j12,Mno2M2,dotmapMno2M2R2)
	#call replace(i13,`Q2'/2+j10/2-j11+j13-j2/2-j7/2+j8/2-j9/2,j,j2,j7,j8,j9,j10,j11,j13,Mno2M2,dotmapMno2M2R3)
	if (count(Mno2M2,1)) Multiply replace_(Mno2M2,Md387,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd387 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mno2M3,1)) Multiply replace_(i1,j10,i2,j3,i4,j1,i5,j2,i6,j8,i7,j6,i8,j7,i9,j9,i10,j5,i11,j4,i12,j11);
	#call replace(i3,j10-2*j11+2*j13+2*j14+j4-j7+j8-j9,j,j4,j7,j8,j9,j10,j11,j13,j14,Mno2M3,dotmapMno2M3R1)
	#call replace(i13,`Q2'/2+j10/2-j11+j13-j2/2-j7/2+j8/2-j9/2,j,j2,j7,j8,j9,j10,j11,j13,Mno2M3,dotmapMno2M3R2)
	#call replace(i14,j1/2+j10/2+j12-j2/2-j7/2,j,j1,j2,j7,j10,j12,Mno2M3,dotmapMno2M3R3)
	if (count(Mno2M3,1)) Multiply replace_(Mno2M3,Md387,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd387 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p7,p0.p9,p2.p9 and change topology to d394
	if (count(Mno2M4,1)) Multiply replace_(i1,j3,i2,j7,i3,j5,i5,j6,i6,j10,i7,j4,i8,j2,i9,j8,i10,j9,i11,j1,i12,j12);
	#call replace(i4,-2*j11+2*j12-2*j13+j2-j3+j6,j,j2,j3,j6,j11,j12,j13,Mno2M4,dotmapMno2M4R1)
	#call replace(i13,`Q2'/2-j1/2-j11-j13+j14+j4/2+j7/2-j8/2,j,j1,j4,j7,j8,j11,j13,j14,Mno2M4,dotmapMno2M4R2)
	#call replace(i14,j12-j13,j,j12,j13,Mno2M4,dotmapMno2M4R3)
	if (count(Mno2M4,1)) Multiply replace_(Mno2M4,Md394,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd394 "1"
#endif

#if `$M5'
* map dots to p0.p4,p0.p7,p0.p9,p2.p9 and change topology to d394
	if (count(Mno2M5,1)) Multiply replace_(i1,j2,i2,j4,i3,j9,i4,j5,i6,j6,i7,j8,i8,j3,i9,j1,i10,j10,i11,j7,i12,j11,i14,j13);
	#call replace(i5,`Q2'-2*j12-2*j13+j5,j,j5,j12,j13,Mno2M5,dotmapMno2M5R1)
	#call replace(i13,j12+j14-j3/2-j7/2+j8/2,j,j3,j7,j8,j12,j14,Mno2M5,dotmapMno2M5R2)
	if (count(Mno2M5,1)) Multiply replace_(Mno2M5,Md394,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd394 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mno2M6,1)) Multiply replace_(i1,j7,i2,j6,i3,j8,i4,j2,i5,j1,i7,j3,i8,j10,i9,j4,i10,j5,i11,j9,i12,j12);
	#call replace(i6,j10-2*j11+2*j13+2*j14+j4-j7+j8-j9,j,j4,j7,j8,j9,j10,j11,j13,j14,Mno2M6,dotmapMno2M6R1)
	#call replace(i13,`Q2'/2-j1/2-j11+j13+j8/2-j9/2,j,j1,j8,j9,j11,j13,Mno2M6,dotmapMno2M6R2)
	#call replace(i14,-j1/2-j10/2+j11+j2/2+j7/2,j,j1,j2,j7,j10,j11,Mno2M6,dotmapMno2M6R3)
	if (count(Mno2M6,1)) Multiply replace_(Mno2M6,Md387,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd387 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p6,p1.p3,p1.p6 and change topology to d387
	if (count(Mno2M7,1)) Multiply replace_(i1,j2,i2,j8,i3,j6,i4,j7,i5,j10,i6,j3,i8,j1,i9,j9,i10,j5,i11,j4,i14,j12);
	#call replace(i7,j10+2*j11-2*j13+2*j14+j4-j7+j8-j9,j,j4,j7,j8,j9,j10,j11,j13,j14,Mno2M7,dotmapMno2M7R1)
	#call replace(i12,-j1/2-j10/2-j11+j2/2+j7/2,j,j1,j2,j7,j10,j11,Mno2M7,dotmapMno2M7R2)
	#call replace(i13,`Q2'/2-j1/2+j11-j13+j8/2-j9/2,j,j1,j8,j9,j11,j13,Mno2M7,dotmapMno2M7R3)
	if (count(Mno2M7,1)) Multiply replace_(Mno2M7,Md387,<j1,i1>,...,<j10,i10>,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd387 "1"
#endif

#if `$M8'
* map dots to p0.p4,p0.p7,p0.p9,p2.p9 and change topology to d394
	if (count(Mno2M8,1)) Multiply replace_(i1,j6,i2,j10,i3,j4,i4,j2,i5,j3,i6,j7,i7,j5,i9,j8,i10,j9,i11,j1,i14,j11);
	#call replace(i8,-2*j11-2*j12-2*j13+j2-j3+j6,j,j2,j3,j6,j11,j12,j13,Mno2M8,dotmapMno2M8R1)
	#call replace(i12,j11+j13,j,j11,j13,Mno2M8,dotmapMno2M8R2)
	#call replace(i13,`Q2'/2-j1/2+j12+j14+j4/2+j7/2-j8/2,j,j1,j4,j7,j8,j12,j14,Mno2M8,dotmapMno2M8R3)
	if (count(Mno2M8,1)) Multiply replace_(Mno2M8,Md394,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,i13,j14,i14);
	#redefine HASTOPOd394 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p7,p1.p5,p1.p7 and change topology to d424
	if (count(Mno2M9,1)) Multiply replace_(i1,j10,i2,j8,i3,j4,i4,j1,i5,j2,i6,j9,i7,j5,i8,j6,i10,j7,i11,j3);
	#call replace(i9,-`Q2'+j10+2*j11-2*j12+2*j13+2*j14+j2-j6+j9,j,j2,j6,j9,j10,j11,j12,j13,j14,Mno2M9,dotmapMno2M9R1)
	#call replace(i12,`Q2'/2+j1/2-j11+j12-j2/2,j,j1,j2,j11,j12,Mno2M9,dotmapMno2M9R2)
	#call replace(i13,`Q2'/2-j13-j2/2-j3/2+j4/2,j,j2,j3,j4,j13,Mno2M9,dotmapMno2M9R3)
	#call replace(i14,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Mno2M9,dotmapMno2M9R4)
	if (count(Mno2M9,1)) Multiply replace_(Mno2M9,Md424,<j1,i1>,...,<j10,i10>,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd424 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p7,p1.p6,p3.p7 and change topology to d420
	if (count(Mno2M10,1)) Multiply replace_(i1,j10,i2,j8,i3,j4,i4,j1,i5,j2,i6,j7,i7,j5,i8,j6,i9,j9,i11,j3);
	#call replace(i10,-j1+2*j12+2*j13-2*j14+j2+j5-j6+j7+j8-j9,j,j1,j2,j5,j6,j7,j8,j9,j12,j13,j14,Mno2M10,dotmapMno2M10R1)
	#call replace(i12,j1/2+j10/2-j12-j2/2-j6/2,j,j1,j2,j6,j10,j12,Mno2M10,dotmapMno2M10R2)
	#call replace(i13,`Q2'/2+j1/2-j13-j2/2,j,j1,j2,j13,Mno2M10,dotmapMno2M10R3)
	#call replace(i14,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Mno2M10,dotmapMno2M10R4)
	if (count(Mno2M10,1)) Multiply replace_(Mno2M10,Md420,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd420 "1"
#endif

#if `$M11'
* map dots to p0.p3,p0.p7,p1.p5,p1.p7 and change topology to d424
	if (count(Mno2M11,1)) Multiply replace_(i1,j6,i2,j5,i3,j9,i4,j2,i5,j1,i6,j4,i7,j8,i8,j10,i9,j3,i10,j7);
	#call replace(i11,-`Q2'+j10-2*j11+2*j12+2*j13-2*j14+j2-j6+j9,j,j2,j6,j9,j10,j11,j12,j13,j14,Mno2M11,dotmapMno2M11R1)
	#call replace(i12,`Q2'/2-j10/2+j11+j6/2,j,j6,j10,j11,Mno2M11,dotmapMno2M11R2)
	#call replace(i13,`Q2'/2-j1/2-j10/2-j13-j3/2+j4/2+j6/2,j,j1,j3,j4,j6,j10,j13,Mno2M11,dotmapMno2M11R3)
	#call replace(i14,`Q2'/2-j10/2+j11-j12+j6/2,j,j6,j10,j11,j12,Mno2M11,dotmapMno2M11R4)
	if (count(Mno2M11,1)) Multiply replace_(Mno2M11,Md424,<j1,i1>,...,<j10,i10>,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd424 "1"
#endif
.sort:reduce no2;
#endif
#endprocedure

#procedure Reduceno2()
	#call Prepareno2()
	#if `$DOACTION'
		#call MtoZ(Mno2,Zno2,i,14)
		id Zno2(n1?,...,n14?) = Zno2(n1,...,n14) * 2^(n12+n13+n14);
		.sort:convert no2;
		#call Reduce(no2)
		id Zno2(n1?,...,n14?) = Zno2(n1,...,n14) * 1/2^(n12+n13+n14);
		#call ZtoM(Zno2,Mno2,i,14)
		#call Prepareno2()
	#endif
#endprocedure
*--#] reduce-no2 : 
#call ReduceEdge(11,\
j4,no3,j11,j5,j2,j6,j1,la4,haha,no1,no2\
)
*--#] 11 edges : 
*--#[ 10 edges :
*--#[ reduce-d427 :
#procedure Prepared427()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 4-7 4-8 3-5 3-7 7-8 8-9
* Dots: p3.p5,p3.p6,p4.p5,p4.p6
* Apply automorphisms
if (match(Md427*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n3+$n8)
	#call hash(1,$n14,$n12,$n13,$n11,$n2,$n8,$n9,$n1,$n4,$n3,$n6,$n5,$n10,$n7,$n6+$n5+$n9)
if (($n11==0)&&($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n7,$n5,$n8,$n10,$n6,$n9,$n4,$n3,$n2,$n1,$n4+$n3+$n8)
endif;
if (($n11==0)&&($n12==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n3,$n7,$n6,$n5,$n4,$n8,$n1,$n2,$n4+$n8+$n3)
endif;
if (($n11==0)&&($n12==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n7,$n5,$n3,$n10,$n6,$n9,$n4,$n8,$n1,$n2,$n4+$n8+$n3)
	#call hash(5,$n14,$n13,$n13,$n11,$n1,$n3,$n9,$n2,$n4,$n8,$n6,$n5,$n10,$n7,$n6+$n5+$n9)
	#call hash(6,$n14,$n12,$n12,$n11,$n2,$n8,$n5,$n1,$n4,$n3,$n6,$n9,$n7,$n10,$n6+$n9+$n5)
	#call hash(7,$n14,$n13,$n12,$n11,$n1,$n3,$n5,$n2,$n4,$n8,$n6,$n9,$n7,$n10,$n6+$n9+$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n13)*replace_(i1,i7,i2,i10,i3,i5,i4,i6,i5,i3,i6,i4,i7,i1,i8,i9,i9,i8,i10,i2,i12,i13,i13,i12);
elseif ($bestiso == 2); Multiply sign_($n12+$n14)*replace_(i5,i9,i7,i10,i9,i5,i10,i7);
elseif ($bestiso == 3); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i8,i3);
elseif ($bestiso == 4); Multiply sign_($n11+$n13)*replace_(i1,i2,i2,i1,i3,i8,i5,i9,i7,i10,i8,i3,i9,i5,i10,i7);
elseif ($bestiso == 5); Multiply sign_($n11+$n14)*replace_(i1,i7,i2,i10,i3,i5,i4,i6,i5,i8,i6,i4,i7,i2,i8,i9,i9,i3,i10,i1,i12,i13);
elseif ($bestiso == 6); Multiply sign_($n12+$n14)*replace_(i1,i10,i2,i7,i3,i9,i4,i6,i5,i3,i6,i4,i7,i1,i8,i5,i9,i8,i10,i2,i13,i12);
elseif ($bestiso == 7); Multiply sign_($n11+$n13)*replace_(i1,i10,i2,i7,i3,i9,i4,i6,i5,i8,i6,i4,i7,i2,i8,i5,i9,i3,i10,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd427 automorphism;

#call CheckRemovedPropagators(d427,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p2.p4,p2.p5,p0.p1,p1.p4,p1.p5 and change topology to d292
	if (count(Md427M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Md427M1,dotmapMd427M1R1)
	#call replace(i13,`Q2'/2-j10-j13+j4/2-j8/2,j,j4,j8,j10,j13,Md427M1,dotmapMd427M1R2)
	#call replace(i14,-j11-j14+j4/2-j6/2-j8/2+j9/2,j,j4,j6,j8,j9,j11,j14,Md427M1,dotmapMd427M1R3)
	if (count(Md427M1,1)) Multiply replace_(Md427M1,Md292,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd292 "1"
#endif

#if `$M2'
* map dots to p2.p4,p2.p5,p0.p1,p1.p4,p1.p5 and change topology to d292
	if (count(Md427M2,1)) Multiply replace_(i1,j1,i3,j7,i4,j3,i5,j4,i6,j5,i7,j6,i8,j2,i9,j8,i10,j9);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Md427M2,dotmapMd427M2R1)
	#call replace(i11,`Q2'/2-j10+j4/2-j8/2,j,j4,j8,j10,Md427M2,dotmapMd427M2R2)
	#call replace(i12,-j11+j4/2-j6/2-j8/2+j9/2,j,j4,j6,j8,j9,j11,Md427M2,dotmapMd427M2R3)
	#call replace(i13,-`Q2'/2+j10+j13-j4/2+j8/2,j,j4,j8,j10,j13,Md427M2,dotmapMd427M2R4)
	#call replace(i14,j11+j14-j4/2+j6/2+j8/2-j9/2,j,j4,j6,j8,j9,j11,j14,Md427M2,dotmapMd427M2R5)
	if (count(Md427M2,1)) Multiply replace_(Md427M2,Md292,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd292 "1"
#endif

#if `$M3'
* map dots to p1.p6,p3.p6,p0.p5,p1.p5,p3.p5 and change topology to d293
	if (count(Md427M3,1)) Multiply replace_(i1,j6,i2,j9,i4,j5,i5,j3,i6,j4,i7,j1,i8,j8,i9,j7,i10,j2,i13,j14);
	#call replace(i3,-2*j12+j6+j8-j9,j,j6,j8,j9,j12,Md427M3,dotmapMd427M3R1)
	#call replace(i11,j11-j14,j,j11,j14,Md427M3,dotmapMd427M3R2)
	#call replace(i12,-j10+j11+j13-j14,j,j10,j11,j13,j14,Md427M3,dotmapMd427M3R3)
	#call replace(i14,-j13+j14,j,j13,j14,Md427M3,dotmapMd427M3R4)
	if (count(Md427M3,1)) Multiply replace_(Md427M3,Md293,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd293 "1"
#endif

#if `$M4'
* map dots to p3.p4,p3.p5,p1.p3,p1.p4,p1.p5 and change topology to d294
	if (count(Md427M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i4,j1-2*j12+j3,j,j1,j3,j12,Md427M4,dotmapMd427M4R1)
	#call replace(i13,-j10+j13,j,j10,j13,Md427M4,dotmapMd427M4R2)
	#call replace(i14,-j11+j14,j,j11,j14,Md427M4,dotmapMd427M4R3)
	if (count(Md427M4,1)) Multiply replace_(Md427M4,Md294,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd294 "1"
#endif

#if `$M5'
* map dots to p1.p6,p3.p6,p0.p5,p1.p5,p3.p5 and change topology to d293
	if (count(Md427M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j14);
	#call replace(i5,2*j12+j6+j8-j9,j,j6,j8,j9,j12,Md427M5,dotmapMd427M5R1)
	#call replace(i11,j11+j14,j,j11,j14,Md427M5,dotmapMd427M5R2)
	#call replace(i13,j10-j11+j13-j14,j,j10,j11,j13,j14,Md427M5,dotmapMd427M5R3)
	#call replace(i14,j13-j14,j,j13,j14,Md427M5,dotmapMd427M5R4)
	if (count(Md427M5,1)) Multiply replace_(Md427M5,Md293,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd293 "1"
#endif

#if `$M6'
* map dots to p3.p4,p3.p5,p1.p3,p1.p4,p1.p5 and change topology to d294
	if (count(Md427M6,1)) Multiply replace_(i1,j6,i2,j9,i3,j4,i4,j5,i5,j3,i7,j1,i8,j8,i9,j7,i10,j2,i11,j10,i13,j11);
	#call replace(i6,j1-2*j12+j3,j,j1,j3,j12,Md427M6,dotmapMd427M6R1)
	#call replace(i12,j10-j13,j,j10,j13,Md427M6,dotmapMd427M6R2)
	#call replace(i14,j11-j14,j,j11,j14,Md427M6,dotmapMd427M6R3)
	if (count(Md427M6,1)) Multiply replace_(Md427M6,Md294,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd294 "1"
#endif

#if `$M7'
* map dots to p2.p4,p2.p5,p0.p1,p1.p4,p1.p5 and change topology to d292
	if (count(Md427M7,1)) Multiply replace_(i1,j6,i2,j9,i3,j4,i4,j5,i5,j2,i6,j1,i8,j8,i9,j7,i10,j3,i11,j10,i12,j13,i13,j11,i14,j14);
	#call replace(i7,-2*j12+j2+j3-j7,j,j2,j3,j7,j12,Md427M7,dotmapMd427M7R1)
	if (count(Md427M7,1)) Multiply replace_(Md427M7,Md292,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd292 "1"
#endif

#if `$M8'
* map dots to p1.p6,p3.p6,p0.p5,p1.p5,p3.p5 and change topology to d293
	if (count(Md427M8,1)) Multiply replace_(i1,j9,i2,j6,i3,j5,i4,j8,i5,j3,i6,j4,i7,j1,i9,j7,i10,j2,i11,j14);
	#call replace(i8,`Q2'-2*j12+j5,j,j5,j12,Md427M8,dotmapMd427M8R1)
	#call replace(i12,-j13+j14,j,j13,j14,Md427M8,dotmapMd427M8R2)
	#call replace(i13,`Q2'/2-j11-j14+j3/2-j7/2,j,j3,j7,j11,j14,Md427M8,dotmapMd427M8R3)
	#call replace(i14,-j1/2+j10-j11+j13-j14+j2/2+j3/2-j7/2,j,j1,j2,j3,j7,j10,j11,j13,j14,Md427M8,dotmapMd427M8R4)
	if (count(Md427M8,1)) Multiply replace_(Md427M8,Md293,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd293 "1"
#endif

#if `$M9'
* map dots to p1.p6,p3.p6,p0.p5,p1.p5,p3.p5 and change topology to d293
	if (count(Md427M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j8,i7,j9,i8,j7,i10,j6,i11,j14);
	#call replace(i9,`Q2'-2*j12+j5,j,j5,j12,Md427M9,dotmapMd427M9R1)
	#call replace(i12,-`Q2'/2+j11+j14-j3/2+j7/2,j,j3,j7,j11,j14,Md427M9,dotmapMd427M9R2)
	#call replace(i13,j13-j14,j,j13,j14,Md427M9,dotmapMd427M9R3)
	#call replace(i14,-j1/2+j10-j11+j13-j14+j2/2+j3/2-j7/2,j,j1,j2,j3,j7,j10,j11,j13,j14,Md427M9,dotmapMd427M9R4)
	if (count(Md427M9,1)) Multiply replace_(Md427M9,Md293,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd293 "1"
#endif

#if `$M10'
* map dots to p2.p4,p2.p5,p0.p1,p1.p4,p1.p5 and change topology to d292
	if (count(Md427M10,1)) Multiply replace_(i1,j6,i2,j9,i3,j4,i4,j5,i5,j7,i6,j1,i7,j3,i8,j8,i9,j2,i12,j13,i14,j14);
	#call replace(i10,2*j12+j2+j3-j7,j,j2,j3,j7,j12,Md427M10,dotmapMd427M10R1)
	#call replace(i11,`Q2'/2-j10+j4/2-j8/2,j,j4,j8,j10,Md427M10,dotmapMd427M10R2)
	#call replace(i13,-j11-j4/2+j6/2+j8/2-j9/2,j,j4,j6,j8,j9,j11,Md427M10,dotmapMd427M10R3)
	if (count(Md427M10,1)) Multiply replace_(Md427M10,Md292,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd292 "1"
#endif
.sort:reduce d427;
#endif
#endprocedure

#procedure Reduced427()
	#call Prepared427()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd427'
		#call MtoZ(Md427,Zd427,i,14)
		#call Reduce(d427)
		#call ZtoM(Zd427,Md427,i,14)
#else
		#if `USETURBO'
			#call TurboMd427()
		#endif
		#call triangleS(Md427,i1,i2,i4,i3,i8,i13,i14,0,0)
#endif
		#call Prepared427()
	#endif
#endprocedure
*--#] reduce-d427 : 
*--#[ reduce-d426 :
#procedure Insertiond426()
* merge propagators with same momentum, and repeated dots
	if (count(Md426b,1)) Multiply replace_(Md426b,Md426c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md426c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md426c,dotmapMd426cR1)
	#call replace(i11,`Q2'/2+j2/2-j7/2,j,j2,j7,Md426c,dotmapMd426cR2)
	#call replace(i12,j2/2-j5/2-j7/2+j8/2,j,j2,j5,j7,j8,Md426c,dotmapMd426cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md426c,dotmapMd426cR4)
	#call replace(i14,j2/2+j4/2-j5/2,j,j2,j4,j5,Md426c,dotmapMd426cR5)
	if (count(Md426c,1)) Multiply replace_(Md426c,Md426d,<j1,i1>,...,<j9,i9>);
* map dots to p3.p4 and change topology to d192
	if (count(Md426d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j5,i5,j4,i6,j8,i7,j7,i8,j6);
	#call replace(i9,j1/2-j3/2-j4/2+j5/2-j9,j,j1,j3,j4,j5,j9,Md426d,dotmapMd426dR1)
	if (count(Md426d,1)) Multiply replace_(Md426d,Md192,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd192 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared426()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-6 4-7 4-8 2-6 6-7 7-8 8-9
* Dots: p3.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md426*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n7,$n4,$n3,$n10,$n6,$n5,$n9,$n8,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n7,$n4,$n3,$n10,$n6,$n5,$n9,$n8,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i7,i10,i8,i3,i9,i4,i10,i7);
elseif ($bestiso == 2); Multiply sign_($n11+$n14)*replace_(i3,i8,i4,i9,i7,i10,i8,i3,i9,i4,i10,i7);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd426 automorphism;

#call CheckRemovedPropagators(d426,10,8,3,4,5,6,7,8,9,10,1,2)
#if `$DOACTION' == 0
.sort:reduce d426;
#endif
#endprocedure

#procedure Reduced426()
	#call Prepared426()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd426'
		#call MtoZ(Md426,Zd426,i,14)
		#call Reduce(d426)
		#call ZtoM(Zd426,Md426,i,14)
		#call Prepared426()
#else
		#if `USETURBO'
			#call TurboMd426()
		#endif
		#call insertionS(Md426,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md426b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond426()
#endif
	#endif
#endprocedure
*--#] reduce-d426 : 
*--#[ reduce-d425 :
#procedure Insertiond425()
* merge propagators with same momentum, and repeated dots
	if (count(Md425b,1)) Multiply replace_(Md425b,Md425c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i1,i6,i7,i6,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md425c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j6/2,j,j1,j6,Md425c,dotmapMd425cR1)
	#call replace(i11,`Q2'/2-j1/2+j3/2-j7/2,j,j1,j3,j7,Md425c,dotmapMd425cR2)
	#call replace(i12,j2/2-j5/2-j7/2+j8/2-j9,j,j2,j5,j7,j8,j9,Md425c,dotmapMd425cR3)
	#call replace(i13,`Q2'/2+j2/2-j7/2,j,j2,j7,Md425c,dotmapMd425cR4)
	#call replace(i14,j2/2-j5/2-j7/2+j8/2,j,j2,j5,j7,j8,Md425c,dotmapMd425cR5)
	#call replace(i15,j2/2+j4/2-j5/2,j,j2,j4,j5,Md425c,dotmapMd425cR6)
	if (count(Md425c,1)) Multiply replace_(Md425c,Md425d,<j1,i1>,...,<j9,i9>);
* map dots to p4.p5 and change topology to d193
	if (count(Md425d,1)) Multiply replace_(i1,j6,i2,j7,i3,j8,i4,j4,i5,j2,i6,j5,i7,j3,i8,j1);
	#call replace(i9,j1/2-j2/2-j3/2+j7/2-j9,j,j1,j2,j3,j7,j9,Md425d,dotmapMd425dR1)
	if (count(Md425d,1)) Multiply replace_(Md425d,Md193,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd193 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared425()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-6 4-7 4-8 5-6 6-7 7-8 8-9
* Dots: p2.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md425*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd425 automorphism;

#call CheckRemovedPropagators(d425,10,8,2,4,5,6,7,8,9,10,1,3)
#if `$DOACTION' == 0
.sort:reduce d425;
#endif
#endprocedure

#procedure Reduced425()
	#call Prepared425()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd425'
		#call MtoZ(Md425,Zd425,i,14)
		#call Reduce(d425)
		#call ZtoM(Zd425,Md425,i,14)
		#call Prepared425()
#else
		#if `USETURBO'
			#call TurboMd425()
		#endif
		#call insertionS(Md425,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md425b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond425()
#endif
	#endif
#endprocedure
*--#] reduce-d425 : 
*--#[ reduce-d424 :
#procedure Prepared424()
* Topology: 0-1 1-2 1-6 2-3 2-4 3-5 3-8 4-5 4-6 5-6 6-8 8-9
* Dots: p0.p3,p0.p7,p1.p5,p1.p7
* Apply automorphisms
if (match(Md424*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n4+$n5)
	#call hash(1,$n14,$n13,$n12,$n11,$n2,$n8,$n9,$n7,$n1,$n4,$n5,$n3,$n10,$n6,$n7+$n5+$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n13)*replace_(i1,i6,i2,i10,i4,i5,i5,i4,i6,i1,i8,i9,i9,i8,i10,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd424 automorphism;

#call CheckRemovedPropagators(d424,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md424M1,1)) Multiply replace_(i2,j3,i3,j9,i4,j7,i5,j8,i6,j2,i7,j6,i8,j4,i9,j5,i10,j1,i12,j11);
	#call replace(i1,`Q2'-2*j10+j3,j,j3,j10,Md424M1,dotmapMd424M1R1)
	#call replace(i11,`Q2'-j10-j12,j,j10,j12,Md424M1,dotmapMd424M1R2)
	#call replace(i13,j1/2-j13-j2/2+j3/2-j7/2+j9/2,j,j1,j2,j3,j7,j9,j13,Md424M1,dotmapMd424M1R3)
	#call replace(i14,j11-j14-j4/2+j5/2+j7/2-j8/2,j,j4,j5,j7,j8,j11,j14,Md424M1,dotmapMd424M1R4)
	if (count(Md424M1,1)) Multiply replace_(Md424M1,Md305,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd305 "1"
#endif

#if `$M2'
* map dots to p1.p5,p1.p6,p0.p1,p0.p2,p0.p5 and change topology to d306
	if (count(Md424M2,1)) Multiply replace_(i1,j5,i3,j9,i4,j6,i5,j2,i6,j3,i7,j8,i8,j7,i9,j1,i10,j4);
	#call replace(i2,`Q2'-2*j14+j5,j,j5,j14,Md424M2,dotmapMd424M2R1)
	#call replace(i11,`Q2'/2+j13+j3/2-j4/2,j,j3,j4,j13,Md424M2,dotmapMd424M2R2)
	#call replace(i12,-j12-j13,j,j12,j13,Md424M2,dotmapMd424M2R3)
	#call replace(i13,-j11+j2/2-j3/2-j6/2+j7/2-j8/2+j9/2,j,j2,j3,j6,j7,j8,j9,j11,Md424M2,dotmapMd424M2R4)
	#call replace(i14,-j10+j11-j2/2+j3/2+j6/2-j7/2+j8/2-j9/2,j,j2,j3,j6,j7,j8,j9,j10,j11,Md424M2,dotmapMd424M2R5)
	if (count(Md424M2,1)) Multiply replace_(Md424M2,Md306,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd306 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p7,p1.p5,p1.p6,p1.p7 and change topology to d307
	if (count(Md424M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10,i14,j13);
	#call replace(i3,j1-2*j13-2*j14+j3,j,j1,j3,j13,j14,Md424M3,dotmapMd424M3R1)
	#call replace(i11,`Q2'/2+j1/2-j10-j11-j2/2,j,j1,j2,j10,j11,Md424M3,dotmapMd424M3R2)
	#call replace(i13,j1-j12-j13-j14,j,j1,j12,j13,j14,Md424M3,dotmapMd424M3R3)
	if (count(Md424M3,1)) Multiply replace_(Md424M3,Md307,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd307 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Md424M4,1)) Multiply replace_(i1,j3,i2,j4,i3,j8,i5,j6,i6,j7,i7,j9,i8,j2,i9,j5,i10,j1);
	#call replace(i4,-`Q2'+2*j13-2*j14+j4-j5+j7+j9,j,j4,j5,j7,j9,j13,j14,Md424M4,dotmapMd424M4R1)
	#call replace(i11,`Q2'/2-j1/2+j11+j7/2,j,j1,j7,j11,Md424M4,dotmapMd424M4R2)
	#call replace(i12,j1/2-j10-j11+j3/2-j4/2-j7/2,j,j1,j3,j4,j7,j10,j11,Md424M4,dotmapMd424M4R3)
	#call replace(i13,j14+j5/2-j7/2+j8/2-j9/2,j,j5,j7,j8,j9,j14,Md424M4,dotmapMd424M4R4)
	#call replace(i14,-j10+j12-j14-j2/2+j3/2-j8/2+j9/2,j,j2,j3,j8,j9,j10,j12,j14,Md424M4,dotmapMd424M4R5)
	if (count(Md424M4,1)) Multiply replace_(Md424M4,Md308,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M5'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Md424M5,1)) Multiply replace_(i1,j7,i2,j1,i3,j8,i4,j6,i6,j3,i7,j9,i8,j5,i9,j2,i10,j4);
	#call replace(i5,-`Q2'+2*j13-2*j14+j4-j5+j7+j9,j,j4,j5,j7,j9,j13,j14,Md424M5,dotmapMd424M5R1)
	#call replace(i11,`Q2'/2-j1/2-j11+j7/2,j,j1,j7,j11,Md424M5,dotmapMd424M5R2)
	#call replace(i12,j1/2+j10+j11+j3/2-j4/2-j7/2,j,j1,j3,j4,j7,j10,j11,Md424M5,dotmapMd424M5R3)
	#call replace(i13,-`Q2'/2+j13-j3/2+j4/2-j6/2+j7/2+j8/2,j,j3,j4,j6,j7,j8,j13,Md424M5,dotmapMd424M5R4)
	#call replace(i14,`Q2'/2+j10-j12-j13+j3/2-j4/2+j6/2-j7/2-j8/2,j,j3,j4,j6,j7,j8,j10,j12,j13,Md424M5,dotmapMd424M5R5)
	if (count(Md424M5,1)) Multiply replace_(Md424M5,Md308,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md424M6,1)) Multiply replace_(i1,j2,i2,j1,i3,j9,i4,j8,i5,j7,i7,j6,i8,j5,i9,j4,i10,j3,i12,j11);
	#call replace(i6,`Q2'+2*j10+j3,j,j3,j10,Md424M6,dotmapMd424M6R1)
	#call replace(i11,`Q2'+j10+j12,j,j10,j12,Md424M6,dotmapMd424M6R2)
	#call replace(i13,-`Q2'/2+j1/2-j10+j13-j8/2+j9/2,j,j1,j8,j9,j10,j13,Md424M6,dotmapMd424M6R3)
	#call replace(i14,j11-j14,j,j11,j14,Md424M6,dotmapMd424M6R4)
	if (count(Md424M6,1)) Multiply replace_(Md424M6,Md305,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd305 "1"
#endif

#if `$M7'
* map dots to p0.p6,p0.p3,p1.p3,p3.p5,p3.p6 and change topology to d309
	if (count(Md424M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j6,i5,j7,i6,j9,i8,j3,i9,j4,i10,j5);
	#call replace(i7,-2*j14+j3+j6,j,j3,j6,j14,Md424M7,dotmapMd424M7R1)
	#call replace(i11,`Q2'/2-j1/2-j10+j2/2,j,j1,j2,j10,Md424M7,dotmapMd424M7R2)
	#call replace(i12,j10-j11,j,j10,j11,Md424M7,dotmapMd424M7R3)
	#call replace(i13,-j12+j13-j3/2+j4/2-j6/2+j8/2-j9/2,j,j3,j4,j6,j8,j9,j12,j13,Md424M7,dotmapMd424M7R4)
	#call replace(i14,-j11+j12+j2/2+j6/2-j8/2,j,j2,j6,j8,j11,j12,Md424M7,dotmapMd424M7R5)
	if (count(Md424M7,1)) Multiply replace_(Md424M7,Md309,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd309 "1"
#endif

#if `$M8'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d310
	if (count(Md424M8,1)) Multiply replace_(i1,j9,i2,j6,i3,j8,i4,j3,i5,j7,i6,j2,i7,j4,i9,j5,i10,j1,i12,j12);
	#call replace(i8,-2*j14+j3+j4,j,j3,j4,j14,Md424M8,dotmapMd424M8R1)
	#call replace(i11,`Q2'/2-j10-j6/2+j9/2,j,j6,j9,j10,Md424M8,dotmapMd424M8R2)
	#call replace(i13,-j10+j11-j2/2-j3/2+j7/2+j9/2,j,j2,j3,j7,j9,j10,j11,Md424M8,dotmapMd424M8R3)
	#call replace(i14,j12-j13+j14-j4/2+j5/2-j7/2,j,j4,j5,j7,j12,j13,j14,Md424M8,dotmapMd424M8R4)
	if (count(Md424M8,1)) Multiply replace_(Md424M8,Md310,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd310 "1"
#endif

#if `$M9'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d310
	if (count(Md424M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j7,i5,j3,i6,j9,i7,j4,i8,j5,i10,j6,i12,j12);
	#call replace(i9,2*j14+j3+j4,j,j3,j4,j14,Md424M9,dotmapMd424M9R1)
	#call replace(i11,`Q2'/2+j10-j6/2+j9/2,j,j6,j9,j10,Md424M9,dotmapMd424M9R2)
	#call replace(i13,j10-j11,j,j10,j11,Md424M9,dotmapMd424M9R3)
	#call replace(i14,j12-j13,j,j12,j13,Md424M9,dotmapMd424M9R4)
	if (count(Md424M9,1)) Multiply replace_(Md424M9,Md310,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd310 "1"
#endif

#if `$M10'
* map dots to p1.p5,p1.p6,p0.p1,p0.p2,p0.p5 and change topology to d306
	if (count(Md424M10,1)) Multiply replace_(i1,j3,i2,j4,i3,j9,i4,j2,i5,j6,i6,j5,i7,j8,i8,j1,i9,j7);
	#call replace(i10,`Q2'-2*j14+j5,j,j5,j14,Md424M10,dotmapMd424M10R1)
	#call replace(i11,`Q2'/2-j13+j3/2-j4/2,j,j3,j4,j13,Md424M10,dotmapMd424M10R2)
	#call replace(i12,-j12+j13,j,j12,j13,Md424M10,dotmapMd424M10R3)
	#call replace(i13,j11-j5/2+j7/2-j8/2+j9/2,j,j5,j7,j8,j9,j11,Md424M10,dotmapMd424M10R4)
	#call replace(i14,-j1/2-j10-j11+j3/2+j8/2-j9/2,j,j1,j3,j8,j9,j10,j11,Md424M10,dotmapMd424M10R5)
	if (count(Md424M10,1)) Multiply replace_(Md424M10,Md306,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd306 "1"
#endif
.sort:reduce d424;
#endif
#endprocedure

#procedure Reduced424()
	#call Prepared424()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd424'
		#call MtoZ(Md424,Zd424,i,14)
		#call Reduce(d424)
		#call ZtoM(Zd424,Md424,i,14)
#else
		#if `USETURBO'
			#call TurboMd424()
		#endif
		#call triangleS(Md424,i8,i9,i7,i4,i5,i12,i14,0,0)
#endif
		#call Prepared424()
	#endif
#endprocedure
*--#] reduce-d424 : 
*--#[ reduce-d423 :
#procedure Insertiond423()
* merge propagators with same momentum, and repeated dots
	if (count(Md423b,1)) Multiply replace_(Md423b,Md423c,i6,i5,i5,i6,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,-i10,i12,-i11,i13,-i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md423c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j5/2+j8/2+j9,j,j5,j8,j9,Md423c,dotmapMd423cR1)
	#call replace(i11,j3/2-j4/2-j5/2+j7/2,j,j3,j4,j5,j7,Md423c,dotmapMd423cR2)
	#call replace(i12,j3/2-j5/2+j6/2,j,j3,j5,j6,Md423c,dotmapMd423cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md423c,dotmapMd423cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md423c,dotmapMd423cR5)
	if (count(Md423c,1)) Multiply replace_(Md423c,Md423d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d194
	if (count(Md423d,1)) Multiply replace_(i1,j4,i2,j3,i3,j8,i4,j7,i5,j2,i6,j6,i7,j5,i8,j1);
	#call replace(i9,`Q2'/2-j3/2+j4/2-j9,j,j3,j4,j9,Md423d,dotmapMd423dR1)
	if (count(Md423d,1)) Multiply replace_(Md423d,Md194,<j1,i1>,...,<j8,i8>,j9,-i9);
	#redefine HASTOPOd194 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared423()
* Topology: 0-1 1-2 1-7 2-3 2-4 3-5 3-8 4-5 4-5 4-7 7-8 8-9
* Dots: p0.p3,p0.p7,p1.p7,p3.p7
* Apply automorphisms
if (match(Md423*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd423 automorphism;

#call CheckRemovedPropagators(d423,10,8,1,2,3,4,5,6,9,10,7,8)
#if `$DOACTION' == 0
.sort:reduce d423;
#endif
#endprocedure

#procedure Reduced423()
	#call Prepared423()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd423'
		#call MtoZ(Md423,Zd423,i,14)
		#call Reduce(d423)
		#call ZtoM(Zd423,Md423,i,14)
		#call Prepared423()
#else
		#if `USETURBO'
			#call TurboMd423()
		#endif
		#call insertionS(Md423,i7,i8,i12,i13,i14,i7,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md423b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond423()
#endif
	#endif
#endprocedure
*--#] reduce-d423 : 
*--#[ reduce-d422 :
#procedure Insertiond422()
* merge propagators with same momentum, and repeated dots
	if (count(Md422b,1)) Multiply replace_(Md422b,Md422c,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md422c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j6/2+j8/2,j,j1,j2,j6,j8,Md422c,dotmapMd422cR1)
	#call replace(i11,j1/2-j6/2+j7/2,j,j1,j6,j7,Md422c,dotmapMd422cR2)
	#call replace(i12,j1/2-j4/2+j5/2-j6/2,j,j1,j4,j5,j6,Md422c,dotmapMd422cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md422c,dotmapMd422cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md422c,dotmapMd422cR5)
	if (count(Md422c,1)) Multiply replace_(Md422c,Md422d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d195
	if (count(Md422d,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j5,i5,j6,i6,j8,i7,j3,i8,j4,i9,j9);
	if (count(Md422d,1)) Multiply replace_(Md422d,Md195,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd195 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared422()
* Topology: 0-1 1-2 1-7 2-3 2-4 3-4 3-8 4-6 4-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p7,p1.p7,p3.p7
* Apply automorphisms
if (match(Md422*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n2,$n9,$n7,$n8,$n1,$n4,$n5,$n3,$n10,$n6)
endif;
if (($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n2,$n9,$n8,$n7,$n1,$n4,$n5,$n3,$n10,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 1); Multiply sign_($n12+$n13+$n14)*replace_(i1,i6,i2,i10,i4,i5,i5,i4,i6,i1,i7,i8,i8,i7,i10,i2);
elseif ($bestiso == 3); Multiply sign_($n12+$n13+$n14)*replace_(i1,i6,i2,i10,i4,i5,i5,i4,i6,i1,i10,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd422 automorphism;

#call CheckRemovedPropagators(d422,10,8,1,2,3,4,5,6,9,10,7,8)
#if `$DOACTION' == 0
.sort:reduce d422;
#endif
#endprocedure

#procedure Reduced422()
	#call Prepared422()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd422'
		#call MtoZ(Md422,Zd422,i,14)
		#call Reduce(d422)
		#call ZtoM(Zd422,Md422,i,14)
		#call Prepared422()
#else
		#if `USETURBO'
			#call TurboMd422()
		#endif
		#call insertionS(Md422,i7,i8,i12,i13,i14,i7,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md422b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond422()
#endif
	#endif
#endprocedure
*--#] reduce-d422 : 
*--#[ reduce-d421 :
#procedure Prepared421()
* Topology: 0-1 1-2 1-7 2-4 2-5 2-8 4-5 4-6 5-6 6-7 7-8 8-9
* Dots: p0.p6,p0.p7,p1.p6,p1.p7
* Apply automorphisms
if (match(Md421*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n2,$n9,$n7,$n8,$n6,$n1,$n3,$n4,$n10,$n5,$n6+$n8+$n7)
endif;
if (($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n6+$n7+$n8)
	#call hash(2,$n14,$n13,$n12,$n11,$n2,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n10,$n5,$n6+$n7+$n8)
endif;
if (($n12==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n6+$n7+$n8)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n3,$n4,$n2,$n1,$n6+$n8+$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n12+$n14)*replace_(i1,i5,i2,i10,i3,i4,i4,i3,i5,i1,i7,i8,i8,i7,i10,i2);
elseif ($bestiso == 2); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i5,i2,i10,i5,i1,i10,i2);
elseif ($bestiso == 3); Multiply sign_($n11+$n13)*replace_(i3,i4,i4,i3,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd421 automorphism;

#call CheckRemovedPropagators(d421,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d321
	if (count(Md421M1,1)) Multiply replace_(i2,j9,i3,j3,i4,j7,i5,j1,i6,j4,i7,j5,i8,j6,i9,j8,i10,j2,i11,j13);
	#call replace(i1,j1+2*j12-2*j13+2*j14-j2+j9,j,j1,j2,j9,j12,j13,j14,Md421M1,dotmapMd421M1R1)
	#call replace(i12,j12-j13,j,j12,j13,Md421M1,dotmapMd421M1R2)
	#call replace(i13,-j11+j13,j,j11,j13,Md421M1,dotmapMd421M1R3)
	#call replace(i14,-j10+j11+j12-j13,j,j10,j11,j12,j13,Md421M1,dotmapMd421M1R4)
	if (count(Md421M1,1)) Multiply replace_(Md421M1,Md321,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd321 "1"
#endif

#if `$M2'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d322
	if (count(Md421M2,1)) Multiply replace_(i1,j9,i3,j3,i4,j8,i5,j1,i6,j5,i7,j4,i8,j6,i9,j7,i10,j2,i12,j13,i14,j11);
	#call replace(i2,-j1-2*j13-2*j14+j2+j9,j,j1,j2,j9,j13,j14,Md421M2,dotmapMd421M2R1)
	#call replace(i11,j12-j13,j,j12,j13,Md421M2,dotmapMd421M2R2)
	#call replace(i13,j10-j11,j,j10,j11,Md421M2,dotmapMd421M2R3)
	if (count(Md421M2,1)) Multiply replace_(Md421M2,Md322,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd322 "1"
#endif

#if `$M3'
* map dots to p0.p8,p1.p8,p0.p6,p1.p6,p3.p6 and change topology to d323
	if (count(Md421M3,1)) Multiply replace_(i1,j4,i2,j3,i4,j6,i5,j2,i6,j7,i7,j8,i8,j9,i9,j5,i10,j1,i12,j10);
	#call replace(i3,-2*j13+2*j14+j5+j6,j,j5,j6,j13,j14,Md421M3,dotmapMd421M3R1)
	#call replace(i11,j1/2-j10-j12-j2/2-j3/2+j4/2,j,j1,j2,j3,j4,j10,j12,Md421M3,dotmapMd421M3R2)
	#call replace(i13,-j10+j11-j12+j14-j2/2+j4/2-j8/2+j9/2,j,j2,j4,j8,j9,j10,j11,j12,j14,Md421M3,dotmapMd421M3R3)
	#call replace(i14,j10-j11+j5/2+j8/2-j9/2,j,j5,j8,j9,j10,j11,Md421M3,dotmapMd421M3R4)
	if (count(Md421M3,1)) Multiply replace_(Md421M3,Md323,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd323 "1"
#endif

#if `$M4'
* map dots to p0.p8,p1.p8,p0.p6,p1.p6,p3.p6 and change topology to d323
	if (count(Md421M4,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i5,j2,i6,j7,i7,j9,i8,j8,i9,j5,i10,j1);
	#call replace(i4,-2*j13+2*j14+j5+j6,j,j5,j6,j13,j14,Md421M4,dotmapMd421M4R1)
	#call replace(i11,-j1/2+j10+j12+j2/2+j3/2-j4/2,j,j1,j2,j3,j4,j10,j12,Md421M4,dotmapMd421M4R2)
	#call replace(i12,j1/2-j10-j2/2-j3/2+j4/2,j,j1,j2,j3,j4,j10,Md421M4,dotmapMd421M4R3)
	#call replace(i13,j10-j11+j12-j14+j2/2-j4/2+j8/2-j9/2,j,j2,j4,j8,j9,j10,j11,j12,j14,Md421M4,dotmapMd421M4R4)
	#call replace(i14,-j10+j11-j2/2+j4/2-j8/2+j9/2,j,j2,j4,j8,j9,j10,j11,Md421M4,dotmapMd421M4R5)
	if (count(Md421M4,1)) Multiply replace_(Md421M4,Md323,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd323 "1"
#endif

#if `$M5'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d321
	if (count(Md421M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j7,i6,j4,i7,j5,i8,j6,i9,j8,i10,j9,i11,j13);
	#call replace(i5,j1-2*j12+2*j13-2*j14-j2+j9,j,j1,j2,j9,j12,j13,j14,Md421M5,dotmapMd421M5R1)
	#call replace(i12,j12-j13,j,j12,j13,Md421M5,dotmapMd421M5R2)
	#call replace(i13,j11+j13+j3/2-j5/2+j6/2-j7/2,j,j3,j5,j6,j7,j11,j13,Md421M5,dotmapMd421M5R3)
	#call replace(i14,j10-j11+j12-j13+j5/2-j6/2+j8/2,j,j5,j6,j8,j10,j11,j12,j13,Md421M5,dotmapMd421M5R4)
	if (count(Md421M5,1)) Multiply replace_(Md421M5,Md321,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd321 "1"
#endif

#if `$M6'
* map dots to p0.p6,p1.p6,p0.p3,p1.p3,p3.p6 and change topology to d319
	if (count(Md421M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10,i14,j11);
	#call replace(i6,-2*j14+j3+j6,j,j3,j6,j14,Md421M6,dotmapMd421M6R1)
	#call replace(i11,-j10+j12,j,j10,j12,Md421M6,dotmapMd421M6R2)
	#call replace(i13,-j11+j13,j,j11,j13,Md421M6,dotmapMd421M6R3)
	if (count(Md421M6,1)) Multiply replace_(Md421M6,Md319,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd319 "1"
#endif

#if `$M7'
* map dots to p0.p3,p1.p3,p0.p6,p1.p6,p3.p6 and change topology to d313
	if (count(Md421M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j12,i13,j13);
	#call replace(i7,-2*j14+j3+j6,j,j3,j6,j14,Md421M7,dotmapMd421M7R1)
	#call replace(i12,j10-j12,j,j10,j12,Md421M7,dotmapMd421M7R2)
	#call replace(i14,j11-j13,j,j11,j13,Md421M7,dotmapMd421M7R3)
	if (count(Md421M7,1)) Multiply replace_(Md421M7,Md313,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd313 "1"
#endif

#if `$M8'
* map dots to p0.p3,p1.p3,p0.p6,p1.p6,p3.p6 and change topology to d313
	if (count(Md421M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j12,i13,j13);
	#call replace(i8,2*j14+j3+j6,j,j3,j6,j14,Md421M8,dotmapMd421M8R1)
	#call replace(i12,j1/2-j10-j12-j2/2-j5/2+j9/2,j,j1,j2,j5,j9,j10,j12,Md421M8,dotmapMd421M8R2)
	#call replace(i14,j1/2-j11-j13-j5/2+j8/2,j,j1,j5,j8,j11,j13,Md421M8,dotmapMd421M8R3)
	if (count(Md421M8,1)) Multiply replace_(Md421M8,Md313,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd313 "1"
#endif

#if `$M9'
* map dots to p0.p6,p0.p7,p1.p5,p1.p6,p1.p7 and change topology to d307
	if (count(Md421M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i9,j1-2*j12+j5,j,j1,j5,j12,Md421M9,dotmapMd421M9R1)
	if (count(Md421M9,1)) Multiply replace_(Md421M9,Md307,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd307 "1"
#endif

#if `$M10'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d322
	if (count(Md421M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j8,i5,j9,i6,j5,i7,j4,i8,j6,i9,j7,i12,j13);
	#call replace(i10,-j1+2*j13+2*j14+j2+j9,j,j1,j2,j9,j13,j14,Md421M10,dotmapMd421M10R1)
	#call replace(i11,j12-j13,j,j12,j13,Md421M10,dotmapMd421M10R2)
	#call replace(i13,j10-j11+j3/2-j4/2+j6/2-j8/2,j,j3,j4,j6,j8,j10,j11,Md421M10,dotmapMd421M10R3)
	#call replace(i14,j11+j4/2-j6/2+j7/2,j,j4,j6,j7,j11,Md421M10,dotmapMd421M10R4)
	if (count(Md421M10,1)) Multiply replace_(Md421M10,Md322,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd322 "1"
#endif
.sort:reduce d421;
#endif
#endprocedure

#procedure Reduced421()
	#call Prepared421()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd421'
		#call MtoZ(Md421,Zd421,i,14)
		#call Reduce(d421)
		#call ZtoM(Zd421,Md421,i,14)
#else
		#if `USETURBO'
			#call TurboMd421()
		#endif
		#call triangleS(Md421,i3,i4,i6,i7,i8,i11,i13,0,0)
#endif
		#call Prepared421()
	#endif
#endprocedure
*--#] reduce-d421 : 
*--#[ reduce-d420 :
#procedure Prepared420()
* Topology: 0-1 1-2 1-6 2-3 2-4 3-4 3-8 4-6 4-7 6-7 7-8 8-9
* Dots: p0.p3,p0.p7,p1.p6,p3.p7
* Apply automorphisms
if (match(Md420*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n6,$n3,$n5,$n4,$n10,$n8,$n7,$n9,$n1,$n2,$n9+$n2+$n10)
	#call hash(1,$n14,$n13,$n12,$n11,$n1,$n3,$n4,$n5,$n2,$n7,$n8,$n9,$n6,$n10,$n9+$n10+$n2)
endif;
if (($n12==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n3+$n1+$n6)
	#call hash(3,$n14,$n13,$n12,$n11,$n2,$n9,$n7,$n8,$n1,$n4,$n5,$n3,$n10,$n6,$n3+$n6+$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n12+$n14)*replace_(i1,i2,i2,i1,i3,i9,i4,i7,i5,i8,i6,i10,i7,i4,i8,i5,i9,i3,i10,i6);
elseif ($bestiso == 1); Multiply replace_(i1,i10,i2,i6,i3,i9,i4,i8,i5,i7,i6,i2,i7,i5,i8,i4,i9,i3,i10,i1);
elseif ($bestiso == 3); Multiply sign_($n12+$n14)*replace_(i1,i6,i2,i10,i4,i5,i5,i4,i6,i1,i7,i8,i8,i7,i10,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd420 automorphism;

#call CheckRemovedPropagators(d420,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md420M1,1)) Multiply replace_(i2,j7,i3,j8,i4,j1,i5,j2,i6,j9,i7,j4,i8,j3,i9,j5,i10,j6);
	#call replace(i1,2*j10+2*j11-j6+j7+j9,j,j6,j7,j9,j10,j11,Md420M1,dotmapMd420M1R1)
	#call replace(i11,`Q2'/2+j11-j6/2+j9/2,j,j6,j9,j11,Md420M1,dotmapMd420M1R2)
	#call replace(i12,-`Q2'/2+j10+j11+j12-j6/2+j9/2,j,j6,j9,j10,j11,j12,Md420M1,dotmapMd420M1R3)
	#call replace(i13,-j1/2+j10+j11-j13-j2/2-j6/2+j7/2+j9,j,j1,j2,j6,j7,j9,j10,j11,j13,Md420M1,dotmapMd420M1R4)
	#call replace(i14,-`Q2'/2-j1/2+j10+j12-j14+j4/2-j5/2+j8/2,j,j1,j4,j5,j8,j10,j12,j14,Md420M1,dotmapMd420M1R5)
	if (count(Md420M1,1)) Multiply replace_(Md420M1,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md420M2,1)) Multiply replace_(i1,j7,i3,j5,i4,j4,i5,j3,i6,j6,i7,j1,i8,j2,i9,j8,i10,j9,i11,j12,i12,-j10,i14,-j14);
	#call replace(i2,2*j10-2*j11-j6+j7+j9,j,j6,j7,j9,j10,j11,Md420M2,dotmapMd420M2R1)
	#call replace(i13,-j1/2+j13-j2/2+j6/2+j7/2,j,j1,j2,j6,j7,j13,Md420M2,dotmapMd420M2R2)
	if (count(Md420M2,1)) Multiply replace_(Md420M2,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p3,p1.p3,p3.p5,p3.p6 and change topology to d309
	if (count(Md420M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10);
	#call replace(i3,j1-2*j12+j3,j,j1,j3,j12,Md420M3,dotmapMd420M3R1)
	#call replace(i11,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Md420M3,dotmapMd420M3R2)
	#call replace(i13,j1/2-j12+j13+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,j12,j13,Md420M3,dotmapMd420M3R3)
	#call replace(i14,j10-j14+j2/2+j6/2-j8/2,j,j2,j6,j8,j10,j14,Md420M3,dotmapMd420M3R4)
	if (count(Md420M3,1)) Multiply replace_(Md420M3,Md309,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd309 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d325
	if (count(Md420M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i5,j5,i6,j6,i7,j7,i8,j3,i9,j8,i10,j9,i11,j12);
	#call replace(i4,j1-2*j13+j4,j,j1,j4,j13,Md420M4,dotmapMd420M4R1)
	#call replace(i12,j1/2-j10-j2/2-j6/2+j9/2,j,j1,j2,j6,j9,j10,Md420M4,dotmapMd420M4R2)
	#call replace(i13,j1/2+j10-j11+j6/2-j7/2+j8/2-j9/2,j,j1,j6,j7,j8,j9,j10,j11,Md420M4,dotmapMd420M4R3)
	#call replace(i14,j13-j14-j4/2+j5/2-j6/2,j,j4,j5,j6,j13,j14,Md420M4,dotmapMd420M4R4)
	if (count(Md420M4,1)) Multiply replace_(Md420M4,Md325,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd325 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d325
	if (count(Md420M5,1)) Multiply replace_(i1,j6,i2,j9,i3,j4,i4,j5,i6,j1,i7,j3,i8,j7,i9,j8,i10,j2,i11,j12,i12,j10,i14,j14);
	#call replace(i5,j1-2*j13+j4,j,j1,j4,j13,Md420M5,dotmapMd420M5R1)
	#call replace(i13,j1/2-j10+j11+j6/2-j7/2+j8/2-j9/2,j,j1,j6,j7,j8,j9,j10,j11,Md420M5,dotmapMd420M5R2)
	if (count(Md420M5,1)) Multiply replace_(Md420M5,Md325,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd325 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md420M6,1)) Multiply replace_(i1,j9,i2,j6,i3,j8,i4,j2,i5,j1,i7,j3,i8,j4,i9,j5,i10,j7);
	#call replace(i6,-2*j10-2*j11-j6+j7+j9,j,j6,j7,j9,j10,j11,Md420M6,dotmapMd420M6R1)
	#call replace(i11,`Q2'/2-j11-j6/2+j9/2,j,j6,j9,j11,Md420M6,dotmapMd420M6R2)
	#call replace(i12,-`Q2'/2+j12-j6/2+j9/2,j,j6,j9,j12,Md420M6,dotmapMd420M6R3)
	#call replace(i13,-j1/2-j10-j11-j13-j2/2-j6/2+j7/2+j9,j,j1,j2,j6,j7,j9,j10,j11,j13,Md420M6,dotmapMd420M6R4)
	#call replace(i14,-`Q2'/2+j11+j12+j14-j2/2+j4/2-j5/2+j6/2-j7/2+j8/2,j,j2,j4,j5,j6,j7,j8,j11,j12,j14,Md420M6,dotmapMd420M6R5)
	if (count(Md420M6,1)) Multiply replace_(Md420M6,Md324,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M7'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d325
	if (count(Md420M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j7,i5,j3,i6,j9,i8,j4,i9,j5,i10,j6);
	#call replace(i7,2*j10-2*j11+2*j13+j5-j6+j7-j8+j9,j,j5,j6,j7,j8,j9,j10,j11,j13,Md420M7,dotmapMd420M7R1)
	#call replace(i11,`Q2'/2+j10-j6/2+j9/2,j,j6,j9,j10,Md420M7,dotmapMd420M7R2)
	#call replace(i12,-j1/2-j12+j2/2+j6/2-j9/2,j,j1,j2,j6,j9,j12,Md420M7,dotmapMd420M7R3)
	#call replace(i13,-j10+j11+j2/2-j7/2+j8/2,j,j2,j7,j8,j10,j11,Md420M7,dotmapMd420M7R4)
	#call replace(i14,-j12-j14+j2/2+j3/2+j4/2-j5/2+j6/2-j7/2-j9/2,j,j2,j3,j4,j5,j6,j7,j9,j12,j14,Md420M7,dotmapMd420M7R5)
	if (count(Md420M7,1)) Multiply replace_(Md420M7,Md325,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd325 "1"
#endif

#if `$M8'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d325
	if (count(Md420M8,1)) Multiply replace_(i1,j9,i2,j6,i3,j8,i4,j3,i5,j7,i6,j2,i7,j4,i9,j5,i10,j1,i12,j12);
	#call replace(i8,-2*j10+2*j11-2*j13+j5-j6+j7-j8+j9,j,j5,j6,j7,j8,j9,j10,j11,j13,Md420M8,dotmapMd420M8R1)
	#call replace(i11,`Q2'/2-j10-j6/2+j9/2,j,j6,j9,j10,Md420M8,dotmapMd420M8R2)
	#call replace(i13,j10-j11+j2/2-j7/2+j8/2,j,j2,j7,j8,j10,j11,Md420M8,dotmapMd420M8R3)
	#call replace(i14,j12-j14+j4/2-j5/2+j6/2,j,j4,j5,j6,j12,j14,Md420M8,dotmapMd420M8R4)
	if (count(Md420M8,1)) Multiply replace_(Md420M8,Md325,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd325 "1"
#endif

#if `$M9'
* map dots to p0.p6,p0.p3,p1.p3,p3.p5,p3.p6 and change topology to d309
	if (count(Md420M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j6,i5,j7,i6,j9,i7,j3,i8,j4,i10,j5,i12,j11);
	#call replace(i9,j1+2*j12+j3,j,j1,j3,j12,Md420M9,dotmapMd420M9R1)
	#call replace(i11,`Q2'/2-j1/2-j10+j2/2,j,j1,j2,j10,Md420M9,dotmapMd420M9R2)
	#call replace(i13,j12-j13+j2/2+j3/2-j4/2+j9/2,j,j2,j3,j4,j9,j12,j13,Md420M9,dotmapMd420M9R3)
	#call replace(i14,j11-j12-j14,j,j11,j12,j14,Md420M9,dotmapMd420M9R4)
	if (count(Md420M9,1)) Multiply replace_(Md420M9,Md309,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd309 "1"
#endif

#if `$M10'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md420M10,1)) Multiply replace_(i1,j6,i2,j9,i3,j5,i4,j3,i5,j4,i6,j7,i7,j2,i8,j1,i9,j8,i11,j12,i12,j11);
	#call replace(i10,2*j10+2*j11-j6+j7+j9,j,j6,j7,j9,j10,j11,Md420M10,dotmapMd420M10R1)
	#call replace(i13,-j1/2-j13-j2/2+j6/2+j7/2,j,j1,j2,j6,j7,j13,Md420M10,dotmapMd420M10R2)
	#call replace(i14,-j14-j3/2+j4/2+j6/2-j7/2,j,j3,j4,j6,j7,j14,Md420M10,dotmapMd420M10R3)
	if (count(Md420M10,1)) Multiply replace_(Md420M10,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif
.sort:reduce d420;
#endif
#endprocedure

#procedure Reduced420()
	#call Prepared420()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd420'
		#call MtoZ(Md420,Zd420,i,14)
		#call Reduce(d420)
		#call ZtoM(Zd420,Md420,i,14)
#else
		#if `USETURBO'
			#call TurboMd420()
		#endif
		#call triangleS(Md420,i4,i5,i3,i1,i6,i11,i14,0,0)
#endif
		#call Prepared420()
	#endif
#endprocedure
*--#] reduce-d420 : 
*--#[ reduce-d419 :
#procedure Insertiond419()
* merge propagators with same momentum, and repeated dots
	if (count(Md419b,1)) Multiply replace_(Md419b,Md419c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md419c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j8/2,j,j3,j8,Md419c,dotmapMd419cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md419c,dotmapMd419cR2)
	#call replace(i12,j2/2-j4/2+j6/2-j7/2+j9,j,j2,j4,j6,j7,j9,Md419c,dotmapMd419cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md419c,dotmapMd419cR4)
	#call replace(i14,j2/2+j5/2-j7/2+j9,j,j2,j5,j7,j9,Md419c,dotmapMd419cR5)
	if (count(Md419c,1)) Multiply replace_(Md419c,Md419d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3 and change topology to d196
	if (count(Md419d,1)) Multiply replace_(i1,j8,i2,j6,i3,j1,i4,j2,i5,j3,i6,j4,i7,j5,i8,j7,i9,j9);
	if (count(Md419d,1)) Multiply replace_(Md419d,Md196,<j1,i1>,...,<j8,i8>,j9,-i9);
	#redefine HASTOPOd196 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared419()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-8 2-5 5-6 5-7 6-7 7-8 8-9
* Dots: p0.p7,p0.p3,p1.p3,p3.p7
* Apply automorphisms
if (match(Md419*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd419 automorphism;

#call CheckRemovedPropagators(d419,10,8,1,2,5,6,7,8,9,10,3,4)
#if `$DOACTION' == 0
.sort:reduce d419;
#endif
#endprocedure

#procedure Reduced419()
	#call Prepared419()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd419'
		#call MtoZ(Md419,Zd419,i,14)
		#call Reduce(d419)
		#call ZtoM(Zd419,Md419,i,14)
		#call Prepared419()
#else
		#if `USETURBO'
			#call TurboMd419()
		#endif
		#call insertionS(Md419,i3,i4,i12,i13,i14,i3,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md419b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond419()
#endif
	#endif
#endprocedure
*--#] reduce-d419 : 
*--#[ reduce-d418 :
#procedure Insertiond418()
* merge propagators with same momentum, and repeated dots
	if (count(Md418b,1)) Multiply replace_(Md418b,Md418c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md418c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j8/2,j,j1,j2,j3,j8,Md418c,dotmapMd418cR1)
	#call replace(i11,j1/2-j3/2+j4/2,j,j1,j3,j4,Md418c,dotmapMd418cR2)
	#call replace(i12,j4/2+j5/2-j6/2,j,j4,j5,j6,Md418c,dotmapMd418cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md418c,dotmapMd418cR4)
	#call replace(i14,j2/2+j5/2-j7/2+j9,j,j2,j5,j7,j9,Md418c,dotmapMd418cR5)
	if (count(Md418c,1)) Multiply replace_(Md418c,Md418d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d195
	if (count(Md418d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-`Q2'/2+j1/2-j2/2+j9,j,j1,j2,j9,Md418d,dotmapMd418dR1)
	if (count(Md418d,1)) Multiply replace_(Md418d,Md195,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd195 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared418()
* Topology: 0-1 1-2 1-6 2-4 2-4 2-8 4-5 5-6 5-7 6-7 7-8 8-9
* Dots: p0.p7,p0.p3,p1.p3,p3.p7
* Apply automorphisms
if (match(Md418*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n2,$n9,$n7,$n8,$n6,$n1,$n3,$n4,$n10,$n5)
endif;
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n2,$n9,$n7,$n8,$n6,$n1,$n4,$n3,$n10,$n5)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n12+$n13)*replace_(i1,i5,i2,i10,i3,i4,i4,i3,i5,i1,i7,i8,i8,i7,i10,i2);
elseif ($bestiso == 2); Multiply sign_($n11+$n12+$n13)*replace_(i1,i5,i2,i10,i5,i1,i7,i8,i8,i7,i10,i2);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd418 automorphism;

#call CheckRemovedPropagators(d418,10,8,1,2,5,6,7,8,9,10,3,4)
#if `$DOACTION' == 0
.sort:reduce d418;
#endif
#endprocedure

#procedure Reduced418()
	#call Prepared418()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd418'
		#call MtoZ(Md418,Zd418,i,14)
		#call Reduce(d418)
		#call ZtoM(Zd418,Md418,i,14)
		#call Prepared418()
#else
		#if `USETURBO'
			#call TurboMd418()
		#endif
		#call insertionS(Md418,i3,i4,i12,i13,i14,i3,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md418b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond418()
#endif
	#endif
#endprocedure
*--#] reduce-d418 : 
*--#[ reduce-d417 :
#procedure Insertiond417()
* merge propagators with same momentum, and repeated dots
	if (count(Md417b,1)) Multiply replace_(Md417b,Md417c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md417c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j2/2,j,j1,j2,Md417c,dotmapMd417cR1)
	#call replace(i11,j1/2+j3/2-j4/2+j9,j,j1,j3,j4,j9,Md417c,dotmapMd417cR2)
	#call replace(i12,-`Q2'/2+j1/2+j3/2-j4/2-j6/2+j8/2+j9,j,j1,j3,j4,j6,j8,j9,Md417c,dotmapMd417cR3)
	#call replace(i13,j1/2+j3/2-j4/2,j,j1,j3,j4,Md417c,dotmapMd417cR4)
	#call replace(i14,j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,Md417c,dotmapMd417cR5)
	#call replace(i15,j3/2+j5/2-j6/2,j,j3,j5,j6,Md417c,dotmapMd417cR6)
	if (count(Md417c,1)) Multiply replace_(Md417c,Md417d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3 and change topology to d197
	if (count(Md417d,1)) Multiply replace_(i1,j2,i2,j1,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-j2/2-j3/2+j4/2+j9,j,j2,j3,j4,j9,Md417d,dotmapMd417dR1)
	if (count(Md417d,1)) Multiply replace_(Md417d,Md197,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd197 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared417()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-5 4-5 4-7 5-6 6-7 7-9
* Dots: p4.p5,p0.p3,p0.p5,p0.p7
* Apply automorphisms
if (match(Md417*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd417 automorphism;

#call CheckRemovedPropagators(d417,10,9,1,3,4,5,6,7,8,9,10,2)
#if `$DOACTION' == 0
.sort:reduce d417;
#endif
#endprocedure

#procedure Reduced417()
	#call Prepared417()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd417'
		#call MtoZ(Md417,Zd417,i,14)
		#call Reduce(d417)
		#call ZtoM(Zd417,Md417,i,14)
		#call Prepared417()
#else
		#if `USETURBO'
			#call TurboMd417()
		#endif
		#call MtoZ(Md417,Zd417,i,14)
		#call carpet(Zd417,1,2,0,0,0,3,12,3,5,7)
		#call ZtoM(Zd417b,Md417b,i,16)
		#call Insertiond417()
#endif
	#endif
#endprocedure
*--#] reduce-d417 : 
*--#[ reduce-d416 :
#procedure Prepared416()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-5 4-5 5-6 6-7 4-7 4-9
* Dots: p0.p3,p0.p6,p0.p8,p1.p6
* Apply automorphisms
if (match(Md416*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd416 automorphism;

#call CheckRemovedPropagators(d416,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4,p0.p6,p0.p8,p4.p8 and change topology to d339
	if (count(Md416M1,1)) Multiply replace_(i2,j3,i3,j2,i4,j1,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i1,-`Q2'+2*j11-2*j12+2*j13+j3,j,j3,j11,j12,j13,Md416M1,dotmapMd416M1R1)
	#call replace(i12,j10-j11,j,j10,j11,Md416M1,dotmapMd416M1R2)
	#call replace(i13,j10-j11+j12,j,j10,j11,j12,Md416M1,dotmapMd416M1R3)
	#call replace(i14,-j1/2+j13-j14+j2/2+j3/2-j4/2+j6/2-j9/2,j,j1,j2,j3,j4,j6,j9,j13,j14,Md416M1,dotmapMd416M1R4)
	if (count(Md416M1,1)) Multiply replace_(Md416M1,Md339,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd339 "1"
#endif

#if `$M2'
* map dots to p1.p4,p0.p1,p0.p2,p0.p4,p0.p6 and change topology to d340
	if (count(Md416M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12);
	#call replace(i2,`Q2'+j1-2*j11,j,j1,j11,Md416M2,dotmapMd416M2R1)
	#call replace(i12,j12-j13,j,j12,j13,Md416M2,dotmapMd416M2R2)
	#call replace(i13,j12-j13+j14,j,j12,j13,j14,Md416M2,dotmapMd416M2R3)
	#call replace(i14,j1/2-j10+j2/2-j3/2,j,j1,j2,j3,j10,Md416M2,dotmapMd416M2R4)
	if (count(Md416M2,1)) Multiply replace_(Md416M2,Md340,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd340 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md416M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j5,i5,j3,i6,j4,i7,j7,i8,j6,i9,j8,i10,j9,i13,j11);
	#call replace(i3,-`Q2'+2*j10-2*j12+2*j14+j5-j8+j9,j,j5,j8,j9,j10,j12,j14,Md416M3,dotmapMd416M3R1)
	#call replace(i11,j10+j11-j12,j,j10,j11,j12,Md416M3,dotmapMd416M3R2)
	#call replace(i12,j11-j12,j,j11,j12,Md416M3,dotmapMd416M3R3)
	#call replace(i14,-`Q2'/2+j1/2+j10-j12-j13+j14-j8/2+j9/2,j,j1,j8,j9,j10,j12,j13,j14,Md416M3,dotmapMd416M3R4)
	if (count(Md416M3,1)) Multiply replace_(Md416M3,Md305,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd305 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d341
	if (count(Md416M4,1)) Multiply replace_(i1,j6,i2,j9,i3,j2,i5,j1,i6,j3,i7,j7,i8,j4,i9,j5,i10,j8,i12,j11);
	#call replace(i4,2*j12-2*j13-2*j14+j4-j8+j9,j,j4,j8,j9,j12,j13,j14,Md416M4,dotmapMd416M4R1)
	#call replace(i11,j10+j11,j,j10,j11,Md416M4,dotmapMd416M4R2)
	#call replace(i13,-`Q2'/2+j10+j11+j12-j6/2+j9/2,j,j6,j9,j10,j11,j12,Md416M4,dotmapMd416M4R3)
	#call replace(i14,-j1/2+j14+j2/2-j4/2+j7/2,j,j1,j2,j4,j7,j14,Md416M4,dotmapMd416M4R4)
	if (count(Md416M4,1)) Multiply replace_(Md416M4,Md341,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd341 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p4,p0.p1,p1.p3,p1.p5 and change topology to d342
	if (count(Md416M5,1)) Multiply replace_(i1,j6,i2,j9,i3,j3,i4,j5,i6,j1,i7,j2,i8,j7,i9,j8,i10,j4,i11,j10,i12,j12);
	#call replace(i5,j1-2*j13+j3,j,j1,j3,j13,Md416M5,dotmapMd416M5R1)
	#call replace(i13,-`Q2'+j10-j11,j,j10,j11,Md416M5,dotmapMd416M5R2)
	#call replace(i14,j13+j14,j,j13,j14,Md416M5,dotmapMd416M5R3)
	if (count(Md416M5,1)) Multiply replace_(Md416M5,Md342,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd342 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p6,p1.p6,p3.p6,p5.p6 and change topology to d343
	if (count(Md416M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j6,i7,j7,i8,j5,i9,j8,i10,j9,i11,j10);
	#call replace(i6,-2*j13+j3+j6,j,j3,j6,j13,Md416M6,dotmapMd416M6R1)
	#call replace(i12,j10-j11,j,j10,j11,Md416M6,dotmapMd416M6R2)
	#call replace(i13,-`Q2'/2+j10-j13+j14+j6/2-j7/2+j9/2,j,j6,j7,j9,j10,j13,j14,Md416M6,dotmapMd416M6R3)
	#call replace(i14,j1/2-j12+j3/2-j4/2,j,j1,j3,j4,j12,Md416M6,dotmapMd416M6R4)
	if (count(Md416M6,1)) Multiply replace_(Md416M6,Md343,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd343 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d344
	if (count(Md416M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j8,i5,j5,i6,j6,i8,j9,i9,j4,i10,j3,i11,j11);
	#call replace(i7,`Q2'+2*j10-2*j12-2*j14+j3+j5,j,j3,j5,j10,j12,j14,Md416M7,dotmapMd416M7R1)
	#call replace(i12,j11-j12,j,j11,j12,Md416M7,dotmapMd416M7R2)
	#call replace(i13,-`Q2'-j10+j11,j,j10,j11,Md416M7,dotmapMd416M7R3)
	#call replace(i14,-j12+j13+j2/2+j7/2-j8/2,j,j2,j7,j8,j12,j13,Md416M7,dotmapMd416M7R4)
	if (count(Md416M7,1)) Multiply replace_(Md416M7,Md344,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd344 "1"
#endif

#if `$M8'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md416M8,1)) Multiply replace_(i1,j6,i2,j9,i3,j5,i4,j3,i5,j7,i6,j4,i7,j1,i9,j2,i10,j8,i11,j12);
	#call replace(i8,-2*j11+2*j14+j4+j6-j7+j8-j9,j,j4,j6,j7,j8,j9,j11,j14,Md416M8,dotmapMd416M8R1)
	#call replace(i12,-`Q2'/2-j10+j11+j12-j6/2+j9/2,j,j6,j9,j10,j11,j12,Md416M8,dotmapMd416M8R2)
	#call replace(i13,-`Q2'/2+j11+j12-j6/2+j9/2,j,j6,j9,j11,j12,Md416M8,dotmapMd416M8R3)
	#call replace(i14,j1/2-j13+j2/2-j3/2+j5/2-j7/2,j,j1,j2,j3,j5,j7,j13,Md416M8,dotmapMd416M8R4)
	if (count(Md416M8,1)) Multiply replace_(Md416M8,Md324,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md416M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j8,i5,j6,i6,j5,i7,j4,i8,j3,i10,j9,i11,j12,i12,j11,i13,j10);
	#call replace(i9,-`Q2'+2*j12-2*j13-j7+j8+j9,j,j7,j8,j9,j12,j13,Md416M9,dotmapMd416M9R1)
	#call replace(i14,j11-j14,j,j11,j14,Md416M9,dotmapMd416M9R2)
	if (count(Md416M9,1)) Multiply replace_(Md416M9,Md345,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd345 "1"
#endif

#if `$M10'
* map dots to p1.p5,p1.p6,p0.p1,p0.p2,p0.p5 and change topology to d306
	if (count(Md416M10,1)) Multiply replace_(i1,j3,i2,j4,i3,j9,i4,j2,i5,j5,i6,j6,i7,j7,i8,j8,i9,j1);
	#call replace(i10,2*j10+2*j11-2*j12-j2+j4+j8,j,j2,j4,j8,j10,j11,j12,Md416M10,dotmapMd416M10R1)
	#call replace(i11,`Q2'/2-j13+j3/2-j4/2,j,j3,j4,j13,Md416M10,dotmapMd416M10R2)
	#call replace(i12,`Q2'/2-j13-j14+j3/2-j4/2,j,j3,j4,j13,j14,Md416M10,dotmapMd416M10R3)
	#call replace(i13,-j12-j13,j,j12,j13,Md416M10,dotmapMd416M10R4)
	#call replace(i14,-j11-j5/2+j7/2-j8/2+j9/2,j,j5,j7,j8,j9,j11,Md416M10,dotmapMd416M10R5)
	if (count(Md416M10,1)) Multiply replace_(Md416M10,Md306,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd306 "1"
#endif
.sort:reduce d416;
#endif
#endprocedure

#procedure Reduced416()
	#call Prepared416()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd416'
		#call MtoZ(Md416,Zd416,i,14)
		#call Reduce(d416)
		#call ZtoM(Zd416,Md416,i,14)
#else
		#if `USETURBO'
			#call TurboMd416()
		#endif
		#call triangleS(Md416,i5,i7,i6,i3,i8,i12,i14,0,0)
#endif
		#call Prepared416()
	#endif
#endprocedure
*--#] reduce-d416 : 
*--#[ reduce-d415 :
#procedure Insertiond415()
* merge propagators with same momentum, and repeated dots
	if (count(Md415b,1)) Multiply replace_(Md415b,Md415c,i5,i3,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i11,i9,i12,i10,i13,i11,i14,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md415c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j3/2-j4/2,j,j1,j3,j4,Md415c,dotmapMd415cR1)
	#call replace(i11,j3/2+j5/2-j6/2,j,j3,j5,j6,Md415c,dotmapMd415cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md415c,dotmapMd415cR3)
	#call replace(i13,`Q2'/2+j5/2-j8/2,j,j5,j8,Md415c,dotmapMd415cR4)
	#call replace(i14,j1/2+j5/2-j7/2,j,j1,j5,j7,Md415c,dotmapMd415cR5)
	if (count(Md415c,1)) Multiply replace_(Md415c,Md415d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d198
	if (count(Md415d,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i4,j8,i5,j2,i6,j7,i7,j5,i8,j1);
	#call replace(i9,`Q2'/2-j1/2+j2/2+j9,j,j1,j2,j9,Md415d,dotmapMd415dR1)
	if (count(Md415d,1)) Multiply replace_(Md415d,Md198,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd198 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared415()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-4 4-8 4-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5,p5.p7
* Apply automorphisms
if (match(Md415*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd415 automorphism;

#call CheckRemovedPropagators(d415,10,8,1,2,3,4,7,8,9,10,5,6)
#if `$DOACTION' == 0
.sort:reduce d415;
#endif
#endprocedure

#procedure Reduced415()
	#call Prepared415()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd415'
		#call MtoZ(Md415,Zd415,i,14)
		#call Reduce(d415)
		#call ZtoM(Zd415,Md415,i,14)
		#call Prepared415()
#else
		#if `USETURBO'
			#call TurboMd415()
		#endif
		#call insertionS(Md415,i5,i6,i12,i13,i14,i5,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md415b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond415()
#endif
	#endif
#endprocedure
*--#] reduce-d415 : 
*--#[ reduce-d414 :
#procedure Insertiond414()
* merge propagators with same momentum, and repeated dots
	if (count(Md414b,1)) Multiply replace_(Md414b,Md414c,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md414c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j8/2,j,j5,j8,Md414c,dotmapMd414cR1)
	#call replace(i11,j1/2+j5/2-j7/2,j,j1,j5,j7,Md414c,dotmapMd414cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md414c,dotmapMd414cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md414c,dotmapMd414cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md414c,dotmapMd414cR5)
	if (count(Md414c,1)) Multiply replace_(Md414c,Md414d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4 and change topology to d199
	if (count(Md414d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j6,i6,j5,i7,j7,i8,j8);
	#call replace(i9,`Q2'/2+j1/2-j2/2-j9,j,j1,j2,j9,Md414d,dotmapMd414dR1)
	if (count(Md414d,1)) Multiply replace_(Md414d,Md199,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd199 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared414()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-4 4-8 3-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md414*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd414 automorphism;

#call CheckRemovedPropagators(d414,10,8,1,2,3,4,7,8,9,10,5,6)
#if `$DOACTION' == 0
.sort:reduce d414;
#endif
#endprocedure

#procedure Reduced414()
	#call Prepared414()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd414'
		#call MtoZ(Md414,Zd414,i,14)
		#call Reduce(d414)
		#call ZtoM(Zd414,Md414,i,14)
		#call Prepared414()
#else
		#if `USETURBO'
			#call TurboMd414()
		#endif
		#call insertionS(Md414,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md414b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond414()
#endif
	#endif
#endprocedure
*--#] reduce-d414 : 
*--#[ reduce-d413 :
#procedure Insertiond413()
* merge propagators with same momentum, and repeated dots
	if (count(Md413b,1)) Multiply replace_(Md413b,Md413c,i6,i5,i5,i6,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md413c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j5/2+j8/2+j9,j,j5,j8,j9,Md413c,dotmapMd413cR1)
	#call replace(i11,j3/2-j4/2-j5/2+j7/2,j,j3,j4,j5,j7,Md413c,dotmapMd413cR2)
	#call replace(i12,j3/2-j5/2+j6/2,j,j3,j5,j6,Md413c,dotmapMd413cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md413c,dotmapMd413cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md413c,dotmapMd413cR5)
	if (count(Md413c,1)) Multiply replace_(Md413c,Md413d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d194
	if (count(Md413d,1)) Multiply replace_(i1,j4,i2,j3,i3,j8,i4,j7,i5,j2,i6,j6,i7,j5,i8,j1);
	#call replace(i9,`Q2'/2-j3/2+j4/2-j9,j,j3,j4,j9,Md413d,dotmapMd413dR1)
	if (count(Md413d,1)) Multiply replace_(Md413d,Md194,<j1,i1>,...,<j8,i8>,j9,-i9);
	#redefine HASTOPOd194 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared413()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-5 3-5 3-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md413*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd413 automorphism;

#call CheckRemovedPropagators(d413,10,8,1,2,3,4,7,8,9,10,5,6)
#if `$DOACTION' == 0
.sort:reduce d413;
#endif
#endprocedure

#procedure Reduced413()
	#call Prepared413()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd413'
		#call MtoZ(Md413,Zd413,i,14)
		#call Reduce(d413)
		#call ZtoM(Zd413,Md413,i,14)
		#call Prepared413()
#else
		#if `USETURBO'
			#call TurboMd413()
		#endif
		#call insertionS(Md413,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md413b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond413()
#endif
	#endif
#endprocedure
*--#] reduce-d413 : 
*--#[ reduce-d412 :
#procedure Prepared412()
* Topology: 0-1 1-2 1-7 2-3 3-4 3-5 4-5 4-8 2-5 2-7 7-8 8-9
* Dots: p0.p3,p0.p4,p1.p3,p1.p4
* Apply automorphisms
if (match(Md412*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n3+$n7)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n3,$n7,$n4,$n5,$n6,$n8,$n2,$n1,$n6+$n8+$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n14)*replace_(i3,i8,i4,i6,i6,i4,i8,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd412 automorphism;

#call CheckRemovedPropagators(d412,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p3,p0.p2,p1.p2,p2.p3 and change topology to d326
	if (count(Md412M1,1)) Multiply replace_(i2,j2,i3,j1,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'-2*j12+j2,j,j2,j12,Md412M1,dotmapMd412M1R1)
	#call replace(i13,j10-j13,j,j10,j13,Md412M1,dotmapMd412M1R2)
	#call replace(i14,j11-j14,j,j11,j14,Md412M1,dotmapMd412M1R3)
	if (count(Md412M1,1)) Multiply replace_(Md412M1,Md326,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd326 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p3,p0.p1,p1.p2,p1.p3 and change topology to d355
	if (count(Md412M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Md412M2,dotmapMd412M2R1)
	if (count(Md412M2,1)) Multiply replace_(Md412M2,Md355,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd355 "1"
#endif

#if `$M3'
* map dots to p0.p7,p1.p7,p0.p6,p1.p6,p3.p6 and change topology to d314
	if (count(Md412M3,1)) Multiply replace_(i1,j2,i2,j1,i4,j7,i5,j6,i6,j8,i7,j4,i8,j9,i9,j5,i10,j3,i12,j10);
	#call replace(i3,2*j12-2*j14+j7-j8+j9,j,j7,j8,j9,j12,j14,Md412M3,dotmapMd412M3R1)
	#call replace(i11,j10+j12,j,j10,j12,Md412M3,dotmapMd412M3R2)
	#call replace(i13,j10-j11+j12-j13,j,j10,j11,j12,j13,Md412M3,dotmapMd412M3R3)
	#call replace(i14,j10-j11,j,j10,j11,Md412M3,dotmapMd412M3R4)
	if (count(Md412M3,1)) Multiply replace_(Md412M3,Md314,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd314 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p4.p6 and change topology to d348
	if (count(Md412M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j7,i5,j4,i6,j5,i7,j6,i8,j3,i9,j8,i10,j9);
	#call replace(i4,-2*j14-j3+j5+j7,j,j3,j5,j7,j14,Md412M4,dotmapMd412M4R1)
	#call replace(i11,`Q2'/2-j10+j6/2-j9/2,j,j6,j9,j10,Md412M4,dotmapMd412M4R2)
	#call replace(i12,`Q2'/2-j10-j12+j6/2-j9/2,j,j6,j9,j10,j12,Md412M4,dotmapMd412M4R3)
	#call replace(i13,j1/2-j11+j6/2-j8/2,j,j1,j6,j8,j11,Md412M4,dotmapMd412M4R4)
	#call replace(i14,j1/2-j11-j13+j6/2-j8/2,j,j1,j6,j8,j11,j13,Md412M4,dotmapMd412M4R5)
	if (count(Md412M4,1)) Multiply replace_(Md412M4,Md348,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd348 "1"
#endif

#if `$M5'
* map dots to p0.p4,p1.p4,p0.p3,p1.p3,p3.p4 and change topology to d351
	if (count(Md412M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j10,i13,j13,i14,j11);
	#call replace(i5,-2*j14+j3+j4,j,j3,j4,j14,Md412M5,dotmapMd412M5R1)
	if (count(Md412M5,1)) Multiply replace_(Md412M5,Md351,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd351 "1"
#endif

#if `$M6'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p4.p6 and change topology to d348
	if (count(Md412M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j13);
	#call replace(i6,-2*j14+j4+j6,j,j4,j6,j14,Md412M6,dotmapMd412M6R1)
	if (count(Md412M6,1)) Multiply replace_(Md412M6,Md348,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd348 "1"
#endif

#if `$M7'
* map dots to p0.p1,p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d341
	if (count(Md412M7,1)) Multiply replace_(i1,j6,i2,j9,i3,j2,i4,j1,i5,j3,i6,j7,i8,j4,i9,j5,i10,j8,i12,j10);
	#call replace(i7,-2*j12+j6+j8-j9,j,j6,j8,j9,j12,Md412M7,dotmapMd412M7R1)
	#call replace(i11,j10+j11,j,j10,j11,Md412M7,dotmapMd412M7R2)
	#call replace(i13,-j12+j13+j14+j2/2-j4/2+j6/2+j8/2-j9/2,j,j2,j4,j6,j8,j9,j12,j13,j14,Md412M7,dotmapMd412M7R3)
	#call replace(i14,j1/2-j12+j13+j6/2-j7/2+j8/2-j9/2,j,j1,j6,j7,j8,j9,j12,j13,Md412M7,dotmapMd412M7R4)
	if (count(Md412M7,1)) Multiply replace_(Md412M7,Md341,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd341 "1"
#endif

#if `$M8'
* map dots to p0.p7,p1.p7,p0.p6,p1.p6,p3.p6 and change topology to d314
	if (count(Md412M8,1)) Multiply replace_(i1,j2,i2,j1,i3,j6,i4,j8,i5,j9,i6,j7,i7,j4,i9,j5,i10,j3,i11,j12);
	#call replace(i8,-2*j12+2*j14+j4+j6,j,j4,j6,j12,j14,Md412M8,dotmapMd412M8R1)
	#call replace(i12,`Q2'/2-j10-j3/2+j4/2,j,j3,j4,j10,Md412M8,dotmapMd412M8R2)
	#call replace(i13,j12-j13,j,j12,j13,Md412M8,dotmapMd412M8R3)
	#call replace(i14,-j10+j11+j2/2+j4/2-j5/2,j,j2,j4,j5,j10,j11,Md412M8,dotmapMd412M8R4)
	if (count(Md412M8,1)) Multiply replace_(Md412M8,Md314,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd314 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4,p1.p6 and change topology to d356
	if (count(Md412M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j13);
	#call replace(i9,j1-2*j13+2*j14+j7,j,j1,j7,j13,j14,Md412M9,dotmapMd412M9R1)
	if (count(Md412M9,1)) Multiply replace_(Md412M9,Md356,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd356 "1"
#endif

#if `$M10'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d322
	if (count(Md412M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j12,i12,j13);
	#call replace(i10,`Q2'-2*j13+2*j14+j7,j,j7,j13,j14,Md412M10,dotmapMd412M10R1)
	#call replace(i13,j10+j3/2+j7/2-j8/2,j,j3,j7,j8,j10,Md412M10,dotmapMd412M10R2)
	#call replace(i14,j11+j4/2-j6/2+j7/2,j,j4,j6,j7,j11,Md412M10,dotmapMd412M10R3)
	if (count(Md412M10,1)) Multiply replace_(Md412M10,Md322,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd322 "1"
#endif
.sort:reduce d412;
#endif
#endprocedure

#procedure Reduced412()
	#call Prepared412()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd412'
		#call MtoZ(Md412,Zd412,i,14)
		#call Reduce(d412)
		#call ZtoM(Zd412,Md412,i,14)
#else
		#if `USETURBO'
			#call TurboMd412()
		#endif
		#call triangleS(Md412,i5,i6,i4,i3,i7,i12,i14,0,0)
#endif
		#call Prepared412()
	#endif
#endprocedure
*--#] reduce-d412 : 
*--#[ reduce-d411 :
#procedure Insertiond411()
* merge propagators with same momentum, and repeated dots
	if (count(Md411b,1)) Multiply replace_(Md411b,Md411c,i7,`Q2',i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md411c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j8/2,j,j1,j8,Md411c,dotmapMd411cR1)
	#call replace(i11,`Q2'/2+j2/2-j7/2,j,j2,j7,Md411c,dotmapMd411cR2)
	#call replace(i12,`Q2'/2+j4/2-j6/2,j,j4,j6,Md411c,dotmapMd411cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md411c,dotmapMd411cR4)
	#call replace(i14,j2/2+j4/2-j5/2,j,j2,j4,j5,Md411c,dotmapMd411cR5)
	if (count(Md411c,1)) Multiply replace_(Md411c,Md411d,<j1,i1>,...,<j9,i9>);
* map dots to p3.p4 and change topology to d192
	if (count(Md411d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j2/2+j4/2-j5/2+j9,j,j2,j4,j5,j9,Md411d,dotmapMd411dR1)
	if (count(Md411d,1)) Multiply replace_(Md411d,Md192,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd192 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared411()
* Topology: 0-1 1-2 2-3 2-6 3-4 3-5 4-5 4-8 5-6 1-6 1-8 8-9
* Dots: p1.p4,p0.p1,p0.p2,p0.p4
* Apply automorphisms
if (match(Md411*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n1,$n2,$n7,$n4,$n5,$n6,$n3,$n8,$n9)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n13+$n14)*replace_(i1,i9,i2,i8,i4,i6,i6,i4,i8,i2,i9,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd411 automorphism;

#call CheckRemovedPropagators(d411,10,9,1,2,3,4,5,6,7,8,9,10)
#if `$DOACTION' == 0
.sort:reduce d411;
#endif
#endprocedure

#procedure Reduced411()
	#call Prepared411()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd411'
		#call MtoZ(Md411,Zd411,i,14)
		#call Reduce(d411)
		#call ZtoM(Zd411,Md411,i,14)
		#call Prepared411()
#else
		#if `USETURBO'
			#call TurboMd411()
		#endif
		#call MtoZ(Md411,Zd411,i,14)
		#call carpet(Zd411,7,10,0,0,0,3,12,1,2,4)
		#call ZtoM(Zd411b,Md411b,i,16)
		#call Insertiond411()
#endif
	#endif
#endprocedure
*--#] reduce-d411 : 
*--#[ reduce-d410 :
#procedure Insertiond410()
* merge propagators with same momentum, and repeated dots
	if (count(Md410b,1)) Multiply replace_(Md410b,Md410c,i6,i5,i5,i6,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md410c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j6/2-j8/2,j,j6,j8,Md410c,dotmapMd410cR1)
	#call replace(i11,j1/2+j6/2-j7/2,j,j1,j6,j7,Md410c,dotmapMd410cR2)
	#call replace(i12,j3/2-j5/2+j6/2,j,j3,j5,j6,Md410c,dotmapMd410cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md410c,dotmapMd410cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md410c,dotmapMd410cR5)
	if (count(Md410c,1)) Multiply replace_(Md410c,Md410d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4 and change topology to d199
	if (count(Md410d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,`Q2'/2+j1/2-j2/2-j9,j,j1,j2,j9,Md410d,dotmapMd410dR1)
	if (count(Md410d,1)) Multiply replace_(Md410d,Md199,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd199 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared410()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-4 3-5 4-7 4-7 5-6 6-7 7-9
* Dots: p0.p3,p0.p7,p1.p7,p3.p7
* Apply automorphisms
if (match(Md410*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd410 automorphism;

#call CheckRemovedPropagators(d410,10,8,1,2,3,4,5,6,9,10,7,8)
#if `$DOACTION' == 0
.sort:reduce d410;
#endif
#endprocedure

#procedure Reduced410()
	#call Prepared410()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd410'
		#call MtoZ(Md410,Zd410,i,14)
		#call Reduce(d410)
		#call ZtoM(Zd410,Md410,i,14)
		#call Prepared410()
#else
		#if `USETURBO'
			#call TurboMd410()
		#endif
		#call insertionS(Md410,i7,i8,i12,i13,i14,i7,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md410b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond410()
#endif
	#endif
#endprocedure
*--#] reduce-d410 : 
*--#[ reduce-d409 :
#procedure Insertiond409()
* merge propagators with same momentum, and repeated dots
	if (count(Md409b,1)) Multiply replace_(Md409b,Md409c,i9,i7,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md409c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j5/2-j7/2,j,j5,j7,Md409c,dotmapMd409cR1)
	#call replace(i11,-`Q2'/2+j2/2+j5/2-j8/2,j,j2,j5,j8,Md409c,dotmapMd409cR2)
	#call replace(i12,j3/2+j5/2-j6/2-j9,j,j3,j5,j6,j9,Md409c,dotmapMd409cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md409c,dotmapMd409cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md409c,dotmapMd409cR5)
	if (count(Md409c,1)) Multiply replace_(Md409c,Md409d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3 and change topology to d196
	if (count(Md409d,1)) Multiply replace_(i1,j6,i2,j8,i3,j5,i4,j3,i5,j7,i6,j4,i7,j1,i8,j2);
	#call replace(i9,`Q2'/2+j6/2-j8/2-j9,j,j6,j8,j9,Md409d,dotmapMd409dR1)
	if (count(Md409d,1)) Multiply replace_(Md409d,Md196,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd196 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared409()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-4 3-5 4-7 5-6 6-7 4-7 4-9
* Dots: p0.p3,p0.p7,p1.p7,p3.p7
* Apply automorphisms
if (match(Md409*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n7,$n9,$n8,$n10,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i7,i10,i10,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd409 automorphism;

#call CheckRemovedPropagators(d409,10,8,1,2,3,4,5,6,8,9,7,10)
#if `$DOACTION' == 0
.sort:reduce d409;
#endif
#endprocedure

#procedure Reduced409()
	#call Prepared409()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd409'
		#call MtoZ(Md409,Zd409,i,14)
		#call Reduce(d409)
		#call ZtoM(Zd409,Md409,i,14)
		#call Prepared409()
#else
		#if `USETURBO'
			#call TurboMd409()
		#endif
		#call insertionS(Md409,i7,i10,i12,i13,i14,i7,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md409b,1)) Multiply replace_(<i11,i10>,...,<i17,i16>);
		#call Insertiond409()
#endif
	#endif
#endprocedure
*--#] reduce-d409 : 
*--#[ reduce-d408 :
#procedure Insertiond408()
* merge propagators with same momentum, and repeated dots
	if (count(Md408b,1)) Multiply replace_(Md408b,Md408c,i7,`Q2',i8,i7,i9,i8,i10,i9,i12,i9,i11,i10,i13,i11,i14,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md408c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j2/2,j,j1,j2,Md408c,dotmapMd408cR1)
	#call replace(i11,`Q2'/2+j5/2-j8/2,j,j5,j8,Md408c,dotmapMd408cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md408c,dotmapMd408cR3)
	#call replace(i13,j1/2+j5/2-j7/2,j,j1,j5,j7,Md408c,dotmapMd408cR4)
	#call replace(i14,j3/2+j5/2-j6/2,j,j3,j5,j6,Md408c,dotmapMd408cR5)
	if (count(Md408c,1)) Multiply replace_(Md408c,Md408d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3 and change topology to d197
	if (count(Md408d,1)) Multiply replace_(i1,j2,i2,j1,i3,j3,i4,j4,i5,j6,i6,j5,i7,j7,i8,j8,i9,j9);
	if (count(Md408d,1)) Multiply replace_(Md408d,Md197,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd197 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared408()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-4 3-5 4-8 5-6 4-6 4-8 8-9
* Dots: p0.p3,p1.p7,p3.p7,p5.p7
* Apply automorphisms
if (match(Md408*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n7,$n9,$n8,$n10,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i7,i10,i10,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd408 automorphism;

#call CheckRemovedPropagators(d408,10,8,1,2,3,4,5,6,8,9,7,10)
#if `$DOACTION' == 0
.sort:reduce d408;
#endif
#endprocedure

#procedure Reduced408()
	#call Prepared408()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd408'
		#call MtoZ(Md408,Zd408,i,14)
		#call Reduce(d408)
		#call ZtoM(Zd408,Md408,i,14)
		#call Prepared408()
#else
		#if `USETURBO'
			#call TurboMd408()
		#endif
		#call insertionS(Md408,i7,i10,i12,i13,i14,i7,i1,i3,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md408b,1)) Multiply replace_(<i11,i10>,...,<i17,i16>);
		#call Insertiond408()
#endif
	#endif
#endprocedure
*--#] reduce-d408 : 
*--#[ reduce-d407 :
#procedure Insertiond407()
* merge propagators with same momentum, and repeated dots
	if (count(Md407b,1)) Multiply replace_(Md407b,Md407c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i13,i9,i11,i10,i12,i11,i14,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md407c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md407c,dotmapMd407cR1)
	#call replace(i11,j2/2+j3/2-j6/2,j,j2,j3,j6,Md407c,dotmapMd407cR2)
	#call replace(i12,`Q2'/2+j3/2-j7/2,j,j3,j7,Md407c,dotmapMd407cR3)
	#call replace(i13,j3/2-j5/2-j7/2+j8/2,j,j3,j5,j7,j8,Md407c,dotmapMd407cR4)
	#call replace(i14,j3/2+j4/2-j5/2,j,j3,j4,j5,Md407c,dotmapMd407cR5)
	if (count(Md407c,1)) Multiply replace_(Md407c,Md407d,<j1,i1>,...,<j9,i9>);
* map dots to p4.p5 and change topology to d193
	if (count(Md407d,1)) Multiply replace_(i1,j6,i2,j5,i3,j3,i4,j4,i5,j1,i6,j8,i7,j7,i8,j2,i9,j9);
	if (count(Md407d,1)) Multiply replace_(Md407d,Md193,<j1,i1>,...,<j8,i8>,j9,-i9);
	#redefine HASTOPOd193 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared407()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-4 4-7 4-8 3-6 6-7 7-8 8-9
* Dots: p1.p6,p0.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md407*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd407 automorphism;

#call CheckRemovedPropagators(d407,10,8,1,2,5,6,7,8,9,10,3,4)
#if `$DOACTION' == 0
.sort:reduce d407;
#endif
#endprocedure

#procedure Reduced407()
	#call Prepared407()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd407'
		#call MtoZ(Md407,Zd407,i,14)
		#call Reduce(d407)
		#call ZtoM(Zd407,Md407,i,14)
		#call Prepared407()
#else
		#if `USETURBO'
			#call TurboMd407()
		#endif
		#call insertionS(Md407,i3,i4,i12,i13,i14,i3,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md407b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond407()
#endif
	#endif
#endprocedure
*--#] reduce-d407 : 
*--#[ reduce-d406 :
#procedure Prepared406()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-5 3-7 3-8 5-6 6-7 7-8 8-9
* Dots: p0.p4,p0.p6,p1.p6,p4.p6
* Apply automorphisms
if (match(Md406*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd406 automorphism;

#call CheckRemovedPropagators(d406,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md406M1,1)) Multiply replace_(i2,j6,i3,j9,i4,j4,i5,j3,i6,j8,i7,j1,i8,j5,i9,j7,i10,j2);
	#call replace(i1,`Q2'+2*j11-2*j12+j6,j,j6,j11,j12,Md406M1,dotmapMd406M1R1)
	#call replace(i11,-j10+j11,j,j10,j11,Md406M1,dotmapMd406M1R2)
	#call replace(i12,`Q2'/2-j1/2-j12+j2/2,j,j1,j2,j12,Md406M1,dotmapMd406M1R3)
	#call replace(i13,`Q2'/2-j1/2+j11-j12-j14-j5/2+j6/2+j8/2,j,j1,j5,j6,j8,j11,j12,j14,Md406M1,dotmapMd406M1R4)
	#call replace(i14,`Q2'/2+j11-j12+j13-j14+j3/2-j5/2+j6/2-j9/2,j,j3,j5,j6,j9,j11,j12,j13,j14,Md406M1,dotmapMd406M1R5)
	if (count(Md406M1,1)) Multiply replace_(Md406M1,Md345,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd345 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d341
	if (count(Md406M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j11,i12,j12,i13,j13,i14,j14);
	#call replace(i2,`Q2'+j1-2*j10,j,j1,j10,Md406M2,dotmapMd406M2R1)
	if (count(Md406M2,1)) Multiply replace_(Md406M2,Md341,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd341 "1"
#endif

#if `$M3'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d310
	if (count(Md406M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j4,i5,j5,i6,j3,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j10,i13,j11,i14,j14);
	#call replace(i3,j1-2*j13+j4,j,j1,j4,j13,Md406M3,dotmapMd406M3R1)
	if (count(Md406M3,1)) Multiply replace_(Md406M3,Md310,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd310 "1"
#endif

#if `$M4'
* map dots to p1.p5,p0.p3,p1.p3,p3.p5,p3.p6 and change topology to d373
	if (count(Md406M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i13,j10);
	#call replace(i4,j1-2*j12+j3,j,j1,j3,j12,Md406M4,dotmapMd406M4R1)
	#call replace(i11,`Q2'/2+j1/2-j11-j2/2,j,j1,j2,j11,Md406M4,dotmapMd406M4R2)
	#call replace(i12,j13+j14-j3/2+j4/2-j6/2-j8/2+j9/2,j,j3,j4,j6,j8,j9,j13,j14,Md406M4,dotmapMd406M4R3)
	#call replace(i14,j10-j13,j,j10,j13,Md406M4,dotmapMd406M4R4)
	if (count(Md406M4,1)) Multiply replace_(Md406M4,Md373,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd373 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d325
	if (count(Md406M5,1)) Multiply replace_(i1,j6,i2,j9,i3,j4,i4,j5,i6,j7,i7,j1,i8,j3,i9,j8,i10,j2);
	#call replace(i5,-2*j10+2*j14+j5+j8-j9,j,j5,j8,j9,j10,j14,Md406M5,dotmapMd406M5R1)
	#call replace(i11,`Q2'/2-j12+j6/2-j9/2,j,j6,j9,j12,Md406M5,dotmapMd406M5R2)
	#call replace(i12,-j1/2-j10+j2/2+j6/2-j9/2,j,j1,j2,j6,j9,j10,Md406M5,dotmapMd406M5R3)
	#call replace(i13,-j1/2-j11-j3/2+j6/2+j7/2,j,j1,j3,j6,j7,j11,Md406M5,dotmapMd406M5R4)
	#call replace(i14,-j1/2-j11+j13+j14-j3/2-j4/2+j5/2+j7/2,j,j1,j3,j4,j5,j7,j11,j13,j14,Md406M5,dotmapMd406M5R5)
	if (count(Md406M5,1)) Multiply replace_(Md406M5,Md325,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd325 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4,p1.p5 and change topology to d370
	if (count(Md406M6,1)) Multiply replace_(i1,j6,i2,j9,i3,j3,i4,j5,i5,j7,i7,j1,i8,j8,i9,j4,i10,j2);
	#call replace(i6,2*j11-2*j13+j2+j4,j,j2,j4,j11,j13,Md406M6,dotmapMd406M6R1)
	#call replace(i11,`Q2'/2-j10+j6/2-j9/2,j,j6,j9,j10,Md406M6,dotmapMd406M6R2)
	#call replace(i12,`Q2'/2-j1/2+j11+j2/2,j,j1,j2,j11,Md406M6,dotmapMd406M6R3)
	#call replace(i13,`Q2'/2+j11-j12-j14+j4/2+j6/2-j8/2,j,j4,j6,j8,j11,j12,j14,Md406M6,dotmapMd406M6R4)
	#call replace(i14,-j14-j3/2+j6/2+j7/2-j8/2,j,j3,j6,j7,j8,j14,Md406M6,dotmapMd406M6R5)
	if (count(Md406M6,1)) Multiply replace_(Md406M6,Md370,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd370 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d344
	if (count(Md406M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j9,i6,j5,i8,j8,i9,j7,i10,j6,i12,j12,i13,j13);
	#call replace(i7,`Q2'-2*j11-2*j12+j6,j,j6,j11,j12,Md406M7,dotmapMd406M7R1)
	#call replace(i11,`Q2'/2+j1/2-j10-j2/2,j,j1,j2,j10,Md406M7,dotmapMd406M7R2)
	#call replace(i14,j13-j14,j,j13,j14,Md406M7,dotmapMd406M7R3)
	if (count(Md406M7,1)) Multiply replace_(Md406M7,Md344,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,i14);
	#redefine HASTOPOd344 "1"
#endif

#if `$M8'
* map dots to p0.p5,p0.p2,p1.p4,p1.p5,p2.p4 and change topology to lala
	if (count(Md406M8,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j7,i5,j8,i6,j9,i7,j6,i9,j2,i10,j1);
	#call replace(i8,-2*j11+2*j14+j2+j3,j,j2,j3,j11,j14,Md406M8,dotmapMd406M8R1)
	#call replace(i11,`Q2'/2-j10-j3/2+j4/2,j,j3,j4,j10,Md406M8,dotmapMd406M8R2)
	#call replace(i12,`Q2'/2+j1/2-j11-j6/2,j,j1,j6,j11,Md406M8,dotmapMd406M8R3)
	#call replace(i13,j12-j14,j,j12,j14,Md406M8,dotmapMd406M8R4)
	#call replace(i14,-`Q2'/2+j10+j11+j12-j13-j14-j2/2-j5/2+j8/2,j,j2,j5,j8,j10,j11,j12,j13,j14,Md406M8,dotmapMd406M8R5)
	if (count(Md406M8,1)) Multiply replace_(Md406M8,Mlala,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOlala "1"
#endif

#if `$M9'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Md406M9,1)) Multiply replace_(i1,j7,i2,j1,i3,j8,i4,j6,i5,j9,i6,j2,i7,j3,i8,j5,i10,j4,i11,j11,i12,j10,i14,j14);
	#call replace(i9,`Q2'-2*j12-2*j13+j5-j7,j,j5,j7,j12,j13,Md406M9,dotmapMd406M9R1)
	#call replace(i13,j10-j12,j,j10,j12,Md406M9,dotmapMd406M9R2)
	if (count(Md406M9,1)) Multiply replace_(Md406M9,Md308,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p6,p1.p6,p3.p6,p5.p6 and change topology to d343
	if (count(Md406M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i12,j11,i13,j12);
	#call replace(i10,2*j11-2*j13+2*j14+j6+j9,j,j6,j9,j11,j13,j14,Md406M10,dotmapMd406M10R1)
	#call replace(i11,`Q2'/2+j1/2-j10-j2/2,j,j1,j2,j10,Md406M10,dotmapMd406M10R2)
	#call replace(i14,j12-j13,j,j12,j13,Md406M10,dotmapMd406M10R3)
	if (count(Md406M10,1)) Multiply replace_(Md406M10,Md343,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd343 "1"
#endif
.sort:reduce d406;
#endif
#endprocedure

#procedure Reduced406()
	#call Prepared406()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd406'
		#call MtoZ(Md406,Zd406,i,14)
		#call Reduce(d406)
		#call ZtoM(Zd406,Md406,i,14)
#else
		#if `USETURBO'
			#call TurboMd406()
		#endif
		#call triangleS(Md406,i3,i5,i4,i1,i8,i11,i14,0,0)
#endif
		#call Prepared406()
	#endif
#endprocedure
*--#] reduce-d406 : 
*--#[ reduce-d405 :
#procedure Insertiond405()
* merge propagators with same momentum, and repeated dots
	if (count(Md405b,1)) Multiply replace_(Md405b,Md405c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14);

* rewrite insertion dots
	if (count(Md405c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md405c,dotmapMd405cR1)
	#call replace(i11,j1/2+j3/2-j6/2,j,j1,j3,j6,Md405c,dotmapMd405cR2)
	#call replace(i12,j3/2+j4/2-j5/2,j,j3,j4,j5,Md405c,dotmapMd405cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md405c,dotmapMd405cR4)
	#call replace(i14,j3/2-j5/2-j7/2+j8/2,j,j3,j5,j7,j8,Md405c,dotmapMd405cR5)
	if (count(Md405c,1)) Multiply replace_(Md405c,Md405d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3 and change topology to lastar5
	if (count(Md405d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j7,i5,j6,i6,j8,i7,j2,i8,j1);
	#call replace(i9,j1/2+j3/2+j5/2-j6/2-j8/2-j9,j,j1,j3,j5,j6,j8,j9,Md405d,dotmapMd405dR1)
	if (count(Md405d,1)) Multiply replace_(Md405d,Mlastar5,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOlastar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared405()
* Topology: 0-1 1-2 1-6 2-3 3-4 2-3 4-7 4-8 2-6 6-7 7-8 8-9
* Dots: p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md405*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd405 automorphism;

#call CheckRemovedPropagators(d405,10,8,1,2,4,6,7,8,9,10,3,5)
#if `$DOACTION' == 0
.sort:reduce d405;
#endif
#endprocedure

#procedure Reduced405()
	#call Prepared405()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd405'
		#call MtoZ(Md405,Zd405,i,14)
		#call Reduce(d405)
		#call ZtoM(Zd405,Md405,i,14)
		#call Prepared405()
#else
		#if `USETURBO'
			#call TurboMd405()
		#endif
		#call insertionS(Md405,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md405b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond405()
#endif
	#endif
#endprocedure
*--#] reduce-d405 : 
*--#[ reduce-d404 :
#procedure Insertiond404()
* merge propagators with same momentum, and repeated dots
	if (count(Md404b,1)) Multiply replace_(Md404b,Md404c,i4,i3,i5,i4,i6,i5,i3,i6,i7,i6,i8,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14);

* rewrite insertion dots
	if (count(Md404c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j7/2,j,j1,j2,j3,j7,Md404c,dotmapMd404cR1)
	#call replace(i11,j1/2-j3/2+j6/2,j,j1,j3,j6,Md404c,dotmapMd404cR2)
	#call replace(i12,-j3/2-j4/2+j5/2+j9,j,j3,j4,j5,j9,Md404c,dotmapMd404cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md404c,dotmapMd404cR4)
	#call replace(i14,j3/2-j5/2-j7/2+j8/2,j,j3,j5,j7,j8,Md404c,dotmapMd404cR5)
	if (count(Md404c,1)) Multiply replace_(Md404c,Md404d,<j1,i1>,...,<j9,i9>);
* map dots to p4.p5 and change topology to d201
	if (count(Md404d,1)) Multiply replace_(i1,j6,i2,j8,i3,j3,i4,j4,i5,j1,i6,j5,i7,j7,i8,j2);
	#call replace(i9,-j1/2+j3/2+j4/2+j9,j,j1,j3,j4,j9,Md404d,dotmapMd404dR1)
	if (count(Md404d,1)) Multiply replace_(Md404d,Md201,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd201 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared404()
* Topology: 0-1 1-2 1-6 2-5 2-4 2-5 4-7 4-8 5-6 6-7 7-8 8-9
* Dots: p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md404*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd404 automorphism;

#call CheckRemovedPropagators(d404,10,8,1,2,4,6,7,8,9,10,3,5)
#if `$DOACTION' == 0
.sort:reduce d404;
#endif
#endprocedure

#procedure Reduced404()
	#call Prepared404()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd404'
		#call MtoZ(Md404,Zd404,i,14)
		#call Reduce(d404)
		#call ZtoM(Zd404,Md404,i,14)
		#call Prepared404()
#else
		#if `USETURBO'
			#call TurboMd404()
		#endif
		#call insertionS(Md404,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md404b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond404()
#endif
	#endif
#endprocedure
*--#] reduce-d404 : 
*--#[ reduce-d403 :
#procedure Prepared403()
* Topology: 0-1 1-2 2-3 2-5 3-4 3-5 4-7 4-8 1-5 1-7 7-8 8-9
* Dots: p0.p1,p0.p2,p1.p6,p2.p6
* Apply automorphisms
if (match(Md403*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n2+$n1+$n4)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n6,$n2,$n4,$n3,$n5,$n8,$n5+$n8+$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n14)*replace_(i1,i8,i2,i5,i5,i2,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd403 automorphism;

#call CheckRemovedPropagators(d403,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p6,p1.p6,p0.p5,p1.p5,p3.p5 and change topology to d299
	if (count(Md403M1,1)) Multiply replace_(i2,j6,i3,j5,i4,j7,i5,j8,i6,j4,i7,j2,i8,j9,i9,j3,i10,j1,i12,j10);
	#call replace(i1,2*j12-2*j14+j6-j8+j9,j,j6,j8,j9,j12,j14,Md403M1,dotmapMd403M1R1)
	#call replace(i11,j10+j12,j,j10,j12,Md403M1,dotmapMd403M1R2)
	#call replace(i13,-j10+j11+j13-j14+j6/2+j7/2-j8/2,j,j6,j7,j8,j10,j11,j13,j14,Md403M1,dotmapMd403M1R3)
	#call replace(i14,-j10+j11+j6/2+j7/2-j8/2,j,j6,j7,j8,j10,j11,Md403M1,dotmapMd403M1R4)
	if (count(Md403M1,1)) Multiply replace_(Md403M1,Md299,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd299 "1"
#endif

#if `$M2'
* map dots to p0.p1,p1.p5,p0.p2,p2.p4,p2.p5 and change topology to d372
	if (count(Md403M2,1)) Multiply replace_(i1,j7,i3,j2,i4,j4,i5,j3,i6,j5,i7,j6,i8,j1,i9,j8,i10,j9);
	#call replace(i2,-j1-2*j13+j3+j7,j,j1,j3,j7,j13,Md403M2,dotmapMd403M2R1)
	#call replace(i11,`Q2'/2-j10+j4/2-j8/2,j,j4,j8,j10,Md403M2,dotmapMd403M2R2)
	#call replace(i12,`Q2'/2-j10-j12+j4/2-j8/2,j,j4,j8,j10,j12,Md403M2,dotmapMd403M2R3)
	#call replace(i13,-j11+j4/2+j5/2-j6/2,j,j4,j5,j6,j11,Md403M2,dotmapMd403M2R4)
	#call replace(i14,-j11-j14+j4/2+j5/2-j6/2,j,j4,j5,j6,j11,j14,Md403M2,dotmapMd403M2R5)
	if (count(Md403M2,1)) Multiply replace_(Md403M2,Md372,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd372 "1"
#endif

#if `$M3'
* map dots to p0.p2,p2.p5,p0.p1,p1.p2,p1.p5 and change topology to d376
	if (count(Md403M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j10,i13,j14,i14,j11);
	#call replace(i3,j1-2*j13+j2,j,j1,j2,j13,Md403M3,dotmapMd403M3R1)
	if (count(Md403M3,1)) Multiply replace_(Md403M3,Md376,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd376 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p3,p0.p5,p1.p5,p3.p5 and change topology to d341
	if (count(Md403M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j13);
	#call replace(i4,2*j12+j6+j8-j9,j,j6,j8,j9,j12,Md403M4,dotmapMd403M4R1)
	#call replace(i12,j10-j11,j,j10,j11,Md403M4,dotmapMd403M4R2)
	#call replace(i14,j13-j14,j,j13,j14,Md403M4,dotmapMd403M4R3)
	if (count(Md403M4,1)) Multiply replace_(Md403M4,Md341,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd341 "1"
#endif

#if `$M5'
* map dots to p0.p1,p1.p5,p0.p2,p2.p4,p2.p5 and change topology to d372
	if (count(Md403M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j14);
	#call replace(i5,-2*j13+j2+j4,j,j2,j4,j13,Md403M5,dotmapMd403M5R1)
	if (count(Md403M5,1)) Multiply replace_(Md403M5,Md372,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd372 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p1.p6,p2.p6,p4.p6 and change topology to d367
	if (count(Md403M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i6,-2*j14+j4+j6,j,j4,j6,j14,Md403M6,dotmapMd403M6R1)
	#call replace(i13,j1/2-j12+j4/2-j7/2,j,j1,j4,j7,j12,Md403M6,dotmapMd403M6R2)
	#call replace(i14,-j13+j2/2+j4/2-j5/2,j,j2,j4,j5,j13,Md403M6,dotmapMd403M6R3)
	if (count(Md403M6,1)) Multiply replace_(Md403M6,Md367,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd367 "1"
#endif

#if `$M7'
* map dots to p0.p1,p0.p2,p0.p6,p1.p6,p2.p6 and change topology to d362
	if (count(Md403M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i7,-2*j12+j4-j8+j9,j,j4,j8,j9,j12,Md403M7,dotmapMd403M7R1)
	if (count(Md403M7,1)) Multiply replace_(Md403M7,Md362,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd362 "1"
#endif

#if `$M8'
* map dots to p0.p6,p1.p6,p0.p5,p1.p5,p3.p5 and change topology to d299
	if (count(Md403M8,1)) Multiply replace_(i1,j5,i2,j8,i3,j9,i4,j7,i5,j6,i6,j4,i7,j2,i9,j3,i10,j1,i11,j12);
	#call replace(i8,-2*j12+2*j14+j5+j7,j,j5,j7,j12,j14,Md403M8,dotmapMd403M8R1)
	#call replace(i12,`Q2'/2-j10-j3/2+j7/2,j,j3,j7,j10,Md403M8,dotmapMd403M8R2)
	#call replace(i13,j13-j14,j,j13,j14,Md403M8,dotmapMd403M8R3)
	#call replace(i14,j10-j11-j2/2+j4/2-j6/2+j8/2,j,j2,j4,j6,j8,j10,j11,Md403M8,dotmapMd403M8R4)
	if (count(Md403M8,1)) Multiply replace_(Md403M8,Md299,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd299 "1"
#endif

#if `$M9'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d321
	if (count(Md403M9,1)) Multiply replace_(i1,j3,i2,j5,i3,j4,i4,j8,i5,j6,i6,j9,i7,j2,i8,j7,i10,j1,i11,j12,i13,-j10);
	#call replace(i9,`Q2'-2*j12+2*j13+2*j14+j8,j,j8,j12,j13,j14,Md403M9,dotmapMd403M9R1)
	#call replace(i12,j12-j13,j,j12,j13,Md403M9,dotmapMd403M9R2)
	#call replace(i14,-j10+j11,j,j10,j11,Md403M9,dotmapMd403M9R3)
	if (count(Md403M9,1)) Multiply replace_(Md403M9,Md321,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd321 "1"
#endif

#if `$M10'
* map dots to p0.p1,p0.p2,p0.p6,p1.p6,p2.p6 and change topology to d358
	if (count(Md403M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i10,2*j12-j4+j7+j9,j,j4,j7,j9,j12,Md403M10,dotmapMd403M10R1)
	if (count(Md403M10,1)) Multiply replace_(Md403M10,Md358,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd358 "1"
#endif
.sort:reduce d403;
#endif
#endprocedure

#procedure Reduced403()
	#call Prepared403()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd403'
		#call MtoZ(Md403,Zd403,i,14)
		#call Reduce(d403)
		#call ZtoM(Zd403,Md403,i,14)
#else
		#if `USETURBO'
			#call TurboMd403()
		#endif
		#call triangleS(Md403,i3,i5,i2,i1,i4,i12,i14,0,0)
#endif
		#call Prepared403()
	#endif
#endprocedure
*--#] reduce-d403 : 
*--#[ reduce-d402 :
#procedure Prepared402()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 3-7 4-6 5-6 6-7 4-7 4-9
* Dots: p0.p5,p0.p7,p4.p5,p4.p7
* Apply automorphisms
if (match(Md402*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n3+$n8)
	#call hash(1,$n13,$n14,$n11,$n12,$n10,$n6,$n3,$n5,$n9,$n7,$n4,$n8,$n1,$n2,$n4+$n8+$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n12)*replace_(i1,i2,i2,i1,i3,i8,i5,i7,i6,i9,i7,i5,i8,i3,i9,i6,i11,i12,i12,i11,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd402 automorphism;

#call CheckRemovedPropagators(d402,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p6,p0.p1,p1.p4,p1.p6 and change topology to d357
	if (count(Md402M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Md402M1,dotmapMd402M1R1)
	#call replace(i13,j10-j13-j2/2-j4/2+j5/2,j,j2,j4,j5,j10,j13,Md402M1,dotmapMd402M1R2)
	#call replace(i14,-j14-j6/2-j7/2+j8/2,j,j6,j7,j8,j14,Md402M1,dotmapMd402M1R3)
	if (count(Md402M1,1)) Multiply replace_(Md402M1,Md357,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd357 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p6,p0.p1,p1.p4,p1.p6 and change topology to d357
	if (count(Md402M2,1)) Multiply replace_(i1,j1,i3,j7,i4,j3,i5,j6,i6,j8,i7,j4,i8,j2,i9,j5,i10,j9,i11,j11,i12,j10);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Md402M2,dotmapMd402M2R1)
	#call replace(i13,j14-j6/2-j7/2+j8/2,j,j6,j7,j8,j14,Md402M2,dotmapMd402M2R2)
	#call replace(i14,-j10+j13-j2/2-j4/2+j5/2,j,j2,j4,j5,j10,j13,Md402M2,dotmapMd402M2R3)
	if (count(Md402M2,1)) Multiply replace_(Md402M2,Md357,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd357 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md402M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j8,i5,j9,i6,j3,i7,j6,i8,j7,i9,j5,i10,j4);
	#call replace(i3,`Q2'-2*j12+j7,j,j7,j12,Md402M3,dotmapMd402M3R1)
	#call replace(i11,`Q2'-j10-j12,j,j10,j12,Md402M3,dotmapMd402M3R2)
	#call replace(i12,j11-j12,j,j11,j12,Md402M3,dotmapMd402M3R3)
	#call replace(i13,j1/2-j13+j3/2-j8/2-j9/2,j,j1,j3,j8,j9,j13,Md402M3,dotmapMd402M3R4)
	#call replace(i14,-j11+j14+j2/2+j5/2-j6/2-j8/2,j,j2,j5,j6,j8,j11,j14,Md402M3,dotmapMd402M3R5)
	if (count(Md402M3,1)) Multiply replace_(Md402M3,Md345,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd345 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p6,p1.p3,p1.p4,p1.p6 and change topology to d366
	if (count(Md402M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i4,j1-2*j12+j3,j,j1,j3,j12,Md402M4,dotmapMd402M4R1)
	#call replace(i13,j13-j3/2-j4/2+j5/2,j,j3,j4,j5,j13,Md402M4,dotmapMd402M4R2)
	#call replace(i14,-j11+j14-j6/2-j7/2+j8/2,j,j6,j7,j8,j11,j14,Md402M4,dotmapMd402M4R3)
	if (count(Md402M4,1)) Multiply replace_(Md402M4,Md366,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd366 "1"
#endif

#if `$M5'
* map dots to p0.p6,p1.p6,p0.p5,p1.p5,p3.p5 and change topology to d299
	if (count(Md402M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10);
	#call replace(i5,-2*j14+j3+j5,j,j3,j5,j14,Md402M5,dotmapMd402M5R1)
	#call replace(i11,`Q2'/2-j12+j3/2-j7/2,j,j3,j7,j12,Md402M5,dotmapMd402M5R2)
	#call replace(i13,j1/2-j13+j14-j3/2-j4/2,j,j1,j3,j4,j13,j14,Md402M5,dotmapMd402M5R3)
	#call replace(i14,-j10+j11-j6/2-j7/2+j8/2,j,j6,j7,j8,j10,j11,Md402M5,dotmapMd402M5R4)
	if (count(Md402M5,1)) Multiply replace_(Md402M5,Md299,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd299 "1"
#endif

#if `$M6'
* map dots to p1.p6,p0.p5,p1.p5,p3.p5,p5.p6 and change topology to d302
	if (count(Md402M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j11);
	#call replace(i6,-2*j13+j3+j5,j,j3,j5,j13,Md402M6,dotmapMd402M6R1)
	#call replace(i12,-`Q2'/2+j11+j14-j5/2-j6/2+j9/2,j,j5,j6,j9,j11,j14,Md402M6,dotmapMd402M6R2)
	#call replace(i13,j12-j13,j,j12,j13,Md402M6,dotmapMd402M6R3)
	#call replace(i14,`Q2'/2+j10-j11-j14+j5/2-j7/2+j8/2-j9/2,j,j5,j7,j8,j9,j10,j11,j14,Md402M6,dotmapMd402M6R4)
	if (count(Md402M6,1)) Multiply replace_(Md402M6,Md302,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd302 "1"
#endif

#if `$M7'
* map dots to p0.p6,p1.p6,p0.p5,p1.p5,p3.p5 and change topology to d299
	if (count(Md402M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j4,i5,j6,i6,j8,i8,j3,i9,j5,i10,j9,i11,j10);
	#call replace(i7,2*j14+j3+j5,j,j3,j5,j14,Md402M7,dotmapMd402M7R1)
	#call replace(i12,-`Q2'/2+j12-j3/2+j7/2,j,j3,j7,j12,Md402M7,dotmapMd402M7R2)
	#call replace(i13,j10-j11-j6/2-j7/2+j8/2,j,j6,j7,j8,j10,j11,Md402M7,dotmapMd402M7R3)
	#call replace(i14,j1/2-j13-j14-j3/2-j4/2,j,j1,j3,j4,j13,j14,Md402M7,dotmapMd402M7R4)
	if (count(Md402M7,1)) Multiply replace_(Md402M7,Md299,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd299 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md402M8,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j8,i5,j6,i6,j5,i7,j9,i9,j3,i10,j4);
	#call replace(i8,`Q2'-2*j12+j7,j,j7,j12,Md402M8,dotmapMd402M8R1)
	#call replace(i11,-j11+j12,j,j11,j12,Md402M8,dotmapMd402M8R2)
	#call replace(i12,-`Q2'+j10+j12,j,j10,j12,Md402M8,dotmapMd402M8R3)
	#call replace(i13,-j11+j14+j2/2+j5/2-j6/2-j8/2,j,j2,j5,j6,j8,j11,j14,Md402M8,dotmapMd402M8R4)
	#call replace(i14,j1/2-j13+j3/2-j8/2-j9/2,j,j1,j3,j8,j9,j13,Md402M8,dotmapMd402M8R5)
	if (count(Md402M8,1)) Multiply replace_(Md402M8,Md345,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd345 "1"
#endif

#if `$M9'
* map dots to p1.p6,p0.p5,p1.p5,p3.p5,p5.p6 and change topology to d302
	if (count(Md402M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j4,i5,j6,i6,j8,i7,j5,i8,j3,i10,j9,i12,j11);
	#call replace(i9,2*j13+j3+j5,j,j3,j5,j13,Md402M9,dotmapMd402M9R1)
	#call replace(i11,`Q2'/2+j11-j14+j5/2+j6/2-j9/2,j,j5,j6,j9,j11,j14,Md402M9,dotmapMd402M9R2)
	#call replace(i13,`Q2'/2-j10+j11-j14+j5/2-j7/2+j8/2-j9/2,j,j5,j7,j8,j9,j10,j11,j14,Md402M9,dotmapMd402M9R3)
	#call replace(i14,-j12+j13,j,j12,j13,Md402M9,dotmapMd402M9R4)
	if (count(Md402M9,1)) Multiply replace_(Md402M9,Md302,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd302 "1"
#endif

#if `$M10'
* map dots to p0.p7,p1.p7,p0.p5,p1.p5,p5.p7 and change topology to d375
	if (count(Md402M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j12,i12,j10);
	#call replace(i10,`Q2'+2*j10-2*j12-2*j14+j5+j7,j,j5,j7,j10,j12,j14,Md402M10,dotmapMd402M10R1)
	#call replace(i13,j13-j3/2-j5/2+j6/2,j,j3,j5,j6,j13,Md402M10,dotmapMd402M10R2)
	#call replace(i14,-j10+j11-j7/2-j8/2+j9/2,j,j7,j8,j9,j10,j11,Md402M10,dotmapMd402M10R3)
	if (count(Md402M10,1)) Multiply replace_(Md402M10,Md375,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd375 "1"
#endif
.sort:reduce d402;
#endif
#endprocedure

#procedure Reduced402()
	#call Prepared402()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd402'
		#call MtoZ(Md402,Zd402,i,14)
		#call Reduce(d402)
		#call ZtoM(Zd402,Md402,i,14)
#else
		#if `USETURBO'
			#call TurboMd402()
		#endif
		#call triangleS(Md402,i1,i2,i4,i3,i8,i13,i14,0,0)
#endif
		#call Prepared402()
	#endif
#endprocedure
*--#] reduce-d402 : 
*--#[ reduce-d401 :
#procedure Prepared401()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-7 3-6 3-8 5-6 6-7 7-8 8-9
* Dots: p0.p5,p3.p5,p4.p5,p4.p6
* Apply automorphisms
if (match(Md401*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd401 automorphism;

#call CheckRemovedPropagators(d401,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p2.p4,p0.p1,p1.p4,p1.p5 and change topology to d300
	if (count(Md401M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Md401M1,dotmapMd401M1R1)
	#call replace(i13,j10-j11-j13,j,j10,j11,j13,Md401M1,dotmapMd401M1R2)
	#call replace(i14,-j14-j5/2-j7/2+j8/2,j,j5,j7,j8,j14,Md401M1,dotmapMd401M1R3)
	if (count(Md401M1,1)) Multiply replace_(Md401M1,Md300,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd300 "1"
#endif

#if `$M2'
* map dots to p0.p4,p2.p4,p0.p1,p1.p4,p1.p5 and change topology to d303
	if (count(Md401M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Md401M2,dotmapMd401M2R1)
	#call replace(i13,-j11+j13,j,j11,j13,Md401M2,dotmapMd401M2R2)
	#call replace(i14,j10+j14-j2/2-j5/2+j6/2+j8/2-j9/2,j,j2,j5,j6,j8,j9,j10,j14,Md401M2,dotmapMd401M2R3)
	if (count(Md401M2,1)) Multiply replace_(Md401M2,Md303,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd303 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Md401M3,1)) Multiply replace_(i1,j4,i2,j3,i4,j2,i5,j8,i6,j5,i7,j1,i8,j9,i9,j6,i10,j7);
	#call replace(i3,`Q2'-2*j11+j9,j,j9,j11,Md401M3,dotmapMd401M3R1)
	#call replace(i11,`Q2'/2-j1/2-j10+j7/2,j,j1,j7,j10,Md401M3,dotmapMd401M3R2)
	#call replace(i12,`Q2'/2-j1/2-j10-j11+j13-j5/2+j6/2+j7/2+j9/2,j,j1,j5,j6,j7,j9,j10,j11,j13,Md401M3,dotmapMd401M3R3)
	#call replace(i13,-`Q2'/2+j11+j12-j13+j14-j3/2+j4/2+j5/2-j6/2-j9/2,j,j3,j4,j5,j6,j9,j11,j12,j13,j14,Md401M3,dotmapMd401M3R4)
	#call replace(i14,-j14-j2/2+j3/2-j5/2+j6/2,j,j2,j3,j5,j6,j14,Md401M3,dotmapMd401M3R5)
	if (count(Md401M3,1)) Multiply replace_(Md401M3,Md378,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd378 "1"
#endif

#if `$M4'
* map dots to p0.p4,p3.p4,p1.p3,p1.p4,p1.p5 and change topology to d296
	if (count(Md401M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i4,j1-2*j12+j3,j,j1,j3,j12,Md401M4,dotmapMd401M4R1)
	#call replace(i13,-j11+j13,j,j11,j13,Md401M4,dotmapMd401M4R2)
	#call replace(i14,j10+j14-j3/2-j5/2+j6/2+j8/2-j9/2,j,j3,j5,j6,j8,j9,j10,j14,Md401M4,dotmapMd401M4R3)
	if (count(Md401M4,1)) Multiply replace_(Md401M4,Md296,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd296 "1"
#endif

#if `$M5'
* map dots to p1.p6,p3.p6,p0.p5,p1.p5,p5.p6 and change topology to d295
	if (count(Md401M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9);
	#call replace(i5,-2*j11-2*j12+2*j14+j3+j6-j7+j8,j,j3,j6,j7,j8,j11,j12,j14,Md401M5,dotmapMd401M5R1)
	#call replace(i11,-j12+j3/2-j6/2-j7/2+j9/2,j,j3,j6,j7,j9,j12,Md401M5,dotmapMd401M5R2)
	#call replace(i12,-j11-j12+j3-j5/2-j7/2+j8/2,j,j3,j5,j7,j8,j11,j12,Md401M5,dotmapMd401M5R3)
	#call replace(i13,j1/2-j10+j11+j12-j13-j3/2-j4/2+j5/2+j7/2-j8/2,j,j1,j3,j4,j5,j7,j8,j10,j11,j12,j13,Md401M5,dotmapMd401M5R4)
	#call replace(i14,-j12+j13-j5/2-j7/2+j8/2,j,j5,j7,j8,j12,j13,Md401M5,dotmapMd401M5R5)
	if (count(Md401M5,1)) Multiply replace_(Md401M5,Md295,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd295 "1"
#endif

#if `$M6'
* map dots to p1.p6,p3.p6,p0.p5,p1.p5,p3.p5 and change topology to d293
	if (count(Md401M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j14);
	#call replace(i6,-2*j11+2*j12-2*j14+j3+j6+j8-j9,j,j3,j6,j8,j9,j11,j12,j14,Md401M6,dotmapMd401M6R1)
	#call replace(i13,j13-j14,j,j13,j14,Md401M6,dotmapMd401M6R2)
	#call replace(i14,j1/2-j10+j11-j13+j14-j3/2-j4/2,j,j1,j3,j4,j10,j11,j13,j14,Md401M6,dotmapMd401M6R3)
	if (count(Md401M6,1)) Multiply replace_(Md401M6,Md293,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd293 "1"
#endif

#if `$M7'
* map dots to p0.p6,p1.p6,p0.p5,p1.p5,p3.p5 and change topology to d299
	if (count(Md401M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j14);
	#call replace(i7,-2*j10-2*j12+j3-j7+j9,j,j3,j7,j9,j10,j12,Md401M7,dotmapMd401M7R1)
	#call replace(i13,j13-j14,j,j13,j14,Md401M7,dotmapMd401M7R2)
	#call replace(i14,-j10+j11-j6/2-j7/2+j8/2,j,j6,j7,j8,j10,j11,Md401M7,dotmapMd401M7R3)
	if (count(Md401M7,1)) Multiply replace_(Md401M7,Md299,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd299 "1"
#endif

#if `$M8'
* map dots to p0.p5,p0.p2,p1.p4,p1.p5,p2.p4 and change topology to lala
	if (count(Md401M8,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j7,i5,j9,i6,j8,i7,j6,i9,j2,i10,j1);
	#call replace(i8,`Q2'-2*j10+j5,j,j5,j10,Md401M8,dotmapMd401M8R1)
	#call replace(i11,`Q2'/2+j1/2-j11-j6/2,j,j1,j6,j11,Md401M8,dotmapMd401M8R2)
	#call replace(i12,`Q2'/2-j10-j11+j13+j2/2+j5/2-j8/2,j,j2,j5,j8,j10,j11,j13,Md401M8,dotmapMd401M8R3)
	#call replace(i13,-`Q2'/2+j10+j11+j12-j13-j14-j2/2-j5/2+j8/2,j,j2,j5,j8,j10,j11,j12,j13,j14,Md401M8,dotmapMd401M8R4)
	#call replace(i14,-j11+j14+j2/2+j3/2-j7/2-j8/2,j,j2,j3,j7,j8,j11,j14,Md401M8,dotmapMd401M8R5)
	if (count(Md401M8,1)) Multiply replace_(Md401M8,Mlala,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOlala "1"
#endif

#if `$M9'
* map dots to p1.p7,p0.p5,p1.p5,p3.p5,p5.p7 and change topology to d377
	if (count(Md401M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j9,i11,j11,i12,j13);
	#call replace(i9,-2*j11+2*j14+j5+j9,j,j5,j9,j11,j14,Md401M9,dotmapMd401M9R1)
	#call replace(i13,j12-j13,j,j12,j13,Md401M9,dotmapMd401M9R2)
	#call replace(i14,j1/2-j10-j12+j14-j4/2+j5/2-j6/2+j7/2,j,j1,j4,j5,j6,j7,j10,j12,j14,Md401M9,dotmapMd401M9R3)
	if (count(Md401M9,1)) Multiply replace_(Md401M9,Md377,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd377 "1"
#endif

#if `$M10'
* map dots to p1.p6,p0.p5,p1.p5,p3.p5,p5.p6 and change topology to d302
	if (count(Md401M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j8,i7,j9,i8,j7,i9,j6,i11,j11,i12,j13);
	#call replace(i10,2*j14+j5+j6,j,j5,j6,j14,Md401M10,dotmapMd401M10R1)
	#call replace(i13,j12-j13,j,j12,j13,Md401M10,dotmapMd401M10R2)
	#call replace(i14,-`Q2'/2+j10+j11-j14+j2/2-j4/2-j5/2-j8/2+j9/2,j,j2,j4,j5,j8,j9,j10,j11,j14,Md401M10,dotmapMd401M10R3)
	if (count(Md401M10,1)) Multiply replace_(Md401M10,Md302,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd302 "1"
#endif
.sort:reduce d401;
#endif
#endprocedure

#procedure Reduced401()
	#call Prepared401()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd401'
		#call MtoZ(Md401,Zd401,i,14)
		#call Reduce(d401)
		#call ZtoM(Zd401,Md401,i,14)
#else
		#if `USETURBO'
			#call TurboMd401()
		#endif
		#call triangleS(Md401,i1,i2,i4,i3,i8,i13,i14,0,0)
#endif
		#call Prepared401()
	#endif
#endprocedure
*--#] reduce-d401 : 
*--#[ reduce-d400 :
#procedure Insertiond400()
* merge propagators with same momentum, and repeated dots
	if (count(Md400b,1)) Multiply replace_(Md400b,Md400c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i12,i9,i11,i10,i13,i11,i14,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md400c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md400c,dotmapMd400cR1)
	#call replace(i11,-`Q2'/2-j5/2+j8/2+j9,j,j5,j8,j9,Md400c,dotmapMd400cR2)
	#call replace(i12,j1/2+j2/2-j3/2,j,j1,j2,j3,Md400c,dotmapMd400cR3)
	#call replace(i13,-`Q2'/2+j4/2-j5/2+j6/2-j7/2+j8/2+j9,j,j4,j5,j6,j7,j8,j9,Md400c,dotmapMd400cR4)
	#call replace(i14,j2/2+j4/2-j5/2,j,j2,j4,j5,Md400c,dotmapMd400cR5)
	if (count(Md400c,1)) Multiply replace_(Md400c,Md400d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar0
	if (count(Md400d,1)) Multiply replace_(i1,j3,i2,j2,i3,j8,i4,j7,i5,j1,i6,j4,i7,j5,i8,j6,i9,j9);
	if (count(Md400d,1)) Multiply replace_(Md400d,Mnostar0,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar0 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared400()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-7 4-6 4-8 2-6 6-7 7-8 8-9
* Dots: p0.p4,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md400*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n7,$n6,$n8,$n10,$n9,$n4,$n5,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n5,$n3,$n7,$n4,$n9,$n6,$n8,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n7,$n4,$n3,$n10,$n5,$n6,$n9,$n8,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n7,$n4,$n3,$n10,$n5,$n6,$n9,$n8,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n7,$n6,$n8,$n10,$n9,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n11,$n10,$n5,$n3,$n7,$n4,$n9,$n6,$n8,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n14)*replace_(i1,i2,i2,i1,i4,i5,i5,i4,i6,i9,i7,i10,i9,i6,i10,i7);
elseif ($bestiso == 1); Multiply sign_($n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i6,i5,i9,i6,i4,i8,i3,i9,i5);
elseif ($bestiso == 2); Multiply sign_($n14)*replace_(i3,i8,i4,i9,i5,i6,i6,i5,i7,i10,i8,i3,i9,i4,i10,i7);
elseif ($bestiso == 3); Multiply sign_($n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i5,i6,i6,i5,i7,i10,i8,i3,i9,i4,i10,i7);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 6); Multiply sign_($n14)*replace_(i4,i5,i5,i4,i6,i9,i7,i10,i9,i6,i10,i7);
elseif ($bestiso == 7); Multiply sign_($n11+$n13+$n14)*replace_(i3,i8,i4,i6,i5,i9,i6,i4,i8,i3,i9,i5,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd400 automorphism;

#call CheckRemovedPropagators(d400,10,8,3,4,5,6,7,8,9,10,1,2)
#if `$DOACTION' == 0
.sort:reduce d400;
#endif
#endprocedure

#procedure Reduced400()
	#call Prepared400()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd400'
		#call MtoZ(Md400,Zd400,i,14)
		#call Reduce(d400)
		#call ZtoM(Zd400,Md400,i,14)
		#call Prepared400()
#else
		#if `USETURBO'
			#call TurboMd400()
		#endif
		#call insertionS(Md400,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md400b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond400()
#endif
	#endif
#endprocedure
*--#] reduce-d400 : 
*--#[ reduce-d399 :
#procedure Prepared399()
* Topology: 0-1 1-2 1-5 2-5 2-4 2-7 4-6 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p6,p0.p8,p1.p6,p1.p7
* Apply automorphisms
if (match(Md399*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n7,$n6,$n8,$n10,$n9,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n13)*replace_(i4,i5,i5,i4,i6,i9,i7,i10,i9,i6,i10,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd399 automorphism;

#call CheckRemovedPropagators(d399,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p4,p0.p1,p1.p3,p1.p5 and change topology to d342
	if (count(Md399M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Md399M1,dotmapMd399M1R1)
	#call replace(i11,-`Q2'/2+j10-j6/2+j9/2,j,j6,j9,j10,Md399M1,dotmapMd399M1R2)
	#call replace(i12,`Q2'-j10-j11,j,j10,j11,Md399M1,dotmapMd399M1R3)
	#call replace(i13,-`Q2'/2+j10-j14-j6/2+j9/2,j,j6,j9,j10,j14,Md399M1,dotmapMd399M1R4)
	#call replace(i14,`Q2'/2-j13+j14+j6/2-j9/2,j,j6,j9,j13,j14,Md399M1,dotmapMd399M1R5)
	if (count(Md399M1,1)) Multiply replace_(Md399M1,Md342,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd342 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5,p5.p7 and change topology to d379
	if (count(Md399M2,1)) Multiply replace_(i1,j5,i3,j6,i4,j3,i5,j7,i6,j4,i7,j1,i8,j9,i9,j8,i10,j2,i14,j12);
	#call replace(i2,`Q2'-2*j11+j5,j,j5,j11,Md399M2,dotmapMd399M2R1)
	#call replace(i11,-`Q2'/2-j1/2+j10+j2/2,j,j1,j2,j10,Md399M2,dotmapMd399M2R2)
	#call replace(i12,`Q2'/2-j13-j14+j5/2-j6/2+j9/2,j,j5,j6,j9,j13,j14,Md399M2,dotmapMd399M2R3)
	#call replace(i13,-j12+j13,j,j12,j13,Md399M2,dotmapMd399M2R4)
	if (count(Md399M2,1)) Multiply replace_(Md399M2,Md379,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd379 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4,p1.p5 and change topology to d370
	if (count(Md399M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i13,j14);
	#call replace(i3,-`Q2'+j1+2*j10+2*j11-2*j12-2*j13+j7,j,j1,j7,j10,j11,j12,j13,Md399M3,dotmapMd399M3R1)
	#call replace(i11,-`Q2'/2+j10-j6/2+j9/2,j,j6,j9,j10,Md399M3,dotmapMd399M3R2)
	#call replace(i12,`Q2'-j10-j11,j,j10,j11,Md399M3,dotmapMd399M3R3)
	#call replace(i14,j12-j14,j,j12,j14,Md399M3,dotmapMd399M3R4)
	if (count(Md399M3,1)) Multiply replace_(Md399M3,Md370,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd370 "1"
#endif

#if `$M4'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Md399M4,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i5,j8,i6,j5,i7,j1,i8,j9,i9,j6,i10,j7,i12,j11);
	#call replace(i4,j1+2*j10-2*j13+j5-j6-j7+j8,j,j1,j5,j6,j7,j8,j10,j13,Md399M4,dotmapMd399M4R1)
	#call replace(i11,j10-j11,j,j10,j11,Md399M4,dotmapMd399M4R2)
	#call replace(i13,j10-j11-j14-j2/2+j3/2+j9/2,j,j2,j3,j9,j10,j11,j14,Md399M4,dotmapMd399M4R3)
	#call replace(i14,`Q2'/2+j1/2-j12-j7/2,j,j1,j7,j12,Md399M4,dotmapMd399M4R4)
	if (count(Md399M4,1)) Multiply replace_(Md399M4,Md378,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd378 "1"
#endif

#if `$M5'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Md399M5,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j8,i6,j6,i7,j7,i8,j9,i9,j5,i10,j1,i11,j10,i12,j11);
	#call replace(i5,j1-2*j10-2*j13+j5-j6-j7+j8,j,j1,j5,j6,j7,j8,j10,j13,Md399M5,dotmapMd399M5R1)
	#call replace(i13,j10-j14,j,j10,j14,Md399M5,dotmapMd399M5R2)
	#call replace(i14,-j1/2+j12-j3/2+j4/2+j7/2,j,j1,j3,j4,j7,j12,Md399M5,dotmapMd399M5R3)
	if (count(Md399M5,1)) Multiply replace_(Md399M5,Md378,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd378 "1"
#endif

#if `$M6'
* map dots to p0.p5,p0.p2,p1.p4,p1.p5,p2.p4 and change topology to lala
	if (count(Md399M6,1)) Multiply replace_(i1,j3,i2,j4,i3,j7,i4,j8,i5,j2,i7,j6,i8,j5,i9,j9,i10,j1,i12,-j10);
	#call replace(i6,-`Q2'-2*j10+2*j11+2*j13-j2+j8+j9,j,j2,j8,j9,j10,j11,j13,Md399M6,dotmapMd399M6R1)
	#call replace(i11,`Q2'/2+j1/2+j10-j11-j6/2,j,j1,j6,j10,j11,Md399M6,dotmapMd399M6R2)
	#call replace(i13,`Q2'/2+j1/2+j10-j11-j12+j14+j4/2+j5/2-j6/2-j7/2,j,j1,j4,j5,j6,j7,j10,j11,j12,j14,Md399M6,dotmapMd399M6R3)
	#call replace(i14,-j1/2+j12+j3/2-j4/2+j6/2,j,j1,j3,j4,j6,j12,Md399M6,dotmapMd399M6R4)
	if (count(Md399M6,1)) Multiply replace_(Md399M6,Mlala,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOlala "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md399M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j8,i4,j9,i5,j3,i6,j6,i8,j7,i9,j5,i10,j4,i12,j12);
	#call replace(i7,`Q2'-2*j10-2*j11+j4,j,j4,j10,j11,Md399M7,dotmapMd399M7R1)
	#call replace(i11,j11-j12,j,j11,j12,Md399M7,dotmapMd399M7R2)
	#call replace(i13,-j12+j14+j2/2+j7/2-j8/2,j,j2,j7,j8,j12,j14,Md399M7,dotmapMd399M7R3)
	#call replace(i14,`Q2'/2+j1/2-j13-j14-j2/2,j,j1,j2,j13,j14,Md399M7,dotmapMd399M7R4)
	if (count(Md399M7,1)) Multiply replace_(Md399M7,Md345,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd345 "1"
#endif

#if `$M8'
* map dots to p2.p8,p6.p7,p0.p2,p1.p2,p7.p9 and change topology to nono
	if (count(Md399M8,1)) Multiply replace_(i1,j1,i2,j6,i3,j7,i4,j2,i5,j8,i6,j9,i7,j3,i9,j5,i10,j4);
	#call replace(i8,2*j11+j6+j7,j,j6,j7,j11,Md399M8,dotmapMd399M8R1)
	#call replace(i11,-`Q2'/2+j12-j3/2+j4/2,j,j3,j4,j12,Md399M8,dotmapMd399M8R2)
	#call replace(i12,`Q2'/2-j10+j11-j2/2+j6/2+j7/2-j8/2,j,j2,j6,j7,j8,j10,j11,Md399M8,dotmapMd399M8R3)
	#call replace(i13,-`Q2'/2+j11+j12+j14-j3/2+j4/2-j5/2+j6/2+j7/2+j9/2,j,j3,j4,j5,j6,j7,j9,j11,j12,j14,Md399M8,dotmapMd399M8R4)
	#call replace(i14,`Q2'/2-j11-j12+j13-j14+j3/2-j4/2+j5/2-j6/2-j7/2-j9/2,j,j3,j4,j5,j6,j7,j9,j11,j12,j13,j14,Md399M8,dotmapMd399M8R5)
	if (count(Md399M8,1)) Multiply replace_(Md399M8,Mnono,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,i14);
	#redefine HASTOPOnono "1"
#endif

#if `$M9'
* map dots to p0.p5,p0.p2,p1.p4,p1.p5,p2.p4 and change topology to lala
	if (count(Md399M9,1)) Multiply replace_(i1,j3,i2,j4,i3,j7,i4,j2,i5,j8,i6,j9,i7,j1,i8,j5,i10,j6,i12,j10);
	#call replace(i9,-`Q2'+2*j10+2*j11-2*j13-j2+j8+j9,j,j2,j8,j9,j10,j11,j13,Md399M9,dotmapMd399M9R1)
	#call replace(i11,-`Q2'/2-j1/2+j11+j6/2,j,j1,j6,j11,Md399M9,dotmapMd399M9R2)
	#call replace(i13,-`Q2'/2-j1/2+j11+j12-j14+j6/2,j,j1,j6,j11,j12,j14,Md399M9,dotmapMd399M9R3)
	#call replace(i14,`Q2'/2+j1/2-j12-j6/2,j,j1,j6,j12,Md399M9,dotmapMd399M9R4)
	if (count(Md399M9,1)) Multiply replace_(Md399M9,Mlala,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOlala "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md399M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j8,i4,j3,i5,j9,i6,j5,i7,j4,i8,j7,i9,j6,i11,j11,i12,j12,i13,j14);
	#call replace(i10,`Q2'-2*j10+2*j11+j4,j,j4,j10,j11,Md399M10,dotmapMd399M10R1)
	#call replace(i14,j13-j14,j,j13,j14,Md399M10,dotmapMd399M10R2)
	if (count(Md399M10,1)) Multiply replace_(Md399M10,Md345,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd345 "1"
#endif
.sort:reduce d399;
#endif
#endprocedure

#procedure Reduced399()
	#call Prepared399()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd399'
		#call MtoZ(Md399,Zd399,i,14)
		#call Reduce(d399)
		#call ZtoM(Zd399,Md399,i,14)
#else
		#if `USETURBO'
			#call TurboMd399()
		#endif
		#call diamondS(Md399,3,0,i4,i3,i5,i6,i8,i9,i7,i2,i10,i11,i12,i13,0,0,0)
#endif
		#call Prepared399()
	#endif
#endprocedure
*--#] reduce-d399 : 
*--#[ reduce-d398 :
#procedure Insertiond398()
* merge propagators with same momentum, and repeated dots
	if (count(Md398b,1)) Multiply replace_(Md398b,Md398c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i1,i6,i7,i6,i8,i7,i9,i8,i10,i9,i14,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md398c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j6/2,j,j1,j6,Md398c,dotmapMd398cR1)
	#call replace(i11,-j1/2-j2/2+j3/2+j9,j,j1,j2,j3,j9,Md398c,dotmapMd398cR2)
	#call replace(i12,-j4/2-j6/2+j7/2,j,j4,j6,j7,Md398c,dotmapMd398cR3)
	#call replace(i13,-`Q2'/2-j5/2+j8/2+j9,j,j5,j8,j9,Md398c,dotmapMd398cR4)
	#call replace(i14,j2/2+j4/2-j5/2,j,j2,j4,j5,Md398c,dotmapMd398cR5)
	if (count(Md398c,1)) Multiply replace_(Md398c,Md398d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar6
	if (count(Md398d,1)) Multiply replace_(i1,j1,i2,j2,i3,j7,i4,j8,i5,j3,i6,j6,i7,j5,i8,j4,i9,j9);
	if (count(Md398d,1)) Multiply replace_(Md398d,Mnostar6,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar6 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared398()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-7 4-6 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p4,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md398*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n7,$n6,$n8,$n10,$n9,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n7,$n6,$n8,$n10,$n9,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n14)*replace_(i1,i3,i3,i1,i4,i5,i5,i4,i6,i9,i7,i10,i9,i6,i10,i7);
elseif ($bestiso == 2); Multiply sign_($n14)*replace_(i4,i5,i5,i4,i6,i9,i7,i10,i9,i6,i10,i7);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd398 automorphism;

#call CheckRemovedPropagators(d398,10,8,2,4,5,6,7,8,9,10,1,3)
#if `$DOACTION' == 0
.sort:reduce d398;
#endif
#endprocedure

#procedure Reduced398()
	#call Prepared398()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd398'
		#call MtoZ(Md398,Zd398,i,14)
		#call Reduce(d398)
		#call ZtoM(Zd398,Md398,i,14)
		#call Prepared398()
#else
		#if `USETURBO'
			#call TurboMd398()
		#endif
		#call insertionS(Md398,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md398b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond398()
#endif
	#endif
#endprocedure
*--#] reduce-d398 : 
*--#[ reduce-d397 :
#procedure Prepared397()
* Topology: 0-1 4-8 7-8 1-4 1-5 2-4 2-7 6-7 2-5 5-6 2-6 8-9
* Dots: p0.p7,p0.p8,p1.p8,p3.p7
* Apply automorphisms
if (match(Md397*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n9+$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n7,$n6,$n9,$n8,$n5,$n2,$n1,$n4,$n3,$n9+$n7+$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i8,i7,i9,i8,i6,i9,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd397 automorphism;

#call CheckRemovedPropagators(d397,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p7,p4.p5,p0.p1,p0.p5,p0.p7 and change topology to d338
	if (count(Md397M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j14);
	#call replace(i1,`Q2'+j1+2*j12,j,j1,j12,Md397M1,dotmapMd397M1R1)
	#call replace(i11,-j12-j13,j,j12,j13,Md397M1,dotmapMd397M1R2)
	#call replace(i13,j10+j14,j,j10,j14,Md397M1,dotmapMd397M1R3)
	#call replace(i14,j11-j12-j13-j3/2+j4/2+j5/2-j6/2,j,j3,j4,j5,j6,j11,j12,j13,Md397M1,dotmapMd397M1R4)
	if (count(Md397M1,1)) Multiply replace_(Md397M1,Md338,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd338 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md397M2,1)) Multiply replace_(i1,j8,i3,j9,i4,j6,i5,j2,i6,j1,i7,j7,i8,j3,i9,j5,i10,j4);
	#call replace(i2,-2*j11+j6+j8-j9,j,j6,j8,j9,j11,Md397M2,dotmapMd397M2R1)
	#call replace(i11,`Q2'/2-j10-j11+j6/2-j9/2,j,j6,j9,j10,j11,Md397M2,dotmapMd397M2R2)
	#call replace(i12,-`Q2'/2+j12-j6/2+j9/2,j,j6,j9,j12,Md397M2,dotmapMd397M2R3)
	#call replace(i13,-`Q2'/2-j11+j12-j14-j2/2+j4/2-j5/2+j6/2-j7/2+j8/2,j,j2,j4,j5,j6,j7,j8,j11,j12,j14,Md397M2,dotmapMd397M2R4)
	#call replace(i14,`Q2'/2+j1/2-j10-j11+j13+j2/2-j7/2-j9/2,j,j1,j2,j7,j9,j10,j11,j13,Md397M2,dotmapMd397M2R5)
	if (count(Md397M2,1)) Multiply replace_(Md397M2,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M3'
* map dots to p1.p7,p4.p5,p0.p1,p0.p5,p0.p7 and change topology to d338
	if (count(Md397M3,1)) Multiply replace_(i1,j2,i2,j3,i4,j1,i5,j4,i6,j7,i7,j8,i8,j5,i9,j6,i10,j9,i12,j13);
	#call replace(i3,`Q2'+j1-2*j12,j,j1,j12,Md397M3,dotmapMd397M3R1)
	#call replace(i11,`Q2'/2-j14-j2/2+j3/2,j,j2,j3,j14,Md397M3,dotmapMd397M3R2)
	#call replace(i13,j1/2-j11+j13+j5/2-j6/2,j,j1,j5,j6,j11,j13,Md397M3,dotmapMd397M3R3)
	#call replace(i14,`Q2'/2-j1/2+j10-j14-j2/2+j4/2,j,j1,j2,j4,j10,j14,Md397M3,dotmapMd397M3R4)
	if (count(Md397M3,1)) Multiply replace_(Md397M3,Md338,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd338 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md397M4,1)) Multiply replace_(i1,j9,i2,j6,i3,j8,i5,j2,i6,j3,i7,j5,i8,j1,i9,j7,i10,j4,i11,j12,i12,-j10);
	#call replace(i4,2*j11+j6+j8-j9,j,j6,j8,j9,j11,Md397M4,dotmapMd397M4R1)
	#call replace(i13,j1/2-j10+j11-j13+j6/2-j7/2+j8/2-j9/2,j,j1,j6,j7,j8,j9,j10,j11,j13,Md397M4,dotmapMd397M4R2)
	#call replace(i14,j12-j14+j4/2-j5/2-j7/2,j,j4,j5,j7,j12,j14,Md397M4,dotmapMd397M4R3)
	if (count(Md397M4,1)) Multiply replace_(Md397M4,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M5'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Md397M5,1)) Multiply replace_(i1,j1,i2,j7,i3,j4,i4,j3,i6,j8,i7,j6,i8,j2,i9,j9,i10,j5,i11,j10);
	#call replace(i5,-`Q2'+2*j12+j4+j7,j,j4,j7,j12,Md397M5,dotmapMd397M5R1)
	#call replace(i12,-`Q2'/2+j11-j3/2+j4/2,j,j3,j4,j11,Md397M5,dotmapMd397M5R2)
	#call replace(i13,-j12+j13,j,j12,j13,Md397M5,dotmapMd397M5R3)
	#call replace(i14,j10-j14,j,j10,j14,Md397M5,dotmapMd397M5R4)
	if (count(Md397M5,1)) Multiply replace_(Md397M5,Md378,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd378 "1"
#endif

#if `$M6'
* map dots to p0.p7,p1.p7,p0.p6,p1.p6,p3.p6 and change topology to d314
	if (count(Md397M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,-j12,i12,j10,i13,j11,i14,-j14);
	#call replace(i6,2*j12-2*j13+j2+j6,j,j2,j6,j12,j13,Md397M6,dotmapMd397M6R1)
	if (count(Md397M6,1)) Multiply replace_(Md397M6,Md314,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd314 "1"
#endif

#if `$M7'
* map dots to p0.p7,p0.p6,p1.p6,p3.p6,p6.p7 and change topology to d315
	if (count(Md397M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i12,j10);
	#call replace(i7,-2*j11+2*j12+j2+j6,j,j2,j6,j11,j12,Md397M7,dotmapMd397M7R1)
	#call replace(i11,`Q2'/2-j1/2-j11+j2/2,j,j1,j2,j11,Md397M7,dotmapMd397M7R2)
	#call replace(i13,j10-j12+j13-j14+j4/2-j5/2-j6/2-j8/2+j9/2,j,j4,j5,j6,j8,j9,j10,j12,j13,j14,Md397M7,dotmapMd397M7R3)
	#call replace(i14,`Q2'/2-j1/2-j13-j4/2+j5/2,j,j1,j4,j5,j13,Md397M7,dotmapMd397M7R4)
	if (count(Md397M7,1)) Multiply replace_(Md397M7,Md315,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd315 "1"
#endif

#if `$M8'
* map dots to p0.p7,p1.p7,p0.p6,p1.p6,p3.p6 and change topology to d314
	if (count(Md397M8,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5,i6,j7,i7,j8,i9,j6,i10,j9);
	#call replace(i8,-2*j12+2*j13+j2+j6,j,j2,j6,j12,j13,Md397M8,dotmapMd397M8R1)
	#call replace(i11,`Q2'/2-j10-j3/2+j4/2,j,j3,j4,j10,Md397M8,dotmapMd397M8R2)
	#call replace(i12,-`Q2'/2+j1/2+j12-j2/2,j,j1,j2,j12,Md397M8,dotmapMd397M8R3)
	#call replace(i13,-`Q2'/2+j1/2+j14+j4/2-j5/2,j,j1,j4,j5,j14,Md397M8,dotmapMd397M8R4)
	#call replace(i14,`Q2'/2-j11-j2/2-j3/2+j5/2,j,j2,j3,j5,j11,Md397M8,dotmapMd397M8R5)
	if (count(Md397M8,1)) Multiply replace_(Md397M8,Md314,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd314 "1"
#endif

#if `$M9'
* map dots to p0.p7,p0.p6,p1.p6,p3.p6,p6.p7 and change topology to d315
	if (count(Md397M9,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5,i6,j7,i7,j8,i8,j6,i10,j9,i12,j11,i13,j13);
	#call replace(i9,2*j11-2*j12+j2+j6,j,j2,j6,j11,j12,Md397M9,dotmapMd397M9R1)
	#call replace(i11,`Q2'/2-j10-j3/2+j4/2,j,j3,j4,j10,Md397M9,dotmapMd397M9R2)
	#call replace(i14,`Q2'/2-j10+j12-j13-j14-j2/2-j3/2+j4/2-j6/2-j8/2+j9/2,j,j2,j3,j4,j6,j8,j9,j10,j12,j13,j14,Md397M9,dotmapMd397M9R3)
	if (count(Md397M9,1)) Multiply replace_(Md397M9,Md315,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd315 "1"
#endif

#if `$M10'
* map dots to p0.p8,p1.p8,p0.p6,p3.p6,p6.p8 and change topology to d352
	if (count(Md397M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i12,j10,i13,j11);
	#call replace(i10,-2*j10+2*j11+2*j12-2*j13+2*j14-j2-j4+j5+j7+j9,j,j2,j4,j5,j7,j9,j10,j11,j12,j13,j14,Md397M10,dotmapMd397M10R1)
	#call replace(i11,`Q2'/2-j1/2-j12+j2/2,j,j1,j2,j12,Md397M10,dotmapMd397M10R2)
	#call replace(i14,`Q2'/2-j1/2-j13-j4/2+j5/2,j,j1,j4,j5,j13,Md397M10,dotmapMd397M10R3)
	if (count(Md397M10,1)) Multiply replace_(Md397M10,Md352,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd352 "1"
#endif
.sort:reduce d397;
#endif
#endprocedure

#procedure Reduced397()
	#call Prepared397()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd397'
		#call MtoZ(Md397,Zd397,i,14)
		#call Reduce(d397)
		#call ZtoM(Zd397,Md397,i,14)
#else
		#if `USETURBO'
			#call TurboMd397()
		#endif
		#call triangleS(Md397,i10,i6,i7,i9,i2,i11,i14,0,0)
#endif
		#call Prepared397()
	#endif
#endprocedure
*--#] reduce-d397 : 
*--#[ reduce-d396 :
#procedure Prepared396()
* Topology: 0-1 4-8 2-8 1-4 1-5 3-4 2-6 2-5 5-6 2-3 3-6 8-9
* Dots: p0.p8,p0.p9,p1.p8,p1.p9
* Apply automorphisms
if (match(Md396*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd396 automorphism;

#call CheckRemovedPropagators(d396,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p7,p4.p5,p0.p1,p0.p5,p0.p7 and change topology to d338
	if (count(Md396M1,1)) Multiply replace_(i2,j4,i3,j2,i4,j3,i5,j1,i6,j9,i7,j7,i8,j8,i9,j5,i10,j6,i12,j13);
	#call replace(i1,2*j12+j2-j3+j4,j,j2,j3,j4,j12,Md396M1,dotmapMd396M1R1)
	#call replace(i11,`Q2'/2+j14-j2/2+j3/2,j,j2,j3,j14,Md396M1,dotmapMd396M1R2)
	#call replace(i13,`Q2'/2+j1/2+j10+j14-j2/2+j3/2-j4/2+j7/2-j8/2,j,j1,j2,j3,j4,j7,j8,j10,j14,Md396M1,dotmapMd396M1R3)
	#call replace(i14,-j11+j13,j,j11,j13,Md396M1,dotmapMd396M1R4)
	if (count(Md396M1,1)) Multiply replace_(Md396M1,Md338,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd338 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md396M2,1)) Multiply replace_(i1,j4,i3,j1,i4,j2,i5,j3,i6,j7,i7,j9,i8,j8,i9,j5,i10,j6);
	#call replace(i2,-j1-2*j10+j2+j4,j,j1,j2,j4,j10,Md396M2,dotmapMd396M2R1)
	#call replace(i11,-j11-j12,j,j11,j12,Md396M2,dotmapMd396M2R2)
	#call replace(i12,j10+j11,j,j10,j11,Md396M2,dotmapMd396M2R3)
	#call replace(i13,-j11-j12-j14-j2/2+j3/2-j5/2+j6/2-j8/2+j9/2,j,j2,j3,j5,j6,j8,j9,j11,j12,j14,Md396M2,dotmapMd396M2R4)
	#call replace(i14,-j1/2+j13+j4/2+j5/2-j6/2,j,j1,j4,j5,j6,j13,Md396M2,dotmapMd396M2R5)
	if (count(Md396M2,1)) Multiply replace_(Md396M2,Md381,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd381 "1"
#endif

#if `$M3'
* map dots to p3.p5,p4.p5,p0.p3,p0.p5,p0.p6 and change topology to d337
	if (count(Md396M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9);
	#call replace(i3,`Q2'-2*j12+j3,j,j3,j12,Md396M3,dotmapMd396M3R1)
	#call replace(i11,j12+j14,j,j12,j14,Md396M3,dotmapMd396M3R2)
	#call replace(i12,-`Q2'/2+j1/2-j13-j14-j2/2,j,j1,j2,j13,j14,Md396M3,dotmapMd396M3R3)
	#call replace(i13,j11+j12+j14-j3/2+j4/2+j6/2-j7/2-j8/2+j9/2,j,j3,j4,j6,j7,j8,j9,j11,j12,j14,Md396M3,dotmapMd396M3R4)
	#call replace(i14,-`Q2'/2+j1/2+j10-j13-j14-j6/2+j7/2+j8/2-j9/2,j,j1,j6,j7,j8,j9,j10,j13,j14,Md396M3,dotmapMd396M3R5)
	if (count(Md396M3,1)) Multiply replace_(Md396M3,Md337,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd337 "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md396M4,1)) Multiply replace_(i1,j2,i2,j1,i3,j9,i5,j8,i6,j4,i7,j3,i8,j7,i9,j5,i10,j6,i11,j12);
	#call replace(i4,-`Q2'+2*j10+2*j12+j9,j,j9,j10,j12,Md396M4,dotmapMd396M4R1)
	#call replace(i12,-`Q2'/2-j1/2+j10+j11+j12+j2/2,j,j1,j2,j10,j11,j12,Md396M4,dotmapMd396M4R2)
	#call replace(i13,`Q2'/2-j1/2-j10+j13+j8/2-j9/2,j,j1,j8,j9,j10,j13,Md396M4,dotmapMd396M4R3)
	#call replace(i14,j11-j14+j2/2+j8/2-j9/2,j,j2,j8,j9,j11,j14,Md396M4,dotmapMd396M4R4)
	if (count(Md396M4,1)) Multiply replace_(Md396M4,Md305,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd305 "1"
#endif

#if `$M5'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Md396M5,1)) Multiply replace_(i1,j4,i2,j3,i3,j1,i4,j7,i6,j9,i7,j8,i8,j6,i9,j2,i10,j5,i11,j11,i12,j10);
	#call replace(i5,-`Q2'+2*j13+j4+j7,j,j4,j7,j13,Md396M5,dotmapMd396M5R1)
	#call replace(i13,j11+j14+j5/2-j7/2+j8/2-j9/2,j,j5,j7,j8,j9,j11,j14,Md396M5,dotmapMd396M5R2)
	#call replace(i14,-`Q2'/2+j12+j13+j2/2+j4/2-j5/2+j7/2,j,j2,j4,j5,j7,j12,j13,Md396M5,dotmapMd396M5R3)
	if (count(Md396M5,1)) Multiply replace_(Md396M5,Md308,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M6'
* map dots to p0.p8,p1.p8,p0.p6,p1.p6,p6.p8 and change topology to d320
	if (count(Md396M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10,i14,j11);
	#call replace(i6,2*j10-2*j11+2*j12-2*j13+2*j14+j2+j6+j8,j,j2,j6,j8,j10,j11,j12,j13,j14,Md396M6,dotmapMd396M6R1)
	#call replace(i11,`Q2'/2+j12-j3/2+j4/2,j,j3,j4,j12,Md396M6,dotmapMd396M6R2)
	#call replace(i13,`Q2'/2+j13-j2/2-j3/2+j5/2,j,j2,j3,j5,j13,Md396M6,dotmapMd396M6R3)
	if (count(Md396M6,1)) Multiply replace_(Md396M6,Md320,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd320 "1"
#endif

#if `$M7'
* map dots to p0.p8,p1.p8,p0.p6,p1.p6,p3.p6 and change topology to d323
	if (count(Md396M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i12,j10,i14,j11);
	#call replace(i7,2*j10-2*j11+2*j12-2*j14+j2+j7+j8-j9,j,j2,j7,j8,j9,j10,j11,j12,j14,Md396M7,dotmapMd396M7R1)
	#call replace(i11,j1/2-j10-j12-j2/2-j3/2+j4/2,j,j1,j2,j3,j4,j10,j12,Md396M7,dotmapMd396M7R2)
	#call replace(i13,j1/2-j11-j13-j3/2+j5/2,j,j1,j3,j5,j11,j13,Md396M7,dotmapMd396M7R3)
	if (count(Md396M7,1)) Multiply replace_(Md396M7,Md323,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd323 "1"
#endif

#if `$M8'
* map dots to p0.p8,p0.p6,p1.p6,p3.p6,p6.p8 and change topology to d347
	if (count(Md396M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i12,j10);
	#call replace(i8,-2*j12+2*j13+2*j14+j6+j9,j,j6,j9,j12,j13,j14,Md396M8,dotmapMd396M8R1)
	#call replace(i11,j1/2-j10-j11-j2/2-j3/2+j4/2,j,j1,j2,j3,j4,j10,j11,Md396M8,dotmapMd396M8R2)
	#call replace(i13,j1/2-j10-j11-j14-j2/2-j3/2+j5/2-j6/2+j7/2-j8/2,j,j1,j2,j3,j5,j6,j7,j8,j10,j11,j14,Md396M8,dotmapMd396M8R3)
	#call replace(i14,j10+j11-j12+j14+j2/2+j6/2-j7/2+j8/2,j,j2,j6,j7,j8,j10,j11,j12,j14,Md396M8,dotmapMd396M8R4)
	if (count(Md396M8,1)) Multiply replace_(Md396M8,Md347,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd347 "1"
#endif

#if `$M9'
* map dots to p0.p7,p1.p7,p0.p6,p1.p6,p3.p6 and change topology to d314
	if (count(Md396M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j9);
	#call replace(i9,2*j10-2*j11-2*j13+2*j14+j2+j7-j8+j9,j,j2,j7,j8,j9,j10,j11,j13,j14,Md396M9,dotmapMd396M9R1)
	#call replace(i11,`Q2'/2+j10-j3/2+j4/2,j,j3,j4,j10,Md396M9,dotmapMd396M9R2)
	#call replace(i12,-`Q2'/2+j1/2-j10-j12-j2/2,j,j1,j2,j10,j12,Md396M9,dotmapMd396M9R3)
	#call replace(i13,`Q2'/2+j11-j2/2-j3/2+j5/2,j,j2,j3,j5,j11,Md396M9,dotmapMd396M9R4)
	#call replace(i14,-`Q2'/2+j1/2-j11-j13+j2/2,j,j1,j2,j11,j13,Md396M9,dotmapMd396M9R5)
	if (count(Md396M9,1)) Multiply replace_(Md396M9,Md314,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd314 "1"
#endif

#if `$M10'
* map dots to p0.p7,p0.p6,p1.p6,p3.p6,p6.p7 and change topology to d315
	if (count(Md396M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j8,i8,j7,i9,j9,i11,-j10);
	#call replace(i10,-2*j14+j6+j7,j,j6,j7,j14,Md396M10,dotmapMd396M10R1)
	#call replace(i12,j1/2+j10-j11-j2/2-j3/2+j4/2,j,j1,j2,j3,j4,j10,j11,Md396M10,dotmapMd396M10R2)
	#call replace(i13,-j10-j12+j13-j14-j4/2+j5/2+j6/2+j8/2-j9/2,j,j4,j5,j6,j8,j9,j10,j12,j13,j14,Md396M10,dotmapMd396M10R3)
	#call replace(i14,j1/2+j10-j13+j14-j3/2+j4/2-j6/2-j8/2+j9/2,j,j1,j3,j4,j6,j8,j9,j10,j13,j14,Md396M10,dotmapMd396M10R4)
	if (count(Md396M10,1)) Multiply replace_(Md396M10,Md315,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd315 "1"
#endif
.sort:reduce d396;
#endif
#endprocedure

#procedure Reduced396()
	#call Prepared396()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd396'
		#call MtoZ(Md396,Zd396,i,14)
		#call Reduce(d396)
		#call ZtoM(Zd396,Md396,i,14)
#else
		#if `USETURBO'
			#call TurboMd396()
		#endif
		#call triangleS(Md396,i7,i6,i8,i4,i10,i11,i13,0,0)
#endif
		#call Prepared396()
	#endif
#endprocedure
*--#] reduce-d396 : 
*--#[ reduce-no6 :
#procedure Prepareno6()
* Topology: 0-1 7-8 6-7 2-6 1-2 1-7 3-7 3-4 4-8 4-6 2-3 8-9
* Dots: p1.p2,p2.p4,p0.p2,p0.p3
* Apply automorphisms
if (match(Mno6*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n3,$n7,$n8,$n9,$n2,$n5,$n4,$n10,$n6,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n10,$n4,$n3,$n2,$n1,$n8,$n7,$n6,$n5)
endif;
if (($n11==0)&&($n12==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n7,$n3,$n4,$n10,$n6,$n1,$n8,$n9,$n2,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i3,i10,i6,i2,i7,i9,i9,i7,i10,i3);
elseif ($bestiso == 1); Multiply sign_($n11+$n12+$n13)*replace_(i1,i5,i2,i6,i3,i7,i4,i8,i5,i1,i6,i2,i7,i3,i8,i4,i9,i10,i10,i9);
elseif ($bestiso == 3); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i5,i3,i9,i4,i8,i5,i1,i7,i10,i8,i4,i9,i3,i10,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zno6 automorphism;

#call CheckRemovedPropagators(no6,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p5,p1.p6,p0.p1,p0.p2,p0.p5 and change topology to d306
	if (count(Mno6M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i13,j12,i14,j13);
	#call replace(i1,2*j12+2*j14-j3+j4+j7,j,j3,j4,j7,j12,j14,Mno6M1,dotmapMno6M1R1)
	#call replace(i11,j1/2-j11+j12-j2/2+j8/2,j,j1,j2,j8,j11,j12,Mno6M1,dotmapMno6M1R2)
	#call replace(i12,j1/2+j10+j11+j2/2-j8/2,j,j1,j2,j8,j10,j11,Mno6M1,dotmapMno6M1R3)
	if (count(Mno6M1,1)) Multiply replace_(Mno6M1,Md306,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd306 "1"
#endif

#if `$M2'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Mno6M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9);
	#call replace(i2,-`Q2'+2*j11+2*j12-2*j13+2*j14+j2-j3+j4+j5-j6+j8-j9,j,j2,j3,j4,j5,j6,j8,j9,j11,j12,j13,j14,Mno6M2,dotmapMno6M2R1)
	#call replace(i11,-`Q2'/2+j1/2+j10+j12-j13-j6/2+j8/2,j,j1,j6,j8,j10,j12,j13,Mno6M2,dotmapMno6M2R2)
	#call replace(i12,-`Q2'/2+j12+j14+j2/2+j4/2-j9/2,j,j2,j4,j9,j12,j14,Mno6M2,dotmapMno6M2R3)
	#call replace(i13,j1/2+j10-j11+j3/2-j4/2-j7/2,j,j1,j3,j4,j7,j10,j11,Mno6M2,dotmapMno6M2R4)
	#call replace(i14,`Q2'/2-j11+j3/2-j4/2,j,j3,j4,j11,Mno6M2,dotmapMno6M2R5)
	if (count(Mno6M2,1)) Multiply replace_(Mno6M2,Md378,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd378 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Mno6M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i13,j10);
	#call replace(i3,2*j10-2*j12-2*j14+j2+j8,j,j2,j8,j10,j12,j14,Mno6M3,dotmapMno6M3R1)
	#call replace(i12,-`Q2'/2+j10-j12+j13+j2/2+j4/2-j5/2+j7/2,j,j2,j4,j5,j7,j10,j12,j13,Mno6M3,dotmapMno6M3R2)
	#call replace(i14,`Q2'/2-j1/2+j10-j11+j7/2,j,j1,j7,j10,j11,Mno6M3,dotmapMno6M3R3)
	if (count(Mno6M3,1)) Multiply replace_(Mno6M3,Md308,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd308 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p8,p2.p3,p2.p9,p3.p8 and change topology to bubu
	if (count(Mno6M4,1)) Multiply replace_(i1,j4,i2,j6,i3,j3,i5,j1,i6,j5,i7,j8,i8,j7,i9,j9,i10,j2);
	#call replace(i4,2*j12+j2+j3,j,j2,j3,j12,Mno6M4,dotmapMno6M4R1)
	#call replace(i11,-j1/2-j10+j11+j12-j14+j2/2+j4/2+j6/2-j8/2,j,j1,j2,j4,j6,j8,j10,j11,j12,j14,Mno6M4,dotmapMno6M4R2)
	#call replace(i12,j12+j13+j3/2+j6/2-j9/2,j,j3,j6,j9,j12,j13,Mno6M4,dotmapMno6M4R3)
	#call replace(i13,-j1/2-j10+j11+j12+j2/2+j3/2+j4/2-j7/2,j,j1,j2,j3,j4,j7,j10,j11,j12,Mno6M4,dotmapMno6M4R4)
	#call replace(i14,`Q2'/2-j1/2-j10+j12+j2/2+j3/2,j,j1,j2,j3,j10,j12,Mno6M4,dotmapMno6M4R5)
	if (count(Mno6M4,1)) Multiply replace_(Mno6M4,Mbubu,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPObubu "1"
#endif

#if `$M5'
* map dots to p1.p5,p1.p6,p0.p1,p0.p2,p0.p5 and change topology to d306
	if (count(Mno6M5,1)) Multiply replace_(i1,j4,i2,j1,i3,j8,i4,j7,i6,j5,i7,j9,i8,j3,i9,j2,i10,j6,i13,-j12);
	#call replace(i5,2*j12+2*j14-j3+j4+j7,j,j3,j4,j7,j12,j14,Mno6M5,dotmapMno6M5R1)
	#call replace(i11,j1/2+j10+j11-j12+j2/2-j8/2,j,j1,j2,j8,j10,j11,j12,Mno6M5,dotmapMno6M5R2)
	#call replace(i12,j1/2-j11-j2/2+j8/2,j,j1,j2,j8,j11,Mno6M5,dotmapMno6M5R3)
	#call replace(i14,-j12-j13,j,j12,j13,Mno6M5,dotmapMno6M5R4)
	if (count(Mno6M5,1)) Multiply replace_(Mno6M5,Md306,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd306 "1"
#endif

#if `$M6'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Mno6M6,1)) Multiply replace_(i1,j1,i2,j5,i3,j9,i4,j3,i5,j4,i7,j8,i8,j7,i9,j6,i10,j2,i14,j11);
	#call replace(i6,-`Q2'+2*j11+2*j12-2*j13-2*j14+j2-j3+j4+j5-j6+j8-j9,j,j2,j3,j4,j5,j6,j8,j9,j11,j12,j13,j14,Mno6M6,dotmapMno6M6R1)
	#call replace(i11,j10+j13+j6/2+j7/2-j8/2,j,j6,j7,j8,j10,j13,Mno6M6,dotmapMno6M6R2)
	#call replace(i12,j14-j2/2+j3/2+j9/2,j,j2,j3,j9,j14,Mno6M6,dotmapMno6M6R3)
	#call replace(i13,j10+j11,j,j10,j11,Mno6M6,dotmapMno6M6R4)
	if (count(Mno6M6,1)) Multiply replace_(Mno6M6,Md378,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd378 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Mno6M7,1)) Multiply replace_(i1,j4,i2,j5,i3,j6,i4,j7,i5,j1,i6,j2,i8,j3,i9,j9,i10,j8,i14,j11);
	#call replace(i7,-2*j10+2*j12+2*j14+j2+j8,j,j2,j8,j10,j12,j14,Mno6M7,dotmapMno6M7R1)
	#call replace(i11,-j1/2-j12-j2/2+j4/2+j5/2,j,j1,j2,j4,j5,j12,Mno6M7,dotmapMno6M7R2)
	#call replace(i12,-`Q2'/2-j10+j12+j13-j3/2+j4/2+j7,j,j3,j4,j7,j10,j12,j13,Mno6M7,dotmapMno6M7R3)
	#call replace(i13,-j1/2-j10-j3/2+j4/2+j7/2,j,j1,j3,j4,j7,j10,Mno6M7,dotmapMno6M7R4)
	if (count(Mno6M7,1)) Multiply replace_(Mno6M7,Md308,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p8,p2.p3,p2.p9,p3.p8 and change topology to bubu
	if (count(Mno6M8,1)) Multiply replace_(i1,j1,i2,j6,i3,j9,i4,j7,i5,j4,i6,j5,i7,j2,i9,j3,i10,j8);
	#call replace(i8,-2*j12+j2+j3,j,j2,j3,j12,Mno6M8,dotmapMno6M8R1)
	#call replace(i11,j1/2+j10-j11-j13-j2/2-j4/2+j6/2+j7/2-j9/2,j,j1,j2,j4,j6,j7,j9,j10,j11,j13,Mno6M8,dotmapMno6M8R2)
	#call replace(i12,j14-j3/2+j6/2+j7/2-j8/2,j,j3,j6,j7,j8,j14,Mno6M8,dotmapMno6M8R3)
	#call replace(i13,j1/2+j10-j11+j12-j2/2-j3/2-j4/2+j7/2,j,j1,j2,j3,j4,j7,j10,j11,j12,Mno6M8,dotmapMno6M8R4)
	#call replace(i14,`Q2'/2-j11-j4/2+j7/2,j,j4,j7,j11,Mno6M8,dotmapMno6M8R5)
	if (count(Mno6M8,1)) Multiply replace_(Mno6M8,Mbubu,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPObubu "1"
#endif

#if `$M9'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Mno6M9,1)) Multiply replace_(i1,j4,i2,j2,i3,j8,i4,j7,i5,j1,i6,j5,i7,j9,i8,j3,i10,j6,i13,j10);
	#call replace(i9,-2*j10+2*j12+2*j14+j2+j8,j,j2,j8,j10,j12,j14,Mno6M9,dotmapMno6M9R1)
	#call replace(i11,-`Q2'/2+j12+j13+j2/2+j4/2-j5/2+j7/2,j,j2,j4,j5,j7,j12,j13,Mno6M9,dotmapMno6M9R2)
	#call replace(i12,j10-j12,j,j10,j12,Mno6M9,dotmapMno6M9R3)
	#call replace(i14,`Q2'/2-j1/2-j11+j7/2,j,j1,j7,j11,Mno6M9,dotmapMno6M9R4)
	if (count(Mno6M9,1)) Multiply replace_(Mno6M9,Md308,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M10'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Mno6M10,1)) Multiply replace_(i1,j1,i2,j5,i3,j9,i4,j3,i5,j4,i6,j2,i7,j8,i8,j7,i9,j6);
	#call replace(i10,2*j10-2*j12+2*j14+j2+j8,j,j2,j8,j10,j12,j14,Mno6M10,dotmapMno6M10R1)
	#call replace(i11,-`Q2'/2+j1/2-j12+j13+j7/2,j,j1,j7,j12,j13,Mno6M10,dotmapMno6M10R2)
	#call replace(i12,-j10+j12-j2/2+j3/2+j5/2-j7/2,j,j2,j3,j5,j7,j10,j12,Mno6M10,dotmapMno6M10R3)
	#call replace(i13,j1/2-j10+j3/2-j4/2-j7/2,j,j1,j3,j4,j7,j10,Mno6M10,dotmapMno6M10R4)
	#call replace(i14,j1/2-j10-j11+j3/2-j4/2-j7/2,j,j1,j3,j4,j7,j10,j11,Mno6M10,dotmapMno6M10R5)
	if (count(Mno6M10,1)) Multiply replace_(Mno6M10,Md308,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif
.sort:reduce no6;
#endif
#endprocedure

#procedure Reduceno6()
	#call Prepareno6()
	#if `$DOACTION'
		#call MtoZ(Mno6,Zno6,i,14)
		id Zno6(n1?,...,n14?) = Zno6(n1,...,n14) * 2^(n11+n12+n13+n14);
		.sort:convert no6;
		#call Reduce(no6)
		id Zno6(n1?,...,n14?) = Zno6(n1,...,n14) * 1/2^(n11+n12+n13+n14);
		#call ZtoM(Zno6,Mno6,i,14)
		#call Prepareno6()
	#endif
#endprocedure
*--#] reduce-no6 : 
*--#[ reduce-d394 :
#procedure Prepared394()
* Topology: 0-1 4-7 1-4 1-5 3-4 2-7 6-7 2-5 5-6 2-3 3-6 7-9
* Dots: p0.p4,p0.p7,p0.p9,p2.p9
* Apply automorphisms
if (match(Md394*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n12+$n13+$n14)*replace_(i5,i6,i6,i5,i7,i8,i8,i7,i9,i10,i10,i9);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd394 automorphism;

#call CheckRemovedPropagators(d394,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p5,p1.p6,p0.p1,p0.p2,p0.p5 and change topology to d306
	if (count(Md394M1,1)) Multiply replace_(i2,j4,i3,j3,i4,j7,i5,j5,i6,j1,i7,j9,i8,j2,i9,j6,i10,j8);
	#call replace(i1,`Q2'+j1-2*j10+2*j12-2*j14+j5,j,j1,j5,j10,j12,j14,Md394M1,dotmapMd394M1R1)
	#call replace(i11,`Q2'/2+j12-j14+j3/2-j4/2,j,j3,j4,j12,j14,Md394M1,dotmapMd394M1R2)
	#call replace(i12,-`Q2'/2+j13-j3/2+j4/2,j,j3,j4,j13,Md394M1,dotmapMd394M1R3)
	#call replace(i13,`Q2'/2-j13-j14+j3/2-j4/2,j,j3,j4,j13,j14,Md394M1,dotmapMd394M1R4)
	#call replace(i14,`Q2'/2+j11-j13-j14+j3/2-j4/2+j5/2-j7/2+j8/2-j9/2,j,j3,j4,j5,j7,j8,j9,j11,j13,j14,Md394M1,dotmapMd394M1R5)
	if (count(Md394M1,1)) Multiply replace_(Md394M1,Md306,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd306 "1"
#endif

#if `$M2'
* map dots to p2.p4,p0.p2,p0.p3,p0.p4,p0.p6 and change topology to d383
	if (count(Md394M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,-j12,i12,j14);
	#call replace(i2,`Q2'-2*j11+j2,j,j2,j11,Md394M2,dotmapMd394M2R1)
	#call replace(i13,-j13-j14,j,j13,j14,Md394M2,dotmapMd394M2R2)
	#call replace(i14,j10-j13-j14-j2/2-j6/2+j7/2,j,j2,j6,j7,j10,j13,j14,Md394M2,dotmapMd394M2R3)
	if (count(Md394M2,1)) Multiply replace_(Md394M2,Md383,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd383 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p3,p0.p4,p0.p8,p1.p8 and change topology to d384
	if (count(Md394M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j11,i13,j13);
	#call replace(i3,`Q2'-2*j10+2*j11+j2,j,j2,j10,j11,Md394M3,dotmapMd394M3R1)
	#call replace(i12,-j12-j13,j,j12,j13,Md394M3,dotmapMd394M3R2)
	#call replace(i14,j14-j3/2-j8/2+j9/2,j,j3,j8,j9,j14,Md394M3,dotmapMd394M3R3)
	if (count(Md394M3,1)) Multiply replace_(Md394M3,Md384,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd384 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p8,p2.p3,p2.p9,p3.p8 and change topology to bubu
	if (count(Md394M4,1)) Multiply replace_(i1,j1,i2,j4,i3,j7,i5,j2,i6,j3,i7,j8,i8,j9,i9,j5,i10,j6,i12,j11);
	#call replace(i4,2*j12-2*j13+2*j14+j5+j6+j7-j8-j9,j,j5,j6,j7,j8,j9,j12,j13,j14,Md394M4,dotmapMd394M4R1)
	#call replace(i11,j1/2-j12-j2/2-j3/2-j4/2+j7/2,j,j1,j2,j3,j4,j7,j12,Md394M4,dotmapMd394M4R2)
	#call replace(i13,-j10-j11,j,j10,j11,Md394M4,dotmapMd394M4R3)
	#call replace(i14,-j10-j11+j13+j2/2-j5/2-j7/2+j9/2,j,j2,j5,j7,j9,j10,j11,j13,Md394M4,dotmapMd394M4R4)
	if (count(Md394M4,1)) Multiply replace_(Md394M4,Mbubu,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPObubu "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md394M5,1)) Multiply replace_(i1,j4,i2,j1,i3,j2,i4,j3,i6,j7,i7,j9,i8,j8,i9,j5,i10,j6,i11,j10);
	#call replace(i5,-j1-2*j10-2*j11+2*j13-2*j14+j4+j7-j8+j9,j,j1,j4,j7,j8,j9,j10,j11,j13,j14,Md394M5,dotmapMd394M5R1)
	#call replace(i12,-`Q2'/2+j1/2-j11-j12-j2/2,j,j1,j2,j11,j12,Md394M5,dotmapMd394M5R2)
	#call replace(i13,j10+j11,j,j10,j11,Md394M5,dotmapMd394M5R3)
	#call replace(i14,-j1/2+j13-j3/2+j4/2,j,j1,j3,j4,j13,Md394M5,dotmapMd394M5R4)
	if (count(Md394M5,1)) Multiply replace_(Md394M5,Md381,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd381 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md394M6,1)) Multiply replace_(i1,j4,i2,j1,i3,j2,i4,j3,i5,j7,i7,j8,i8,j9,i9,j6,i10,j5,i11,j10,i13,j11,i14,j13);
	#call replace(i6,-j1-2*j10+2*j11-2*j13+2*j14+j4+j7-j8+j9,j,j1,j4,j7,j8,j9,j10,j11,j13,j14,Md394M6,dotmapMd394M6R1)
	#call replace(i12,-j11-j12,j,j11,j12,Md394M6,dotmapMd394M6R2)
	if (count(Md394M6,1)) Multiply replace_(Md394M6,Md381,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd381 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md394M7,1)) Multiply replace_(i1,j9,i2,j2,i3,j1,i4,j8,i5,j3,i6,j7,i8,j4,i9,j5,i10,j6);
	#call replace(i7,`Q2'-2*j10-2*j12+2*j13+2*j14+j4+j8-j9,j,j4,j8,j9,j10,j12,j13,j14,Md394M7,dotmapMd394M7R1)
	#call replace(i11,`Q2'/2+j1/2-j10-j12-j2/2,j,j1,j2,j10,j12,Md394M7,dotmapMd394M7R2)
	#call replace(i12,-`Q2'/2-j1/2-j11+j12+j2/2,j,j1,j2,j11,j12,Md394M7,dotmapMd394M7R3)
	#call replace(i13,`Q2'/2+j1/2-j10+j11-j12-j2/2,j,j1,j2,j10,j11,j12,Md394M7,dotmapMd394M7R4)
	#call replace(i14,j11-j14-j2/2-j8/2+j9/2,j,j2,j8,j9,j11,j14,Md394M7,dotmapMd394M7R5)
	if (count(Md394M7,1)) Multiply replace_(Md394M7,Md305,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd305 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md394M8,1)) Multiply replace_(i1,j9,i2,j2,i3,j1,i4,j8,i5,j7,i6,j3,i7,j4,i9,j6,i10,j5,i13,j11);
	#call replace(i8,`Q2'-2*j10-2*j12+2*j13-2*j14+j4+j8-j9,j,j4,j8,j9,j10,j12,j13,j14,Md394M8,dotmapMd394M8R1)
	#call replace(i11,`Q2'/2+j1/2-j10-j12-j2/2,j,j1,j2,j10,j12,Md394M8,dotmapMd394M8R2)
	#call replace(i12,-j11-j12,j,j11,j12,Md394M8,dotmapMd394M8R3)
	#call replace(i14,j11-j14,j,j11,j14,Md394M8,dotmapMd394M8R4)
	if (count(Md394M8,1)) Multiply replace_(Md394M8,Md305,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd305 "1"
#endif

#if `$M9'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md394M9,1)) Multiply replace_(i1,j8,i2,j9,i3,j6,i4,j2,i5,j1,i6,j7,i7,j3,i8,j5,i10,j4,i11,j11);
	#call replace(i9,2*j11-2*j13+2*j14+j3-j6+j7-j8+j9,j,j3,j6,j7,j8,j9,j11,j13,j14,Md394M9,dotmapMd394M9R1)
	#call replace(i12,-`Q2'/2+j12-j6/2+j9/2,j,j6,j9,j12,Md394M9,dotmapMd394M9R2)
	#call replace(i13,`Q2'/2-j10-j12+j6/2-j9/2,j,j6,j9,j10,j12,Md394M9,dotmapMd394M9R3)
	#call replace(i14,`Q2'/2+j1/2-j10-j11-j12+j13-j3/2+j5/2+j6/2-j7/2+j8/2-j9,j,j1,j3,j5,j6,j7,j8,j9,j10,j11,j12,j13,Md394M9,dotmapMd394M9R4)
	if (count(Md394M9,1)) Multiply replace_(Md394M9,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M10'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md394M10,1)) Multiply replace_(i1,j8,i2,j9,i3,j6,i4,j2,i5,j7,i6,j1,i7,j5,i8,j3,i9,j4,i11,j11,i12,j12);
	#call replace(i10,2*j11-2*j13-2*j14+j3-j6+j7-j8+j9,j,j3,j6,j7,j8,j9,j11,j13,j14,Md394M10,dotmapMd394M10R1)
	#call replace(i13,-`Q2'/2+j10+j11-j12-j6/2+j9/2,j,j6,j9,j10,j11,j12,Md394M10,dotmapMd394M10R2)
	#call replace(i14,-`Q2'/2-j1/2+j10+j11-j12-j13-j2/2+j3/2-j5/2-j6/2+j7/2+j9/2,j,j1,j2,j3,j5,j6,j7,j9,j10,j11,j12,j13,Md394M10,dotmapMd394M10R3)
	if (count(Md394M10,1)) Multiply replace_(Md394M10,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd324 "1"
#endif
.sort:reduce d394;
#endif
#endprocedure

#procedure Reduced394()
	#call Prepared394()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd394'
		#call MtoZ(Md394,Zd394,i,14)
		#call Reduce(d394)
		#call ZtoM(Zd394,Md394,i,14)
#else
		#if `USETURBO'
			#call TurboMd394()
		#endif
		#call diamondS(Md394,3,0,i5,i1,i6,i9,i4,i10,i7,i2,i8,i11,i13,i14,0,0,0)
#endif
		#call Prepared394()
	#endif
#endprocedure
*--#] reduce-d394 : 
*--#[ reduce-d393 :
#procedure Insertiond393()
* merge propagators with same momentum, and repeated dots
	if (count(Md393b,1)) Multiply replace_(Md393b,Md393c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,-i9,i15,-i9,i11,i10,i12,i11,i13,-i12,i14,i13,i16,-i14);

* rewrite insertion dots
	if (count(Md393c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md393c,dotmapMd393cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2+j3/2-j4/2+j5/2-j6/2-j7/2+j8/2+j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Md393c,dotmapMd393cR2)
	#call replace(i12,`Q2'/2+j5/2-j6/2,j,j5,j6,Md393c,dotmapMd393cR3)
	#call replace(i13,-j1/2-j3/2+j4/2,j,j1,j3,j4,Md393c,dotmapMd393cR4)
	#call replace(i14,j3/2+j5/2-j7/2,j,j3,j5,j7,Md393c,dotmapMd393cR5)
	if (count(Md393c,1)) Multiply replace_(Md393c,Md393d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar0
	if (count(Md393d,1)) Multiply replace_(i1,j6,i2,j1,i3,j8,i4,j5,i5,j3,i6,j4,i7,j2,i8,j7);
	#call replace(i9,j1/2+j2/2+j5/2-j6/2-j7/2-j8/2-j9,j,j1,j2,j5,j6,j7,j8,j9,Md393d,dotmapMd393dR1)
	if (count(Md393d,1)) Multiply replace_(Md393d,Mnostar0,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar0 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared393()
* Topology: 0-1 4-7 1-4 1-5 3-4 2-7 6-7 2-5 5-6 2-3 3-6 4-9
* Dots: p1.p7,p0.p1,p0.p5,p0.p7
* Apply automorphisms
if (match(Md393*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n5,$n6,$n7,$n8,$n9,$n10,$n1,$n3,$n2,$n4)
endif;
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n6,$n5,$n8,$n7,$n10,$n9,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n12+$n13+$n14)*replace_(i1,i4,i4,i1,i5,i10,i6,i9,i7,i8,i8,i7,i9,i6,i10,i5);
elseif ($bestiso == 2); Multiply sign_($n11+$n14)*replace_(i5,i6,i6,i5,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 3); Multiply sign_($n11+$n12)*replace_(i1,i4,i4,i1,i5,i9,i6,i10,i9,i5,i10,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd393 automorphism;

#call CheckRemovedPropagators(d393,10,9,1,3,4,5,6,7,8,9,10,2)
#if `$DOACTION' == 0
.sort:reduce d393;
#endif
#endprocedure

#procedure Reduced393()
	#call Prepared393()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd393'
		#call MtoZ(Md393,Zd393,i,14)
		#call Reduce(d393)
		#call ZtoM(Zd393,Md393,i,14)
		#call Prepared393()
#else
		#if `USETURBO'
			#call TurboMd393()
		#endif
		#call MtoZ(Md393,Zd393,i,14)
		#call carpet(Zd393,3,2,0,0,0,3,12,1,5,7)
		#call ZtoM(Zd393b,Md393b,i,16)
		#call Insertiond393()
#endif
	#endif
#endprocedure
*--#] reduce-d393 : 
*--#[ reduce-d392 :
#procedure Prepared392()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-4 3-5 4-5 4-7 5-6 6-7 7-9
* Dots: p0.p3,p0.p5,p0.p8,p1.p5
* Apply automorphisms
if (match(Md392*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n5+$n3+$n8)
	#call hash(1,$n14,$n13,$n12,$n11,$n4,$n3,$n8,$n5,$n6,$n7,$n10,$n9,$n1,$n2,$n7+$n9+$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n12+$n14)*replace_(i1,i2,i2,i1,i3,i9,i4,i10,i5,i7,i7,i5,i9,i3,i10,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd392 automorphism;

#call CheckRemovedPropagators(d392,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p4,p0.p1,p0.p2,p0.p4,p0.p6 and change topology to d336
	if (count(Md392M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j13);
	#call replace(i1,`Q2'+j1-2*j11,j,j1,j11,Md392M1,dotmapMd392M1R1)
	#call replace(i13,j13-j14,j,j13,j14,Md392M1,dotmapMd392M1R2)
	#call replace(i14,-j10+j13,j,j10,j13,Md392M1,dotmapMd392M1R3)
	if (count(Md392M1,1)) Multiply replace_(Md392M1,Md336,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd336 "1"
#endif

#if `$M2'
* map dots to p1.p4,p0.p1,p0.p2,p0.p4,p0.p6 and change topology to d336
	if (count(Md392M2,1)) Multiply replace_(i1,j1,i3,j8,i4,j9,i5,j6,i6,j5,i7,j4,i8,j7,i9,j2,i10,j3,i12,j14);
	#call replace(i2,`Q2'+j1-2*j11,j,j1,j11,Md392M2,dotmapMd392M2R1)
	#call replace(i11,-j12-j13+j14,j,j12,j13,j14,Md392M2,dotmapMd392M2R2)
	#call replace(i13,-j13+j14,j,j13,j14,Md392M2,dotmapMd392M2R3)
	#call replace(i14,-`Q2'/2+j10+j11+j12-j2/2+j3/2+j8/2-j9/2,j,j2,j3,j8,j9,j10,j11,j12,Md392M2,dotmapMd392M2R4)
	if (count(Md392M2,1)) Multiply replace_(Md392M2,Md336,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd336 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md392M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i13,j12);
	#call replace(i3,j1-2*j13+j3,j,j1,j3,j13,Md392M3,dotmapMd392M3R1)
	#call replace(i11,`Q2'/2+j1/2-j10-j2/2,j,j1,j2,j10,Md392M3,dotmapMd392M3R2)
	#call replace(i12,j11+j12,j,j11,j12,Md392M3,dotmapMd392M3R3)
	#call replace(i14,-`Q2'/2+j1/2+j10+j12-j13+j14-j8/2+j9/2,j,j1,j8,j9,j10,j12,j13,j14,Md392M3,dotmapMd392M3R4)
	if (count(Md392M3,1)) Multiply replace_(Md392M3,Md305,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd305 "1"
#endif

#if `$M4'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d321
	if (count(Md392M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j12,i12,j13);
	#call replace(i4,j1-2*j10-2*j12+j7-j8,j,j1,j7,j8,j10,j12,Md392M4,dotmapMd392M4R1)
	#call replace(i13,j13-j14,j,j13,j14,Md392M4,dotmapMd392M4R2)
	#call replace(i14,j11+j13+j3/2-j5/2+j6/2-j7/2,j,j3,j5,j6,j7,j11,j13,Md392M4,dotmapMd392M4R3)
	if (count(Md392M4,1)) Multiply replace_(Md392M4,Md321,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd321 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d311
	if (count(Md392M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11);
	#call replace(i5,-2*j14+j3+j5,j,j3,j5,j14,Md392M5,dotmapMd392M5R1)
	#call replace(i12,j10-j12,j,j10,j12,Md392M5,dotmapMd392M5R2)
	#call replace(i14,j1/2-j13+j3/2-j4/2,j,j1,j3,j4,j13,Md392M5,dotmapMd392M5R3)
	if (count(Md392M5,1)) Multiply replace_(Md392M5,Md311,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd311 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d316
	if (count(Md392M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j13);
	#call replace(i6,-2*j14+j3+j5,j,j3,j5,j14,Md392M6,dotmapMd392M6R1)
	if (count(Md392M6,1)) Multiply replace_(Md392M6,Md316,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd316 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d311
	if (count(Md392M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j5,i6,j6,i8,j7,i9,j3,i10,j4,i12,j12,i13,j11);
	#call replace(i7,2*j14+j6+j7-j8,j,j6,j7,j8,j14,Md392M7,dotmapMd392M7R1)
	#call replace(i11,j10+j11,j,j10,j11,Md392M7,dotmapMd392M7R2)
	#call replace(i14,j12-j13,j,j12,j13,Md392M7,dotmapMd392M7R3)
	if (count(Md392M7,1)) Multiply replace_(Md392M7,Md311,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd311 "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md392M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i8,-2*j14+j5-j6+j8,j,j5,j6,j8,j14,Md392M8,dotmapMd392M8R1)
	#call replace(i12,j10-j11,j,j10,j11,Md392M8,dotmapMd392M8R2)
	#call replace(i13,j10-j11-j12,j,j10,j11,j12,Md392M8,dotmapMd392M8R3)
	#call replace(i14,j1/2-j13+j3/2-j4/2,j,j1,j3,j4,j13,Md392M8,dotmapMd392M8R4)
	if (count(Md392M8,1)) Multiply replace_(Md392M8,Md381,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd381 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md392M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j6,i6,j5,i7,j4,i8,j7,i10,j3,i12,j11,i13,j12);
	#call replace(i9,j1-2*j13+j3,j,j1,j3,j13,Md392M9,dotmapMd392M9R1)
	#call replace(i11,-`Q2'/2-j1/2+j10+j12+j2/2,j,j1,j2,j10,j12,Md392M9,dotmapMd392M9R2)
	#call replace(i14,j11-j14,j,j11,j14,Md392M9,dotmapMd392M9R3)
	if (count(Md392M9,1)) Multiply replace_(Md392M9,Md305,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd305 "1"
#endif

#if `$M10'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d321
	if (count(Md392M10,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j9,i5,j5,i6,j6,i7,j4,i8,j3,i9,j7,i13,j12);
	#call replace(i10,j1+2*j10+2*j13+2*j14-j2+j3+j9,j,j1,j2,j3,j9,j10,j13,j14,Md392M10,dotmapMd392M10R1)
	#call replace(i11,j12+j13+j14,j,j12,j13,j14,Md392M10,dotmapMd392M10R2)
	#call replace(i12,j12+j13,j,j12,j13,Md392M10,dotmapMd392M10R3)
	#call replace(i14,j10+j11+j5/2-j6/2+j8/2,j,j5,j6,j8,j10,j11,Md392M10,dotmapMd392M10R4)
	if (count(Md392M10,1)) Multiply replace_(Md392M10,Md321,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd321 "1"
#endif
.sort:reduce d392;
#endif
#endprocedure

#procedure Reduced392()
	#call Prepared392()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd392'
		#call MtoZ(Md392,Zd392,i,14)
		#call Reduce(d392)
		#call ZtoM(Zd392,Md392,i,14)
#else
		#if `USETURBO'
			#call TurboMd392()
		#endif
		#call triangleS(Md392,i6,i7,i5,i3,i8,i12,i14,0,0)
#endif
		#call Prepared392()
	#endif
#endprocedure
*--#] reduce-d392 : 
*--#[ reduce-d391 :
#procedure Prepared391()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-4 3-5 4-5 5-6 6-7 4-7 4-9
* Dots: p0.p3,p0.p6,p0.p8,p1.p6
* Apply automorphisms
if (match(Md391*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n6+$n3+$n8)
	#call hash(1,$n14,$n11,$n12,$n13,$n10,$n4,$n3,$n5,$n6,$n7,$n9,$n8,$n1,$n2,$n6+$n8+$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i5,i7,i7,i5,i8,i3,i9,i4,i11,i13,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd391 automorphism;

#call CheckRemovedPropagators(d391,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4,p0.p6,p0.p8,p4.p8 and change topology to d339
	if (count(Md391M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i1,`Q2'+j1+2*j10-2*j11+2*j12-2*j13,j,j1,j10,j11,j12,j13,Md391M1,dotmapMd391M1R1)
	#call replace(i12,j10-j11,j,j10,j11,Md391M1,dotmapMd391M1R2)
	#call replace(i13,j10-j11+j12,j,j10,j11,j12,Md391M1,dotmapMd391M1R3)
	#call replace(i14,j1/2+j10-j11-j13+j14-j3/2+j5/2-j6/2+j9/2,j,j1,j3,j5,j6,j9,j10,j11,j13,j14,Md391M1,dotmapMd391M1R4)
	if (count(Md391M1,1)) Multiply replace_(Md391M1,Md339,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd339 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p4,p0.p6,p0.p8,p4.p8 and change topology to d339
	if (count(Md391M2,1)) Multiply replace_(i1,j1,i3,j7,i4,j8,i5,j6,i6,j5,i7,j4,i8,j2,i9,j3,i10,j9,i13,-j10);
	#call replace(i2,`Q2'+j1+2*j10+2*j11-2*j12-2*j13,j,j1,j10,j11,j12,j13,Md391M2,dotmapMd391M2R1)
	#call replace(i11,-j10-j11+j12,j,j10,j11,j12,Md391M2,dotmapMd391M2R2)
	#call replace(i12,-j10-j11,j,j10,j11,Md391M2,dotmapMd391M2R3)
	#call replace(i14,j1/2-j13-j14-j3/2+j5/2-j6/2+j9/2,j,j1,j3,j5,j6,j9,j13,j14,Md391M2,dotmapMd391M2R4)
	if (count(Md391M2,1)) Multiply replace_(Md391M2,Md339,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd339 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p8,p2.p3,p2.p9,p3.p8 and change topology to bubu
	if (count(Md391M3,1)) Multiply replace_(i1,j4,i2,j7,i4,j6,i5,j1,i6,j5,i7,j2,i8,j8,i9,j9,i10,j3,i13,j11);
	#call replace(i3,j1-2*j10+2*j11-2*j12+2*j14-j2+j8,j,j1,j2,j8,j10,j11,j12,j14,Md391M3,dotmapMd391M3R1)
	#call replace(i11,`Q2'/2+j1/2-j10+j11-j12-j2/2-j3/2,j,j1,j2,j3,j10,j11,j12,Md391M3,dotmapMd391M3R2)
	#call replace(i12,-j10+j11,j,j10,j11,Md391M3,dotmapMd391M3R3)
	#call replace(i14,-j10+j11+j13-j2/2+j5/2+j7/2-j9/2,j,j2,j5,j7,j9,j10,j11,j13,Md391M3,dotmapMd391M3R4)
	if (count(Md391M3,1)) Multiply replace_(Md391M3,Mbubu,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPObubu "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md391M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j14);
	#call replace(i4,j1-2*j13+j3,j,j1,j3,j13,Md391M4,dotmapMd391M4R1)
	if (count(Md391M4,1)) Multiply replace_(Md391M4,Md345,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd345 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d344
	if (count(Md391M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j13);
	#call replace(i5,-2*j14+j3+j5,j,j3,j5,j14,Md391M5,dotmapMd391M5R1)
	if (count(Md391M5,1)) Multiply replace_(Md391M5,Md344,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd344 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5,p5.p7 and change topology to d379
	if (count(Md391M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10);
	#call replace(i6,-2*j13+j3+j5,j,j3,j5,j13,Md391M6,dotmapMd391M6R1)
	#call replace(i12,j10-j11,j,j10,j11,Md391M6,dotmapMd391M6R2)
	#call replace(i13,-`Q2'/2+j10-j13+j14+j5/2-j6/2+j9/2,j,j5,j6,j9,j10,j13,j14,Md391M6,dotmapMd391M6R3)
	#call replace(i14,j1/2-j12+j3/2-j4/2,j,j1,j3,j4,j12,Md391M6,dotmapMd391M6R4)
	if (count(Md391M6,1)) Multiply replace_(Md391M6,Md379,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd379 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5 and change topology to d344
	if (count(Md391M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j8,i5,j5,i6,j6,i8,j3,i9,j4,i10,j9,i11,j11,i13,j10);
	#call replace(i7,-`Q2'-2*j10+2*j11+2*j14+j6-j7+j9,j,j6,j7,j9,j10,j11,j14,Md391M7,dotmapMd391M7R1)
	#call replace(i12,j11-j12,j,j11,j12,Md391M7,dotmapMd391M7R2)
	#call replace(i14,-j12+j13+j2/2+j7/2-j8/2,j,j2,j7,j8,j12,j13,Md391M7,dotmapMd391M7R3)
	if (count(Md391M7,1)) Multiply replace_(Md391M7,Md344,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd344 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p8,p2.p3,p2.p9,p3.p8 and change topology to bubu
	if (count(Md391M8,1)) Multiply replace_(i1,j7,i2,j4,i3,j8,i4,j9,i5,j2,i6,j5,i7,j1,i9,j6,i10,j3,i11,j11);
	#call replace(i8,j1+2*j10-2*j11+2*j12-2*j14-j2+j8,j,j1,j2,j8,j10,j11,j12,j14,Md391M8,dotmapMd391M8R1)
	#call replace(i12,-j10+j11,j,j10,j11,Md391M8,dotmapMd391M8R2)
	#call replace(i13,-`Q2'/2-j1/2-j10+j11-j12+j2/2+j3/2,j,j1,j2,j3,j10,j11,j12,Md391M8,dotmapMd391M8R3)
	#call replace(i14,-j13-j2/2+j5/2+j7/2-j9/2,j,j2,j5,j7,j9,j13,Md391M8,dotmapMd391M8R4)
	if (count(Md391M8,1)) Multiply replace_(Md391M8,Mbubu,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPObubu "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md391M9,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j8,i5,j6,i6,j5,i7,j4,i8,j3,i10,j9,i11,j12,i12,j11,i13,j10);
	#call replace(i9,j1+2*j13+j3,j,j1,j3,j13,Md391M9,dotmapMd391M9R1)
	#call replace(i14,j11-j14,j,j11,j14,Md391M9,dotmapMd391M9R2)
	if (count(Md391M9,1)) Multiply replace_(Md391M9,Md345,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd345 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md391M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j10,i12,j11,i14,j13);
	#call replace(i10,`Q2'-2*j10+2*j11+2*j12-2*j14+j5-j6+j8,j,j5,j6,j8,j10,j11,j12,j14,Md391M10,dotmapMd391M10R1)
	#call replace(i13,j11+j12,j,j11,j12,Md391M10,dotmapMd391M10R2)
	if (count(Md391M10,1)) Multiply replace_(Md391M10,Md381,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd381 "1"
#endif
.sort:reduce d391;
#endif
#endprocedure

#procedure Reduced391()
	#call Prepared391()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd391'
		#call MtoZ(Md391,Zd391,i,14)
		#call Reduce(d391)
		#call ZtoM(Zd391,Md391,i,14)
#else
		#if `USETURBO'
			#call TurboMd391()
		#endif
		#call triangleS(Md391,i5,i7,i6,i3,i8,i12,i14,0,0)
#endif
		#call Prepared391()
	#endif
#endprocedure
*--#] reduce-d391 : 
*--#[ reduce-d390 :
#procedure Insertiond390()
* merge propagators with same momentum, and repeated dots
	if (count(Md390b,1)) Multiply replace_(Md390b,Md390c,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md390c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j8/2,j,j5,j8,Md390c,dotmapMd390cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2+j3/2-j4/2+j5/2-j6/2+j7/2-j8/2-j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Md390c,dotmapMd390cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md390c,dotmapMd390cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md390c,dotmapMd390cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md390c,dotmapMd390cR5)
	if (count(Md390c,1)) Multiply replace_(Md390c,Md390d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar6
	if (count(Md390d,1)) Multiply replace_(i1,j3,i2,j4,i3,j8,i4,j2,i5,j6,i6,j5,i7,j7,i8,j1);
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md390d,dotmapMd390dR1)
	if (count(Md390d,1)) Multiply replace_(Md390d,Mnostar6,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar6 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared390()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-4 3-4 4-8 3-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md390*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n4,$n3,$n7,$n5,$n6,$n9,$n8,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n4,$n3,$n7,$n6,$n5,$n9,$n8,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i5,i6,i6,i5,i8,i3,i9,i4);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i8,i3,i9,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd390 automorphism;

#call CheckRemovedPropagators(d390,10,8,1,2,3,4,7,8,9,10,5,6)
#if `$DOACTION' == 0
.sort:reduce d390;
#endif
#endprocedure

#procedure Reduced390()
	#call Prepared390()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd390'
		#call MtoZ(Md390,Zd390,i,14)
		#call Reduce(d390)
		#call ZtoM(Zd390,Md390,i,14)
		#call Prepared390()
#else
		#if `USETURBO'
			#call TurboMd390()
		#endif
		#call insertionS(Md390,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md390b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond390()
#endif
	#endif
#endprocedure
*--#] reduce-d390 : 
*--#[ reduce-d389 :
#procedure Insertiond389()
* merge propagators with same momentum, and repeated dots
	if (count(Md389b,1)) Multiply replace_(Md389b,Md389c,i7,i5,i8,i7,i9,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md389c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j6/2+j8/2+j9,j,j6,j8,j9,Md389c,dotmapMd389cR1)
	#call replace(i11,-`Q2'/2+j2/2+j5/2-j6/2-j7/2+j8/2+j9,j,j2,j5,j6,j7,j8,j9,Md389c,dotmapMd389cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md389c,dotmapMd389cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md389c,dotmapMd389cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md389c,dotmapMd389cR5)
	if (count(Md389c,1)) Multiply replace_(Md389c,Md389d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar5
	if (count(Md389d,1)) Multiply replace_(i1,j3,i2,j4,i3,j8,i4,j2,i5,j5,i6,j6,i7,j7,i8,j1);
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md389d,dotmapMd389dR1)
	if (count(Md389d,1)) Multiply replace_(Md389d,Mnostar5,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared389()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-5 3-5 3-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md389*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd389 automorphism;

#call CheckRemovedPropagators(d389,10,8,1,2,3,4,7,8,9,10,5,6)
#if `$DOACTION' == 0
.sort:reduce d389;
#endif
#endprocedure

#procedure Reduced389()
	#call Prepared389()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd389'
		#call MtoZ(Md389,Zd389,i,14)
		#call Reduce(d389)
		#call ZtoM(Zd389,Md389,i,14)
		#call Prepared389()
#else
		#if `USETURBO'
			#call TurboMd389()
		#endif
		#call insertionS(Md389,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md389b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond389()
#endif
	#endif
#endprocedure
*--#] reduce-d389 : 
*--#[ reduce-d388 :
#procedure Prepared388()
* Topology: 0-1 1-2 1-6 2-3 3-4 3-5 4-5 4-8 5-6 2-6 2-8 8-9
* Dots: p0.p3,p0.p4,p1.p3,p1.p4
* Apply automorphisms
if (match(Md388*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd388 automorphism;

#call CheckRemovedPropagators(d388,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p3,p0.p1,p1.p2,p1.p3 and change topology to d333
	if (count(Md388M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Md388M1,dotmapMd388M1R1)
	#call replace(i13,j10-j13,j,j10,j13,Md388M1,dotmapMd388M1R2)
	#call replace(i14,j11-j14,j,j11,j14,Md388M1,dotmapMd388M1R3)
	if (count(Md388M1,1)) Multiply replace_(Md388M1,Md333,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd333 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d328
	if (count(Md388M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10,i13,j12,i14,j13);
	#call replace(i2,`Q2'+j1-2*j11,j,j1,j11,Md388M2,dotmapMd388M2R1)
	#call replace(i11,-j1/2+j11+j12-j13+j14+j6/2-j7/2+j8/2-j9/2,j,j1,j6,j7,j8,j9,j11,j12,j13,j14,Md388M2,dotmapMd388M2R2)
	if (count(Md388M2,1)) Multiply replace_(Md388M2,Md328,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd328 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Md388M3,1)) Multiply replace_(i1,j4,i2,j3,i4,j8,i5,j5,i6,j6,i7,j7,i8,j9,i9,j2,i10,j1);
	#call replace(i3,2*j11-2*j13+j7+j9,j,j7,j9,j11,j13,Md388M3,dotmapMd388M3R1)
	#call replace(i11,`Q2'/2-j1/2+j11+j7/2,j,j1,j7,j11,Md388M3,dotmapMd388M3R2)
	#call replace(i12,`Q2'/2-j1/2+j10+j7/2,j,j1,j7,j10,Md388M3,dotmapMd388M3R3)
	#call replace(i13,-j1/2+j11+j12-j2/2+j4/2+j7/2+j9/2,j,j1,j2,j4,j7,j9,j11,j12,Md388M3,dotmapMd388M3R4)
	#call replace(i14,-j1/2+j10+j12-j14-j3/2+j4/2+j7/2,j,j1,j3,j4,j7,j10,j12,j14,Md388M3,dotmapMd388M3R5)
	if (count(Md388M3,1)) Multiply replace_(Md388M3,Md378,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd378 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d349
	if (count(Md388M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11);
	#call replace(i4,-2*j14+j3+j4,j,j3,j4,j14,Md388M4,dotmapMd388M4R1)
	#call replace(i12,j10-j12,j,j10,j12,Md388M4,dotmapMd388M4R2)
	#call replace(i14,j11-j13,j,j11,j13,Md388M4,dotmapMd388M4R3)
	if (count(Md388M4,1)) Multiply replace_(Md388M4,Md349,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd349 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d353
	if (count(Md388M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j12,i13,j11,i14,j13);
	#call replace(i5,-2*j14+j3+j4,j,j3,j4,j14,Md388M5,dotmapMd388M5R1)
	if (count(Md388M5,1)) Multiply replace_(Md388M5,Md353,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd353 "1"
#endif

#if `$M6'
* map dots to p0.p3,p1.p7,p0.p5,p1.p5,p3.p5 and change topology to d354
	if (count(Md388M6,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j5,i5,j6,i7,j7,i8,j3,i9,j4,i10,j9,i12,j12);
	#call replace(i6,2*j14+j6+j7-j8,j,j6,j7,j8,j14,Md388M6,dotmapMd388M6R1)
	#call replace(i11,`Q2'/2+j10+j7/2-j9/2,j,j7,j9,j10,Md388M6,dotmapMd388M6R2)
	#call replace(i13,`Q2'/2+j1/2+j10-j11+j3/2-j4/2+j7/2-j9/2,j,j1,j3,j4,j7,j9,j10,j11,Md388M6,dotmapMd388M6R3)
	#call replace(i14,j12-j13,j,j12,j13,Md388M6,dotmapMd388M6R4)
	if (count(Md388M6,1)) Multiply replace_(Md388M6,Md354,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd354 "1"
#endif

#if `$M7'
* map dots to p0.p3,p0.p5,p0.p7,p1.p3,p1.p5 and change topology to d345
	if (count(Md388M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j13);
	#call replace(i7,-`Q2'+2*j10-2*j12+j9,j,j9,j10,j12,Md388M7,dotmapMd388M7R1)
	#call replace(i12,j10-j11,j,j10,j11,Md388M7,dotmapMd388M7R2)
	#call replace(i14,j13-j14,j,j13,j14,Md388M7,dotmapMd388M7R3)
	if (count(Md388M7,1)) Multiply replace_(Md388M7,Md345,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd345 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Md388M8,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j6,i5,j9,i6,j8,i7,j7,i9,j2,i10,j1,i12,j11);
	#call replace(i8,`Q2'+2*j10-2*j12-2*j13+j3-j4+j5-j7,j,j3,j4,j5,j7,j10,j12,j13,Md388M8,dotmapMd388M8R1)
	#call replace(i11,-j1/2-j10-j3/2+j4/2+j7/2,j,j1,j3,j4,j7,j10,Md388M8,dotmapMd388M8R2)
	#call replace(i13,-j1/2-j12-j2/2+j4/2+j5/2,j,j1,j2,j4,j5,j12,Md388M8,dotmapMd388M8R3)
	#call replace(i14,j11+j14+j5/2-j7/2+j8/2-j9/2,j,j5,j7,j8,j9,j11,j14,Md388M8,dotmapMd388M8R4)
	if (count(Md388M8,1)) Multiply replace_(Md388M8,Md308,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p4,p1.p3,p1.p4,p1.p6 and change topology to d356
	if (count(Md388M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j9,i11,j10,i12,j11,i13,j12,i14,j13);
	#call replace(i9,-`Q2'+2*j10-2*j12+2*j13-2*j14+j2-j7+j8+j9,j,j2,j7,j8,j9,j10,j12,j13,j14,Md388M9,dotmapMd388M9R1)
	if (count(Md388M9,1)) Multiply replace_(Md388M9,Md356,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd356 "1"
#endif

#if `$M10'
* map dots to p3.p9,p4.p9,p0.p3,p0.p4,p0.p6 and change topology to d321
	if (count(Md388M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j12,i12,j13);
	#call replace(i10,`Q2'-2*j13+2*j14+j7,j,j7,j13,j14,Md388M10,dotmapMd388M10R1)
	#call replace(i13,j10+j12+j3/2-j7/2+j8/2,j,j3,j7,j8,j10,j12,Md388M10,dotmapMd388M10R2)
	#call replace(i14,j11+j13+j3/2-j5/2+j6/2-j7/2,j,j3,j5,j6,j7,j11,j13,Md388M10,dotmapMd388M10R3)
	if (count(Md388M10,1)) Multiply replace_(Md388M10,Md321,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd321 "1"
#endif
.sort:reduce d388;
#endif
#endprocedure

#procedure Reduced388()
	#call Prepared388()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd388'
		#call MtoZ(Md388,Zd388,i,14)
		#call Reduce(d388)
		#call ZtoM(Zd388,Md388,i,14)
#else
		#if `USETURBO'
			#call TurboMd388()
		#endif
		#call triangleS(Md388,i5,i6,i4,i3,i7,i12,i14,0,0)
#endif
		#call Prepared388()
	#endif
#endprocedure
*--#] reduce-d388 : 
*--#[ reduce-d387 :
#procedure Prepared387()
* Topology: 0-1 1-2 1-6 2-7 2-4 2-5 4-5 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p6,p1.p3,p1.p6
* Apply automorphisms
if (match(Md387*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd387 automorphism;

#call CheckRemovedPropagators(d387,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md387M1,1)) Multiply replace_(i2,j7,i3,j9,i4,j4,i5,j5,i6,j3,i7,j1,i8,j6,i9,j8,i10,j2,i12,j10);
	#call replace(i1,`Q2'-2*j12+j7,j,j7,j12,Md387M1,dotmapMd387M1R1)
	#call replace(i11,`Q2'/2-j1/2-j11-j12+j2/2,j,j1,j2,j11,j12,Md387M1,dotmapMd387M1R2)
	#call replace(i13,`Q2'/2-j1/2-j12-j13-j6/2+j7/2+j9/2,j,j1,j6,j7,j9,j12,j13,Md387M1,dotmapMd387M1R3)
	#call replace(i14,j10-j14,j,j10,j14,Md387M1,dotmapMd387M1R4)
	if (count(Md387M1,1)) Multiply replace_(Md387M1,Md381,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd381 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md387M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j11,i12,j12,i13,j13,i14,j14);
	#call replace(i2,`Q2'+j1-2*j10,j,j1,j10,Md387M2,dotmapMd387M2R1)
	if (count(Md387M2,1)) Multiply replace_(Md387M2,Md324,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd324 "1"
#endif

#if `$M3'
* map dots to p0.p6,p0.p9,p1.p3,p1.p9,p3.p6 and change topology to d378
	if (count(Md387M3,1)) Multiply replace_(i1,j4,i2,j3,i4,j8,i5,j5,i6,j6,i7,j7,i8,j9,i9,j2,i10,j1,i12,j10);
	#call replace(i3,j1-2*j12-2*j13+j2,j,j1,j2,j12,j13,Md387M3,dotmapMd387M3R1)
	#call replace(i11,j1/2-j11-j3/2+j4/2-j7/2,j,j1,j3,j4,j7,j11,Md387M3,dotmapMd387M3R2)
	#call replace(i13,j1/2-j11-j12+j2/2+j4/2-j7/2-j9/2,j,j1,j2,j4,j7,j9,j11,j12,Md387M3,dotmapMd387M3R3)
	#call replace(i14,j10-j14,j,j10,j14,Md387M3,dotmapMd387M3R4)
	if (count(Md387M3,1)) Multiply replace_(Md387M3,Md378,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd378 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d310
	if (count(Md387M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11);
	#call replace(i4,j1-2*j11-2*j13+2*j14+j3+j4,j,j1,j3,j4,j11,j13,j14,Md387M4,dotmapMd387M4R1)
	#call replace(i12,j1/2-j10-j12-j2/2-j6/2+j9/2,j,j1,j2,j6,j9,j10,j12,Md387M4,dotmapMd387M4R2)
	#call replace(i14,j1/2-j10-j13-j6/2+j7/2-j8/2+j9/2,j,j1,j6,j7,j8,j9,j10,j13,Md387M4,dotmapMd387M4R3)
	if (count(Md387M4,1)) Multiply replace_(Md387M4,Md310,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd310 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d325
	if (count(Md387M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i13,j11);
	#call replace(i5,j1-2*j11-2*j13+2*j14+j3+j4,j,j1,j3,j4,j11,j13,j14,Md387M5,dotmapMd387M5R1)
	#call replace(i12,-`Q2'/2+j12-j6/2+j9/2,j,j6,j9,j12,Md387M5,dotmapMd387M5R2)
	#call replace(i14,-j1/2-j10+j11+j13-j6/2+j7/2-j8/2+j9/2,j,j1,j6,j7,j8,j9,j10,j11,j13,Md387M5,dotmapMd387M5R3)
	if (count(Md387M5,1)) Multiply replace_(Md387M5,Md325,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd325 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p5,p1.p5,p3.p5,p5.p7 and change topology to d385
	if (count(Md387M6,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j5,i5,j6,i7,j7,i8,j3,i9,j4,i10,j9);
	#call replace(i6,-2*j14+j5+j7,j,j5,j7,j14,Md387M6,dotmapMd387M6R1)
	#call replace(i11,-j1/2-j10+j2/2-j7/2+j9/2,j,j1,j2,j7,j9,j10,Md387M6,dotmapMd387M6R2)
	#call replace(i12,-`Q2'/2+j11-j7/2+j9/2,j,j7,j9,j11,Md387M6,dotmapMd387M6R3)
	#call replace(i13,-j13-j14+j2/2+j5/2-j6/2+j8/2,j,j2,j5,j6,j8,j13,j14,Md387M6,dotmapMd387M6R4)
	#call replace(i14,j1/2+j10+j11-j12-j13-j14-j2/2+j3/2-j4/2+j5/2-j6/2+j8/2,j,j1,j2,j3,j4,j5,j6,j8,j10,j11,j12,j13,j14,Md387M6,dotmapMd387M6R5)
	if (count(Md387M6,1)) Multiply replace_(Md387M6,Md385,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd385 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p8,p2.p3,p2.p9,p3.p8 and change topology to bubu
	if (count(Md387M7,1)) Multiply replace_(i1,j4,i2,j7,i3,j6,i4,j1,i5,j5,i6,j2,i8,j8,i9,j9,i10,j3,i12,j10);
	#call replace(i7,j1-2*j10-2*j12-j2,j,j1,j2,j10,j12,Md387M7,dotmapMd387M7R1)
	#call replace(i11,-j1/2+j10-j11+j12+j2/2+j3/2+j4/2-j7/2,j,j1,j2,j3,j4,j7,j10,j11,j12,Md387M7,dotmapMd387M7R2)
	#call replace(i13,-j1/2+j10-j11+j12-j14+j2/2+j4/2+j6/2-j8/2,j,j1,j2,j4,j6,j8,j10,j11,j12,j14,Md387M7,dotmapMd387M7R3)
	#call replace(i14,j10-j13+j2/2-j5/2+j8/2,j,j2,j5,j8,j10,j13,Md387M7,dotmapMd387M7R4)
	if (count(Md387M7,1)) Multiply replace_(Md387M7,Mbubu,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPObubu "1"
#endif

#if `$M8'
* map dots to p2.p8,p6.p7,p0.p2,p1.p2,p7.p9 and change topology to nono
	if (count(Md387M8,1)) Multiply replace_(i1,j1,i2,j6,i3,j8,i4,j2,i5,j7,i6,j9,i7,j3,i9,j5,i10,j4);
	#call replace(i8,2*j14+j7+j9,j,j7,j9,j14,Md387M8,dotmapMd387M8R1)
	#call replace(i11,`Q2'/2+j10-j11-j12+j2/2-j6/2-j7/2+j8/2,j,j2,j6,j7,j8,j10,j11,j12,Md387M8,dotmapMd387M8R2)
	#call replace(i12,-`Q2'/2+j12-j3/2+j4/2,j,j3,j4,j12,Md387M8,dotmapMd387M8R3)
	#call replace(i13,j1/2+j10-j13+j2/2-j7/2+j8/2,j,j1,j2,j7,j8,j10,j13,Md387M8,dotmapMd387M8R4)
	#call replace(i14,-`Q2'/2+j11+j12+j14-j3/2+j4/2-j5/2+j6/2+j7/2+j9/2,j,j3,j4,j5,j6,j7,j9,j11,j12,j14,Md387M8,dotmapMd387M8R5)
	if (count(Md387M8,1)) Multiply replace_(Md387M8,Mnono,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,i14);
	#redefine HASTOPOnono "1"
#endif

#if `$M9'
* map dots to p0.p2,p0.p6,p1.p2,p1.p3,p2.p6 and change topology to d308
	if (count(Md387M9,1)) Multiply replace_(i1,j3,i2,j4,i3,j2,i4,j8,i5,j9,i6,j6,i7,j7,i8,j5,i10,j1,i11,j10,i12,j11);
	#call replace(i9,j1-2*j12+j2,j,j1,j2,j12,Md387M9,dotmapMd387M9R1)
	#call replace(i13,-`Q2'/2+j10-j12+j13+j2/2+j4/2-j5/2+j7/2,j,j2,j4,j5,j7,j10,j12,j13,Md387M9,dotmapMd387M9R2)
	#call replace(i14,j14+j5/2-j7/2+j8/2-j9/2,j,j5,j7,j8,j9,j14,Md387M9,dotmapMd387M9R3)
	if (count(Md387M9,1)) Multiply replace_(Md387M9,Md308,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd308 "1"
#endif

#if `$M10'
* map dots to p0.p3,p0.p6,p0.p7,p1.p3,p1.p6 and change topology to d305
	if (count(Md387M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i10,`Q2'-2*j12+j7,j,j7,j12,Md387M10,dotmapMd387M10R1)
	if (count(Md387M10,1)) Multiply replace_(Md387M10,Md305,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd305 "1"
#endif
.sort:reduce d387;
#endif
#endprocedure

#procedure Reduced387()
	#call Prepared387()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd387'
		#call MtoZ(Md387,Zd387,i,14)
		#call Reduce(d387)
		#call ZtoM(Zd387,Md387,i,14)
#else
		#if `USETURBO'
			#call TurboMd387()
		#endif
		#call triangleS(Md387,i4,i5,i6,i7,i8,i12,i14,0,0)
#endif
		#call Prepared387()
	#endif
#endprocedure
*--#] reduce-d387 : 
*--#[ reduce-d386 :
#procedure Prepared386()
* Topology: 0-1 1-6 1-3 1-7 3-4 3-5 4-5 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p2,p0.p4,p0.p9,p4.p9
* Apply automorphisms
if (match(Md386*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd386 automorphism;

#call CheckRemovedPropagators(d386,10,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p3,p0.p2,p1.p2,p2.p3 and change topology to d326
	if (count(Md386M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i1,`Q2'+j1-2*j10-2*j12+2*j13+j2,j,j1,j2,j10,j12,j13,Md386M1,dotmapMd386M1R1)
	#call replace(i13,`Q2'/2-j12-j6/2+j9/2,j,j6,j9,j12,Md386M1,dotmapMd386M1R2)
	#call replace(i14,j11-j14-j3/2+j5/2-j6/2,j,j3,j5,j6,j11,j14,Md386M1,dotmapMd386M1R3)
	if (count(Md386M1,1)) Multiply replace_(Md386M1,Md326,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd326 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p6,p0.p7,p1.p6,p3.p7 and change topology to d381
	if (count(Md386M2,1)) Multiply replace_(i1,j7,i3,j9,i4,j4,i5,j5,i6,j3,i7,j1,i8,j6,i9,j8,i10,j2);
	#call replace(i2,j1+2*j13+j6,j,j1,j6,j13,Md386M2,dotmapMd386M2R1)
	#call replace(i11,`Q2'/2+j1/2+j11-j2/2,j,j1,j2,j11,Md386M2,dotmapMd386M2R2)
	#call replace(i12,`Q2'/2+j1/2+j10-j2/2,j,j1,j2,j10,Md386M2,dotmapMd386M2R3)
	#call replace(i13,j11+j12,j,j11,j12,Md386M2,dotmapMd386M2R4)
	#call replace(i14,j11+j12+j14-j2/2+j3/2-j5/2+j6/2-j8/2+j9/2,j,j2,j3,j5,j6,j8,j9,j11,j12,j14,Md386M2,dotmapMd386M2R5)
	if (count(Md386M2,1)) Multiply replace_(Md386M2,Md381,<j1,i1>,...,<j9,i9>,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd381 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p3,p0.p1,p1.p2,p1.p3 and change topology to d333
	if (count(Md386M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11);
	#call replace(i3,`Q2'+j1-2*j10-2*j12+2*j13+j2,j,j1,j2,j10,j12,j13,Md386M3,dotmapMd386M3R1)
	#call replace(i13,-`Q2'/2+j10+j12-j6/2+j9/2,j,j6,j9,j10,j12,Md386M3,dotmapMd386M3R2)
	#call replace(i14,j14+j2/2-j4/2+j5/2-j6/2,j,j2,j4,j5,j6,j14,Md386M3,dotmapMd386M3R3)
	if (count(Md386M3,1)) Multiply replace_(Md386M3,Md333,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd333 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p2,p0.p4,p1.p4,p2.p4 and change topology to d334
	if (count(Md386M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j11);
	#call replace(i4,-2*j14+j2+j4,j,j2,j4,j14,Md386M4,dotmapMd386M4R1)
	#call replace(i12,j11-j12,j,j11,j12,Md386M4,dotmapMd386M4R2)
	#call replace(i13,-`Q2'/2+j10+j11-j6/2+j9/2,j,j6,j9,j10,j11,Md386M4,dotmapMd386M4R3)
	#call replace(i14,-`Q2'/2-j1/2+j10+j11-j13+j3/2-j4/2+j5/2-j6/2,j,j1,j3,j4,j5,j6,j10,j11,j13,Md386M4,dotmapMd386M4R4)
	if (count(Md386M4,1)) Multiply replace_(Md386M4,Md334,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd334 "1"
#endif

#if `$M5'
* map dots to p0.p1,p0.p2,p0.p4,p1.p4,p2.p4 and change topology to d327
	if (count(Md386M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i11,j11,i12,j12);
	#call replace(i5,-2*j14+j2+j4,j,j2,j4,j14,Md386M5,dotmapMd386M5R1)
	#call replace(i13,-`Q2'/2+j10+j11-j6/2+j9/2,j,j6,j9,j10,j11,Md386M5,dotmapMd386M5R2)
	#call replace(i14,j13+j14-j4/2+j5/2-j6/2,j,j4,j5,j6,j13,j14,Md386M5,dotmapMd386M5R3)
	if (count(Md386M5,1)) Multiply replace_(Md386M5,Md327,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd327 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p0.p4,p1.p4,p2.p4 and change topology to d332
	if (count(Md386M6,1)) Multiply replace_(i1,j1,i2,j7,i3,j8,i4,j4,i5,j5,i7,j6,i8,j2,i9,j3,i10,j9,i12,j12);
	#call replace(i6,2*j14+j5+j6-j7,j,j5,j6,j7,j14,Md386M6,dotmapMd386M6R1)
	#call replace(i11,`Q2'/2+j11+j6/2-j9/2,j,j6,j9,j11,Md386M6,dotmapMd386M6R2)
	#call replace(i13,j10+j11,j,j10,j11,Md386M6,dotmapMd386M6R3)
	#call replace(i14,j13+j14,j,j13,j14,Md386M6,dotmapMd386M6R4)
	if (count(Md386M6,1)) Multiply replace_(Md386M6,Md332,<j1,i1>,...,<j9,i9>,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd332 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p4,p0.p6,p0.p8,p4.p8 and change topology to d339
	if (count(Md386M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j9,i11,j10,i12,j11,i13,j13,i14,j14);
	#call replace(i7,-`Q2'+2*j11-2*j12+j9,j,j9,j11,j12,Md386M7,dotmapMd386M7R1)
	if (count(Md386M7,1)) Multiply replace_(Md386M7,Md339,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd339 "1"
#endif

#if `$M8'
* map dots to p0.p1,p0.p2,p0.p5,p1.p2,p1.p5 and change topology to d324
	if (count(Md386M8,1)) Multiply replace_(i1,j1,i2,j7,i3,j8,i4,j5,i5,j4,i6,j3,i7,j6,i9,j2,i10,j9,i12,j12,i13,j11);
	#call replace(i8,j1-2*j13+j2,j,j1,j2,j13,Md386M8,dotmapMd386M8R1)
	#call replace(i11,`Q2'/2-j10+j11+j6/2-j9/2,j,j6,j9,j10,j11,Md386M8,dotmapMd386M8R2)
	#call replace(i14,j14+j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,j14,Md386M8,dotmapMd386M8R3)
	if (count(Md386M8,1)) Multiply replace_(Md386M8,Md324,<j1,i1>,...,<j9,i9>,j10,i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd324 "1"
#endif

#if `$M9'
* map dots to p0.p3,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d328
	if (count(Md386M9,1)) Multiply replace_(i1,j1,i2,j7,i3,j8,i4,j5,i5,j4,i6,j3,i7,j6,i8,j2,i10,j9);
	#call replace(i9,j1+2*j12+j2,j,j1,j2,j12,Md386M9,dotmapMd386M9R1)
	#call replace(i11,`Q2'/2+j1/2-j11+j12-j13+j14+j7/2-j8/2,j,j1,j7,j8,j11,j12,j13,j14,Md386M9,dotmapMd386M9R2)
	#call replace(i12,`Q2'/2+j10+j6/2-j9/2,j,j6,j9,j10,Md386M9,dotmapMd386M9R3)
	#call replace(i13,j1/2+j12-j13+j14-j6/2+j7/2-j8/2+j9/2,j,j1,j6,j7,j8,j9,j12,j13,j14,Md386M9,dotmapMd386M9R4)
	#call replace(i14,j14+j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,j14,Md386M9,dotmapMd386M9R5)
	if (count(Md386M9,1)) Multiply replace_(Md386M9,Md328,<j1,i1>,...,<j9,i9>,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd328 "1"
#endif

#if `$M10'
* map dots to p1.p4,p0.p1,p0.p2,p0.p4,p0.p6 and change topology to d336
	if (count(Md386M10,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9,i11,j12,i12,j13);
	#call replace(i10,`Q2'-2*j13+2*j14+j7,j,j7,j13,j14,Md386M10,dotmapMd386M10R1)
	#call replace(i13,j11+j12-j13+j14,j,j11,j12,j13,j14,Md386M10,dotmapMd386M10R2)
	#call replace(i14,j10+j2/2-j5/2+j6/2-j7/2,j,j2,j5,j6,j7,j10,Md386M10,dotmapMd386M10R3)
	if (count(Md386M10,1)) Multiply replace_(Md386M10,Md336,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd336 "1"
#endif
.sort:reduce d386;
#endif
#endprocedure

#procedure Reduced386()
	#call Prepared386()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd386'
		#call MtoZ(Md386,Zd386,i,14)
		#call Reduce(d386)
		#call ZtoM(Zd386,Md386,i,14)
#else
		#if `USETURBO'
			#call TurboMd386()
		#endif
		#call triangleS(Md386,i1,i3,i9,i8,i10,i13,i14,0,0)
#endif
		#call Prepared386()
	#endif
#endprocedure
*--#] reduce-d386 : 
#call ReduceEdge(10,\
d427,d426,d425,d424,d423,d422,d421,d420,d419,d418,d417,d416,d415,d414,d413,d412\
,d411,d410,d409,d408,d407,d406,d405,d404,d403,d402,d401,d400,d399,d398,d397,\
d396,no6,d394,d393,d392,d391,d390,d389,d388,d387,d386\
)
*--#] 10 edges : 
*--#[ 9 edges :
*--#[ reduce-d385 :
#procedure Insertiond385()
* merge propagators with same momentum, and repeated dots
	if (count(Md385b,1)) Multiply replace_(Md385b,Md385c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md385c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j6/2+j8/2+j9,j,j6,j8,j9,Md385c,dotmapMd385cR1)
	#call replace(i11,-`Q2'/2+j2/2+j5/2-j6/2-j7/2+j8/2+j9,j,j2,j5,j6,j7,j8,j9,Md385c,dotmapMd385cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md385c,dotmapMd385cR3)
	#call replace(i13,j3/2-j5/2-j6/2,j,j3,j5,j6,Md385c,dotmapMd385cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md385c,dotmapMd385cR5)
	#call replace(i15,`Q2'/2+j6/2-j8/2,j,j6,j8,Md385c,dotmapMd385cR6)
	#call replace(i16,j1/2+j3/2-j4/2,j,j1,j3,j4,Md385c,dotmapMd385cR7)
	#call replace(i17,`Q2'/2+j1/2-j2/2+j3/2-j4/2-j5/2+j6/2+j7/2-j8/2-j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Md385c,dotmapMd385cR8)
	#call replace(i18,j3/2-j5/2+j6/2,j,j3,j5,j6,Md385c,dotmapMd385cR9)
	if (count(Md385c,1)) Multiply replace_(Md385c,Md385d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar5
	if (count(Md385d,1)) Multiply replace_(i1,j3,i2,j4,i3,j8,i4,j2,i5,j5,i6,j6,i7,j7,i8,j1);
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md385d,dotmapMd385dR1)
	if (count(Md385d,1)) Multiply replace_(Md385d,Mnostar5,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared385()
* Topology: 0-1 1-2 1-5 2-3 2-7 3-5 3-5 3-8 5-7 7-8 8-9
* Dots: p0.p3,p0.p5,p1.p5,p3.p5,p5.p7
* Apply automorphisms
if (match(Md385*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n2,$n5,$n6,$n4,$n8,$n7,$n9)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n2,$n6,$n5,$n4,$n8,$n7,$n9)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i9,i2,i7,i3,i8,i5,i6,i6,i5,i7,i2,i8,i3,i9,i1);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply replace_(i1,i9,i2,i7,i3,i8,i7,i2,i8,i3,i9,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd385 automorphism;

#call CheckRemovedPropagators(d385,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d385;
#endif
#endprocedure

#procedure Reduced385()
	#call Prepared385()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd385'
		#call MtoZ(Md385,Zd385,i,14)
		#call Reduce(d385)
		#call ZtoM(Zd385,Md385,i,14)
		#call Prepared385()
#else
		#if `USETURBO'
			#call TurboMd385()
		#endif
		#call insertionS(Md385,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i3,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md385b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond385()
#endif
	#endif
#endprocedure
*--#] reduce-d385 : 
*--#[ reduce-d384 :
#procedure Prepared384()
* Topology: 0-1 4-7 1-4 3-4 2-7 6-7 1-2 1-6 2-3 3-6 7-9
* Dots: p0.p1,p0.p3,p0.p4,p0.p8,p1.p8
* Apply automorphisms
if (match(Md384*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n11,$n10,$n11,$n10,$n8,$n3,$n6,$n2,$n4,$n1,$n9,$n7,$n5)
	#call hash(1,$n14,$n13,$n12,$n13,$n12,$n3,$n9,$n2,$n7,$n1,$n5,$n8,$n6,$n4)
	#call hash(2,$n14,$n11,$n12,$n11,$n10,$n8,$n3,$n4,$n1,$n6,$n2,$n9,$n5,$n7)
	#call hash(3,$n14,$n13,$n12,$n13,$n10,$n3,$n9,$n1,$n5,$n2,$n7,$n8,$n4,$n6)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n6,$n7,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n11,$n10,$n13,$n12,$n9,$n3,$n7,$n2,$n5,$n1,$n8,$n6,$n4)
endif;
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n4,$n5,$n6,$n7,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n12==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n6,$n3,$n1,$n2)
	#call hash(9,$n14,$n11,$n12,$n13,$n10,$n9,$n3,$n5,$n1,$n7,$n2,$n8,$n4,$n6)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n3,$n8,$n2,$n6,$n1,$n4,$n9,$n7,$n5)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n3,$n8,$n1,$n4,$n2,$n6,$n9,$n5,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n13+$n14)*replace_(i1,i5,i2,i7,i3,i9,i4,i1,i5,i4,i6,i2,i7,i6,i8,i3,i9,i8,i12,i10,i13,i11);
elseif ($bestiso == 1); Multiply sign_($n11+$n13+$n14)*replace_(i1,i4,i2,i6,i3,i8,i4,i5,i5,i1,i6,i7,i7,i2,i8,i9,i9,i3,i10,i12,i11,i13);
elseif ($bestiso == 2); Multiply sign_($n11)*replace_(i1,i7,i2,i5,i3,i9,i4,i2,i5,i6,i6,i1,i7,i4,i8,i3,i9,i8,i13,i11);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i2,i4,i3,i8,i4,i7,i5,i2,i6,i5,i7,i1,i8,i9,i9,i3,i11,i13);
elseif ($bestiso == 4); Multiply sign_($n13+$n14)*replace_(i4,i5,i5,i4,i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 6); Multiply sign_($n11+$n13+$n14)*replace_(i1,i4,i2,i6,i3,i8,i4,i1,i6,i2,i8,i3,i10,i12,i11,i13,i12,i10,i13,i11);
elseif ($bestiso == 7); Multiply sign_($n11)*replace_(i1,i2,i2,i1,i4,i7,i5,i6,i6,i5,i7,i4,i8,i9,i9,i8);
elseif ($bestiso == 8); Multiply sign_($n11+$n13+$n14)*replace_(i1,i2,i2,i1,i4,i6,i5,i7,i6,i4,i7,i5);
elseif ($bestiso == 9); Multiply replace_(i1,i6,i2,i4,i3,i8,i4,i2,i5,i7,i6,i1,i7,i5,i8,i3,i11,i13,i13,i11);
elseif ($bestiso == 10); Multiply replace_(i1,i5,i2,i7,i3,i9,i5,i1,i7,i2,i9,i3);
elseif ($bestiso == 11); Multiply sign_($n11+$n13+$n14)*replace_(i1,i7,i2,i5,i3,i9,i4,i6,i5,i2,i6,i4,i7,i1,i9,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd384 automorphism;

#call CheckRemovedPropagators(d384,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md384M1,1)) Multiply replace_(i2,j1,i3,j6,i4,j4,i5,j5,i6,j2,i7,j3,i8,j7,i9,j8,i12,j13);
	#call replace(i1,2*`Q2'-j1+2*j10-2*j11-2*j12-2*j13+2*j14+j2+j3+j4+j5+j6-j7-j8-2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M1,dotmapMd384M1R1)
	#call replace(i10,`Q2'-j13+j14,j,j13,j14,Md384M1,dotmapMd384M1R2)
	#call replace(i11,j11+j12-j13+j14,j,j11,j12,j13,j14,Md384M1,dotmapMd384M1R3)
	#call replace(i13,j11-j13,j,j11,j13,Md384M1,dotmapMd384M1R4)
	#call replace(i14,`Q2'/2-j1/2+j10-j12-j13+j3/2+j4/2+j6/2-j8/2,j,j1,j3,j4,j6,j8,j10,j12,j13,Md384M1,dotmapMd384M1R5)
	if (count(Md384M1,1)) Multiply replace_(Md384M1,Md209,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M2'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md384M2,1)) Multiply replace_(i1,j1,i3,j6,i4,j2,i5,j3,i6,j4,i7,j5,i8,j7,i9,j8,i12,j11);
	#call replace(i2,2*`Q2'-j1+2*j10-2*j11-2*j12-2*j13-2*j14+j2+j3+j4+j5+j6-j7-j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M2,dotmapMd384M2R1)
	#call replace(i10,`Q2'-j11-j12,j,j11,j12,Md384M2,dotmapMd384M2R2)
	#call replace(i11,-j11-j12+j13+j14,j,j11,j12,j13,j14,Md384M2,dotmapMd384M2R3)
	#call replace(i13,-j11+j13,j,j11,j13,Md384M2,dotmapMd384M2R4)
	#call replace(i14,-`Q2'/2+j1/2-j10+j12+j13-j3/2-j4/2+j7/2,j,j1,j3,j4,j7,j10,j12,j13,Md384M2,dotmapMd384M2R5)
	if (count(Md384M2,1)) Multiply replace_(Md384M2,Md209,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3 and change topology to cross
	if (count(Md384M3,1)) Multiply replace_(i1,j5,i2,j6,i4,j1,i5,j3,i6,j2,i7,j4,i8,j7,i9,j8,i12,j9);
	#call replace(i3,-2*`Q2'-j1+2*j10+2*j11+2*j12-2*j13-2*j14-j2-j3-j4+j5+j6+j7+j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M3,dotmapMd384M3R1)
	#call replace(i10,`Q2'-j11-j9,j,j9,j11,Md384M3,dotmapMd384M3R2)
	#call replace(i11,j10-j11+j12-j9,j,j9,j10,j11,j12,Md384M3,dotmapMd384M3R3)
	#call replace(i13,j10-j9,j,j9,j10,Md384M3,dotmapMd384M3R4)
	#call replace(i14,-`Q2'/2+j10+j11-j14-j2/2-j3/2+j5/2+j7/2,j,j2,j3,j5,j7,j10,j11,j14,Md384M3,dotmapMd384M3R5)
	if (count(Md384M3,1)) Multiply replace_(Md384M3,Mcross,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOcross "1"
#endif

#if `$M4'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md384M4,1)) Multiply replace_(i1,j4,i2,j2,i3,j7,i5,j5,i6,j1,i7,j3,i8,j6,i9,j8,i10,-j13);
	#call replace(i4,2*`Q2'-j1-2*j10-2*j11-2*j12+2*j13+2*j14+j2+j3+j4+j5+j6-j7-j8-2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M4,dotmapMd384M4R1)
	#call replace(i11,-j11-j13,j,j11,j13,Md384M4,dotmapMd384M4R2)
	#call replace(i12,`Q2'+j13+j14,j,j13,j14,Md384M4,dotmapMd384M4R3)
	#call replace(i13,-j11-j12-j13-j14,j,j11,j12,j13,j14,Md384M4,dotmapMd384M4R4)
	#call replace(i14,`Q2'/2-j1/2-j11-j12+j3/2+j4/2+j6/2-j8/2-j9,j,j1,j3,j4,j6,j8,j9,j11,j12,Md384M4,dotmapMd384M4R5)
	if (count(Md384M4,1)) Multiply replace_(Md384M4,Md209,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M5'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md384M5,1)) Multiply replace_(i1,j5,i2,j3,i3,j8,i4,j4,i6,j2,i7,j1,i8,j7,i9,j6,i10,j14,i12,j13);
	#call replace(i5,2*`Q2'-j1+2*j10-2*j11-2*j12-2*j13-2*j14+j2+j3+j4+j5+j6-j7-j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M5,dotmapMd384M5R1)
	#call replace(i11,-j12+j14,j,j12,j14,Md384M5,dotmapMd384M5R2)
	#call replace(i13,j11-j13,j,j11,j13,Md384M5,dotmapMd384M5R3)
	#call replace(i14,-`Q2'/2+j1/2-j10+j11+j12-j2/2-j3/2-j6/2+j7/2+j8/2,j,j1,j2,j3,j6,j7,j8,j10,j11,j12,Md384M5,dotmapMd384M5R4)
	if (count(Md384M5,1)) Multiply replace_(Md384M5,Md209,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M6'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md384M6,1)) Multiply replace_(i1,j2,i2,j4,i3,j7,i4,j1,i5,j3,i7,j5,i8,j6,i9,j8,i10,j11);
	#call replace(i6,2*`Q2'-j1+2*j10-2*j11-2*j12-2*j13-2*j14+j2+j3+j4+j5+j6-j7-j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M6,dotmapMd384M6R1)
	#call replace(i11,j11-j13,j,j11,j13,Md384M6,dotmapMd384M6R2)
	#call replace(i12,`Q2'-j11-j12,j,j11,j12,Md384M6,dotmapMd384M6R3)
	#call replace(i13,j11+j12-j13-j14,j,j11,j12,j13,j14,Md384M6,dotmapMd384M6R4)
	#call replace(i14,-`Q2'/2+j1/2+j11+j12-j3/2-j4/2+j7/2-j9,j,j1,j3,j4,j7,j9,j11,j12,Md384M6,dotmapMd384M6R5)
	if (count(Md384M6,1)) Multiply replace_(Md384M6,Md209,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M7'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md384M7,1)) Multiply replace_(i1,j3,i2,j5,i3,j8,i4,j2,i5,j1,i6,j4,i8,j7,i9,j6,i10,j12,i12,j11);
	#call replace(i7,2*`Q2'-j1+2*j10-2*j11-2*j12-2*j13-2*j14+j2+j3+j4+j5+j6-j7-j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M7,dotmapMd384M7R1)
	#call replace(i11,j12-j14,j,j12,j14,Md384M7,dotmapMd384M7R2)
	#call replace(i13,-j11+j13,j,j11,j13,Md384M7,dotmapMd384M7R3)
	#call replace(i14,`Q2'/2-j1/2+j10-j11-j12+j2/2+j3/2,j,j1,j2,j3,j10,j11,j12,Md384M7,dotmapMd384M7R4)
	if (count(Md384M7,1)) Multiply replace_(Md384M7,Md209,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M8'
* map dots to p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3 and change topology to cross
	if (count(Md384M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j7,i4,j5,i5,j3,i6,j6,i7,j4,i9,j8,i10,j9);
	#call replace(i8,-2*`Q2'-j1+2*j10+2*j11+2*j12-2*j13-2*j14-j2-j3-j4+j5+j6+j7+j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M8,dotmapMd384M8R1)
	#call replace(i11,-j10+j9,j,j9,j10,Md384M8,dotmapMd384M8R2)
	#call replace(i12,`Q2'-j11-j9,j,j9,j11,Md384M8,dotmapMd384M8R3)
	#call replace(i13,-j10+j11-j12+j9,j,j9,j10,j11,j12,Md384M8,dotmapMd384M8R4)
	#call replace(i14,-`Q2'/2+j11-j13-j2/2-j3/2+j5/2+j7/2+j9,j,j2,j3,j5,j7,j9,j11,j13,Md384M8,dotmapMd384M8R5)
	if (count(Md384M8,1)) Multiply replace_(Md384M8,Mcross,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOcross "1"
#endif

#if `$M9'
* map dots to p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3 and change topology to cross
	if (count(Md384M9,1)) Multiply replace_(i1,j3,i2,j4,i3,j8,i4,j1,i5,j5,i6,j2,i7,j6,i8,j7,i10,j11,i12,j9);
	#call replace(i9,-2*`Q2'-j1+2*j10+2*j11+2*j12-2*j13-2*j14-j2-j3-j4+j5+j6+j7+j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,Md384M9,dotmapMd384M9R1)
	#call replace(i11,j11-j12,j,j11,j12,Md384M9,dotmapMd384M9R2)
	#call replace(i13,j10-j9,j,j9,j10,Md384M9,dotmapMd384M9R3)
	#call replace(i14,`Q2'/2+j1/2-j11+j14+j3/2-j5/2-j9,j,j1,j3,j5,j9,j11,j14,Md384M9,dotmapMd384M9R4)
	if (count(Md384M9,1)) Multiply replace_(Md384M9,Mcross,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOcross "1"
#endif
.sort:reduce d384;
#endif
#endprocedure

#procedure Reduced384()
	#call Prepared384()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd384'
		#call MtoZ(Md384,Zd384,i,14)
		#call Reduce(d384)
		#call ZtoM(Zd384,Md384,i,14)
#else
		#if `USETURBO'
			#call TurboMd384()
		#endif
		#call diamondS(Md384,3,0,i6,i2,i7,i8,i3,i9,i4,i1,i5,i11,i13,i14,0,0,0)
#endif
		#call Prepared384()
	#endif
#endprocedure
*--#] reduce-d384 : 
*--#[ reduce-d383 :
#procedure Insertiond383()
* merge propagators with same momentum, and repeated dots
	if (count(Md383b,1)) Multiply replace_(Md383b,Md383c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md383c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j2/2,j,j1,j2,Md383c,dotmapMd383cR1)
	#call replace(i11,`Q2'/2-j1/2+j2/2,j,j1,j2,Md383c,dotmapMd383cR2)
	#call replace(i12,`Q2'/2+j3/2-j4/2,j,j3,j4,Md383c,dotmapMd383cR3)
	#call replace(i13,-`Q2'/2-j1/2+j2/2-j3/2+j4/2-j5/2+j6/2+j7/2-j8/2+j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Md383c,dotmapMd383cR4)
	#call replace(i14,`Q2'/2-j1/2-j2/2,j,j1,j2,Md383c,dotmapMd383cR5)
	#call replace(i15,-j1/2-j5/2+j6/2,j,j1,j5,j6,Md383c,dotmapMd383cR6)
	#call replace(i16,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md383c,dotmapMd383cR7)
	#call replace(i17,-`Q2'/2+j2/2-j3/2+j4/2+j7/2-j8/2+j9,j,j2,j3,j4,j7,j8,j9,Md383c,dotmapMd383cR8)
	#call replace(i18,-j3/2-j5/2+j7/2,j,j3,j5,j7,Md383c,dotmapMd383cR9)
	if (count(Md383c,1)) Multiply replace_(Md383c,Md383d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar0
	if (count(Md383d,1)) Multiply replace_(i1,j4,i2,j3,i3,j1,i4,j6,i5,j7,i6,j5,i7,j2,i8,j8);
	#call replace(i9,-j2/2-j3/2+j4/2-j5/2+j7/2+j8/2-j9,j,j2,j3,j4,j5,j7,j8,j9,Md383d,dotmapMd383dR1)
	if (count(Md383d,1)) Multiply replace_(Md383d,Mnostar0,<j1,i1>,...,<j8,i8>,j9,-i9);
	#redefine HASTOPOnostar0 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared383()
* Topology: 0-1 1-7 1-5 1-3 2-7 6-7 2-5 5-6 2-3 3-6 7-9
* Dots: p2.p4,p0.p2,p0.p3,p0.p4,p0.p6
* Apply automorphisms
if (match(Md383*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n12,$n12,$n13,$n10,$n7,$n9,$n6,$n8,$n2,$n3,$n5,$n4,$n1)
	#call hash(1,$n14,$n11,$n13,$n11,$n10,$n8,$n6,$n9,$n7,$n3,$n2,$n4,$n5,$n1)
endif;
if (($n10==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n6,$n7,$n4,$n5,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n11,$n12,$n10,$n6,$n7,$n8,$n9,$n4,$n5,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n11,$n12,$n10,$n7,$n6,$n9,$n8,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(6,$n14,$n12,$n13,$n11,$n10,$n6,$n8,$n7,$n9,$n2,$n3,$n4,$n5,$n1)
endif;
if (($n12==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n11,$n12,$n13,$n10,$n9,$n7,$n8,$n6,$n3,$n2,$n5,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i4,i3,i5,i4,i3,i5,i2,i6,i8,i7,i6,i8,i9,i9,i7,i11,i13,i13,i12);
elseif ($bestiso == 1); Multiply sign_($n14)*replace_(i2,i5,i3,i4,i4,i2,i5,i3,i6,i7,i7,i9,i8,i6,i9,i8,i12,i13,i13,i11);
elseif ($bestiso == 2); Multiply sign_($n14)*replace_(i4,i5,i5,i4,i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 3); Multiply sign_($n14)*replace_(i2,i3,i3,i2,i4,i5,i5,i4,i6,i9,i7,i8,i8,i7,i9,i6,i11,i12,i12,i11);
elseif ($bestiso == 5); Multiply replace_(i2,i3,i3,i2,i6,i8,i7,i9,i8,i6,i9,i7,i11,i12,i12,i11);
elseif ($bestiso == 6); Multiply sign_($n14)*replace_(i2,i5,i3,i4,i4,i3,i5,i2,i6,i9,i9,i6,i12,i13,i13,i12);
elseif ($bestiso == 7); Multiply replace_(i2,i4,i3,i5,i4,i2,i5,i3,i7,i8,i8,i7,i11,i13,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd383 automorphism;

#call CheckRemovedPropagators(d383,9,8,2,3,4,5,6,7,8,9,1)
#if `$DOACTION' == 0
.sort:reduce d383;
#endif
#endprocedure

#procedure Reduced383()
	#call Prepared383()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd383'
		#call MtoZ(Md383,Zd383,i,14)
		#call Reduce(d383)
		#call ZtoM(Zd383,Md383,i,14)
		#call Prepared383()
#else
		#if `USETURBO'
			#call TurboMd383()
		#endif
		#call MtoZ(Md383,Zd383,i,14)
		#call carpet(Zd383,0,1,0,0,0,3,11,2,3,4,6)
		#call ZtoM(Zd383b,Md383b,i,19)
		#call Insertiond383()
#endif
	#endif
#endprocedure
*--#] reduce-d383 : 
*--#[ reduce-bubu :
#procedure Preparebubu()
* Topology: 0-4 4-5 2-4 3-4 5-6 2-5 3-5 1-6 1-2 1-3 6-9
* Dots: p0.p2,p0.p8,p2.p3,p2.p9,p3.p8
* Apply automorphisms
if (match(Mbubu*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n13,$n14,$n12,$n11,$n10,$n8,$n9,$n7,$n5,$n6,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2,i5,i6,i6,i5,i8,i9,i9,i8,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zbubu automorphism;

#call CheckRemovedPropagators(bubu,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3 and change topology to d212
	if (count(MbubuM1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j12,i12,j13);
	#call replace(i1,`Q2'+j1+2*j12+2*j13+j2+2*j9,j,j1,j2,j9,j12,j13,MbubuM1,dotmapMbubuM1R1)
	#call replace(i11,-`Q2'/2-j10+j3/2-j6/2-j9,j,j3,j6,j9,j10,MbubuM1,dotmapMbubuM1R2)
	#call replace(i13,-j1/2-j12+j14+j4/2-j7/2,j,j1,j4,j7,j12,j14,MbubuM1,dotmapMbubuM1R3)
	#call replace(i14,j11-j2/2+j5/2-j8/2-j9,j,j2,j5,j8,j9,j11,MbubuM1,dotmapMbubuM1R4)
	if (count(MbubuM1,1)) Multiply replace_(MbubuM1,Md212,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd212 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d206
	if (count(MbubuM2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i2,`Q2'+j1-2*j11+2*j12+j2-2*j9,j,j1,j2,j9,j11,j12,MbubuM2,dotmapMbubuM2R1)
	#call replace(i10,-`Q2'+j11+j9,j,j9,j11,MbubuM2,dotmapMbubuM2R2)
	#call replace(i11,-`Q2'/2-j10+j3/2-j6/2+j9,j,j3,j6,j9,j10,MbubuM2,dotmapMbubuM2R3)
	#call replace(i12,-j12-j2+j9,j,j2,j9,j12,MbubuM2,dotmapMbubuM2R4)
	#call replace(i13,-j10-j12+j14-j2/2+j5/2-j8/2+j9,j,j2,j5,j8,j9,j10,j12,j14,MbubuM2,dotmapMbubuM2R5)
	#call replace(i14,-j1/2+j10+j13-j14-j2/2-j3/2+j4/2+j6/2-j7/2,j,j1,j2,j3,j4,j6,j7,j10,j13,j14,MbubuM2,dotmapMbubuM2R6)
	if (count(MbubuM2,1)) Multiply replace_(MbubuM2,Md206,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd206 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d206
	if (count(MbubuM3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j5,i6,j4,i7,j6,i8,j8,i9,j7,i10,j9);
	#call replace(i3,`Q2'+j1-2*j11-2*j12+j2+2*j9,j,j1,j2,j9,j11,j12,MbubuM3,dotmapMbubuM3R1)
	#call replace(i11,j10+j9,j,j9,j10,MbubuM3,dotmapMbubuM3R2)
	#call replace(i12,j12-j2-j9,j,j2,j9,j12,MbubuM3,dotmapMbubuM3R3)
	#call replace(i13,-j1/2+j10+j13-j14-j2/2-j3/2+j4/2+j6/2-j7/2,j,j1,j2,j3,j4,j6,j7,j10,j13,j14,MbubuM3,dotmapMbubuM3R4)
	#call replace(i14,-j10+j12+j14-j2/2+j5/2-j8/2-j9,j,j2,j5,j8,j9,j10,j12,j14,MbubuM3,dotmapMbubuM3R5)
	if (count(MbubuM3,1)) Multiply replace_(MbubuM3,Md206,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd206 "1"
#endif

#if `$M4'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(MbubuM4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j11);
	#call replace(i4,`Q2'+2*j11+2*j12+2*j13+2*j14+j6,j,j6,j11,j12,j13,j14,MbubuM4,dotmapMbubuM4R1)
	#call replace(i11,j11+j13,j,j11,j13,MbubuM4,dotmapMbubuM4R2)
	#call replace(i12,-`Q2'/2+j1/2-j11-j12-j2/2-j3/2,j,j1,j2,j3,j11,j12,MbubuM4,dotmapMbubuM4R3)
	#call replace(i13,-`Q2'/2+j1/2-j11-j12-j2/2-j3/2+j9,j,j1,j2,j3,j9,j11,j12,MbubuM4,dotmapMbubuM4R4)
	#call replace(i14,-`Q2'/2+j1/2+j10-j11-j12-j2/2-j3/2,j,j1,j2,j3,j10,j11,j12,MbubuM4,dotmapMbubuM4R5)
	if (count(MbubuM4,1)) Multiply replace_(MbubuM4,Md209,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd209 "1"
#endif

#if `$M5'
* map dots to p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d213
	if (count(MbubuM5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i5,`Q2'+2*j1+2*j10+2*j11+2*j12+2*j13+2*j14-j2+j3+j4+j5-j6+j7-j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,MbubuM5,dotmapMbubuM5R1)
	#call replace(i10,-`Q2'/2+j1/2+j12-j2/2+j3/2,j,j1,j2,j3,j12,MbubuM5,dotmapMbubuM5R2)
	#call replace(i11,j1/2+j11+j12-j2/2+j3/2+j4/2-j6/2+j9,j,j1,j2,j3,j4,j6,j9,j11,j12,MbubuM5,dotmapMbubuM5R3)
	#call replace(i12,`Q2'/2+j1/2+j11-j2/2-j3/2,j,j1,j2,j3,j11,MbubuM5,dotmapMbubuM5R4)
	#call replace(i13,`Q2'/2+j1/2+j11+j14-j2/2+j5/2-j8/2+j9,j,j1,j2,j5,j8,j9,j11,j14,MbubuM5,dotmapMbubuM5R5)
	#call replace(i14,`Q2'/2+j1/2+j10+j11+j12-j2/2+j5/2-j8/2,j,j1,j2,j5,j8,j10,j11,j12,MbubuM5,dotmapMbubuM5R6)
	if (count(MbubuM5,1)) Multiply replace_(MbubuM5,Md213,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd213 "1"
#endif

#if `$M6'
* map dots to p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d213
	if (count(MbubuM6,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5,i7,j6,i8,j8,i9,j7);
	#call replace(i6,`Q2'+2*j1+2*j10+2*j11+2*j12+2*j13-2*j14-j2+j3+j4+j5-j6+j7-j8-2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,j10,j11,j12,j13,j14,MbubuM6,dotmapMbubuM6R1)
	#call replace(i10,-`Q2'/2-j1/2-j11-j12+j2/2-j3/2,j,j1,j2,j3,j11,j12,MbubuM6,dotmapMbubuM6R2)
	#call replace(i11,-`Q2'/2-j1/2-j11-j12+j2/2-j3/2+j9,j,j1,j2,j3,j9,j11,j12,MbubuM6,dotmapMbubuM6R3)
	#call replace(i12,`Q2'/2+j1/2+j11-j2/2-j3/2,j,j1,j2,j3,j11,MbubuM6,dotmapMbubuM6R4)
	#call replace(i13,`Q2'/2+j1/2+j10+j11+j12-j2/2+j5/2-j8/2,j,j1,j2,j5,j8,j10,j11,j12,MbubuM6,dotmapMbubuM6R5)
	#call replace(i14,`Q2'/2+j1/2+j11-j14-j2/2+j5/2-j8/2-j9,j,j1,j2,j5,j8,j9,j11,j14,MbubuM6,dotmapMbubuM6R6)
	if (count(MbubuM6,1)) Multiply replace_(MbubuM6,Md213,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd213 "1"
#endif

#if `$M7'
* map dots to p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3 and change topology to cross
	if (count(MbubuM7,1)) Multiply replace_(i1,j6,i2,j2,i3,j4,i4,j5,i5,j7,i6,j8,i8,j1,i9,j3,i10,j10,i11,j9,i13,j14,i14,j13);
	#call replace(i7,-`Q2'-2*j11+j5-2*j9,j,j5,j9,j11,MbubuM7,dotmapMbubuM7R1)
	#call replace(i12,-`Q2'/2-j10-j12-j2/2-j4/2+j6/2,j,j2,j4,j6,j10,j12,MbubuM7,dotmapMbubuM7R2)
	if (count(MbubuM7,1)) Multiply replace_(MbubuM7,Mcross,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOcross "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(MbubuM8,1)) Multiply replace_(i1,j2,i2,j4,i3,j5,i4,j1,i5,j8,i6,j6,i7,j3,i9,j7,i10,j10);
	#call replace(i8,-`Q2'-2*j10+2*j11-2*j13+2*j14-j2-j6+j7+j8+2*j9,j,j2,j6,j7,j8,j9,j10,j11,j13,j14,MbubuM8,dotmapMbubuM8R1)
	#call replace(i11,`Q2'/2+j1/2+j10-j11-j3/2-j9,j,j1,j3,j9,j10,j11,MbubuM8,dotmapMbubuM8R2)
	#call replace(i12,`Q2'/2+j2/2-j4/2-j5/2-j9,j,j2,j4,j5,j9,MbubuM8,dotmapMbubuM8R3)
	#call replace(i13,`Q2'/2-j11+j13+j2/2-j4/2+j6/2-j7/2-j9,j,j2,j4,j6,j7,j9,j11,j13,MbubuM8,dotmapMbubuM8R4)
	#call replace(i14,`Q2'/2-j1/2+j10+j12-j14+j3/2-j5/2+j6/2-j7/2-j9,j,j1,j3,j5,j6,j7,j9,j10,j12,j14,MbubuM8,dotmapMbubuM8R5)
	if (count(MbubuM8,1)) Multiply replace_(MbubuM8,Mbebe,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPObebe "1"
#endif

#if `$M9'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(MbubuM9,1)) Multiply replace_(i1,j2,i2,j5,i3,j4,i4,j1,i5,j6,i6,j8,i7,j3,i8,j7);
	#call replace(i9,-`Q2'-2*j10+2*j11-2*j13+2*j14-j2-j6+j7+j8+2*j9,j,j2,j6,j7,j8,j9,j10,j11,j13,j14,MbubuM9,dotmapMbubuM9R1)
	#call replace(i10,-`Q2'-j10+j9,j,j9,j10,MbubuM9,dotmapMbubuM9R2)
	#call replace(i11,-`Q2'-j10+j11+j9,j,j9,j10,j11,MbubuM9,dotmapMbubuM9R3)
	#call replace(i12,`Q2'/2+j2/2-j4/2-j5/2-j9,j,j2,j4,j5,j9,MbubuM9,dotmapMbubuM9R4)
	#call replace(i13,`Q2'/2-j1/2+j10+j12-j14+j3/2-j5/2+j6/2-j7/2-j9,j,j1,j3,j5,j6,j7,j9,j10,j12,j14,MbubuM9,dotmapMbubuM9R5)
	#call replace(i14,`Q2'/2-j11+j13+j2/2-j4/2+j6/2-j7/2-j9,j,j2,j4,j6,j7,j9,j11,j13,MbubuM9,dotmapMbubuM9R6)
	if (count(MbubuM9,1)) Multiply replace_(MbubuM9,Mbebe,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPObebe "1"
#endif
.sort:reduce bubu;
#endif
#endprocedure

#procedure Reducebubu()
	#call Preparebubu()
	#if `$DOACTION'
		#call MtoZ(Mbubu,Zbubu,i,14)
		id Zbubu(n1?,...,n14?) = Zbubu(n1,...,n14) * 2^(n10+n11+n12+n13+n14);
		.sort:convert bubu;
		#call Reduce(bubu)
		id Zbubu(n1?,...,n14?) = Zbubu(n1,...,n14) * 1/2^(n10+n11+n12+n13+n14);
		#call ZtoM(Zbubu,Mbubu,i,14)
		#call Preparebubu()
	#endif
#endprocedure
*--#] reduce-bubu : 
*--#[ reduce-d381 :
#procedure Prepared381()
* Topology: 0-1 1-2 1-6 2-3 2-4 3-4 3-5 4-5 5-6 4-6 4-9
* Dots: p0.p3,p0.p6,p0.p7,p1.p6,p3.p7
* Apply automorphisms
if (match(Md381*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n3+$n1+$n6)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n4,$n3,$n5,$n6,$n7,$n9,$n8,$n1,$n2,$n8+$n2+$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i5,i7,i7,i5,i8,i3,i9,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd381 automorphism;

#call CheckRemovedPropagators(d381,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md381M1,1)) Multiply replace_(i2,j3,i3,j2,i4,j1,i5,j4,i6,j7,i7,j6,i8,j8,i9,j5,i10,j11);
	#call replace(i1,`Q2'-2*j12+j3,j,j3,j12,Md381M1,dotmapMd381M1R1)
	#call replace(i11,j11-j13,j,j11,j13,Md381M1,dotmapMd381M1R2)
	#call replace(i12,-j11-j12+j13-j14,j,j11,j12,j13,j14,Md381M1,dotmapMd381M1R3)
	#call replace(i13,`Q2'/2-j1/2+j10-j12-j13+j2/2+j3/2,j,j1,j2,j3,j10,j12,j13,Md381M1,dotmapMd381M1R4)
	#call replace(i14,`Q2'/2-j1/2-j11-j12+j3/2+j4/2-j7/2-j9,j,j1,j3,j4,j7,j9,j11,j12,Md381M1,dotmapMd381M1R5)
	if (count(Md381M1,1)) Multiply replace_(Md381M1,Md209,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M2'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md381M2,1)) Multiply replace_(i1,j2,i3,j7,i4,j4,i5,j6,i6,j8,i7,j5,i8,j3,i9,j1,i12,j14);
	#call replace(i2,`Q2'-2*j11+j2,j,j2,j11,Md381M2,dotmapMd381M2R1)
	#call replace(i10,j11-j13,j,j11,j13,Md381M2,dotmapMd381M2R2)
	#call replace(i11,-j12-j14,j,j12,j14,Md381M2,dotmapMd381M2R3)
	#call replace(i13,`Q2'/2-j1/2-j11-j12+j2/2+j3/2-j9,j,j1,j2,j3,j9,j11,j12,Md381M2,dotmapMd381M2R4)
	#call replace(i14,`Q2'/2-j1/2+j10-j11-j12+j2/2+j3/2+j6/2-j7/2-j8/2,j,j1,j2,j3,j6,j7,j8,j10,j11,j12,Md381M2,dotmapMd381M2R5)
	if (count(Md381M2,1)) Multiply replace_(Md381M2,Md209,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d206
	if (count(Md381M3,1)) Multiply replace_(i1,j3,i2,j6,i4,j1,i5,j4,i6,j5,i7,j2,i8,j8,i9,j7,i11,j10,i12,j9);
	#call replace(i3,j1-2*j13+j3,j,j1,j3,j13,Md381M3,dotmapMd381M3R1)
	#call replace(i10,`Q2'/2-j11+j3/2-j6/2,j,j3,j6,j11,Md381M3,dotmapMd381M3R2)
	#call replace(i13,j1/2-j13+j14+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,j13,j14,Md381M3,dotmapMd381M3R3)
	#call replace(i14,-j1/2+j10-j12+j13-j14-j3/2+j4/2-j5/2+j6/2-j7/2+j8/2+j9,j,j1,j3,j4,j5,j6,j7,j8,j9,j10,j12,j13,j14,Md381M3,dotmapMd381M3R4)
	if (count(Md381M3,1)) Multiply replace_(Md381M3,Md206,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd206 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6 and change topology to d215
	if (count(Md381M4,1)) Multiply replace_(i1,j3,i2,j2,i3,j6,i5,j7,i6,j5,i7,j4,i8,j8,i9,j1,i10,j12,i12,j10);
	#call replace(i4,-2*j12+2*j14+j3+j6,j,j3,j6,j12,j14,Md381M4,dotmapMd381M4R1)
	#call replace(i11,-`Q2'/2-j10-j2/2+j3/2-j9,j,j2,j3,j9,j10,Md381M4,dotmapMd381M4R2)
	#call replace(i13,-`Q2'/2-j1/2-j10-j11+j3/2-j4/2+j5/2-j9,j,j1,j3,j4,j5,j9,j10,j11,Md381M4,dotmapMd381M4R3)
	#call replace(i14,-j13-j14-j5/2-j6/2+j7/2,j,j5,j6,j7,j13,j14,Md381M4,dotmapMd381M4R4)
	if (count(Md381M4,1)) Multiply replace_(Md381M4,Md215,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd215 "1"
#endif

#if `$M5'
* map dots to p0.p5,p0.p6,p1.p5,p0.p3,p3.p5,p3.p6 and change topology to d216
	if (count(Md381M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j12,i11,j9,i12,j10,i13,j11,i14,j14);
	#call replace(i5,-2*j13+j3+j5,j,j3,j5,j13,Md381M5,dotmapMd381M5R1)
	if (count(Md381M5,1)) Multiply replace_(Md381M5,Md216,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd216 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p4,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d217
	if (count(Md381M6,1)) Multiply replace_(i1,j2,i2,j3,i3,j8,i4,j1,i5,j5,i7,j6,i8,j4,i9,j7);
	#call replace(i6,2*j12-2*j13+j5+j8,j,j5,j8,j12,j13,Md381M6,dotmapMd381M6R1)
	#call replace(i10,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md381M6,dotmapMd381M6R2)
	#call replace(i11,`Q2'/2-j11+j2/2-j3/2-j9,j,j2,j3,j9,j11,Md381M6,dotmapMd381M6R3)
	#call replace(i12,-`Q2'/2+j10+j11-j2/2+j3/2+j9,j,j2,j3,j9,j10,j11,Md381M6,dotmapMd381M6R4)
	#call replace(i13,-j1/2-j13+j2/2+j8/2,j,j1,j2,j8,j13,Md381M6,dotmapMd381M6R5)
	#call replace(i14,j14+j4/2+j5/2-j6/2-j8/2,j,j4,j5,j6,j8,j14,Md381M6,dotmapMd381M6R6)
	if (count(Md381M6,1)) Multiply replace_(Md381M6,Md217,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd217 "1"
#endif

#if `$M7'
* map dots to p0.p5,p0.p6,p1.p5,p0.p3,p3.p5,p3.p6 and change topology to d216
	if (count(Md381M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j8,i5,j5,i6,j6,i8,j3,i9,j4,i11,j10);
	#call replace(i7,-2*j14+j3+j6,j,j3,j6,j14,Md381M7,dotmapMd381M7R1)
	#call replace(i10,j10+j9,j,j9,j10,Md381M7,dotmapMd381M7R2)
	#call replace(i12,-j10+j12,j,j10,j12,Md381M7,dotmapMd381M7R3)
	#call replace(i13,j11+j2/2+j7/2-j8/2-j9,j,j2,j7,j8,j9,j11,Md381M7,dotmapMd381M7R4)
	#call replace(i14,j13+j14+j5/2-j6/2-j7/2,j,j5,j6,j7,j13,j14,Md381M7,dotmapMd381M7R5)
	if (count(Md381M7,1)) Multiply replace_(Md381M7,Md216,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd216 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d206
	if (count(Md381M8,1)) Multiply replace_(i1,j6,i2,j3,i3,j8,i4,j7,i5,j2,i6,j5,i7,j1,i9,j4,i11,j10,i12,j11);
	#call replace(i8,j1+2*j14+j5,j,j1,j5,j14,Md381M8,dotmapMd381M8R1)
	#call replace(i10,j10+j9,j,j9,j10,Md381M8,dotmapMd381M8R2)
	#call replace(i13,j1/2+j10+j13+j14+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,j10,j13,j14,Md381M8,dotmapMd381M8R3)
	#call replace(i14,j12+j14,j,j12,j14,Md381M8,dotmapMd381M8R4)
	if (count(Md381M8,1)) Multiply replace_(Md381M8,Md206,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd206 "1"
#endif

#if `$M9'
* map dots to p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6 and change topology to d215
	if (count(Md381M9,1)) Multiply replace_(i1,j2,i2,j3,i3,j8,i4,j1,i5,j4,i6,j5,i7,j6,i8,j7,i12,j12);
	#call replace(i9,`Q2'+j1-2*j10+2*j11+2*j12-2*j14+j4-j5+j7-2*j9,j,j1,j4,j5,j7,j9,j10,j11,j12,j14,Md381M9,dotmapMd381M9R1)
	#call replace(i10,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md381M9,dotmapMd381M9R2)
	#call replace(i11,`Q2'/2-j10+j2/2-j3/2-j9,j,j2,j3,j9,j10,Md381M9,dotmapMd381M9R3)
	#call replace(i13,-j1/2-j11+j2/2-j4/2+j5/2,j,j1,j2,j4,j5,j11,Md381M9,dotmapMd381M9R4)
	#call replace(i14,-j13+j14,j,j13,j14,Md381M9,dotmapMd381M9R5)
	if (count(Md381M9,1)) Multiply replace_(Md381M9,Md215,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd215 "1"
#endif
.sort:reduce d381;
#endif
#endprocedure

#procedure Reduced381()
	#call Prepared381()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd381'
		#call MtoZ(Md381,Zd381,i,14)
		#call Reduce(d381)
		#call ZtoM(Zd381,Md381,i,14)
#else
		#if `USETURBO'
			#call TurboMd381()
		#endif
		#call triangleS(Md381,i4,i5,i3,i1,i6,i10,i14,0,0)
#endif
		#call Prepared381()
	#endif
#endprocedure
*--#] reduce-d381 : 
*--#[ reduce-nono :
#procedure Preparenono()
* Topology: 0-1 4-6 2-4 1-2 1-3 3-5 5-6 4-5 3-4 2-5 6-9
* Dots: p2.p8,p6.p7,p0.p2,p1.p2,p7.p9
* Apply automorphisms
if (match(Mnono*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n2,$n5,$n7,$n1,$n8,$n4,$n3,$n9,$n6)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n1,$n2,$n3,$n4,$n5,$n6)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n5,$n2,$n7,$n6,$n9,$n3,$n4,$n8,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i6,i2,i9,i5,i8,i6,i1,i8,i5,i9,i2);
elseif ($bestiso == 1); Multiply sign_($n11+$n14)*replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1,i8,i9,i9,i8);
elseif ($bestiso == 3); Multiply replace_(i2,i8,i3,i4,i4,i3,i5,i9,i8,i2,i9,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Znono automorphism;

#call CheckRemovedPropagators(nono,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p4,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d217
	if (count(MnonoM1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i12,j9);
	#call replace(i1,`Q2'+2*j11+j5,j,j5,j11,MnonoM1,dotmapMnonoM1R1)
	#call replace(i10,-j1/2-j10+j12-j13-j14-j2/2+j3/2-j5/2+j6/2-j7/2+j9,j,j1,j2,j3,j5,j6,j7,j9,j10,j12,j13,j14,MnonoM1,dotmapMnonoM1R2)
	#call replace(i11,-j12+j13+j14+j5,j,j5,j12,j13,j14,MnonoM1,dotmapMnonoM1R3)
	#call replace(i13,j12+j9,j,j9,j12,MnonoM1,dotmapMnonoM1R4)
	#call replace(i14,j14+j4/2+j5/2-j6/2-j8/2,j,j4,j5,j6,j8,j14,MnonoM1,dotmapMnonoM1R5)
	if (count(MnonoM1,1)) Multiply replace_(MnonoM1,Md217,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd217 "1"
#endif

#if `$M2'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(MnonoM2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i2,-`Q2'+2*j10+2*j13-j4+j7+j8+2*j9,j,j4,j7,j8,j9,j10,j13,MnonoM2,dotmapMnonoM2R1)
	#call replace(i10,`Q2'/2+j1/2-j10+j12-j13+j4/2+j6/2-j7-j8/2-j9,j,j1,j4,j6,j7,j8,j9,j10,j12,j13,MnonoM2,dotmapMnonoM2R2)
	#call replace(i11,j11-j12,j,j11,j12,MnonoM2,dotmapMnonoM2R3)
	#call replace(i12,j1/2+j11+j2/2-j3/2-j5/2+j9,j,j1,j2,j3,j5,j9,j11,MnonoM2,dotmapMnonoM2R4)
	#call replace(i13,-`Q2'/2+j1/2+j10+j11-j14-j4/2-j6/2+j8/2+j9,j,j1,j4,j6,j8,j9,j10,j11,j14,MnonoM2,dotmapMnonoM2R5)
	#call replace(i14,j11-j12-j14-j6,j,j6,j11,j12,j14,MnonoM2,dotmapMnonoM2R6)
	if (count(MnonoM2,1)) Multiply replace_(MnonoM2,Md207,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd207 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(MnonoM3,1)) Multiply replace_(i1,j3,i2,j4,i4,j5,i5,j6,i6,j1,i7,j8,i8,j7,i9,j2,i12,j10);
	#call replace(i3,-`Q2'+2*j10+j5+2*j9,j,j5,j9,j10,MnonoM3,dotmapMnonoM3R1)
	#call replace(i10,`Q2'/2-j11+j13+j2/2-j4/2+j6/2-j7/2-j9,j,j2,j4,j6,j7,j9,j11,j13,MnonoM3,dotmapMnonoM3R2)
	#call replace(i11,j1/2-j13-j2/2-j6/2+j8/2,j,j1,j2,j6,j8,j13,MnonoM3,dotmapMnonoM3R3)
	#call replace(i13,j10-j14,j,j10,j14,MnonoM3,dotmapMnonoM3R4)
	#call replace(i14,j12-j13-j2,j,j2,j12,j13,MnonoM3,dotmapMnonoM3R5)
	if (count(MnonoM3,1)) Multiply replace_(MnonoM3,Mbebe,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPObebe "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(MnonoM4,1)) Multiply replace_(i1,j3,i2,j7,i3,j5,i5,j2,i6,j1,i7,j8,i8,j4,i9,j6);
	#call replace(i4,-`Q2'+2*j10+j5+2*j9,j,j5,j9,j10,MnonoM4,dotmapMnonoM4R1)
	#call replace(i10,`Q2'/2-j11+j13+j2/2-j4/2+j6/2-j7/2-j9,j,j2,j4,j6,j7,j9,j11,j13,MnonoM4,dotmapMnonoM4R2)
	#call replace(i11,j1/2-j13-j2/2-j6/2+j8/2,j,j1,j2,j6,j8,j13,MnonoM4,dotmapMnonoM4R3)
	#call replace(i12,`Q2'-j10-j11-j9,j,j9,j10,j11,MnonoM4,dotmapMnonoM4R4)
	#call replace(i13,`Q2'/2-j10-j11+j13+j14+j2/2+j3/2+j6/2-j8/2-j9,j,j2,j3,j6,j8,j9,j10,j11,j13,j14,MnonoM4,dotmapMnonoM4R5)
	#call replace(i14,j1/2-j12+j2/2-j6/2-j8/2,j,j1,j2,j6,j8,j12,MnonoM4,dotmapMnonoM4R6)
	if (count(MnonoM4,1)) Multiply replace_(MnonoM4,Mbebe,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPObebe "1"
#endif

#if `$M5'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(MnonoM5,1)) Multiply replace_(i1,j5,i2,j4,i3,j3,i4,j2,i6,j1,i7,j6,i8,j8,i9,j7,i11,-j12,i12,j9);
	#call replace(i5,-`Q2'+2*j10+2*j13-j4+j7+j8+2*j9,j,j4,j7,j8,j9,j10,j13,MnonoM5,dotmapMnonoM5R1)
	#call replace(i10,-j11+j12-j4/2+j5/2+j6/2-j8/2,j,j4,j5,j6,j8,j11,j12,MnonoM5,dotmapMnonoM5R2)
	#call replace(i13,-j11+j12+j14+j4/2+j5/2+j6/2-j8/2,j,j4,j5,j6,j8,j11,j12,j14,MnonoM5,dotmapMnonoM5R3)
	#call replace(i14,-j11+j13+j14,j,j11,j13,j14,MnonoM5,dotmapMnonoM5R4)
	if (count(MnonoM5,1)) Multiply replace_(MnonoM5,Md207,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd207 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p4,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d217
	if (count(MnonoM6,1)) Multiply replace_(i1,j5,i2,j8,i3,j2,i4,j3,i5,j7,i7,j6,i8,j4,i9,j1);
	#call replace(i6,`Q2'-2*j11+j5,j,j5,j11,MnonoM6,dotmapMnonoM6R1)
	#call replace(i10,-j12+j13+j14-j4/2-j5/2+j6/2-j8/2,j,j4,j5,j6,j8,j12,j13,j14,MnonoM6,dotmapMnonoM6R2)
	#call replace(i11,`Q2'/2+j10-j11+j12-j13-j14+j2/2-j3/2+j5-j9,j,j2,j3,j5,j9,j10,j11,j12,j13,j14,MnonoM6,dotmapMnonoM6R3)
	#call replace(i12,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,MnonoM6,dotmapMnonoM6R4)
	#call replace(i13,-j12+j13,j,j12,j13,MnonoM6,dotmapMnonoM6R5)
	#call replace(i14,-j1/2+j10-j13-j14+j2/2-j3/2+j5/2-j6/2+j7/2,j,j1,j2,j3,j5,j6,j7,j10,j13,j14,MnonoM6,dotmapMnonoM6R6)
	if (count(MnonoM6,1)) Multiply replace_(MnonoM6,Md217,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd217 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p5,p2.p5,p1.p2,p1.p3,p1.p5 and change topology to d218
	if (count(MnonoM7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i12,j9,i13,j12);
	#call replace(i7,-`Q2'-2*j11-2*j12+2*j13+2*j14-j3+j6+j7+j8+2*j9,j,j3,j6,j7,j8,j9,j11,j12,j13,j14,MnonoM7,dotmapMnonoM7R1)
	#call replace(i10,-j11-j2/2-j3/2+j8/2+j9,j,j2,j3,j8,j9,j11,MnonoM7,dotmapMnonoM7R2)
	#call replace(i11,-`Q2'/2-j10-j12+j13+j14-j3/2+j4/2+j6+j9,j,j3,j4,j6,j9,j10,j12,j13,j14,MnonoM7,dotmapMnonoM7R3)
	#call replace(i14,`Q2'/2-j10+j11+j12-j13+j3/2+j5/2-j7/2-j8-j9,j,j3,j5,j7,j8,j9,j10,j11,j12,j13,MnonoM7,dotmapMnonoM7R4)
	if (count(MnonoM7,1)) Multiply replace_(MnonoM7,Md218,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd218 "1"
#endif

#if `$M8'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(MnonoM8,1)) Multiply replace_(i1,j1,i2,j7,i3,j3,i4,j2,i5,j6,i6,j5,i7,j8,i9,j4);
	#call replace(i8,-2*j13+j2+j6,j,j2,j6,j13,MnonoM8,dotmapMnonoM8R1)
	#call replace(i10,`Q2'/2-j11+j13+j14-j2/2+j4/2-j7/2-j9,j,j2,j4,j7,j9,j11,j13,j14,MnonoM8,dotmapMnonoM8R2)
	#call replace(i11,-j14-j4/2+j5/2-j6/2+j8/2,j,j4,j5,j6,j8,j14,MnonoM8,dotmapMnonoM8R3)
	#call replace(i12,`Q2'/2-j2/2+j3/2-j9,j,j2,j3,j9,MnonoM8,dotmapMnonoM8R4)
	#call replace(i13,`Q2'/2+j1/2-j10-j11+j12+j14+j4/2+j6/2-j8/2-j9,j,j1,j4,j6,j8,j9,j10,j11,j12,j14,MnonoM8,dotmapMnonoM8R5)
	#call replace(i14,-j11+j12-j4/2+j5/2+j6/2-j8/2,j,j4,j5,j6,j8,j11,j12,MnonoM8,dotmapMnonoM8R6)
	if (count(MnonoM8,1)) Multiply replace_(MnonoM8,Md207,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd207 "1"
#endif

#if `$M9'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(MnonoM9,1)) Multiply replace_(i1,j5,i2,j6,i3,j2,i4,j3,i5,j7,i6,j1,i7,j8,i8,j4,i10,j14,i12,j11);
	#call replace(i9,-2*j13+j2+j6,j,j2,j6,j13,MnonoM9,dotmapMnonoM9R1)
	#call replace(i11,-`Q2'/2+j1/2+j11-j14-j4/2-j6/2+j8/2+j9,j,j1,j4,j6,j8,j9,j11,j14,MnonoM9,dotmapMnonoM9R2)
	#call replace(i13,j11-j12,j,j11,j12,MnonoM9,dotmapMnonoM9R3)
	#call replace(i14,-`Q2'/2+j10+j11-j12+j13-j14-j2/2-j4/2-j6+j7/2+j9,j,j2,j4,j6,j7,j9,j10,j11,j12,j13,j14,MnonoM9,dotmapMnonoM9R4)
	if (count(MnonoM9,1)) Multiply replace_(MnonoM9,Md207,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd207 "1"
#endif
.sort:reduce nono;
#endif
#endprocedure

#procedure Reducenono()
	#call Preparenono()
	#if `$DOACTION'
		if (count(Mnono,1)) Multiply replace_(i14,-i14);
		#call MtoZ(Mnono,Znono,i,14)
		id Znono(n1?,...,n14?) = Znono(n1,...,n14) * 2^(n10+n11+n12+n13+n14);
		.sort:convert nono;
		#call Reduce(nono)
		id Znono(n1?,...,n14?) = Znono(n1,...,n14) * 1/2^(n10+n11+n12+n13+n14);
		#call ZtoM(Znono,Mnono,i,14)
		if (count(Mnono,1)) Multiply replace_(i14,-i14);
		#call Preparenono()
	#endif
#endprocedure
*--#] reduce-nono : 
*--#[ reduce-d379 :
#procedure Insertiond379()
* merge propagators with same momentum, and repeated dots
	if (count(Md379b,1)) Multiply replace_(Md379b,Md379c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md379c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j8/2,j,j5,j8,Md379c,dotmapMd379cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2+j3/2-j4/2+j5/2-j6/2+j7/2-j8/2-j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Md379c,dotmapMd379cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md379c,dotmapMd379cR3)
	#call replace(i13,j3/2-j5/2-j6/2,j,j3,j5,j6,Md379c,dotmapMd379cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md379c,dotmapMd379cR5)
	#call replace(i15,-`Q2'/2-j5/2+j8/2+j9,j,j5,j8,j9,Md379c,dotmapMd379cR6)
	#call replace(i16,j1/2+j3/2-j4/2,j,j1,j3,j4,Md379c,dotmapMd379cR7)
	#call replace(i17,-`Q2'/2+j2/2-j5/2+j6/2-j7/2+j8/2+j9,j,j2,j5,j6,j7,j8,j9,Md379c,dotmapMd379cR8)
	#call replace(i18,j3/2-j5/2+j6/2,j,j3,j5,j6,Md379c,dotmapMd379cR9)
	if (count(Md379c,1)) Multiply replace_(Md379c,Md379d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2 and change topology to nostar6
	if (count(Md379d,1)) Multiply replace_(i1,j3,i2,j4,i3,j8,i4,j2,i5,j6,i6,j5,i7,j7,i8,j1);
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md379d,dotmapMd379dR1)
	if (count(Md379d,1)) Multiply replace_(Md379d,Mnostar6,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOnostar6 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared379()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-4 3-4 3-6 6-7 4-7 4-9
* Dots: p0.p3,p0.p5,p1.p5,p3.p5,p5.p7
* Apply automorphisms
if (match(Md379*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n3,$n5,$n6,$n8,$n7,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n12==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n11,$n10,$n9,$n4,$n3,$n6,$n5,$n8,$n7,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i6,i6,i5,i7,i3,i8,i4);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply sign_($n10+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i7,i3,i8,i4,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd379 automorphism;

#call CheckRemovedPropagators(d379,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d379;
#endif
#endprocedure

#procedure Reduced379()
	#call Prepared379()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd379'
		#call MtoZ(Md379,Zd379,i,14)
		#call Reduce(d379)
		#call ZtoM(Zd379,Md379,i,14)
		#call Prepared379()
#else
		#if `USETURBO'
			#call TurboMd379()
		#endif
		#call insertionS(Md379,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i3,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md379b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond379()
#endif
	#endif
#endprocedure
*--#] reduce-d379 : 
*--#[ reduce-d378 :
#procedure Prepared378()
* Topology: 0-1 6-8 2-6 1-2 1-6 3-6 3-4 4-8 4-6 2-3 8-9
* Dots: p0.p6,p0.p9,p1.p3,p1.p9,p3.p6
* Apply automorphisms
if (match(Md378*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n9+$n3+$n6)
	#call hash(1,$n14,$n13,$n12,$n10,$n11,$n6,$n2,$n3,$n9,$n5,$n1,$n7,$n8,$n4,$n6+$n7+$n9)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i2,i8,i3,i7,i4,i1,i6,i9,i7,i3,i8,i2,i9,i6,i10,i11,i11,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd378 automorphism;

#call CheckRemovedPropagators(d378,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6 and change topology to d215
	if (count(Md378M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i1,`Q2'-2*j12+j6,j,j6,j12,Md378M1,dotmapMd378M1R1)
	#call replace(i10,`Q2'/2-j10+j2/2-j3/2-j9,j,j2,j3,j9,j10,Md378M1,dotmapMd378M1R2)
	#call replace(i11,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md378M1,dotmapMd378M1R3)
	#call replace(i12,`Q2'/2-j14+j2/2-j3/2,j,j2,j3,j14,Md378M1,dotmapMd378M1R4)
	#call replace(i13,`Q2'/2+j13-j14+j2/2-j3/2-j9,j,j2,j3,j9,j13,j14,Md378M1,dotmapMd378M1R5)
	#call replace(i14,-j1/2-j11+j2/2-j4/2+j5/2,j,j1,j2,j4,j5,j11,Md378M1,dotmapMd378M1R6)
	if (count(Md378M1,1)) Multiply replace_(Md378M1,Md215,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd215 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p5,p1.p4,p1.p2,p2.p4,p2.p5 and change topology to d221
	if (count(Md378M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j10,i12,j12,i14,j14);
	#call replace(i2,2*j13-2*j14+j2+j8,j,j2,j8,j13,j14,Md378M2,dotmapMd378M2R1)
	#call replace(i11,j10-j9,j,j9,j10,Md378M2,dotmapMd378M2R2)
	#call replace(i13,j10-j11-j5/2-j6/2+j7/2,j,j5,j6,j7,j10,j11,Md378M2,dotmapMd378M2R3)
	if (count(Md378M2,1)) Multiply replace_(Md378M2,Md221,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd221 "1"
#endif

#if `$M3'
* map dots to p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d213
	if (count(Md378M3,1)) Multiply replace_(i1,j4,i2,j1,i4,j2,i5,j5,i6,j8,i7,j6,i8,j7,i9,j3,i13,j10);
	#call replace(i3,j1+2*j12+j3,j,j1,j3,j12,Md378M3,dotmapMd378M3R1)
	#call replace(i10,`Q2'/2+j1/2-j11+j12-j2/2+j3/2-j9,j,j1,j2,j3,j9,j11,j12,Md378M3,dotmapMd378M3R2)
	#call replace(i11,`Q2'/2+j1/2-j11+j12-j2/2+j3/2,j,j1,j2,j3,j11,j12,Md378M3,dotmapMd378M3R3)
	#call replace(i12,j10+j13,j,j10,j13,Md378M3,dotmapMd378M3R4)
	#call replace(i14,j12-j14+j3/2-j5/2+j8/2,j,j3,j5,j8,j12,j14,Md378M3,dotmapMd378M3R5)
	if (count(Md378M3,1)) Multiply replace_(Md378M3,Md213,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd213 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6 and change topology to d215
	if (count(Md378M4,1)) Multiply replace_(i1,j3,i2,j6,i3,j7,i5,j4,i6,j8,i7,j2,i8,j1,i9,j5);
	#call replace(i4,2*j10+2*j12-j2+j3+j7+2*j9,j,j2,j3,j7,j9,j10,j12,Md378M4,dotmapMd378M4R1)
	#call replace(i10,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md378M4,dotmapMd378M4R2)
	#call replace(i11,`Q2'/2-j10+j2/2-j3/2-j9,j,j2,j3,j9,j10,Md378M4,dotmapMd378M4R3)
	#call replace(i12,`Q2'/2+j1/2-j10+j11-j12+j14-j3/2+j4/2-j5/2-j9,j,j1,j3,j4,j5,j9,j10,j11,j12,j14,Md378M4,dotmapMd378M4R4)
	#call replace(i13,`Q2'/2+j1/2-j10+j11-j3/2+j4/2-j5/2-j9,j,j1,j3,j4,j5,j9,j10,j11,Md378M4,dotmapMd378M4R5)
	#call replace(i14,j13-j14-j4/2+j5/2+j8/2,j,j4,j5,j8,j13,j14,Md378M4,dotmapMd378M4R6)
	if (count(Md378M4,1)) Multiply replace_(Md378M4,Md215,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd215 "1"
#endif

#if `$M5'
* map dots to p0.p5,p1.p3,p1.p5,p0.p2,p2.p3,p2.p5 and change topology to d222
	if (count(Md378M5,1)) Multiply replace_(i1,j6,i2,j5,i3,j4,i4,j3,i6,j2,i7,j1,i8,j8,i9,j7,i10,j12);
	#call replace(i5,-2*j12+2*j13+2*j14+j2+j7,j,j2,j7,j12,j13,j14,Md378M5,dotmapMd378M5R1)
	#call replace(i11,`Q2'/2-j3/2+j4/2-j9,j,j3,j4,j9,Md378M5,dotmapMd378M5R2)
	#call replace(i12,-j1/2+j10-j3/2+j4/2+j6/2,j,j1,j3,j4,j6,j10,Md378M5,dotmapMd378M5R3)
	#call replace(i13,-j1/2+j10+j11-j3/2+j4/2+j6/2-j9,j,j1,j3,j4,j6,j9,j10,j11,Md378M5,dotmapMd378M5R4)
	#call replace(i14,j12-j13,j,j12,j13,Md378M5,dotmapMd378M5R5)
	if (count(Md378M5,1)) Multiply replace_(Md378M5,Md222,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd222 "1"
#endif

#if `$M6'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(Md378M6,1)) Multiply replace_(i1,j1,i2,j7,i3,j3,i4,j2,i5,j6,i7,j5,i8,j8,i9,j4,i11,j9);
	#call replace(i6,-2*j14+j4+j6,j,j4,j6,j14,Md378M6,dotmapMd378M6R1)
	#call replace(i10,-j11+j9,j,j9,j11,Md378M6,dotmapMd378M6R2)
	#call replace(i12,`Q2'/2+j1/2-j10-j5/2,j,j1,j5,j10,Md378M6,dotmapMd378M6R3)
	#call replace(i13,-j11+j12+j14-j4/2-j5/2-j6/2+j8/2+j9,j,j4,j5,j6,j8,j9,j11,j12,j14,Md378M6,dotmapMd378M6R4)
	#call replace(i14,-j11+j13+j3/2+j4/2-j7/2,j,j3,j4,j7,j11,j13,Md378M6,dotmapMd378M6R5)
	if (count(Md378M6,1)) Multiply replace_(Md378M6,Md207,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd207 "1"
#endif

#if `$M7'
* map dots to p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d213
	if (count(Md378M7,1)) Multiply replace_(i1,j1,i2,j7,i3,j6,i4,j4,i5,j5,i6,j3,i8,j2,i9,j8);
	#call replace(i7,`Q2'+j1+2*j11,j,j1,j11,Md378M7,dotmapMd378M7R1)
	#call replace(i10,`Q2'/2+j1/2+j11-j12-j2/2+j3/2,j,j1,j2,j3,j11,j12,Md378M7,dotmapMd378M7R2)
	#call replace(i11,`Q2'/2+j1/2+j11-j12-j2/2+j3/2+j9,j,j1,j2,j3,j9,j11,j12,Md378M7,dotmapMd378M7R3)
	#call replace(i12,-j11+j13,j,j11,j13,Md378M7,dotmapMd378M7R4)
	#call replace(i13,-j12-j14,j,j12,j14,Md378M7,dotmapMd378M7R5)
	#call replace(i14,`Q2'/2+j1/2-j10+j11-j12-j2/2+j3/2,j,j1,j2,j3,j10,j11,j12,Md378M7,dotmapMd378M7R6)
	if (count(Md378M7,1)) Multiply replace_(Md378M7,Md213,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd213 "1"
#endif

#if `$M8'
* map dots to p0.p4,p0.p5,p1.p4,p1.p2,p2.p4,p2.p5 and change topology to d221
	if (count(Md378M8,1)) Multiply replace_(i1,j2,i2,j7,i3,j6,i4,j1,i5,j4,i6,j8,i7,j3,i9,j5,i11,j10,i13,j14);
	#call replace(i8,-2*j10-2*j13+2*j14+j3+j8+2*j9,j,j3,j8,j9,j10,j13,j14,Md378M8,dotmapMd378M8R1)
	#call replace(i10,j10-j9,j,j9,j10,Md378M8,dotmapMd378M8R2)
	#call replace(i12,`Q2'/2-j12+j2/2-j3/2,j,j2,j3,j12,Md378M8,dotmapMd378M8R3)
	#call replace(i14,j11+j5/2+j6/2-j7/2-j9,j,j5,j6,j7,j9,j11,Md378M8,dotmapMd378M8R4)
	if (count(Md378M8,1)) Multiply replace_(Md378M8,Md221,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd221 "1"
#endif

#if `$M9'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(Md378M9,1)) Multiply replace_(i1,j2,i2,j6,i3,j5,i4,j1,i5,j8,i6,j4,i7,j3,i8,j7,i10,j9);
	#call replace(i9,-2*j11+2*j12+j5+j6,j,j5,j6,j11,j12,Md378M9,dotmapMd378M9R1)
	#call replace(i11,`Q2'/2-j1/2-j11+j5/2,j,j1,j5,j11,Md378M9,dotmapMd378M9R2)
	#call replace(i12,`Q2'/2-j10+j2/2-j3/2,j,j2,j3,j10,Md378M9,dotmapMd378M9R3)
	#call replace(i13,`Q2'/2-j10-j13+j2/2-j3/2,j,j2,j3,j10,j13,Md378M9,dotmapMd378M9R4)
	#call replace(i14,-j11+j12+j14+j4/2+j5/2+j6/2-j8/2,j,j4,j5,j6,j8,j11,j12,j14,Md378M9,dotmapMd378M9R5)
	if (count(Md378M9,1)) Multiply replace_(Md378M9,Md207,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd207 "1"
#endif
.sort:reduce d378;
#endif
#endprocedure

#procedure Reduced378()
	#call Prepared378()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd378'
		#call MtoZ(Md378,Zd378,i,14)
		#call Reduce(d378)
		#call ZtoM(Zd378,Md378,i,14)
#else
		#if `USETURBO'
			#call TurboMd378()
		#endif
		#call triangleS(Md378,i2,i5,i9,i3,i6,i11,i13,0,0)
#endif
		#call Prepared378()
	#endif
#endprocedure
*--#] reduce-d378 : 
*--#[ reduce-d377 :
#procedure Insertiond377()
* merge propagators with same momentum, and repeated dots
	if (count(Md377b,1)) Multiply replace_(Md377b,Md377c,i18,i9,i19,i18);

* rewrite insertion dots
	if (count(Md377c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j3/2-j6/2-j7/2+j8/2,j,j3,j6,j7,j8,Md377c,dotmapMd377cR1)
	#call replace(i11,j1/2+j3/2-j4/2-j9,j,j1,j3,j4,j9,Md377c,dotmapMd377cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md377c,dotmapMd377cR3)
	#call replace(i13,j3/2-j5/2-j6/2,j,j3,j5,j6,Md377c,dotmapMd377cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md377c,dotmapMd377cR5)
	#call replace(i15,`Q2'/2+j3/2-j7/2,j,j3,j7,Md377c,dotmapMd377cR6)
	#call replace(i16,`Q2'/2+j6/2-j8/2,j,j6,j8,Md377c,dotmapMd377cR7)
	#call replace(i17,j1/2+j3/2-j4/2,j,j1,j3,j4,Md377c,dotmapMd377cR8)
	#call replace(i18,j3/2-j5/2+j6/2,j,j3,j5,j6,Md377c,dotmapMd377cR9)
	if (count(Md377c,1)) Multiply replace_(Md377c,Md377d,<j1,i1>,...,<j9,i9>);
* map dots to p4.p5 and change topology to d201
	if (count(Md377d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j1/2-j4/2-j5/2+j6/2-j9,j,j1,j4,j5,j6,j9,Md377d,dotmapMd377dR1)
	if (count(Md377d,1)) Multiply replace_(Md377d,Md201,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd201 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared377()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-6 3-6 3-8 5-6 6-8 8-9
* Dots: p1.p7,p0.p5,p1.p5,p3.p5,p5.p7
* Apply automorphisms
if (match(Md377*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n7,$n3,$n9,$n5,$n6,$n4,$n8,$n1,$n2)
endif;
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n7,$n3,$n9,$n6,$n5,$n4,$n8,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i5,i6,i6,i5,i7,i9,i8,i3,i9,i7);
elseif ($bestiso == 2); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i7,i9,i8,i3,i9,i7);
elseif ($bestiso == 3); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd377 automorphism;

#call CheckRemovedPropagators(d377,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d377;
#endif
#endprocedure

#procedure Reduced377()
	#call Prepared377()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd377'
		#call MtoZ(Md377,Zd377,i,14)
		#call Reduce(d377)
		#call ZtoM(Zd377,Md377,i,14)
		#call Prepared377()
#else
		#if `USETURBO'
			#call TurboMd377()
		#endif
		#call insertionS(Md377,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i3,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md377b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond377()
#endif
	#endif
#endprocedure
*--#] reduce-d377 : 
*--#[ reduce-d376 :
#procedure Insertiond376()
* merge propagators with same momentum, and repeated dots
	if (count(Md376b,1)) Multiply replace_(Md376b,Md376c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i15,i13);

* rewrite insertion dots
	if (count(Md376c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j6/2,j,j2,j6,Md376c,dotmapMd376cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md376c,dotmapMd376cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md376c,dotmapMd376cR3)
	#call replace(i13,j2/2-j5/2-j6/2+j7/2,j,j2,j5,j6,j7,Md376c,dotmapMd376cR4)
	if (count(Md376c,1)) Multiply replace_(Md376c,Md376d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p2.p5 and change topology to d114
	if (count(Md376d,1)) Multiply replace_(i1,j5,i2,j4,i3,j6,i4,j7,i5,j3,i6,j1,i7,j2,i8,j8);
	#call replace(i9,j4/2+j5/2-j6/2-j8+j9,j,j4,j5,j6,j8,j9,Md376d,dotmapMd376dR1)
	if (count(Md376d,1)) Multiply replace_(Md376d,Md114,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd114 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared376()
* Topology: 0-1 1-2 2-3 3-4 2-3 4-7 4-8 1-2 1-7 7-8 8-9
* Dots: p0.p2,p2.p5,p0.p1,p1.p2,p1.p5
* Apply automorphisms
if (match(Md376*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n2,$n3,$n4,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i2,i4,i4,i2,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd376 automorphism;

#call CheckRemovedPropagators(d376,9,5,3,5,6,8,9,1,2,4,7)
#if `$DOACTION' == 0
.sort:reduce d376;
#endif
#endprocedure

#procedure Reduced376()
	#call Prepared376()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd376'
		#call MtoZ(Md376,Zd376,i,14)
		#call Reduce(d376)
		#call ZtoM(Zd376,Md376,i,14)
		#call Prepared376()
#else
		#if `USETURBO'
			#call TurboMd376()
		#endif
		#call insertionS(Md376,i1,i7,i12,i13,i14,i1,`Q2',i2,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md376b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond376()
#endif
	#endif
#endprocedure
*--#] reduce-d376 : 
*--#[ reduce-d375 :
#procedure Insertiond375()
* merge propagators with same momentum, and repeated dots
	if (count(Md375b,1)) Multiply replace_(Md375b,Md375c,i5,i3,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md375c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j6/2,j,j3,j6,Md375c,dotmapMd375cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md375c,dotmapMd375cR2)
	#call replace(i12,j5/2+j6/2-j7/2+j8,j,j5,j6,j7,j8,Md375c,dotmapMd375cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md375c,dotmapMd375cR4)
	if (count(Md375c,1)) Multiply replace_(Md375c,Md375d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d115
	if (count(Md375d,1)) Multiply replace_(i1,j5,i2,j1,i3,j4,i4,j6,i5,j3,i6,j2,i7,j7,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md375d,dotmapMd375dR1)
	if (count(Md375d,1)) Multiply replace_(Md375d,Md115,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd115 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared375()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 3-4 4-6 5-6 4-6 4-9
* Dots: p0.p7,p1.p7,p0.p5,p1.p5,p5.p7
* Apply automorphisms
if (match(Md375*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n7,$n8,$n9,$n5,$n6,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n11,$n10,$n5,$n3,$n6,$n9,$n7,$n4,$n8,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n12,$n6,$n3,$n5,$n7,$n9,$n4,$n8,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n5,$n3,$n6,$n7,$n9,$n4,$n8,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n7,$n8,$n9,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n10,$n11,$n12,$n6,$n3,$n5,$n9,$n7,$n4,$n8,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i6,i6,i5,i7,i9,i9,i7);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i5,i7,i6,i9,i7,i6,i8,i3,i9,i5,i12,i10);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i5,i9,i6,i7,i7,i5,i8,i3,i9,i6,i10,i12);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i5,i9,i6,i7,i7,i6,i8,i3,i9,i5);
elseif ($bestiso == 5); Multiply replace_(i7,i9,i9,i7);
elseif ($bestiso == 6); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i5,i7,i6,i9,i7,i5,i8,i3,i9,i6,i10,i12,i12,i10);
elseif ($bestiso == 7); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd375 automorphism;

#call CheckRemovedPropagators(d375,9,5,1,2,3,4,8,5,6,7,9)
#if `$DOACTION' == 0
.sort:reduce d375;
#endif
#endprocedure

#procedure Reduced375()
	#call Prepared375()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd375'
		#call MtoZ(Md375,Zd375,i,14)
		#call Reduce(d375)
		#call ZtoM(Zd375,Md375,i,14)
		#call Prepared375()
#else
		#if `USETURBO'
			#call TurboMd375()
		#endif
		#call insertionS(Md375,i5,i6,i12,i13,i14,i5,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md375b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond375()
#endif
	#endif
#endprocedure
*--#] reduce-d375 : 
*--#[ reduce-lala :
#procedure Preparelala()
* Topology: 0-3 5-8 4-5 3-4 2-3 1-2 1-8 2-4 1-4 1-5 8-9
* Dots: p0.p5,p0.p2,p1.p4,p1.p5,p2.p4
* Apply automorphisms
if (match(Mlala*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n13,$n14,$n12,$n10,$n11,$n7,$n8,$n9,$n3,$n2,$n1,$n6,$n5,$n4)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n10+$n11)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i7,i9,i9,i7,i10,i11,i11,i10,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zlala automorphism;

#call CheckRemovedPropagators(lala,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p1.p2,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d220
	if (count(MlalaM1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9);
	#call replace(i1,`Q2'-2*j11+j5,j,j5,j11,MlalaM1,dotmapMlalaM1R1)
	#call replace(i11,`Q2'/2+j1/2-j11+j12+j5/2-j8/2,j,j1,j5,j8,j11,j12,MlalaM1,dotmapMlalaM1R2)
	#call replace(i12,-`Q2'/2+j11-j13+j2/2-j3/2,j,j2,j3,j11,j13,MlalaM1,dotmapMlalaM1R3)
	#call replace(i13,-j14+j9,j,j9,j14,MlalaM1,dotmapMlalaM1R4)
	#call replace(i14,-`Q2'/2-j1/2+j10+j11-j12-j5/2+j8/2,j,j1,j5,j8,j10,j11,j12,MlalaM1,dotmapMlalaM1R5)
	if (count(MlalaM1,1)) Multiply replace_(MlalaM1,Md220,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd220 "1"
#endif

#if `$M2'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(MlalaM2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j7,i8,j6,i9,j8,i10,j9);
	#call replace(i2,`Q2'+2*j11+2*j14+j4+j6+2*j9,j,j4,j6,j9,j11,j14,MlalaM2,dotmapMlalaM2R1)
	#call replace(i11,`Q2'+j11+j9,j,j9,j11,MlalaM2,dotmapMlalaM2R2)
	#call replace(i12,-`Q2'/2-j1/2+j10+j5/2,j,j1,j5,j10,MlalaM2,dotmapMlalaM2R3)
	#call replace(i13,j11-j12+j14+j4/2+j5/2+j6/2-j8/2+j9,j,j4,j5,j6,j8,j9,j11,j12,j14,MlalaM2,dotmapMlalaM2R4)
	#call replace(i14,-`Q2'/2-j11+j13+j2/2+j4/2-j7/2,j,j2,j4,j7,j11,j13,MlalaM2,dotmapMlalaM2R5)
	if (count(MlalaM2,1)) Multiply replace_(MlalaM2,Md207,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd207 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p4,p1.p4,p0.p3,p1.p3,p2.p3 and change topology to d234
	if (count(MlalaM3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j10,i11,j9,i12,j13,i13,j11,i14,j14);
	#call replace(i3,`Q2'+2*j12+j3,j,j3,j12,MlalaM3,dotmapMlalaM3R1)
	if (count(MlalaM3,1)) Multiply replace_(MlalaM3,Md234,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd234 "1"
#endif

#if `$M4'
* map dots to p0.p4,p1.p2,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d220
	if (count(MlalaM4,1)) Multiply replace_(i1,j3,i2,j4,i3,j5,i5,j1,i6,j2,i7,j8,i8,j7,i9,j6,i11,j9);
	#call replace(i4,`Q2'-2*j11+j5,j,j5,j11,MlalaM4,dotmapMlalaM4R1)
	#call replace(i10,-`Q2'/2-j1/2+j11+j12-j5/2+j8/2,j,j1,j5,j8,j11,j12,MlalaM4,dotmapMlalaM4R2)
	#call replace(i12,-`Q2'/2+j11-j13+j2/2-j3/2,j,j2,j3,j11,j13,MlalaM4,dotmapMlalaM4R3)
	#call replace(i13,-`Q2'/2-j1/2-j10+j11+j12-j5/2+j8/2,j,j1,j5,j8,j10,j11,j12,MlalaM4,dotmapMlalaM4R4)
	#call replace(i14,j14-j9,j,j9,j14,MlalaM4,dotmapMlalaM4R5)
	if (count(MlalaM4,1)) Multiply replace_(MlalaM4,Md220,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd220 "1"
#endif

#if `$M5'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(MlalaM5,1)) Multiply replace_(i1,j3,i2,j4,i3,j5,i4,j1,i6,j2,i7,j6,i8,j8,i9,j7,i11,j9);
	#call replace(i5,j1+2*j12+j6,j,j1,j6,j12,MlalaM5,dotmapMlalaM5R1)
	#call replace(i10,-`Q2'/2-j1/2+j11+j5/2,j,j1,j5,j11,MlalaM5,dotmapMlalaM5R2)
	#call replace(i12,-`Q2'/2-j1/2-j10+j5/2,j,j1,j5,j10,MlalaM5,dotmapMlalaM5R3)
	#call replace(i13,-`Q2'/2-j1/2-j10+j11-j13+j5/2,j,j1,j5,j10,j11,j13,MlalaM5,dotmapMlalaM5R4)
	#call replace(i14,j11+j12-j14+j4/2+j5/2+j6/2-j8/2-j9,j,j4,j5,j6,j8,j9,j11,j12,j14,MlalaM5,dotmapMlalaM5R5)
	if (count(MlalaM5,1)) Multiply replace_(MlalaM5,Md207,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd207 "1"
#endif

#if `$M6'
* map dots to p0.p2,p0.p4,p1.p4,p0.p3,p1.p3,p2.p3 and change topology to d234
	if (count(MlalaM6,1)) Multiply replace_(i1,j3,i2,j4,i3,j5,i4,j1,i5,j2,i7,j8,i8,j7,i9,j6,i10,j9,i11,j10,i12,-j13,i13,-j14,i14,j11);
	#call replace(i6,`Q2'+2*j12+j3,j,j3,j12,MlalaM6,dotmapMlalaM6R1)
	if (count(MlalaM6,1)) Multiply replace_(MlalaM6,Md234,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd234 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p5,p1.p5,p1.p3,p2.p3,p3.p5 and change topology to d235
	if (count(MlalaM7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8,i10,j10,i11,j9,i13,j11);
	#call replace(i7,2*j10+2*j14+j4+j5,j,j4,j5,j10,j14,MlalaM7,dotmapMlalaM7R1)
	#call replace(i12,-`Q2'/2-j1/2-j12+j6/2,j,j1,j6,j12,MlalaM7,dotmapMlalaM7R2)
	#call replace(i14,-j13-j9,j,j9,j13,MlalaM7,dotmapMlalaM7R3)
	if (count(MlalaM7,1)) Multiply replace_(MlalaM7,Md235,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd235 "1"
#endif

#if `$M8'
* map dots to p0.p5,p1.p3,p1.p5,p0.p2,p2.p3,p2.p5 and change topology to d222
	if (count(MlalaM8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,j12,i13,j11);
	#call replace(i8,`Q2'-2*j12-2*j14+j2+j5+2*j9,j,j2,j5,j9,j12,j14,MlalaM8,dotmapMlalaM8R1)
	#call replace(i12,-`Q2'/2-j1/2-j10+j6/2,j,j1,j6,j10,MlalaM8,dotmapMlalaM8R2)
	#call replace(i14,-j12-j13,j,j12,j13,MlalaM8,dotmapMlalaM8R3)
	if (count(MlalaM8,1)) Multiply replace_(MlalaM8,Md222,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd222 "1"
#endif

#if `$M9'
* map dots to p0.p2,p0.p5,p1.p5,p1.p3,p2.p3,p3.p5 and change topology to d235
	if (count(MlalaM9,1)) Multiply replace_(i1,j3,i2,j5,i3,j6,i4,j1,i5,j2,i6,j4,i7,j8,i8,j7,i10,j9,i11,-j10,i12,j12,i13,j13,i14,-j11);
	#call replace(i9,2*j14+j3+j5,j,j3,j5,j14,MlalaM9,dotmapMlalaM9R1)
	if (count(MlalaM9,1)) Multiply replace_(MlalaM9,Md235,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd235 "1"
#endif
.sort:reduce lala;
#endif
#endprocedure

#procedure Reducelala()
	#call Preparelala()
	#if `$DOACTION'
		#call MtoZ(Mlala,Zlala,i,14)
		id Zlala(n1?,...,n14?) = Zlala(n1,...,n14) * 2^(n10+n11+n12+n13+n14);
		.sort:convert lala;
		#call Reduce(lala)
		id Zlala(n1?,...,n14?) = Zlala(n1,...,n14) * 1/2^(n10+n11+n12+n13+n14);
		#call ZtoM(Zlala,Mlala,i,14)
		#call Preparelala()
	#endif
#endprocedure
*--#] reduce-lala : 
*--#[ reduce-d373 :
#procedure Insertiond373()
* merge propagators with same momentum, and repeated dots
	if (count(Md373b,1)) Multiply replace_(Md373b,Md373c,i17,i9,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md373c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md373c,dotmapMd373cR1)
	#call replace(i11,j1/2+j3/2-j6/2,j,j1,j3,j6,Md373c,dotmapMd373cR2)
	#call replace(i12,j3/2+j4/2-j5/2,j,j3,j4,j5,Md373c,dotmapMd373cR3)
	#call replace(i13,j3/2-j4/2+j5/2,j,j3,j4,j5,Md373c,dotmapMd373cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md373c,dotmapMd373cR5)
	#call replace(i15,j3/2-j5/2-j7/2+j8/2,j,j3,j5,j7,j8,Md373c,dotmapMd373cR6)
	#call replace(i16,`Q2'/2+j5/2-j8/2,j,j5,j8,Md373c,dotmapMd373cR7)
	#call replace(i17,j1/2+j3/2-j6/2-j9,j,j1,j3,j6,j9,Md373c,dotmapMd373cR8)
	#call replace(i18,j3/2-j4/2-j5/2,j,j3,j4,j5,Md373c,dotmapMd373cR9)
	if (count(Md373c,1)) Multiply replace_(Md373c,Md373d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3 and change topology to lastar5
	if (count(Md373d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j7,i5,j6,i6,j8,i7,j2,i8,j1);
	#call replace(i9,j1/2+j3/2+j5/2-j6/2-j8/2-j9,j,j1,j3,j5,j6,j8,j9,Md373d,dotmapMd373dR1)
	if (count(Md373d,1)) Multiply replace_(Md373d,Mlastar5,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOlastar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared373()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-7 3-8 2-6 6-7 7-8 8-9
* Dots: p1.p5,p0.p3,p1.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md373*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n5,$n1,$n7,$n3,$n4,$n9,$n6)
endif;
if (($n10==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n12,$n13,$n14,$n11,$n10,$n2,$n8,$n5,$n1,$n7,$n4,$n3,$n9,$n6)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n13)*replace_(i1,i6,i2,i9,i3,i4,i4,i3,i5,i7,i6,i1,i7,i5,i9,i2);
elseif ($bestiso == 2); Multiply sign_($n10+$n13)*replace_(i1,i6,i2,i9,i5,i7,i6,i1,i7,i5,i9,i2,i12,i14,i14,i12);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd373 automorphism;

#call CheckRemovedPropagators(d373,9,7,1,2,5,6,7,8,9,3,4)
#if `$DOACTION' == 0
.sort:reduce d373;
#endif
#endprocedure

#procedure Reduced373()
	#call Prepared373()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd373'
		#call MtoZ(Md373,Zd373,i,14)
		#call Reduce(d373)
		#call ZtoM(Zd373,Md373,i,14)
		#call Prepared373()
#else
		#if `USETURBO'
			#call TurboMd373()
		#endif
		#call insertionS(Md373,i3,i4,i11,i12,i13,i14,i3,`Q2',i1,i5,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md373b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond373()
#endif
	#endif
#endprocedure
*--#] reduce-d373 : 
*--#[ reduce-d372 :
#procedure Insertiond372()
* merge propagators with same momentum, and repeated dots
	if (count(Md372b,1)) Multiply replace_(Md372b,Md372c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i11,i8,i10,i9,i13,i9,i12,i10,i14,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md372c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j2/2-j5/2,j,j1,j2,j5,Md372c,dotmapMd372cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2,j,j2,j6,Md372c,dotmapMd372cR2)
	#call replace(i12,j2/2-j4/2-j6/2+j7/2,j,j2,j4,j6,j7,Md372c,dotmapMd372cR3)
	#call replace(i13,j2/2+j3/2-j4/2,j,j2,j3,j4,Md372c,dotmapMd372cR4)
	if (count(Md372c,1)) Multiply replace_(Md372c,Md372d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5 and change topology to d116
	if (count(Md372d,1)) Multiply replace_(i1,j5,i2,j3,i3,j4,i4,j1,i5,j7,i6,j6,i7,j2,i8,j8);
	#call replace(i9,j3/2+j5/2-j7/2-j9,j,j3,j5,j7,j9,Md372d,dotmapMd372dR1)
	if (count(Md372d,1)) Multiply replace_(Md372d,Md116,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd116 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared372()
* Topology: 0-1 1-2 2-3 2-3 3-4 4-7 4-8 1-3 1-7 7-8 8-9
* Dots: p0.p1,p1.p5,p0.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md372*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd372 automorphism;

#call CheckRemovedPropagators(d372,9,6,1,4,5,6,8,9,2,3,7)
#if `$DOACTION' == 0
.sort:reduce d372;
#endif
#endprocedure

#procedure Reduced372()
	#call Prepared372()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd372'
		#call MtoZ(Md372,Zd372,i,14)
		#call Reduce(d372)
		#call ZtoM(Zd372,Md372,i,14)
		#call Prepared372()
#else
		#if `USETURBO'
			#call TurboMd372()
		#endif
		#call insertionS(Md372,i2,i3,i12,i13,i14,i2,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md372b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond372()
#endif
	#endif
#endprocedure
*--#] reduce-d372 : 
*--#[ reduce-d371 :
#procedure Insertiond371()
* merge propagators with same momentum, and repeated dots
	if (count(Md371b,1)) Multiply replace_(Md371b,Md371c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i13,i8,i10,i9,i16,i9,i11,i10,i12,i11,i14,i12,i15,i13);

* rewrite insertion dots
	if (count(Md371c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md371c,dotmapMd371cR1)
	#call replace(i11,j2/2+j3/2-j5/2,j,j2,j3,j5,Md371c,dotmapMd371cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2,j,j3,j6,Md371c,dotmapMd371cR3)
	#call replace(i13,`Q2'/2+j4/2-j7/2,j,j4,j7,Md371c,dotmapMd371cR4)
	if (count(Md371c,1)) Multiply replace_(Md371c,Md371d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p1.p4 and change topology to d117
	if (count(Md371d,1)) Multiply replace_(i1,j5,i2,j4,i3,j3,i4,j1,i5,j7,i6,j6,i7,j2,i8,j9,i9,j8);
	if (count(Md371d,1)) Multiply replace_(Md371d,Md117,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd117 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared371()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-4 4-8 3-6 4-6 4-8 8-9
* Dots: p1.p6,p5.p6,p0.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md371*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd371 automorphism;

#call CheckRemovedPropagators(d371,9,5,1,2,5,7,8,3,4,6,9)
#if `$DOACTION' == 0
.sort:reduce d371;
#endif
#endprocedure

#procedure Reduced371()
	#call Prepared371()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd371'
		#call MtoZ(Md371,Zd371,i,14)
		#call Reduce(d371)
		#call ZtoM(Zd371,Md371,i,14)
		#call Prepared371()
#else
		#if `USETURBO'
			#call TurboMd371()
		#endif
		#call insertionS(Md371,i3,i4,i12,i13,i14,i3,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md371b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond371()
#endif
	#endif
#endprocedure
*--#] reduce-d371 : 
*--#[ reduce-d370 :
#procedure Insertiond370()
* merge propagators with same momentum, and repeated dots
	if (count(Md370b,1)) Multiply replace_(Md370b,Md370c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i11,i8,i10,i9,i12,i9,i13,i10,i14,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md370c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j4/2+j7/2+j8,j,j4,j7,j8,Md370c,dotmapMd370cR1)
	#call replace(i11,-`Q2'/2-j1/2-j2/2+j5/2+j8+j9,j,j1,j2,j5,j8,j9,Md370c,dotmapMd370cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md370c,dotmapMd370cR3)
	#call replace(i13,-`Q2'/2-j1/2+j5/2-j6/2+j7/2+j8,j,j1,j5,j6,j7,j8,Md370c,dotmapMd370cR4)
	if (count(Md370c,1)) Multiply replace_(Md370c,Md370d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md370d,1)) Multiply replace_(i1,j1,i2,j6,i3,j7,i4,j2,i5,j5,i6,j4,i7,j3);
	#call replace(i8,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Md370d,dotmapMd370dR1)
	#call replace(i9,`Q2'/2-j2/2+j3/2-j8,j,j2,j3,j8,Md370d,dotmapMd370dR2)
	if (count(Md370d,1)) Multiply replace_(Md370d,Md118,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd118 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared370()
* Topology: 0-1 1-2 1-2 2-4 2-7 4-6 4-8 2-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p4,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md370*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n10,$n11,$n6,$n5,$n7,$n9,$n8,$n3,$n4,$n1,$n2)
endif;
if (($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n12,$n13,$n10,$n11,$n6,$n5,$n7,$n9,$n8,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 1); Multiply sign_($n14)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i8,i6,i9,i8,i5,i9,i6,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply sign_($n14)*replace_(i3,i4,i4,i3,i5,i8,i6,i9,i8,i5,i9,i6,i10,i11,i11,i10,i12,i13,i13,i12);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd370 automorphism;

#call CheckRemovedPropagators(d370,9,7,3,4,5,6,7,8,9,1,2)
#if `$DOACTION' == 0
.sort:reduce d370;
#endif
#endprocedure

#procedure Reduced370()
	#call Prepared370()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd370'
		#call MtoZ(Md370,Zd370,i,14)
		#call Reduce(d370)
		#call ZtoM(Zd370,Md370,i,14)
		#call Prepared370()
#else
		#if `USETURBO'
			#call TurboMd370()
		#endif
		#call insertionS(Md370,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md370b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond370()
#endif
	#endif
#endprocedure
*--#] reduce-d370 : 
*--#[ reduce-d369 :
#procedure Insertiond369()
* merge propagators with same momentum, and repeated dots
	if (count(Md369b,1)) Multiply replace_(Md369b,Md369c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i16,i8,i10,i9,i13,i9,i11,i10,i12,i11,i14,i12,i15,i13);

* rewrite insertion dots
	if (count(Md369c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j6/2,j,j3,j6,Md369c,dotmapMd369cR1)
	#call replace(i11,j1/2+j3/2-j5/2,j,j1,j3,j5,Md369c,dotmapMd369cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md369c,dotmapMd369cR3)
	#call replace(i13,`Q2'/2+j4/2-j7/2,j,j4,j7,Md369c,dotmapMd369cR4)
	if (count(Md369c,1)) Multiply replace_(Md369c,Md369d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p2,p1.p3 and change topology to d119
	if (count(Md369d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j1,i5,j7,i6,j2,i7,j6);
	#call replace(i8,`Q2'/2+j1/2-j6/2-j9,j,j1,j6,j9,Md369d,dotmapMd369dR1)
	#call replace(i9,`Q2'/2+j1/2-j6/2+j8,j,j1,j6,j8,Md369d,dotmapMd369dR2)
	if (count(Md369d,1)) Multiply replace_(Md369d,Md119,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd119 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared369()
* Topology: 0-1 1-2 1-6 2-3 3-4 2-3 4-8 2-6 4-6 4-8 8-9
* Dots: p1.p6,p4.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md369*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i5,i5,i3,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd369 automorphism;

#call CheckRemovedPropagators(d369,9,5,1,2,4,7,8,3,5,6,9)
#if `$DOACTION' == 0
.sort:reduce d369;
#endif
#endprocedure

#procedure Reduced369()
	#call Prepared369()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd369'
		#call MtoZ(Md369,Zd369,i,14)
		#call Reduce(d369)
		#call ZtoM(Zd369,Md369,i,14)
		#call Prepared369()
#else
		#if `USETURBO'
			#call TurboMd369()
		#endif
		#call insertionS(Md369,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md369b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond369()
#endif
	#endif
#endprocedure
*--#] reduce-d369 : 
*--#[ reduce-d368 :
#procedure Insertiond368()
* merge propagators with same momentum, and repeated dots
	if (count(Md368b,1)) Multiply replace_(Md368b,Md368c,i4,i3,i5,i4,i3,i5,i6,i5,i7,i6,i8,i7,i9,i8,i16,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14);

* rewrite insertion dots
	if (count(Md368c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j6/2,j,j1,j2,j3,j6,Md368c,dotmapMd368cR1)
	#call replace(i11,j1/2-j3/2+j5/2,j,j1,j3,j5,Md368c,dotmapMd368cR2)
	#call replace(i12,j8-j9,j,j8,j9,Md368c,dotmapMd368cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md368c,dotmapMd368cR4)
	#call replace(i14,`Q2'/2+j4/2-j7/2,j,j4,j7,Md368c,dotmapMd368cR5)
	if (count(Md368c,1)) Multiply replace_(Md368c,Md368d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p1.p4 and change topology to d120
	if (count(Md368d,1)) Multiply replace_(i1,j5,i2,j7,i3,j3,i4,j1,i5,j4,i6,j6,i7,j2,i9,j8);
	#call replace(i8,j8+j9,j,j8,j9,Md368d,dotmapMd368dR1)
	if (count(Md368d,1)) Multiply replace_(Md368d,Md120,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd120 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared368()
* Topology: 0-1 1-2 1-6 2-5 2-4 2-5 4-8 5-6 4-6 4-8 8-9
* Dots: p1.p6,p4.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md368*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i5,i5,i3,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd368 automorphism;

#call CheckRemovedPropagators(d368,9,5,1,2,4,7,8,3,5,6,9)
#if `$DOACTION' == 0
.sort:reduce d368;
#endif
#endprocedure

#procedure Reduced368()
	#call Prepared368()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd368'
		#call MtoZ(Md368,Zd368,i,14)
		#call Reduce(d368)
		#call ZtoM(Zd368,Md368,i,14)
		#call Prepared368()
#else
		#if `USETURBO'
			#call TurboMd368()
		#endif
		#call insertionS(Md368,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md368b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond368()
#endif
	#endif
#endprocedure
*--#] reduce-d368 : 
*--#[ reduce-d367 :
#procedure Insertiond367()
* merge propagators with same momentum, and repeated dots
	if (count(Md367b,1)) Multiply replace_(Md367b,Md367c,i6,`Q2',i7,i6,i8,i7,i9,i8,i11,i8,i10,i9,i12,i9,i13,i10,i14,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md367c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md367c,dotmapMd367cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md367c,dotmapMd367cR2)
	#call replace(i12,j1/2+j4/2-j6/2,j,j1,j4,j6,Md367c,dotmapMd367cR3)
	#call replace(i13,j2/2+j4/2-j5/2,j,j2,j4,j5,Md367c,dotmapMd367cR4)
	if (count(Md367c,1)) Multiply replace_(Md367c,Md367d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d121
	if (count(Md367d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j6,i5,j4,i6,j5,i7,j7,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md367d,dotmapMd367dR1)
	if (count(Md367d,1)) Multiply replace_(Md367d,Md121,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd121 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared367()
* Topology: 0-1 1-2 2-3 2-5 3-4 3-5 4-8 1-5 1-4 4-8 8-9
* Dots: p0.p1,p0.p2,p1.p6,p2.p6,p4.p6
* Apply automorphisms
if (match(Md367*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n1,$n9,$n2,$n4,$n3,$n5,$n7)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n2,$n4,$n3,$n5,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n13)*replace_(i1,i7,i2,i5,i5,i2,i6,i9,i7,i1,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply sign_($n11+$n13)*replace_(i1,i7,i2,i5,i5,i2,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd367 automorphism;

#call CheckRemovedPropagators(d367,9,6,1,2,3,4,5,7,6,8,9)
#if `$DOACTION' == 0
.sort:reduce d367;
#endif
#endprocedure

#procedure Reduced367()
	#call Prepared367()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd367'
		#call MtoZ(Md367,Zd367,i,14)
		#call Reduce(d367)
		#call ZtoM(Zd367,Md367,i,14)
		#call Prepared367()
#else
		#if `USETURBO'
			#call TurboMd367()
		#endif
		#call insertionS(Md367,i6,i9,i12,i13,i14,i6,i1,i2,i4,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md367b,1)) Multiply replace_(<i10,i9>,...,<i17,i16>);
		#call Insertiond367()
#endif
	#endif
#endprocedure
*--#] reduce-d367 : 
*--#[ reduce-d366 :
#procedure Insertiond366()
* merge propagators with same momentum, and repeated dots
	if (count(Md366b,1)) Multiply replace_(Md366b,Md366c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i12,i8,i10,i9,i13,i9,i11,i10,i14,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md366c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md366c,dotmapMd366cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md366c,dotmapMd366cR2)
	#call replace(i12,j4/2+j5/2-j6/2+j9,j,j4,j5,j6,j9,Md366c,dotmapMd366cR3)
	#call replace(i13,`Q2'/2+j2/2+j4/2-j7/2-j8+j9,j,j2,j4,j7,j8,j9,Md366c,dotmapMd366cR4)
	if (count(Md366c,1)) Multiply replace_(Md366c,Md366d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md366d,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j6,i5,j3,i6,j4,i7,j5);
	#call replace(i8,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md366d,dotmapMd366dR1)
	#call replace(i9,-`Q2'/2+j2/2-j3/2+j8,j,j2,j3,j8,Md366d,dotmapMd366dR2)
	if (count(Md366d,1)) Multiply replace_(Md366d,Md118,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd118 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared366()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-7 4-6 2-6 6-7 4-7 4-9
* Dots: p0.p4,p0.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md366*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n10,$n11,$n9,$n5,$n3,$n4,$n8,$n6,$n7,$n1,$n2)
endif;
if (($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n10,$n11,$n9,$n5,$n3,$n4,$n8,$n6,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i6,i5,i8,i6,i4,i7,i3,i8,i5,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n13+$n14)*replace_(i3,i7,i4,i6,i5,i8,i6,i4,i7,i3,i8,i5,i10,i11,i11,i10,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd366 automorphism;

#call CheckRemovedPropagators(d366,9,7,3,4,5,6,7,8,9,1,2)
#if `$DOACTION' == 0
.sort:reduce d366;
#endif
#endprocedure

#procedure Reduced366()
	#call Prepared366()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd366'
		#call MtoZ(Md366,Zd366,i,14)
		#call Reduce(d366)
		#call ZtoM(Zd366,Md366,i,14)
		#call Prepared366()
#else
		#if `USETURBO'
			#call TurboMd366()
		#endif
		#call insertionS(Md366,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md366b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond366()
#endif
	#endif
#endprocedure
*--#] reduce-d366 : 
*--#[ reduce-d365 :
#procedure Insertiond365()
* merge propagators with same momentum, and repeated dots
	if (count(Md365b,1)) Multiply replace_(Md365b,Md365c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i13,i9,i11,i10,i12,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md365c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md365c,dotmapMd365cR1)
	#call replace(i11,j2/2+j3/2-j5/2,j,j2,j3,j5,Md365c,dotmapMd365cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2,j,j3,j6,Md365c,dotmapMd365cR3)
	#call replace(i13,j4/2+j6/2-j7/2+j8,j,j4,j6,j7,j8,Md365c,dotmapMd365cR4)
	if (count(Md365c,1)) Multiply replace_(Md365c,Md365d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p1.p4 and change topology to d122
	if (count(Md365d,1)) Multiply replace_(i1,j5,i2,j4,i3,j2,i4,j1,i5,j7,i6,j6,i7,j3,i8,j8,i9,j9);
	if (count(Md365d,1)) Multiply replace_(Md365d,Md122,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd122 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared365()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-4 4-7 3-6 6-7 4-7 4-9
* Dots: p0.p6,p1.p6,p0.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md365*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd365 automorphism;

#call CheckRemovedPropagators(d365,9,5,1,2,5,7,8,3,4,6,9)
#if `$DOACTION' == 0
.sort:reduce d365;
#endif
#endprocedure

#procedure Reduced365()
	#call Prepared365()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd365'
		#call MtoZ(Md365,Zd365,i,14)
		#call Reduce(d365)
		#call ZtoM(Zd365,Md365,i,14)
		#call Prepared365()
#else
		#if `USETURBO'
			#call TurboMd365()
		#endif
		#call insertionS(Md365,i3,i4,i12,i13,i14,i3,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md365b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond365()
#endif
	#endif
#endprocedure
*--#] reduce-d365 : 
*--#[ reduce-d364 :
#procedure Insertiond364()
* merge propagators with same momentum, and repeated dots
	if (count(Md364b,1)) Multiply replace_(Md364b,Md364c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md364c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j6/2,j,j3,j6,Md364c,dotmapMd364cR1)
	#call replace(i11,j1/2+j3/2-j5/2,j,j1,j3,j5,Md364c,dotmapMd364cR2)
	#call replace(i12,j4/2+j6/2-j7/2+j8,j,j4,j6,j7,j8,Md364c,dotmapMd364cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md364c,dotmapMd364cR4)
	if (count(Md364c,1)) Multiply replace_(Md364c,Md364d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d115
	if (count(Md364d,1)) Multiply replace_(i1,j5,i2,j1,i3,j4,i4,j3,i5,j6,i6,j2,i7,j7,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md364d,dotmapMd364dR1)
	if (count(Md364d,1)) Multiply replace_(Md364d,Md115,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd115 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared364()
* Topology: 0-1 1-2 1-6 2-3 3-4 2-3 4-7 2-6 6-7 4-7 4-9
* Dots: p0.p6,p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md364*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i5,i5,i3,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd364 automorphism;

#call CheckRemovedPropagators(d364,9,5,1,2,4,7,8,3,5,6,9)
#if `$DOACTION' == 0
.sort:reduce d364;
#endif
#endprocedure

#procedure Reduced364()
	#call Prepared364()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd364'
		#call MtoZ(Md364,Zd364,i,14)
		#call Reduce(d364)
		#call ZtoM(Zd364,Md364,i,14)
		#call Prepared364()
#else
		#if `USETURBO'
			#call TurboMd364()
		#endif
		#call insertionS(Md364,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md364b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond364()
#endif
	#endif
#endprocedure
*--#] reduce-d364 : 
*--#[ reduce-d363 :
#procedure Insertiond363()
* merge propagators with same momentum, and repeated dots
	if (count(Md363b,1)) Multiply replace_(Md363b,Md363c,i4,i3,i5,i4,i3,i5,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md363c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j6/2,j,j1,j2,j3,j6,Md363c,dotmapMd363cR1)
	#call replace(i11,j1/2-j3/2+j5/2,j,j1,j3,j5,Md363c,dotmapMd363cR2)
	#call replace(i12,-j4/2-j6/2+j7/2-j8+j9,j,j4,j6,j7,j8,j9,Md363c,dotmapMd363cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md363c,dotmapMd363cR4)
	if (count(Md363c,1)) Multiply replace_(Md363c,Md363d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p1.p4 and change topology to d123
	if (count(Md363d,1)) Multiply replace_(i1,j5,i2,j7,i3,j2,i4,j1,i5,j4,i6,j6,i7,j3,i8,j8);
	#call replace(i9,j1/2-j3/2+j6/2+j8+j9,j,j1,j3,j6,j8,j9,Md363d,dotmapMd363dR1)
	if (count(Md363d,1)) Multiply replace_(Md363d,Md123,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd123 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared363()
* Topology: 0-1 1-2 1-6 2-5 2-4 2-5 4-7 5-6 6-7 4-7 4-9
* Dots: p0.p6,p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md363*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i5,i5,i3,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd363 automorphism;

#call CheckRemovedPropagators(d363,9,5,1,2,4,7,8,3,5,6,9)
#if `$DOACTION' == 0
.sort:reduce d363;
#endif
#endprocedure

#procedure Reduced363()
	#call Prepared363()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd363'
		#call MtoZ(Md363,Zd363,i,14)
		#call Reduce(d363)
		#call ZtoM(Zd363,Md363,i,14)
		#call Prepared363()
#else
		#if `USETURBO'
			#call TurboMd363()
		#endif
		#call insertionS(Md363,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md363b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond363()
#endif
	#endif
#endprocedure
*--#] reduce-d363 : 
*--#[ reduce-d362 :
#procedure Insertiond362()
* merge propagators with same momentum, and repeated dots
	if (count(Md362b,1)) Multiply replace_(Md362b,Md362c,i8,i6,i9,i8,i14,i8,i10,i9,i15,i9,i11,-i10,i12,-i11,i13,-i12,i16,i13);

* rewrite insertion dots
	if (count(Md362c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j4/2+j6/2,j,j4,j6,Md362c,dotmapMd362cR1)
	#call replace(i11,-j1/2-j4/2+j7/2+j8,j,j1,j4,j7,j8,Md362c,dotmapMd362cR2)
	#call replace(i12,-j2/2-j4/2+j5/2+j9,j,j2,j4,j5,j9,Md362c,dotmapMd362cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md362c,dotmapMd362cR4)
	if (count(Md362c,1)) Multiply replace_(Md362c,Md362d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3 and change topology to d124
	if (count(Md362d,1)) Multiply replace_(i1,j2,i2,j4,i3,j3,i4,j7,i5,j5,i6,j1,i7,j6,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md362d,dotmapMd362dR1)
	if (count(Md362d,1)) Multiply replace_(Md362d,Md124,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd124 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared362()
* Topology: 0-1 1-2 2-3 2-5 3-4 3-5 4-7 1-5 1-7 4-7 4-9
* Dots: p0.p1,p0.p2,p0.p6,p1.p6,p2.p6
* Apply automorphisms
if (match(Md362*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n1,$n9,$n2,$n4,$n3,$n5,$n7)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n2,$n4,$n3,$n5,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i7,i2,i5,i5,i2,i6,i9,i7,i1,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply sign_($n11+$n14)*replace_(i1,i7,i2,i5,i5,i2,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd362 automorphism;

#call CheckRemovedPropagators(d362,9,7,1,2,3,4,5,7,8,6,9)
#if `$DOACTION' == 0
.sort:reduce d362;
#endif
#endprocedure

#procedure Reduced362()
	#call Prepared362()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd362'
		#call MtoZ(Md362,Zd362,i,14)
		#call Reduce(d362)
		#call ZtoM(Zd362,Md362,i,14)
		#call Prepared362()
#else
		#if `USETURBO'
			#call TurboMd362()
		#endif
		#call insertionS(Md362,i6,i9,i12,i13,i14,i6,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md362b,1)) Multiply replace_(<i10,i9>,...,<i17,i16>);
		#call Insertiond362()
#endif
	#endif
#endprocedure
*--#] reduce-d362 : 
*--#[ reduce-d361 :
#procedure Insertiond361()
* merge propagators with same momentum, and repeated dots
	if (count(Md361b,1)) Multiply replace_(Md361b,Md361c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i13,i9,i11,i10,i12,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md361c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md361c,dotmapMd361cR1)
	#call replace(i11,j2/2+j3/2-j6/2,j,j2,j3,j6,Md361c,dotmapMd361cR2)
	#call replace(i12,`Q2'/2+j3/2-j7/2,j,j3,j7,Md361c,dotmapMd361cR3)
	#call replace(i13,j3/2+j4/2-j5/2,j,j3,j4,j5,Md361c,dotmapMd361cR4)
	if (count(Md361c,1)) Multiply replace_(Md361c,Md361d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p1.p4 and change topology to d125
	if (count(Md361d,1)) Multiply replace_(i1,j5,i2,j4,i3,j2,i4,j1,i5,j3,i6,j7,i7,j6,i8,j8,i9,j9);
	if (count(Md361d,1)) Multiply replace_(Md361d,Md125,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd125 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared361()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-4 4-7 4-7 3-6 6-7 7-9
* Dots: p0.p6,p1.p6,p0.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md361*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i6,i7,i7,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd361 automorphism;

#call CheckRemovedPropagators(d361,9,5,1,2,5,8,9,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d361;
#endif
#endprocedure

#procedure Reduced361()
	#call Prepared361()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd361'
		#call MtoZ(Md361,Zd361,i,14)
		#call Reduce(d361)
		#call ZtoM(Zd361,Md361,i,14)
		#call Prepared361()
#else
		#if `USETURBO'
			#call TurboMd361()
		#endif
		#call insertionS(Md361,i3,i4,i12,i13,i14,i3,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md361b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond361()
#endif
	#endif
#endprocedure
*--#] reduce-d361 : 
*--#[ reduce-d360 :
#procedure Insertiond360()
* merge propagators with same momentum, and repeated dots
	if (count(Md360b,1)) Multiply replace_(Md360b,Md360c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md360c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md360c,dotmapMd360cR1)
	#call replace(i11,j1/2+j3/2-j6/2,j,j1,j3,j6,Md360c,dotmapMd360cR2)
	#call replace(i12,j3/2+j4/2-j5/2,j,j3,j4,j5,Md360c,dotmapMd360cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md360c,dotmapMd360cR4)
	if (count(Md360c,1)) Multiply replace_(Md360c,Md360d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p2.p5 and change topology to d114
	if (count(Md360d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j5,i5,j6,i6,j7,i7,j1,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md360d,dotmapMd360dR1)
	if (count(Md360d,1)) Multiply replace_(Md360d,Md114,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd114 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared360()
* Topology: 0-1 1-2 1-6 2-3 3-4 2-3 4-7 4-7 2-6 6-7 7-9
* Dots: p0.p6,p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md360*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i5,i5,i3,i6,i7,i7,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd360 automorphism;

#call CheckRemovedPropagators(d360,9,5,1,2,4,8,9,3,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d360;
#endif
#endprocedure

#procedure Reduced360()
	#call Prepared360()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd360'
		#call MtoZ(Md360,Zd360,i,14)
		#call Reduce(d360)
		#call ZtoM(Zd360,Md360,i,14)
		#call Prepared360()
#else
		#if `USETURBO'
			#call TurboMd360()
		#endif
		#call insertionS(Md360,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md360b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond360()
#endif
	#endif
#endprocedure
*--#] reduce-d360 : 
*--#[ reduce-d359 :
#procedure Insertiond359()
* merge propagators with same momentum, and repeated dots
	if (count(Md359b,1)) Multiply replace_(Md359b,Md359c,i4,i3,i5,i4,i6,i5,i3,i6,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md359c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j7/2,j,j1,j2,j3,j7,Md359c,dotmapMd359cR1)
	#call replace(i11,j1/2-j3/2+j6/2,j,j1,j3,j6,Md359c,dotmapMd359cR2)
	#call replace(i12,-j3/2-j4/2+j5/2+j9,j,j3,j4,j5,j9,Md359c,dotmapMd359cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md359c,dotmapMd359cR4)
	if (count(Md359c,1)) Multiply replace_(Md359c,Md359d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p1.p4 and change topology to d123
	if (count(Md359d,1)) Multiply replace_(i1,j7,i2,j5,i3,j6,i4,j1,i5,j3,i6,j4,i7,j2,i8,j8);
	#call replace(i9,j1/2-j3/2+j6/2+j9,j,j1,j3,j6,j9,Md359d,dotmapMd359dR1)
	if (count(Md359d,1)) Multiply replace_(Md359d,Md123,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd123 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared359()
* Topology: 0-1 1-2 1-6 2-5 2-4 2-5 4-7 4-7 5-6 6-7 7-9
* Dots: p0.p6,p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md359*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i5,i5,i3,i6,i7,i7,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd359 automorphism;

#call CheckRemovedPropagators(d359,9,5,1,2,4,8,9,3,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d359;
#endif
#endprocedure

#procedure Reduced359()
	#call Prepared359()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd359'
		#call MtoZ(Md359,Zd359,i,14)
		#call Reduce(d359)
		#call ZtoM(Zd359,Md359,i,14)
		#call Prepared359()
#else
		#if `USETURBO'
			#call TurboMd359()
		#endif
		#call insertionS(Md359,i3,i5,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md359b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond359()
#endif
	#endif
#endprocedure
*--#] reduce-d359 : 
*--#[ reduce-d358 :
#procedure Insertiond358()
* merge propagators with same momentum, and repeated dots
	if (count(Md358b,1)) Multiply replace_(Md358b,Md358c,i6,i4,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md358c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md358c,dotmapMd358cR1)
	#call replace(i11,j1/2+j4/2-j6/2,j,j1,j4,j6,Md358c,dotmapMd358cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md358c,dotmapMd358cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md358c,dotmapMd358cR4)
	if (count(Md358c,1)) Multiply replace_(Md358c,Md358d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d126
	if (count(Md358d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j5,i5,j4,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md358d,1)) Multiply replace_(Md358d,Md126,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd126 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared358()
* Topology: 0-1 1-2 2-3 2-5 3-4 3-5 4-7 4-7 1-5 1-7 7-9
* Dots: p0.p1,p0.p2,p0.p6,p1.p6,p2.p6
* Apply automorphisms
if (match(Md358*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n6,$n7,$n2,$n4,$n3,$n5,$n8)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n6,$n2,$n4,$n3,$n5,$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i8,i2,i5,i5,i2,i6,i7,i7,i6,i8,i1);
elseif ($bestiso == 2); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply sign_($n11+$n14)*replace_(i1,i8,i2,i5,i5,i2,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd358 automorphism;

#call CheckRemovedPropagators(d358,9,6,1,2,3,4,5,8,6,7,9)
#if `$DOACTION' == 0
.sort:reduce d358;
#endif
#endprocedure

#procedure Reduced358()
	#call Prepared358()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd358'
		#call MtoZ(Md358,Zd358,i,14)
		#call Reduce(d358)
		#call ZtoM(Zd358,Md358,i,14)
		#call Prepared358()
#else
		#if `USETURBO'
			#call TurboMd358()
		#endif
		#call insertionS(Md358,i6,i7,i12,i13,i14,i6,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md358b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond358()
#endif
	#endif
#endprocedure
*--#] reduce-d358 : 
*--#[ reduce-d357 :
#procedure Insertiond357()
* merge propagators with same momentum, and repeated dots
	if (count(Md357b,1)) Multiply replace_(Md357b,Md357c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md357c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md357c,dotmapMd357cR1)
	#call replace(i11,-j1/2-j2/2+j3/2+j8,j,j1,j2,j3,j8,Md357c,dotmapMd357cR2)
	#call replace(i12,-j4/2-j5/2+j6/2,j,j4,j5,j6,Md357c,dotmapMd357cR3)
	#call replace(i13,`Q2'/2+j2/2+j4/2-j7/2-j8+j9,j,j2,j4,j7,j8,j9,Md357c,dotmapMd357cR4)
	if (count(Md357c,1)) Multiply replace_(Md357c,Md357d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Md357d,1)) Multiply replace_(i1,j1,i2,j2,i3,j6,i4,j7,i5,j5,i6,j4,i7,j3);
	#call replace(i8,`Q2'/2+j1/2-j5/2-j9,j,j1,j5,j9,Md357d,dotmapMd357dR1)
	#call replace(i9,-`Q2'/2+j1/2-j5/2+j8,j,j1,j5,j8,Md357d,dotmapMd357dR2)
	if (count(Md357d,1)) Multiply replace_(Md357d,Md127,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd127 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared357()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-7 4-6 5-6 6-7 4-7 4-9
* Dots: p0.p4,p0.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md357*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd357 automorphism;

#call CheckRemovedPropagators(d357,9,7,2,4,5,6,7,8,9,1,3)
#if `$DOACTION' == 0
.sort:reduce d357;
#endif
#endprocedure

#procedure Reduced357()
	#call Prepared357()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd357'
		#call MtoZ(Md357,Zd357,i,14)
		#call Reduce(d357)
		#call ZtoM(Zd357,Md357,i,14)
		#call Prepared357()
#else
		#if `USETURBO'
			#call TurboMd357()
		#endif
		#call insertionS(Md357,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md357b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond357()
#endif
	#endif
#endprocedure
*--#] reduce-d357 : 
*--#[ reduce-d356 :
#procedure Insertiond356()
* merge propagators with same momentum, and repeated dots
	if (count(Md356b,1)) Multiply replace_(Md356b,Md356c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i11,i8,i10,i9,i12,i9,i13,i10,i14,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md356c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j5/2+j7/2+j9,j,j5,j7,j9,Md356c,dotmapMd356cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md356c,dotmapMd356cR2)
	#call replace(i12,j2/2-j3/2-j5/2+j6/2,j,j2,j3,j5,j6,Md356c,dotmapMd356cR3)
	#call replace(i13,j2/2+j4/2-j5/2,j,j2,j4,j5,Md356c,dotmapMd356cR4)
	if (count(Md356c,1)) Multiply replace_(Md356c,Md356d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d121
	if (count(Md356d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j6,i6,j5,i7,j7,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md356d,dotmapMd356dR1)
	if (count(Md356d,1)) Multiply replace_(Md356d,Md121,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd121 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared356()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-5 4-5 4-8 2-5 2-8 8-9
* Dots: p0.p3,p0.p4,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md356*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n3,$n7,$n4,$n5,$n6,$n8,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n11,$n10,$n9,$n3,$n7,$n4,$n5,$n6,$n8,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i6,i6,i4,i8,i3);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 3); Multiply sign_($n11+$n13+$n14)*replace_(i3,i8,i4,i6,i6,i4,i8,i3,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd356 automorphism;

#call CheckRemovedPropagators(d356,9,6,3,4,5,6,7,8,1,2,9)
#if `$DOACTION' == 0
.sort:reduce d356;
#endif
#endprocedure

#procedure Reduced356()
	#call Prepared356()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd356'
		#call MtoZ(Md356,Zd356,i,14)
		#call Reduce(d356)
		#call ZtoM(Zd356,Md356,i,14)
		#call Prepared356()
#else
		#if `USETURBO'
			#call TurboMd356()
		#endif
		#call insertionS(Md356,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md356b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond356()
#endif
	#endif
#endprocedure
*--#] reduce-d356 : 
*--#[ reduce-d355 :
#procedure Insertiond355()
* merge propagators with same momentum, and repeated dots
	if (count(Md355b,1)) Multiply replace_(Md355b,Md355c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md355c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j7/2,j,j5,j7,Md355c,dotmapMd355cR1)
	#call replace(i11,j1/2+j5/2-j6/2,j,j1,j5,j6,Md355c,dotmapMd355cR2)
	#call replace(i12,j2/2-j4/2+j5/2,j,j2,j4,j5,Md355c,dotmapMd355cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md355c,dotmapMd355cR4)
	if (count(Md355c,1)) Multiply replace_(Md355c,Md355d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d126
	if (count(Md355d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md355d,1)) Multiply replace_(Md355d,Md126,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd126 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared355()
* Topology: 0-1 1-2 2-3 3-4 3-5 4-5 4-8 2-5 1-2 1-8 8-9
* Dots: p0.p2,p0.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md355*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n2,$n6,$n3,$n4,$n5,$n7,$n8)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n3,$n4,$n5,$n7,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n6,$n5,$n4,$n3,$n2,$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i8,i2,i7,i3,i5,i5,i3,i7,i2,i8,i1);
elseif ($bestiso == 2); Multiply sign_($n11+$n14)*replace_(i2,i7,i3,i5,i5,i3,i7,i2);
elseif ($bestiso == 3); Multiply replace_(i1,i8,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd355 automorphism;

#call CheckRemovedPropagators(d355,9,6,2,3,4,5,6,7,1,8,9)
#if `$DOACTION' == 0
.sort:reduce d355;
#endif
#endprocedure

#procedure Reduced355()
	#call Prepared355()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd355'
		#call MtoZ(Md355,Zd355,i,14)
		#call Reduce(d355)
		#call ZtoM(Zd355,Md355,i,14)
		#call Prepared355()
#else
		#if `USETURBO'
			#call TurboMd355()
		#endif
		#call insertionS(Md355,i1,i8,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md355b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond355()
#endif
	#endif
#endprocedure
*--#] reduce-d355 : 
*--#[ reduce-d354 :
#procedure Insertiond354()
* merge propagators with same momentum, and repeated dots
	if (count(Md354b,1)) Multiply replace_(Md354b,Md354c,i7,i5,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md354c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j6/2+j7/2+j8,j,j6,j7,j8,Md354c,dotmapMd354cR1)
	#call replace(i11,j1/2+j3/2-j4/2-j9,j,j1,j3,j4,j9,Md354c,dotmapMd354cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md354c,dotmapMd354cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md354c,dotmapMd354cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md354c,dotmapMd354cR5)
	if (count(Md354c,1)) Multiply replace_(Md354c,Md354d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Md354d,1)) Multiply replace_(i1,j3,i2,j4,i3,j7,i4,j2,i5,j5,i6,j6,i7,j1,i8,j8);
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md354d,dotmapMd354dR1)
	if (count(Md354d,1)) Multiply replace_(Md354d,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared354()
* Topology: 0-1 1-2 1-6 2-3 2-6 3-5 3-5 3-8 5-6 6-8 8-9
* Dots: p0.p3,p1.p7,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md354*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd354 automorphism;

#call CheckRemovedPropagators(d354,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d354;
#endif
#endprocedure

#procedure Reduced354()
	#call Prepared354()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd354'
		#call MtoZ(Md354,Zd354,i,14)
		#call Reduce(d354)
		#call ZtoM(Zd354,Md354,i,14)
		#call Prepared354()
#else
		#if `USETURBO'
			#call TurboMd354()
		#endif
		#call insertionS(Md354,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md354b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond354()
#endif
	#endif
#endprocedure
*--#] reduce-d354 : 
*--#[ reduce-d353 :
#procedure Insertiond353()
* merge propagators with same momentum, and repeated dots
	if (count(Md353b,1)) Multiply replace_(Md353b,Md353c,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md353c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md353c,dotmapMd353cR1)
	#call replace(i11,`Q2'/2-j2/2+j4/2-j5/2+j6/2-j7/2-j8+j9,j,j2,j4,j5,j6,j7,j8,j9,Md353c,dotmapMd353cR2)
	#call replace(i12,j3/2+j4/2-j5/2,j,j3,j4,j5,Md353c,dotmapMd353cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md353c,dotmapMd353cR4)
	if (count(Md353c,1)) Multiply replace_(Md353c,Md353d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Md353d,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i4,j1,i5,j2,i6,j7,i7,j5);
	#call replace(i8,`Q2'/2+j1/2-j5/2+j9,j,j1,j5,j9,Md353d,dotmapMd353dR1)
	#call replace(i9,`Q2'/2+j1/2+j2/2+j3/2-j5/2-j7/2-j8+j9,j,j1,j2,j3,j5,j7,j8,j9,Md353d,dotmapMd353dR2)
	if (count(Md353d,1)) Multiply replace_(Md353d,Mfastar3,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOfastar3 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared353()
* Topology: 0-1 1-2 1-6 2-3 3-4 3-4 4-8 3-6 2-6 2-8 8-9
* Dots: p0.p3,p1.p3,p0.p4,p1.p4,p3.p4
* Apply automorphisms
if (match(Md353*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd353 automorphism;

#call CheckRemovedPropagators(d353,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d353;
#endif
#endprocedure

#procedure Reduced353()
	#call Prepared353()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd353'
		#call MtoZ(Md353,Zd353,i,14)
		#call Reduce(d353)
		#call ZtoM(Zd353,Md353,i,14)
		#call Prepared353()
#else
		#if `USETURBO'
			#call TurboMd353()
		#endif
		#call insertionS(Md353,i4,i5,i12,i13,i14,i4,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md353b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond353()
#endif
	#endif
#endprocedure
*--#] reduce-d353 : 
*--#[ reduce-d352 :
#procedure Insertiond352()
* merge propagators with same momentum, and repeated dots
	if (count(Md352b,1)) Multiply replace_(Md352b,Md352c,i6,i2,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md352c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md352c,dotmapMd352cR1)
	#call replace(i11,`Q2'/2-j1/2-j4/2+j5/2,j,j1,j4,j5,Md352c,dotmapMd352cR2)
	#call replace(i12,j8-j9,j,j8,j9,Md352c,dotmapMd352cR3)
	#call replace(i13,`Q2'/2+j3/2-j4/2,j,j3,j4,Md352c,dotmapMd352cR4)
	#call replace(i14,j4/2+j6/2-j7/2+j8,j,j4,j6,j7,j8,Md352c,dotmapMd352cR5)
	if (count(Md352c,1)) Multiply replace_(Md352c,Md352d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d130
	if (count(Md352d,1)) Multiply replace_(i1,j6,i2,j1,i3,j7,i4,j5,i5,j2,i6,j3,i7,j4,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md352d,dotmapMd352dR1)
	if (count(Md352d,1)) Multiply replace_(Md352d,Md130,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd130 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared352()
* Topology: 0-1 4-8 7-8 1-4 1-5 2-4 2-7 2-7 2-5 2-5 8-9
* Dots: p0.p8,p1.p8,p0.p6,p3.p6,p6.p8
* Apply automorphisms
if (match(Md352*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n11,$n10,$n11,$n10,$n6,$n7,$n9,$n8,$n5,$n2,$n1,$n4,$n3)
	#call hash(2,$n14,$n13,$n12,$n13,$n12,$n7,$n6,$n8,$n9,$n5,$n2,$n1,$n4,$n3)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n6,$n7,$n8,$n9,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n11,$n10,$n13,$n12,$n7,$n6,$n9,$n8,$n5,$n2,$n1,$n4,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i8,i7,i9,i8,i7,i9,i6,i12,i10,i13,i11);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i9,i7,i8,i8,i6,i9,i7,i10,i12,i11,i13);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i9,i7,i8,i8,i7,i9,i6);
elseif ($bestiso == 4); Multiply replace_(i8,i9,i9,i8);
elseif ($bestiso == 5); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 7); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i8,i7,i9,i8,i6,i9,i7,i10,i12,i11,i13,i12,i10,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd352 automorphism;

#call CheckRemovedPropagators(d352,9,5,1,2,3,4,5,6,7,8,9)
#if `$DOACTION' == 0
.sort:reduce d352;
#endif
#endprocedure

#procedure Reduced352()
	#call Prepared352()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd352'
		#call MtoZ(Md352,Zd352,i,14)
		#call Reduce(d352)
		#call ZtoM(Zd352,Md352,i,14)
		#call Prepared352()
#else
		#if `USETURBO'
			#call TurboMd352()
		#endif
		#call insertionS(Md352,i6,i7,i12,i13,i14,i6,`Q2',i3,i8,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md352b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond352()
#endif
	#endif
#endprocedure
*--#] reduce-d352 : 
*--#[ reduce-d351 :
#procedure Insertiond351()
* merge propagators with same momentum, and repeated dots
	if (count(Md351b,1)) Multiply replace_(Md351b,Md351c,i4,i3,i5,i4,i3,i5,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md351c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j7/2,j,j5,j7,Md351c,dotmapMd351cR1)
	#call replace(i11,j1/2+j5/2-j6/2,j,j1,j5,j6,Md351c,dotmapMd351cR2)
	#call replace(i12,j3/2-j4/2+j5/2,j,j3,j4,j5,Md351c,dotmapMd351cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md351c,dotmapMd351cR4)
	if (count(Md351c,1)) Multiply replace_(Md351c,Md351d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d131
	if (count(Md351d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md351d,1)) Multiply replace_(Md351d,Md131,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd131 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared351()
* Topology: 0-1 1-2 1-7 2-3 3-4 3-4 4-8 2-3 2-7 7-8 8-9
* Dots: p0.p4,p1.p4,p0.p3,p1.p3,p3.p4
* Apply automorphisms
if (match(Md351*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n4,$n5,$n7,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i7,i4,i5,i5,i4,i7,i3);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 3); Multiply replace_(i3,i7,i7,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd351 automorphism;

#call CheckRemovedPropagators(d351,9,5,1,2,6,8,9,3,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d351;
#endif
#endprocedure

#procedure Reduced351()
	#call Prepared351()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd351'
		#call MtoZ(Md351,Zd351,i,14)
		#call Reduce(d351)
		#call ZtoM(Zd351,Md351,i,14)
		#call Prepared351()
#else
		#if `USETURBO'
			#call TurboMd351()
		#endif
		#call insertionS(Md351,i3,i7,i12,i13,i14,i3,`Q2',i1,i4,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md351b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond351()
#endif
	#endif
#endprocedure
*--#] reduce-d351 : 
*--#[ reduce-d350 :
#procedure Insertiond350()
* merge propagators with same momentum, and repeated dots
	if (count(Md350b,1)) Multiply replace_(Md350b,Md350c,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md350c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md350c,dotmapMd350cR1)
	#call replace(i11,j1/2+j4/2-j6/2,j,j1,j4,j6,Md350c,dotmapMd350cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md350c,dotmapMd350cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md350c,dotmapMd350cR4)
	if (count(Md350c,1)) Multiply replace_(Md350c,Md350d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d126
	if (count(Md350d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j5,i5,j4,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md350d,1)) Multiply replace_(Md350d,Md126,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd126 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared350()
* Topology: 0-1 1-2 2-3 2-6 3-4 3-4 4-8 3-6 1-6 1-8 8-9
* Dots: p0.p1,p0.p2,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md350*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n2,$n6,$n4,$n5,$n3,$n7,$n8)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n2,$n6,$n5,$n4,$n3,$n7,$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i8,i2,i7,i4,i5,i5,i4,i7,i2,i8,i1);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 3); Multiply sign_($n11+$n14)*replace_(i1,i8,i2,i7,i7,i2,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd350 automorphism;

#call CheckRemovedPropagators(d350,9,6,1,2,3,6,7,8,4,5,9)
#if `$DOACTION' == 0
.sort:reduce d350;
#endif
#endprocedure

#procedure Reduced350()
	#call Prepared350()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd350'
		#call MtoZ(Md350,Zd350,i,14)
		#call Reduce(d350)
		#call ZtoM(Zd350,Md350,i,14)
		#call Prepared350()
#else
		#if `USETURBO'
			#call TurboMd350()
		#endif
		#call insertionS(Md350,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md350b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond350()
#endif
	#endif
#endprocedure
*--#] reduce-d350 : 
*--#[ reduce-d349 :
#procedure Insertiond349()
* merge propagators with same momentum, and repeated dots
	if (count(Md349b,1)) Multiply replace_(Md349b,Md349c,i6,i4,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md349c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j5/2+j7/2+j8,j,j5,j7,j8,Md349c,dotmapMd349cR1)
	#call replace(i11,-`Q2'/2+j2/2+j4/2-j5/2-j6/2+j7/2+j8,j,j2,j4,j5,j6,j7,j8,Md349c,dotmapMd349cR2)
	#call replace(i12,j3/2+j4/2-j5/2,j,j3,j4,j5,Md349c,dotmapMd349cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md349c,dotmapMd349cR4)
	if (count(Md349c,1)) Multiply replace_(Md349c,Md349d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2 and change topology to fastar2
	if (count(Md349d,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i4,j2,i5,j1,i6,j7,i7,j5);
	#call replace(i8,`Q2'/2+j1/2-j5/2+j9,j,j1,j5,j9,Md349d,dotmapMd349dR1)
	#call replace(i9,`Q2'/2+j1/2+j2/2+j3/2-j5/2-j7/2-j8+j9,j,j1,j2,j3,j5,j7,j8,j9,Md349d,dotmapMd349dR2)
	if (count(Md349d,1)) Multiply replace_(Md349d,Mfastar2,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOfastar2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared349()
* Topology: 0-1 1-2 1-6 2-3 3-5 3-5 3-8 5-6 2-6 2-8 8-9
* Dots: p0.p3,p1.p3,p0.p4,p1.p4,p3.p4
* Apply automorphisms
if (match(Md349*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd349 automorphism;

#call CheckRemovedPropagators(d349,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d349;
#endif
#endprocedure

#procedure Reduced349()
	#call Prepared349()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd349'
		#call MtoZ(Md349,Zd349,i,14)
		#call Reduce(d349)
		#call ZtoM(Zd349,Md349,i,14)
		#call Prepared349()
#else
		#if `USETURBO'
			#call TurboMd349()
		#endif
		#call insertionS(Md349,i4,i5,i12,i13,i14,i4,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md349b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond349()
#endif
	#endif
#endprocedure
*--#] reduce-d349 : 
*--#[ reduce-d348 :
#procedure Insertiond348()
* merge propagators with same momentum, and repeated dots
	if (count(Md348b,1)) Multiply replace_(Md348b,Md348c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i11,i8,i10,i9,i12,i9,i13,i10,i14,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md348c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j3/2+j4/2-j5/2,j,j3,j4,j5,Md348c,dotmapMd348cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2,j,j1,j2,Md348c,dotmapMd348cR2)
	#call replace(i12,`Q2'/2+j4/2-j7/2,j,j4,j7,Md348c,dotmapMd348cR3)
	#call replace(i13,j1/2+j4/2-j6/2,j,j1,j4,j6,Md348c,dotmapMd348cR4)
	if (count(Md348c,1)) Multiply replace_(Md348c,Md348d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p6,p3.p6 and change topology to d133
	if (count(Md348d,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i4,j2,i5,j7,i6,j5,i7,j1,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md348d,dotmapMd348dR1)
	if (count(Md348d,1)) Multiply replace_(Md348d,Md133,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd133 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared348()
* Topology: 0-1 1-2 1-7 2-3 3-4 3-4 4-8 2-4 2-7 7-8 8-9
* Dots: p0.p3,p1.p3,p0.p4,p1.p4,p4.p6
* Apply automorphisms
if (match(Md348*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd348 automorphism;

#call CheckRemovedPropagators(d348,9,6,1,2,3,6,8,9,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d348;
#endif
#endprocedure

#procedure Reduced348()
	#call Prepared348()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd348'
		#call MtoZ(Md348,Zd348,i,14)
		#call Reduce(d348)
		#call ZtoM(Zd348,Md348,i,14)
		#call Prepared348()
#else
		#if `USETURBO'
			#call TurboMd348()
		#endif
		#call insertionS(Md348,i4,i5,i12,i13,i14,i4,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md348b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond348()
#endif
	#endif
#endprocedure
*--#] reduce-d348 : 
*--#[ reduce-d347 :
#procedure Insertiond347()
* merge propagators with same momentum, and repeated dots
	if (count(Md347b,1)) Multiply replace_(Md347b,Md347c,i16,i9,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md347c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j1/2-j2/2-j9,j,j1,j2,j9,Md347c,dotmapMd347cR1)
	#call replace(i11,-`Q2'/2+j1/2+j6/2-j7/2-j9,j,j1,j6,j7,j9,Md347c,dotmapMd347cR2)
	#call replace(i12,-`Q2'/2+j1/2-j2/2+j4/2+j6/2-j8/2-j9,j,j1,j2,j4,j6,j8,j9,Md347c,dotmapMd347cR3)
	#call replace(i13,j2/2-j6/2-j7/2,j,j2,j6,j7,Md347c,dotmapMd347cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md347c,dotmapMd347cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md347c,dotmapMd347cR6)
	#call replace(i16,j1/2+j3/2-j5/2,j,j1,j3,j5,Md347c,dotmapMd347cR7)
	#call replace(i17,j2/2-j6/2+j7/2+j9,j,j2,j6,j7,j9,Md347c,dotmapMd347cR8)
	#call replace(i18,j2/2-j5/2-j6/2+j8/2+j9,j,j2,j5,j6,j8,j9,Md347c,dotmapMd347cR9)
	if (count(Md347c,1)) Multiply replace_(Md347c,Md347d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d198
	if (count(Md347d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md347d,1)) Multiply replace_(Md347d,Md198,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd198 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared347()
* Topology: 0-1 4-8 2-8 1-4 1-5 3-4 2-5 2-5 2-3 3-5 8-9
* Dots: p0.p8,p0.p6,p1.p6,p3.p6,p6.p8
* Apply automorphisms
if (match(Md347*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n6,$n7,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n12,$n13,$n11,$n10,$n8,$n9,$n7,$n6,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i8,i9,i9,i8,i12,i13,i13,i12);
elseif ($bestiso == 3); Multiply replace_(i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd347 automorphism;

#call CheckRemovedPropagators(d347,9,7,1,2,3,4,5,8,9,6,7)
#if `$DOACTION' == 0
.sort:reduce d347;
#endif
#endprocedure

#procedure Reduced347()
	#call Prepared347()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd347'
		#call MtoZ(Md347,Zd347,i,14)
		#call Reduce(d347)
		#call ZtoM(Zd347,Md347,i,14)
		#call Prepared347()
#else
		#if `USETURBO'
			#call TurboMd347()
		#endif
		#call insertionS(Md347,i6,i7,i11,i12,i13,i14,i6,`Q2',i1,i3,i8,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md347b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond347()
#endif
	#endif
#endprocedure
*--#] reduce-d347 : 
*--#[ reduce-d346 :
#procedure Insertiond346()
* merge propagators with same momentum, and repeated dots
	if (count(Md346b,1)) Multiply replace_(Md346b,Md346c,i3,i2,i2,i3,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i11,i9,i12,i10,i13,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md346c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2+j3/2,j,j1,j2,j3,Md346c,dotmapMd346cR1)
	#call replace(i11,j3/2+j4/2-j5/2,j,j3,j4,j5,Md346c,dotmapMd346cR2)
	#call replace(i12,`Q2'/2+j4/2-j7/2,j,j4,j7,Md346c,dotmapMd346cR3)
	#call replace(i13,j1/2+j4/2-j6/2,j,j1,j4,j6,Md346c,dotmapMd346cR4)
	if (count(Md346c,1)) Multiply replace_(Md346c,Md346d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p5 and change topology to d134
	if (count(Md346d,1)) Multiply replace_(i1,j4,i2,j6,i3,j5,i4,j2,i5,j7,i6,j3,i7,j1,i9,j9);
	#call replace(i8,`Q2'/2-j1/2+j2/2-j8,j,j1,j2,j8,Md346d,dotmapMd346dR1)
	if (count(Md346d,1)) Multiply replace_(Md346d,Md134,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd134 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared346()
* Topology: 0-1 1-2 2-3 2-6 3-4 3-4 4-8 4-6 1-6 1-8 8-9
* Dots: p0.p1,p0.p2,p0.p4,p1.p4,p4.p6
* Apply automorphisms
if (match(Md346*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd346 automorphism;

#call CheckRemovedPropagators(d346,9,6,1,2,3,6,7,8,4,5,9)
#if `$DOACTION' == 0
.sort:reduce d346;
#endif
#endprocedure

#procedure Reduced346()
	#call Prepared346()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd346'
		#call MtoZ(Md346,Zd346,i,14)
		#call Reduce(d346)
		#call ZtoM(Zd346,Md346,i,14)
		#call Prepared346()
#else
		#if `USETURBO'
			#call TurboMd346()
		#endif
		#call insertionS(Md346,i4,i5,i12,i13,i14,i4,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md346b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond346()
#endif
	#endif
#endprocedure
*--#] reduce-d346 : 
*--#[ reduce-d345 :
#procedure Prepared345()
* Topology: 0-1 1-2 1-6 2-3 3-4 3-5 4-5 5-6 2-6 2-4 4-9
* Dots: p0.p3,p0.p5,p0.p7,p1.p3,p1.p5
* Apply automorphisms
if (match(Md345*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd345 automorphism;

#call CheckRemovedPropagators(d345,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4 and change topology to d266
	if (count(Md345M1,1)) Multiply replace_(i2,j4,i3,j8,i4,j3,i5,j7,i6,j1,i7,j6,i8,j5,i9,j2,i12,j11);
	#call replace(i1,`Q2'-2*j12+j4,j,j4,j12,Md345M1,dotmapMd345M1R1)
	#call replace(i10,`Q2'-j10+j11,j,j10,j11,Md345M1,dotmapMd345M1R2)
	#call replace(i11,j11-j9,j,j9,j11,Md345M1,dotmapMd345M1R3)
	#call replace(i13,`Q2'-j10+j11-j12+j14+j4/2-j5/2+j6/2,j,j4,j5,j6,j10,j11,j12,j14,Md345M1,dotmapMd345M1R4)
	#call replace(i14,j11+j13+j4/2-j5/2+j6/2-j9,j,j4,j5,j6,j9,j11,j13,Md345M1,dotmapMd345M1R5)
	if (count(Md345M1,1)) Multiply replace_(Md345M1,Md266,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd266 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p0.p4,p1.p4,p2.p4,p4.p6 and change topology to d219
	if (count(Md345M2,1)) Multiply replace_(i1,j4,i3,j6,i4,j1,i5,j7,i6,j3,i7,j8,i8,j5,i9,j2,i13,j14);
	#call replace(i2,`Q2'-2*j11+j4,j,j4,j11,Md345M2,dotmapMd345M2R1)
	#call replace(i10,`Q2'/2-j10+j13+j14-j4/2+j5/2-j8/2,j,j4,j5,j8,j10,j13,j14,Md345M2,dotmapMd345M2R2)
	#call replace(i11,`Q2'/2-j10+j13+j14-j4/2+j5/2-j8/2-j9,j,j4,j5,j8,j9,j10,j13,j14,Md345M2,dotmapMd345M2R3)
	#call replace(i12,-`Q2'/2+j13+j14-j4/2+j5/2-j8/2,j,j4,j5,j8,j13,j14,Md345M2,dotmapMd345M2R4)
	#call replace(i14,-j12+j14,j,j12,j14,Md345M2,dotmapMd345M2R5)
	if (count(Md345M2,1)) Multiply replace_(Md345M2,Md219,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd219 "1"
#endif

#if `$M3'
* map dots to p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d213
	if (count(Md345M3,1)) Multiply replace_(i1,j4,i2,j6,i4,j1,i5,j5,i6,j3,i7,j8,i8,j7,i9,j2,i11,j9);
	#call replace(i3,j1+2*j14+j5,j,j1,j5,j14,Md345M3,dotmapMd345M3R1)
	#call replace(i10,j11+j9,j,j9,j11,Md345M3,dotmapMd345M3R2)
	#call replace(i12,-`Q2'/2-j1/2+j11+j12+j2/2-j3/2+j9,j,j1,j2,j3,j9,j11,j12,Md345M3,dotmapMd345M3R3)
	#call replace(i13,-`Q2'/2-j1/2-j10+j11+j12+j13+j2/2-j3/2+j6/2-j7/2+j8/2+j9,j,j1,j2,j3,j6,j7,j8,j9,j10,j11,j12,j13,Md345M3,dotmapMd345M3R4)
	#call replace(i14,-`Q2'/2-j1/2-j10+j11+j12+j2/2-j3/2+j6/2-j7/2+j8/2+j9,j,j1,j2,j3,j6,j7,j8,j9,j10,j11,j12,Md345M3,dotmapMd345M3R5)
	if (count(Md345M3,1)) Multiply replace_(Md345M3,Md213,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd213 "1"
#endif

#if `$M4'
* map dots to p0.p4,p1.p4,p0.p3,p1.p3,p3.p4,p3.p5 and change topology to d232
	if (count(Md345M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j11,i11,j9,i13,j12,i14,j10);
	#call replace(i4,-2*j13+j3+j4,j,j3,j4,j13,Md345M4,dotmapMd345M4R1)
	#call replace(i12,-`Q2'/2+j11+j13+j14-j3/2-j6/2+j8/2,j,j3,j6,j8,j11,j13,j14,Md345M4,dotmapMd345M4R2)
	if (count(Md345M4,1)) Multiply replace_(Md345M4,Md232,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd232 "1"
#endif

#if `$M5'
* map dots to p0.p4,p1.p2,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d220
	if (count(Md345M5,1)) Multiply replace_(i1,j2,i2,j3,i3,j7,i4,j5,i6,j8,i7,j4,i8,j6,i9,j1,i12,j9);
	#call replace(i5,-2*j11+2*j12-2*j14+j5+j7,j,j5,j7,j11,j12,j14,Md345M5,dotmapMd345M5R1)
	#call replace(i10,`Q2'/2-j1/2+j11-j12-j5/2+j8/2+j9,j,j1,j5,j8,j9,j11,j12,Md345M5,dotmapMd345M5R2)
	#call replace(i11,`Q2'/2-j1/2-j12-j5/2+j8/2+j9,j,j1,j5,j8,j9,j12,Md345M5,dotmapMd345M5R3)
	#call replace(i13,`Q2'/2-j10+j2/2+j4/2-j6/2+j9,j,j2,j4,j6,j9,j10,Md345M5,dotmapMd345M5R4)
	#call replace(i14,`Q2'/2-j10-j13+j2/2+j4/2-j6/2+j9,j,j2,j4,j6,j9,j10,j13,Md345M5,dotmapMd345M5R5)
	if (count(Md345M5,1)) Multiply replace_(Md345M5,Md220,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd220 "1"
#endif

#if `$M6'
* map dots to p0.p2,p0.p4,p1.p4,p0.p3,p1.p3,p2.p3 and change topology to d234
	if (count(Md345M6,1)) Multiply replace_(i1,j5,i2,j1,i3,j4,i4,j3,i5,j6,i7,j2,i8,j8,i9,j7,i10,j10,i12,j9);
	#call replace(i6,-`Q2'+2*j10+2*j14-j4+j6+j7-2*j9,j,j4,j6,j7,j9,j10,j14,Md345M6,dotmapMd345M6R1)
	#call replace(i11,j10-j12,j,j10,j12,Md345M6,dotmapMd345M6R2)
	#call replace(i13,j10-j11,j,j10,j11,Md345M6,dotmapMd345M6R3)
	#call replace(i14,j10-j11-j12+j13,j,j10,j11,j12,j13,Md345M6,dotmapMd345M6R4)
	if (count(Md345M6,1)) Multiply replace_(Md345M6,Md234,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd234 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(Md345M7,1)) Multiply replace_(i1,j3,i2,j1,i3,j7,i4,j5,i5,j6,i6,j2,i8,j8,i9,j4,i11,j11);
	#call replace(i7,2*j13+j2+j6,j,j2,j6,j13,Md345M7,dotmapMd345M7R1)
	#call replace(i10,`Q2'-j10+j11+j9,j,j9,j10,j11,Md345M7,dotmapMd345M7R2)
	#call replace(i12,j11+j9,j,j9,j11,Md345M7,dotmapMd345M7R3)
	#call replace(i13,`Q2'/2-j10+j11+j13+j14+j2/2+j3/2+j6/2-j8/2+j9,j,j2,j3,j6,j8,j9,j10,j11,j13,j14,Md345M7,dotmapMd345M7R4)
	#call replace(i14,j1/2+j11+j12+j13+j2/2+j6/2-j8/2,j,j1,j2,j6,j8,j11,j12,j13,Md345M7,dotmapMd345M7R5)
	if (count(Md345M7,1)) Multiply replace_(Md345M7,Mbebe,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPObebe "1"
#endif

#if `$M8'
* map dots to p0.p3,p0.p4,p0.p6,p1.p3,p1.p4,p1.p6 and change topology to d244
	if (count(Md345M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i13,j12);
	#call replace(i8,-2*j10+2*j11-2*j12+2*j13-2*j14+j2+j7+2*j9,j,j2,j7,j9,j10,j11,j12,j13,j14,Md345M8,dotmapMd345M8R1)
	#call replace(i11,-j10+j9,j,j9,j10,Md345M8,dotmapMd345M8R2)
	#call replace(i12,-j10+j11+j9,j,j9,j10,j11,Md345M8,dotmapMd345M8R3)
	#call replace(i14,j12-j13,j,j12,j13,Md345M8,dotmapMd345M8R4)
	if (count(Md345M8,1)) Multiply replace_(Md345M8,Md244,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd244 "1"
#endif

#if `$M9'
* map dots to p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6 and change topology to d215
	if (count(Md345M9,1)) Multiply replace_(i1,j3,i2,j2,i3,j6,i4,j7,i5,j5,i6,j4,i7,j8,i8,j1,i10,j12);
	#call replace(i9,-2*j12+2*j13+2*j14-j2+j3+j6+j8-2*j9,j,j2,j3,j6,j8,j9,j12,j13,j14,Md345M9,dotmapMd345M9R1)
	#call replace(i11,-`Q2'/2-j10-j2/2+j3/2-j9,j,j2,j3,j9,j10,Md345M9,dotmapMd345M9R2)
	#call replace(i12,-`Q2'/2-j2/2+j3/2-j9,j,j2,j3,j9,Md345M9,dotmapMd345M9R3)
	#call replace(i13,j12-j14,j,j12,j14,Md345M9,dotmapMd345M9R4)
	#call replace(i14,-`Q2'/2-j1/2-j10-j11+j3/2-j4/2+j5/2-j9,j,j1,j3,j4,j5,j9,j10,j11,Md345M9,dotmapMd345M9R5)
	if (count(Md345M9,1)) Multiply replace_(Md345M9,Md215,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd215 "1"
#endif
.sort:reduce d345;
#endif
#endprocedure

#procedure Reduced345()
	#call Prepared345()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd345'
		#call MtoZ(Md345,Zd345,i,14)
		#call Reduce(d345)
		#call ZtoM(Zd345,Md345,i,14)
#else
		#if `USETURBO'
			#call TurboMd345()
		#endif
		#call triangleS(Md345,i4,i6,i5,i3,i7,i11,i14,0,0)
#endif
		#call Prepared345()
	#endif
#endprocedure
*--#] reduce-d345 : 
*--#[ reduce-d344 :
#procedure Insertiond344()
* merge propagators with same momentum, and repeated dots
	if (count(Md344b,1)) Multiply replace_(Md344b,Md344c,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i9,i12,i10,i13,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md344c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j2/2+j5/2-j6/2+j9,j,j2,j5,j6,j9,Md344c,dotmapMd344cR1)
	#call replace(i11,`Q2'/2+j3/2+j5/2-j7/2-j8+j9,j,j3,j5,j7,j8,j9,Md344c,dotmapMd344cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md344c,dotmapMd344cR3)
	#call replace(i13,j1/2+j3/2-j4/2,j,j1,j3,j4,Md344c,dotmapMd344cR4)
	if (count(Md344c,1)) Multiply replace_(Md344c,Md344d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Md344d,1)) Multiply replace_(i1,j1,i2,j5,i3,j6,i4,j2,i5,j4,i6,j7,i7,j3,i9,j9);
	#call replace(i8,`Q2'/2+j1/2-j5/2-j8,j,j1,j5,j8,Md344d,dotmapMd344dR1)
	if (count(Md344d,1)) Multiply replace_(Md344d,Md135,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd135 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared344()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-5 3-5 5-6 6-7 3-7 3-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md344*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd344 automorphism;

#call CheckRemovedPropagators(d344,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d344;
#endif
#endprocedure

#procedure Reduced344()
	#call Prepared344()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd344'
		#call MtoZ(Md344,Zd344,i,14)
		#call Reduce(d344)
		#call ZtoM(Zd344,Md344,i,14)
		#call Prepared344()
#else
		#if `USETURBO'
			#call TurboMd344()
		#endif
		#call insertionS(Md344,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md344b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond344()
#endif
	#endif
#endprocedure
*--#] reduce-d344 : 
*--#[ reduce-d343 :
#procedure Insertiond343()
* merge propagators with same momentum, and repeated dots
	if (count(Md343b,1)) Multiply replace_(Md343b,Md343c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md343c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j6/2-j8/2,j,j6,j8,Md343c,dotmapMd343cR1)
	#call replace(i11,j1/2+j6/2-j7/2,j,j1,j6,j7,Md343c,dotmapMd343cR2)
	#call replace(i12,j3/2-j5/2+j6/2,j,j3,j5,j6,Md343c,dotmapMd343cR3)
	#call replace(i13,j3/2-j5/2-j6/2,j,j3,j5,j6,Md343c,dotmapMd343cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md343c,dotmapMd343cR5)
	#call replace(i15,-`Q2'/2-j6/2+j8/2+j9,j,j6,j8,j9,Md343c,dotmapMd343cR6)
	#call replace(i16,j1/2+j3/2-j4/2,j,j1,j3,j4,Md343c,dotmapMd343cR7)
	#call replace(i17,j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,Md343c,dotmapMd343cR8)
	#call replace(i18,j3/2+j5/2-j6/2,j,j3,j5,j6,Md343c,dotmapMd343cR9)
	if (count(Md343c,1)) Multiply replace_(Md343c,Md343d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4 and change topology to d199
	if (count(Md343d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,`Q2'/2+j1/2-j2/2-j9,j,j1,j2,j9,Md343d,dotmapMd343dR1)
	if (count(Md343d,1)) Multiply replace_(Md343d,Md199,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd199 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared343()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-5 3-7 3-7 5-6 6-7 7-9
* Dots: p0.p3,p0.p6,p1.p6,p3.p6,p5.p6
* Apply automorphisms
if (match(Md343*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd343 automorphism;

#call CheckRemovedPropagators(d343,9,7,1,2,3,4,5,8,9,6,7)
#if `$DOACTION' == 0
.sort:reduce d343;
#endif
#endprocedure

#procedure Reduced343()
	#call Prepared343()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd343'
		#call MtoZ(Md343,Zd343,i,14)
		#call Reduce(d343)
		#call ZtoM(Zd343,Md343,i,14)
		#call Prepared343()
#else
		#if `USETURBO'
			#call TurboMd343()
		#endif
		#call insertionS(Md343,i6,i7,i11,i12,i13,i14,i6,`Q2',i1,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md343b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond343()
#endif
	#endif
#endprocedure
*--#] reduce-d343 : 
*--#[ reduce-d342 :
#procedure Insertiond342()
* merge propagators with same momentum, and repeated dots
	if (count(Md342b,1)) Multiply replace_(Md342b,Md342c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md342c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'-j8-j9,j,j8,j9,Md342c,dotmapMd342cR1)
	#call replace(i11,`Q2'/2-j1/2+j2/2-j5/2-j9,j,j1,j2,j5,j9,Md342c,dotmapMd342cR2)
	#call replace(i12,-j3/2-j5/2+j6/2,j,j3,j5,j6,Md342c,dotmapMd342cR3)
	#call replace(i13,-`Q2'/2-j4/2+j7/2+j8,j,j4,j7,j8,Md342c,dotmapMd342cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md342c,dotmapMd342cR5)
	if (count(Md342c,1)) Multiply replace_(Md342c,Md342d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d136
	if (count(Md342d,1)) Multiply replace_(i1,j1,i2,j6,i3,j7,i4,j2,i5,j5,i6,j4,i7,j3);
	#call replace(i8,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Md342d,dotmapMd342dR1)
	#call replace(i9,`Q2'/2-j2/2+j3/2-j8,j,j2,j3,j8,Md342d,dotmapMd342dR2)
	if (count(Md342d,1)) Multiply replace_(Md342d,Md136,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd136 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared342()
* Topology: 0-1 1-5 1-5 1-4 1-7 4-6 4-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p0.p4,p0.p1,p1.p3,p1.p5
* Apply automorphisms
if (match(Md342*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n10,$n11,$n6,$n5,$n7,$n9,$n8,$n3,$n4,$n1,$n2)
endif;
if (($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n10,$n11,$n6,$n5,$n7,$n9,$n8,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 1); Multiply sign_($n14)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i8,i6,i9,i8,i5,i9,i6,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply sign_($n14)*replace_(i3,i4,i4,i3,i5,i8,i6,i9,i8,i5,i9,i6,i10,i11,i11,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd342 automorphism;

#call CheckRemovedPropagators(d342,9,7,3,4,5,6,7,8,9,1,2)
#if `$DOACTION' == 0
.sort:reduce d342;
#endif
#endprocedure

#procedure Reduced342()
	#call Prepared342()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd342'
		#call MtoZ(Md342,Zd342,i,14)
		#call Reduce(d342)
		#call ZtoM(Zd342,Md342,i,14)
		#call Prepared342()
#else
		#if `USETURBO'
			#call TurboMd342()
		#endif
		#call insertionS(Md342,i1,i2,i12,i13,i14,i1,`Q2',i3,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md342b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond342()
#endif
	#endif
#endprocedure
*--#] reduce-d342 : 
*--#[ reduce-d341 :
#procedure Prepared341()
* Topology: 0-1 1-2 2-3 2-5 3-5 3-7 3-8 1-5 1-7 7-8 8-9
* Dots: p0.p1,p0.p3,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md341*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n3+$n1+$n7)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n2,$n3,$n4,$n7,$n3+$n7+$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n14)*replace_(i1,i7,i2,i4,i4,i2,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd341 automorphism;

#call CheckRemovedPropagators(d341,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4,p1.p4,p0.p3,p1.p3,p2.p3 and change topology to d234
	if (count(Md341M1,1)) Multiply replace_(i2,j7,i3,j3,i4,j4,i5,j8,i6,j5,i7,j6,i8,j2,i9,j1,i11,j12);
	#call replace(i1,2*j12-2*j14-j4+j6+j7,j,j4,j6,j7,j12,j14,Md341M1,dotmapMd341M1R1)
	#call replace(i10,`Q2'+j10+j12-j9,j,j9,j10,j12,Md341M1,dotmapMd341M1R2)
	#call replace(i12,`Q2'/2+j1/2-j5/2-j9,j,j1,j5,j9,Md341M1,dotmapMd341M1R3)
	#call replace(i13,-j10+j11+j13-j14-j4/2-j5/2+j7/2+j8/2,j,j4,j5,j7,j8,j10,j11,j13,j14,Md341M1,dotmapMd341M1R4)
	#call replace(i14,j13-j14,j,j13,j14,Md341M1,dotmapMd341M1R5)
	if (count(Md341M1,1)) Multiply replace_(Md341M1,Md234,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd234 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d236
	if (count(Md341M2,1)) Multiply replace_(i1,j3,i3,j4,i4,j5,i5,j7,i6,j1,i7,j6,i8,j8,i9,j2,i10,j9,i11,j12);
	#call replace(i2,-2*j14+j3+j4,j,j3,j4,j14,Md341M2,dotmapMd341M2R1)
	#call replace(i12,-`Q2'/2-j1/2+j10+j2/2+j9,j,j1,j2,j9,j10,Md341M2,dotmapMd341M2R2)
	#call replace(i13,-`Q2'/2+j10-j11+j3/2-j6/2+j8/2+j9,j,j3,j6,j8,j9,j10,j11,Md341M2,dotmapMd341M2R3)
	#call replace(i14,-j13+j14-j4/2+j5/2-j6/2,j,j4,j5,j6,j13,j14,Md341M2,dotmapMd341M2R4)
	if (count(Md341M2,1)) Multiply replace_(Md341M2,Md236,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd236 "1"
#endif

#if `$M3'
* map dots to p0.p5,p1.p5,p0.p3,p1.p3,p3.p5,p3.p6 and change topology to d226
	if (count(Md341M3,1)) Multiply replace_(i1,j5,i2,j3,i4,j4,i5,j7,i6,j1,i7,j6,i8,j8,i9,j2,i10,j9);
	#call replace(i3,-2*j13+j3+j5,j,j3,j5,j13,Md341M3,dotmapMd341M3R1)
	#call replace(i11,-j11+j9,j,j9,j11,Md341M3,dotmapMd341M3R2)
	#call replace(i12,-j1/2+j13+j14+j2/2-j3/2+j4/2-j8/2,j,j1,j2,j3,j4,j8,j13,j14,Md341M3,dotmapMd341M3R3)
	#call replace(i13,-j10+j13+j14-j3/2+j4/2+j5/2-j6/2,j,j3,j4,j5,j6,j10,j13,j14,Md341M3,dotmapMd341M3R4)
	#call replace(i14,-j10+j12-j3/2+j4/2+j5/2-j6/2,j,j3,j4,j5,j6,j10,j12,Md341M3,dotmapMd341M3R5)
	if (count(Md341M3,1)) Multiply replace_(Md341M3,Md226,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd226 "1"
#endif

#if `$M4'
* map dots to p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d236
	if (count(Md341M4,1)) Multiply replace_(i1,j6,i2,j4,i3,j5,i5,j7,i6,j1,i7,j3,i8,j8,i9,j2,i10,j10);
	#call replace(i4,-`Q2'+2*j10-2*j14+j5-j6+j8+2*j9,j,j5,j6,j8,j9,j10,j14,Md341M4,dotmapMd341M4R1)
	#call replace(i11,j10-j12,j,j10,j12,Md341M4,dotmapMd341M4R2)
	#call replace(i12,-`Q2'/2-j1/2+j10+j2/2+j9,j,j1,j2,j9,j10,Md341M4,dotmapMd341M4R3)
	#call replace(i13,-j1/2+j11-j3/2+j6/2+j7/2,j,j1,j3,j6,j7,j11,Md341M4,dotmapMd341M4R4)
	#call replace(i14,-j1/2+j11+j13-j14-j3/2-j4/2+j5/2+j7/2,j,j1,j3,j4,j5,j7,j11,j13,j14,Md341M4,dotmapMd341M4R5)
	if (count(Md341M4,1)) Multiply replace_(Md341M4,Md236,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd236 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p4,p0.p6,p1.p3,p1.p4,p1.p6 and change topology to d244
	if (count(Md341M5,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j7,i6,j1,i7,j6,i8,j8,i9,j2,i10,j10);
	#call replace(i5,-`Q2'+j1+2*j10+2*j11-2*j13-2*j14+j8,j,j1,j8,j10,j11,j13,j14,Md341M5,dotmapMd341M5R1)
	#call replace(i11,j10-j9,j,j9,j10,Md341M5,dotmapMd341M5R2)
	#call replace(i12,-`Q2'/2-j1/2+j10+j11+j2/2,j,j1,j2,j10,j11,Md341M5,dotmapMd341M5R3)
	#call replace(i13,-`Q2'/2+j10+j11-j13+j4/2-j6/2+j8/2,j,j4,j6,j8,j10,j11,j13,Md341M5,dotmapMd341M5R4)
	#call replace(i14,j12-j13-j3/2+j4/2-j6/2+j7/2,j,j3,j4,j6,j7,j12,j13,Md341M5,dotmapMd341M5R5)
	if (count(Md341M5,1)) Multiply replace_(Md341M5,Md244,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd244 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4 and change topology to d256
	if (count(Md341M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j8,i5,j4,i7,j7,i8,j6,i9,j5,i10,j9,i12,j12,i13,j13);
	#call replace(i6,`Q2'-2*j11-2*j12+j5,j,j5,j11,j12,Md341M6,dotmapMd341M6R1)
	#call replace(i11,-j10+j9,j,j9,j10,Md341M6,dotmapMd341M6R2)
	#call replace(i14,j13-j14,j,j13,j14,Md341M6,dotmapMd341M6R3)
	if (count(Md341M6,1)) Multiply replace_(Md341M6,Md256,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd256 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p4,p1.p4,p0.p3,p1.p3,p2.p3 and change topology to d234
	if (count(Md341M7,1)) Multiply replace_(i1,j3,i2,j4,i3,j6,i4,j7,i5,j8,i6,j5,i8,j2,i9,j1,i10,j12);
	#call replace(i7,`Q2'-2*j12+2*j14+j2+j3-2*j9,j,j2,j3,j9,j12,j14,Md341M7,dotmapMd341M7R1)
	#call replace(i11,-j10+j12,j,j10,j12,Md341M7,dotmapMd341M7R2)
	#call replace(i12,`Q2'/2+j1/2-j5/2-j9,j,j1,j5,j9,Md341M7,dotmapMd341M7R3)
	#call replace(i13,j13-j14,j,j13,j14,Md341M7,dotmapMd341M7R4)
	#call replace(i14,-`Q2'/2+j10-j11+j13-j14-j2/2-j4/2+j7/2+j9,j,j2,j4,j7,j9,j10,j11,j13,j14,Md341M7,dotmapMd341M7R5)
	if (count(Md341M7,1)) Multiply replace_(Md341M7,Md234,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd234 "1"
#endif

#if `$M8'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md341M8,1)) Multiply replace_(i1,j4,i2,j8,i3,j5,i4,j7,i5,j1,i6,j2,i7,j6,i9,j3,i10,j13,i11,j14,i12,-j12,i13,-j9,i14,-j10);
	#call replace(i8,-j1-2*j11+2*j12+j3-2*j9,j,j1,j3,j9,j11,j12,Md341M8,dotmapMd341M8R1)
	if (count(Md341M8,1)) Multiply replace_(Md341M8,Md281,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd281 "1"
#endif

#if `$M9'
* map dots to p0.p1,p0.p2,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d265
	if (count(Md341M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j9,i12,j11,i13,j12);
	#call replace(i9,2*j11-2*j13+2*j14+j5+j8,j,j5,j8,j11,j13,j14,Md341M9,dotmapMd341M9R1)
	#call replace(i11,-j10+j9,j,j9,j10,Md341M9,dotmapMd341M9R2)
	#call replace(i14,j12-j13,j,j12,j13,Md341M9,dotmapMd341M9R3)
	if (count(Md341M9,1)) Multiply replace_(Md341M9,Md265,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd265 "1"
#endif
.sort:reduce d341;
#endif
#endprocedure

#procedure Reduced341()
	#call Prepared341()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd341'
		#call MtoZ(Md341,Zd341,i,14)
		#call Reduce(d341)
		#call ZtoM(Zd341,Md341,i,14)
#else
		#if `USETURBO'
			#call TurboMd341()
		#endif
		#call triangleS(Md341,i2,i4,i3,i1,i7,i11,i14,0,0)
#endif
		#call Prepared341()
	#endif
#endprocedure
*--#] reduce-d341 : 
*--#[ reduce-d340 :
#procedure Insertiond340()
* merge propagators with same momentum, and repeated dots
	if (count(Md340b,1)) Multiply replace_(Md340b,Md340c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md340c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j8/2,j,j1,j8,Md340c,dotmapMd340cR1)
	#call replace(i11,`Q2'/2+j2/2-j7/2,j,j2,j7,Md340c,dotmapMd340cR2)
	#call replace(i12,`Q2'/2+j4/2-j6/2,j,j4,j6,Md340c,dotmapMd340cR3)
	#call replace(i13,-`Q2'/2+j4/2-j6/2,j,j4,j6,Md340c,dotmapMd340cR4)
	#call replace(i14,j1/2+j2/2-j3/2,j,j1,j2,j3,Md340c,dotmapMd340cR5)
	#call replace(i15,-`Q2'/2-j1/2+j8/2+j9,j,j1,j8,j9,Md340c,dotmapMd340cR6)
	#call replace(i16,j2/2+j4/2-j5/2,j,j2,j4,j5,Md340c,dotmapMd340cR7)
	#call replace(i17,-`Q2'/2+j4/2-j5/2+j7/2,j,j4,j5,j7,Md340c,dotmapMd340cR8)
	#call replace(i18,-`Q2'/2+j4/2+j6/2,j,j4,j6,Md340c,dotmapMd340cR9)
	if (count(Md340c,1)) Multiply replace_(Md340c,Md340d,<j1,i1>,...,<j9,i9>);
* map dots to p3.p4 and change topology to d192
	if (count(Md340d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j2/2+j4/2-j5/2+j9,j,j2,j4,j5,j9,Md340d,dotmapMd340dR1)
	if (count(Md340d,1)) Multiply replace_(Md340d,Md192,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd192 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared340()
* Topology: 0-1 1-2 2-3 2-6 3-4 3-5 4-5 5-6 1-6 1-4 4-9
* Dots: p1.p4,p0.p1,p0.p2,p0.p4,p0.p6
* Apply automorphisms
if (match(Md340*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n12==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n11,$n13,$n12,$n14,$n10,$n9,$n4,$n2,$n1,$n3,$n8,$n5,$n7,$n6)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n1,$n2,$n4,$n5,$n6,$n3,$n7,$n8)
endif;
if (($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n11,$n12,$n13,$n10,$n9,$n6,$n7,$n8,$n3,$n1,$n5,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i6,i2,i7,i3,i5,i4,i8,i5,i3,i6,i1,i7,i2,i8,i4,i11,i14,i14,i11);
elseif ($bestiso == 2); Multiply sign_($n10+$n12+$n13+$n14)*replace_(i1,i8,i2,i7,i4,i6,i6,i4,i7,i2,i8,i1,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply sign_($n14)*replace_(i1,i4,i3,i5,i4,i1,i5,i3,i6,i8,i8,i6,i11,i13,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd340 automorphism;

#call CheckRemovedPropagators(d340,9,8,1,2,3,4,5,6,7,8,9)
#if `$DOACTION' == 0
.sort:reduce d340;
#endif
#endprocedure

#procedure Reduced340()
	#call Prepared340()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd340'
		#call MtoZ(Md340,Zd340,i,14)
		#call Reduce(d340)
		#call ZtoM(Zd340,Md340,i,14)
		#call Prepared340()
#else
		#if `USETURBO'
			#call TurboMd340()
		#endif
		#call MtoZ(Md340,Zd340,i,14)
		#call carpet(Zd340,0,9,0,0,0,3,11,1,2,4,6)
		#call ZtoM(Zd340b,Md340b,i,19)
		#call Insertiond340()
#endif
	#endif
#endprocedure
*--#] reduce-d340 : 
*--#[ reduce-d339 :
#procedure Prepared339()
* Topology: 0-1 1-6 1-3 1-7 3-4 3-5 4-5 5-6 6-7 4-7 4-9
* Dots: p0.p2,p0.p4,p0.p6,p0.p8,p4.p8
* Apply automorphisms
if (match(Md339*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n8+$n7+$n9)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n2,$n5,$n7,$n1,$n8,$n3,$n4,$n9,$n6,$n5+$n7+$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n10+$n12)*replace_(i1,i6,i2,i9,i3,i4,i4,i3,i5,i8,i6,i1,i8,i5,i9,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd339 automorphism;

#call CheckRemovedPropagators(d339,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4 and change topology to d256
	if (count(Md339M1,1)) Multiply replace_(i2,j2,i3,j4,i4,j1,i5,j3,i6,j7,i7,j8,i8,j5,i9,j6,i10,j10,i11,j9);
	#call replace(i1,`Q2'-2*j10-2*j12+2*j14+j2+j4,j,j2,j4,j10,j12,j14,Md339M1,dotmapMd339M1R1)
	#call replace(i12,-`Q2'-j11+j9,j,j9,j11,Md339M1,dotmapMd339M1R2)
	#call replace(i13,-j11-j12,j,j11,j12,Md339M1,dotmapMd339M1R3)
	#call replace(i14,-`Q2'/2-j1/2-j11-j13-j6/2+j7/2+j9,j,j1,j6,j7,j9,j11,j13,Md339M1,dotmapMd339M1R4)
	if (count(Md339M1,1)) Multiply replace_(Md339M1,Md256,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd256 "1"
#endif

#if `$M2'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md339M2,1)) Multiply replace_(i1,j6,i3,j5,i4,j1,i5,j4,i6,j2,i7,j7,i8,j8,i9,j3,i12,j11);
	#call replace(i2,j1+2*j10+2*j13-j2+j7,j,j1,j2,j7,j10,j13,Md339M2,dotmapMd339M2R1)
	#call replace(i10,`Q2'+j11+j12+j13,j,j11,j12,j13,Md339M2,dotmapMd339M2R2)
	#call replace(i11,`Q2'+j11+j12,j,j11,j12,Md339M2,dotmapMd339M2R3)
	#call replace(i13,-j12-j14,j,j12,j14,Md339M2,dotmapMd339M2R4)
	#call replace(i14,`Q2'/2-j1/2+j11-j14+j2/2+j5/2-j8/2-j9,j,j1,j2,j5,j8,j9,j11,j14,Md339M2,dotmapMd339M2R5)
	if (count(Md339M2,1)) Multiply replace_(Md339M2,Md209,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd209 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4 and change topology to d266
	if (count(Md339M3,1)) Multiply replace_(i1,j4,i2,j8,i4,j3,i5,j7,i6,j1,i7,j6,i8,j5,i9,j2,i12,j9);
	#call replace(i3,-`Q2'+2*j10-2*j11-2*j14+j5-j6+j8,j,j5,j6,j8,j10,j11,j14,Md339M3,dotmapMd339M3R1)
	#call replace(i10,`Q2'-j10+j11,j,j10,j11,Md339M3,dotmapMd339M3R2)
	#call replace(i11,`Q2'-j10+j9,j,j9,j10,Md339M3,dotmapMd339M3R3)
	#call replace(i13,j11+j12,j,j11,j12,Md339M3,dotmapMd339M3R4)
	#call replace(i14,-`Q2'/2+j1/2+j10+j12+j13-j14-j2/2-j7/2+j8/2,j,j1,j2,j7,j8,j10,j12,j13,j14,Md339M3,dotmapMd339M3R5)
	if (count(Md339M3,1)) Multiply replace_(Md339M3,Md266,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd266 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4 and change topology to d266
	if (count(Md339M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j10);
	#call replace(i4,-2*j14+j2+j4,j,j2,j4,j14,Md339M4,dotmapMd339M4R1)
	#call replace(i11,j10-j12,j,j10,j12,Md339M4,dotmapMd339M4R2)
	#call replace(i12,j11-j12,j,j11,j12,Md339M4,dotmapMd339M4R3)
	#call replace(i13,j11+j9,j,j9,j11,Md339M4,dotmapMd339M4R4)
	#call replace(i14,-j1/2+j11-j13+j3/2-j4/2+j5/2-j8/2+j9,j,j1,j3,j4,j5,j8,j9,j11,j13,Md339M4,dotmapMd339M4R5)
	if (count(Md339M4,1)) Multiply replace_(Md339M4,Md266,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd266 "1"
#endif

#if `$M5'
* map dots to p0.p1,p0.p2,p0.p4,p1.p4,p2.p4,p4.p6 and change topology to d219
	if (count(Md339M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j10,i11,j11);
	#call replace(i5,-2*j13+j2+j4,j,j2,j4,j13,Md339M5,dotmapMd339M5R1)
	#call replace(i12,-`Q2'/2+j11-j13+j14+j4/2-j5/2+j8/2,j,j4,j5,j8,j11,j13,j14,Md339M5,dotmapMd339M5R2)
	#call replace(i13,-`Q2'/2+j10-j13+j14+j4/2-j5/2+j8/2+j9,j,j4,j5,j8,j9,j10,j13,j14,Md339M5,dotmapMd339M5R3)
	#call replace(i14,j12+j14,j,j12,j14,Md339M5,dotmapMd339M5R4)
	if (count(Md339M5,1)) Multiply replace_(Md339M5,Md219,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd219 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4 and change topology to d256
	if (count(Md339M6,1)) Multiply replace_(i1,j1,i2,j6,i3,j7,i4,j4,i5,j5,i7,j2,i8,j3,i9,j8,i10,j11,i11,j12);
	#call replace(i6,-`Q2'-2*j10+2*j11+2*j14+j5-j6+j8,j,j5,j6,j8,j10,j11,j14,Md339M6,dotmapMd339M6R1)
	#call replace(i12,j10-j11+j12,j,j10,j11,j12,Md339M6,dotmapMd339M6R2)
	#call replace(i13,j10+j9,j,j9,j10,Md339M6,dotmapMd339M6R3)
	#call replace(i14,j13+j14,j,j13,j14,Md339M6,dotmapMd339M6R4)
	if (count(Md339M6,1)) Multiply replace_(Md339M6,Md256,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd256 "1"
#endif

#if `$M7'
* map dots to p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3 and change topology to cross
	if (count(Md339M7,1)) Multiply replace_(i1,j6,i2,j2,i3,j4,i4,j1,i5,j7,i6,j5,i8,j8,i9,j3,i10,j10,i11,j9);
	#call replace(i7,`Q2'-2*j10+2*j11-2*j14+j2+j3,j,j2,j3,j10,j11,j14,Md339M7,dotmapMd339M7R1)
	#call replace(i12,-`Q2'-j11+j9,j,j9,j11,Md339M7,dotmapMd339M7R2)
	#call replace(i13,-j11-j12,j,j11,j12,Md339M7,dotmapMd339M7R3)
	#call replace(i14,-`Q2'/2-j1/2-j11-j13-j3/2+j5/2+j9,j,j1,j3,j5,j9,j11,j13,Md339M7,dotmapMd339M7R4)
	if (count(Md339M7,1)) Multiply replace_(Md339M7,Mcross,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOcross "1"
#endif

#if `$M8'
* map dots to p0.p1,p0.p2,p0.p4,p1.p4,p2.p4,p4.p6 and change topology to d219
	if (count(Md339M8,1)) Multiply replace_(i1,j4,i2,j8,i3,j5,i4,j3,i5,j7,i6,j1,i7,j6,i9,j2,i12,j9);
	#call replace(i8,2*j14+j4+j6,j,j4,j6,j14,Md339M8,dotmapMd339M8R1)
	#call replace(i10,`Q2'/2+j13+j14+j4/2-j5/2+j8/2,j,j4,j5,j8,j13,j14,Md339M8,dotmapMd339M8R2)
	#call replace(i11,`Q2'+j10+j9,j,j9,j10,Md339M8,dotmapMd339M8R3)
	#call replace(i13,-`Q2'/2-j10+j11+j13+j14+j4/2-j5/2+j8/2,j,j4,j5,j8,j10,j11,j13,j14,Md339M8,dotmapMd339M8R4)
	#call replace(i14,-`Q2'/2+j1/2-j10+j11+j12+j13-j2/2-j7/2+j8/2,j,j1,j2,j7,j8,j10,j11,j12,j13,Md339M8,dotmapMd339M8R5)
	if (count(Md339M8,1)) Multiply replace_(Md339M8,Md219,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd219 "1"
#endif

#if `$M9'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md339M9,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j4,i5,j7,i6,j6,i7,j8,i8,j5,i10,j11,i11,j13,i13,-j14);
	#call replace(i9,j1-2*j14-j3+j8+2*j9,j,j1,j3,j8,j9,j14,Md339M9,dotmapMd339M9R1)
	#call replace(i12,-j11-j12+j13-j14,j,j11,j12,j13,j14,Md339M9,dotmapMd339M9R2)
	#call replace(i14,`Q2'/2-j1/2+j10-j11-j12+j2/2+j3/2+j6/2-j7/2-j8/2-j9,j,j1,j2,j3,j6,j7,j8,j9,j10,j11,j12,Md339M9,dotmapMd339M9R3)
	if (count(Md339M9,1)) Multiply replace_(Md339M9,Md209,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd209 "1"
#endif
.sort:reduce d339;
#endif
#endprocedure

#procedure Reduced339()
	#call Prepared339()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd339'
		#call MtoZ(Md339,Zd339,i,14)
		#call Reduce(d339)
		#call ZtoM(Zd339,Md339,i,14)
#else
		#if `USETURBO'
			#call TurboMd339()
		#endif
		#call triangleS(Md339,i1,i3,i8,i7,i9,i13,i14,0,0)
#endif
		#call Prepared339()
	#endif
#endprocedure
*--#] reduce-d339 : 
*--#[ reduce-d338 :
#procedure Insertiond338()
* merge propagators with same momentum, and repeated dots
	if (count(Md338b,1)) Multiply replace_(Md338b,Md338c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,-i8,i15,-i8,i10,i9,i11,i10,i12,i11,i13,-i12,i14,i13,i16,-i14);

* rewrite insertion dots
	if (count(Md338c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md338c,dotmapMd338cR1)
	#call replace(i11,j1/2+j3/2-j4/2+j9,j,j1,j3,j4,j9,Md338c,dotmapMd338cR2)
	#call replace(i12,`Q2'/2+j5/2-j6/2,j,j5,j6,Md338c,dotmapMd338cR3)
	#call replace(i13,-j1/2-j3/2+j4/2,j,j1,j3,j4,Md338c,dotmapMd338cR4)
	#call replace(i14,-`Q2'/2+j2/2+j3/2+j6/2-j7/2-j8+j9,j,j2,j3,j6,j7,j8,j9,Md338c,dotmapMd338cR5)
	if (count(Md338c,1)) Multiply replace_(Md338c,Md338d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Md338d,1)) Multiply replace_(i1,j5,i2,j1,i3,j7,i4,j4,i5,j2,i6,j3,i7,j6);
	#call replace(i8,-`Q2'/2-j2/2+j3/2+j9,j,j2,j3,j9,Md338d,dotmapMd338dR1)
	#call replace(i9,`Q2'/2-j1/2+j4/2-j7/2-j8,j,j1,j4,j7,j8,Md338d,dotmapMd338dR2)
	if (count(Md338d,1)) Multiply replace_(Md338d,Md137,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd137 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared338()
* Topology: 0-1 4-7 1-4 1-5 2-4 2-7 6-7 2-5 5-6 2-6 4-9
* Dots: p1.p7,p4.p5,p0.p1,p0.p5,p0.p7
* Apply automorphisms
if (match(Md338*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd338 automorphism;

#call CheckRemovedPropagators(d338,9,8,1,3,4,5,6,7,8,9,2)
#if `$DOACTION' == 0
.sort:reduce d338;
#endif
#endprocedure

#procedure Reduced338()
	#call Prepared338()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd338'
		#call MtoZ(Md338,Zd338,i,14)
		#call Reduce(d338)
		#call ZtoM(Zd338,Md338,i,14)
		#call Prepared338()
#else
		#if `USETURBO'
			#call TurboMd338()
		#endif
		#call MtoZ(Md338,Zd338,i,14)
		#call carpet(Zd338,3,2,0,0,0,3,12,1,5,7)
		#call ZtoM(Zd338b,Md338b,i,16)
		#call Insertiond338()
#endif
	#endif
#endprocedure
*--#] reduce-d338 : 
*--#[ reduce-d337 :
#procedure Insertiond337()
* merge propagators with same momentum, and repeated dots
	if (count(Md337b,1)) Multiply replace_(Md337b,Md337c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md337c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j2/2,j,j1,j2,Md337c,dotmapMd337cR1)
	#call replace(i11,j8+j9,j,j8,j9,Md337c,dotmapMd337cR2)
	#call replace(i12,-`Q2'/2-j4/2+j5/2+j6/2-j7/2-j9,j,j4,j5,j6,j7,j9,Md337c,dotmapMd337cR3)
	#call replace(i13,-j1/2-j4/2+j5/2,j,j1,j4,j5,Md337c,dotmapMd337cR4)
	#call replace(i14,-j3/2-j5/2+j7/2-j8,j,j3,j5,j7,j8,Md337c,dotmapMd337cR5)
	if (count(Md337c,1)) Multiply replace_(Md337c,Md337d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md337d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j6,i5,j4,i6,j1,i7,j7);
	#call replace(i8,-j1/2+j2/2-j3/2-j4/2+j6/2+j7/2-j9,j,j1,j2,j3,j4,j6,j7,j9,Md337d,dotmapMd337dR1)
	#call replace(i9,j1/2-j2/2+j3/2+j4/2-j6/2-j7/2-j8,j,j1,j2,j3,j4,j6,j7,j8,Md337d,dotmapMd337dR2)
	if (count(Md337d,1)) Multiply replace_(Md337d,Md118,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd118 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared337()
* Topology: 0-1 1-8 2-8 1-5 1-3 2-6 2-5 5-6 2-3 3-6 8-9
* Dots: p3.p5,p4.p5,p0.p3,p0.p5,p0.p6
* Apply automorphisms
if (match(Md337*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n10,$n11,$n7,$n6,$n9,$n8,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3,i6,i8,i7,i9,i8,i6,i9,i7,i10,i11,i11,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd337 automorphism;

#call CheckRemovedPropagators(d337,9,8,2,3,4,5,6,7,8,9,1)
#if `$DOACTION' == 0
.sort:reduce d337;
#endif
#endprocedure

#procedure Reduced337()
	#call Prepared337()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd337'
		#call MtoZ(Md337,Zd337,i,14)
		#call Reduce(d337)
		#call ZtoM(Zd337,Md337,i,14)
		#call Prepared337()
#else
		#if `USETURBO'
			#call TurboMd337()
		#endif
		#call MtoZ(Md337,Zd337,i,14)
		#call carpet(Zd337,2,1,0,0,0,3,12,3,5,6)
		#call ZtoM(Zd337b,Md337b,i,16)
		#call Insertiond337()
#endif
	#endif
#endprocedure
*--#] reduce-d337 : 
*--#[ reduce-d336 :
#procedure Insertiond336()
* merge propagators with same momentum, and repeated dots
	if (count(Md336b,1)) Multiply replace_(Md336b,Md336c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md336c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j2/2,j,j1,j2,Md336c,dotmapMd336cR1)
	#call replace(i11,`Q2'/2-j1/2+j2/2,j,j1,j2,Md336c,dotmapMd336cR2)
	#call replace(i12,j2/2+j3/2-j4/2+j9,j,j2,j3,j4,j9,Md336c,dotmapMd336cR3)
	#call replace(i13,-`Q2'/2+j2/2+j3/2-j4/2-j6/2+j8/2+j9,j,j2,j3,j4,j6,j8,j9,Md336c,dotmapMd336cR4)
	#call replace(i14,`Q2'/2-j1/2-j2/2,j,j1,j2,Md336c,dotmapMd336cR5)
	#call replace(i15,-`Q2'/2+j2/2-j7/2+j8/2+j9,j,j2,j7,j8,j9,Md336c,dotmapMd336cR6)
	#call replace(i16,j2/2+j3/2-j4/2,j,j2,j3,j4,Md336c,dotmapMd336cR7)
	#call replace(i17,j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,Md336c,dotmapMd336cR8)
	#call replace(i18,j3/2+j5/2-j6/2,j,j3,j5,j6,Md336c,dotmapMd336cR9)
	if (count(Md336c,1)) Multiply replace_(Md336c,Md336d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3 and change topology to d197
	if (count(Md336d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-j2/2-j3/2+j4/2+j9,j,j2,j3,j4,j9,Md336d,dotmapMd336dR1)
	if (count(Md336d,1)) Multiply replace_(Md336d,Md197,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd197 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared336()
* Topology: 0-1 1-6 1-3 1-7 3-4 3-5 4-5 4-7 5-6 6-7 7-9
* Dots: p1.p4,p0.p1,p0.p2,p0.p4,p0.p6
* Apply automorphisms
if (match(Md336*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n1,$n8,$n2,$n5,$n6,$n4,$n3,$n7,$n9)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n14)*replace_(i1,i9,i2,i7,i5,i6,i6,i5,i7,i2,i9,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd336 automorphism;

#call CheckRemovedPropagators(d336,9,8,1,2,4,5,6,7,8,9,3)
#if `$DOACTION' == 0
.sort:reduce d336;
#endif
#endprocedure

#procedure Reduced336()
	#call Prepared336()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd336'
		#call MtoZ(Md336,Zd336,i,14)
		#call Reduce(d336)
		#call ZtoM(Zd336,Md336,i,14)
		#call Prepared336()
#else
		#if `USETURBO'
			#call TurboMd336()
		#endif
		#call MtoZ(Md336,Zd336,i,14)
		#call carpet(Zd336,0,3,0,0,0,3,11,1,2,4,6)
		#call ZtoM(Zd336b,Md336b,i,19)
		#call Insertiond336()
#endif
	#endif
#endprocedure
*--#] reduce-d336 : 
*--#[ reduce-d335 :
#procedure Insertiond335()
* merge propagators with same momentum, and repeated dots
	if (count(Md335b,1)) Multiply replace_(Md335b,Md335c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md335c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j7/2,j,j1,j2,j3,j7,Md335c,dotmapMd335cR1)
	#call replace(i11,j1/2-j3/2+j4/2,j,j1,j3,j4,Md335c,dotmapMd335cR2)
	#call replace(i12,j4/2+j5/2-j6/2,j,j4,j5,j6,Md335c,dotmapMd335cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md335c,dotmapMd335cR4)
	if (count(Md335c,1)) Multiply replace_(Md335c,Md335d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5 and change topology to d138
	if (count(Md335d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md335d,1)) Multiply replace_(Md335d,Md138,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd138 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared335()
* Topology: 0-1 1-2 1-6 2-4 2-4 2-8 4-5 5-6 5-6 6-8 8-9
* Dots: p0.p7,p1.p7,p0.p3,p1.p3,p3.p7
* Apply automorphisms
if (match(Md335*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n11,$n10,$n5,$n3,$n4,$n6,$n9,$n8,$n7,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n12,$n5,$n4,$n3,$n6,$n9,$n7,$n8,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n5,$n3,$n4,$n6,$n9,$n7,$n8,$n1,$n2)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n2,$n7,$n8,$n6,$n1,$n3,$n4,$n9,$n5)
	#call hash(5,$n14,$n13,$n10,$n11,$n10,$n1,$n3,$n4,$n6,$n2,$n8,$n7,$n5,$n9)
	#call hash(6,$n14,$n13,$n12,$n11,$n12,$n1,$n4,$n3,$n6,$n2,$n7,$n8,$n5,$n9)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n4,$n6,$n2,$n7,$n8,$n5,$n9)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n2,$n7,$n8,$n6,$n1,$n4,$n3,$n9,$n5)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n7,$n6,$n1,$n3,$n4,$n9,$n5)
endif;
if (($n11==0)&&($n13==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(12,$n14,$n13,$n10,$n11,$n12,$n5,$n4,$n3,$n6,$n9,$n8,$n7,$n1,$n2)
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n7,$n6,$n1,$n4,$n3,$n9,$n5)
	#call hash(14,$n14,$n13,$n10,$n11,$n12,$n1,$n4,$n3,$n6,$n2,$n8,$n7,$n5,$n9)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i7,i8,i8,i7);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i9,i7,i4,i8,i3,i9,i5,i12,i10);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i4,i7,i5,i9,i7,i3,i8,i4,i9,i5,i10,i12);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i8,i4,i7,i5,i9,i7,i4,i8,i3,i9,i5);
elseif ($bestiso == 4); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i3,i4,i4,i3,i5,i1,i7,i8,i8,i7,i9,i2);
elseif ($bestiso == 5); Multiply replace_(i1,i9,i2,i5,i3,i7,i4,i8,i5,i2,i7,i4,i8,i3,i9,i1,i12,i10);
elseif ($bestiso == 6); Multiply replace_(i1,i9,i2,i5,i3,i8,i4,i7,i5,i2,i7,i3,i8,i4,i9,i1,i10,i12);
elseif ($bestiso == 7); Multiply replace_(i1,i9,i2,i5,i3,i8,i4,i7,i5,i2,i7,i4,i8,i3,i9,i1);
elseif ($bestiso == 8); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i7,i8,i8,i7,i9,i2);
elseif ($bestiso == 10); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 11); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i3,i4,i4,i3,i5,i1,i9,i2);
elseif ($bestiso == 12); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i9,i7,i3,i8,i4,i9,i5,i10,i12,i12,i10);
elseif ($bestiso == 13); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i9,i2);
elseif ($bestiso == 14); Multiply replace_(i1,i9,i2,i5,i3,i7,i4,i8,i5,i2,i7,i3,i8,i4,i9,i1,i10,i12,i12,i10);
elseif ($bestiso == 15); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd335 automorphism;

#call CheckRemovedPropagators(d335,9,5,1,2,5,6,9,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d335;
#endif
#endprocedure

#procedure Reduced335()
	#call Prepared335()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd335'
		#call MtoZ(Md335,Zd335,i,14)
		#call Reduce(d335)
		#call ZtoM(Zd335,Md335,i,14)
		#call Prepared335()
#else
		#if `USETURBO'
			#call TurboMd335()
		#endif
		#call insertionS(Md335,i3,i4,i12,i13,i14,i3,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md335b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond335()
#endif
	#endif
#endprocedure
*--#] reduce-d335 : 
*--#[ reduce-d334 :
#procedure Insertiond334()
* merge propagators with same momentum, and repeated dots
	if (count(Md334b,1)) Multiply replace_(Md334b,Md334c,i5,i4,i4,i5,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md334c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j4/2+j7/2+j9,j,j4,j7,j9,Md334c,dotmapMd334cR1)
	#call replace(i11,-j1/2-j5/2+j6/2,j,j1,j5,j6,Md334c,dotmapMd334cR2)
	#call replace(i12,j2/2-j4/2+j5/2,j,j2,j4,j5,Md334c,dotmapMd334cR3)
	#call replace(i13,-`Q2'/2-j1/2-j2/2+j3/2+j8+j9,j,j1,j2,j3,j8,j9,Md334c,dotmapMd334cR4)
	if (count(Md334c,1)) Multiply replace_(Md334c,Md334d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Md334d,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j7,i5,j5,i6,j4,i7,j6);
	#call replace(i8,j8-j9,j,j8,j9,Md334d,dotmapMd334dR1)
	#call replace(i9,`Q2'/2-j6/2+j7/2+j9,j,j6,j7,j9,Md334d,dotmapMd334dR2)
	if (count(Md334d,1)) Multiply replace_(Md334d,Mbustar5,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPObustar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared334()
* Topology: 0-1 1-6 1-3 1-7 3-5 3-5 3-8 5-6 6-7 7-8 8-9
* Dots: p0.p1,p0.p2,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md334*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd334 automorphism;

#call CheckRemovedPropagators(d334,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d334;
#endif
#endprocedure

#procedure Reduced334()
	#call Prepared334()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd334'
		#call MtoZ(Md334,Zd334,i,14)
		#call Reduce(d334)
		#call ZtoM(Zd334,Md334,i,14)
		#call Prepared334()
#else
		#if `USETURBO'
			#call TurboMd334()
		#endif
		#call insertionS(Md334,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md334b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond334()
#endif
	#endif
#endprocedure
*--#] reduce-d334 : 
*--#[ reduce-d333 :
#procedure Insertiond333()
* merge propagators with same momentum, and repeated dots
	if (count(Md333b,1)) Multiply replace_(Md333b,Md333c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i1,i6,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md333c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j7/2-j8,j,j5,j7,j8,Md333c,dotmapMd333cR1)
	#call replace(i11,-j1/2+j5/2-j6/2,j,j1,j5,j6,Md333c,dotmapMd333cR2)
	#call replace(i12,-j1/2+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,Md333c,dotmapMd333cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md333c,dotmapMd333cR4)
	if (count(Md333c,1)) Multiply replace_(Md333c,Md333d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4 and change topology to d140
	if (count(Md333d,1)) Multiply replace_(i1,j3,i2,j4,i3,j7,i4,j6,i5,j5,i6,j2,i7,j1,i9,j9);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md333d,dotmapMd333dR1)
	if (count(Md333d,1)) Multiply replace_(Md333d,Md140,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd140 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared333()
* Topology: 0-1 1-6 1-3 3-4 3-5 4-5 4-8 5-6 1-6 1-8 8-9
* Dots: p0.p2,p0.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md333*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n6,$n5,$n4,$n3,$n2,$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i8,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd333 automorphism;

#call CheckRemovedPropagators(d333,9,6,2,3,4,5,6,7,1,8,9)
#if `$DOACTION' == 0
.sort:reduce d333;
#endif
#endprocedure

#procedure Reduced333()
	#call Prepared333()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd333'
		#call MtoZ(Md333,Zd333,i,14)
		#call Reduce(d333)
		#call ZtoM(Zd333,Md333,i,14)
		#call Prepared333()
#else
		#if `USETURBO'
			#call TurboMd333()
		#endif
		#call insertionS(Md333,i1,i8,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md333b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond333()
#endif
	#endif
#endprocedure
*--#] reduce-d333 : 
*--#[ reduce-d332 :
#procedure Insertiond332()
* merge propagators with same momentum, and repeated dots
	if (count(Md332b,1)) Multiply replace_(Md332b,Md332c,i6,i4,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,-i10,i12,-i11,i13,-i12,i16,i13);

* rewrite insertion dots
	if (count(Md332c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j7/2-j9,j,j5,j7,j9,Md332c,dotmapMd332cR1)
	#call replace(i11,-j1/2-j4/2+j5/2+j6/2-j7/2+j8-j9,j,j1,j4,j5,j6,j7,j8,j9,Md332c,dotmapMd332cR2)
	#call replace(i12,-j2/2-j4/2+j5/2,j,j2,j4,j5,Md332c,dotmapMd332cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md332c,dotmapMd332cR4)
	if (count(Md332c,1)) Multiply replace_(Md332c,Md332d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Md332d,1)) Multiply replace_(i1,j3,i2,j7,i3,j2,i4,j4,i5,j5,i6,j6,i7,j1);
	#call replace(i8,`Q2'/2-j1/2+j5/2+j8-j9,j,j1,j5,j8,j9,Md332d,dotmapMd332dR1)
	#call replace(i9,`Q2'/2-j1/2+j5/2-j9,j,j1,j5,j9,Md332d,dotmapMd332dR2)
	if (count(Md332d,1)) Multiply replace_(Md332d,Md135,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd135 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared332()
* Topology: 0-1 1-2 2-3 2-7 3-5 3-5 3-8 1-5 1-7 7-8 8-9
* Dots: p0.p1,p0.p2,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md332*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd332 automorphism;

#call CheckRemovedPropagators(d332,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d332;
#endif
#endprocedure

#procedure Reduced332()
	#call Prepared332()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd332'
		#call MtoZ(Md332,Zd332,i,14)
		#call Reduce(d332)
		#call ZtoM(Zd332,Md332,i,14)
		#call Prepared332()
#else
		#if `USETURBO'
			#call TurboMd332()
		#endif
		#call insertionS(Md332,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md332b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond332()
#endif
	#endif
#endprocedure
*--#] reduce-d332 : 
*--#[ reduce-d331 :
#procedure Insertiond331()
* merge propagators with same momentum, and repeated dots
	if (count(Md331b,1)) Multiply replace_(Md331b,Md331c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md331c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md331c,dotmapMd331cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md331c,dotmapMd331cR2)
	#call replace(i12,-j4/2-j5/2+j6/2+j9,j,j4,j5,j6,j9,Md331c,dotmapMd331cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md331c,dotmapMd331cR4)
	if (count(Md331c,1)) Multiply replace_(Md331c,Md331d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d141
	if (count(Md331d,1)) Multiply replace_(i1,j7,i2,j5,i3,j1,i4,j6,i5,j3,i6,j4,i7,j2,i8,j8);
	#call replace(i9,j3/2-j4/2+j6/2+j9,j,j3,j4,j6,j9,Md331d,dotmapMd331dR1)
	if (count(Md331d,1)) Multiply replace_(Md331d,Md141,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd141 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared331()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-8 2-5 5-6 5-6 6-8 8-9
* Dots: p0.p7,p1.p7,p0.p3,p1.p3,p3.p7
* Apply automorphisms
if (match(Md331*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i7,i8,i8,i7);
elseif ($bestiso == 2); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd331 automorphism;

#call CheckRemovedPropagators(d331,9,5,1,2,5,6,9,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d331;
#endif
#endprocedure

#procedure Reduced331()
	#call Prepared331()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd331'
		#call MtoZ(Md331,Zd331,i,14)
		#call Reduce(d331)
		#call ZtoM(Zd331,Md331,i,14)
		#call Prepared331()
#else
		#if `USETURBO'
			#call TurboMd331()
		#endif
		#call insertionS(Md331,i3,i4,i12,i13,i14,i3,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md331b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond331()
#endif
	#endif
#endprocedure
*--#] reduce-d331 : 
*--#[ reduce-d330 :
#procedure Insertiond330()
* merge propagators with same momentum, and repeated dots
	if (count(Md330b,1)) Multiply replace_(Md330b,Md330c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i13,i9,i11,i10,i12,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md330c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md330c,dotmapMd330cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md330c,dotmapMd330cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md330c,dotmapMd330cR3)
	#call replace(i13,j2/2+j5/2-j6/2+j8,j,j2,j5,j6,j8,Md330c,dotmapMd330cR4)
	if (count(Md330c,1)) Multiply replace_(Md330c,Md330d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d142
	if (count(Md330d,1)) Multiply replace_(i1,j7,i2,j5,i3,j1,i4,j2,i5,j3,i6,j4,i7,j6,i8,j8,i9,j9);
	if (count(Md330d,1)) Multiply replace_(Md330d,Md142,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd142 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared330()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-8 2-5 5-6 5-6 5-8 8-9
* Dots: p0.p7,p5.p7,p0.p3,p1.p3,p3.p7
* Apply automorphisms
if (match(Md330*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n11,$n10,$n1,$n3,$n4,$n6,$n2,$n8,$n7,$n5,$n9)
	#call hash(2,$n14,$n13,$n12,$n11,$n12,$n1,$n4,$n3,$n6,$n2,$n7,$n8,$n5,$n9)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n4,$n6,$n2,$n7,$n8,$n5,$n9)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n10,$n11,$n12,$n1,$n4,$n3,$n6,$n2,$n8,$n7,$n5,$n9)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i7,i8,i8,i7);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i9,i2,i5,i3,i7,i4,i8,i5,i2,i7,i4,i8,i3,i9,i1,i12,i10);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i9,i2,i5,i3,i8,i4,i7,i5,i2,i7,i3,i8,i4,i9,i1,i10,i12);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i9,i2,i5,i3,i8,i4,i7,i5,i2,i7,i4,i8,i3,i9,i1);
elseif ($bestiso == 5); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 6); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i9,i2,i5,i3,i7,i4,i8,i5,i2,i7,i3,i8,i4,i9,i1,i10,i12,i12,i10);
elseif ($bestiso == 7); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd330 automorphism;

#call CheckRemovedPropagators(d330,9,5,1,2,5,6,9,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d330;
#endif
#endprocedure

#procedure Reduced330()
	#call Prepared330()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd330'
		#call MtoZ(Md330,Zd330,i,14)
		#call Reduce(d330)
		#call ZtoM(Zd330,Md330,i,14)
		#call Prepared330()
#else
		#if `USETURBO'
			#call TurboMd330()
		#endif
		#call insertionS(Md330,i3,i4,i12,i13,i14,i3,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md330b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond330()
#endif
	#endif
#endprocedure
*--#] reduce-d330 : 
*--#[ reduce-d329 :
#procedure Insertiond329()
* merge propagators with same momentum, and repeated dots
	if (count(Md329b,1)) Multiply replace_(Md329b,Md329c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md329c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md329c,dotmapMd329cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md329c,dotmapMd329cR2)
	#call replace(i12,-j5/2+j6/2-j7/2+j8,j,j5,j6,j7,j8,Md329c,dotmapMd329cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md329c,dotmapMd329cR4)
	if (count(Md329c,1)) Multiply replace_(Md329c,Md329d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p2.p3 and change topology to d143
	if (count(Md329d,1)) Multiply replace_(i1,j7,i2,j5,i3,j1,i4,j2,i5,j3,i6,j4,i7,j6,i8,j8);
	#call replace(i9,-j3/2+j4/2-j6/2+j8+j9,j,j3,j4,j6,j8,j9,Md329d,dotmapMd329dR1)
	if (count(Md329d,1)) Multiply replace_(Md329d,Md143,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd143 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared329()
* Topology: 0-1 1-2 1-5 2-3 2-3 3-8 2-5 5-7 5-7 7-8 8-9
* Dots: p0.p7,p1.p7,p0.p3,p1.p3,p3.p7
* Apply automorphisms
if (match(Md329*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n11,$n10,$n5,$n3,$n4,$n6,$n9,$n8,$n7,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n12,$n5,$n4,$n3,$n6,$n9,$n7,$n8,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n5,$n3,$n4,$n6,$n9,$n7,$n8,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n10,$n11,$n12,$n5,$n4,$n3,$n6,$n9,$n8,$n7,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i7,i8,i8,i7);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i9,i7,i4,i8,i3,i9,i5,i12,i10);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i3,i8,i4,i7,i5,i9,i7,i3,i8,i4,i9,i5,i10,i12);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1,i3,i8,i4,i7,i5,i9,i7,i4,i8,i3,i9,i5);
elseif ($bestiso == 5); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i9,i7,i3,i8,i4,i9,i5,i10,i12,i12,i10);
elseif ($bestiso == 7); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd329 automorphism;

#call CheckRemovedPropagators(d329,9,5,1,2,5,6,9,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d329;
#endif
#endprocedure

#procedure Reduced329()
	#call Prepared329()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd329'
		#call MtoZ(Md329,Zd329,i,14)
		#call Reduce(d329)
		#call ZtoM(Zd329,Md329,i,14)
		#call Prepared329()
#else
		#if `USETURBO'
			#call TurboMd329()
		#endif
		#call insertionS(Md329,i3,i4,i12,i13,i14,i3,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md329b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond329()
#endif
	#endif
#endprocedure
*--#] reduce-d329 : 
*--#[ reduce-d328 :
#procedure Insertiond328()
* merge propagators with same momentum, and repeated dots
	if (count(Md328b,1)) Multiply replace_(Md328b,Md328c,i15,i9,i16,i15,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md328c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j7/2,j,j1,j7,Md328c,dotmapMd328cR1)
	#call replace(i11,j1/2+j2/2-j8/2,j,j1,j2,j8,Md328c,dotmapMd328cR2)
	#call replace(i12,j2/2-j4/2+j5/2-j6/2+j9,j,j2,j4,j5,j6,j9,Md328c,dotmapMd328cR3)
	#call replace(i13,-`Q2'/2-j4/2+j5/2-j6/2+j7/2+j8/2+j9,j,j4,j5,j6,j7,j8,j9,Md328c,dotmapMd328cR4)
	#call replace(i14,j1/2+j6/2-j7/2-j8/2,j,j1,j6,j7,j8,Md328c,dotmapMd328cR5)
	#call replace(i15,-`Q2'/2-j6/2+j8/2+j9,j,j6,j8,j9,Md328c,dotmapMd328cR6)
	#call replace(i16,j2/2+j3/2-j4/2,j,j2,j3,j4,Md328c,dotmapMd328cR7)
	#call replace(i17,j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,Md328c,dotmapMd328cR8)
	#call replace(i18,j3/2+j5/2-j6/2,j,j3,j5,j6,Md328c,dotmapMd328cR9)
	if (count(Md328c,1)) Multiply replace_(Md328c,Md328d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3 and change topology to d196
	if (count(Md328d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md328d,1)) Multiply replace_(Md328d,Md196,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd196 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared328()
* Topology: 0-1 1-2 2-3 3-4 3-5 4-5 4-8 1-5 1-2 2-8 8-9
* Dots: p0.p3,p0.p1,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md328*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n6,$n5,$n4,$n3,$n2,$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i8,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd328 automorphism;

#call CheckRemovedPropagators(d328,9,7,2,3,4,5,6,7,9,1,8)
#if `$DOACTION' == 0
.sort:reduce d328;
#endif
#endprocedure

#procedure Reduced328()
	#call Prepared328()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd328'
		#call MtoZ(Md328,Zd328,i,14)
		#call Reduce(d328)
		#call ZtoM(Zd328,Md328,i,14)
		#call Prepared328()
#else
		#if `USETURBO'
			#call TurboMd328()
		#endif
		#call insertionS(Md328,i1,i8,i11,i12,i13,i14,i1,`Q2',i2,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md328b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond328()
#endif
	#endif
#endprocedure
*--#] reduce-d328 : 
*--#[ reduce-d327 :
#procedure Insertiond327()
* merge propagators with same momentum, and repeated dots
	if (count(Md327b,1)) Multiply replace_(Md327b,Md327c,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md327c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md327c,dotmapMd327cR1)
	#call replace(i11,-`Q2'/2-j2/2+j3/2+j5/2-j6/2+j8+j9,j,j2,j3,j5,j6,j8,j9,Md327c,dotmapMd327cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md327c,dotmapMd327cR3)
	#call replace(i13,-`Q2'/2-j1/2-j2/2+j3/2+j8+j9,j,j1,j2,j3,j8,j9,Md327c,dotmapMd327cR4)
	if (count(Md327c,1)) Multiply replace_(Md327c,Md327d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Md327d,1)) Multiply replace_(i1,j3,i2,j7,i3,j2,i4,j5,i5,j4,i6,j6,i7,j1);
	#call replace(i8,-j8+j9,j,j8,j9,Md327d,dotmapMd327dR1)
	#call replace(i9,`Q2'/2-j1/2+j5/2+j8,j,j1,j5,j8,Md327d,dotmapMd327dR2)
	if (count(Md327d,1)) Multiply replace_(Md327d,Md127,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd127 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared327()
* Topology: 0-1 1-6 1-3 1-7 3-4 3-4 4-8 3-6 6-7 7-8 8-9
* Dots: p0.p1,p0.p2,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md327*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd327 automorphism;

#call CheckRemovedPropagators(d327,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d327;
#endif
#endprocedure

#procedure Reduced327()
	#call Prepared327()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd327'
		#call MtoZ(Md327,Zd327,i,14)
		#call Reduce(d327)
		#call ZtoM(Zd327,Md327,i,14)
		#call Prepared327()
#else
		#if `USETURBO'
			#call TurboMd327()
		#endif
		#call insertionS(Md327,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md327b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond327()
#endif
	#endif
#endprocedure
*--#] reduce-d327 : 
*--#[ reduce-d326 :
#procedure Insertiond326()
* merge propagators with same momentum, and repeated dots
	if (count(Md326b,1)) Multiply replace_(Md326b,Md326c,i8,i2,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md326c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j6/2,j,j2,j6,Md326c,dotmapMd326cR1)
	#call replace(i11,-j1/2-j6/2+j7/2+j8,j,j1,j6,j7,j8,Md326c,dotmapMd326cR2)
	#call replace(i12,-j3/2+j5/2-j6/2+j9,j,j3,j5,j6,j9,Md326c,dotmapMd326cR3)
	#call replace(i13,j1/2+j3/2-j4/2,j,j1,j3,j4,Md326c,dotmapMd326cR4)
	if (count(Md326c,1)) Multiply replace_(Md326c,Md326d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3 and change topology to d124
	if (count(Md326d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5,i6,j7,i7,j6,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md326d,dotmapMd326dR1)
	if (count(Md326d,1)) Multiply replace_(Md326d,Md124,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd124 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared326()
* Topology: 0-1 1-3 1-7 3-4 3-5 4-5 4-8 1-5 1-7 7-8 8-9
* Dots: p0.p1,p0.p3,p0.p2,p1.p2,p2.p3
* Apply automorphisms
if (match(Md326*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n1,$n6,$n3,$n4,$n5,$n8,$n7)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n7,$n6,$n5,$n4,$n3,$n8,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n3,$n4,$n5,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i7,i2,i8,i3,i5,i5,i3,i7,i1,i8,i2);
elseif ($bestiso == 2); Multiply replace_(i2,i8,i8,i2);
elseif ($bestiso == 3); Multiply sign_($n11+$n14)*replace_(i1,i7,i3,i5,i5,i3,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd326 automorphism;

#call CheckRemovedPropagators(d326,9,7,1,3,4,5,6,7,9,2,8)
#if `$DOACTION' == 0
.sort:reduce d326;
#endif
#endprocedure

#procedure Reduced326()
	#call Prepared326()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd326'
		#call MtoZ(Md326,Zd326,i,14)
		#call Reduce(d326)
		#call ZtoM(Zd326,Md326,i,14)
		#call Prepared326()
#else
		#if `USETURBO'
			#call TurboMd326()
		#endif
		#call insertionS(Md326,i2,i8,i12,i13,i14,i2,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md326b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond326()
#endif
	#endif
#endprocedure
*--#] reduce-d326 : 
*--#[ reduce-d325 :
#procedure Insertiond325()
* merge propagators with same momentum, and repeated dots
	if (count(Md325b,1)) Multiply replace_(Md325b,Md325c,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md325c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md325c,dotmapMd325cR1)
	#call replace(i11,j1/2+j4/2-j5/2+j6/2-j7/2+j8-j9,j,j1,j4,j5,j6,j7,j8,j9,Md325c,dotmapMd325cR2)
	#call replace(i12,-j3/2+j6/2-j7/2+j8,j,j3,j6,j7,j8,Md325c,dotmapMd325cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md325c,dotmapMd325cR4)
	if (count(Md325c,1)) Multiply replace_(Md325c,Md325d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Md325d,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i4,j5,i5,j7,i6,j2,i7,j1);
	#call replace(i8,`Q2'/2+j1/2-j5/2-j8,j,j1,j5,j8,Md325d,dotmapMd325dR1)
	#call replace(i9,`Q2'/2+j1/2+j2/2+j3/2-j5/2-j7/2-j8+j9,j,j1,j2,j3,j5,j7,j8,j9,Md325d,dotmapMd325dR2)
	if (count(Md325d,1)) Multiply replace_(Md325d,Md144,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd144 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared325()
* Topology: 0-1 1-2 1-6 2-7 2-4 2-4 4-8 2-6 6-7 7-8 8-9
* Dots: p0.p3,p1.p3,p0.p4,p1.p4,p3.p4
* Apply automorphisms
if (match(Md325*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd325 automorphism;

#call CheckRemovedPropagators(d325,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d325;
#endif
#endprocedure

#procedure Reduced325()
	#call Prepared325()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd325'
		#call MtoZ(Md325,Zd325,i,14)
		#call Reduce(d325)
		#call ZtoM(Zd325,Md325,i,14)
		#call Prepared325()
#else
		#if `USETURBO'
			#call TurboMd325()
		#endif
		#call insertionS(Md325,i4,i5,i12,i13,i14,i4,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md325b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond325()
#endif
	#endif
#endprocedure
*--#] reduce-d325 : 
*--#[ reduce-d324 :
#procedure Prepared324()
* Topology: 0-1 1-2 2-7 2-4 2-5 4-5 4-8 1-5 1-7 7-8 8-9
* Dots: p0.p1,p0.p2,p0.p5,p1.p2,p1.p5
* Apply automorphisms
if (match(Md324*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd324 automorphism;

#call CheckRemovedPropagators(d324,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p5,p0.p6,p1.p5,p0.p3,p3.p5,p3.p6 and change topology to d216
	if (count(Md324M1,1)) Multiply replace_(i2,j3,i3,j8,i4,j5,i5,j7,i6,j2,i7,j6,i8,j4,i9,j1,i11,j12);
	#call replace(i1,-j1-2*j11+2*j12-2*j14+j4+j6-j7+j8+2*j9,j,j1,j4,j6,j7,j8,j9,j11,j12,j14,Md324M1,dotmapMd324M1R1)
	#call replace(i10,`Q2'/2-j1/2-j10+j12+j2/2,j,j1,j2,j10,j12,Md324M1,dotmapMd324M1R2)
	#call replace(i12,-j10-j9,j,j9,j10,Md324M1,dotmapMd324M1R3)
	#call replace(i13,-j1/2+j12-j14+j3/2+j4/2,j,j1,j3,j4,j12,j14,Md324M1,dotmapMd324M1R4)
	#call replace(i14,-j13-j14-j2/2-j5/2+j6/2+j8/2,j,j2,j5,j6,j8,j13,j14,Md324M1,dotmapMd324M1R5)
	if (count(Md324M1,1)) Multiply replace_(Md324M1,Md216,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd216 "1"
#endif

#if `$M2'
* map dots to p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d213
	if (count(Md324M2,1)) Multiply replace_(i1,j1,i3,j7,i4,j5,i5,j8,i6,j6,i7,j3,i8,j2,i9,j4,i10,j11);
	#call replace(i2,-`Q2'+2*j10+2*j13+j2+j6,j,j2,j6,j10,j13,Md324M2,dotmapMd324M2R1)
	#call replace(i11,j1/2+j12-j2/2+j3/2+j4/2-j6/2,j,j1,j2,j3,j4,j6,j12,Md324M2,dotmapMd324M2R2)
	#call replace(i12,-`Q2'/2-j1/2+j11-j12+j2/2-j3/2-j9,j,j1,j2,j3,j9,j11,j12,Md324M2,dotmapMd324M2R3)
	#call replace(i13,j1-j11+j12+j13,j,j1,j11,j12,j13,Md324M2,dotmapMd324M2R4)
	#call replace(i14,-j12-j14,j,j12,j14,Md324M2,dotmapMd324M2R5)
	if (count(Md324M2,1)) Multiply replace_(Md324M2,Md213,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd213 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d236
	if (count(Md324M3,1)) Multiply replace_(i1,j3,i2,j7,i4,j4,i5,j5,i6,j1,i7,j6,i8,j8,i9,j2,i10,j9);
	#call replace(i3,`Q2'-2*j10+2*j11-2*j13+j5+j7-j8-2*j9,j,j5,j7,j8,j9,j10,j11,j13,Md324M3,dotmapMd324M3R1)
	#call replace(i11,-`Q2'/2-j1/2+j10+j2/2+j9,j,j1,j2,j9,j10,Md324M3,dotmapMd324M3R2)
	#call replace(i12,-j10-j12,j,j10,j12,Md324M3,dotmapMd324M3R3)
	#call replace(i13,-`Q2'/2+j10-j11+j3/2-j6/2+j8/2+j9,j,j3,j6,j8,j9,j10,j11,Md324M3,dotmapMd324M3R4)
	#call replace(i14,`Q2'/2-j10-j14+j3/2+j6/2-j8/2-j9,j,j3,j6,j8,j9,j10,j14,Md324M3,dotmapMd324M3R5)
	if (count(Md324M3,1)) Multiply replace_(Md324M3,Md236,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd236 "1"
#endif

#if `$M4'
* map dots to p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4 and change topology to d259
	if (count(Md324M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j11,i13,j12,i14,-j14);
	#call replace(i4,j1+2*j10-2*j12-2*j13+j2+j3,j,j1,j2,j3,j10,j12,j13,Md324M4,dotmapMd324M4R1)
	#call replace(i11,-j1/2+j12+j13+j14-j5/2+j6/2-j7/2+j8/2,j,j1,j5,j6,j7,j8,j12,j13,j14,Md324M4,dotmapMd324M4R2)
	#call replace(i12,-`Q2'/2-j5/2+j8/2+j9,j,j5,j8,j9,Md324M4,dotmapMd324M4R3)
	if (count(Md324M4,1)) Multiply replace_(Md324M4,Md259,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd259 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5,p5.p7 and change topology to d205
	if (count(Md324M5,1)) Multiply replace_(i1,j7,i2,j3,i3,j5,i4,j6,i6,j2,i7,j8,i8,j4,i9,j1,i10,j10,i11,j9);
	#call replace(i5,-2*j11+2*j12+j2+j5,j,j2,j5,j11,j12,Md324M5,dotmapMd324M5R1)
	#call replace(i12,-`Q2'/2+j1/2+j11-j2/2,j,j1,j2,j11,Md324M5,dotmapMd324M5R2)
	#call replace(i13,j13-j14+j3/2+j5/2-j6/2+j7/2,j,j3,j5,j6,j7,j13,j14,Md324M5,dotmapMd324M5R3)
	#call replace(i14,j1/2+j13-j2/2+j3/2-j4/2+j5/2-j6/2+j8/2-j9,j,j1,j2,j3,j4,j5,j6,j8,j9,j13,Md324M5,dotmapMd324M5R4)
	if (count(Md324M5,1)) Multiply replace_(Md324M5,Md205,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd205 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3 and change topology to cross
	if (count(Md324M6,1)) Multiply replace_(i1,j6,i2,j8,i3,j5,i4,j7,i5,j1,i7,j2,i8,j4,i9,j3,i12,j9);
	#call replace(i6,`Q2'+2*j11+j3,j,j3,j11,Md324M6,dotmapMd324M6R1)
	#call replace(i10,`Q2'-j10-j12,j,j10,j12,Md324M6,dotmapMd324M6R2)
	#call replace(i11,-j11-j12,j,j11,j12,Md324M6,dotmapMd324M6R3)
	#call replace(i13,-`Q2'/2+j10-j11+j14-j2/2-j3/2+j6/2+j8/2,j,j2,j3,j6,j8,j10,j11,j14,Md324M6,dotmapMd324M6R4)
	#call replace(i14,j1/2-j13+j2/2-j7/2+j9,j,j1,j2,j7,j9,j13,Md324M6,dotmapMd324M6R5)
	if (count(Md324M6,1)) Multiply replace_(Md324M6,Mcross,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOcross "1"
#endif

#if `$M7'
* map dots to p0.p1,p0.p4,p0.p5,p1.p5,p2.p5,p4.p5 and change topology to d217
	if (count(Md324M7,1)) Multiply replace_(i1,j5,i2,j4,i3,j8,i4,j6,i5,j1,i6,j2,i8,j7,i9,j3,i10,j11,i11,j10,i12,-j9,i13,j14,i14,-j12);
	#call replace(i7,2*j10-2*j13-2*j14+j2-j3+j5+j7,j,j2,j3,j5,j7,j10,j13,j14,Md324M7,dotmapMd324M7R1)
	if (count(Md324M7,1)) Multiply replace_(Md324M7,Md217,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,-i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd217 "1"
#endif

#if `$M8'
* map dots to p0.p4,p0.p5,p0.p2,p1.p2,p2.p4,p2.p5 and change topology to d280
	if (count(Md324M8,1)) Multiply replace_(i1,j2,i2,j3,i3,j7,i4,j8,i5,j5,i6,j6,i7,j4,i9,j1,i10,j11,i12,j10,i14,j14);
	#call replace(i8,`Q2'-2*j11+2*j13+j2+j4-2*j9,j,j2,j4,j9,j11,j13,Md324M8,dotmapMd324M8R1)
	#call replace(i11,-`Q2'/2+j1/2+j11-j6/2+j9,j,j1,j6,j9,j11,Md324M8,dotmapMd324M8R2)
	#call replace(i13,-j11+j12+j13+j2,j,j2,j11,j12,j13,Md324M8,dotmapMd324M8R3)
	if (count(Md324M8,1)) Multiply replace_(Md324M8,Md280,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd280 "1"
#endif

#if `$M9'
* map dots to p1.p2,p1.p3,p0.p1,p0.p2,p0.p3,p0.p5 and change topology to d211
	if (count(Md324M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j11,i11,j12,i12,j14,i13,j9);
	#call replace(i9,`Q2'-2*j13+2*j14+j6,j,j6,j13,j14,Md324M9,dotmapMd324M9R1)
	#call replace(i14,`Q2'/2-j1/2+j10-j12-j13+j14+j7/2-j8/2+j9,j,j1,j7,j8,j9,j10,j12,j13,j14,Md324M9,dotmapMd324M9R2)
	if (count(Md324M9,1)) Multiply replace_(Md324M9,Md211,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd211 "1"
#endif
.sort:reduce d324;
#endif
#endprocedure

#procedure Reduced324()
	#call Prepared324()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd324'
		#call MtoZ(Md324,Zd324,i,14)
		#call Reduce(d324)
		#call ZtoM(Zd324,Md324,i,14)
#else
		#if `USETURBO'
			#call TurboMd324()
		#endif
		#call triangleS(Md324,i3,i4,i5,i6,i7,i12,i14,0,0)
#endif
		#call Prepared324()
	#endif
#endprocedure
*--#] reduce-d324 : 
*--#[ reduce-d323 :
#procedure Insertiond323()
* merge propagators with same momentum, and repeated dots
	if (count(Md323b,1)) Multiply replace_(Md323b,Md323c,i7,i6,i6,i7,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md323c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j3/2+j4/2-j8,j,j1,j2,j3,j4,j8,Md323c,dotmapMd323cR1)
	#call replace(i11,j1/2-j3/2+j5/2-j9,j,j1,j3,j5,j9,Md323c,dotmapMd323cR2)
	#call replace(i12,j1/2-j3/2+j6/2-j7/2-j9,j,j1,j3,j6,j7,j9,Md323c,dotmapMd323cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md323c,dotmapMd323cR4)
	#call replace(i14,`Q2'/2+j3/2-j4/2,j,j3,j4,Md323c,dotmapMd323cR5)
	#call replace(i15,j1/2+j3/2-j5/2,j,j1,j3,j5,Md323c,dotmapMd323cR6)
	if (count(Md323c,1)) Multiply replace_(Md323c,Md323d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p6,p1.p6 and change topology to d145
	if (count(Md323d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i7,j6);
	#call replace(i8,j1/2-j2/2-j3/2+j4/2-j8,j,j1,j2,j3,j4,j8,Md323d,dotmapMd323dR1)
	#call replace(i9,j1/2-j3/2+j5/2-j9,j,j1,j3,j5,j9,Md323d,dotmapMd323dR2)
	if (count(Md323d,1)) Multiply replace_(Md323d,Md145,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd145 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared323()
* Topology: 0-1 4-8 2-8 1-4 1-2 3-4 2-6 2-6 2-3 3-6 8-9
* Dots: p0.p8,p1.p8,p0.p6,p1.p6,p3.p6
* Apply automorphisms
if (match(Md323*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n11==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n11+$n12+$n13+$n14)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i7,i7,i6);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13+$n14)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd323 automorphism;

#call CheckRemovedPropagators(d323,9,6,1,2,3,4,5,9,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d323;
#endif
#endprocedure

#procedure Reduced323()
	#call Prepared323()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd323'
		#call MtoZ(Md323,Zd323,i,14)
		#call Reduce(d323)
		#call ZtoM(Zd323,Md323,i,14)
		#call Prepared323()
#else
		#if `USETURBO'
			#call TurboMd323()
		#endif
		#call insertionS(Md323,i6,i7,i12,i13,i14,i6,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md323b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond323()
#endif
	#endif
#endprocedure
*--#] reduce-d323 : 
*--#[ reduce-d322 :
#procedure Insertiond322()
* merge propagators with same momentum, and repeated dots
	if (count(Md322b,1)) Multiply replace_(Md322b,Md322c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md322c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j5/2-j6/2+j8,j,j1,j5,j6,j8,Md322c,dotmapMd322cR1)
	#call replace(i11,j2/2-j4/2+j5/2+j9,j,j2,j4,j5,j9,Md322c,dotmapMd322cR2)
	#call replace(i12,-`Q2'/2+j2/2-j4/2+j7/2+j9,j,j2,j4,j7,j9,Md322c,dotmapMd322cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md322c,dotmapMd322cR4)
	#call replace(i14,j2/2-j3/2-j5/2+j6/2,j,j2,j3,j5,j6,Md322c,dotmapMd322cR5)
	#call replace(i15,j2/2+j4/2-j5/2,j,j2,j4,j5,Md322c,dotmapMd322cR6)
	if (count(Md322c,1)) Multiply replace_(Md322c,Md322d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d121
	if (count(Md322d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j6,i6,j5,i7,j7);
	#call replace(i8,-j1/2+j5/2-j6/2+j8,j,j1,j5,j6,j8,Md322d,dotmapMd322dR1)
	#call replace(i9,-j3/2+j4/2-j6/2+j8-j9,j,j3,j4,j6,j8,j9,Md322d,dotmapMd322dR2)
	if (count(Md322d,1)) Multiply replace_(Md322d,Md121,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd121 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared322()
* Topology: 0-1 1-2 1-7 2-3 3-4 3-5 4-5 4-7 2-5 2-7 7-9
* Dots: p3.p9,p4.p9,p0.p3,p0.p4,p0.p6
* Apply automorphisms
if (match(Md322*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n13,$n14,$n12,$n11,$n10,$n9,$n3,$n7,$n4,$n5,$n6,$n8,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n13+$n14)*replace_(i3,i8,i4,i6,i6,i4,i8,i3,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd322 automorphism;

#call CheckRemovedPropagators(d322,9,7,1,3,4,5,6,7,8,2,9)
#if `$DOACTION' == 0
.sort:reduce d322;
#endif
#endprocedure

#procedure Reduced322()
	#call Prepared322()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd322'
		#call MtoZ(Md322,Zd322,i,14)
		#call Reduce(d322)
		#call ZtoM(Zd322,Md322,i,14)
		#call Prepared322()
#else
		#if `USETURBO'
			#call TurboMd322()
		#endif
		#call MtoZ(Md322,Zd322,i,14)
		#call carpet(Zd322,1,2,0,0,0,3,12,3,4,6)
		#call ZtoM(Zd322b,Md322b,i,16)
		#call Insertiond322()
#endif
	#endif
#endprocedure
*--#] reduce-d322 : 
*--#[ reduce-d321 :
#procedure Insertiond321()
* merge propagators with same momentum, and repeated dots
	if (count(Md321b,1)) Multiply replace_(Md321b,Md321c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,-i8,i10,-i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md321c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j1/2+j5/2-j6/2+j8,j,j1,j5,j6,j8,Md321c,dotmapMd321cR1)
	#call replace(i11,-j1/2+j3/2-j4/2+j5/2+j9,j,j1,j3,j4,j5,j9,Md321c,dotmapMd321cR2)
	#call replace(i12,-`Q2'/2+j3/2-j4/2+j7/2-j8+j9,j,j3,j4,j7,j8,j9,Md321c,dotmapMd321cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md321c,dotmapMd321cR4)
	#call replace(i14,j2/2-j3/2-j5/2+j6/2,j,j2,j3,j5,j6,Md321c,dotmapMd321cR5)
	#call replace(i15,j2/2+j4/2-j5/2,j,j2,j4,j5,Md321c,dotmapMd321cR6)
	if (count(Md321c,1)) Multiply replace_(Md321c,Md321d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d121
	if (count(Md321d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,j1/2-j5/2+j6/2+j8,j,j1,j5,j6,j8,Md321d,dotmapMd321dR1)
	#call replace(i9,j1/2-j3/2+j4/2-j5/2+j9,j,j1,j3,j4,j5,j9,Md321d,dotmapMd321dR2)
	if (count(Md321d,1)) Multiply replace_(Md321d,Md121,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd121 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared321()
* Topology: 0-1 1-2 1-6 2-3 3-4 3-5 4-5 2-4 5-6 2-6 2-9
* Dots: p3.p9,p4.p9,p0.p3,p0.p4,p0.p6
* Apply automorphisms
if (match(Md321*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n12==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n5,$n6,$n4,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11+$n13)*replace_(i3,i7,i5,i6,i6,i5,i7,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd321 automorphism;

#call CheckRemovedPropagators(d321,9,7,2,3,4,5,6,7,8,1,9)
#if `$DOACTION' == 0
.sort:reduce d321;
#endif
#endprocedure

#procedure Reduced321()
	#call Prepared321()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd321'
		#call MtoZ(Md321,Zd321,i,14)
		#call Reduce(d321)
		#call ZtoM(Zd321,Md321,i,14)
		#call Prepared321()
#else
		#if `USETURBO'
			#call TurboMd321()
		#endif
		#call MtoZ(Md321,Zd321,i,14)
		#call carpet(Zd321,2,1,0,0,0,3,12,3,4,6)
		#call ZtoM(Zd321b,Md321b,i,16)
		#call Insertiond321()
#endif
	#endif
#endprocedure
*--#] reduce-d321 : 
*--#[ reduce-d320 :
#procedure Insertiond320()
* merge propagators with same momentum, and repeated dots
	if (count(Md320b,1)) Multiply replace_(Md320b,Md320c,i5,i4,i4,i5,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,-i10,i12,-i11,i13,-i12,i14,i13);

* rewrite insertion dots
	if (count(Md320c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j3/2+j5/2,j,j3,j5,Md320c,dotmapMd320cR1)
	#call replace(i11,`Q2'/2-j2/2-j3/2+j4/2,j,j2,j3,j4,Md320c,dotmapMd320cR2)
	#call replace(i12,j4/2+j6/2-j7/2+j8-j9,j,j4,j6,j7,j8,j9,Md320c,dotmapMd320cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md320c,dotmapMd320cR4)
	if (count(Md320c,1)) Multiply replace_(Md320c,Md320d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p4 and change topology to d146
	if (count(Md320d,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j6,i5,j3,i6,j4,i7,j5,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md320d,dotmapMd320dR1)
	if (count(Md320d,1)) Multiply replace_(Md320d,Md146,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd146 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared320()
* Topology: 0-1 4-8 2-8 1-4 1-5 3-4 2-5 2-5 2-3 2-3 8-9
* Dots: p0.p8,p1.p8,p0.p6,p1.p6,p6.p8
* Apply automorphisms
if (match(Md320*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 2); Multiply replace_(i8,i9,i9,i8);
elseif ($bestiso == 3); Multiply replace_(i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd320 automorphism;

#call CheckRemovedPropagators(d320,9,5,1,2,3,4,5,6,7,8,9)
#if `$DOACTION' == 0
.sort:reduce d320;
#endif
#endprocedure

#procedure Reduced320()
	#call Prepared320()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd320'
		#call MtoZ(Md320,Zd320,i,14)
		#call Reduce(d320)
		#call ZtoM(Zd320,Md320,i,14)
		#call Prepared320()
#else
		#if `USETURBO'
			#call TurboMd320()
		#endif
		#call insertionS(Md320,i6,i7,i12,i13,i14,i6,`Q2',i1,i8,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md320b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond320()
#endif
	#endif
#endprocedure
*--#] reduce-d320 : 
*--#[ reduce-d319 :
#procedure Insertiond319()
* merge propagators with same momentum, and repeated dots
	if (count(Md319b,1)) Multiply replace_(Md319b,Md319c,i7,i3,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md319c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j4/2+j7/2,j,j1,j2,j4,j7,Md319c,dotmapMd319cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md319c,dotmapMd319cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md319c,dotmapMd319cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md319c,dotmapMd319cR4)
	if (count(Md319c,1)) Multiply replace_(Md319c,Md319d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5 and change topology to d138
	if (count(Md319d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md319d,1)) Multiply replace_(Md319d,Md138,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd138 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared319()
* Topology: 0-1 1-2 1-7 2-4 2-4 2-8 4-6 4-6 6-7 7-8 8-9
* Dots: p0.p6,p1.p6,p0.p3,p1.p3,p3.p6
* Apply automorphisms
if (match(Md319*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n6,$n7,$n1,$n3,$n4,$n9,$n5)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n6,$n7,$n1,$n4,$n3,$n9,$n5)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n7,$n6,$n1,$n3,$n4,$n9,$n5)
endif;
if (($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n7,$n6,$n1,$n4,$n3,$n9,$n5)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i6,i7,i7,i6);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i9,i2);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i6,i7,i7,i6,i9,i2);
elseif ($bestiso == 4); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 5); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i3,i4,i4,i3,i5,i1,i9,i2);
elseif ($bestiso == 6); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i9,i2);
elseif ($bestiso == 7); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd319 automorphism;

#call CheckRemovedPropagators(d319,9,5,1,2,5,8,9,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d319;
#endif
#endprocedure

#procedure Reduced319()
	#call Prepared319()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd319'
		#call MtoZ(Md319,Zd319,i,14)
		#call Reduce(d319)
		#call ZtoM(Zd319,Md319,i,14)
		#call Prepared319()
#else
		#if `USETURBO'
			#call TurboMd319()
		#endif
		#call insertionS(Md319,i3,i4,i12,i13,i14,i3,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md319b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond319()
#endif
	#endif
#endprocedure
*--#] reduce-d319 : 
*--#[ reduce-d318 :
#procedure Insertiond318()
* merge propagators with same momentum, and repeated dots
	if (count(Md318b,1)) Multiply replace_(Md318b,Md318c,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i9,i12,i10,i13,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md318c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j5/2-j7/2,j,j1,j5,j7,Md318c,dotmapMd318cR1)
	#call replace(i11,j3/2+j5/2-j6/2,j,j3,j5,j6,Md318c,dotmapMd318cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md318c,dotmapMd318cR3)
	#call replace(i13,j1/2+j3/2-j4/2,j,j1,j3,j4,Md318c,dotmapMd318cR4)
	if (count(Md318c,1)) Multiply replace_(Md318c,Md318d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4 and change topology to d140
	if (count(Md318d,1)) Multiply replace_(i1,j5,i2,j1,i3,j6,i4,j4,i5,j2,i6,j7,i7,j3,i9,j8);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j9,j,j1,j5,j9,Md318d,dotmapMd318dR1)
	if (count(Md318d,1)) Multiply replace_(Md318d,Md140,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd140 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared318()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-4 4-7 3-6 6-7 7-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md318*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd318 automorphism;

#call CheckRemovedPropagators(d318,9,6,1,3,4,7,8,9,2,5,6)
#if `$DOACTION' == 0
.sort:reduce d318;
#endif
#endprocedure

#procedure Reduced318()
	#call Prepared318()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd318'
		#call MtoZ(Md318,Zd318,i,14)
		#call Reduce(d318)
		#call ZtoM(Zd318,Md318,i,14)
		#call Prepared318()
#else
		#if `USETURBO'
			#call TurboMd318()
		#endif
		#call insertionS(Md318,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md318b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond318()
#endif
	#endif
#endprocedure
*--#] reduce-d318 : 
*--#[ reduce-d317 :
#procedure Insertiond317()
* merge propagators with same momentum, and repeated dots
	if (count(Md317b,1)) Multiply replace_(Md317b,Md317c,i6,i5,i5,i6,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md317c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j8-j9,j,j8,j9,Md317c,dotmapMd317cR1)
	#call replace(i11,j3/2-j4/2-j5/2+j7/2,j,j3,j4,j5,j7,Md317c,dotmapMd317cR2)
	#call replace(i12,j3/2-j5/2+j6/2,j,j3,j5,j6,Md317c,dotmapMd317cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md317c,dotmapMd317cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md317c,dotmapMd317cR5)
	if (count(Md317c,1)) Multiply replace_(Md317c,Md317d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5 and change topology to d147
	if (count(Md317d,1)) Multiply replace_(i1,j3,i2,j2,i3,j6,i4,j7,i5,j4,i6,j5,i7,j1);
	#call replace(i8,`Q2'/2-j2/2+j3/2-j8+j9,j,j2,j3,j8,j9,Md317d,dotmapMd317dR1)
	#call replace(i9,`Q2'/2-j2/2+j3/2-j8,j,j2,j3,j8,Md317d,dotmapMd317dR2)
	if (count(Md317d,1)) Multiply replace_(Md317d,Md147,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd147 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared317()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-5 3-5 3-7 5-6 6-7 7-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md317*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd317 automorphism;

#call CheckRemovedPropagators(d317,9,6,1,3,4,7,8,9,2,5,6)
#if `$DOACTION' == 0
.sort:reduce d317;
#endif
#endprocedure

#procedure Reduced317()
	#call Prepared317()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd317'
		#call MtoZ(Md317,Zd317,i,14)
		#call Reduce(d317)
		#call ZtoM(Zd317,Md317,i,14)
		#call Prepared317()
#else
		#if `USETURBO'
			#call TurboMd317()
		#endif
		#call insertionS(Md317,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md317b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond317()
#endif
	#endif
#endprocedure
*--#] reduce-d317 : 
*--#[ reduce-d316 :
#procedure Insertiond316()
* merge propagators with same momentum, and repeated dots
	if (count(Md316b,1)) Multiply replace_(Md316b,Md316c,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i9,i12,i10,i13,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md316c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2+j3/2-j4/2-j6/2+j7/2-j8+j9,j,j1,j2,j3,j4,j6,j7,j8,j9,Md316c,dotmapMd316cR1)
	#call replace(i11,j3/2+j5/2-j6/2,j,j3,j5,j6,Md316c,dotmapMd316cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md316c,dotmapMd316cR3)
	#call replace(i13,j1/2+j3/2-j4/2,j,j1,j3,j4,Md316c,dotmapMd316cR4)
	if (count(Md316c,1)) Multiply replace_(Md316c,Md316d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d136
	if (count(Md316d,1)) Multiply replace_(i1,j2,i2,j3,i3,j7,i4,j1,i5,j5,i6,j4,i7,j6,i8,j9);
	#call replace(i9,-j8+j9,j,j8,j9,Md316d,dotmapMd316dR1)
	if (count(Md316d,1)) Multiply replace_(Md316d,Md136,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd136 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared316()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-4 3-4 4-7 3-6 6-7 7-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md316*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n4,$n3,$n7,$n5,$n6,$n9,$n8,$n1,$n2)
endif;
if (($n10==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n4,$n3,$n7,$n6,$n5,$n9,$n8,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply sign_($n10+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i5,i6,i6,i5,i8,i3,i9,i4);
elseif ($bestiso == 3); Multiply sign_($n10+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i9,i8,i3,i9,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd316 automorphism;

#call CheckRemovedPropagators(d316,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d316;
#endif
#endprocedure

#procedure Reduced316()
	#call Prepared316()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd316'
		#call MtoZ(Md316,Zd316,i,14)
		#call Reduce(d316)
		#call ZtoM(Zd316,Md316,i,14)
		#call Prepared316()
#else
		#if `USETURBO'
			#call TurboMd316()
		#endif
		#call insertionS(Md316,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md316b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond316()
#endif
	#endif
#endprocedure
*--#] reduce-d316 : 
*--#[ reduce-d315 :
#procedure Insertiond315()
* merge propagators with same momentum, and repeated dots
	if (count(Md315b,1)) Multiply replace_(Md315b,Md315c,i16,i9,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md315c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j1/2+j2/2+j3/2-j4/2-j9,j,j1,j2,j3,j4,j9,Md315c,dotmapMd315cR1)
	#call replace(i11,-j1/2+j3/2-j4/2-j6/2+j8/2-j9,j,j1,j3,j4,j6,j8,j9,Md315c,dotmapMd315cR2)
	#call replace(i12,-j1/2+j3/2-j4/2+j5/2-j7/2+j8/2-j9,j,j1,j3,j4,j5,j7,j8,j9,Md315c,dotmapMd315cR3)
	#call replace(i13,j5/2-j6/2-j7/2,j,j5,j6,j7,Md315c,dotmapMd315cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md315c,dotmapMd315cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md315c,dotmapMd315cR6)
	#call replace(i16,j1/2+j3/2-j5/2,j,j1,j3,j5,Md315c,dotmapMd315cR7)
	#call replace(i17,j4/2-j5/2+j6/2-j8/2+j9,j,j4,j5,j6,j8,j9,Md315c,dotmapMd315cR8)
	#call replace(i18,j4/2+j7/2-j8/2+j9,j,j4,j7,j8,j9,Md315c,dotmapMd315cR9)
	if (count(Md315c,1)) Multiply replace_(Md315c,Md315d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d194
	if (count(Md315d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md315d,1)) Multiply replace_(Md315d,Md194,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd194 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared315()
* Topology: 0-1 4-8 6-8 1-4 1-5 2-4 2-6 2-5 5-6 2-6 8-9
* Dots: p0.p7,p0.p6,p1.p6,p3.p6,p6.p7
* Apply automorphisms
if (match(Md315*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i6,i9,i9,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd315 automorphism;

#call CheckRemovedPropagators(d315,9,7,1,2,3,4,5,7,8,6,9)
#if `$DOACTION' == 0
.sort:reduce d315;
#endif
#endprocedure

#procedure Reduced315()
	#call Prepared315()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd315'
		#call MtoZ(Md315,Zd315,i,14)
		#call Reduce(d315)
		#call ZtoM(Zd315,Md315,i,14)
		#call Prepared315()
#else
		#if `USETURBO'
			#call TurboMd315()
		#endif
		#call insertionS(Md315,i6,i9,i11,i12,i13,i14,i6,`Q2',i1,i3,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md315b,1)) Multiply replace_(<i10,i9>,...,<i20,i19>);
		#call Insertiond315()
#endif
	#endif
#endprocedure
*--#] reduce-d315 : 
*--#[ reduce-d314 :
#procedure Insertiond314()
* merge propagators with same momentum, and repeated dots
	if (count(Md314b,1)) Multiply replace_(Md314b,Md314c,i8,i6,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md314c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j3/2-j4/2-j8,j,j3,j4,j8,Md314c,dotmapMd314cR1)
	#call replace(i11,-`Q2'/2+j2/2+j3/2-j5/2-j9,j,j2,j3,j5,j9,Md314c,dotmapMd314cR2)
	#call replace(i12,-`Q2'/2+j3/2+j6/2-j7/2-j8,j,j3,j6,j7,j8,Md314c,dotmapMd314cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md314c,dotmapMd314cR4)
	#call replace(i14,`Q2'/2+j3/2-j4/2,j,j3,j4,Md314c,dotmapMd314cR5)
	#call replace(i15,j1/2+j3/2-j5/2,j,j1,j3,j5,Md314c,dotmapMd314cR6)
	if (count(Md314c,1)) Multiply replace_(Md314c,Md314d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p6,p3.p6 and change topology to d133
	if (count(Md314d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5,i6,j6,i7,j7);
	#call replace(i8,-`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md314d,dotmapMd314dR1)
	#call replace(i9,-`Q2'/2+j1/2+j4/2-j5/2-j9,j,j1,j4,j5,j9,Md314d,dotmapMd314dR2)
	if (count(Md314d,1)) Multiply replace_(Md314d,Md133,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd133 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared314()
* Topology: 0-1 4-8 2-8 1-4 1-5 2-4 2-6 2-5 5-6 2-6 8-9
* Dots: p0.p7,p1.p7,p0.p6,p1.p6,p3.p6
* Apply automorphisms
if (match(Md314*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i6,i9,i9,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd314 automorphism;

#call CheckRemovedPropagators(d314,9,6,1,2,3,4,5,8,6,7,9)
#if `$DOACTION' == 0
.sort:reduce d314;
#endif
#endprocedure

#procedure Reduced314()
	#call Prepared314()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd314'
		#call MtoZ(Md314,Zd314,i,14)
		#call Reduce(d314)
		#call ZtoM(Zd314,Md314,i,14)
		#call Prepared314()
#else
		#if `USETURBO'
			#call TurboMd314()
		#endif
		#call insertionS(Md314,i6,i9,i12,i13,i14,i6,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md314b,1)) Multiply replace_(<i10,i9>,...,<i17,i16>);
		#call Insertiond314()
#endif
	#endif
#endprocedure
*--#] reduce-d314 : 
*--#[ reduce-d313 :
#procedure Insertiond313()
* merge propagators with same momentum, and repeated dots
	if (count(Md313b,1)) Multiply replace_(Md313b,Md313c,i5,i4,i4,i5,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,-i10,i12,-i11,i13,-i12,i14,i13);

* rewrite insertion dots
	if (count(Md313c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j4/2+j7/2-j8,j,j1,j2,j4,j7,j8,Md313c,dotmapMd313cR1)
	#call replace(i11,j1/2-j4/2+j6/2-j9,j,j1,j4,j6,j9,Md313c,dotmapMd313cR2)
	#call replace(i12,-j3/2-j5/2+j6/2,j,j3,j5,j6,Md313c,dotmapMd313cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md313c,dotmapMd313cR4)
	if (count(Md313c,1)) Multiply replace_(Md313c,Md313d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p6,p1.p6 and change topology to d145
	if (count(Md313d,1)) Multiply replace_(i1,j4,i2,j3,i3,j7,i4,j2,i5,j6,i6,j5,i7,j1);
	#call replace(i8,j1/2-j2/2-j3/2+j4/2-j8,j,j1,j2,j3,j4,j8,Md313d,dotmapMd313dR1)
	#call replace(i9,-j2/2+j4/2-j6/2+j7/2-j8+j9,j,j2,j4,j6,j7,j8,j9,Md313d,dotmapMd313dR2)
	if (count(Md313d,1)) Multiply replace_(Md313d,Md145,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd145 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared313()
* Topology: 0-1 1-2 1-7 2-4 2-5 2-8 4-5 4-5 4-7 7-8 8-9
* Dots: p0.p3,p1.p3,p0.p6,p1.p6,p3.p6
* Apply automorphisms
if (match(Md313*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n6,$n7,$n1,$n4,$n3,$n9,$n5)
endif;
if (($n11==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n7,$n6,$n1,$n4,$n3,$n9,$n5)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i6,i7,i7,i6,i9,i2);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i9,i2);
elseif ($bestiso == 3); Multiply replace_(i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd313 automorphism;

#call CheckRemovedPropagators(d313,9,6,1,2,4,5,8,9,3,6,7)
#if `$DOACTION' == 0
.sort:reduce d313;
#endif
#endprocedure

#procedure Reduced313()
	#call Prepared313()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd313'
		#call MtoZ(Md313,Zd313,i,14)
		#call Reduce(d313)
		#call ZtoM(Zd313,Md313,i,14)
		#call Prepared313()
#else
		#if `USETURBO'
			#call TurboMd313()
		#endif
		#call insertionS(Md313,i6,i7,i12,i13,i14,i6,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md313b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond313()
#endif
	#endif
#endprocedure
*--#] reduce-d313 : 
*--#[ reduce-d312 :
#procedure Insertiond312()
* merge propagators with same momentum, and repeated dots
	if (count(Md312b,1)) Multiply replace_(Md312b,Md312c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i11,i8,i10,i9,i15,i9,i12,i10,i13,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md312c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j3/2+j4/2,j,j1,j3,j4,Md312c,dotmapMd312cR1)
	#call replace(i11,j4/2+j5/2-j6/2,j,j4,j5,j6,Md312c,dotmapMd312cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md312c,dotmapMd312cR3)
	#call replace(i13,j1/2+j5/2-j7/2,j,j1,j5,j7,Md312c,dotmapMd312cR4)
	if (count(Md312c,1)) Multiply replace_(Md312c,Md312d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p5 and change topology to d134
	if (count(Md312d,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j5,i5,j4,i6,j6,i7,j3,i8,j9);
	#call replace(i9,`Q2'/2-j1/2+j2/2-j8,j,j1,j2,j8,Md312d,dotmapMd312dR1)
	if (count(Md312d,1)) Multiply replace_(Md312d,Md134,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd134 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared312()
* Topology: 0-1 1-2 1-7 2-3 2-6 3-4 3-4 4-7 4-6 6-7 7-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p5.p7
* Apply automorphisms
if (match(Md312*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd312 automorphism;

#call CheckRemovedPropagators(d312,9,6,1,3,4,7,8,9,2,5,6)
#if `$DOACTION' == 0
.sort:reduce d312;
#endif
#endprocedure

#procedure Reduced312()
	#call Prepared312()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd312'
		#call MtoZ(Md312,Zd312,i,14)
		#call Reduce(d312)
		#call ZtoM(Zd312,Md312,i,14)
		#call Prepared312()
#else
		#if `USETURBO'
			#call TurboMd312()
		#endif
		#call insertionS(Md312,i5,i6,i12,i13,i14,i5,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md312b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond312()
#endif
	#endif
#endprocedure
*--#] reduce-d312 : 
*--#[ reduce-d311 :
#procedure Insertiond311()
* merge propagators with same momentum, and repeated dots
	if (count(Md311b,1)) Multiply replace_(Md311b,Md311c,i7,i5,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md311c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j8-j9,j,j8,j9,Md311c,dotmapMd311cR1)
	#call replace(i11,j2/2+j5/2-j7/2+j8-j9,j,j2,j5,j7,j8,j9,Md311c,dotmapMd311cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md311c,dotmapMd311cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md311c,dotmapMd311cR4)
	#call replace(i14,j1/2+j3/2-j4/2,j,j1,j3,j4,Md311c,dotmapMd311cR5)
	if (count(Md311c,1)) Multiply replace_(Md311c,Md311d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Md311d,1)) Multiply replace_(i1,j6,i2,j7,i3,j4,i4,j1,i5,j5,i6,j2,i7,j3,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md311d,dotmapMd311dR1)
	if (count(Md311d,1)) Multiply replace_(Md311d,Mbustar5,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPObustar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared311()
* Topology: 0-1 1-2 1-6 2-3 2-7 3-5 3-5 3-7 5-6 6-7 7-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md311*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd311 automorphism;

#call CheckRemovedPropagators(d311,9,7,1,2,3,4,7,8,9,5,6)
#if `$DOACTION' == 0
.sort:reduce d311;
#endif
#endprocedure

#procedure Reduced311()
	#call Prepared311()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd311'
		#call MtoZ(Md311,Zd311,i,14)
		#call Reduce(d311)
		#call ZtoM(Zd311,Md311,i,14)
		#call Prepared311()
#else
		#if `USETURBO'
			#call TurboMd311()
		#endif
		#call insertionS(Md311,i5,i6,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md311b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond311()
#endif
	#endif
#endprocedure
*--#] reduce-d311 : 
*--#[ reduce-d310 :
#procedure Insertiond310()
* merge propagators with same momentum, and repeated dots
	if (count(Md310b,1)) Multiply replace_(Md310b,Md310c,i5,i4,i4,i5,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md310c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j4/2+j7/2-j8,j,j1,j2,j4,j7,j8,Md310c,dotmapMd310cR1)
	#call replace(i11,j1/2-j4/2+j5/2-j6/2+j7/2-j8,j,j1,j4,j5,j6,j7,j8,Md310c,dotmapMd310cR2)
	#call replace(i12,-j3/2-j6/2+j7/2-j8+j9,j,j3,j6,j7,j8,j9,Md310c,dotmapMd310cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md310c,dotmapMd310cR4)
	if (count(Md310c,1)) Multiply replace_(Md310c,Md310d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Md310d,1)) Multiply replace_(i1,j1,i2,j6,i3,j2,i4,j4,i5,j5,i6,j7,i7,j3);
	#call replace(i8,`Q2'/2+j3/2-j4/2-j8,j,j3,j4,j8,Md310d,dotmapMd310dR1)
	#call replace(i9,-j5/2+j6/2+j7/2-j8+j9,j,j5,j6,j7,j8,j9,Md310d,dotmapMd310dR2)
	if (count(Md310d,1)) Multiply replace_(Md310d,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared310()
* Topology: 0-1 1-2 1-6 2-7 2-5 2-5 2-8 5-6 6-7 7-8 8-9
* Dots: p0.p3,p1.p3,p0.p4,p1.p4,p3.p4
* Apply automorphisms
if (match(Md310*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd310 automorphism;

#call CheckRemovedPropagators(d310,9,7,1,2,3,6,7,8,9,4,5)
#if `$DOACTION' == 0
.sort:reduce d310;
#endif
#endprocedure

#procedure Reduced310()
	#call Prepared310()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd310'
		#call MtoZ(Md310,Zd310,i,14)
		#call Reduce(d310)
		#call ZtoM(Zd310,Md310,i,14)
		#call Prepared310()
#else
		#if `USETURBO'
			#call TurboMd310()
		#endif
		#call insertionS(Md310,i4,i5,i12,i13,i14,i4,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md310b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond310()
#endif
	#endif
#endprocedure
*--#] reduce-d310 : 
*--#[ reduce-d309 :
#procedure Insertiond309()
* merge propagators with same momentum, and repeated dots
	if (count(Md309b,1)) Multiply replace_(Md309b,Md309c,i16,i9,i17,i16,i18,i17,i19,i18);

* rewrite insertion dots
	if (count(Md309c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j4/2+j8/2,j,j1,j2,j4,j8,Md309c,dotmapMd309cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md309c,dotmapMd309cR2)
	#call replace(i12,j1/2-j3/2-j4/2,j,j1,j3,j4,Md309c,dotmapMd309cR3)
	#call replace(i13,j3/2+j5/2-j6/2,j,j3,j5,j6,Md309c,dotmapMd309cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md309c,dotmapMd309cR5)
	#call replace(i15,`Q2'/2+j4/2-j8/2,j,j4,j8,Md309c,dotmapMd309cR6)
	#call replace(i16,j1/2-j3/2+j4/2,j,j1,j3,j4,Md309c,dotmapMd309cR7)
	#call replace(i17,j2/2+j5/2-j7/2+j9,j,j2,j5,j7,j9,Md309c,dotmapMd309cR8)
	#call replace(i18,j2/2-j3/2+j6/2-j7/2+j9,j,j2,j3,j6,j7,j9,Md309c,dotmapMd309cR9)
	if (count(Md309c,1)) Multiply replace_(Md309c,Md309d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7 and change topology to d195
	if (count(Md309d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-`Q2'/2+j1/2-j2/2+j9,j,j1,j2,j9,Md309d,dotmapMd309dR1)
	if (count(Md309d,1)) Multiply replace_(Md309d,Md195,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd195 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared309()
* Topology: 0-1 1-2 1-6 2-4 2-4 2-8 4-6 4-7 6-7 7-8 8-9
* Dots: p0.p6,p0.p3,p1.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md309*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n6,$n7,$n1,$n3,$n4,$n9,$n5)
endif;
if (($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n12,$n13,$n11,$n10,$n2,$n8,$n6,$n7,$n1,$n4,$n3,$n9,$n5)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i9,i2);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i9,i5,i1,i6,i7,i7,i6,i9,i2,i12,i13,i13,i12);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd309 automorphism;

#call CheckRemovedPropagators(d309,9,7,1,2,5,6,7,8,9,3,4)
#if `$DOACTION' == 0
.sort:reduce d309;
#endif
#endprocedure

#procedure Reduced309()
	#call Prepared309()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd309'
		#call MtoZ(Md309,Zd309,i,14)
		#call Reduce(d309)
		#call ZtoM(Zd309,Md309,i,14)
		#call Prepared309()
#else
		#if `USETURBO'
			#call TurboMd309()
		#endif
		#call insertionS(Md309,i3,i4,i11,i12,i13,i14,i3,`Q2',i1,i5,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md309b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond309()
#endif
	#endif
#endprocedure
*--#] reduce-d309 : 
*--#[ reduce-d308 :
#procedure Prepared308()
* Topology: 0-1 7-8 2-7 1-2 1-7 3-7 3-4 4-8 2-4 2-3 8-9
* Dots: p0.p2,p0.p6,p1.p2,p1.p3,p2.p6
* Apply automorphisms
if (match(Md308*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd308 automorphism;

#call CheckRemovedPropagators(d308,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md308M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j12,i11,j14,i14,j10);
	#call replace(i1,2*j12+2*j13-j2+j3+j6,j,j2,j3,j6,j12,j13,Md308M1,dotmapMd308M1R1)
	#call replace(i12,-j11+j12,j,j11,j12,Md308M1,dotmapMd308M1R2)
	#call replace(i13,`Q2'/2+j1/2-j3/2+j4/2-j6/2+j9,j,j1,j3,j4,j6,j9,Md308M1,dotmapMd308M1R3)
	if (count(Md308M1,1)) Multiply replace_(Md308M1,Md281,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd281 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p5,p1.p4,p1.p2,p2.p4,p2.p5 and change topology to d221
	if (count(Md308M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i11,j10,i13,j12);
	#call replace(i2,-`Q2'+2*j11+2*j12+2*j13+j3+j4+j6-2*j9,j,j3,j4,j6,j9,j11,j12,j13,Md308M2,dotmapMd308M2R1)
	#call replace(i10,j1/2+j2/2-j3/2-j6/2+j9,j,j1,j2,j3,j6,j9,Md308M2,dotmapMd308M2R2)
	#call replace(i12,-`Q2'/2+j1/2+j11+j12+j6/2,j,j1,j6,j11,j12,Md308M2,dotmapMd308M2R3)
	#call replace(i14,j14+j4/2-j6/2+j7/2-j8/2,j,j4,j6,j7,j8,j14,Md308M2,dotmapMd308M2R4)
	if (count(Md308M2,1)) Multiply replace_(Md308M2,Md221,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd221 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d206
	if (count(Md308M3,1)) Multiply replace_(i1,j3,i2,j1,i4,j4,i5,j5,i6,j8,i7,j6,i8,j7,i9,j2,i10,j11,i12,j13);
	#call replace(i3,2*j10+2*j11-j3+j4+j6,j,j3,j4,j6,j10,j11,Md308M3,dotmapMd308M3R1)
	#call replace(i11,-j10+j9,j,j9,j10,Md308M3,dotmapMd308M3R2)
	#call replace(i13,`Q2'/2+j1/2+j14-j4/2+j5/2-j6/2,j,j1,j4,j5,j6,j14,Md308M3,dotmapMd308M3R3)
	#call replace(i14,j12-j14,j,j12,j14,Md308M3,dotmapMd308M3R4)
	if (count(Md308M3,1)) Multiply replace_(Md308M3,Md206,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd206 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p5,p0.p2,p1.p2,p2.p4,p2.p5 and change topology to d280
	if (count(Md308M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,-j11,i11,j10,i12,-j12,i14,-j14);
	#call replace(i4,j1+2*j11+j3-j6+2*j9,j,j1,j3,j6,j9,j11,Md308M4,dotmapMd308M4R1)
	#call replace(i13,`Q2'/2-j1/2-j11+j13+j2/2-j3/2+j4/2-j9,j,j1,j2,j3,j4,j9,j11,j13,Md308M4,dotmapMd308M4R2)
	if (count(Md308M4,1)) Multiply replace_(Md308M4,Md280,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd280 "1"
#endif

#if `$M5'
* map dots to p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6 and change topology to d207
	if (count(Md308M5,1)) Multiply replace_(i1,j2,i2,j6,i3,j5,i4,j1,i6,j7,i7,j3,i8,j4,i9,j8,i10,j11,i12,j13);
	#call replace(i5,j1-2*j10+2*j12-2*j13+j2+j6,j,j1,j2,j6,j10,j12,j13,Md308M5,dotmapMd308M5R1)
	#call replace(i11,`Q2'/2-j2/2+j3/2-j9,j,j2,j3,j9,Md308M5,dotmapMd308M5R2)
	#call replace(i13,`Q2'/2-j10+j2/2-j3/2,j,j2,j3,j10,Md308M5,dotmapMd308M5R3)
	#call replace(i14,j11-j13-j14,j,j11,j13,j14,Md308M5,dotmapMd308M5R4)
	if (count(Md308M5,1)) Multiply replace_(Md308M5,Md207,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd207 "1"
#endif

#if `$M6'
* map dots to p0.p2,p1.p2,p0.p7,p1.p7,p2.p7,p3.p7 and change topology to d208
	if (count(Md308M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10);
	#call replace(i6,-2*j11+2*j12+j6+j7,j,j6,j7,j11,j12,Md308M6,dotmapMd308M6R1)
	#call replace(i11,`Q2'/2-j1/2-j11+j6/2,j,j1,j6,j11,Md308M6,dotmapMd308M6R2)
	#call replace(i13,`Q2'/2+j10+j13-j14+j3/2-j4/2+j5/2-j6/2+j7/2-j8/2-j9,j,j3,j4,j5,j6,j7,j8,j9,j10,j13,j14,Md308M6,dotmapMd308M6R3)
	#call replace(i14,-j10-j13+j9,j,j9,j10,j13,Md308M6,dotmapMd308M6R4)
	if (count(Md308M6,1)) Multiply replace_(Md308M6,Md208,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd208 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(Md308M7,1)) Multiply replace_(i1,j2,i2,j8,i3,j3,i4,j1,i5,j6,i6,j5,i8,j4,i9,j7);
	#call replace(i7,`Q2'+j2+2*j9,j,j2,j9,Md308M7,dotmapMd308M7R1)
	#call replace(i10,-`Q2'/2-j1/2-j11+j3/2-j9,j,j1,j3,j9,j11,Md308M7,dotmapMd308M7R2)
	#call replace(i11,`Q2'-j10+j9,j,j9,j10,Md308M7,dotmapMd308M7R3)
	#call replace(i12,j12+j13+j2,j,j2,j12,j13,Md308M7,dotmapMd308M7R4)
	#call replace(i13,j12-j9,j,j9,j12,Md308M7,dotmapMd308M7R5)
	#call replace(i14,-j1/2-j10-j12+j14-j2/2+j3/2+j4/2+j6/2-j7/2,j,j1,j2,j3,j4,j6,j7,j10,j12,j14,Md308M7,dotmapMd308M7R6)
	if (count(Md308M7,1)) Multiply replace_(Md308M7,Mbebe,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPObebe "1"
#endif

#if `$M8'
* map dots to p0.p2,p1.p2,p1.p3,p0.p6,p1.p6,p2.p6 and change topology to d270
	if (count(Md308M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8,i10,j9,i11,-j12,i12,j10,i13,j11,i14,-j14);
	#call replace(i8,2*j12-2*j13+j6+j7,j,j6,j7,j12,j13,Md308M8,dotmapMd308M8R1)
	if (count(Md308M8,1)) Multiply replace_(Md308M8,Md270,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd270 "1"
#endif

#if `$M9'
* map dots to p0.p6,p3.p6,p0.p2,p1.p2,p2.p3,p2.p6 and change topology to d271
	if (count(Md308M9,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i10,j11,i11,j9,i12,j12,i14,j14);
	#call replace(i9,2*j10-2*j14+j5-j7+j8,j,j5,j7,j8,j10,j14,Md308M9,dotmapMd308M9R1)
	#call replace(i13,`Q2'/2-j11+j12+j13-j2/2-j4/2+j5/2-j7/2,j,j2,j4,j5,j7,j11,j12,j13,Md308M9,dotmapMd308M9R2)
	if (count(Md308M9,1)) Multiply replace_(Md308M9,Md271,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd271 "1"
#endif
.sort:reduce d308;
#endif
#endprocedure

#procedure Reduced308()
	#call Prepared308()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd308'
		#call MtoZ(Md308,Zd308,i,14)
		#call Reduce(d308)
		#call ZtoM(Zd308,Md308,i,14)
#else
		#if `USETURBO'
			#call TurboMd308()
		#endif
		#call triangleS(Md308,i9,i8,i6,i5,i7,i11,i14,0,0)
#endif
		#call Prepared308()
	#endif
#endprocedure
*--#] reduce-d308 : 
*--#[ reduce-d307 :
#procedure Prepared307()
* Topology: 0-1 1-2 1-6 2-4 2-5 2-8 4-5 4-6 5-6 6-8 8-9
* Dots: p0.p6,p0.p7,p1.p5,p1.p6,p1.p7
* Apply automorphisms
if (match(Md307*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n5,$n4,$n3,$n6,$n9,$n8,$n7,$n1,$n2,$n6+$n3+$n4)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n5,$n3,$n4,$n6,$n9,$n7,$n8,$n1,$n2,$n6+$n4+$n3)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n1,$n4,$n3,$n6,$n2,$n8,$n7,$n5,$n9,$n6+$n3+$n4)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n4,$n6,$n2,$n7,$n8,$n5,$n9,$n6+$n4+$n3)
endif;
if (($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n6+$n7+$n8)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n2,$n8,$n7,$n6,$n1,$n4,$n3,$n9,$n5,$n6+$n7+$n8)
endif;
if (($n11==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n2,$n7,$n8,$n6,$n1,$n3,$n4,$n9,$n5,$n6+$n8+$n7)
endif;
if (($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n6+$n7+$n8)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n3,$n4,$n2,$n1,$n6+$n8+$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i9,i7,i3,i8,i4,i9,i5);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i8,i4,i7,i5,i9,i7,i4,i8,i3,i9,i5);
elseif ($bestiso == 2); Multiply sign_($n10+$n13)*replace_(i1,i9,i2,i5,i3,i7,i4,i8,i5,i2,i7,i3,i8,i4,i9,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i9,i2,i5,i3,i8,i4,i7,i5,i2,i7,i4,i8,i3,i9,i1);
elseif ($bestiso == 5); Multiply sign_($n10+$n11+$n13+$n14)*replace_(i1,i5,i2,i9,i5,i1,i9,i2);
elseif ($bestiso == 6); Multiply sign_($n11+$n14)*replace_(i1,i5,i2,i9,i3,i4,i4,i3,i5,i1,i7,i8,i8,i7,i9,i2);
elseif ($bestiso == 7); Multiply sign_($n10+$n13)*replace_(i3,i4,i4,i3,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd307 automorphism;

#call CheckRemovedPropagators(d307,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md307M1,1)) Multiply replace_(i2,j1,i3,j4,i4,j6,i5,j3,i6,j5,i7,j8,i8,j7,i9,j2,i10,j14);
	#call replace(i1,`Q2'+j1-2*j12,j,j1,j12,Md307M1,dotmapMd307M1R1)
	#call replace(i11,j13-j14,j,j13,j14,Md307M1,dotmapMd307M1R2)
	#call replace(i12,`Q2'/2+j1+j11-j12-j2/2+j3/2+j9,j,j1,j2,j3,j9,j11,j12,Md307M1,dotmapMd307M1R3)
	#call replace(i13,-j10+j14,j,j10,j14,Md307M1,dotmapMd307M1R4)
	#call replace(i14,j10+j13-j14-j9,j,j9,j10,j13,j14,Md307M1,dotmapMd307M1R5)
	if (count(Md307M1,1)) Multiply replace_(Md307M1,Md281,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd281 "1"
#endif

#if `$M2'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md307M2,1)) Multiply replace_(i1,j1,i3,j8,i4,j7,i5,j2,i6,j5,i7,j4,i8,j6,i9,j3,i10,j14,i11,-j13,i13,j10,i14,-j9);
	#call replace(i2,`Q2'+j1-2*j12,j,j1,j12,Md307M2,dotmapMd307M2R1)
	#call replace(i12,j1+j11+j9,j,j1,j9,j11,Md307M2,dotmapMd307M2R2)
	if (count(Md307M2,1)) Multiply replace_(Md307M2,Md281,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd281 "1"
#endif

#if `$M3'
* map dots to p0.p2,p1.p2,p1.p3,p0.p6,p1.p6,p2.p6 and change topology to d270
	if (count(Md307M3,1)) Multiply replace_(i1,j3,i2,j4,i4,j6,i5,j7,i6,j8,i7,j2,i8,j5,i9,j1,i11,j9);
	#call replace(i3,-`Q2'+2*j11-2*j14+j4-j5+j7+j8,j,j4,j5,j7,j8,j11,j14,Md307M3,dotmapMd307M3R1)
	#call replace(i10,j1/2-j12+j3/2-j4/2-j7/2-j9,j,j1,j3,j4,j7,j9,j12,Md307M3,dotmapMd307M3R2)
	#call replace(i12,`Q2'/2-j11+j3/2-j4/2,j,j3,j4,j11,Md307M3,dotmapMd307M3R3)
	#call replace(i13,j10-j12+j13-j14-j2/2+j3/2-j6/2-j7/2+j8/2-j9,j,j2,j3,j6,j7,j8,j9,j10,j12,j13,j14,Md307M3,dotmapMd307M3R4)
	#call replace(i14,-`Q2'/2-j10+j11+j2/2+j4/2-j5/2+j7/2+j9,j,j2,j4,j5,j7,j9,j10,j11,Md307M3,dotmapMd307M3R5)
	if (count(Md307M3,1)) Multiply replace_(Md307M3,Md270,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd270 "1"
#endif

#if `$M4'
* map dots to p0.p2,p1.p2,p1.p3,p0.p6,p1.p6,p2.p6 and change topology to d270
	if (count(Md307M4,1)) Multiply replace_(i1,j3,i2,j4,i3,j6,i5,j7,i6,j8,i7,j5,i8,j2,i9,j1);
	#call replace(i4,-`Q2'+2*j11-2*j14+j4-j5+j7+j8,j,j4,j5,j7,j8,j11,j14,Md307M4,dotmapMd307M4R1)
	#call replace(i10,-j1/2+j12-j3/2+j4/2+j7/2+j9,j,j1,j3,j4,j7,j9,j12,Md307M4,dotmapMd307M4R2)
	#call replace(i11,j1/2+j3/2-j4/2-j7/2-j9,j,j1,j3,j4,j7,j9,Md307M4,dotmapMd307M4R3)
	#call replace(i12,`Q2'/2-j11+j3/2-j4/2,j,j3,j4,j11,Md307M4,dotmapMd307M4R4)
	#call replace(i13,-j10+j12-j13+j14+j2/2-j3/2+j6/2+j7/2-j8/2+j9,j,j2,j3,j6,j7,j8,j9,j10,j12,j13,j14,Md307M4,dotmapMd307M4R5)
	#call replace(i14,j10-j2/2+j3/2+j5/2-j7/2-j9,j,j2,j3,j5,j7,j9,j10,Md307M4,dotmapMd307M4R6)
	if (count(Md307M4,1)) Multiply replace_(Md307M4,Md270,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd270 "1"
#endif

#if `$M5'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md307M5,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j6,i6,j5,i7,j8,i8,j7,i9,j1,i10,j14);
	#call replace(i5,`Q2'+j1+2*j12,j,j1,j12,Md307M5,dotmapMd307M5R1)
	#call replace(i11,j13-j14,j,j13,j14,Md307M5,dotmapMd307M5R2)
	#call replace(i12,`Q2'/2+j1+j11+j12-j2/2+j3/2+j9,j,j1,j2,j3,j9,j11,j12,Md307M5,dotmapMd307M5R3)
	#call replace(i13,j10+j14+j4/2-j6/2+j7/2-j8/2,j,j4,j6,j7,j8,j10,j14,Md307M5,dotmapMd307M5R4)
	#call replace(i14,-j1/2-j10-j11+j13-j14+j2/2-j7/2+j8/2,j,j1,j2,j7,j8,j10,j11,j13,j14,Md307M5,dotmapMd307M5R5)
	if (count(Md307M5,1)) Multiply replace_(Md307M5,Md281,<j1,i1>,...,<j8,i8>,j9,i9,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd281 "1"
#endif

#if `$M6'
* map dots to p0.p6,p1.p6,p0.p3,p1.p3,p3.p5,p3.p6 and change topology to d286
	if (count(Md307M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8,i11,j9,i14,j10);
	#call replace(i6,-2*j14+j3+j6,j,j3,j6,j14,Md307M6,dotmapMd307M6R1)
	#call replace(i10,j11-j9,j,j9,j11,Md307M6,dotmapMd307M6R2)
	#call replace(i12,j1/2-j12+j13+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,j12,j13,Md307M6,dotmapMd307M6R3)
	#call replace(i13,-j10+j12,j,j10,j12,Md307M6,dotmapMd307M6R4)
	if (count(Md307M6,1)) Multiply replace_(Md307M6,Md286,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd286 "1"
#endif

#if `$M7'
* map dots to p0.p2,p1.p2,p1.p3,p0.p6,p1.p6,p2.p6 and change topology to d270
	if (count(Md307M7,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j5,i5,j1,i6,j6,i8,j8,i9,j7,i10,j12);
	#call replace(i7,-2*j14+j2+j6,j,j2,j6,j14,Md307M7,dotmapMd307M7R1)
	#call replace(i11,-j12+j9,j,j9,j12,Md307M7,dotmapMd307M7R2)
	#call replace(i12,`Q2'/2+j1/2-j11-j7/2,j,j1,j7,j11,Md307M7,dotmapMd307M7R3)
	#call replace(i13,j13+j14-j5/2-j6/2+j8/2,j,j5,j6,j8,j13,j14,Md307M7,dotmapMd307M7R4)
	#call replace(i14,-`Q2'/2+j10+j11-j13-j14+j2/2+j4/2+j6/2+j7/2-j8/2,j,j2,j4,j6,j7,j8,j10,j11,j13,j14,Md307M7,dotmapMd307M7R5)
	if (count(Md307M7,1)) Multiply replace_(Md307M7,Md270,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd270 "1"
#endif

#if `$M8'
* map dots to p0.p2,p1.p2,p1.p3,p0.p6,p1.p6,p2.p6 and change topology to d270
	if (count(Md307M8,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j2,i5,j1,i6,j6,i7,j8,i9,j7,i10,j12);
	#call replace(i8,2*j14+j2+j6,j,j2,j6,j14,Md307M8,dotmapMd307M8R1)
	#call replace(i11,-j1/2-j12-j3/2+j4/2+j7/2-j9,j,j1,j3,j4,j7,j9,j12,Md307M8,dotmapMd307M8R2)
	#call replace(i12,`Q2'/2+j1/2-j11-j7/2,j,j1,j7,j11,Md307M8,dotmapMd307M8R3)
	#call replace(i13,j13+j14+j5/2+j6/2-j8/2,j,j5,j6,j8,j13,j14,Md307M8,dotmapMd307M8R4)
	#call replace(i14,-j1/2-j10-j13-j14-j2/2+j4/2-j6/2+j8/2,j,j1,j2,j4,j6,j8,j10,j13,j14,Md307M8,dotmapMd307M8R5)
	if (count(Md307M8,1)) Multiply replace_(Md307M8,Md270,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,-i13,j14,i14);
	#redefine HASTOPOd270 "1"
#endif

#if `$M9'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md307M9,1)) Multiply replace_(i1,j2,i2,j3,i3,j8,i4,j7,i5,j1,i6,j5,i7,j4,i8,j6,i10,j14,i11,j13);
	#call replace(i9,`Q2'+j1-2*j12,j,j1,j12,Md307M9,dotmapMd307M9R1)
	#call replace(i12,j1+j11+j9,j,j1,j9,j11,Md307M9,dotmapMd307M9R2)
	#call replace(i13,j10-j4/2+j6/2-j7/2+j8/2,j,j4,j6,j7,j8,j10,Md307M9,dotmapMd307M9R3)
	#call replace(i14,-j1/2-j11+j2/2+j4/2-j6/2,j,j1,j2,j4,j6,j11,Md307M9,dotmapMd307M9R4)
	if (count(Md307M9,1)) Multiply replace_(Md307M9,Md281,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd281 "1"
#endif
.sort:reduce d307;
#endif
#endprocedure

#procedure Reduced307()
	#call Prepared307()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd307'
		#call MtoZ(Md307,Zd307,i,14)
		#call Reduce(d307)
		#call ZtoM(Zd307,Md307,i,14)
#else
		#if `USETURBO'
			#call TurboMd307()
		#endif
		#call triangleS(Md307,i3,i4,i6,i7,i8,i10,i13,0,0)
#endif
		#call Prepared307()
	#endif
#endprocedure
*--#] reduce-d307 : 
*--#[ reduce-d306 :
#procedure Insertiond306()
* merge propagators with same momentum, and repeated dots
	if (count(Md306b,1)) Multiply replace_(Md306b,Md306c,i3,`Q2',i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md306c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j2/2-j6/2+j8+j9,j,j1,j2,j6,j8,j9,Md306c,dotmapMd306cR1)
	#call replace(i11,`Q2'/2+j2/2-j7/2,j,j2,j7,Md306c,dotmapMd306cR2)
	#call replace(i12,`Q2'/2-j2/2+j3/2-j5/2+j6/2-j9,j,j2,j3,j5,j6,j9,Md306c,dotmapMd306cR3)
	#call replace(i13,j1/2+j2/2-j6/2,j,j1,j2,j6,Md306c,dotmapMd306cR4)
	#call replace(i14,`Q2'/2-j2/2+j4/2-j5/2+j6/2-j7/2-j9,j,j2,j4,j5,j6,j7,j9,Md306c,dotmapMd306cR5)
	if (count(Md306c,1)) Multiply replace_(Md306c,Md306d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md306d,1)) Multiply replace_(i1,j6,i2,j3,i3,j1,i4,j7,i5,j5,i6,j4,i7,j2);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j6/2+j8-j9,j,j1,j5,j6,j8,j9,Md306d,dotmapMd306dR1)
	#call replace(i9,j1/2-j2/2+j4/2-j5/2+j9,j,j1,j2,j4,j5,j9,Md306d,dotmapMd306dR2)
	if (count(Md306d,1)) Multiply replace_(Md306d,Md118,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd118 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared306()
* Topology: 0-1 6-7 2-6 1-2 1-7 3-7 3-4 4-7 4-6 2-3 7-9
* Dots: p1.p5,p1.p6,p0.p1,p0.p2,p0.p5
* Apply automorphisms
if (match(Md306*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n12,$n13,$n14,$n11,$n10,$n2,$n6,$n7,$n8,$n1,$n4,$n3,$n9,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n11)*replace_(i1,i5,i2,i9,i5,i1,i6,i8,i8,i6,i9,i2,i12,i14,i14,i12);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd306 automorphism;

#call CheckRemovedPropagators(d306,9,8,1,2,3,5,6,7,8,9,4)
#if `$DOACTION' == 0
.sort:reduce d306;
#endif
#endprocedure

#procedure Reduced306()
	#call Prepared306()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd306'
		#call MtoZ(Md306,Zd306,i,14)
		#call Reduce(d306)
		#call ZtoM(Zd306,Md306,i,14)
		#call Prepared306()
#else
		#if `USETURBO'
			#call TurboMd306()
		#endif
		#call MtoZ(Md306,Zd306,i,14)
		#call carpet(Zd306,3,4,0,0,0,3,12,1,2,5)
		#call ZtoM(Zd306b,Md306b,i,16)
		#call Insertiond306()
#endif
	#endif
#endprocedure
*--#] reduce-d306 : 
*--#[ reduce-d305 :
#procedure Prepared305()
* Topology: 0-1 1-2 1-6 2-7 2-4 2-5 4-5 4-7 5-6 6-7 7-9
* Dots: p0.p3,p0.p6,p0.p7,p1.p3,p1.p6
* Apply automorphisms
if (match(Md305*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
endif;
ModuleOption local,<$n1>,...,<$n14>;
.sort:Zd305 automorphism;

#call CheckRemovedPropagators(d305,9,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5 and change topology to d209
	if (count(Md305M1,1)) Multiply replace_(i2,j5,i3,j1,i4,j4,i5,j6,i6,j7,i7,j2,i8,j8,i9,j3,i12,j11);
	#call replace(i1,`Q2'-2*j14+j5,j,j5,j14,Md305M1,dotmapMd305M1R1)
	#call replace(i10,`Q2'-j11-j12,j,j11,j12,Md305M1,dotmapMd305M1R2)
	#call replace(i11,-j11+j13,j,j11,j13,Md305M1,dotmapMd305M1R3)
	#call replace(i13,`Q2'-j11-j12-j14+j3/2+j5/2-j8/2+j9,j,j3,j5,j8,j9,j11,j12,j14,Md305M1,dotmapMd305M1R4)
	#call replace(i14,-`Q2'/2+j1/2-j10+j12+j13-j2/2-j3/2-j6/2+j7/2+j8/2,j,j1,j2,j3,j6,j7,j8,j10,j12,j13,Md305M1,dotmapMd305M1R5)
	if (count(Md305M1,1)) Multiply replace_(Md305M1,Md209,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,-i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd209 "1"
#endif

#if `$M2'
* map dots to p1.p2,p1.p3,p0.p1,p0.p2,p0.p3,p0.p5 and change topology to d211
	if (count(Md305M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j12,i11,j14,i13,j9);
	#call replace(i2,`Q2'+j1-2*j11,j,j1,j11,Md305M2,dotmapMd305M2R1)
	#call replace(i12,j13-j14,j,j13,j14,Md305M2,dotmapMd305M2R2)
	#call replace(i14,`Q2'/2-j1/2+j10-j12-j13+j14+j7/2-j8/2+j9,j,j1,j7,j8,j9,j10,j12,j13,j14,Md305M2,dotmapMd305M2R3)
	if (count(Md305M2,1)) Multiply replace_(Md305M2,Md211,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd211 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6 and change topology to d215
	if (count(Md305M3,1)) Multiply replace_(i1,j3,i2,j2,i4,j6,i5,j4,i6,j5,i7,j7,i8,j8,i9,j1);
	#call replace(i3,-2*j10-2*j11-2*j12-2*j13+j3+j7-j8,j,j3,j7,j8,j10,j11,j12,j13,Md305M3,dotmapMd305M3R1)
	#call replace(i10,`Q2'/2-j10-j12-j2/2+j3/2,j,j2,j3,j10,j12,Md305M3,dotmapMd305M3R2)
	#call replace(i11,-`Q2'/2-j10-j2/2+j3/2-j9,j,j2,j3,j9,j10,Md305M3,dotmapMd305M3R3)
	#call replace(i12,`Q2'/2+j10+j12+j2/2-j3/2+j9,j,j2,j3,j9,j10,j12,Md305M3,dotmapMd305M3R4)
	#call replace(i13,-j10-j11-j12+j14+j3-j4/2+j5/2-j8/2,j,j3,j4,j5,j8,j10,j11,j12,j14,Md305M3,dotmapMd305M3R5)
	#call replace(i14,-`Q2'/2-j1/2-j10-j11+j3/2-j4/2+j5/2-j9,j,j1,j3,j4,j5,j9,j10,j11,Md305M3,dotmapMd305M3R6)
	if (count(Md305M3,1)) Multiply replace_(Md305M3,Md215,<j1,i1>,...,<j8,i8>,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd215 "1"
#endif

#if `$M4'
* map dots to p0.p4,p1.p4,p0.p3,p1.p3,p3.p4,p3.p5 and change topology to d263
	if (count(Md305M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j11,i13,j12);
	#call replace(i4,j1-2*j10-2*j12+2*j13+j3+j4,j,j1,j3,j4,j10,j12,j13,Md305M4,dotmapMd305M4R1)
	#call replace(i11,j1/2-j12+j13+j14-j2/2+j3/2-j6/2+j8/2-j9,j,j1,j2,j3,j6,j8,j9,j12,j13,j14,Md305M4,dotmapMd305M4R2)
	#call replace(i12,`Q2'/2-j11+j12-j13-j14-j3/2+j6/2-j8/2,j,j3,j6,j8,j11,j12,j13,j14,Md305M4,dotmapMd305M4R3)
	#call replace(i14,j1/2-j10-j12+j13+j14+j3/2-j6/2+j7/2,j,j1,j3,j6,j7,j10,j12,j13,j14,Md305M4,dotmapMd305M4R4)
	if (count(Md305M4,1)) Multiply replace_(Md305M4,Md263,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd263 "1"
#endif

#if `$M5'
* map dots to p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p3.p4 and change topology to d236
	if (count(Md305M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8,i10,j9,i12,j10,i13,j11);
	#call replace(i5,j1-2*j11-2*j13+2*j14+j3+j4,j,j1,j3,j4,j11,j13,j14,Md305M5,dotmapMd305M5R1)
	#call replace(i11,-j10+j12,j,j10,j12,Md305M5,dotmapMd305M5R2)
	#call replace(i14,`Q2'/2-j1/2-j10+j11+j13+j7/2-j8/2-j9,j,j1,j7,j8,j9,j10,j11,j13,Md305M5,dotmapMd305M5R3)
	if (count(Md305M5,1)) Multiply replace_(Md305M5,Md236,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd236 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p7,p0.p5,p1.p5,p3.p5,p5.p7 and change topology to d205
	if (count(Md305M6,1)) Multiply replace_(i1,j2,i2,j1,i3,j8,i4,j5,i5,j6,i7,j7,i8,j3,i9,j4,i12,j10);
	#call replace(i6,-2*j14+j5+j7,j,j5,j7,j14,Md305M6,dotmapMd305M6R1)
	#call replace(i10,`Q2'/2-j1/2-j10+j2/2-j9,j,j1,j2,j9,j10,Md305M6,dotmapMd305M6R2)
	#call replace(i11,-j10+j11,j,j10,j11,Md305M6,dotmapMd305M6R3)
	#call replace(i13,-j13-j14+j2/2+j5/2-j6/2+j8/2,j,j2,j5,j6,j8,j13,j14,Md305M6,dotmapMd305M6R4)
	#call replace(i14,j1/2+j11-j12-j13-j14-j2/2+j3/2-j4/2+j5/2-j6/2+j8/2+j9,j,j1,j2,j3,j4,j5,j6,j8,j9,j11,j12,j13,j14,Md305M6,dotmapMd305M6R5)
	if (count(Md305M6,1)) Multiply replace_(Md305M6,Md205,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd205 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d206
	if (count(Md305M7,1)) Multiply replace_(i1,j3,i2,j6,i3,j1,i4,j4,i5,j5,i6,j2,i8,j8,i9,j7,i10,j11,i11,j9,i13,j13);
	#call replace(i7,j1-2*j10+2*j12-2*j13+2*j14+j3-j6+j7-2*j9,j,j1,j3,j6,j7,j9,j10,j12,j13,j14,Md305M7,dotmapMd305M7R1)
	#call replace(i12,`Q2'/2-j10-j11+j3/2-j6/2-j9,j,j3,j6,j9,j10,j11,Md305M7,dotmapMd305M7R2)
	#call replace(i14,-j1/2+j10+j13-j14-j3/2+j4/2-j5/2+j6/2-j7/2+j8/2+j9,j,j1,j3,j4,j5,j6,j7,j8,j9,j10,j13,j14,Md305M7,dotmapMd305M7R3)
	if (count(Md305M7,1)) Multiply replace_(Md305M7,Md206,<j1,i1>,...,<j8,i8>,j9,-i9,j10,i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd206 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4 and change topology to bebe
	if (count(Md305M8,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i4,j7,i5,j8,i6,j6,i7,j5,i9,j2,i10,j10,i11,j11);
	#call replace(i8,j1-2*j12+j2,j,j1,j2,j12,Md305M8,dotmapMd305M8R1)
	#call replace(i12,`Q2'-j10-j9,j,j9,j10,Md305M8,dotmapMd305M8R2)
	#call replace(i13,j10-j14,j,j10,j14,Md305M8,dotmapMd305M8R3)
	#call replace(i14,j1/2+j11-j12-j13+j2/2+j6/2-j8/2,j,j1,j2,j6,j8,j11,j12,j13,Md305M8,dotmapMd305M8R4)
	if (count(Md305M8,1)) Multiply replace_(Md305M8,Mbebe,<j1,i1>,...,<j8,i8>,j9,i9,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPObebe "1"
#endif

#if `$M9'
* map dots to p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5 and change topology to d281
	if (count(Md305M9,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j8,i5,j7,i6,j5,i7,j4,i8,j6,i10,j12,i11,j14,i12,j13);
	#call replace(i9,`Q2'+j1-2*j12-2*j13+j4+2*j9,j,j1,j4,j9,j12,j13,Md305M9,dotmapMd305M9R1)
	#call replace(i13,j1+j11+j9,j,j1,j9,j11,Md305M9,dotmapMd305M9R2)
	#call replace(i14,j10-j4/2+j6/2-j7/2+j8/2,j,j4,j6,j7,j8,j10,Md305M9,dotmapMd305M9R3)
	if (count(Md305M9,1)) Multiply replace_(Md305M9,Md281,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd281 "1"
#endif
.sort:reduce d305;
#endif
#endprocedure

#procedure Reduced305()
	#call Prepared305()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd305'
		#call MtoZ(Md305,Zd305,i,14)
		#call Reduce(d305)
		#call ZtoM(Zd305,Md305,i,14)
#else
		#if `USETURBO'
			#call TurboMd305()
		#endif
		#call triangleS(Md305,i4,i5,i6,i7,i8,i11,i14,0,0)
#endif
		#call Prepared305()
	#endif
#endprocedure
*--#] reduce-d305 : 
*--#[ reduce-d304 :
#procedure Insertiond304()
* merge propagators with same momentum, and repeated dots
	if (count(Md304b,1)) Multiply replace_(Md304b,Md304c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i1,i6,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md304c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j6/2,j,j1,j6,Md304c,dotmapMd304cR1)
	#call replace(i11,`Q2'/2-j1/2+j3/2-j7/2,j,j1,j3,j7,Md304c,dotmapMd304cR2)
	#call replace(i12,j8-j9,j,j8,j9,Md304c,dotmapMd304cR3)
	#call replace(i13,`Q2'/2+j2/2-j7/2,j,j2,j7,Md304c,dotmapMd304cR4)
	#call replace(i14,j2/2+j4/2-j5/2,j,j2,j4,j5,Md304c,dotmapMd304cR5)
	if (count(Md304c,1)) Multiply replace_(Md304c,Md304d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p1.p4 and change topology to d122
	if (count(Md304d,1)) Multiply replace_(i1,j5,i2,j6,i3,j7,i4,j1,i5,j3,i6,j4,i7,j2,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md304d,dotmapMd304dR1)
	if (count(Md304d,1)) Multiply replace_(Md304d,Md122,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd122 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared304()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-6 4-7 4-7 5-6 6-7 7-9
* Dots: p0.p6,p2.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md304*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n1,$n2,$n3)
	#call hash(1,$n14,$n13,$n10,$n11,$n10,$n2,$n4,$n1,$n3,$n5,$n8,$n7,$n9,$n6)
	#call hash(2,$n14,$n13,$n12,$n11,$n12,$n2,$n4,$n3,$n1,$n5,$n8,$n6,$n9,$n7)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n2,$n4,$n1,$n3,$n5,$n8,$n6,$n9,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n10,$n11,$n12,$n2,$n4,$n3,$n1,$n5,$n8,$n7,$n9,$n6)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i6,i7,i7,i6);
elseif ($bestiso == 1); Multiply replace_(i1,i6,i2,i9,i3,i7,i4,i8,i6,i3,i7,i1,i8,i4,i9,i2,i12,i10);
elseif ($bestiso == 2); Multiply replace_(i1,i7,i2,i9,i3,i6,i4,i8,i6,i1,i7,i3,i8,i4,i9,i2,i10,i12);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i2,i9,i3,i6,i4,i8,i6,i3,i7,i1,i8,i4,i9,i2);
elseif ($bestiso == 5); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 6); Multiply replace_(i1,i6,i2,i9,i3,i7,i4,i8,i6,i1,i7,i3,i8,i4,i9,i2,i10,i12,i12,i10);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd304 automorphism;

#call CheckRemovedPropagators(d304,9,5,2,4,5,8,9,1,3,6,7)
#if `$DOACTION' == 0
.sort:reduce d304;
#endif
#endprocedure

#procedure Reduced304()
	#call Prepared304()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd304'
		#call MtoZ(Md304,Zd304,i,14)
		#call Reduce(d304)
		#call ZtoM(Zd304,Md304,i,14)
		#call Prepared304()
#else
		#if `USETURBO'
			#call TurboMd304()
		#endif
		#call insertionS(Md304,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md304b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond304()
#endif
	#endif
#endprocedure
*--#] reduce-d304 : 
*--#[ reduce-d303 :
#procedure Insertiond303()
* merge propagators with same momentum, and repeated dots
	if (count(Md303b,1)) Multiply replace_(Md303b,Md303c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i12,i9,i11,i10,i13,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md303c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md303c,dotmapMd303cR1)
	#call replace(i11,j1/2+j3/2-j4/2-j6/2+j7/2-j8,j,j1,j3,j4,j6,j7,j8,Md303c,dotmapMd303cR2)
	#call replace(i12,j1/2-j4/2-j5/2+j7/2-j8,j,j1,j4,j5,j7,j8,Md303c,dotmapMd303cR3)
	#call replace(i13,-j2/2-j6/2+j7/2-j8+j9,j,j2,j6,j7,j8,j9,Md303c,dotmapMd303cR4)
	if (count(Md303c,1)) Multiply replace_(Md303c,Md303d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Md303d,1)) Multiply replace_(i1,j5,i2,j7,i3,j6,i4,j4,i5,j1,i6,j2,i7,j3);
	#call replace(i8,`Q2'/2+j3/2-j4/2-j8,j,j3,j4,j8,Md303d,dotmapMd303dR1)
	#call replace(i9,`Q2'/2+j1/2+j2/2+j3/2-j4/2-j6/2-j8-j9,j,j1,j2,j3,j4,j6,j8,j9,Md303d,dotmapMd303dR2)
	if (count(Md303d,1)) Multiply replace_(Md303d,Md144,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd144 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared303()
* Topology: 0-1 1-2 2-3 1-2 3-7 3-6 3-8 1-6 6-7 7-8 8-9
* Dots: p0.p4,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md303*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd303 automorphism;

#call CheckRemovedPropagators(d303,9,7,2,4,5,6,7,8,9,1,3)
#if `$DOACTION' == 0
.sort:reduce d303;
#endif
#endprocedure

#procedure Reduced303()
	#call Prepared303()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd303'
		#call MtoZ(Md303,Zd303,i,14)
		#call Reduce(d303)
		#call ZtoM(Zd303,Md303,i,14)
		#call Prepared303()
#else
		#if `USETURBO'
			#call TurboMd303()
		#endif
		#call insertionS(Md303,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md303b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond303()
#endif
	#endif
#endprocedure
*--#] reduce-d303 : 
*--#[ reduce-d302 :
#procedure Insertiond302()
* merge propagators with same momentum, and repeated dots
	if (count(Md302b,1)) Multiply replace_(Md302b,Md302c,i18,i9,i19,i18);

* rewrite insertion dots
	if (count(Md302c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j6/2,j,j5,j6,Md302c,dotmapMd302cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2+j9,j,j1,j2,j9,Md302c,dotmapMd302cR2)
	#call replace(i12,j3/2+j5/2-j8/2,j,j3,j5,j8,Md302c,dotmapMd302cR3)
	#call replace(i13,-`Q2'/2+j5/2+j6/2,j,j5,j6,Md302c,dotmapMd302cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md302c,dotmapMd302cR5)
	#call replace(i15,`Q2'/2+j3/2-j7/2,j,j3,j7,Md302c,dotmapMd302cR6)
	#call replace(i16,-`Q2'/2+j5/2-j6/2,j,j5,j6,Md302c,dotmapMd302cR7)
	#call replace(i17,j1/2+j3/2-j4/2,j,j1,j3,j4,Md302c,dotmapMd302cR8)
	#call replace(i18,-`Q2'/2+j5/2+j7/2-j8/2,j,j5,j7,j8,Md302c,dotmapMd302cR9)
	if (count(Md302c,1)) Multiply replace_(Md302c,Md302d,<j1,i1>,...,<j9,i9>);
* map dots to p4.p5 and change topology to d193
	if (count(Md302d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-`Q2'/2-j1/2+j2/2+j3/2+j5/2-j8/2+j9,j,j1,j2,j3,j5,j8,j9,Md302d,dotmapMd302dR1)
	if (count(Md302d,1)) Multiply replace_(Md302d,Md193,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd193 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared302()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 4-6 5-6 3-6 3-4 4-9
* Dots: p1.p6,p0.p5,p1.p5,p3.p5,p5.p6
* Apply automorphisms
if (match(Md302*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n5,$n8,$n7,$n6,$n9,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i9,i9,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd302 automorphism;

#call CheckRemovedPropagators(d302,9,7,1,2,3,4,6,7,8,5,9)
#if `$DOACTION' == 0
.sort:reduce d302;
#endif
#endprocedure

#procedure Reduced302()
	#call Prepared302()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd302'
		#call MtoZ(Md302,Zd302,i,14)
		#call Reduce(d302)
		#call ZtoM(Zd302,Md302,i,14)
		#call Prepared302()
#else
		#if `USETURBO'
			#call TurboMd302()
		#endif
		#call insertionS(Md302,i5,i9,i11,i12,i13,i14,i5,`Q2',i1,i3,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md302b,1)) Multiply replace_(<i10,i9>,...,<i20,i19>);
		#call Insertiond302()
#endif
	#endif
#endprocedure
*--#] reduce-d302 : 
*--#[ reduce-d301 :
#procedure Insertiond301()
* merge propagators with same momentum, and repeated dots
	if (count(Md301b,1)) Multiply replace_(Md301b,Md301c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md301c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md301c,dotmapMd301cR1)
	#call replace(i11,`Q2'/2-j1/2+j3/2-j6/2,j,j1,j3,j6,Md301c,dotmapMd301cR2)
	#call replace(i12,j8-j9,j,j8,j9,Md301c,dotmapMd301cR3)
	#call replace(i13,`Q2'/2+j2/2-j6/2,j,j2,j6,Md301c,dotmapMd301cR4)
	#call replace(i14,j4/2+j6/2-j7/2+j8,j,j4,j6,j7,j8,Md301c,dotmapMd301cR5)
	if (count(Md301c,1)) Multiply replace_(Md301c,Md301d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p1.p4 and change topology to d125
	if (count(Md301d,1)) Multiply replace_(i1,j5,i2,j6,i3,j7,i4,j1,i5,j4,i6,j2,i7,j3,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md301d,dotmapMd301dR1)
	if (count(Md301d,1)) Multiply replace_(Md301d,Md125,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd125 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared301()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-6 4-7 5-6 6-7 4-7 4-9
* Dots: p0.p6,p2.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md301*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n1,$n2,$n3)
	#call hash(1,$n14,$n11,$n10,$n11,$n10,$n1,$n7,$n8,$n3,$n5,$n2,$n9,$n4,$n6)
	#call hash(2,$n14,$n13,$n12,$n13,$n12,$n3,$n7,$n8,$n1,$n5,$n2,$n6,$n4,$n9)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n1,$n7,$n8,$n3,$n5,$n2,$n6,$n4,$n9)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n11,$n10,$n13,$n12,$n3,$n7,$n8,$n1,$n5,$n2,$n9,$n4,$n6)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i6,i9,i9,i6);
elseif ($bestiso == 1); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i6,i2,i4,i3,i9,i4,i2,i6,i3,i7,i8,i8,i7,i9,i1,i12,i10,i13,i11);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i9,i2,i4,i3,i6,i4,i2,i6,i1,i7,i8,i8,i7,i9,i3,i10,i12,i11,i13);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i9,i2,i4,i3,i6,i4,i2,i6,i3,i7,i8,i8,i7,i9,i1);
elseif ($bestiso == 4); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 7); Multiply sign_($n10+$n11+$n12+$n13)*replace_(i1,i6,i2,i4,i3,i9,i4,i2,i6,i1,i7,i8,i8,i7,i9,i3,i10,i12,i11,i13,i12,i10,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd301 automorphism;

#call CheckRemovedPropagators(d301,9,5,2,4,5,7,8,1,3,6,9)
#if `$DOACTION' == 0
.sort:reduce d301;
#endif
#endprocedure

#procedure Reduced301()
	#call Prepared301()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd301'
		#call MtoZ(Md301,Zd301,i,14)
		#call Reduce(d301)
		#call ZtoM(Zd301,Md301,i,14)
		#call Prepared301()
#else
		#if `USETURBO'
			#call TurboMd301()
		#endif
		#call insertionS(Md301,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md301b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond301()
#endif
	#endif
#endprocedure
*--#] reduce-d301 : 
*--#[ reduce-d300 :
#procedure Insertiond300()
* merge propagators with same momentum, and repeated dots
	if (count(Md300b,1)) Multiply replace_(Md300b,Md300c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md300c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md300c,dotmapMd300cR1)
	#call replace(i11,j8-j9,j,j8,j9,Md300c,dotmapMd300cR2)
	#call replace(i12,-j3/2-j5/2+j6/2,j,j3,j5,j6,Md300c,dotmapMd300cR3)
	#call replace(i13,j1/2-j4/2-j5/2+j7/2-j8,j,j1,j4,j5,j7,j8,Md300c,dotmapMd300cR4)
	#call replace(i14,-j2/2-j6/2+j7/2-j8+j9,j,j2,j6,j7,j8,j9,Md300c,dotmapMd300cR5)
	if (count(Md300c,1)) Multiply replace_(Md300c,Md300d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Md300d,1)) Multiply replace_(i1,j5,i2,j7,i3,j6,i4,j4,i5,j1,i6,j2,i7,j3);
	#call replace(i8,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md300d,dotmapMd300dR1)
	#call replace(i9,`Q2'/2+j1/2+j2/2+j3/2-j4/2-j6/2-j8-j9,j,j1,j2,j3,j4,j6,j8,j9,Md300d,dotmapMd300dR2)
	if (count(Md300d,1)) Multiply replace_(Md300d,Mfastar3,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOfastar3 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared300()
* Topology: 0-1 1-5 1-3 1-5 3-7 3-6 3-8 5-6 6-7 7-8 8-9
* Dots: p0.p4,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md300*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd300 automorphism;

#call CheckRemovedPropagators(d300,9,7,2,4,5,6,7,8,9,1,3)
#if `$DOACTION' == 0
.sort:reduce d300;
#endif
#endprocedure

#procedure Reduced300()
	#call Prepared300()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd300'
		#call MtoZ(Md300,Zd300,i,14)
		#call Reduce(d300)
		#call ZtoM(Zd300,Md300,i,14)
		#call Prepared300()
#else
		#if `USETURBO'
			#call TurboMd300()
		#endif
		#call insertionS(Md300,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md300b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond300()
#endif
	#endif
#endprocedure
*--#] reduce-d300 : 
*--#[ reduce-d299 :
#procedure Insertiond299()
* merge propagators with same momentum, and repeated dots
	if (count(Md299b,1)) Multiply replace_(Md299b,Md299c,i6,i5,i7,i6,i5,i7,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md299c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j3/2-j6/2-j8,j,j3,j6,j8,Md299c,dotmapMd299cR1)
	#call replace(i11,-`Q2'/2+j2/2+j3/2-j4/2-j9,j,j2,j3,j4,j9,Md299c,dotmapMd299cR2)
	#call replace(i12,-`Q2'/2+j3/2-j5/2+j7/2-j8,j,j3,j5,j7,j8,Md299c,dotmapMd299cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md299c,dotmapMd299cR4)
	#call replace(i14,`Q2'/2+j3/2-j6/2,j,j3,j6,Md299c,dotmapMd299cR5)
	#call replace(i15,j1/2+j3/2-j4/2,j,j1,j3,j4,Md299c,dotmapMd299cR6)
	if (count(Md299c,1)) Multiply replace_(Md299c,Md299d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5 and change topology to d116
	if (count(Md299d,1)) Multiply replace_(i1,j2,i2,j1,i3,j6,i4,j4,i5,j7,i6,j3,i7,j5);
	#call replace(i8,-`Q2'/2-j3/2+j6/2-j8,j,j3,j6,j8,Md299d,dotmapMd299dR1)
	#call replace(i9,-`Q2'/2+j1/2-j4/2+j6/2-j8+j9,j,j1,j4,j6,j8,j9,Md299d,dotmapMd299dR2)
	if (count(Md299d,1)) Multiply replace_(Md299d,Md116,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd116 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared299()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-7 3-6 5-6 6-7 3-7 3-9
* Dots: p0.p6,p1.p6,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md299*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n5,$n8,$n7,$n6,$n9,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i9,i9,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd299 automorphism;

#call CheckRemovedPropagators(d299,9,6,1,2,3,4,7,8,5,6,9)
#if `$DOACTION' == 0
.sort:reduce d299;
#endif
#endprocedure

#procedure Reduced299()
	#call Prepared299()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd299'
		#call MtoZ(Md299,Zd299,i,14)
		#call Reduce(d299)
		#call ZtoM(Zd299,Md299,i,14)
		#call Prepared299()
#else
		#if `USETURBO'
			#call TurboMd299()
		#endif
		#call insertionS(Md299,i5,i9,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md299b,1)) Multiply replace_(<i10,i9>,...,<i17,i16>);
		#call Insertiond299()
#endif
	#endif
#endprocedure
*--#] reduce-d299 : 
*--#[ reduce-d298 :
#procedure Insertiond298()
* merge propagators with same momentum, and repeated dots
	if (count(Md298b,1)) Multiply replace_(Md298b,Md298c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i13,i8,i10,i9,i15,i9,i11,i10,i12,i11,i14,i12,i16,i13);

* rewrite insertion dots
	if (count(Md298c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md298c,dotmapMd298cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2,j,j2,j6,Md298c,dotmapMd298cR2)
	#call replace(i12,j1/2+j2/2-j3/2,j,j1,j2,j3,Md298c,dotmapMd298cR3)
	#call replace(i13,j4/2+j6/2-j7/2+j8,j,j4,j6,j7,j8,Md298c,dotmapMd298cR4)
	if (count(Md298c,1)) Multiply replace_(Md298c,Md298d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p2.p3 and change topology to d148
	if (count(Md298d,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i4,j2,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md298d,1)) Multiply replace_(Md298d,Md148,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd148 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared298()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-6 4-7 2-6 6-7 4-7 4-9
* Dots: p0.p6,p3.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md298*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i6,i9,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 3); Multiply replace_(i6,i9,i9,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd298 automorphism;

#call CheckRemovedPropagators(d298,9,5,3,4,5,7,8,1,2,6,9)
#if `$DOACTION' == 0
.sort:reduce d298;
#endif
#endprocedure

#procedure Reduced298()
	#call Prepared298()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd298'
		#call MtoZ(Md298,Zd298,i,14)
		#call Reduce(d298)
		#call ZtoM(Zd298,Md298,i,14)
		#call Prepared298()
#else
		#if `USETURBO'
			#call TurboMd298()
		#endif
		#call insertionS(Md298,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md298b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond298()
#endif
	#endif
#endprocedure
*--#] reduce-d298 : 
*--#[ reduce-d297 :
#procedure Insertiond297()
* merge propagators with same momentum, and repeated dots
	if (count(Md297b,1)) Multiply replace_(Md297b,Md297c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md297c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md297c,dotmapMd297cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2,j,j2,j6,Md297c,dotmapMd297cR2)
	#call replace(i12,`Q2'/2+j4/2-j7/2,j,j4,j7,Md297c,dotmapMd297cR3)
	#call replace(i13,j1/2+j2/2-j3/2,j,j1,j2,j3,Md297c,dotmapMd297cR4)
	if (count(Md297c,1)) Multiply replace_(Md297c,Md297d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p2,p1.p3 and change topology to d149
	if (count(Md297d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j1,i5,j5,i6,j6,i7,j7,i8,j9,i9,j8);
	if (count(Md297d,1)) Multiply replace_(Md297d,Md149,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd149 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared297()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-6 4-8 2-6 4-6 4-8 8-9
* Dots: p3.p6,p4.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md297*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n3,$n9,$n5,$n8,$n7,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n3,$n6,$n5,$n8,$n7,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n3,$n9,$n5,$n8,$n7,$n1,$n2)
	#call hash(4,$n14,$n10,$n11,$n11,$n10,$n1,$n7,$n8,$n2,$n5,$n3,$n4,$n9,$n6)
	#call hash(5,$n14,$n13,$n12,$n12,$n13,$n2,$n7,$n8,$n1,$n5,$n3,$n4,$n6,$n9)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n1,$n7,$n8,$n2,$n5,$n3,$n4,$n6,$n9)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n4,$n2,$n5,$n7,$n8,$n9,$n6)
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n2,$n3,$n4,$n1,$n5,$n7,$n8,$n6,$n9)
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n1,$n3,$n4,$n2,$n5,$n7,$n8,$n6,$n9)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n3,$n6,$n5,$n8,$n7,$n2,$n1)
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n2,$n3,$n4,$n1,$n5,$n7,$n8,$n9,$n6)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
	#call hash(14,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(15,$n14,$n10,$n11,$n12,$n13,$n2,$n7,$n8,$n1,$n5,$n3,$n4,$n9,$n6)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i6,i9,i9,i6);
elseif ($bestiso == 1); Multiply sign_($n11+$n13)*replace_(i3,i7,i4,i8,i6,i9,i7,i3,i8,i4,i9,i6);
elseif ($bestiso == 2); Multiply sign_($n11+$n13)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i7,i3,i8,i4);
elseif ($bestiso == 3); Multiply sign_($n11+$n13)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i6,i9,i7,i3,i8,i4,i9,i6);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i2,i9,i3,i4,i4,i3,i6,i2,i7,i8,i8,i7,i9,i1,i12,i11,i13,i10);
elseif ($bestiso == 5); Multiply replace_(i1,i9,i2,i6,i3,i4,i4,i3,i6,i1,i7,i8,i8,i7,i9,i2,i10,i13,i11,i12);
elseif ($bestiso == 6); Multiply replace_(i1,i9,i2,i6,i3,i4,i4,i3,i6,i2,i7,i8,i8,i7,i9,i1);
elseif ($bestiso == 7); Multiply sign_($n10+$n12)*replace_(i1,i6,i2,i9,i3,i8,i4,i7,i6,i2,i7,i4,i8,i3,i9,i1);
elseif ($bestiso == 8); Multiply sign_($n10+$n12)*replace_(i1,i9,i2,i6,i3,i8,i4,i7,i6,i1,i7,i4,i8,i3,i9,i2);
elseif ($bestiso == 9); Multiply sign_($n10+$n12)*replace_(i1,i9,i2,i6,i3,i8,i4,i7,i6,i2,i7,i4,i8,i3,i9,i1);
elseif ($bestiso == 10); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 11); Multiply sign_($n11+$n13)*replace_(i3,i7,i4,i8,i7,i3,i8,i4);
elseif ($bestiso == 12); Multiply sign_($n10+$n12)*replace_(i1,i6,i2,i9,i3,i8,i4,i7,i6,i1,i7,i4,i8,i3,i9,i2);
elseif ($bestiso == 13); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 15); Multiply replace_(i1,i6,i2,i9,i3,i4,i4,i3,i6,i1,i7,i8,i8,i7,i9,i2,i10,i13,i11,i12,i12,i11,i13,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd297 automorphism;

#call CheckRemovedPropagators(d297,9,5,3,4,5,7,8,1,2,6,9)
#if `$DOACTION' == 0
.sort:reduce d297;
#endif
#endprocedure

#procedure Reduced297()
	#call Prepared297()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd297'
		#call MtoZ(Md297,Zd297,i,14)
		#call Reduce(d297)
		#call ZtoM(Zd297,Md297,i,14)
		#call Prepared297()
#else
		#if `USETURBO'
			#call TurboMd297()
		#endif
		#call insertionS(Md297,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md297b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond297()
#endif
	#endif
#endprocedure
*--#] reduce-d297 : 
*--#[ reduce-d296 :
#procedure Insertiond296()
* merge propagators with same momentum, and repeated dots
	if (count(Md296b,1)) Multiply replace_(Md296b,Md296c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i12,i8,i10,i9,i14,i9,i11,i10,i13,i11,i15,i12,i16,i13);

* rewrite insertion dots
	if (count(Md296c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md296c,dotmapMd296cR1)
	#call replace(i11,j1/2-j4/2-j5/2+j7/2-j8,j,j1,j4,j5,j7,j8,Md296c,dotmapMd296cR2)
	#call replace(i12,j1/2+j3/2-j4/2-j6/2+j7/2-j8,j,j1,j3,j4,j6,j7,j8,Md296c,dotmapMd296cR3)
	#call replace(i13,-j2/2-j6/2+j7/2-j8+j9,j,j2,j6,j7,j8,j9,Md296c,dotmapMd296cR4)
	if (count(Md296c,1)) Multiply replace_(Md296c,Md296d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Md296d,1)) Multiply replace_(i1,j2,i2,j7,i3,j6,i4,j1,i5,j3,i6,j4,i7,j5);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md296d,dotmapMd296dR1)
	#call replace(i9,`Q2'/2+j2/2+j4/2-j6/2-j8-j9,j,j2,j4,j6,j8,j9,Md296d,dotmapMd296dR2)
	if (count(Md296d,1)) Multiply replace_(Md296d,Md137,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd137 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared296()
* Topology: 0-1 1-2 1-2 2-3 3-7 3-6 3-8 2-6 6-7 7-8 8-9
* Dots: p0.p4,p3.p4,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md296*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd296 automorphism;

#call CheckRemovedPropagators(d296,9,7,3,4,5,6,7,8,9,1,2)
#if `$DOACTION' == 0
.sort:reduce d296;
#endif
#endprocedure

#procedure Reduced296()
	#call Prepared296()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd296'
		#call MtoZ(Md296,Zd296,i,14)
		#call Reduce(d296)
		#call ZtoM(Zd296,Md296,i,14)
		#call Prepared296()
#else
		#if `USETURBO'
			#call TurboMd296()
		#endif
		#call insertionS(Md296,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md296b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond296()
#endif
	#endif
#endprocedure
*--#] reduce-d296 : 
*--#[ reduce-d295 :
#procedure Insertiond295()
* merge propagators with same momentum, and repeated dots
	if (count(Md295b,1)) Multiply replace_(Md295b,Md295c,i7,i5,i8,i7,i9,i8,i16,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14);

* rewrite insertion dots
	if (count(Md295c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j3/2-j5/2,j,j3,j5,Md295c,dotmapMd295cR1)
	#call replace(i11,-`Q2'/2+j2/2+j3/2-j4/2,j,j2,j3,j4,Md295c,dotmapMd295cR2)
	#call replace(i12,-`Q2'/2-j6/2+j7/2+j9,j,j6,j7,j9,Md295c,dotmapMd295cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md295c,dotmapMd295cR4)
	#call replace(i14,`Q2'/2+j6/2-j7/2,j,j6,j7,Md295c,dotmapMd295cR5)
	if (count(Md295c,1)) Multiply replace_(Md295c,Md295d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p2,p1.p3 and change topology to d119
	if (count(Md295d,1)) Multiply replace_(i1,j3,i2,j4,i3,j2,i4,j7,i5,j5,i6,j1,i7,j6,i8,j9,i9,j8);
	if (count(Md295d,1)) Multiply replace_(Md295d,Md119,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd119 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared295()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-6 3-8 5-6 3-6 3-8 8-9
* Dots: p1.p6,p3.p6,p0.p5,p1.p5,p5.p6
* Apply automorphisms
if (match(Md295*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n6,$n5,$n7,$n9,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n8,$n7,$n9,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i8,i6,i9,i8,i5,i9,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i9,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd295 automorphism;

#call CheckRemovedPropagators(d295,9,5,1,2,3,4,7,5,6,8,9)
#if `$DOACTION' == 0
.sort:reduce d295;
#endif
#endprocedure

#procedure Reduced295()
	#call Prepared295()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd295'
		#call MtoZ(Md295,Zd295,i,14)
		#call Reduce(d295)
		#call ZtoM(Zd295,Md295,i,14)
		#call Prepared295()
#else
		#if `USETURBO'
			#call TurboMd295()
		#endif
		#call insertionS(Md295,i5,i8,i12,i13,i14,i5,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md295b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond295()
#endif
	#endif
#endprocedure
*--#] reduce-d295 : 
*--#[ reduce-d294 :
#procedure Insertiond294()
* merge propagators with same momentum, and repeated dots
	if (count(Md294b,1)) Multiply replace_(Md294b,Md294c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md294c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md294c,dotmapMd294cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2,j,j2,j6,Md294c,dotmapMd294cR2)
	#call replace(i12,j2/2-j4/2-j6/2+j7/2,j,j2,j4,j6,j7,Md294c,dotmapMd294cR3)
	#call replace(i13,j2/2+j3/2-j4/2,j,j2,j3,j4,Md294c,dotmapMd294cR4)
	if (count(Md294c,1)) Multiply replace_(Md294c,Md294d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p2,p1.p3 and change topology to d149
	if (count(Md294d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j7,i6,j6,i7,j5,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md294d,dotmapMd294dR1)
	if (count(Md294d,1)) Multiply replace_(Md294d,Md149,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd149 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared294()
* Topology: 0-1 1-2 1-2 2-3 3-4 4-7 4-8 2-3 3-7 7-8 8-9
* Dots: p3.p4,p3.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md294*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n3,$n9,$n5,$n8,$n7,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n3,$n9,$n5,$n8,$n7,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n7,$n9,$n5,$n8,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n7,$n9,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i3,i7,i7,i3);
elseif ($bestiso == 1); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i6,i9,i7,i3,i8,i4,i9,i6);
elseif ($bestiso == 3); Multiply replace_(i3,i7,i7,i3);
elseif ($bestiso == 4); Multiply sign_($n11+$n14)*replace_(i3,i7,i4,i8,i6,i9,i7,i3,i8,i4,i9,i6);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 6); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i4,i8,i6,i9,i8,i4,i9,i6);
elseif ($bestiso == 7); Multiply sign_($n11+$n14)*replace_(i4,i8,i6,i9,i8,i4,i9,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd294 automorphism;

#call CheckRemovedPropagators(d294,9,5,4,5,6,8,9,1,2,3,7)
#if `$DOACTION' == 0
.sort:reduce d294;
#endif
#endprocedure

#procedure Reduced294()
	#call Prepared294()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd294'
		#call MtoZ(Md294,Zd294,i,14)
		#call Reduce(d294)
		#call ZtoM(Zd294,Md294,i,14)
		#call Prepared294()
#else
		#if `USETURBO'
			#call TurboMd294()
		#endif
		#call insertionS(Md294,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md294b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond294()
#endif
	#endif
#endprocedure
*--#] reduce-d294 : 
*--#[ reduce-d293 :
#procedure Insertiond293()
* merge propagators with same momentum, and repeated dots
	if (count(Md293b,1)) Multiply replace_(Md293b,Md293c,i6,i5,i7,i6,i5,i7,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md293c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j5/2+j7/2,j,j5,j7,Md293c,dotmapMd293cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md293c,dotmapMd293cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2-j9,j,j3,j6,j9,Md293c,dotmapMd293cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md293c,dotmapMd293cR4)
	#call replace(i14,`Q2'/2+j3/2-j6/2,j,j3,j6,Md293c,dotmapMd293cR5)
	#call replace(i15,j1/2+j3/2-j4/2,j,j1,j3,j4,Md293c,dotmapMd293cR6)
	if (count(Md293c,1)) Multiply replace_(Md293c,Md293d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p5,p3.p5 and change topology to d150
	if (count(Md293d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j7,i6,j6,i7,j5);
	#call replace(i8,`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md293d,dotmapMd293dR1)
	#call replace(i9,`Q2'/2+j3/2-j6/2-j9,j,j3,j6,j9,Md293d,dotmapMd293dR2)
	if (count(Md293d,1)) Multiply replace_(Md293d,Md150,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd150 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared293()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-7 3-8 3-5 3-7 7-8 8-9
* Dots: p1.p6,p3.p6,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md293*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n3,$n6,$n8,$n4,$n7,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i7,i5,i8,i7,i3,i8,i5);
elseif ($bestiso == 2); Multiply sign_($n11+$n14)*replace_(i1,i2,i2,i1,i3,i7,i7,i3);
elseif ($bestiso == 3); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd293 automorphism;

#call CheckRemovedPropagators(d293,9,6,1,2,3,4,7,9,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d293;
#endif
#endprocedure

#procedure Reduced293()
	#call Prepared293()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd293'
		#call MtoZ(Md293,Zd293,i,14)
		#call Reduce(d293)
		#call ZtoM(Zd293,Md293,i,14)
		#call Prepared293()
#else
		#if `USETURBO'
			#call TurboMd293()
		#endif
		#call insertionS(Md293,i5,i8,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md293b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond293()
#endif
	#endif
#endprocedure
*--#] reduce-d293 : 
*--#[ reduce-d292 :
#procedure Insertiond292()
* merge propagators with same momentum, and repeated dots
	if (count(Md292b,1)) Multiply replace_(Md292b,Md292c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i15,i14,i16,i15);

* rewrite insertion dots
	if (count(Md292c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md292c,dotmapMd292cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2-j8,j,j2,j6,j8,Md292c,dotmapMd292cR2)
	#call replace(i12,j2/2-j4/2-j6/2+j7/2-j9,j,j2,j4,j6,j7,j9,Md292c,dotmapMd292cR3)
	#call replace(i13,`Q2'/2+j2/2-j6/2,j,j2,j6,Md292c,dotmapMd292cR4)
	#call replace(i14,j2/2-j4/2-j6/2+j7/2,j,j2,j4,j6,j7,Md292c,dotmapMd292cR5)
	#call replace(i15,j2/2+j3/2-j4/2,j,j2,j3,j4,Md292c,dotmapMd292cR6)
	if (count(Md292c,1)) Multiply replace_(Md292c,Md292d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p5,p3.p5 and change topology to d150
	if (count(Md292d,1)) Multiply replace_(i1,j7,i2,j3,i3,j4,i4,j1,i5,j5,i6,j6,i7,j2);
	#call replace(i8,`Q2'/2+j3/2-j6/2-j9,j,j3,j6,j9,Md292d,dotmapMd292dR1)
	#call replace(i9,-j1/2+j2/2+j3/2-j6/2+j8-j9,j,j1,j2,j3,j6,j8,j9,Md292d,dotmapMd292dR2)
	if (count(Md292d,1)) Multiply replace_(Md292d,Md150,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd150 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared292()
* Topology: 0-1 1-5 1-3 1-5 3-4 4-7 4-8 3-5 3-7 7-8 8-9
* Dots: p2.p4,p2.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md292*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n7,$n9,$n5,$n8,$n1,$n2,$n3)
endif;
if (($n10==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n6,$n4,$n7,$n9,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply sign_($n11+$n14)*replace_(i1,i3,i3,i1,i4,i8,i6,i9,i8,i4,i9,i6);
elseif ($bestiso == 3); Multiply sign_($n11+$n14)*replace_(i4,i8,i6,i9,i8,i4,i9,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd292 automorphism;

#call CheckRemovedPropagators(d292,9,6,4,5,6,7,8,9,1,2,3)
#if `$DOACTION' == 0
.sort:reduce d292;
#endif
#endprocedure

#procedure Reduced292()
	#call Prepared292()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd292'
		#call MtoZ(Md292,Zd292,i,14)
		#call Reduce(d292)
		#call ZtoM(Zd292,Md292,i,14)
		#call Prepared292()
#else
		#if `USETURBO'
			#call TurboMd292()
		#endif
		#call insertionS(Md292,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md292b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond292()
#endif
	#endif
#endprocedure
*--#] reduce-d292 : 
#call ReduceEdge(9,\
d385,d384,d383,bubu,d381,nono,d379,d378,d377,d376,d375,lala,d373,d372,d371,d370\
,d369,d368,d367,d366,d365,d364,d363,d362,d361,d360,d359,d358,d357,d356,d355,\
d354,d353,d352,d351,d350,d349,d348,d347,d346,d345,d344,d343,d342,d341,d340,d339\
,d338,d337,d336,d335,d334,d333,d332,d331,d330,d329,d328,d327,d326,d325,d324,\
d323,d322,d321,d320,d319,d318,d317,d316,d315,d314,d313,d312,d311,d310,d309,d308\
,d307,d306,d305,d304,d303,d302,d301,d300,d299,d298,d297,d296,d295,d294,d293,\
d292\
)
*--#] 9 edges : 
*--#[ 8 edges :
*--#[ reduce-d291 :
#procedure Insertiond291()
* merge propagators with same momentum, and repeated dots
	if (count(Md291b,1)) Multiply replace_(Md291b,Md291c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md291c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md291c,dotmapMd291cR1)
	#call replace(i11,`Q2'/2+j2/2-j5/2,j,j2,j5,Md291c,dotmapMd291cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2,j,j3,j6,Md291c,dotmapMd291cR3)
	if (count(Md291c,1)) Multiply replace_(Md291c,Md291d,<j1,i1>,...,<j9,i9>);
* map dots to p2.p3,p1.p2,p1.p3 and change topology to d54
	if (count(Md291d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j6,i5,j5,i6,j4,i7,j8,i8,j9,i9,j7);
	if (count(Md291d,1)) Multiply replace_(Md291d,Md54,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd54 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared291()
* Topology: 0-1 1-2 1-2 2-3 3-4 4-8 2-3 3-4 4-8 8-9
* Dots: p3.p4,p3.p5,p4.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md291*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,31
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n3,$n8,$n7,$n6,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n3,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n3,$n8,$n4,$n6,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n3,$n5,$n7,$n6,$n1,$n2)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n3,$n8,$n7,$n6,$n1,$n2)
	#call hash(5,$n14,$n13,$n11,$n11,$n10,$n9,$n1,$n3,$n7,$n2,$n6,$n4,$n8,$n5)
	#call hash(6,$n14,$n10,$n12,$n11,$n10,$n9,$n1,$n6,$n4,$n2,$n3,$n7,$n8,$n5)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n3,$n4,$n2,$n6,$n7,$n8,$n5)
	#call hash(8,$n14,$n13,$n12,$n11,$n13,$n9,$n2,$n3,$n7,$n1,$n6,$n4,$n5,$n8)
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n3,$n7,$n2,$n6,$n4,$n5,$n8)
	#call hash(10,$n14,$n13,$n12,$n12,$n10,$n9,$n2,$n6,$n4,$n1,$n3,$n7,$n5,$n8)
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n6,$n4,$n2,$n3,$n7,$n5,$n8)
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n3,$n4,$n1,$n6,$n7,$n5,$n8)
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n3,$n4,$n2,$n6,$n7,$n5,$n8)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(14,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n3,$n8,$n4,$n6,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(16,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n3,$n5,$n7,$n6,$n2,$n1)
	#call hash(17,$n14,$n13,$n11,$n11,$n13,$n9,$n2,$n3,$n7,$n1,$n6,$n4,$n8,$n5)
	#call hash(18,$n14,$n10,$n12,$n12,$n10,$n9,$n2,$n6,$n4,$n1,$n3,$n7,$n8,$n5)
	#call hash(19,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n3,$n4,$n1,$n6,$n7,$n8,$n5)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(20,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n1,$n2)
	#call hash(21,$n14,$n10,$n11,$n11,$n10,$n9,$n1,$n6,$n7,$n2,$n3,$n4,$n8,$n5)
	#call hash(22,$n14,$n13,$n12,$n12,$n13,$n9,$n2,$n6,$n7,$n1,$n3,$n4,$n5,$n8)
	#call hash(23,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n6,$n7,$n2,$n3,$n4,$n5,$n8)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(24,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(25,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
	#call hash(26,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(27,$n14,$n10,$n11,$n12,$n13,$n9,$n2,$n6,$n7,$n1,$n3,$n4,$n8,$n5)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(28,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(29,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(30,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n12==0));
	#call hash(31,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,31
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i6,i4,i7,i5,i8,i6,i3,i7,i4,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i3,i6,i5,i8,i6,i3,i8,i5);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i7,i6,i3,i7,i4);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i7,i5,i8,i6,i3,i7,i4,i8,i5);
elseif ($bestiso == 5); Multiply replace_(i1,i5,i2,i8,i3,i4,i4,i6,i5,i2,i6,i7,i7,i3,i8,i1,i12,i11);
elseif ($bestiso == 6); Multiply replace_(i1,i5,i2,i8,i3,i7,i4,i3,i5,i2,i6,i4,i7,i6,i8,i1,i13,i10);
elseif ($bestiso == 7); Multiply replace_(i1,i5,i2,i8,i3,i7,i4,i6,i5,i2,i6,i4,i7,i3,i8,i1);
elseif ($bestiso == 8); Multiply replace_(i1,i8,i2,i5,i3,i4,i4,i6,i5,i1,i6,i7,i7,i3,i8,i2,i10,i13);
elseif ($bestiso == 9); Multiply replace_(i1,i8,i2,i5,i3,i4,i4,i6,i5,i2,i6,i7,i7,i3,i8,i1);
elseif ($bestiso == 10); Multiply replace_(i1,i8,i2,i5,i3,i7,i4,i3,i5,i1,i6,i4,i7,i6,i8,i2,i11,i12);
elseif ($bestiso == 11); Multiply replace_(i1,i8,i2,i5,i3,i7,i4,i3,i5,i2,i6,i4,i7,i6,i8,i1);
elseif ($bestiso == 12); Multiply replace_(i1,i8,i2,i5,i3,i7,i4,i6,i5,i1,i6,i4,i7,i3,i8,i2);
elseif ($bestiso == 13); Multiply replace_(i1,i8,i2,i5,i3,i7,i4,i6,i5,i2,i6,i4,i7,i3,i8,i1);
elseif ($bestiso == 14); Multiply replace_(i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 15); Multiply replace_(i3,i6,i5,i8,i6,i3,i8,i5);
elseif ($bestiso == 16); Multiply replace_(i3,i6,i4,i7,i6,i3,i7,i4);
elseif ($bestiso == 17); Multiply replace_(i1,i5,i2,i8,i3,i4,i4,i6,i5,i1,i6,i7,i7,i3,i8,i2,i10,i13,i12,i11);
elseif ($bestiso == 18); Multiply replace_(i1,i5,i2,i8,i3,i7,i4,i3,i5,i1,i6,i4,i7,i6,i8,i2,i11,i12,i13,i10);
elseif ($bestiso == 19); Multiply replace_(i1,i5,i2,i8,i3,i7,i4,i6,i5,i1,i6,i4,i7,i3,i8,i2);
elseif ($bestiso == 20); Multiply replace_(i1,i2,i2,i1,i5,i8,i8,i5);
elseif ($bestiso == 21); Multiply replace_(i1,i5,i2,i8,i3,i4,i4,i3,i5,i2,i6,i7,i7,i6,i8,i1,i12,i11,i13,i10);
elseif ($bestiso == 22); Multiply replace_(i1,i8,i2,i5,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i8,i2,i10,i13,i11,i12);
elseif ($bestiso == 23); Multiply replace_(i1,i8,i2,i5,i3,i4,i4,i3,i5,i2,i6,i7,i7,i6,i8,i1);
elseif ($bestiso == 24); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 25); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 27); Multiply replace_(i1,i5,i2,i8,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i8,i2,i10,i13,i11,i12,i12,i11,i13,i10);
elseif ($bestiso == 28); Multiply replace_(i1,i2,i2,i1,i4,i7,i7,i4);
elseif ($bestiso == 29); Multiply replace_(i4,i7,i7,i4);
elseif ($bestiso == 30); Multiply replace_(i1,i2,i2,i1,i3,i6,i6,i3);
elseif ($bestiso == 31); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso31>,$bestiso,$bestisov;
.sort:Zd291 automorphism;

#call CheckRemovedPropagators(d291,8,0,1,2,3,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d291;
#endif
#endprocedure

#procedure Reduced291()
	#call Prepared291()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd291'
		#call MtoZ(Md291,Zd291,i,14)
		#call Reduce(d291)
		#call ZtoM(Zd291,Md291,i,14)
		#call Prepared291()
#else
		#if `USETURBO'
			#call TurboMd291()
		#endif
		#call insertionS(Md291,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md291b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond291()
#endif
	#endif
#endprocedure
*--#] reduce-d291 : 
*--#[ reduce-d290 :
#procedure Insertiond290()
* merge propagators with same momentum, and repeated dots
	if (count(Md290b,1)) Multiply replace_(Md290b,Md290c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i13,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i12,i11,i16,i12);

* rewrite insertion dots
	if (count(Md290c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md290c,dotmapMd290cR1)
	#call replace(i11,`Q2'/2+j2/2-j5/2,j,j2,j5,Md290c,dotmapMd290cR2)
	#call replace(i12,j3/2+j5/2-j6/2+j7,j,j3,j5,j6,j7,Md290c,dotmapMd290cR3)
	if (count(Md290c,1)) Multiply replace_(Md290c,Md290d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p2,p1.p3 and change topology to d55
	if (count(Md290d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j6,i5,j5,i6,j4,i7,j7,i8,j8,i9,j9);
	if (count(Md290d,1)) Multiply replace_(Md290d,Md55,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd55 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared290()
* Topology: 0-1 1-2 1-2 2-3 3-4 4-7 2-3 3-7 4-7 4-9
* Dots: p0.p5,p3.p4,p3.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md290*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n3,$n8,$n4,$n6,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n3,$n8,$n4,$n6,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i3,i6,i5,i8,i6,i3,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i6,i6,i3);
elseif ($bestiso == 3); Multiply replace_(i3,i6,i6,i3);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 5); Multiply replace_(i3,i6,i5,i8,i6,i3,i8,i5);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i5,i8,i8,i5);
elseif ($bestiso == 7); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd290 automorphism;

#call CheckRemovedPropagators(d290,8,1,7,1,2,3,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d290;
#endif
#endprocedure

#procedure Reduced290()
	#call Prepared290()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd290'
		#call MtoZ(Md290,Zd290,i,14)
		#call Reduce(d290)
		#call ZtoM(Zd290,Md290,i,14)
		#call Prepared290()
#else
		#if `USETURBO'
			#call TurboMd290()
		#endif
		#call insertionS(Md290,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md290b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond290()
#endif
	#endif
#endprocedure
*--#] reduce-d290 : 
*--#[ reduce-d289 :
#procedure Insertiond289()
* merge propagators with same momentum, and repeated dots
	if (count(Md289b,1)) Multiply replace_(Md289b,Md289c,i18,i8,i19,i9);

* rewrite insertion dots
	if (count(Md289c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j7/2,j,j5,j7,Md289c,dotmapMd289cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md289c,dotmapMd289cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2-j9,j,j3,j6,j9,Md289c,dotmapMd289cR3)
	#call replace(i13,`Q2'/2-j5/2-j7/2,j,j5,j7,Md289c,dotmapMd289cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md289c,dotmapMd289cR5)
	#call replace(i15,`Q2'/2+j3/2-j6/2,j,j3,j6,Md289c,dotmapMd289cR6)
	#call replace(i16,`Q2'/2-j5/2+j7/2,j,j5,j7,Md289c,dotmapMd289cR7)
	#call replace(i17,j1/2+j3/2-j4/2,j,j1,j3,j4,Md289c,dotmapMd289cR8)
	if (count(Md289c,1)) Multiply replace_(Md289c,Md289d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p5,p3.p5 and change topology to d150
	if (count(Md289d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md289d,dotmapMd289dR1)
	#call replace(i9,`Q2'/2+j3/2-j6/2-j9,j,j3,j6,j9,Md289d,dotmapMd289dR2)
	if (count(Md289d,1)) Multiply replace_(Md289d,Md150,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd150 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared289()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 3-4 3-5 3-4 4-9
* Dots: p1.p8,p3.p8,p0.p5,p1.p5,p3.p5,p5.p8
* Apply automorphisms
if (match(Md289*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n13,$n12,$n5,$n7,$n8,$n6,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n10,$n9,$n11,$n10,$n9,$n6,$n7,$n5,$n8,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n5,$n6,$n4,$n7,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n3,$n8,$n6,$n4,$n7,$n1,$n2)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n3,$n5,$n8,$n4,$n7,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n3,$n8,$n5,$n4,$n7,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n11==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(10,$n14,$n10,$n9,$n11,$n13,$n12,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n3,$n6,$n8,$n4,$n7,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i6,i6,i8,i8,i5,i9,i12,i10,i13);
elseif ($bestiso == 1); Multiply replace_(i5,i8,i6,i5,i8,i6,i12,i9,i13,i10);
elseif ($bestiso == 2); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i7,i5,i6,i6,i5,i7,i3);
elseif ($bestiso == 3); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i7,i5,i6,i6,i8,i7,i3,i8,i5);
elseif ($bestiso == 4); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i7,i5,i8,i6,i5,i7,i3,i8,i6);
elseif ($bestiso == 5); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i7,i6,i8,i7,i3,i8,i6);
elseif ($bestiso == 7); Multiply replace_(i6,i8,i8,i6);
elseif ($bestiso == 8); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i7,i7,i3);
elseif ($bestiso == 9); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 10); Multiply replace_(i5,i8,i8,i5,i9,i12,i10,i13,i12,i9,i13,i10);
elseif ($bestiso == 11); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i7,i5,i8,i7,i3,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd289 automorphism;

#call CheckRemovedPropagators(d289,8,5,1,2,3,4,7,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d289;
#endif
#endprocedure

#procedure Reduced289()
	#call Prepared289()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd289'
		#call MtoZ(Md289,Zd289,i,14)
		#call Reduce(d289)
		#call ZtoM(Zd289,Md289,i,14)
		#call Prepared289()
#else
		#if `USETURBO'
			#call TurboMd289()
		#endif
		#call insertionS(Md289,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i3,i8,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md289b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond289()
#endif
	#endif
#endprocedure
*--#] reduce-d289 : 
*--#[ reduce-d288 :
#procedure Insertiond288()
* merge propagators with same momentum, and repeated dots
	if (count(Md288b,1)) Multiply replace_(Md288b,Md288c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md288c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md288c,dotmapMd288cR1)
	#call replace(i11,`Q2'/2+j2/2-j5/2-j8,j,j2,j5,j8,Md288c,dotmapMd288cR2)
	#call replace(i12,j7-j9,j,j7,j9,Md288c,dotmapMd288cR3)
	#call replace(i13,`Q2'/2+j2/2-j5/2,j,j2,j5,Md288c,dotmapMd288cR4)
	#call replace(i14,j3/2+j5/2-j6/2+j7,j,j3,j5,j6,j7,Md288c,dotmapMd288cR5)
	if (count(Md288c,1)) Multiply replace_(Md288c,Md288d,<j1,i1>,...,<j9,i9>);
* map dots to p2.p4,p0.p1,p1.p4 and change topology to d56
	if (count(Md288d,1)) Multiply replace_(i1,j6,i2,j2,i3,j1,i4,j4,i5,j5,i6,j3,i7,j8);
	#call replace(i8,`Q2'/2+j2/2-j5/2-j7,j,j2,j5,j7,Md288d,dotmapMd288dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md288d,dotmapMd288dR2)
	if (count(Md288d,1)) Multiply replace_(Md288d,Md56,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd56 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared288()
* Topology: 0-1 1-5 1-3 1-5 3-4 4-7 3-5 3-7 4-7 4-9
* Dots: p0.p5,p2.p4,p2.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md288*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n11,$n9,$n13,$n10,$n12,$n3,$n6,$n7,$n1,$n2,$n8,$n4,$n5)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n1,$n2,$n3)
	#call hash(4,$n14,$n11,$n9,$n11,$n10,$n9,$n1,$n6,$n7,$n3,$n2,$n8,$n4,$n5)
	#call hash(5,$n14,$n13,$n12,$n13,$n10,$n12,$n3,$n6,$n7,$n1,$n2,$n5,$n4,$n8)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n6,$n7,$n3,$n2,$n5,$n4,$n8)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply sign_($n9+$n11+$n12+$n13)*replace_(i1,i5,i2,i4,i3,i8,i4,i2,i5,i1,i6,i7,i7,i6,i8,i3,i9,i12,i11,i13,i12,i9,i13,i11);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1,i5,i8,i8,i5);
elseif ($bestiso == 4); Multiply sign_($n9+$n11+$n12+$n13)*replace_(i1,i5,i2,i4,i3,i8,i4,i2,i5,i3,i6,i7,i7,i6,i8,i1,i12,i9,i13,i11);
elseif ($bestiso == 5); Multiply sign_($n9+$n11+$n12+$n13)*replace_(i1,i8,i2,i4,i3,i5,i4,i2,i5,i1,i6,i7,i7,i6,i8,i3,i9,i12,i11,i13);
elseif ($bestiso == 6); Multiply sign_($n9+$n11+$n12+$n13)*replace_(i1,i8,i2,i4,i3,i5,i4,i2,i5,i3,i6,i7,i7,i6,i8,i1);
elseif ($bestiso == 7); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd288 automorphism;

#call CheckRemovedPropagators(d288,8,2,6,7,1,2,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d288;
#endif
#endprocedure

#procedure Reduced288()
	#call Prepared288()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd288'
		#call MtoZ(Md288,Zd288,i,14)
		#call Reduce(d288)
		#call ZtoM(Zd288,Md288,i,14)
		#call Prepared288()
#else
		#if `USETURBO'
			#call TurboMd288()
		#endif
		#call insertionS(Md288,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md288b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond288()
#endif
	#endif
#endprocedure
*--#] reduce-d288 : 
*--#[ reduce-d287 :
#procedure Insertiond287()
* merge propagators with same momentum, and repeated dots
	if (count(Md287b,1)) Multiply replace_(Md287b,Md287c,i16,i8,i18,i9,i17,i16,i19,i17);

* rewrite insertion dots
	if (count(Md287c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j1/2+j2/2+j3/2-j4/2-j8,j,j1,j2,j3,j4,j8,Md287c,dotmapMd287cR1)
	#call replace(i11,-j1/2+j3/2-j5/2-j9,j,j1,j3,j5,j9,Md287c,dotmapMd287cR2)
	#call replace(i12,-j1/2+j3/2+j6/2-j7/2-j9,j,j1,j3,j6,j7,j9,Md287c,dotmapMd287cR3)
	#call replace(i13,j5/2-j6/2-j7/2,j,j5,j6,j7,Md287c,dotmapMd287cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md287c,dotmapMd287cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md287c,dotmapMd287cR6)
	#call replace(i16,j1/2+j3/2-j5/2,j,j1,j3,j5,Md287c,dotmapMd287cR7)
	#call replace(i17,j5/2-j6/2+j7/2+j9,j,j5,j6,j7,j9,Md287c,dotmapMd287cR8)
	if (count(Md287c,1)) Multiply replace_(Md287c,Md287d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p6,p1.p6 and change topology to d145
	if (count(Md287d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,-j1/2+j2/2+j3/2-j4/2-j8,j,j1,j2,j3,j4,j8,Md287d,dotmapMd287dR1)
	#call replace(i9,-j1/2+j3/2-j5/2-j9,j,j1,j3,j5,j9,Md287d,dotmapMd287dR2)
	if (count(Md287d,1)) Multiply replace_(Md287d,Md145,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd145 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared287()
* Topology: 0-1 4-8 5-8 1-4 1-5 2-4 2-5 2-5 2-5 8-9
* Dots: p0.p8,p1.p8,p0.p6,p1.p6,p3.p6,p6.p8
* Apply automorphisms
if (match(Md287*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n12,$n11,$n6,$n8,$n7,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n9,$n10,$n9,$n7,$n6,$n8,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n13,$n11,$n6,$n8,$n7,$n5,$n2,$n1,$n4,$n3)
	#call hash(3,$n14,$n10,$n12,$n9,$n10,$n9,$n7,$n6,$n8,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n12,$n13,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n10==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n13==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(10,$n14,$n13,$n10,$n9,$n12,$n11,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(11,$n14,$n10,$n12,$n9,$n13,$n11,$n6,$n7,$n8,$n5,$n2,$n1,$n4,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i6,i7,i7,i8,i8,i6,i9,i11,i10,i12);
elseif ($bestiso == 1); Multiply replace_(i6,i8,i7,i6,i8,i7,i11,i9,i12,i10);
elseif ($bestiso == 2); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i7,i7,i8,i8,i6,i9,i11,i10,i13);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i8,i7,i6,i8,i7,i11,i9,i13,i10);
elseif ($bestiso == 4); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 5); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i7,i8,i8,i7,i12,i13,i13,i12);
elseif ($bestiso == 6); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i7,i7,i6);
elseif ($bestiso == 8); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i12,i13,i13,i12);
elseif ($bestiso == 9); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 10); Multiply replace_(i6,i8,i8,i6,i9,i11,i10,i12,i11,i9,i12,i10);
elseif ($bestiso == 11); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i8,i8,i6,i9,i11,i10,i13,i11,i9,i13,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd287 automorphism;

#call CheckRemovedPropagators(d287,8,5,1,2,3,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d287;
#endif
#endprocedure

#procedure Reduced287()
	#call Prepared287()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd287'
		#call MtoZ(Md287,Zd287,i,14)
		#call Reduce(d287)
		#call ZtoM(Zd287,Md287,i,14)
		#call Prepared287()
#else
		#if `USETURBO'
			#call TurboMd287()
		#endif
		#call insertionS(Md287,i6,i7,i11,i12,i13,i14,i6,`Q2',i1,i3,i8,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md287b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond287()
#endif
	#endif
#endprocedure
*--#] reduce-d287 : 
*--#[ reduce-d286 :
#procedure Insertiond286()
* merge propagators with same momentum, and repeated dots
	if (count(Md286b,1)) Multiply replace_(Md286b,Md286c,i16,i8,i18,i9,i17,i16,i19,i17);

* rewrite insertion dots
	if (count(Md286c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j2/2-j4/2+j7/2,j,j1,j2,j4,j7,Md286c,dotmapMd286cR1)
	#call replace(i11,j1/2+j3/2-j4/2,j,j1,j3,j4,Md286c,dotmapMd286cR2)
	#call replace(i12,j1/2-j3/2-j4/2,j,j1,j3,j4,Md286c,dotmapMd286cR3)
	#call replace(i13,j3/2+j5/2-j6/2,j,j3,j5,j6,Md286c,dotmapMd286cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md286c,dotmapMd286cR5)
	#call replace(i15,`Q2'/2+j4/2-j7/2,j,j4,j7,Md286c,dotmapMd286cR6)
	#call replace(i16,j1/2-j3/2+j4/2,j,j1,j3,j4,Md286c,dotmapMd286cR7)
	#call replace(i17,-j3/2-j5/2+j6/2+j9,j,j3,j5,j6,j9,Md286c,dotmapMd286cR8)
	if (count(Md286c,1)) Multiply replace_(Md286c,Md286d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5 and change topology to d138
	if (count(Md286d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md286d,1)) Multiply replace_(Md286d,Md138,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd138 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared286()
* Topology: 0-1 1-2 1-6 2-4 2-4 2-8 4-6 4-6 6-8 8-9
* Dots: p0.p6,p1.p6,p0.p3,p1.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md286*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n9,$n10,$n9,$n5,$n3,$n4,$n8,$n7,$n6,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n11,$n5,$n4,$n3,$n8,$n6,$n7,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n3,$n4,$n8,$n6,$n7,$n1,$n2)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n6,$n7,$n1,$n3,$n4,$n8,$n5)
	#call hash(5,$n14,$n13,$n12,$n9,$n10,$n9,$n1,$n3,$n4,$n2,$n7,$n6,$n5,$n8)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n11,$n1,$n4,$n3,$n2,$n6,$n7,$n5,$n8)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n3,$n4,$n2,$n6,$n7,$n5,$n8)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
	#call hash(9,$n14,$n12,$n13,$n11,$n10,$n9,$n2,$n6,$n7,$n1,$n4,$n3,$n8,$n5)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n7,$n6,$n1,$n3,$n4,$n8,$n5)
endif;
if (($n10==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(12,$n14,$n12,$n13,$n11,$n10,$n9,$n2,$n7,$n6,$n1,$n4,$n3,$n8,$n5)
endif;
if (($n10==0)&&($n12==0)&&($n13==0));
	#call hash(13,$n14,$n13,$n12,$n9,$n10,$n11,$n5,$n4,$n3,$n8,$n7,$n6,$n1,$n2)
	#call hash(14,$n14,$n13,$n12,$n9,$n10,$n11,$n1,$n4,$n3,$n2,$n7,$n6,$n5,$n8)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i6,i7,i7,i6);
elseif ($bestiso == 1); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i6,i4,i7,i5,i8,i6,i4,i7,i3,i8,i5,i11,i9);
elseif ($bestiso == 2); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i7,i4,i6,i5,i8,i6,i3,i7,i4,i8,i5,i9,i11);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i7,i4,i6,i5,i8,i6,i4,i7,i3,i8,i5);
elseif ($bestiso == 4); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i8,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i8,i2);
elseif ($bestiso == 5); Multiply replace_(i1,i8,i2,i5,i3,i6,i4,i7,i5,i2,i6,i4,i7,i3,i8,i1,i11,i9);
elseif ($bestiso == 6); Multiply replace_(i1,i8,i2,i5,i3,i7,i4,i6,i5,i2,i6,i3,i7,i4,i8,i1,i9,i11);
elseif ($bestiso == 7); Multiply replace_(i1,i8,i2,i5,i3,i7,i4,i6,i5,i2,i6,i4,i7,i3,i8,i1);
elseif ($bestiso == 8); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 9); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i8,i5,i1,i6,i7,i7,i6,i8,i2,i12,i13,i13,i12);
elseif ($bestiso == 10); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i8,i3,i4,i4,i3,i5,i1,i8,i2);
elseif ($bestiso == 12); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i5,i2,i8,i5,i1,i8,i2,i12,i13,i13,i12);
elseif ($bestiso == 13); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i6,i4,i7,i5,i8,i6,i3,i7,i4,i8,i5,i9,i11,i11,i9);
elseif ($bestiso == 14); Multiply replace_(i1,i8,i2,i5,i3,i6,i4,i7,i5,i2,i6,i3,i7,i4,i8,i1,i9,i11,i11,i9);
elseif ($bestiso == 15); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd286 automorphism;

#call CheckRemovedPropagators(d286,8,4,1,2,5,8,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d286;
#endif
#endprocedure

#procedure Reduced286()
	#call Prepared286()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd286'
		#call MtoZ(Md286,Zd286,i,14)
		#call Reduce(d286)
		#call ZtoM(Zd286,Md286,i,14)
		#call Prepared286()
#else
		#if `USETURBO'
			#call TurboMd286()
		#endif
		#call insertionS(Md286,i3,i4,i11,i12,i13,i14,i3,`Q2',i1,i5,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md286b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond286()
#endif
	#endif
#endprocedure
*--#] reduce-d286 : 
*--#[ reduce-d285 :
#procedure Insertiond285()
* merge propagators with same momentum, and repeated dots
	if (count(Md285b,1)) Multiply replace_(Md285b,Md285c,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i9,i12,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md285c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j2/2+j3/2+j5/2-j6/2+j7+j8,j,j2,j3,j5,j6,j7,j8,Md285c,dotmapMd285cR1)
	#call replace(i11,j2/2+j4/2-j5/2,j,j2,j4,j5,Md285c,dotmapMd285cR2)
	#call replace(i12,-`Q2'/2-j1/2-j2/2+j3/2+j7+j8,j,j1,j2,j3,j7,j8,Md285c,dotmapMd285cR3)
	if (count(Md285c,1)) Multiply replace_(Md285c,Md285d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md285d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j5,i5,j4,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md285d,dotmapMd285dR1)
	if (count(Md285d,1)) Multiply replace_(Md285d,Md57,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd57 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared285()
* Topology: 0-1 1-6 1-3 1-7 3-4 3-4 4-7 3-6 6-7 7-9
* Dots: p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md285*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd285 automorphism;

#call CheckRemovedPropagators(d285,8,5,1,2,6,7,8,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d285;
#endif
#endprocedure

#procedure Reduced285()
	#call Prepared285()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd285'
		#call MtoZ(Md285,Zd285,i,14)
		#call Reduce(d285)
		#call ZtoM(Zd285,Md285,i,14)
		#call Prepared285()
#else
		#if `USETURBO'
			#call TurboMd285()
		#endif
		#call insertionS(Md285,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md285b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond285()
#endif
	#endif
#endprocedure
*--#] reduce-d285 : 
*--#[ reduce-d284 :
#procedure Insertiond284()
* merge propagators with same momentum, and repeated dots
	if (count(Md284b,1)) Multiply replace_(Md284b,Md284c,i5,i4,i4,i5,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md284c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j8-j9,j,j8,j9,Md284c,dotmapMd284cR1)
	#call replace(i11,-j1/2-j5/2+j6/2,j,j1,j5,j6,Md284c,dotmapMd284cR2)
	#call replace(i12,j2/2-j4/2+j5/2,j,j2,j4,j5,Md284c,dotmapMd284cR3)
	#call replace(i13,-`Q2'/2-j1/2-j2/2+j3/2+j7+j8,j,j1,j2,j3,j7,j8,Md284c,dotmapMd284cR4)
	if (count(Md284c,1)) Multiply replace_(Md284c,Md284d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d58
	if (count(Md284d,1)) Multiply replace_(i1,j6,i2,j4,i3,j1,i4,j2,i5,j5,i6,j3,i8,j9,i9,j7);
	#call replace(i7,j7+j8-j9,j,j7,j8,j9,Md284d,dotmapMd284dR1)
	if (count(Md284d,1)) Multiply replace_(Md284d,Md58,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd58 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared284()
* Topology: 0-1 1-6 1-3 1-7 3-5 3-5 3-7 5-6 6-7 7-9
* Dots: p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md284*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n10,$n11,$n9,$n1,$n7,$n2,$n4,$n5,$n3,$n6,$n8)
endif;
if (($n9==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n10,$n11,$n9,$n1,$n7,$n2,$n5,$n4,$n3,$n6,$n8)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 2); Multiply sign_($n12+$n13+$n14)*replace_(i1,i8,i2,i6,i4,i5,i5,i4,i6,i2,i8,i1,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply sign_($n12+$n13+$n14)*replace_(i1,i8,i2,i6,i6,i2,i8,i1,i10,i11,i11,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd284 automorphism;

#call CheckRemovedPropagators(d284,8,5,1,2,6,7,8,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d284;
#endif
#endprocedure

#procedure Reduced284()
	#call Prepared284()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd284'
		#call MtoZ(Md284,Zd284,i,14)
		#call Reduce(d284)
		#call ZtoM(Zd284,Md284,i,14)
		#call Prepared284()
#else
		#if `USETURBO'
			#call TurboMd284()
		#endif
		#call insertionS(Md284,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md284b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond284()
#endif
	#endif
#endprocedure
*--#] reduce-d284 : 
*--#[ reduce-d283 :
#procedure Insertiond283()
* merge propagators with same momentum, and repeated dots
	if (count(Md283b,1)) Multiply replace_(Md283b,Md283c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i11,-i7,i9,i8,i15,i8,i10,i9,i16,i9,i12,-i10,i13,-i11,i14,i12);

* rewrite insertion dots
	if (count(Md283c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j2/2+j3/2-j4/2+j7,j,j2,j3,j4,j7,Md283c,dotmapMd283cR1)
	#call replace(i11,j3/2+j5/2-j6/2+j8-j9,j,j3,j5,j6,j8,j9,Md283c,dotmapMd283cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md283c,dotmapMd283cR3)
	if (count(Md283c,1)) Multiply replace_(Md283c,Md283d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p4,p1.p4 and change topology to d59
	if (count(Md283d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j1,i5,j4,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j4/2+j5/2-j6/2+j8-j9,j,j4,j5,j6,j8,j9,Md283d,dotmapMd283dR1)
	if (count(Md283d,1)) Multiply replace_(Md283d,Md59,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd59 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared283()
* Topology: 0-1 1-8 2-8 1-5 1-3 2-5 2-5 2-3 2-3 8-9
* Dots: p0.p3,p0.p7,p1.p7,p0.p5,p1.p5,p5.p7
* Apply automorphisms
if (match(Md283*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n11,$n10,$n11,$n10,$n9,$n5,$n6,$n8,$n7,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n13,$n12,$n9,$n6,$n5,$n7,$n8,$n3,$n4,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n6,$n7,$n8,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n9==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n11,$n10,$n13,$n12,$n9,$n6,$n5,$n8,$n7,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i5,i7,i6,i8,i7,i6,i8,i5,i12,i10,i13,i11);
elseif ($bestiso == 1); Multiply replace_(i3,i4,i4,i3,i5,i8,i6,i7,i7,i5,i8,i6,i10,i12,i11,i13);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i5,i8,i6,i7,i7,i6,i8,i5);
elseif ($bestiso == 3); Multiply replace_(i5,i6,i6,i5,i7,i8,i8,i7);
elseif ($bestiso == 5); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 6); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 7); Multiply replace_(i3,i4,i4,i3,i5,i7,i6,i8,i7,i5,i8,i6,i10,i12,i11,i13,i12,i10,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd283 automorphism;

#call CheckRemovedPropagators(d283,8,3,2,3,4,1,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d283;
#endif
#endprocedure

#procedure Reduced283()
	#call Prepared283()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd283'
		#call MtoZ(Md283,Zd283,i,14)
		#call Reduce(d283)
		#call ZtoM(Zd283,Md283,i,14)
		#call Prepared283()
#else
		#if `USETURBO'
			#call TurboMd283()
		#endif
		#call insertionS(Md283,i5,i6,i12,i13,i14,i5,`Q2',i1,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md283b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond283()
#endif
	#endif
#endprocedure
*--#] reduce-d283 : 
*--#[ reduce-d282 :
#procedure Insertiond282()
* merge propagators with same momentum, and repeated dots
	if (count(Md282b,1)) Multiply replace_(Md282b,Md282c,i14,i8,i16,i9,i15,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md282c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j2/2-j3/2-j8-j9,j,j2,j3,j8,j9,Md282c,dotmapMd282cR1)
	#call replace(i11,-j1/2-j5/2+j7/2,j,j1,j5,j7,Md282c,dotmapMd282cR2)
	#call replace(i12,-`Q2'/2-j1/2+j2/2-j3/2+j4/2-j6/2+j7/2-j8-j9,j,j1,j2,j3,j4,j6,j7,j8,j9,Md282c,dotmapMd282cR3)
	#call replace(i13,j4/2-j5/2-j6/2,j,j4,j5,j6,Md282c,dotmapMd282cR4)
	#call replace(i14,`Q2'/2+j2/2-j3/2,j,j2,j3,Md282c,dotmapMd282cR5)
	#call replace(i15,j1/2+j3/2-j4/2+j8,j,j1,j3,j4,j8,Md282c,dotmapMd282cR6)
	#call replace(i16,j3/2-j4/2+j5/2-j7/2,j,j3,j4,j5,j7,Md282c,dotmapMd282cR7)
	#call replace(i17,j3/2+j6/2-j7/2+j9,j,j3,j6,j7,j9,Md282c,dotmapMd282cR8)
	if (count(Md282c,1)) Multiply replace_(Md282c,Md282d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5 and change topology to d147
	if (count(Md282d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-`Q2'/2+j2/2-j3/2-j8-j9,j,j2,j3,j8,j9,Md282d,dotmapMd282dR1)
	if (count(Md282d,1)) Multiply replace_(Md282d,Md147,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd147 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared282()
* Topology: 0-1 4-6 1-4 1-5 2-4 2-6 2-5 5-6 2-6 4-9
* Dots: p0.p1,p0.p6,p0.p5,p1.p5,p2.p5,p5.p6
* Apply automorphisms
if (match(Md282*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n6,$n7,$n8,$n1,$n3,$n2,$n4)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n9+$n10+$n11+$n13)*replace_(i1,i4,i4,i1,i5,i8,i6,i7,i7,i6,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n11+$n13)*replace_(i1,i4,i4,i1,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd282 automorphism;

#call CheckRemovedPropagators(d282,8,5,1,3,4,6,7,2,5,8)
#if `$DOACTION' == 0
.sort:reduce d282;
#endif
#endprocedure

#procedure Reduced282()
	#call Prepared282()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd282'
		#call MtoZ(Md282,Zd282,i,14)
		#call Reduce(d282)
		#call ZtoM(Zd282,Md282,i,14)
		#call Prepared282()
#else
		#if `USETURBO'
			#call TurboMd282()
		#endif
		#call insertionS(Md282,i5,i8,i11,i12,i13,i14,i5,`Q2',i1,i2,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md282b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond282()
#endif
	#endif
#endprocedure
*--#] reduce-d282 : 
*--#[ reduce-d281 :
#procedure Insertiond281()
* merge propagators with same momentum, and repeated dots
	if (count(Md281b,1)) Multiply replace_(Md281b,Md281c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md281c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1+j7+j9,j,j1,j7,j9,Md281c,dotmapMd281cR1)
	#call replace(i11,`Q2'/2-j1/2+j2/2-j4/2-j9,j,j1,j2,j4,j9,Md281c,dotmapMd281cR2)
	#call replace(i12,-j2/2+j4/2-j5/2+j6/2+j8,j,j2,j4,j5,j6,j8,Md281c,dotmapMd281cR3)
	#call replace(i13,-j2/2-j3/2+j6/2,j,j2,j3,j6,Md281c,dotmapMd281cR4)
	if (count(Md281c,1)) Multiply replace_(Md281c,Md281d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d60
	if (count(Md281d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j5,i5,j2,i6,j6);
	#call replace(i7,`Q2'/2-j1/2-j4/2+j5/2-j7-j8,j,j1,j4,j5,j7,j8,Md281d,dotmapMd281dR1)
	#call replace(i8,j2/2+j4/2-j5/2-j6/2+j8,j,j2,j4,j5,j6,j8,Md281d,dotmapMd281dR2)
	#call replace(i9,`Q2'/2-j1/2+j4/2-j5/2-j9,j,j1,j4,j5,j9,Md281d,dotmapMd281dR3)
	if (count(Md281d,1)) Multiply replace_(Md281d,Md60,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd60 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared281()
* Topology: 0-1 2-7 1-2 1-7 3-7 3-4 4-7 2-4 2-3 7-9
* Dots: p1.p4,p1.p5,p1.p6,p0.p1,p0.p4,p0.p5
* Apply automorphisms
if (match(Md281*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n9,$n10,$n11,$n7,$n8,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n10+$n14)*replace_(i4,i6,i6,i4,i7,i8,i8,i7,i9,i11,i11,i9);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd281 automorphism;

#call CheckRemovedPropagators(d281,8,6,2,4,5,6,7,8,1,3)
#if `$DOACTION' == 0
.sort:reduce d281;
#endif
#endprocedure

#procedure Reduced281()
	#call Prepared281()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd281'
		#call MtoZ(Md281,Zd281,i,14)
		#call Reduce(d281)
		#call ZtoM(Zd281,Md281,i,14)
		#call Prepared281()
#else
		#if `USETURBO'
			#call TurboMd281()
		#endif
		#call MtoZ(Md281,Zd281,i,14)
		#call carpet(Zd281,2,3,0,0,0,3,12,1,4,5)
		#call ZtoM(Zd281b,Md281b,i,16)
		#call Insertiond281()
#endif
	#endif
#endprocedure
*--#] reduce-d281 : 
*--#[ reduce-d280 :
#procedure Insertiond280()
* merge propagators with same momentum, and repeated dots
	if (count(Md280b,1)) Multiply replace_(Md280b,Md280c,i15,i8,i16,i9,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md280c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md280c,dotmapMd280cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2+j3/2-j8,j,j1,j2,j3,j8,Md280c,dotmapMd280cR2)
	#call replace(i12,-j2/2-j3/2+j5/2,j,j2,j3,j5,Md280c,dotmapMd280cR3)
	#call replace(i13,-j3/2+j5/2-j6/2+j7/2,j,j3,j5,j6,j7,Md280c,dotmapMd280cR4)
	#call replace(i14,`Q2'/2+j1/2-j5/2,j,j1,j5,Md280c,dotmapMd280cR5)
	#call replace(i15,j2/2-j3/2-j5/2+j8,j,j2,j3,j5,j8,Md280c,dotmapMd280cR6)
	#call replace(i16,-j4/2-j5/2+j6/2+j9,j,j4,j5,j6,j9,Md280c,dotmapMd280cR7)
	#call replace(i17,j3/2+j4/2-j7/2,j,j3,j4,j7,Md280c,dotmapMd280cR8)
	if (count(Md280c,1)) Multiply replace_(Md280c,Md280d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4 and change topology to d140
	if (count(Md280d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j9);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md280d,dotmapMd280dR1)
	if (count(Md280d,1)) Multiply replace_(Md280d,Md140,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd140 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared280()
* Topology: 0-1 1-8 1-2 1-2 1-3 3-4 4-8 2-4 2-3 8-9
* Dots: p0.p4,p0.p5,p0.p2,p1.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md280*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd280 automorphism;

#call CheckRemovedPropagators(d280,8,5,4,5,6,7,8,1,2,3)
#if `$DOACTION' == 0
.sort:reduce d280;
#endif
#endprocedure

#procedure Reduced280()
	#call Prepared280()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd280'
		#call MtoZ(Md280,Zd280,i,14)
		#call Reduce(d280)
		#call ZtoM(Zd280,Md280,i,14)
		#call Prepared280()
#else
		#if `USETURBO'
			#call TurboMd280()
		#endif
		#call insertionS(Md280,i2,i3,i11,i12,i13,i14,i2,`Q2',i1,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md280b,1)) Multiply replace_(<i4,i3>,...,<i20,i19>);
		#call Insertiond280()
#endif
	#endif
#endprocedure
*--#] reduce-d280 : 
*--#[ reduce-d279 :
#procedure Insertiond279()
* merge propagators with same momentum, and repeated dots
	if (count(Md279b,1)) Multiply replace_(Md279b,Md279c,i6,i5,i5,i6,i7,i6,i8,i7,i15,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13,i16,i14);

* rewrite insertion dots
	if (count(Md279c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j7-j8,j,j7,j8,Md279c,dotmapMd279cR1)
	#call replace(i11,j2/2+j3/2-j4/2-j7-j9,j,j2,j3,j4,j7,j9,Md279c,dotmapMd279cR2)
	#call replace(i12,-j3/2+j5/2-j6/2,j,j3,j5,j6,Md279c,dotmapMd279cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md279c,dotmapMd279cR4)
	#call replace(i14,-j2/2-j3/2+j4/2+j7,j,j2,j3,j4,j7,Md279c,dotmapMd279cR5)
	if (count(Md279c,1)) Multiply replace_(Md279c,Md279d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5,p1.p5 and change topology to d61
	if (count(Md279d,1)) Multiply replace_(i1,j2,i2,j3,i3,j4,i4,j1,i5,j6,i6,j5);
	#call replace(i7,`Q2'/2-j2/2+j3/2-j7,j,j2,j3,j7,Md279d,dotmapMd279dR1)
	#call replace(i8,-`Q2'/2+j2/2-j3/2+j7-j8,j,j2,j3,j7,j8,Md279d,dotmapMd279dR2)
	#call replace(i9,-`Q2'/2-j1/2+j2/2-j5/2+j6/2+j7-j8+j9,j,j1,j2,j5,j6,j7,j8,j9,Md279d,dotmapMd279dR3)
	if (count(Md279d,1)) Multiply replace_(Md279d,Md61,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd61 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared279()
* Topology: 0-1 1-8 2-8 1-5 1-2 2-6 2-5 5-6 2-6 8-9
* Dots: p0.p3,p0.p6,p1.p6,p0.p5,p1.p5,p3.p5
* Apply automorphisms
if (match(Md279*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd279 automorphism;

#call CheckRemovedPropagators(d279,8,3,2,3,7,1,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d279;
#endif
#endprocedure

#procedure Reduced279()
	#call Prepared279()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd279'
		#call MtoZ(Md279,Zd279,i,14)
		#call Reduce(d279)
		#call ZtoM(Zd279,Md279,i,14)
		#call Prepared279()
#else
		#if `USETURBO'
			#call TurboMd279()
		#endif
		#call insertionS(Md279,i5,i8,i12,i13,i14,i5,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md279b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond279()
#endif
	#endif
#endprocedure
*--#] reduce-d279 : 
*--#[ reduce-d278 :
#procedure Insertiond278()
* merge propagators with same momentum, and repeated dots
	if (count(Md278b,1)) Multiply replace_(Md278b,Md278c,i15,i8,i16,i9,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md278c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2-j8-j9,j,j1,j2,j8,j9,Md278c,dotmapMd278cR1)
	#call replace(i11,`Q2'/2-j1/2-j5/2+j7/2-j8-j9,j,j1,j5,j7,j8,j9,Md278c,dotmapMd278cR2)
	#call replace(i12,j2/2-j4/2+j6/2-j7/2,j,j2,j4,j6,j7,Md278c,dotmapMd278cR3)
	#call replace(i13,j4/2-j5/2-j6/2,j,j4,j5,j6,Md278c,dotmapMd278cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md278c,dotmapMd278cR5)
	#call replace(i15,-j2/2-j3/2+j4/2+j8,j,j2,j3,j4,j8,Md278c,dotmapMd278cR6)
	#call replace(i16,j3/2-j4/2+j5/2-j7/2+j9,j,j3,j4,j5,j7,j9,Md278c,dotmapMd278cR7)
	#call replace(i17,-j3/2-j6/2+j7/2,j,j3,j6,j7,Md278c,dotmapMd278cR8)
	if (count(Md278c,1)) Multiply replace_(Md278c,Md278d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p5 and change topology to d134
	if (count(Md278d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,`Q2'/2-j1/2+j2/2-j8-j9,j,j1,j2,j8,j9,Md278d,dotmapMd278dR1)
	if (count(Md278d,1)) Multiply replace_(Md278d,Md134,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd134 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared278()
* Topology: 0-1 1-8 6-8 1-5 1-2 2-6 2-5 5-6 2-6 8-9
* Dots: p0.p3,p0.p6,p0.p5,p1.p5,p3.p5,p5.p6
* Apply automorphisms
if (match(Md278*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd278 automorphism;

#call CheckRemovedPropagators(d278,8,5,2,3,4,6,7,1,5,8)
#if `$DOACTION' == 0
.sort:reduce d278;
#endif
#endprocedure

#procedure Reduced278()
	#call Prepared278()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd278'
		#call MtoZ(Md278,Zd278,i,14)
		#call Reduce(d278)
		#call ZtoM(Zd278,Md278,i,14)
		#call Prepared278()
#else
		#if `USETURBO'
			#call TurboMd278()
		#endif
		#call insertionS(Md278,i5,i8,i11,i12,i13,i14,i5,`Q2',i1,i3,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md278b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond278()
#endif
	#endif
#endprocedure
*--#] reduce-d278 : 
*--#[ reduce-d277 :
#procedure Insertiond277()
* merge propagators with same momentum, and repeated dots
	if (count(Md277b,1)) Multiply replace_(Md277b,Md277c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i15,i8,i10,i9,i12,i9,i13,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md277c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j3/2+j4/2-j5/2,j,j3,j4,j5,Md277c,dotmapMd277cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2,j,j1,j2,Md277c,dotmapMd277cR2)
	#call replace(i12,j1/2+j4/2-j6/2,j,j1,j4,j6,Md277c,dotmapMd277cR3)
	if (count(Md277c,1)) Multiply replace_(Md277c,Md277d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5,p1.p5 and change topology to d61
	if (count(Md277d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j4,i5,j6,i6,j1,i7,j8);
	#call replace(i8,`Q2'/2-j2/2+j3/2-j7,j,j2,j3,j7,Md277d,dotmapMd277dR1)
	#call replace(i9,j4/2+j5/2-j6/2+j9,j,j4,j5,j6,j9,Md277d,dotmapMd277dR2)
	if (count(Md277d,1)) Multiply replace_(Md277d,Md61,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd61 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared277()
* Topology: 0-1 1-2 1-7 2-3 3-4 3-4 4-7 2-4 2-7 7-9
* Dots: p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p4.p6
* Apply automorphisms
if (match(Md277*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd277 automorphism;

#call CheckRemovedPropagators(d277,8,3,1,3,6,2,4,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d277;
#endif
#endprocedure

#procedure Reduced277()
	#call Prepared277()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd277'
		#call MtoZ(Md277,Zd277,i,14)
		#call Reduce(d277)
		#call ZtoM(Zd277,Md277,i,14)
		#call Prepared277()
#else
		#if `USETURBO'
			#call TurboMd277()
		#endif
		#call insertionS(Md277,i4,i5,i12,i13,i14,i4,`Q2',i1,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md277b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond277()
#endif
	#endif
#endprocedure
*--#] reduce-d277 : 
*--#[ reduce-d276 :
#procedure Insertiond276()
* merge propagators with same momentum, and repeated dots
	if (count(Md276b,1)) Multiply replace_(Md276b,Md276c,i16,i8,i19,i9,i17,i16,i18,i17);

* rewrite insertion dots
	if (count(Md276c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2-j8,j,j1,j2,j8,Md276c,dotmapMd276cR1)
	#call replace(i11,`Q2'/2-j1/2-j6/2+j7/2-j8,j,j1,j6,j7,j8,Md276c,dotmapMd276cR2)
	#call replace(i12,`Q2'/2-j1/2-j4/2+j5/2-j9,j,j1,j4,j5,j9,Md276c,dotmapMd276cR3)
	#call replace(i13,j2/2-j6/2-j7/2,j,j2,j6,j7,Md276c,dotmapMd276cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md276c,dotmapMd276cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md276c,dotmapMd276cR6)
	#call replace(i16,j1/2+j3/2-j5/2,j,j1,j3,j5,Md276c,dotmapMd276cR7)
	#call replace(i17,-j2/2+j6/2-j7/2+j8,j,j2,j6,j7,j8,Md276c,dotmapMd276cR8)
	if (count(Md276c,1)) Multiply replace_(Md276c,Md276d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p6,p3.p6 and change topology to d133
	if (count(Md276d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,`Q2'/2-j1/2+j2/2-j8,j,j1,j2,j8,Md276d,dotmapMd276dR1)
	#call replace(i9,`Q2'/2-j1/2-j4/2+j5/2-j9,j,j1,j4,j5,j9,Md276d,dotmapMd276dR2)
	if (count(Md276d,1)) Multiply replace_(Md276d,Md133,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd133 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared276()
* Topology: 0-1 4-8 6-8 1-4 1-2 2-4 2-6 2-6 2-6 8-9
* Dots: p0.p8,p3.p8,p0.p6,p1.p6,p3.p6,p6.p8
* Apply automorphisms
if (match(Md276*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,5
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n13,$n11,$n6,$n8,$n7,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n10,$n12,$n9,$n10,$n9,$n7,$n6,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n10,$n12,$n9,$n13,$n11,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i6,i7,i7,i8,i8,i6,i9,i11,i10,i13);
elseif ($bestiso == 1); Multiply replace_(i6,i8,i7,i6,i8,i7,i11,i9,i13,i10);
elseif ($bestiso == 3); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 4); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 5); Multiply replace_(i6,i8,i8,i6,i9,i11,i10,i13,i11,i9,i13,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd276 automorphism;

#call CheckRemovedPropagators(d276,8,5,1,2,3,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d276;
#endif
#endprocedure

#procedure Reduced276()
	#call Prepared276()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd276'
		#call MtoZ(Md276,Zd276,i,14)
		#call Reduce(d276)
		#call ZtoM(Zd276,Md276,i,14)
		#call Prepared276()
#else
		#if `USETURBO'
			#call TurboMd276()
		#endif
		#call insertionS(Md276,i6,i7,i11,i12,i13,i14,i6,`Q2',i1,i3,i8,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md276b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond276()
#endif
	#endif
#endprocedure
*--#] reduce-d276 : 
*--#[ reduce-d275 :
#procedure Insertiond275()
* merge propagators with same momentum, and repeated dots
	if (count(Md275b,1)) Multiply replace_(Md275b,Md275c,i3,i2,i4,i3,i5,i4,i6,i5,i2,i6,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md275c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j4/2+j6/2,j,j4,j6,Md275c,dotmapMd275cR1)
	#call replace(i11,-j1/2-j4/2+j5/2+j7,j,j1,j4,j5,j7,Md275c,dotmapMd275cR2)
	#call replace(i12,j2/2-j3/2+j5/2+j8-j9,j,j2,j3,j5,j8,j9,Md275c,dotmapMd275cR3)
	if (count(Md275c,1)) Multiply replace_(Md275c,Md275d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d62
	if (count(Md275d,1)) Multiply replace_(i1,j2,i2,j3,i3,j4,i4,j6,i5,j5,i6,j1,i7,j7,i8,j8);
	#call replace(i9,j3/2-j4/2+j5/2+j8-j9,j,j3,j4,j5,j8,j9,Md275d,dotmapMd275dR1)
	if (count(Md275d,1)) Multiply replace_(Md275d,Md62,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd62 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared275()
* Topology: 0-1 1-3 1-7 3-5 3-5 3-8 1-5 1-7 7-8 8-9
* Dots: p0.p1,p0.p3,p1.p3,p0.p2,p1.p2,p2.p3
* Apply automorphisms
if (match(Md275*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n3,$n4,$n7,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i7,i3,i4,i4,i3,i7,i2);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i2,i7,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd275 automorphism;

#call CheckRemovedPropagators(d275,8,3,5,6,8,1,2,3,4,7)
#if `$DOACTION' == 0
.sort:reduce d275;
#endif
#endprocedure

#procedure Reduced275()
	#call Prepared275()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd275'
		#call MtoZ(Md275,Zd275,i,14)
		#call Reduce(d275)
		#call ZtoM(Zd275,Md275,i,14)
		#call Prepared275()
#else
		#if `USETURBO'
			#call TurboMd275()
		#endif
		#call insertionS(Md275,i2,i7,i12,i13,i14,i2,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md275b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond275()
#endif
	#endif
#endprocedure
*--#] reduce-d275 : 
*--#[ reduce-d274 :
#procedure Insertiond274()
* merge propagators with same momentum, and repeated dots
	if (count(Md274b,1)) Multiply replace_(Md274b,Md274c,i4,i3,i5,i4,i3,i5,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md274c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j7+j8,j,j7,j8,Md274c,dotmapMd274cR1)
	#call replace(i11,j1/2+j5/2-j6/2,j,j1,j5,j6,Md274c,dotmapMd274cR2)
	#call replace(i12,j3/2-j4/2+j5/2,j,j3,j4,j5,Md274c,dotmapMd274cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md274c,dotmapMd274cR4)
	if (count(Md274c,1)) Multiply replace_(Md274c,Md274d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5,p1.p5 and change topology to d63
	if (count(Md274d,1)) Multiply replace_(i1,j2,i2,j3,i3,j5,i4,j6,i5,j4,i6,j1,i7,j8);
	#call replace(i8,`Q2'/2+j2/2-j3/2-j7-j8,j,j2,j3,j7,j8,Md274d,dotmapMd274dR1)
	#call replace(i9,j4/2+j5/2-j6/2+j9,j,j4,j5,j6,j9,Md274d,dotmapMd274dR2)
	if (count(Md274d,1)) Multiply replace_(Md274d,Md63,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd63 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared274()
* Topology: 0-1 1-2 1-7 2-3 3-4 3-4 4-7 2-3 2-7 7-9
* Dots: p0.p4,p0.p5,p1.p4,p0.p3,p1.p3,p3.p4
* Apply automorphisms
if (match(Md274*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n3,$n6,$n4,$n5,$n7,$n2,$n1)
endif;
if (($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i7,i4,i5,i5,i4,i7,i3,i9,i10,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i9,i10,i10,i9);
elseif ($bestiso == 3); Multiply replace_(i3,i7,i7,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd274 automorphism;

#call CheckRemovedPropagators(d274,8,2,1,6,2,3,4,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d274;
#endif
#endprocedure

#procedure Reduced274()
	#call Prepared274()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd274'
		#call MtoZ(Md274,Zd274,i,14)
		#call Reduce(d274)
		#call ZtoM(Zd274,Md274,i,14)
		#call Prepared274()
#else
		#if `USETURBO'
			#call TurboMd274()
		#endif
		#call insertionS(Md274,i3,i7,i12,i13,i14,i3,`Q2',i1,i4,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md274b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond274()
#endif
	#endif
#endprocedure
*--#] reduce-d274 : 
*--#[ reduce-d273 :
#procedure Insertiond273()
* merge propagators with same momentum, and repeated dots
	if (count(Md273b,1)) Multiply replace_(Md273b,Md273c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md273c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j6/2,j,j4,j6,Md273c,dotmapMd273cR1)
	#call replace(i11,-j1/2+j5/2-j6/2+j7,j,j1,j5,j6,j7,Md273c,dotmapMd273cR2)
	#call replace(i12,j2/2-j3/2+j4/2,j,j2,j3,j4,Md273c,dotmapMd273cR3)
	if (count(Md273c,1)) Multiply replace_(Md273c,Md273d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p2,p2.p3 and change topology to d64
	if (count(Md273d,1)) Multiply replace_(i1,j2,i2,j3,i3,j6,i4,j4,i5,j5,i6,j1,i7,j8,i8,j7,i9,j9);
	if (count(Md273d,1)) Multiply replace_(Md273d,Md64,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd64 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared273()
* Topology: 0-1 1-3 1-7 3-4 3-4 4-8 1-3 1-7 7-8 8-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md273*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n1,$n5,$n3,$n4,$n7,$n6)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n3,$n4,$n7,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n1,$n5,$n4,$n3,$n7,$n6)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i6,i1,i7,i2);
elseif ($bestiso == 1); Multiply replace_(i2,i7,i3,i4,i4,i3,i7,i2);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i6,i2,i7,i6,i1,i7,i2);
elseif ($bestiso == 7); Multiply replace_(i2,i7,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd273 automorphism;

#call CheckRemovedPropagators(d273,8,2,5,8,1,2,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d273;
#endif
#endprocedure

#procedure Reduced273()
	#call Prepared273()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd273'
		#call MtoZ(Md273,Zd273,i,14)
		#call Reduce(d273)
		#call ZtoM(Zd273,Md273,i,14)
		#call Prepared273()
#else
		#if `USETURBO'
			#call TurboMd273()
		#endif
		#call insertionS(Md273,i1,i6,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md273b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond273()
#endif
	#endif
#endprocedure
*--#] reduce-d273 : 
*--#[ reduce-d272 :
#procedure Insertiond272()
* merge propagators with same momentum, and repeated dots
	if (count(Md272b,1)) Multiply replace_(Md272b,Md272c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,-i7,i11,i7,i9,i8,i15,i8,i10,-i9,i13,i9,i12,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md272c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j2/2+j3/2-j4/2+j7,j,j2,j3,j4,j7,Md272c,dotmapMd272cR1)
	#call replace(i11,`Q2'/2+j1/2-j2/2,j,j1,j2,Md272c,dotmapMd272cR2)
	#call replace(i12,j2/2+j5/2-j6/2+j8,j,j2,j5,j6,j8,Md272c,dotmapMd272cR3)
	if (count(Md272c,1)) Multiply replace_(Md272c,Md272d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d65
	if (count(Md272d,1)) Multiply replace_(i1,j1,i2,j5,i3,j3,i4,j2,i5,j4,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md272d,1)) Multiply replace_(Md272d,Md65,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd65 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared272()
* Topology: 0-1 4-7 1-4 1-5 2-4 2-7 2-7 2-5 2-5 4-9
* Dots: p0.p1,p0.p7,p1.p7,p0.p5,p2.p5,p5.p7
* Apply automorphisms
if (match(Md272*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i6,i6,i5,i7,i8,i8,i7);
elseif ($bestiso == 2); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 3); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd272 automorphism;

#call CheckRemovedPropagators(d272,8,2,1,3,2,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d272;
#endif
#endprocedure

#procedure Reduced272()
	#call Prepared272()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd272'
		#call MtoZ(Md272,Zd272,i,14)
		#call Reduce(d272)
		#call ZtoM(Zd272,Md272,i,14)
		#call Prepared272()
#else
		#if `USETURBO'
			#call TurboMd272()
		#endif
		#call insertionS(Md272,i5,i6,i12,i13,i14,i5,`Q2',i2,i7,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md272b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond272()
#endif
	#endif
#endprocedure
*--#] reduce-d272 : 
*--#[ reduce-d271 :
#procedure Insertiond271()
* merge propagators with same momentum, and repeated dots
	if (count(Md271b,1)) Multiply replace_(Md271b,Md271c,i16,i8,i19,i9,i17,i16,i18,i17);

* rewrite insertion dots
	if (count(Md271c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j3/2-j4/2-j6/2,j,j1,j3,j4,j6,Md271c,dotmapMd271cR1)
	#call replace(i11,j1/2+j2/2-j4/2,j,j1,j2,j4,Md271c,dotmapMd271cR2)
	#call replace(i12,j2/2+j3/2-j6/2,j,j2,j3,j6,Md271c,dotmapMd271cR3)
	#call replace(i13,-j5/2-j6/2+j7/2+j9,j,j5,j6,j7,j9,Md271c,dotmapMd271cR4)
	#call replace(i14,`Q2'/2+j1/2-j6/2,j,j1,j6,Md271c,dotmapMd271cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md271c,dotmapMd271cR6)
	#call replace(i16,`Q2'/2+j2/2-j4/2-j6/2,j,j2,j4,j6,Md271c,dotmapMd271cR7)
	#call replace(i17,-j5/2-j6/2+j7/2+j8,j,j5,j6,j7,j8,Md271c,dotmapMd271cR8)
	if (count(Md271c,1)) Multiply replace_(Md271c,Md271d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p2.p5 and change topology to d175
	if (count(Md271d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j5/2+j6/2-j7/2+j9,j,j5,j6,j7,j9,Md271d,dotmapMd271dR1)
	if (count(Md271d,1)) Multiply replace_(Md271d,Md175,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd175 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared271()
* Topology: 0-1 7-8 2-7 1-2 1-7 2-7 2-4 4-8 2-4 8-9
* Dots: p0.p6,p3.p6,p0.p2,p1.p2,p2.p3,p2.p6
* Apply automorphisms
if (match(Md271*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n2,$n4,$n3,$n5,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i5,i2,i6,i8,i8,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i8,i8,i6);
elseif ($bestiso == 3); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd271 automorphism;

#call CheckRemovedPropagators(d271,8,4,1,3,4,7,2,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d271;
#endif
#endprocedure

#procedure Reduced271()
	#call Prepared271()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd271'
		#call MtoZ(Md271,Zd271,i,14)
		#call Reduce(d271)
		#call ZtoM(Zd271,Md271,i,14)
		#call Prepared271()
#else
		#if `USETURBO'
			#call TurboMd271()
		#endif
		#call insertionS(Md271,i2,i5,i11,i12,i13,i14,i2,`Q2',i1,i3,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md271b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond271()
#endif
	#endif
#endprocedure
*--#] reduce-d271 : 
*--#[ reduce-d270 :
#procedure Insertiond270()
* merge propagators with same momentum, and repeated dots
	if (count(Md270b,1)) Multiply replace_(Md270b,Md270c,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i16,i8,i10,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md270c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j3/2-j4/2-j6/2-j7,j,j1,j3,j4,j6,j7,Md270c,dotmapMd270cR1)
	#call replace(i11,-`Q2'/2+j1/2+j6/2-j8+j9,j,j1,j6,j8,j9,Md270c,dotmapMd270cR2)
	#call replace(i12,-`Q2'/2-j2/2+j4/2-j5/2+j6/2+j9,j,j2,j4,j5,j6,j9,Md270c,dotmapMd270cR3)
	#call replace(i13,`Q2'/2+j1/2-j6/2,j,j1,j6,Md270c,dotmapMd270cR4)
	if (count(Md270c,1)) Multiply replace_(Md270c,Md270d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d66
	if (count(Md270d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,`Q2'/2-j2/2-j4/2+j5/2-j6/2-j7+j8+j9,j,j2,j4,j5,j6,j7,j8,j9,Md270d,dotmapMd270dR1)
	if (count(Md270d,1)) Multiply replace_(Md270d,Md66,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd66 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared270()
* Topology: 0-1 7-8 2-7 1-2 1-7 3-7 2-3 2-8 2-3 8-9
* Dots: p0.p2,p1.p2,p1.p3,p0.p6,p1.p6,p2.p6
* Apply automorphisms
if (match(Md270*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n3,$n8,$n5,$n1,$n7,$n2,$n4)
endif;
if (($n10==0)&&($n11==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n1,$n7,$n2,$n4)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n9+$n10+$n12+$n13)*replace_(i1,i4,i3,i7,i4,i1,i6,i8,i7,i3,i8,i6);
elseif ($bestiso == 2); Multiply sign_($n9+$n10+$n12+$n13)*replace_(i1,i4,i3,i7,i4,i1,i7,i3);
elseif ($bestiso == 3); Multiply replace_(i6,i8,i8,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd270 automorphism;

#call CheckRemovedPropagators(d270,8,5,1,3,4,5,7,2,6,8)
#if `$DOACTION' == 0
.sort:reduce d270;
#endif
#endprocedure

#procedure Reduced270()
	#call Prepared270()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd270'
		#call MtoZ(Md270,Zd270,i,14)
		#call Reduce(d270)
		#call ZtoM(Zd270,Md270,i,14)
		#call Prepared270()
#else
		#if `USETURBO'
			#call TurboMd270()
		#endif
		#call insertionS(Md270,i6,i8,i12,i13,i14,i6,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md270b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond270()
#endif
	#endif
#endprocedure
*--#] reduce-d270 : 
*--#[ reduce-d269 :
#procedure Insertiond269()
* merge propagators with same momentum, and repeated dots
	if (count(Md269b,1)) Multiply replace_(Md269b,Md269c,i5,i1,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md269c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md269c,dotmapMd269cR1)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md269c,dotmapMd269cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md269c,dotmapMd269cR3)
	if (count(Md269c,1)) Multiply replace_(Md269c,Md269d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d67
	if (count(Md269d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j5,i5,j3,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md269d,1)) Multiply replace_(Md269d,Md67,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd67 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared269()
* Topology: 0-1 1-2 2-3 3-4 3-4 4-8 2-3 1-2 1-8 8-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md269*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n2,$n5,$n3,$n4,$n6,$n7)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n2,$n5,$n4,$n3,$n6,$n7)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i2,i6,i3,i4,i4,i3,i6,i2,i7,i1);
elseif ($bestiso == 1); Multiply replace_(i2,i6,i3,i4,i4,i3,i6,i2);
elseif ($bestiso == 2); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i1,i7,i7,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i7,i2,i6,i6,i2,i7,i1);
elseif ($bestiso == 7); Multiply replace_(i2,i6,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd269 automorphism;

#call CheckRemovedPropagators(d269,8,1,5,1,2,3,4,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d269;
#endif
#endprocedure

#procedure Reduced269()
	#call Prepared269()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd269'
		#call MtoZ(Md269,Zd269,i,14)
		#call Reduce(d269)
		#call ZtoM(Zd269,Md269,i,14)
		#call Prepared269()
#else
		#if `USETURBO'
			#call TurboMd269()
		#endif
		#call insertionS(Md269,i1,i7,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md269b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond269()
#endif
	#endif
#endprocedure
*--#] reduce-d269 : 
*--#[ reduce-d268 :
#procedure Insertiond268()
* merge propagators with same momentum, and repeated dots
	if (count(Md268b,1)) Multiply replace_(Md268b,Md268c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i13,i9,i11,i10,i12,i11,i16,i12);

* rewrite insertion dots
	if (count(Md268c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j6/2,j,j4,j6,Md268c,dotmapMd268cR1)
	#call replace(i11,j1/2+j4/2-j5/2,j,j1,j4,j5,Md268c,dotmapMd268cR2)
	#call replace(i12,j1/2+j2/2-j3/2,j,j1,j2,j3,Md268c,dotmapMd268cR3)
	if (count(Md268c,1)) Multiply replace_(Md268c,Md268d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d68
	if (count(Md268d,1)) Multiply replace_(i1,j5,i2,j3,i3,j4,i4,j1,i5,j2,i6,j6,i8,j8,i9,j9);
	#call replace(i7,`Q2'/2+j1/2-j6/2-j7,j,j1,j6,j7,Md268d,dotmapMd268dR1)
	if (count(Md268d,1)) Multiply replace_(Md268d,Md68,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd68 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared268()
* Topology: 0-1 1-2 2-3 3-4 3-4 4-8 2-4 1-2 1-8 8-9
* Dots: p0.p2,p0.p3,p3.p5,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md268*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd268 automorphism;

#call CheckRemovedPropagators(d268,8,2,2,5,1,3,4,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d268;
#endif
#endprocedure

#procedure Reduced268()
	#call Prepared268()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd268'
		#call MtoZ(Md268,Zd268,i,14)
		#call Reduce(d268)
		#call ZtoM(Zd268,Md268,i,14)
		#call Prepared268()
#else
		#if `USETURBO'
			#call TurboMd268()
		#endif
		#call insertionS(Md268,i1,i7,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md268b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond268()
#endif
	#endif
#endprocedure
*--#] reduce-d268 : 
*--#[ reduce-d267 :
#procedure Insertiond267()
* merge propagators with same momentum, and repeated dots
	if (count(Md267b,1)) Multiply replace_(Md267b,Md267c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md267c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md267c,dotmapMd267cR1)
	#call replace(i11,j7-j9,j,j7,j9,Md267c,dotmapMd267cR2)
	#call replace(i12,-j2/2-j4/2+j5/2,j,j2,j4,j5,Md267c,dotmapMd267cR3)
	#call replace(i13,-j3/2-j5/2+j6/2-j7+j9,j,j3,j5,j6,j7,j9,Md267c,dotmapMd267cR4)
	if (count(Md267c,1)) Multiply replace_(Md267c,Md267d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d69
	if (count(Md267d,1)) Multiply replace_(i1,j4,i2,j1,i3,j3,i4,j5,i5,j2,i6,j6,i7,j8);
	#call replace(i8,-`Q2'/2-j1/2+j4/2+j7,j,j1,j4,j7,Md267d,dotmapMd267dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md267d,dotmapMd267dR2)
	if (count(Md267d,1)) Multiply replace_(Md267d,Md69,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd69 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared267()
* Topology: 0-1 2-4 1-4 1-5 2-4 2-6 2-5 5-6 2-6 4-9
* Dots: p0.p5,p0.p6,p2.p5,p0.p1,p1.p5,p1.p6
* Apply automorphisms
if (match(Md267*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n1,$n3,$n2,$n4)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i4,i1,i5,i8,i8,i5);
elseif ($bestiso == 3); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd267 automorphism;

#call CheckRemovedPropagators(d267,8,2,3,7,1,2,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d267;
#endif
#endprocedure

#procedure Reduced267()
	#call Prepared267()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd267'
		#call MtoZ(Md267,Zd267,i,14)
		#call Reduce(d267)
		#call ZtoM(Zd267,Md267,i,14)
		#call Prepared267()
#else
		#if `USETURBO'
			#call TurboMd267()
		#endif
		#call insertionS(Md267,i1,i4,i12,i13,i14,i1,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md267b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond267()
#endif
	#endif
#endprocedure
*--#] reduce-d267 : 
*--#[ reduce-d266 :
#procedure Insertiond266()
* merge propagators with same momentum, and repeated dots
	if (count(Md266b,1)) Multiply replace_(Md266b,Md266c,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i9,i12,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md266c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j1/2-j4/2+j5/2,j,j1,j4,j5,Md266c,dotmapMd266cR1)
	#call replace(i11,`Q2'/2+j2/2+j4/2-j6/2-j8+j9,j,j2,j4,j6,j8,j9,Md266c,dotmapMd266cR2)
	#call replace(i12,-`Q2'/2-j1/2-j2/2+j3/2+j7+j8,j,j1,j2,j3,j7,j8,Md266c,dotmapMd266cR3)
	if (count(Md266c,1)) Multiply replace_(Md266c,Md266d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md266d,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j5,i5,j4,i6,j6,i7,j8);
	#call replace(i8,`Q2'-j7-j8,j,j7,j8,Md266d,dotmapMd266dR1)
	#call replace(i9,-j8+j9,j,j8,j9,Md266d,dotmapMd266dR2)
	if (count(Md266d,1)) Multiply replace_(Md266d,Md57,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd57 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared266()
* Topology: 0-1 1-6 1-3 1-7 3-5 3-5 5-6 6-7 3-7 3-9
* Dots: p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md266*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd266 automorphism;

#call CheckRemovedPropagators(d266,8,5,1,3,6,7,8,2,4,5)
#if `$DOACTION' == 0
.sort:reduce d266;
#endif
#endprocedure

#procedure Reduced266()
	#call Prepared266()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd266'
		#call MtoZ(Md266,Zd266,i,14)
		#call Reduce(d266)
		#call ZtoM(Zd266,Md266,i,14)
		#call Prepared266()
#else
		#if `USETURBO'
			#call TurboMd266()
		#endif
		#call insertionS(Md266,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md266b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond266()
#endif
	#endif
#endprocedure
*--#] reduce-d266 : 
*--#[ reduce-d265 :
#procedure Insertiond265()
* merge propagators with same momentum, and repeated dots
	if (count(Md265b,1)) Multiply replace_(Md265b,Md265c,i14,i8,i15,i9,i16,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md265c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j5/2-j7/2,j,j5,j7,Md265c,dotmapMd265cR1)
	#call replace(i11,j1/2+j5/2-j6/2,j,j1,j5,j6,Md265c,dotmapMd265cR2)
	#call replace(i12,j2/2-j4/2+j5/2,j,j2,j4,j5,Md265c,dotmapMd265cR3)
	#call replace(i13,j2/2-j4/2-j5/2,j,j2,j4,j5,Md265c,dotmapMd265cR4)
	#call replace(i14,-`Q2'/2-j5/2+j7/2+j9,j,j5,j7,j9,Md265c,dotmapMd265cR5)
	#call replace(i15,j1/2+j2/2-j3/2,j,j1,j2,j3,Md265c,dotmapMd265cR6)
	#call replace(i16,j2/2-j3/2-j5/2+j6/2,j,j2,j3,j5,j6,Md265c,dotmapMd265cR7)
	#call replace(i17,j2/2+j4/2-j5/2,j,j2,j4,j5,Md265c,dotmapMd265cR8)
	if (count(Md265c,1)) Multiply replace_(Md265c,Md265d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2 and change topology to d126
	if (count(Md265d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md265d,1)) Multiply replace_(Md265d,Md126,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd126 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared265()
* Topology: 0-1 1-2 2-3 2-5 3-5 3-7 3-7 1-5 1-7 7-9
* Dots: p0.p1,p0.p2,p0.p5,p1.p5,p2.p5,p4.p5
* Apply automorphisms
if (match(Md265*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n5,$n6,$n2,$n3,$n4,$n7)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n2,$n3,$n4,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n13+$n14)*replace_(i1,i7,i2,i4,i4,i2,i5,i6,i6,i5,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply sign_($n10+$n13+$n14)*replace_(i1,i7,i2,i4,i4,i2,i7,i1,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd265 automorphism;

#call CheckRemovedPropagators(d265,8,5,1,2,3,4,7,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d265;
#endif
#endprocedure

#procedure Reduced265()
	#call Prepared265()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd265'
		#call MtoZ(Md265,Zd265,i,14)
		#call Reduce(d265)
		#call ZtoM(Zd265,Md265,i,14)
		#call Prepared265()
#else
		#if `USETURBO'
			#call TurboMd265()
		#endif
		#call insertionS(Md265,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i2,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md265b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond265()
#endif
	#endif
#endprocedure
*--#] reduce-d265 : 
*--#[ reduce-d264 :
#procedure Insertiond264()
* merge propagators with same momentum, and repeated dots
	if (count(Md264b,1)) Multiply replace_(Md264b,Md264c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i14,i8,i10,i9,i12,i9,i13,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md264c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2-j4/2+j5/2-j9,j,j1,j4,j5,j9,Md264c,dotmapMd264cR1)
	#call replace(i11,-`Q2'/2-j4/2+j6/2+j7-j8,j,j4,j6,j7,j8,Md264c,dotmapMd264cR2)
	#call replace(i12,-j2/2-j3/2+j5/2,j,j2,j3,j5,Md264c,dotmapMd264cR3)
	if (count(Md264c,1)) Multiply replace_(Md264c,Md264d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p4,p1.p4 and change topology to d59
	if (count(Md264d,1)) Multiply replace_(i1,j1,i2,j4,i3,j6,i4,j2,i5,j5,i6,j3,i7,j7,i8,j8,i9,j9);
	if (count(Md264d,1)) Multiply replace_(Md264d,Md59,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd59 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared264()
* Topology: 0-1 1-2 2-3 1-2 3-5 3-5 3-8 1-5 1-8 8-9
* Dots: p0.p2,p0.p4,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md264*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n10==0)&&($n11==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd264 automorphism;

#call CheckRemovedPropagators(d264,8,3,2,6,7,1,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d264;
#endif
#endprocedure

#procedure Reduced264()
	#call Prepared264()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd264'
		#call MtoZ(Md264,Zd264,i,14)
		#call Reduce(d264)
		#call ZtoM(Zd264,Md264,i,14)
		#call Prepared264()
#else
		#if `USETURBO'
			#call TurboMd264()
		#endif
		#call insertionS(Md264,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md264b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond264()
#endif
	#endif
#endprocedure
*--#] reduce-d264 : 
*--#[ reduce-d263 :
#procedure Insertiond263()
* merge propagators with same momentum, and repeated dots
	if (count(Md263b,1)) Multiply replace_(Md263b,Md263c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md263c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md263c,dotmapMd263cR1)
	#call replace(i11,j1/2+j3/2-j6/2,j,j1,j3,j6,Md263c,dotmapMd263cR2)
	#call replace(i12,-j4/2+j5/2-j6/2+j9,j,j4,j5,j6,j9,Md263c,dotmapMd263cR3)
	#call replace(i13,j1/2-j3/2+j4/2-j5/2-j9,j,j1,j3,j4,j5,j9,Md263c,dotmapMd263cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md263c,dotmapMd263cR5)
	#call replace(i15,j1/2-j2/2-j3/2+j7/2-j8,j,j1,j2,j3,j7,j8,Md263c,dotmapMd263cR6)
	#call replace(i16,j1/2-j3/2+j6/2-j9,j,j1,j3,j6,j9,Md263c,dotmapMd263cR7)
	#call replace(i17,-j4/2-j5/2+j6/2,j,j4,j5,j6,Md263c,dotmapMd263cR8)
	if (count(Md263c,1)) Multiply replace_(Md263c,Md263d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p4 and change topology to d146
	if (count(Md263d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md263d,1)) Multiply replace_(Md263d,Md146,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd146 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared263()
* Topology: 0-1 1-2 1-6 2-7 2-5 2-5 2-7 5-6 6-7 7-9
* Dots: p0.p4,p1.p4,p0.p3,p1.p3,p3.p4,p3.p5
* Apply automorphisms
if (match(Md263*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n4,$n5,$n6,$n2,$n1)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i6,i4,i5,i5,i4,i6,i3);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd263 automorphism;

#call CheckRemovedPropagators(d263,8,4,1,2,7,8,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d263;
#endif
#endprocedure

#procedure Reduced263()
	#call Prepared263()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd263'
		#call MtoZ(Md263,Zd263,i,14)
		#call Reduce(d263)
		#call ZtoM(Zd263,Md263,i,14)
		#call Prepared263()
#else
		#if `USETURBO'
			#call TurboMd263()
		#endif
		#call insertionS(Md263,i3,i6,i11,i12,i13,i14,i3,`Q2',i1,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md263b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond263()
#endif
	#endif
#endprocedure
*--#] reduce-d263 : 
*--#[ reduce-d262 :
#procedure Insertiond262()
* merge propagators with same momentum, and repeated dots
	if (count(Md262b,1)) Multiply replace_(Md262b,Md262c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md262c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j6/2-j7,j,j4,j6,j7,Md262c,dotmapMd262cR1)
	#call replace(i11,-j1/2+j4/2-j5/2,j,j1,j4,j5,Md262c,dotmapMd262cR2)
	#call replace(i12,-j2/2+j3/2-j5/2,j,j2,j3,j5,Md262c,dotmapMd262cR3)
	if (count(Md262c,1)) Multiply replace_(Md262c,Md262d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5,p1.p5 and change topology to d63
	if (count(Md262d,1)) Multiply replace_(i1,j1,i2,j5,i3,j6,i4,j2,i5,j4,i6,j3,i7,j7,i8,j8,i9,j9);
	if (count(Md262d,1)) Multiply replace_(Md262d,Md63,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd63 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared262()
* Topology: 0-1 1-6 1-3 3-5 3-5 3-8 5-6 1-6 1-8 8-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md262*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd262 automorphism;

#call CheckRemovedPropagators(d262,8,2,5,6,1,2,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d262;
#endif
#endprocedure

#procedure Reduced262()
	#call Prepared262()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd262'
		#call MtoZ(Md262,Zd262,i,14)
		#call Reduce(d262)
		#call ZtoM(Zd262,Md262,i,14)
		#call Prepared262()
#else
		#if `USETURBO'
			#call TurboMd262()
		#endif
		#call insertionS(Md262,i1,i7,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md262b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond262()
#endif
	#endif
#endprocedure
*--#] reduce-d262 : 
*--#[ reduce-d261 :
#procedure Insertiond261()
* merge propagators with same momentum, and repeated dots
	if (count(Md261b,1)) Multiply replace_(Md261b,Md261c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i15,i13);

* rewrite insertion dots
	if (count(Md261c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md261c,dotmapMd261cR1)
	#call replace(i11,-j2/2-j4/2+j5/2,j,j2,j4,j5,Md261c,dotmapMd261cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2-j8,j,j3,j6,j8,Md261c,dotmapMd261cR3)
	#call replace(i13,`Q2'/2+j3/2-j6/2,j,j3,j6,Md261c,dotmapMd261cR4)
	if (count(Md261c,1)) Multiply replace_(Md261c,Md261d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2,p2.p3 and change topology to d70
	if (count(Md261d,1)) Multiply replace_(i1,j5,i2,j2,i3,j3,i4,j1,i5,j6,i6,j4,i7,j8,i9,j9);
	#call replace(i8,`Q2'/2+j3/2-j4/2-j7,j,j3,j4,j7,Md261d,dotmapMd261dR1)
	if (count(Md261d,1)) Multiply replace_(Md261d,Md70,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd70 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared261()
* Topology: 0-1 1-5 1-3 1-5 3-6 3-8 5-6 3-6 3-8 8-9
* Dots: p0.p4,p2.p5,p4.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md261*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n1,$n2,$n3)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i5,i8,i8,i5);
elseif ($bestiso == 4); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i3,i3,i1,i4,i7,i7,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd261 automorphism;

#call CheckRemovedPropagators(d261,8,1,6,1,2,3,4,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d261;
#endif
#endprocedure

#procedure Reduced261()
	#call Prepared261()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd261'
		#call MtoZ(Md261,Zd261,i,14)
		#call Reduce(d261)
		#call ZtoM(Zd261,Md261,i,14)
		#call Prepared261()
#else
		#if `USETURBO'
			#call TurboMd261()
		#endif
		#call insertionS(Md261,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md261b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond261()
#endif
	#endif
#endprocedure
*--#] reduce-d261 : 
*--#[ reduce-d260 :
#procedure Insertiond260()
* merge propagators with same momentum, and repeated dots
	if (count(Md260b,1)) Multiply replace_(Md260b,Md260c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md260c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j6/2-j7,j,j4,j6,j7,Md260c,dotmapMd260cR1)
	#call replace(i11,-j1/2+j4/2-j5/2,j,j1,j4,j5,Md260c,dotmapMd260cR2)
	#call replace(i12,j2/2-j3/2+j4/2-j9,j,j2,j3,j4,j9,Md260c,dotmapMd260cR3)
	if (count(Md260c,1)) Multiply replace_(Md260c,Md260d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d65
	if (count(Md260d,1)) Multiply replace_(i1,j3,i2,j4,i3,j6,i4,j5,i5,j2,i6,j1,i8,j7);
	#call replace(i7,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md260d,dotmapMd260dR1)
	#call replace(i9,j4/2+j5/2-j6/2-j9,j,j4,j5,j6,j9,Md260d,dotmapMd260dR2)
	if (count(Md260d,1)) Multiply replace_(Md260d,Md65,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd65 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared260()
* Topology: 0-1 1-6 1-3 3-4 3-4 4-8 3-6 1-6 1-8 8-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md260*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd260 automorphism;

#call CheckRemovedPropagators(d260,8,2,5,6,1,2,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d260;
#endif
#endprocedure

#procedure Reduced260()
	#call Prepared260()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd260'
		#call MtoZ(Md260,Zd260,i,14)
		#call Reduce(d260)
		#call ZtoM(Zd260,Md260,i,14)
		#call Prepared260()
#else
		#if `USETURBO'
			#call TurboMd260()
		#endif
		#call insertionS(Md260,i1,i7,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md260b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond260()
#endif
	#endif
#endprocedure
*--#] reduce-d260 : 
*--#[ reduce-d259 :
#procedure Insertiond259()
* merge propagators with same momentum, and repeated dots
	if (count(Md259b,1)) Multiply replace_(Md259b,Md259c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md259c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md259c,dotmapMd259cR1)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md259c,dotmapMd259cR2)
	#call replace(i12,j3/2-j4/2+j5/2+j9,j,j3,j4,j5,j9,Md259c,dotmapMd259cR3)
	#call replace(i13,j1/2-j2/2-j3/2+j4/2-j9,j,j1,j2,j3,j4,j9,Md259c,dotmapMd259cR4)
	#call replace(i14,j1/2-j5/2-j6/2+j7/2,j,j1,j5,j6,j7,Md259c,dotmapMd259cR5)
	#call replace(i15,`Q2'/2+j5/2-j7/2-j8,j,j5,j7,j8,Md259c,dotmapMd259cR6)
	#call replace(i16,j1/2-j2/2-j5/2-j9,j,j1,j2,j5,j9,Md259c,dotmapMd259cR7)
	#call replace(i17,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md259c,dotmapMd259cR8)
	if (count(Md259c,1)) Multiply replace_(Md259c,Md259d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d130
	if (count(Md259d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-j3/2+j4/2-j5/2+j9,j,j3,j4,j5,j9,Md259d,dotmapMd259dR1)
	if (count(Md259d,1)) Multiply replace_(Md259d,Md130,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd130 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared259()
* Topology: 0-1 1-2 2-7 2-4 2-4 4-8 1-2 1-7 7-8 8-9
* Dots: p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md259*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i6,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd259 automorphism;

#call CheckRemovedPropagators(d259,8,4,2,5,7,8,1,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d259;
#endif
#endprocedure

#procedure Reduced259()
	#call Prepared259()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd259'
		#call MtoZ(Md259,Zd259,i,14)
		#call Reduce(d259)
		#call ZtoM(Zd259,Md259,i,14)
		#call Prepared259()
#else
		#if `USETURBO'
			#call TurboMd259()
		#endif
		#call insertionS(Md259,i1,i6,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md259b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond259()
#endif
	#endif
#endprocedure
*--#] reduce-d259 : 
*--#[ reduce-d258 :
#procedure Insertiond258()
* merge propagators with same momentum, and repeated dots
	if (count(Md258b,1)) Multiply replace_(Md258b,Md258c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i12,i9,i11,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md258c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md258c,dotmapMd258cR1)
	#call replace(i11,j3/2+j4/2-j5/2+j8,j,j3,j4,j5,j8,Md258c,dotmapMd258cR2)
	#call replace(i12,`Q2'/2+j2/2+j3/2-j6/2-j7+j8,j,j2,j3,j6,j7,j8,Md258c,dotmapMd258cR3)
	if (count(Md258c,1)) Multiply replace_(Md258c,Md258d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d71
	if (count(Md258d,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i5,j5,i6,j6,i7,j7);
	#call replace(i8,-`Q2'/2-j2/2-j3/2+j6/2+j7+j9,j,j2,j3,j6,j7,j9,Md258d,dotmapMd258dR1)
	#call replace(i9,j7-j8,j,j7,j8,Md258d,dotmapMd258dR2)
	if (count(Md258d,1)) Multiply replace_(Md258d,Md71,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd71 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared258()
* Topology: 0-1 1-2 2-3 1-2 3-4 4-6 1-6 3-6 3-4 4-9
* Dots: p0.p4,p0.p5,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md258*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd258 automorphism;

#call CheckRemovedPropagators(d258,8,4,2,5,6,7,1,3,4,8)
#if `$DOACTION' == 0
.sort:reduce d258;
#endif
#endprocedure

#procedure Reduced258()
	#call Prepared258()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd258'
		#call MtoZ(Md258,Zd258,i,14)
		#call Reduce(d258)
		#call ZtoM(Zd258,Md258,i,14)
		#call Prepared258()
#else
		#if `USETURBO'
			#call TurboMd258()
		#endif
		#call insertionS(Md258,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md258b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond258()
#endif
	#endif
#endprocedure
*--#] reduce-d258 : 
*--#[ reduce-d257 :
#procedure Insertiond257()
* merge propagators with same momentum, and repeated dots
	if (count(Md257b,1)) Multiply replace_(Md257b,Md257c,i14,i8,i15,i9,i16,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md257c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j7/2,j,j1,j7,Md257c,dotmapMd257cR1)
	#call replace(i11,j2/2-j6/2+j7/2+j8,j,j2,j6,j7,j8,Md257c,dotmapMd257cR2)
	#call replace(i12,j2/2-j4/2+j5/2-j6/2+j9,j,j2,j4,j5,j6,j9,Md257c,dotmapMd257cR3)
	#call replace(i13,-`Q2'/2+j1/2-j4/2+j5/2-j8+j9,j,j1,j4,j5,j8,j9,Md257c,dotmapMd257cR4)
	#call replace(i14,-`Q2'/2+j1/2-j7/2-j8+j9,j,j1,j7,j8,j9,Md257c,dotmapMd257cR5)
	#call replace(i15,j2/2+j3/2-j4/2,j,j2,j3,j4,Md257c,dotmapMd257cR6)
	#call replace(i16,j3/2-j4/2-j6/2+j7/2,j,j3,j4,j6,j7,Md257c,dotmapMd257cR7)
	#call replace(i17,j3/2+j5/2-j6/2,j,j3,j5,j6,Md257c,dotmapMd257cR8)
	if (count(Md257c,1)) Multiply replace_(Md257c,Md257d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3 and change topology to d124
	if (count(Md257d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md257d,1)) Multiply replace_(Md257d,Md124,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd124 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared257()
* Topology: 0-1 1-2 2-3 3-4 3-5 4-5 2-4 1-5 1-2 2-9
* Dots: p0.p2,p0.p3,p0.p1,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md257*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n6,$n5,$n4,$n3,$n2,$n8)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n1,$n7,$n2,$n4,$n5,$n3,$n6,$n8)
endif;
if (($n9==0)&&($n12==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n4,$n5,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i8,i8,i1);
elseif ($bestiso == 2); Multiply sign_($n10+$n13)*replace_(i1,i8,i2,i6,i4,i5,i5,i4,i6,i2,i8,i1);
elseif ($bestiso == 3); Multiply sign_($n10+$n13)*replace_(i2,i6,i4,i5,i5,i4,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd257 automorphism;

#call CheckRemovedPropagators(d257,8,6,2,3,4,5,6,7,1,8)
#if `$DOACTION' == 0
.sort:reduce d257;
#endif
#endprocedure

#procedure Reduced257()
	#call Prepared257()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd257'
		#call MtoZ(Md257,Zd257,i,14)
		#call Reduce(d257)
		#call ZtoM(Zd257,Md257,i,14)
		#call Prepared257()
#else
		#if `USETURBO'
			#call TurboMd257()
		#endif
		#call insertionS(Md257,i1,i8,i11,i12,i13,i14,i1,`Q2',i2,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md257b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond257()
#endif
	#endif
#endprocedure
*--#] reduce-d257 : 
*--#[ reduce-d256 :
#procedure Insertiond256()
* merge propagators with same momentum, and repeated dots
	if (count(Md256b,1)) Multiply replace_(Md256b,Md256c,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,-i9,i12,-i10,i13,-i11,i16,i12);

* rewrite insertion dots
	if (count(Md256c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2-j4/2+j5/2+j7+j9,j,j1,j4,j5,j7,j9,Md256c,dotmapMd256cR1)
	#call replace(i11,-`Q2'/2-j2/2-j4/2+j6/2+j8+j9,j,j2,j4,j6,j8,j9,Md256c,dotmapMd256cR2)
	#call replace(i12,j1/2+j2/2-j3/2,j,j1,j2,j3,Md256c,dotmapMd256cR3)
	if (count(Md256c,1)) Multiply replace_(Md256c,Md256d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2,p0.p3 and change topology to d72
	if (count(Md256d,1)) Multiply replace_(i1,j3,i2,j6,i3,j2,i4,j4,i5,j5,i6,j1,i7,j9);
	#call replace(i8,-j8+j9,j,j8,j9,Md256d,dotmapMd256dR1)
	#call replace(i9,`Q2'+j7+j8-j9,j,j7,j8,j9,Md256d,dotmapMd256dR2)
	if (count(Md256d,1)) Multiply replace_(Md256d,Md72,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd72 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared256()
* Topology: 0-1 1-2 2-3 2-7 3-5 3-5 1-5 1-7 3-7 3-9
* Dots: p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md256*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n1,$n6,$n4,$n5,$n3,$n8,$n7)
endif;
if (($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n1,$n6,$n5,$n4,$n3,$n8,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 2); Multiply sign_($n10+$n14)*replace_(i1,i7,i2,i8,i4,i5,i5,i4,i7,i1,i8,i2);
elseif ($bestiso == 3); Multiply sign_($n10+$n14)*replace_(i1,i7,i2,i8,i7,i1,i8,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd256 automorphism;

#call CheckRemovedPropagators(d256,8,6,1,2,3,6,7,8,4,5)
#if `$DOACTION' == 0
.sort:reduce d256;
#endif
#endprocedure

#procedure Reduced256()
	#call Prepared256()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd256'
		#call MtoZ(Md256,Zd256,i,14)
		#call Reduce(d256)
		#call ZtoM(Zd256,Md256,i,14)
		#call Prepared256()
#else
		#if `USETURBO'
			#call TurboMd256()
		#endif
		#call insertionS(Md256,i4,i5,i12,i13,i14,i4,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md256b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond256()
#endif
	#endif
#endprocedure
*--#] reduce-d256 : 
*--#[ reduce-d255 :
#procedure Insertiond255()
* merge propagators with same momentum, and repeated dots
	if (count(Md255b,1)) Multiply replace_(Md255b,Md255c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i12,i9,i11,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md255c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md255c,dotmapMd255cR1)
	#call replace(i11,j3/2+j4/2-j5/2+j8,j,j3,j4,j5,j8,Md255c,dotmapMd255cR2)
	#call replace(i12,-j2/2-j5/2+j6/2-j7+j9,j,j2,j5,j6,j7,j9,Md255c,dotmapMd255cR3)
	if (count(Md255c,1)) Multiply replace_(Md255c,Md255d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d73
	if (count(Md255d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j1,i5,j2,i6,j6,i7,j8);
	#call replace(i8,-`Q2'/2-j1/2+j4/2+j7,j,j1,j4,j7,Md255d,dotmapMd255dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md255d,dotmapMd255dR2)
	if (count(Md255d,1)) Multiply replace_(Md255d,Md73,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd73 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared255()
* Topology: 0-1 1-2 2-3 1-2 3-7 3-6 1-6 6-7 3-7 3-9
* Dots: p0.p4,p0.p5,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md255*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd255 automorphism;

#call CheckRemovedPropagators(d255,8,3,2,6,7,1,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d255;
#endif
#endprocedure

#procedure Reduced255()
	#call Prepared255()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd255'
		#call MtoZ(Md255,Zd255,i,14)
		#call Reduce(d255)
		#call ZtoM(Zd255,Md255,i,14)
		#call Prepared255()
#else
		#if `USETURBO'
			#call TurboMd255()
		#endif
		#call insertionS(Md255,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md255b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond255()
#endif
	#endif
#endprocedure
*--#] reduce-d255 : 
*--#[ reduce-d254 :
#procedure Insertiond254()
* merge propagators with same momentum, and repeated dots
	if (count(Md254b,1)) Multiply replace_(Md254b,Md254c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md254c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j2/2,j,j1,j2,Md254c,dotmapMd254cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md254c,dotmapMd254cR2)
	#call replace(i12,j8-j9,j,j8,j9,Md254c,dotmapMd254cR3)
	#call replace(i13,-j1/2-j6/2+j7/2-j8+j9,j,j1,j6,j7,j8,j9,Md254c,dotmapMd254cR4)
	#call replace(i14,`Q2'/2-j1/2+j2/2,j,j1,j2,Md254c,dotmapMd254cR5)
	#call replace(i15,-j1/2+j2/2-j5/2+j7/2-j8,j,j1,j2,j5,j7,j8,Md254c,dotmapMd254cR6)
	#call replace(i16,j2/2-j5/2+j6/2-j9,j,j2,j5,j6,j9,Md254c,dotmapMd254cR7)
	#call replace(i17,-j3/2-j4/2+j6/2,j,j3,j4,j6,Md254c,dotmapMd254cR8)
	if (count(Md254c,1)) Multiply replace_(Md254c,Md254d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d141
	if (count(Md254d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md254d,dotmapMd254dR1)
	if (count(Md254d,1)) Multiply replace_(Md254d,Md141,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd141 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared254()
* Topology: 0-1 1-6 1-3 1-6 3-5 3-5 3-8 5-6 6-8 8-9
* Dots: p0.p4,p2.p4,p0.p1,p1.p2,p1.p4,p1.p5
* Apply automorphisms
if (match(Md254*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd254 automorphism;

#call CheckRemovedPropagators(d254,8,4,2,6,7,8,1,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d254;
#endif
#endprocedure

#procedure Reduced254()
	#call Prepared254()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd254'
		#call MtoZ(Md254,Zd254,i,14)
		#call Reduce(d254)
		#call ZtoM(Zd254,Md254,i,14)
		#call Prepared254()
#else
		#if `USETURBO'
			#call TurboMd254()
		#endif
		#call insertionS(Md254,i1,i3,i11,i12,i13,i14,i1,`Q2',i2,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md254b,1)) Multiply replace_(<i4,i3>,...,<i20,i19>);
		#call Insertiond254()
#endif
	#endif
#endprocedure
*--#] reduce-d254 : 
*--#[ reduce-d253 :
#procedure Insertiond253()
* merge propagators with same momentum, and repeated dots
	if (count(Md253b,1)) Multiply replace_(Md253b,Md253c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md253c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md253c,dotmapMd253cR1)
	#call replace(i11,j7-j9,j,j7,j9,Md253c,dotmapMd253cR2)
	#call replace(i12,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md253c,dotmapMd253cR3)
	#call replace(i13,-j2/2-j5/2+j6/2-j7+j9,j,j2,j5,j6,j7,j9,Md253c,dotmapMd253cR4)
	if (count(Md253c,1)) Multiply replace_(Md253c,Md253d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d69
	if (count(Md253d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j1,i5,j2,i6,j6,i7,j8);
	#call replace(i8,-`Q2'/2-j1/2+j4/2+j7,j,j1,j4,j7,Md253d,dotmapMd253dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md253d,dotmapMd253dR2)
	if (count(Md253d,1)) Multiply replace_(Md253d,Md69,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd69 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared253()
* Topology: 0-1 1-5 1-3 1-5 3-7 3-6 5-6 6-7 3-7 3-9
* Dots: p0.p4,p0.p5,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md253*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd253 automorphism;

#call CheckRemovedPropagators(d253,8,2,6,7,1,2,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d253;
#endif
#endprocedure

#procedure Reduced253()
	#call Prepared253()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd253'
		#call MtoZ(Md253,Zd253,i,14)
		#call Reduce(d253)
		#call ZtoM(Zd253,Md253,i,14)
		#call Prepared253()
#else
		#if `USETURBO'
			#call TurboMd253()
		#endif
		#call insertionS(Md253,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md253b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond253()
#endif
	#endif
#endprocedure
*--#] reduce-d253 : 
*--#[ reduce-d252 :
#procedure Insertiond252()
* merge propagators with same momentum, and repeated dots
	if (count(Md252b,1)) Multiply replace_(Md252b,Md252c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md252c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md252c,dotmapMd252cR1)
	#call replace(i11,j1/2+j2/2-j7/2,j,j1,j2,j7,Md252c,dotmapMd252cR2)
	#call replace(i12,j3/2-j4/2+j6/2+j8,j,j3,j4,j6,j8,Md252c,dotmapMd252cR3)
	#call replace(i13,-`Q2'/2+j1/2-j3/2+j4/2-j8,j,j1,j3,j4,j8,Md252c,dotmapMd252cR4)
	#call replace(i14,j1/2+j5/2-j6/2-j7/2,j,j1,j5,j6,j7,Md252c,dotmapMd252cR5)
	#call replace(i15,-`Q2'/2+j1/2-j6/2-j8,j,j1,j6,j8,Md252c,dotmapMd252cR6)
	#call replace(i16,j2/2-j5/2+j6/2-j9,j,j2,j5,j6,j9,Md252c,dotmapMd252cR7)
	#call replace(i17,-j3/2-j4/2+j6/2,j,j3,j4,j6,Md252c,dotmapMd252cR8)
	if (count(Md252c,1)) Multiply replace_(Md252c,Md252d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p2.p3 and change topology to d143
	if (count(Md252d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md252d,1)) Multiply replace_(Md252d,Md143,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd143 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared252()
* Topology: 0-1 1-2 2-3 3-5 3-5 3-8 1-5 1-2 2-8 8-9
* Dots: p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md252*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd252 automorphism;

#call CheckRemovedPropagators(d252,8,4,2,5,6,8,1,3,4,7)
#if `$DOACTION' == 0
.sort:reduce d252;
#endif
#endprocedure

#procedure Reduced252()
	#call Prepared252()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd252'
		#call MtoZ(Md252,Zd252,i,14)
		#call Reduce(d252)
		#call ZtoM(Zd252,Md252,i,14)
		#call Prepared252()
#else
		#if `USETURBO'
			#call TurboMd252()
		#endif
		#call insertionS(Md252,i1,i7,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md252b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond252()
#endif
	#endif
#endprocedure
*--#] reduce-d252 : 
*--#[ reduce-d251 :
#procedure Insertiond251()
* merge propagators with same momentum, and repeated dots
	if (count(Md251b,1)) Multiply replace_(Md251b,Md251c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i13,i8,i10,i9,i16,i9,i11,i10,i12,i11,i15,i12);

* rewrite insertion dots
	if (count(Md251c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md251c,dotmapMd251cR1)
	#call replace(i11,j2/2+j4/2-j5/2+j7,j,j2,j4,j5,j7,Md251c,dotmapMd251cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2,j,j3,j6,Md251c,dotmapMd251cR3)
	if (count(Md251c,1)) Multiply replace_(Md251c,Md251d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2,p2.p3 and change topology to d74
	if (count(Md251d,1)) Multiply replace_(i1,j5,i2,j2,i3,j3,i4,j1,i5,j6,i6,j4,i7,j8,i9,j9);
	#call replace(i8,`Q2'/2+j3/2-j4/2-j7,j,j3,j4,j7,Md251d,dotmapMd251dR1)
	if (count(Md251d,1)) Multiply replace_(Md251d,Md74,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd74 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared251()
* Topology: 0-1 1-2 2-3 1-2 3-6 3-8 1-6 3-6 3-8 8-9
* Dots: p0.p4,p2.p5,p4.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md251*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n1,$n2,$n3)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i5,i8,i8,i5);
elseif ($bestiso == 4); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i3,i3,i1,i4,i7,i7,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd251 automorphism;

#call CheckRemovedPropagators(d251,8,2,2,6,1,3,4,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d251;
#endif
#endprocedure

#procedure Reduced251()
	#call Prepared251()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd251'
		#call MtoZ(Md251,Zd251,i,14)
		#call Reduce(d251)
		#call ZtoM(Zd251,Md251,i,14)
		#call Prepared251()
#else
		#if `USETURBO'
			#call TurboMd251()
		#endif
		#call insertionS(Md251,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md251b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond251()
#endif
	#endif
#endprocedure
*--#] reduce-d251 : 
*--#[ reduce-d250 :
#procedure Insertiond250()
* merge propagators with same momentum, and repeated dots
	if (count(Md250b,1)) Multiply replace_(Md250b,Md250c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md250c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md250c,dotmapMd250cR1)
	#call replace(i11,j1/2+j2/2-j7/2,j,j1,j2,j7,Md250c,dotmapMd250cR2)
	#call replace(i12,-j3/2+j4/2-j5/2+j8+j9,j,j3,j4,j5,j8,j9,Md250c,dotmapMd250cR3)
	#call replace(i13,`Q2'/2+j2/2+j3/2-j4/2+j5/2-j6/2-j7/2-j8-j9,j,j2,j3,j4,j5,j6,j7,j8,j9,Md250c,dotmapMd250cR4)
	#call replace(i14,j1/2+j5/2-j6/2-j7/2,j,j1,j5,j6,j7,Md250c,dotmapMd250cR5)
	#call replace(i15,`Q2'/2+j5/2-j7/2-j8,j,j5,j7,j8,Md250c,dotmapMd250cR6)
	#call replace(i16,j2/2+j5/2-j6/2-j9,j,j2,j5,j6,j9,Md250c,dotmapMd250cR7)
	#call replace(i17,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md250c,dotmapMd250cR8)
	if (count(Md250c,1)) Multiply replace_(Md250c,Md250d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d142
	if (count(Md250d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j3/2-j4/2+j5/2-j8+j9,j,j3,j4,j5,j8,j9,Md250d,dotmapMd250dR1)
	if (count(Md250d,1)) Multiply replace_(Md250d,Md142,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd142 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared250()
* Topology: 0-1 1-2 2-3 3-4 3-4 4-8 1-3 1-2 2-8 8-9
* Dots: p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md250*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd250 automorphism;

#call CheckRemovedPropagators(d250,8,4,2,5,6,8,1,3,4,7)
#if `$DOACTION' == 0
.sort:reduce d250;
#endif
#endprocedure

#procedure Reduced250()
	#call Prepared250()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd250'
		#call MtoZ(Md250,Zd250,i,14)
		#call Reduce(d250)
		#call ZtoM(Zd250,Md250,i,14)
		#call Prepared250()
#else
		#if `USETURBO'
			#call TurboMd250()
		#endif
		#call insertionS(Md250,i1,i7,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md250b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond250()
#endif
	#endif
#endprocedure
*--#] reduce-d250 : 
*--#[ reduce-d249 :
#procedure Insertiond249()
* merge propagators with same momentum, and repeated dots
	if (count(Md249b,1)) Multiply replace_(Md249b,Md249c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md249c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md249c,dotmapMd249cR1)
	#call replace(i11,j7-j8,j,j7,j8,Md249c,dotmapMd249cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2-j9,j,j3,j6,j9,Md249c,dotmapMd249cR3)
	#call replace(i13,`Q2'/2+j3/2-j6/2,j,j3,j6,Md249c,dotmapMd249cR4)
	#call replace(i14,-j2/2+j5/2-j6/2+j7,j,j2,j5,j6,j7,Md249c,dotmapMd249cR5)
	if (count(Md249c,1)) Multiply replace_(Md249c,Md249d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d75
	if (count(Md249d,1)) Multiply replace_(i1,j5,i2,j2,i3,j4,i4,j1,i5,j6,i6,j3,i7,j7);
	#call replace(i8,j7-j8,j,j7,j8,Md249d,dotmapMd249dR1)
	#call replace(i9,-j1/2-j3/2+j4/2+j5/2+j9,j,j1,j3,j4,j5,j9,Md249d,dotmapMd249dR2)
	if (count(Md249d,1)) Multiply replace_(Md249d,Md75,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd75 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared249()
* Topology: 0-1 1-5 1-3 1-5 3-7 3-8 3-5 3-7 7-8 8-9
* Dots: p0.p4,p2.p4,p2.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md249*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i4,i7,i7,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd249 automorphism;

#call CheckRemovedPropagators(d249,8,2,6,8,1,2,3,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d249;
#endif
#endprocedure

#procedure Reduced249()
	#call Prepared249()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd249'
		#call MtoZ(Md249,Zd249,i,14)
		#call Reduce(d249)
		#call ZtoM(Zd249,Md249,i,14)
		#call Prepared249()
#else
		#if `USETURBO'
			#call TurboMd249()
		#endif
		#call insertionS(Md249,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md249b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond249()
#endif
	#endif
#endprocedure
*--#] reduce-d249 : 
*--#[ reduce-d248 :
#procedure Insertiond248()
* merge propagators with same momentum, and repeated dots
	if (count(Md248b,1)) Multiply replace_(Md248b,Md248c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md248c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md248c,dotmapMd248cR1)
	#call replace(i11,j7-j9,j,j7,j9,Md248c,dotmapMd248cR2)
	#call replace(i12,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md248c,dotmapMd248cR3)
	#call replace(i13,`Q2'/2+j2/2+j3/2-j6/2-j7+j8,j,j2,j3,j6,j7,j8,Md248c,dotmapMd248cR4)
	if (count(Md248c,1)) Multiply replace_(Md248c,Md248d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d76
	if (count(Md248d,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i5,j5,i6,j6,i7,j7);
	#call replace(i8,-`Q2'/2-j2/2-j3/2+j6/2+j7+j9,j,j2,j3,j6,j7,j9,Md248d,dotmapMd248dR1)
	#call replace(i9,j7-j8,j,j7,j8,Md248d,dotmapMd248dR2)
	if (count(Md248d,1)) Multiply replace_(Md248d,Md76,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd76 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared248()
* Topology: 0-1 1-5 1-3 1-5 3-4 4-6 5-6 3-6 3-4 4-9
* Dots: p0.p4,p0.p5,p2.p4,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md248*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd248 automorphism;

#call CheckRemovedPropagators(d248,8,4,2,5,6,7,1,3,4,8)
#if `$DOACTION' == 0
.sort:reduce d248;
#endif
#endprocedure

#procedure Reduced248()
	#call Prepared248()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd248'
		#call MtoZ(Md248,Zd248,i,14)
		#call Reduce(d248)
		#call ZtoM(Zd248,Md248,i,14)
		#call Prepared248()
#else
		#if `USETURBO'
			#call TurboMd248()
		#endif
		#call insertionS(Md248,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md248b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond248()
#endif
	#endif
#endprocedure
*--#] reduce-d248 : 
*--#[ reduce-d247 :
#procedure Insertiond247()
* merge propagators with same momentum, and repeated dots
	if (count(Md247b,1)) Multiply replace_(Md247b,Md247c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i13,i8,i10,i9,i14,i9,i11,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md247c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md247c,dotmapMd247cR1)
	#call replace(i11,j3/2+j4/2-j5/2+j8,j,j3,j4,j5,j8,Md247c,dotmapMd247cR2)
	#call replace(i12,-j2/2-j5/2+j6/2-j7+j9,j,j2,j5,j6,j7,j9,Md247c,dotmapMd247cR3)
	if (count(Md247c,1)) Multiply replace_(Md247c,Md247d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p4,p1.p4 and change topology to d77
	if (count(Md247d,1)) Multiply replace_(i1,j1,i2,j4,i3,j5,i4,j2,i5,j3,i6,j6,i7,j8,i9,j9);
	#call replace(i8,-`Q2'/2+j1/2-j2/2+j7,j,j1,j2,j7,Md247d,dotmapMd247dR1)
	if (count(Md247d,1)) Multiply replace_(Md247d,Md77,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd77 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared247()
* Topology: 0-1 1-2 1-2 2-3 3-7 3-6 2-6 6-7 3-7 3-9
* Dots: p0.p4,p0.p5,p3.p4,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md247*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd247 automorphism;

#call CheckRemovedPropagators(d247,8,2,6,7,1,2,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d247;
#endif
#endprocedure

#procedure Reduced247()
	#call Prepared247()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd247'
		#call MtoZ(Md247,Zd247,i,14)
		#call Reduce(d247)
		#call ZtoM(Zd247,Md247,i,14)
		#call Prepared247()
#else
		#if `USETURBO'
			#call TurboMd247()
		#endif
		#call insertionS(Md247,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md247b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond247()
#endif
	#endif
#endprocedure
*--#] reduce-d247 : 
*--#[ reduce-d246 :
#procedure Insertiond246()
* merge propagators with same momentum, and repeated dots
	if (count(Md246b,1)) Multiply replace_(Md246b,Md246c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i12,i8,i10,i9,i14,i9,i13,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md246c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j4/2+j6/2+j7-j8,j,j4,j6,j7,j8,Md246c,dotmapMd246cR1)
	#call replace(i11,j1/2-j4/2+j5/2-j9,j,j1,j4,j5,j9,Md246c,dotmapMd246cR2)
	#call replace(i12,-j2/2-j3/2+j5/2,j,j2,j3,j5,Md246c,dotmapMd246cR3)
	if (count(Md246c,1)) Multiply replace_(Md246c,Md246d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2,p1.p2 and change topology to d78
	if (count(Md246d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j5,i5,j4,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md246d,1)) Multiply replace_(Md246d,Md78,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd78 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared246()
* Topology: 0-1 1-2 1-2 2-3 3-5 3-5 3-8 2-5 2-8 8-9
* Dots: p0.p3,p0.p4,p3.p4,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md246*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n11==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd246 automorphism;

#call CheckRemovedPropagators(d246,8,2,6,7,1,2,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d246;
#endif
#endprocedure

#procedure Reduced246()
	#call Prepared246()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd246'
		#call MtoZ(Md246,Zd246,i,14)
		#call Reduce(d246)
		#call ZtoM(Zd246,Md246,i,14)
		#call Prepared246()
#else
		#if `USETURBO'
			#call TurboMd246()
		#endif
		#call insertionS(Md246,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md246b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond246()
#endif
	#endif
#endprocedure
*--#] reduce-d246 : 
*--#[ reduce-d245 :
#procedure Insertiond245()
* merge propagators with same momentum, and repeated dots
	if (count(Md245b,1)) Multiply replace_(Md245b,Md245c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i13,i11,i14,i12);

* rewrite insertion dots
	if (count(Md245c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md245c,dotmapMd245cR1)
	#call replace(i11,`Q2'/2+j3/2-j6/2,j,j3,j6,Md245c,dotmapMd245cR2)
	#call replace(i12,j2/2+j4/2-j5/2+j7,j,j2,j4,j5,j7,Md245c,dotmapMd245cR3)
	if (count(Md245c,1)) Multiply replace_(Md245c,Md245d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p2,p2.p4 and change topology to d79
	if (count(Md245d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j5,i5,j6,i6,j3,i7,j7,i8,j8,i9,j9);
	if (count(Md245d,1)) Multiply replace_(Md245d,Md79,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd79 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared245()
* Topology: 0-1 1-2 1-2 2-3 3-6 3-8 2-6 3-6 3-8 8-9
* Dots: p0.p4,p3.p5,p4.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md245*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n4,$n6,$n8,$n7,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i5,i8,i8,i5);
elseif ($bestiso == 3); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 5); Multiply replace_(i4,i7,i5,i8,i7,i4,i8,i5);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i4,i7,i7,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd245 automorphism;

#call CheckRemovedPropagators(d245,8,1,6,1,2,3,4,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d245;
#endif
#endprocedure

#procedure Reduced245()
	#call Prepared245()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd245'
		#call MtoZ(Md245,Zd245,i,14)
		#call Reduce(d245)
		#call ZtoM(Zd245,Md245,i,14)
		#call Prepared245()
#else
		#if `USETURBO'
			#call TurboMd245()
		#endif
		#call insertionS(Md245,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md245b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond245()
#endif
	#endif
#endprocedure
*--#] reduce-d245 : 
*--#[ reduce-d244 :
#procedure Insertiond244()
* merge propagators with same momentum, and repeated dots
	if (count(Md244b,1)) Multiply replace_(Md244b,Md244c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i12,i8,i10,i9,i13,i9,i14,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md244c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j2/2-j3/2,j,j1,j2,j3,Md244c,dotmapMd244cR1)
	#call replace(i11,`Q2'/2+j2/2-j3/2+j5/2-j6/2-j8+j9,j,j2,j3,j5,j6,j8,j9,Md244c,dotmapMd244cR2)
	#call replace(i12,`Q2'/2+j2/2+j4/2-j6/2-j8+j9,j,j2,j4,j6,j8,j9,Md244c,dotmapMd244cR3)
	if (count(Md244c,1)) Multiply replace_(Md244c,Md244d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d60
	if (count(Md244d,1)) Multiply replace_(i1,j6,i2,j4,i3,j3,i4,j5,i5,j2,i6,j1,i8,j9);
	#call replace(i7,j8+j9,j,j8,j9,Md244d,dotmapMd244dR1)
	#call replace(i9,-j7-j8,j,j7,j8,Md244d,dotmapMd244dR2)
	if (count(Md244d,1)) Multiply replace_(Md244d,Md60,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd60 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared244()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-5 4-5 2-5 2-4 4-9
* Dots: p0.p3,p0.p4,p0.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md244*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n10,$n11,$n9,$n8,$n3,$n4,$n5,$n6,$n7,$n1,$n2)
endif;
if (($n9==0)&&($n12==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n10,$n11,$n9,$n8,$n3,$n4,$n5,$n6,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 2); Multiply sign_($n10+$n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i6,i6,i4,i7,i3,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply sign_($n10+$n11+$n13+$n14)*replace_(i3,i7,i4,i6,i6,i4,i7,i3,i10,i11,i11,i10,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd244 automorphism;

#call CheckRemovedPropagators(d244,8,5,3,4,5,6,7,1,2,8)
#if `$DOACTION' == 0
.sort:reduce d244;
#endif
#endprocedure

#procedure Reduced244()
	#call Prepared244()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd244'
		#call MtoZ(Md244,Zd244,i,14)
		#call Reduce(d244)
		#call ZtoM(Zd244,Md244,i,14)
		#call Prepared244()
#else
		#if `USETURBO'
			#call TurboMd244()
		#endif
		#call insertionS(Md244,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md244b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond244()
#endif
	#endif
#endprocedure
*--#] reduce-d244 : 
*--#[ reduce-d243 :
#procedure Insertiond243()
* merge propagators with same momentum, and repeated dots
	if (count(Md243b,1)) Multiply replace_(Md243b,Md243c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i12,i8,i10,i9,i14,i9,i13,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md243c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j6/2-j8,j,j4,j6,j8,Md243c,dotmapMd243cR1)
	#call replace(i11,j1/2+j4/2-j5/2-j9,j,j1,j4,j5,j9,Md243c,dotmapMd243cR2)
	#call replace(i12,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md243c,dotmapMd243cR3)
	if (count(Md243c,1)) Multiply replace_(Md243c,Md243d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p1,p1.p2 and change topology to d80
	if (count(Md243d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j5,i5,j4,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md243d,1)) Multiply replace_(Md243d,Md80,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd80 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared243()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-4 4-8 2-3 2-8 8-9
* Dots: p0.p3,p0.p4,p3.p4,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md243*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n4,$n5,$n7,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n11==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0));
	#call hash(7,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n3,$n6,$n4,$n5,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i3,i7,i4,i5,i5,i4,i7,i3);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 4); Multiply replace_(i4,i5,i5,i4,i13,i14,i14,i13);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1,i3,i7,i7,i3);
elseif ($bestiso == 6); Multiply replace_(i3,i7,i7,i3);
elseif ($bestiso == 7); Multiply replace_(i3,i7,i4,i5,i5,i4,i7,i3,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd243 automorphism;

#call CheckRemovedPropagators(d243,8,1,6,1,2,3,4,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d243;
#endif
#endprocedure

#procedure Reduced243()
	#call Prepared243()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd243'
		#call MtoZ(Md243,Zd243,i,14)
		#call Reduce(d243)
		#call ZtoM(Zd243,Md243,i,14)
		#call Prepared243()
#else
		#if `USETURBO'
			#call TurboMd243()
		#endif
		#call insertionS(Md243,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md243b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond243()
#endif
	#endif
#endprocedure
*--#] reduce-d243 : 
*--#[ reduce-d242 :
#procedure Insertiond242()
* merge propagators with same momentum, and repeated dots
	if (count(Md242b,1)) Multiply replace_(Md242b,Md242c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md242c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md242c,dotmapMd242cR1)
	#call replace(i11,`Q2'/2+j3/2-j6/2,j,j3,j6,Md242c,dotmapMd242cR2)
	#call replace(i12,-j2/2+j5/2-j6/2+j7,j,j2,j5,j6,j7,Md242c,dotmapMd242cR3)
	if (count(Md242c,1)) Multiply replace_(Md242c,Md242d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p2,p2.p4 and change topology to d79
	if (count(Md242d,1)) Multiply replace_(i1,j2,i2,j4,i3,j1,i4,j3,i5,j6,i6,j5,i7,j7,i8,j9,i9,j8);
	if (count(Md242d,1)) Multiply replace_(Md242d,Md79,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd79 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared242()
* Topology: 0-1 1-2 1-2 2-3 3-7 3-8 2-3 3-7 7-8 8-9
* Dots: p0.p4,p3.p4,p3.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md242*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n3,$n5,$n7,$n6,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n3,$n5,$n7,$n6,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i7,i6,i3,i7,i4);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i6,i6,i3);
elseif ($bestiso == 3); Multiply replace_(i3,i6,i6,i3);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 5); Multiply replace_(i3,i6,i4,i7,i6,i3,i7,i4);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i4,i7,i7,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd242 automorphism;

#call CheckRemovedPropagators(d242,8,1,8,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d242;
#endif
#endprocedure

#procedure Reduced242()
	#call Prepared242()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd242'
		#call MtoZ(Md242,Zd242,i,14)
		#call Reduce(d242)
		#call ZtoM(Zd242,Md242,i,14)
		#call Prepared242()
#else
		#if `USETURBO'
			#call TurboMd242()
		#endif
		#call insertionS(Md242,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md242b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond242()
#endif
	#endif
#endprocedure
*--#] reduce-d242 : 
*--#[ reduce-d241 :
#procedure Insertiond241()
* merge propagators with same momentum, and repeated dots
	if (count(Md241b,1)) Multiply replace_(Md241b,Md241c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i13,i8,i10,i9,i14,i9,i11,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md241c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md241c,dotmapMd241cR1)
	#call replace(i11,j3/2+j4/2-j5/2+j8,j,j3,j4,j5,j8,Md241c,dotmapMd241cR2)
	#call replace(i12,`Q2'/2+j2/2+j3/2-j6/2-j7+j8,j,j2,j3,j6,j7,j8,Md241c,dotmapMd241cR3)
	if (count(Md241c,1)) Multiply replace_(Md241c,Md241d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d81
	if (count(Md241d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j6,i6,j5,i7,j7,i9,j8);
	#call replace(i8,-`Q2'/2-j2/2-j3/2+j5/2+j7+j9,j,j2,j3,j5,j7,j9,Md241d,dotmapMd241dR1)
	if (count(Md241d,1)) Multiply replace_(Md241d,Md81,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd81 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared241()
* Topology: 0-1 1-2 1-2 2-3 3-4 4-6 2-6 3-6 3-4 4-9
* Dots: p0.p4,p0.p5,p3.p4,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md241*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd241 automorphism;

#call CheckRemovedPropagators(d241,8,4,3,5,6,7,1,2,4,8)
#if `$DOACTION' == 0
.sort:reduce d241;
#endif
#endprocedure

#procedure Reduced241()
	#call Prepared241()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd241'
		#call MtoZ(Md241,Zd241,i,14)
		#call Reduce(d241)
		#call ZtoM(Zd241,Md241,i,14)
		#call Prepared241()
#else
		#if `USETURBO'
			#call TurboMd241()
		#endif
		#call insertionS(Md241,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md241b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond241()
#endif
	#endif
#endprocedure
*--#] reduce-d241 : 
*--#[ reduce-d240 :
#procedure Insertiond240()
* merge propagators with same momentum, and repeated dots
	if (count(Md240b,1)) Multiply replace_(Md240b,Md240c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i15,i8,i10,i9,i13,i9,i12,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md240c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j2/2-j5/2,j,j1,j2,j5,Md240c,dotmapMd240cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2,j,j2,j6,Md240c,dotmapMd240cR2)
	#call replace(i12,j2/2+j3/2-j4/2,j,j2,j3,j4,Md240c,dotmapMd240cR3)
	if (count(Md240c,1)) Multiply replace_(Md240c,Md240d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p1,p1.p4 and change topology to d82
	if (count(Md240d,1)) Multiply replace_(i1,j4,i2,j2,i3,j1,i4,j3,i5,j6,i6,j5,i7,j7,i8,j8,i9,j9);
	if (count(Md240d,1)) Multiply replace_(Md240d,Md82,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd82 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared240()
* Topology: 0-1 1-2 2-3 2-3 3-4 4-7 4-7 1-3 1-7 7-9
* Dots: p0.p1,p0.p5,p1.p5,p0.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md240*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd240 automorphism;

#call CheckRemovedPropagators(d240,8,2,1,4,2,3,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d240;
#endif
#endprocedure

#procedure Reduced240()
	#call Prepared240()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd240'
		#call MtoZ(Md240,Zd240,i,14)
		#call Reduce(d240)
		#call ZtoM(Zd240,Md240,i,14)
		#call Prepared240()
#else
		#if `USETURBO'
			#call TurboMd240()
		#endif
		#call insertionS(Md240,i2,i3,i12,i13,i14,i2,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md240b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond240()
#endif
	#endif
#endprocedure
*--#] reduce-d240 : 
*--#[ reduce-d239 :
#procedure Insertiond239()
* merge propagators with same momentum, and repeated dots
	if (count(Md239b,1)) Multiply replace_(Md239b,Md239c,i5,i4,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i11,-i8,i10,i9,i16,i9,i12,-i10,i13,-i11,i14,i12);

* rewrite insertion dots
	if (count(Md239c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j2/2+j5/2-j6/2+j7+j8-j9,j,j2,j5,j6,j7,j8,j9,Md239c,dotmapMd239cR1)
	#call replace(i11,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md239c,dotmapMd239cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md239c,dotmapMd239cR3)
	if (count(Md239c,1)) Multiply replace_(Md239c,Md239d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Md239d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j1,i5,j2,i6,j6,i8,j8);
	#call replace(i7,j7-j8,j,j7,j8,Md239d,dotmapMd239dR1)
	#call replace(i9,j2/2+j3/2-j6/2+j7-j8+j9,j,j2,j3,j6,j7,j8,j9,Md239d,dotmapMd239dR2)
	if (count(Md239d,1)) Multiply replace_(Md239d,Md83,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd83 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared239()
* Topology: 0-1 1-2 1-6 2-3 3-4 3-4 2-4 3-6 2-6 2-9
* Dots: p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p3.p4
* Apply automorphisms
if (match(Md239*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd239 automorphism;

#call CheckRemovedPropagators(d239,8,3,2,6,7,1,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d239;
#endif
#endprocedure

#procedure Reduced239()
	#call Prepared239()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd239'
		#call MtoZ(Md239,Zd239,i,14)
		#call Reduce(d239)
		#call ZtoM(Zd239,Md239,i,14)
		#call Prepared239()
#else
		#if `USETURBO'
			#call TurboMd239()
		#endif
		#call insertionS(Md239,i4,i5,i12,i13,i14,i4,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md239b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond239()
#endif
	#endif
#endprocedure
*--#] reduce-d239 : 
*--#[ reduce-d238 :
#procedure Insertiond238()
* merge propagators with same momentum, and repeated dots
	if (count(Md238b,1)) Multiply replace_(Md238b,Md238c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i15,i8,i10,i9,i13,i9,i12,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md238c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j2/2-j4/2,j,j1,j2,j4,Md238c,dotmapMd238cR1)
	#call replace(i11,`Q2'/2+j2/2-j5/2,j,j2,j5,Md238c,dotmapMd238cR2)
	#call replace(i12,j3/2+j5/2-j6/2+j8,j,j3,j5,j6,j8,Md238c,dotmapMd238cR3)
	if (count(Md238c,1)) Multiply replace_(Md238c,Md238d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p1,p1.p4 and change topology to d84
	if (count(Md238d,1)) Multiply replace_(i1,j4,i2,j2,i3,j1,i4,j6,i5,j5,i6,j3,i7,j7,i8,j8,i9,j9);
	if (count(Md238d,1)) Multiply replace_(Md238d,Md84,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd84 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared238()
* Topology: 0-1 1-2 2-3 2-3 3-4 4-7 1-3 1-7 4-7 4-9
* Dots: p0.p1,p0.p5,p1.p5,p0.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md238*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i5,i8,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd238 automorphism;

#call CheckRemovedPropagators(d238,8,3,1,4,7,2,3,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d238;
#endif
#endprocedure

#procedure Reduced238()
	#call Prepared238()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd238'
		#call MtoZ(Md238,Zd238,i,14)
		#call Reduce(d238)
		#call ZtoM(Zd238,Md238,i,14)
		#call Prepared238()
#else
		#if `USETURBO'
			#call TurboMd238()
		#endif
		#call insertionS(Md238,i2,i3,i12,i13,i14,i2,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md238b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond238()
#endif
	#endif
#endprocedure
*--#] reduce-d238 : 
*--#[ reduce-d237 :
#procedure Insertiond237()
* merge propagators with same momentum, and repeated dots
	if (count(Md237b,1)) Multiply replace_(Md237b,Md237c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i13,i8,i10,i9,i16,i9,i12,i10,i14,i11,i15,i12);

* rewrite insertion dots
	if (count(Md237c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j1/2+j2/2-j4/2,j,j1,j2,j4,Md237c,dotmapMd237cR1)
	#call replace(i11,`Q2'/2+j2/2-j5/2,j,j2,j5,Md237c,dotmapMd237cR2)
	#call replace(i12,`Q2'/2+j3/2-j6/2,j,j3,j6,Md237c,dotmapMd237cR3)
	if (count(Md237c,1)) Multiply replace_(Md237c,Md237d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p3,p1.p4 and change topology to d85
	if (count(Md237d,1)) Multiply replace_(i1,j4,i2,j3,i3,j1,i4,j6,i5,j5,i6,j2,i7,j7,i8,j9,i9,j8);
	if (count(Md237d,1)) Multiply replace_(Md237d,Md85,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd85 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared237()
* Topology: 0-1 1-2 2-3 2-3 3-4 4-8 1-3 1-4 4-8 8-9
* Dots: p0.p1,p1.p5,p4.p5,p0.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md237*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i5,i8,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd237 automorphism;

#call CheckRemovedPropagators(d237,8,2,1,4,2,3,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d237;
#endif
#endprocedure

#procedure Reduced237()
	#call Prepared237()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd237'
		#call MtoZ(Md237,Zd237,i,14)
		#call Reduce(d237)
		#call ZtoM(Zd237,Md237,i,14)
		#call Prepared237()
#else
		#if `USETURBO'
			#call TurboMd237()
		#endif
		#call insertionS(Md237,i2,i3,i12,i13,i14,i2,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md237b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond237()
#endif
	#endif
#endprocedure
*--#] reduce-d237 : 
*--#[ reduce-d236 :
#procedure Insertiond236()
* merge propagators with same momentum, and repeated dots
	if (count(Md236b,1)) Multiply replace_(Md236b,Md236c,i5,i4,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i11,i8,i10,i9,i16,i9,i12,i10,i13,i11,i14,i12);

* rewrite insertion dots
	if (count(Md236c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j1/2-j5/2+j6/2+j7+j8-j9,j,j1,j5,j6,j7,j8,j9,Md236c,dotmapMd236cR1)
	#call replace(i11,-`Q2'/2-j3/2-j4/2+j6/2+j7+j8,j,j3,j4,j6,j7,j8,Md236c,dotmapMd236cR2)
	#call replace(i12,`Q2'/2+j1/2-j2/2,j,j1,j2,Md236c,dotmapMd236cR3)
	if (count(Md236c,1)) Multiply replace_(Md236c,Md236d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md236d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j4,i5,j6,i6,j1,i8,j7);
	#call replace(i7,`Q2'/2-j1/2-j4/2+j5/2-j8,j,j1,j4,j5,j8,Md236d,dotmapMd236dR1)
	#call replace(i9,j3/2-j4/2+j5/2-j6/2-j8+j9,j,j3,j4,j5,j6,j8,j9,Md236d,dotmapMd236dR2)
	if (count(Md236d,1)) Multiply replace_(Md236d,Md86,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd86 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared236()
* Topology: 0-1 1-2 1-6 2-7 2-4 2-4 4-7 2-6 6-7 7-9
* Dots: p0.p3,p0.p6,p1.p3,p0.p4,p1.p4,p3.p4
* Apply automorphisms
if (match(Md236*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd236 automorphism;

#call CheckRemovedPropagators(d236,8,5,1,2,6,7,8,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d236;
#endif
#endprocedure

#procedure Reduced236()
	#call Prepared236()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd236'
		#call MtoZ(Md236,Zd236,i,14)
		#call Reduce(d236)
		#call ZtoM(Zd236,Md236,i,14)
		#call Prepared236()
#else
		#if `USETURBO'
			#call TurboMd236()
		#endif
		#call insertionS(Md236,i4,i5,i12,i13,i14,i4,`Q2',i1,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md236b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond236()
#endif
	#endif
#endprocedure
*--#] reduce-d236 : 
*--#[ reduce-d235 :
#procedure Insertiond235()
* merge propagators with same momentum, and repeated dots
	if (count(Md235b,1)) Multiply replace_(Md235b,Md235c,i3,`Q2',i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,-i7,i9,i8,i13,-i8,i10,i9,i15,i9,i11,-i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md235c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md235c,dotmapMd235cR1)
	#call replace(i11,j1/2+j2/2-j6/2,j,j1,j2,j6,Md235c,dotmapMd235cR2)
	#call replace(i12,`Q2'/2+j2/2+j3/2-j5/2-j7+j8,j,j2,j3,j5,j7,j8,Md235c,dotmapMd235cR3)
	if (count(Md235c,1)) Multiply replace_(Md235c,Md235d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d81
	if (count(Md235d,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i5,j5,i6,j6,i8,j7);
	#call replace(i7,`Q2'/2+j2/2+j3/2-j5/2+j7-j9,j,j2,j3,j5,j7,j9,Md235d,dotmapMd235dR1)
	#call replace(i9,j7-j8,j,j7,j8,Md235d,dotmapMd235dR2)
	if (count(Md235d,1)) Multiply replace_(Md235d,Md81,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd81 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared235()
* Topology: 0-3 5-8 2-5 2-3 2-3 1-2 1-8 1-2 1-5 8-9
* Dots: p0.p2,p0.p5,p1.p5,p1.p3,p2.p3,p3.p5
* Apply automorphisms
if (match(Md235*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i5,i7,i7,i5);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd235 automorphism;

#call CheckRemovedPropagators(d235,8,4,1,2,6,8,3,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d235;
#endif
#endprocedure

#procedure Reduced235()
	#call Prepared235()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd235'
		#call MtoZ(Md235,Zd235,i,14)
		#call Reduce(d235)
		#call ZtoM(Zd235,Md235,i,14)
		#call Prepared235()
#else
		#if `USETURBO'
			#call TurboMd235()
		#endif
		#call insertionS(Md235,i3,i4,i12,i13,i14,i3,i1,i2,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md235b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond235()
#endif
	#endif
#endprocedure
*--#] reduce-d235 : 
*--#[ reduce-d234 :
#procedure Insertiond234()
* merge propagators with same momentum, and repeated dots
	if (count(Md234b,1)) Multiply replace_(Md234b,Md234c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i11,i8,i10,i9,i12,i9,i13,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md234c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2+j3/2-j5/2-j7+j8,j,j2,j3,j5,j7,j8,Md234c,dotmapMd234cR1)
	#call replace(i11,`Q2'/2+j1/2-j4/2,j,j1,j4,Md234c,dotmapMd234cR2)
	#call replace(i12,j1/2+j2/2-j6/2,j,j1,j2,j6,Md234c,dotmapMd234cR3)
	if (count(Md234c,1)) Multiply replace_(Md234c,Md234d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md234d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5,i6,j6,i8,j7,i9,j9);
	#call replace(i7,`Q2'/2+j1/2+j4/2-j5/2+j7-j8,j,j1,j4,j5,j7,j8,Md234d,dotmapMd234dR1)
	if (count(Md234d,1)) Multiply replace_(Md234d,Md86,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd86 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared234()
* Topology: 0-3 5-8 3-5 2-3 1-2 1-8 2-3 1-3 1-5 8-9
* Dots: p0.p2,p0.p4,p1.p4,p0.p3,p1.p3,p2.p3
* Apply automorphisms
if (match(Md234*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd234 automorphism;

#call CheckRemovedPropagators(d234,8,5,1,2,4,5,8,3,6,7)
#if `$DOACTION' == 0
.sort:reduce d234;
#endif
#endprocedure

#procedure Reduced234()
	#call Prepared234()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd234'
		#call MtoZ(Md234,Zd234,i,14)
		#call Reduce(d234)
		#call ZtoM(Zd234,Md234,i,14)
		#call Prepared234()
#else
		#if `USETURBO'
			#call TurboMd234()
		#endif
		#call insertionS(Md234,i3,i6,i12,i13,i14,i3,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md234b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond234()
#endif
	#endif
#endprocedure
*--#] reduce-d234 : 
*--#[ reduce-d233 :
#procedure Insertiond233()
* merge propagators with same momentum, and repeated dots
	if (count(Md233b,1)) Multiply replace_(Md233b,Md233c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i13,i8,i10,i9,i16,i9,i11,i10,i14,i11,i15,i12);

* rewrite insertion dots
	if (count(Md233c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md233c,dotmapMd233cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md233c,dotmapMd233cR2)
	#call replace(i12,j4/2+j5/2-j6/2+j8,j,j4,j5,j6,j8,Md233c,dotmapMd233cR3)
	if (count(Md233c,1)) Multiply replace_(Md233c,Md233d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p1,p1.p4 and change topology to d87
	if (count(Md233d,1)) Multiply replace_(i1,j2,i2,j1,i3,j6,i4,j4,i5,j3,i6,j5,i7,j8,i8,j7,i9,j9);
	if (count(Md233d,1)) Multiply replace_(Md233d,Md87,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd87 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared233()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-4 4-6 2-6 4-6 4-9
* Dots: p0.p4,p0.p6,p4.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md233*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n4,$n5,$n3,$n1,$n2)
	#call hash(1,$n14,$n14,$n12,$n11,$n10,$n10,$n4,$n3,$n5,$n8,$n6,$n7,$n2,$n1)
	#call hash(2,$n13,$n13,$n12,$n11,$n9,$n9,$n5,$n3,$n4,$n6,$n8,$n7,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n3,$n5,$n6,$n8,$n7,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n10,$n4,$n3,$n5,$n8,$n6,$n7,$n1,$n2)
	#call hash(5,$n14,$n13,$n12,$n11,$n9,$n9,$n5,$n3,$n4,$n6,$n8,$n7,$n1,$n2)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n3,$n5,$n6,$n8,$n7,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(9,$n14,$n13,$n12,$n11,$n9,$n10,$n5,$n3,$n4,$n8,$n6,$n7,$n1,$n2)
endif;
if (($n12==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(11,$n13,$n14,$n12,$n11,$n9,$n10,$n5,$n3,$n4,$n8,$n6,$n7,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i6,i8,i8,i6);
elseif ($bestiso == 1); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i3,i7,i4,i6,i5,i8,i6,i5,i7,i3,i8,i4,i9,i10,i13,i14);
elseif ($bestiso == 2); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i3,i7,i4,i8,i5,i6,i6,i4,i7,i3,i8,i5,i10,i9,i14,i13);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i3,i7,i4,i8,i5,i6,i6,i5,i7,i3,i8,i4);
elseif ($bestiso == 4); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i6,i5,i8,i6,i5,i7,i3,i8,i4,i9,i10);
elseif ($bestiso == 5); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i6,i6,i4,i7,i3,i8,i5,i10,i9);
elseif ($bestiso == 6); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i8,i5,i6,i6,i5,i7,i3,i8,i4);
elseif ($bestiso == 7); Multiply replace_(i1,i2,i2,i1,i6,i8,i8,i6);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 9); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i6,i5,i8,i6,i4,i7,i3,i8,i5,i9,i10,i10,i9);
elseif ($bestiso == 11); Multiply sign_($n9+$n10+$n13+$n14)*replace_(i3,i7,i4,i6,i5,i8,i6,i4,i7,i3,i8,i5,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 12); Multiply replace_(i6,i8,i8,i6);
elseif ($bestiso == 13); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4);
elseif ($bestiso == 14); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 15); Multiply replace_(i4,i5,i5,i4,i6,i8,i8,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd233 automorphism;

#call CheckRemovedPropagators(d233,8,2,3,7,1,2,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d233;
#endif
#endprocedure

#procedure Reduced233()
	#call Prepared233()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd233'
		#call MtoZ(Md233,Zd233,i,14)
		#call Reduce(d233)
		#call ZtoM(Zd233,Md233,i,14)
		#call Prepared233()
#else
		#if `USETURBO'
			#call TurboMd233()
		#endif
		#call insertionS(Md233,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md233b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond233()
#endif
	#endif
#endprocedure
*--#] reduce-d233 : 
*--#[ reduce-d232 :
#procedure Insertiond232()
* merge propagators with same momentum, and repeated dots
	if (count(Md232b,1)) Multiply replace_(Md232b,Md232c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md232c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j6/2,j,j3,j6,Md232c,dotmapMd232cR1)
	#call replace(i11,j1/2+j3/2-j7/2,j,j1,j3,j7,Md232c,dotmapMd232cR2)
	#call replace(i12,j4/2-j5/2+j6/2+j8,j,j4,j5,j6,j8,Md232c,dotmapMd232cR3)
	#call replace(i13,-`Q2'/2+j3/2-j4/2+j5/2-j8,j,j3,j4,j5,j8,Md232c,dotmapMd232cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md232c,dotmapMd232cR5)
	#call replace(i15,-`Q2'/2+j3/2-j6/2-j8,j,j3,j6,j8,Md232c,dotmapMd232cR6)
	#call replace(i16,-`Q2'/2+j2/2+j3/2-j7/2-j9,j,j2,j3,j7,j9,Md232c,dotmapMd232cR7)
	#call replace(i17,-j4/2-j5/2+j6/2,j,j4,j5,j6,Md232c,dotmapMd232cR8)
	if (count(Md232c,1)) Multiply replace_(Md232c,Md232d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3 and change topology to d115
	if (count(Md232d,1)) Multiply replace_(i1,j5,i2,j1,i3,j4,i4,j3,i5,j7,i6,j2,i7,j6,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md232d,dotmapMd232dR1)
	if (count(Md232d,1)) Multiply replace_(Md232d,Md115,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd115 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared232()
* Topology: 0-1 1-2 1-6 2-3 3-5 3-5 5-6 2-6 2-3 3-9
* Dots: p0.p4,p1.p4,p0.p3,p1.p3,p3.p4,p3.p5
* Apply automorphisms
if (match(Md232*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n3,$n7,$n6,$n4,$n5,$n8,$n2,$n1)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n3,$n7,$n6,$n5,$n4,$n8,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i8,i4,i5,i5,i4,i8,i3);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i3,i8,i8,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd232 automorphism;

#call CheckRemovedPropagators(d232,8,4,1,2,6,7,3,4,5,8)
#if `$DOACTION' == 0
.sort:reduce d232;
#endif
#endprocedure

#procedure Reduced232()
	#call Prepared232()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd232'
		#call MtoZ(Md232,Zd232,i,14)
		#call Reduce(d232)
		#call ZtoM(Zd232,Md232,i,14)
		#call Prepared232()
#else
		#if `USETURBO'
			#call TurboMd232()
		#endif
		#call insertionS(Md232,i3,i8,i11,i12,i13,i14,i3,`Q2',i1,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md232b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond232()
#endif
	#endif
#endprocedure
*--#] reduce-d232 : 
*--#[ reduce-d231 :
#procedure Insertiond231()
* merge propagators with same momentum, and repeated dots
	if (count(Md231b,1)) Multiply replace_(Md231b,Md231c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md231c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md231c,dotmapMd231cR1)
	#call replace(i11,-j1/2-j2/2+j3/2+j7,j,j1,j2,j3,j7,Md231c,dotmapMd231cR2)
	#call replace(i12,-j4/2-j5/2+j6/2,j,j4,j5,j6,Md231c,dotmapMd231cR3)
	if (count(Md231c,1)) Multiply replace_(Md231c,Md231d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p2,p2.p3 and change topology to d64
	if (count(Md231d,1)) Multiply replace_(i1,j1,i2,j2,i3,j5,i4,j3,i5,j4,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md231d,1)) Multiply replace_(Md231d,Md64,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd64 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared231()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-4 4-6 5-6 4-6 4-9
* Dots: p0.p4,p0.p6,p4.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md231*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i6,i8,i8,i6);
elseif ($bestiso == 1); Multiply replace_(i4,i5,i5,i4,i6,i8,i8,i6);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i6,i8,i8,i6);
elseif ($bestiso == 4); Multiply replace_(i6,i8,i8,i6);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd231 automorphism;

#call CheckRemovedPropagators(d231,8,2,2,7,1,3,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d231;
#endif
#endprocedure

#procedure Reduced231()
	#call Prepared231()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd231'
		#call MtoZ(Md231,Zd231,i,14)
		#call Reduce(d231)
		#call ZtoM(Zd231,Md231,i,14)
		#call Prepared231()
#else
		#if `USETURBO'
			#call TurboMd231()
		#endif
		#call insertionS(Md231,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md231b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond231()
#endif
	#endif
#endprocedure
*--#] reduce-d231 : 
*--#[ reduce-d230 :
#procedure Insertiond230()
* merge propagators with same momentum, and repeated dots
	if (count(Md230b,1)) Multiply replace_(Md230b,Md230c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md230c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j6/2,j,j2,j6,Md230c,dotmapMd230cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md230c,dotmapMd230cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md230c,dotmapMd230cR3)
	if (count(Md230c,1)) Multiply replace_(Md230c,Md230d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d88
	if (count(Md230d,1)) Multiply replace_(i1,j2,i2,j3,i3,j6,i4,j4,i5,j5,i6,j1,i7,j8,i8,j7,i9,j9);
	if (count(Md230d,1)) Multiply replace_(Md230d,Md88,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd88 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared230()
* Topology: 0-1 1-2 2-3 3-4 2-3 4-7 4-7 1-2 1-7 7-9
* Dots: p0.p2,p0.p5,p2.p5,p0.p1,p1.p2,p1.p5
* Apply automorphisms
if (match(Md230*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n5,$n6,$n2,$n3,$n4,$n7)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n2,$n3,$n4,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n5,$n6,$n4,$n3,$n2,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n2,$n3,$n4,$n7)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i2,i4,i4,i2,i5,i6,i6,i5,i7,i1);
elseif ($bestiso == 1); Multiply replace_(i2,i4,i4,i2,i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i7,i5,i6,i6,i5,i7,i1);
elseif ($bestiso == 4); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 5); Multiply replace_(i1,i7,i7,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i7,i2,i4,i4,i2,i7,i1);
elseif ($bestiso == 7); Multiply replace_(i2,i4,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd230 automorphism;

#call CheckRemovedPropagators(d230,8,1,3,1,2,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d230;
#endif
#endprocedure

#procedure Reduced230()
	#call Prepared230()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd230'
		#call MtoZ(Md230,Zd230,i,14)
		#call Reduce(d230)
		#call ZtoM(Zd230,Md230,i,14)
		#call Prepared230()
#else
		#if `USETURBO'
			#call TurboMd230()
		#endif
		#call insertionS(Md230,i1,i7,i12,i13,i14,i1,`Q2',i2,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md230b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond230()
#endif
	#endif
#endprocedure
*--#] reduce-d230 : 
*--#[ reduce-d229 :
#procedure Insertiond229()
* merge propagators with same momentum, and repeated dots
	if (count(Md229b,1)) Multiply replace_(Md229b,Md229c,i4,i3,i5,i4,i3,i5,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12,i14,i13);

* rewrite insertion dots
	if (count(Md229c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j7+j8,j,j7,j8,Md229c,dotmapMd229cR1)
	#call replace(i11,j2/2+j5/2-j6/2+j7+j8,j,j2,j5,j6,j7,j8,Md229c,dotmapMd229cR2)
	#call replace(i12,j3/2-j4/2+j5/2,j,j3,j4,j5,Md229c,dotmapMd229cR3)
	#call replace(i13,`Q2'/2+j1/2-j2/2,j,j1,j2,Md229c,dotmapMd229cR4)
	if (count(Md229c,1)) Multiply replace_(Md229c,Md229d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d89
	if (count(Md229d,1)) Multiply replace_(i1,j4,i2,j1,i3,j3,i4,j6,i5,j2,i6,j5,i7,j8);
	#call replace(i8,j7-j8,j,j7,j8,Md229d,dotmapMd229dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md229d,dotmapMd229dR2)
	if (count(Md229d,1)) Multiply replace_(Md229d,Md89,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd89 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared229()
* Topology: 0-1 1-2 1-6 2-3 3-5 3-5 2-3 5-6 2-6 2-9
* Dots: p0.p4,p0.p5,p1.p4,p0.p3,p1.p3,p3.p4
* Apply automorphisms
if (match(Md229*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n3,$n4,$n5,$n6,$n2,$n1)
endif;
if (($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i6,i4,i5,i5,i4,i6,i3,i9,i10,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i9,i10,i10,i9);
elseif ($bestiso == 3); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd229 automorphism;

#call CheckRemovedPropagators(d229,8,2,2,7,1,3,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d229;
#endif
#endprocedure

#procedure Reduced229()
	#call Prepared229()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd229'
		#call MtoZ(Md229,Zd229,i,14)
		#call Reduce(d229)
		#call ZtoM(Zd229,Md229,i,14)
		#call Prepared229()
#else
		#if `USETURBO'
			#call TurboMd229()
		#endif
		#call insertionS(Md229,i3,i6,i12,i13,i14,i3,`Q2',i1,i4,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md229b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond229()
#endif
	#endif
#endprocedure
*--#] reduce-d229 : 
*--#[ reduce-d228 :
#procedure Insertiond228()
* merge propagators with same momentum, and repeated dots
	if (count(Md228b,1)) Multiply replace_(Md228b,Md228c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md228c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j5/2,j,j2,j5,Md228c,dotmapMd228cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md228c,dotmapMd228cR2)
	#call replace(i12,j4/2+j5/2-j6/2+j8,j,j4,j5,j6,j8,Md228c,dotmapMd228cR3)
	if (count(Md228c,1)) Multiply replace_(Md228c,Md228d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d90
	if (count(Md228d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j2,i5,j1,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md228d,1)) Multiply replace_(Md228d,Md90,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd90 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared228()
* Topology: 0-1 1-2 2-3 3-4 2-3 4-7 1-2 1-7 4-7 4-9
* Dots: p0.p2,p0.p5,p2.p5,p0.p1,p1.p2,p1.p5
* Apply automorphisms
if (match(Md228*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n1,$n8,$n2,$n3,$n4,$n6)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n2,$n3,$n4,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n1,$n8,$n4,$n3,$n2,$n6)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n2,$n3,$n4,$n6)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i2,i4,i4,i2,i5,i8,i6,i1,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i2,i4,i4,i2,i5,i8,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i5,i8,i6,i1,i8,i5);
elseif ($bestiso == 4); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i6,i2,i4,i4,i2,i6,i1);
elseif ($bestiso == 7); Multiply replace_(i2,i4,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd228 automorphism;

#call CheckRemovedPropagators(d228,8,2,3,7,1,2,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d228;
#endif
#endprocedure

#procedure Reduced228()
	#call Prepared228()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd228'
		#call MtoZ(Md228,Zd228,i,14)
		#call Reduce(d228)
		#call ZtoM(Zd228,Md228,i,14)
		#call Prepared228()
#else
		#if `USETURBO'
			#call TurboMd228()
		#endif
		#call insertionS(Md228,i1,i6,i12,i13,i14,i1,`Q2',i2,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md228b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond228()
#endif
	#endif
#endprocedure
*--#] reduce-d228 : 
*--#[ reduce-d227 :
#procedure Insertiond227()
* merge propagators with same momentum, and repeated dots
	if (count(Md227b,1)) Multiply replace_(Md227b,Md227c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i16,i8,i10,i9,i13,i9,i11,i10,i12,i11,i15,i12);

* rewrite insertion dots
	if (count(Md227c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j5/2,j,j2,j5,Md227c,dotmapMd227cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md227c,dotmapMd227cR2)
	#call replace(i12,`Q2'/2+j4/2-j6/2,j,j4,j6,Md227c,dotmapMd227cR3)
	if (count(Md227c,1)) Multiply replace_(Md227c,Md227d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p2,p1.p3 and change topology to d91
	if (count(Md227d,1)) Multiply replace_(i1,j3,i2,j4,i3,j6,i4,j1,i5,j2,i6,j5,i7,j7,i8,j9);
	#call replace(i9,`Q2'/2+j1/2-j5/2-j8,j,j1,j5,j8,Md227d,dotmapMd227dR1)
	if (count(Md227d,1)) Multiply replace_(Md227d,Md91,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd91 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared227()
* Topology: 0-1 1-2 2-3 3-4 2-3 4-8 1-2 1-4 4-8 8-9
* Dots: p0.p2,p2.p5,p3.p5,p0.p1,p1.p2,p1.p5
* Apply automorphisms
if (match(Md227*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n1,$n8,$n2,$n3,$n4,$n6)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n2,$n3,$n4,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n1,$n8,$n4,$n3,$n2,$n6)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n2,$n3,$n4,$n6)
endif;
if (($n9==0)&&($n10==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i2,i4,i4,i2,i5,i8,i6,i1,i8,i5);
elseif ($bestiso == 1); Multiply replace_(i2,i4,i4,i2,i5,i8,i8,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i5,i8,i6,i1,i8,i5);
elseif ($bestiso == 4); Multiply replace_(i5,i8,i8,i5);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i6,i2,i4,i4,i2,i6,i1);
elseif ($bestiso == 7); Multiply replace_(i2,i4,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd227 automorphism;

#call CheckRemovedPropagators(d227,8,1,3,1,2,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d227;
#endif
#endprocedure

#procedure Reduced227()
	#call Prepared227()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd227'
		#call MtoZ(Md227,Zd227,i,14)
		#call Reduce(d227)
		#call ZtoM(Zd227,Md227,i,14)
		#call Prepared227()
#else
		#if `USETURBO'
			#call TurboMd227()
		#endif
		#call insertionS(Md227,i1,i6,i12,i13,i14,i1,`Q2',i2,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md227b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond227()
#endif
	#endif
#endprocedure
*--#] reduce-d227 : 
*--#[ reduce-d226 :
#procedure Insertiond226()
* merge propagators with same momentum, and repeated dots
	if (count(Md226b,1)) Multiply replace_(Md226b,Md226c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md226c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j7/2,j,j3,j7,Md226c,dotmapMd226cR1)
	#call replace(i11,j1/2+j3/2-j6/2,j,j1,j3,j6,Md226c,dotmapMd226cR2)
	#call replace(i12,j3/2+j4/2-j5/2,j,j3,j4,j5,Md226c,dotmapMd226cR3)
	#call replace(i13,j3/2-j4/2+j5/2,j,j3,j4,j5,Md226c,dotmapMd226cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md226c,dotmapMd226cR5)
	#call replace(i15,`Q2'/2+j3/2-j7/2-j8,j,j3,j7,j8,Md226c,dotmapMd226cR6)
	#call replace(i16,j1/2+j3/2-j6/2-j9,j,j1,j3,j6,j9,Md226c,dotmapMd226cR7)
	#call replace(i17,j3/2-j4/2-j5/2,j,j3,j4,j5,Md226c,dotmapMd226cR8)
	if (count(Md226c,1)) Multiply replace_(Md226c,Md226d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p2.p5 and change topology to d114
	if (count(Md226d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j5,i5,j6,i6,j7,i7,j1,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md226d,dotmapMd226dR1)
	if (count(Md226d,1)) Multiply replace_(Md226d,Md114,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd114 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared226()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-7 3-7 2-6 6-7 7-9
* Dots: p0.p5,p1.p5,p0.p3,p1.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md226*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n3,$n4,$n2,$n1)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd226 automorphism;

#call CheckRemovedPropagators(d226,8,4,1,2,7,8,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d226;
#endif
#endprocedure

#procedure Reduced226()
	#call Prepared226()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd226'
		#call MtoZ(Md226,Zd226,i,14)
		#call Reduce(d226)
		#call ZtoM(Zd226,Md226,i,14)
		#call Prepared226()
#else
		#if `USETURBO'
			#call TurboMd226()
		#endif
		#call insertionS(Md226,i3,i4,i11,i12,i13,i14,i3,`Q2',i1,i5,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md226b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond226()
#endif
	#endif
#endprocedure
*--#] reduce-d226 : 
*--#[ reduce-d225 :
#procedure Insertiond225()
* merge propagators with same momentum, and repeated dots
	if (count(Md225b,1)) Multiply replace_(Md225b,Md225c,i16,i8,i18,i9,i17,i16,i19,i17);

* rewrite insertion dots
	if (count(Md225c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j6/2-j8,j,j3,j6,j8,Md225c,dotmapMd225cR1)
	#call replace(i11,j1/2+j3/2-j4/2-j9,j,j1,j3,j4,j9,Md225c,dotmapMd225cR2)
	#call replace(i12,j3/2+j5/2-j7/2,j,j3,j5,j7,Md225c,dotmapMd225cR3)
	#call replace(i13,j3/2-j5/2-j7/2,j,j3,j5,j7,Md225c,dotmapMd225cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md225c,dotmapMd225cR5)
	#call replace(i15,`Q2'/2+j3/2-j6/2,j,j3,j6,Md225c,dotmapMd225cR6)
	#call replace(i16,j1/2+j3/2-j4/2,j,j1,j3,j4,Md225c,dotmapMd225cR7)
	#call replace(i17,j3/2-j5/2+j7/2,j,j3,j5,j7,Md225c,dotmapMd225cR8)
	if (count(Md225c,1)) Multiply replace_(Md225c,Md225d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5 and change topology to d116
	if (count(Md225d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,`Q2'/2+j3/2-j6/2-j8,j,j3,j6,j8,Md225d,dotmapMd225dR1)
	#call replace(i9,j1/2+j3/2-j4/2-j9,j,j1,j3,j4,j9,Md225d,dotmapMd225dR2)
	if (count(Md225d,1)) Multiply replace_(Md225d,Md116,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd116 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared225()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4 4-5 3-4 3-4 4-9
* Dots: p0.p8,p1.p8,p0.p5,p1.p5,p3.p5,p5.p8
* Apply automorphisms
if (match(Md225*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,5
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n12,$n11,$n5,$n8,$n6,$n7,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n9,$n10,$n9,$n7,$n5,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n10,$n9,$n12,$n11,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i7,i7,i8,i8,i5,i9,i11,i10,i12);
elseif ($bestiso == 1); Multiply replace_(i5,i8,i7,i5,i8,i7,i11,i9,i12,i10);
elseif ($bestiso == 3); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 4); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 5); Multiply replace_(i5,i8,i8,i5,i9,i11,i10,i12,i11,i9,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd225 automorphism;

#call CheckRemovedPropagators(d225,8,5,1,2,3,4,6,5,7,8)
#if `$DOACTION' == 0
.sort:reduce d225;
#endif
#endprocedure

#procedure Reduced225()
	#call Prepared225()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd225'
		#call MtoZ(Md225,Zd225,i,14)
		#call Reduce(d225)
		#call ZtoM(Zd225,Md225,i,14)
		#call Prepared225()
#else
		#if `USETURBO'
			#call TurboMd225()
		#endif
		#call insertionS(Md225,i5,i7,i11,i12,i13,i14,i5,`Q2',i1,i3,i8,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md225b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond225()
#endif
	#endif
#endprocedure
*--#] reduce-d225 : 
*--#[ reduce-d224 :
#procedure Insertiond224()
* merge propagators with same momentum, and repeated dots
	if (count(Md224b,1)) Multiply replace_(Md224b,Md224c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md224c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md224c,dotmapMd224cR1)
	#call replace(i11,j1/2-j4/2-j5/2+j6/2-j7,j,j1,j4,j5,j6,j7,Md224c,dotmapMd224cR2)
	#call replace(i12,-j1/2-j2/2-j3/2+j4/2+j8+j9,j,j1,j2,j3,j4,j8,j9,Md224c,dotmapMd224cR3)
	if (count(Md224c,1)) Multiply replace_(Md224c,Md224d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5,p2.p5 and change topology to d92
	if (count(Md224d,1)) Multiply replace_(i1,j2,i2,j5,i3,j6,i4,j1,i5,j3,i6,j4,i7,j7,i8,j9);
	#call replace(i9,-j1/2+j2/2-j5/2+j6/2-j8,j,j1,j2,j5,j6,j8,Md224d,dotmapMd224dR1)
	if (count(Md224d,1)) Multiply replace_(Md224d,Md92,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd92 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared224()
* Topology: 0-1 1-2 1-2 2-3 3-6 3-6 3-8 2-6 6-8 8-9
* Dots: p0.p4,p3.p4,p3.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md224*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n3,$n8,$n4,$n5,$n7,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n3,$n8,$n5,$n4,$n7,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n3,$n8,$n5,$n4,$n7,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0));
	#call hash(5,$n13,$n14,$n12,$n11,$n10,$n9,$n6,$n3,$n8,$n4,$n5,$n7,$n2,$n1)
endif;
if (($n9==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n10,$n11,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n9==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n10,$n11,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n9+$n10+$n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i4,i5,i5,i4,i6,i8,i7,i3,i8,i6);
elseif ($bestiso == 1); Multiply sign_($n9+$n10+$n11+$n13+$n14)*replace_(i1,i2,i2,i1,i3,i7,i6,i8,i7,i3,i8,i6);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n11+$n13+$n14)*replace_(i3,i7,i6,i8,i7,i3,i8,i6);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 5); Multiply sign_($n9+$n10+$n11+$n13+$n14)*replace_(i3,i7,i4,i5,i5,i4,i6,i8,i7,i3,i8,i6,i13,i14,i14,i13);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i10,i11,i11,i10);
elseif ($bestiso == 7); Multiply replace_(i4,i5,i5,i4,i10,i11,i11,i10,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd224 automorphism;

#call CheckRemovedPropagators(d224,8,4,3,6,7,8,1,2,4,5)
#if `$DOACTION' == 0
.sort:reduce d224;
#endif
#endprocedure

#procedure Reduced224()
	#call Prepared224()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd224'
		#call MtoZ(Md224,Zd224,i,14)
		#call Reduce(d224)
		#call ZtoM(Zd224,Md224,i,14)
		#call Prepared224()
#else
		#if `USETURBO'
			#call TurboMd224()
		#endif
		#call insertionS(Md224,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md224b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond224()
#endif
	#endif
#endprocedure
*--#] reduce-d224 : 
*--#[ reduce-d223 :
#procedure Insertiond223()
* merge propagators with same momentum, and repeated dots
	if (count(Md223b,1)) Multiply replace_(Md223b,Md223c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md223c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md223c,dotmapMd223cR1)
	#call replace(i11,j7-j8,j,j7,j8,Md223c,dotmapMd223cR2)
	#call replace(i12,j1/2-j4/2-j5/2+j6/2-j7-j9,j,j1,j4,j5,j6,j7,j9,Md223c,dotmapMd223cR3)
	#call replace(i13,j1/2-j4/2-j5/2+j6/2-j7,j,j1,j4,j5,j6,j7,Md223c,dotmapMd223cR4)
	#call replace(i14,-j1/2-j2/2-j3/2+j4/2+j8+j9,j,j1,j2,j3,j4,j8,j9,Md223c,dotmapMd223cR5)
	if (count(Md223c,1)) Multiply replace_(Md223c,Md223d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5,p2.p5 and change topology to d93
	if (count(Md223d,1)) Multiply replace_(i1,j4,i2,j5,i3,j6,i4,j3,i5,j1,i6,j2,i7,j7);
	#call replace(i8,j7-j8,j,j7,j8,Md223d,dotmapMd223dR1)
	#call replace(i9,-j3/2+j4/2-j5/2+j6/2-j7+j9,j,j3,j4,j5,j6,j7,j9,Md223d,dotmapMd223dR2)
	if (count(Md223d,1)) Multiply replace_(Md223d,Md93,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd93 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared223()
* Topology: 0-1 1-5 1-3 1-5 3-6 3-6 3-8 5-6 6-8 8-9
* Dots: p0.p4,p2.p4,p2.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md223*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n10,$n11,$n9,$n8,$n7,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n9==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n14,$n12,$n10,$n11,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i10,i11,i11,i10);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4,i10,i11,i11,i10,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd223 automorphism;

#call CheckRemovedPropagators(d223,8,4,2,6,7,8,1,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d223;
#endif
#endprocedure

#procedure Reduced223()
	#call Prepared223()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd223'
		#call MtoZ(Md223,Zd223,i,14)
		#call Reduce(d223)
		#call ZtoM(Zd223,Md223,i,14)
		#call Prepared223()
#else
		#if `USETURBO'
			#call TurboMd223()
		#endif
		#call insertionS(Md223,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md223b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond223()
#endif
	#endif
#endprocedure
*--#] reduce-d223 : 
*--#[ reduce-d222 :
#procedure Insertiond222()
* merge propagators with same momentum, and repeated dots
	if (count(Md222b,1)) Multiply replace_(Md222b,Md222c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i15,i7,i9,i8,i12,i8,i10,i9,i13,i9,i11,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md222c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j5/2,j,j1,j5,Md222c,dotmapMd222cR1)
	#call replace(i11,-`Q2'/2-j2/2+j3/2,j,j2,j3,Md222c,dotmapMd222cR2)
	#call replace(i12,-j3/2-j4/2+j6/2-j7,j,j3,j4,j6,j7,Md222c,dotmapMd222cR3)
	if (count(Md222c,1)) Multiply replace_(Md222c,Md222d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d75
	if (count(Md222d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j2,i5,j5,i6,j6,i7,j7,i9,j8);
	#call replace(i8,-`Q2'/2-j1/2+j5/2-j9,j,j1,j5,j9,Md222d,dotmapMd222dR1)
	if (count(Md222d,1)) Multiply replace_(Md222d,Md75,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd75 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared222()
* Topology: 0-3 5-8 1-5 1-3 2-3 1-2 1-8 1-2 1-5 8-9
* Dots: p0.p5,p1.p3,p1.p5,p0.p2,p2.p3,p2.p5
* Apply automorphisms
if (match(Md222*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n9,$n11,$n10,$n9,$n7,$n2,$n3,$n8,$n1,$n6,$n5,$n4)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n12,$n5,$n8,$n3,$n2,$n1,$n6,$n7,$n4)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n2,$n3,$n8,$n1,$n6,$n7,$n4)
endif;
if (($n10==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n9,$n11,$n10,$n12,$n7,$n8,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n7,$n6,$n5,$n4,$n3,$n8,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n5,$n6,$n7,$n4,$n3,$n8,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n9+$n12)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i8,i6,i3,i7,i2,i8,i7,i12,i9);
elseif ($bestiso == 1); Multiply sign_($n9+$n12)*replace_(i1,i4,i2,i7,i3,i6,i4,i1,i5,i2,i6,i3,i7,i8,i8,i5,i9,i12);
elseif ($bestiso == 2); Multiply sign_($n9+$n12)*replace_(i1,i4,i2,i7,i3,i6,i4,i1,i5,i8,i6,i3,i7,i2,i8,i5);
elseif ($bestiso == 4); Multiply sign_($n9+$n12)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i7,i8,i8,i7,i9,i12,i12,i9);
elseif ($bestiso == 5); Multiply replace_(i2,i8,i8,i2);
elseif ($bestiso == 6); Multiply replace_(i2,i8,i5,i7,i7,i5,i8,i2);
elseif ($bestiso == 7); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd222 automorphism;

#call CheckRemovedPropagators(d222,8,2,1,4,2,3,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d222;
#endif
#endprocedure

#procedure Reduced222()
	#call Prepared222()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd222'
		#call MtoZ(Md222,Zd222,i,14)
		#call Reduce(d222)
		#call ZtoM(Zd222,Md222,i,14)
		#call Prepared222()
#else
		#if `USETURBO'
			#call TurboMd222()
		#endif
		#call insertionS(Md222,i2,i8,i12,i13,i14,i2,`Q2',i3,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md222b,1)) Multiply replace_(<i9,i8>,...,<i17,i16>);
		#call Insertiond222()
#endif
	#endif
#endprocedure
*--#] reduce-d222 : 
*--#[ reduce-d221 :
#procedure Insertiond221()
* merge propagators with same momentum, and repeated dots
	if (count(Md221b,1)) Multiply replace_(Md221b,Md221c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i12,i7,i9,i8,i13,i8,i10,i9,i14,i9,i11,i10,i15,i11,i16,i12);

* rewrite insertion dots
	if (count(Md221c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md221c,dotmapMd221cR1)
	#call replace(i11,-j3/2-j4/2+j5/2+j8,j,j3,j4,j5,j8,Md221c,dotmapMd221cR2)
	#call replace(i12,j2/2+j3/2-j6/2,j,j2,j3,j6,Md221c,dotmapMd221cR3)
	if (count(Md221c,1)) Multiply replace_(Md221c,Md221d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p4,p1.p4 and change topology to d77
	if (count(Md221d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j2,i5,j5,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md221d,1)) Multiply replace_(Md221d,Md77,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd77 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared221()
* Topology: 0-1 2-8 1-2 1-2 2-3 3-4 4-8 2-4 2-3 8-9
* Dots: p0.p4,p0.p5,p1.p4,p1.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md221*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n7,$n6,$n5,$n8,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 2); Multiply replace_(i2,i3,i3,i2,i4,i8,i8,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i8,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd221 automorphism;

#call CheckRemovedPropagators(d221,8,2,5,6,1,2,3,4,7,8)
#if `$DOACTION' == 0
.sort:reduce d221;
#endif
#endprocedure

#procedure Reduced221()
	#call Prepared221()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd221'
		#call MtoZ(Md221,Zd221,i,14)
		#call Reduce(d221)
		#call ZtoM(Zd221,Md221,i,14)
		#call Prepared221()
#else
		#if `USETURBO'
			#call TurboMd221()
		#endif
		#call insertionS(Md221,i2,i3,i12,i13,i14,i2,i1,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md221b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond221()
#endif
	#endif
#endprocedure
*--#] reduce-d221 : 
*--#[ reduce-d220 :
#procedure Insertiond220()
* merge propagators with same momentum, and repeated dots
	if (count(Md220b,1)) Multiply replace_(Md220b,Md220c,i16,i8,i17,i9,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md220c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2,j,j1,j5,Md220c,dotmapMd220cR1)
	#call replace(i11,`Q2'/2-j1/2-j5/2,j,j1,j5,Md220c,dotmapMd220cR2)
	#call replace(i12,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md220c,dotmapMd220cR3)
	#call replace(i13,-j4/2-j5/2+j7/2,j,j4,j5,j7,Md220c,dotmapMd220cR4)
	#call replace(i14,`Q2'/2+j1/2-j5/2,j,j1,j5,Md220c,dotmapMd220cR5)
	#call replace(i15,`Q2'/2+j2/2-j3/2,j,j2,j3,Md220c,dotmapMd220cR6)
	#call replace(i16,j4/2+j5/2-j7/2+j8,j,j4,j5,j7,j8,Md220c,dotmapMd220cR7)
	#call replace(i17,j3/2+j4/2-j6/2+j8,j,j3,j4,j6,j8,Md220c,dotmapMd220cR8)
	if (count(Md220c,1)) Multiply replace_(Md220c,Md220d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Md220d,1)) Multiply replace_(i1,j5,i2,j4,i3,j3,i4,j2,i5,j1,i6,j7,i7,j6,i8,j9);
	#call replace(i9,-j1/2-j3/2+j4/2+j5/2-j8,j,j1,j3,j4,j5,j8,Md220d,dotmapMd220dR1)
	if (count(Md220d,1)) Multiply replace_(Md220d,Mfastar3,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOfastar3 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared220()
* Topology: 0-3 4-5 3-4 2-3 1-2 1-5 2-4 1-4 1-5 5-9
* Dots: p0.p4,p1.p2,p0.p5,p1.p5,p2.p5,p4.p5
* Apply automorphisms
if (match(Md220*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n7,$n6,$n8,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i8,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd220 automorphism;

#call CheckRemovedPropagators(d220,8,6,1,2,3,4,6,7,5,8)
#if `$DOACTION' == 0
.sort:reduce d220;
#endif
#endprocedure

#procedure Reduced220()
	#call Prepared220()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd220'
		#call MtoZ(Md220,Zd220,i,14)
		#call Reduce(d220)
		#call ZtoM(Zd220,Md220,i,14)
		#call Prepared220()
#else
		#if `USETURBO'
			#call TurboMd220()
		#endif
		#call insertionS(Md220,i5,i8,i11,i12,i13,i14,i5,`Q2',i1,i2,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md220b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond220()
#endif
	#endif
#endprocedure
*--#] reduce-d220 : 
*--#[ reduce-d219 :
#procedure Insertiond219()
* merge propagators with same momentum, and repeated dots
	if (count(Md219b,1)) Multiply replace_(Md219b,Md219c,i14,i8,i15,i9,i16,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md219c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j4/2-j7/2,j,j4,j7,Md219c,dotmapMd219cR1)
	#call replace(i11,-`Q2'/2-j2/2+j3/2+j5/2-j6/2+j8+j9,j,j2,j3,j5,j6,j8,j9,Md219c,dotmapMd219cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md219c,dotmapMd219cR3)
	#call replace(i13,j2/2-j4/2-j5/2,j,j2,j4,j5,Md219c,dotmapMd219cR4)
	#call replace(i14,-`Q2'/2-j4/2+j7/2+j9,j,j4,j7,j9,Md219c,dotmapMd219cR5)
	#call replace(i15,-`Q2'/2-j1/2-j2/2+j3/2+j8+j9,j,j1,j2,j3,j8,j9,Md219c,dotmapMd219cR6)
	#call replace(i16,-j1/2-j5/2+j6/2,j,j1,j5,j6,Md219c,dotmapMd219cR7)
	#call replace(i17,j2/2-j4/2+j5/2,j,j2,j4,j5,Md219c,dotmapMd219cR8)
	if (count(Md219c,1)) Multiply replace_(Md219c,Md219d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Md219d,1)) Multiply replace_(i1,j3,i2,j7,i3,j2,i4,j5,i5,j4,i6,j6,i7,j1);
	#call replace(i8,-j8+j9,j,j8,j9,Md219d,dotmapMd219dR1)
	#call replace(i9,`Q2'/2-j1/2+j5/2+j8,j,j1,j5,j8,Md219d,dotmapMd219dR2)
	if (count(Md219d,1)) Multiply replace_(Md219d,Md127,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd127 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared219()
* Topology: 0-1 1-6 1-3 1-7 3-4 3-4 3-6 6-7 4-7 4-9
* Dots: p0.p1,p0.p2,p0.p4,p1.p4,p2.p4,p4.p6
* Apply automorphisms
if (match(Md219*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd219 automorphism;

#call CheckRemovedPropagators(d219,8,6,1,2,3,6,7,8,4,5)
#if `$DOACTION' == 0
.sort:reduce d219;
#endif
#endprocedure

#procedure Reduced219()
	#call Prepared219()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd219'
		#call MtoZ(Md219,Zd219,i,14)
		#call Reduce(d219)
		#call ZtoM(Zd219,Md219,i,14)
		#call Prepared219()
#else
		#if `USETURBO'
			#call TurboMd219()
		#endif
		#call insertionS(Md219,i4,i5,i11,i12,i13,i14,i4,`Q2',i1,i2,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md219b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond219()
#endif
	#endif
#endprocedure
*--#] reduce-d219 : 
*--#[ reduce-d218 :
#procedure Insertiond218()
* merge propagators with same momentum, and repeated dots
	if (count(Md218b,1)) Multiply replace_(Md218b,Md218c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i11,i7,i9,i8,i13,i8,i10,i9,i15,i9,i12,i10,i14,i11,i16,i12);

* rewrite insertion dots
	if (count(Md218c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md218c,dotmapMd218cR1)
	#call replace(i11,j1/2+j2/2-j6/2,j,j1,j2,j6,Md218c,dotmapMd218cR2)
	#call replace(i12,-j3/2-j4/2+j5/2+j8,j,j3,j4,j5,j8,Md218c,dotmapMd218cR3)
	if (count(Md218c,1)) Multiply replace_(Md218c,Md218d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p1,p1.p4 and change topology to d87
	if (count(Md218d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md218d,1)) Multiply replace_(Md218d,Md87,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd87 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared218()
* Topology: 0-1 4-6 2-4 1-2 1-3 3-4 4-6 3-4 2-4 6-9
* Dots: p0.p2,p0.p5,p2.p5,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md218*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n5,$n1,$n7,$n4,$n3,$n8,$n6)
	#call hash(1,$n14,$n13,$n14,$n11,$n10,$n10,$n7,$n2,$n6,$n8,$n3,$n4,$n5,$n1)
	#call hash(2,$n12,$n13,$n12,$n11,$n9,$n9,$n5,$n8,$n6,$n2,$n3,$n4,$n7,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n2,$n6,$n8,$n3,$n4,$n7,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n10,$n7,$n2,$n1,$n8,$n3,$n4,$n5,$n6)
	#call hash(5,$n14,$n13,$n12,$n11,$n9,$n9,$n5,$n8,$n1,$n2,$n3,$n4,$n7,$n6)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n5,$n2,$n1,$n8,$n3,$n4,$n7,$n6)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n1,$n7,$n4,$n3,$n2,$n6)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
	#call hash(9,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n1,$n2,$n3,$n4,$n5,$n6)
endif;
if (($n13==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(11,$n12,$n13,$n14,$n11,$n9,$n10,$n7,$n8,$n6,$n2,$n3,$n4,$n5,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n7,$n1,$n5,$n4,$n3,$n8,$n6)
endif;
if (($n9==0)&&($n11==0)&&($n12==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n7,$n6,$n5,$n4,$n3,$n8,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n2,$n5,$n6,$n7,$n4,$n3,$n8,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i2,i8,i5,i7,i6,i1,i7,i5,i8,i2);
elseif ($bestiso == 1); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i8,i7,i2,i8,i7,i9,i10,i12,i14);
elseif ($bestiso == 2); Multiply replace_(i2,i7,i3,i4,i4,i3,i5,i2,i7,i8,i8,i5,i10,i9,i14,i12);
elseif ($bestiso == 3); Multiply replace_(i2,i7,i3,i4,i4,i3,i5,i8,i7,i2,i8,i5);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i8,i6,i1,i7,i2,i8,i7,i9,i10);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i5,i2,i6,i1,i7,i8,i8,i5,i10,i9);
elseif ($bestiso == 6); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i5,i8,i6,i1,i7,i2,i8,i5);
elseif ($bestiso == 7); Multiply replace_(i1,i6,i5,i7,i6,i1,i7,i5);
elseif ($bestiso == 8); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 9); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 11); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2,i7,i8,i8,i7,i9,i10,i10,i9,i12,i14,i14,i12);
elseif ($bestiso == 12); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 13); Multiply replace_(i1,i6,i2,i8,i6,i1,i8,i2);
elseif ($bestiso == 14); Multiply replace_(i2,i8,i8,i2);
elseif ($bestiso == 15); Multiply replace_(i2,i8,i5,i7,i7,i5,i8,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd218 automorphism;

#call CheckRemovedPropagators(d218,8,2,3,4,1,2,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d218;
#endif
#endprocedure

#procedure Reduced218()
	#call Prepared218()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd218'
		#call MtoZ(Md218,Zd218,i,14)
		#call Reduce(d218)
		#call ZtoM(Zd218,Md218,i,14)
		#call Prepared218()
#else
		#if `USETURBO'
			#call TurboMd218()
		#endif
		#call insertionS(Md218,i1,i6,i12,i13,i14,i1,i2,i3,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md218b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond218()
#endif
	#endif
#endprocedure
*--#] reduce-d218 : 
*--#[ reduce-d217 :
#procedure Insertiond217()
* merge propagators with same momentum, and repeated dots
	if (count(Md217b,1)) Multiply replace_(Md217b,Md217c,i14,i8,i16,i9,i15,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md217c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j2/2+j3/2+j8-j9,j,j2,j3,j8,j9,Md217c,dotmapMd217cR1)
	#call replace(i11,j1/2-j2/2+j3/2+j5/2-j6/2-j9,j,j1,j2,j3,j5,j6,j9,Md217c,dotmapMd217cR2)
	#call replace(i12,j1/2-j2/2+j3/2+j4/2-j6/2-j7/2-j9,j,j1,j2,j3,j4,j6,j7,j9,Md217c,dotmapMd217cR3)
	#call replace(i13,-j4/2-j5/2+j7/2,j,j4,j5,j7,Md217c,dotmapMd217cR4)
	#call replace(i14,`Q2'/2+j2/2-j3/2,j,j2,j3,Md217c,dotmapMd217cR5)
	#call replace(i15,j1/2+j2/2-j7/2,j,j1,j2,j7,Md217c,dotmapMd217cR6)
	#call replace(i16,-j3/2-j5/2+j6/2+j7/2+j9,j,j3,j5,j6,j7,j9,Md217c,dotmapMd217cR7)
	#call replace(i17,-j3/2-j4/2+j6/2+j9,j,j3,j4,j6,j9,Md217c,dotmapMd217cR8)
	if (count(Md217c,1)) Multiply replace_(Md217c,Md217d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d136
	if (count(Md217d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j8);
	#call replace(i8,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md217d,dotmapMd217dR1)
	if (count(Md217d,1)) Multiply replace_(Md217d,Md136,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd136 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared217()
* Topology: 0-1 2-4 1-2 1-3 3-5 4-5 4-5 3-4 2-5 4-9
* Dots: p0.p1,p0.p4,p0.p5,p1.p5,p2.p5,p4.p5
* Apply automorphisms
if (match(Md217*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n1,$n5,$n6,$n8,$n2,$n3,$n7)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n4,$n1,$n6,$n5,$n8,$n2,$n3,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i2,i3,i3,i2,i4,i8,i5,i6,i6,i5,i7,i1,i8,i4);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i2,i3,i3,i2,i4,i8,i7,i1,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd217 automorphism;

#call CheckRemovedPropagators(d217,8,6,1,2,3,4,7,8,5,6)
#if `$DOACTION' == 0
.sort:reduce d217;
#endif
#endprocedure

#procedure Reduced217()
	#call Prepared217()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd217'
		#call MtoZ(Md217,Zd217,i,14)
		#call Reduce(d217)
		#call ZtoM(Zd217,Md217,i,14)
		#call Prepared217()
#else
		#if `USETURBO'
			#call TurboMd217()
		#endif
		#call insertionS(Md217,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i2,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md217b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond217()
#endif
	#endif
#endprocedure
*--#] reduce-d217 : 
*--#[ reduce-d216 :
#procedure Insertiond216()
* merge propagators with same momentum, and repeated dots
	if (count(Md216b,1)) Multiply replace_(Md216b,Md216c,i2,i1,i1,i2,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,i9,i12,i9,i11,i10,i13,i11,i16,i12);

* rewrite insertion dots
	if (count(Md216c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md216c,dotmapMd216cR1)
	#call replace(i11,j1/2+j5/2-j6/2+j7+j8-j9,j,j1,j5,j6,j7,j8,j9,Md216c,dotmapMd216cR2)
	#call replace(i12,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md216c,dotmapMd216cR3)
	if (count(Md216c,1)) Multiply replace_(Md216c,Md216d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d73
	if (count(Md216d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j6,i5,j2,i6,j5,i7,j8);
	#call replace(i8,j7-j8,j,j7,j8,Md216d,dotmapMd216dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md216d,dotmapMd216dR2)
	if (count(Md216d,1)) Multiply replace_(Md216d,Md73,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd73 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared216()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-5 3-5 5-6 3-6 3-9
* Dots: p0.p5,p0.p6,p1.p5,p0.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md216*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n5,$n6,$n3,$n4,$n2,$n1)
endif;
if (($n11==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n9,$n10,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i5,i9,i10,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd216 automorphism;

#call CheckRemovedPropagators(d216,8,3,1,2,7,3,4,5,6,8)
#if `$DOACTION' == 0
.sort:reduce d216;
#endif
#endprocedure

#procedure Reduced216()
	#call Prepared216()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd216'
		#call MtoZ(Md216,Zd216,i,14)
		#call Reduce(d216)
		#call ZtoM(Zd216,Md216,i,14)
		#call Prepared216()
#else
		#if `USETURBO'
			#call TurboMd216()
		#endif
		#call insertionS(Md216,i3,i4,i12,i13,i14,i3,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md216b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond216()
#endif
	#endif
#endprocedure
*--#] reduce-d216 : 
*--#[ reduce-d215 :
#procedure Insertiond215()
* merge propagators with same momentum, and repeated dots
	if (count(Md215b,1)) Multiply replace_(Md215b,Md215c,i6,i5,i7,i6,i8,i7,i14,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i15,i13,i16,i14);

* rewrite insertion dots
	if (count(Md215c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j3/2-j7-j8,j,j2,j3,j7,j8,Md215c,dotmapMd215cR1)
	#call replace(i11,-j1/2+j2/2-j6/2-j9,j,j1,j2,j6,j9,Md215c,dotmapMd215cR2)
	#call replace(i12,-j1/2+j2/2-j4/2+j5/2-j9,j,j1,j2,j4,j5,j9,Md215c,dotmapMd215cR3)
	#call replace(i13,`Q2'/2+j2/2-j3/2,j,j2,j3,Md215c,dotmapMd215cR4)
	#call replace(i14,j1/2+j2/2-j6/2,j,j1,j2,j6,Md215c,dotmapMd215cR5)
	if (count(Md215c,1)) Multiply replace_(Md215c,Md215d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Md215d,1)) Multiply replace_(i1,j6,i2,j3,i3,j4,i4,j5,i5,j1,i6,j2);
	#call replace(i7,`Q2'/2+j3/2-j4/2-j7,j,j3,j4,j7,Md215d,dotmapMd215dR1)
	#call replace(i8,j7-j8,j,j7,j8,Md215d,dotmapMd215dR2)
	#call replace(i9,j1/2+j3/2-j5/2-j6/2-j9,j,j1,j3,j5,j6,j9,Md215d,dotmapMd215dR3)
	if (count(Md215d,1)) Multiply replace_(Md215d,Md83,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd83 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared215()
* Topology: 0-1 2-6 1-2 1-6 3-6 3-4 4-6 4-6 2-3 6-9
* Dots: p0.p1,p0.p4,p1.p4,p0.p6,p1.p6,p2.p6
* Apply automorphisms
if (match(Md215*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd215 automorphism;

#call CheckRemovedPropagators(d215,8,3,2,5,8,1,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d215;
#endif
#endprocedure

#procedure Reduced215()
	#call Prepared215()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd215'
		#call MtoZ(Md215,Zd215,i,14)
		#call Reduce(d215)
		#call ZtoM(Zd215,Md215,i,14)
		#call Prepared215()
#else
		#if `USETURBO'
			#call TurboMd215()
		#endif
		#call insertionS(Md215,i6,i7,i12,i13,i14,i6,`Q2',i1,i2,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md215b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond215()
#endif
	#endif
#endprocedure
*--#] reduce-d215 : 
*--#[ reduce-bebe :
#procedure Preparebebe()
* Topology: 0-1 4-5 1-4 3-5 1-3 1-2 2-4 2-3 3-4 5-9
* Dots: p0.p2,p0.p4,p0.p6,p1.p2,p2.p6,p1.p4
* Apply automorphisms
if (match(Mbebe*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n6,$n7,$n5,$n2,$n1,$n4,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i7,i7,i6,i9,i10,i10,i9);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zbebe automorphism;

#call CheckRemovedPropagators(bebe,8,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5 and change topology to d160
	if (count(MbebeM1,1)) Multiply replace_(i2,j1,i3,j4,i4,j2,i5,j3,i6,j5,i7,j7,i8,j6,i10,j9,i11,j10,i9,j8);
	#call replace(i1,`Q2'-2*j11+j4,j,j4,j11,MbebeM1,dotmapMbebeM1R1)
	#call replace(i12,-j12+j8,j,j8,j12,MbebeM1,dotmapMbebeM1R2)
	#call replace(i13,-`Q2'/2-j1/2+j10+j11-j12-j14-j4/2-j5/2+j6/2+j8,j,j1,j4,j5,j6,j8,j10,j11,j12,j14,MbebeM1,dotmapMbebeM1R3)
	#call replace(i14,-j13+j9,j,j9,j13,MbebeM1,dotmapMbebeM1R4)
	if (count(MbebeM1,1)) Multiply replace_(MbebeM1,Md160,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd160 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d167
	if (count(MbebeM2,1)) Multiply replace_(i1,j6,i3,j3,i4,j1,i5,j2,i6,j7,i7,j5,i8,j4,i10,j11);
	#call replace(i2,`Q2'+j1-2*j11+2*j12+j2-2*j8,j,j1,j2,j8,j11,j12,MbebeM2,dotmapMbebeM2R1)
	#call replace(i9,`Q2'-j11-j8,j,j8,j11,MbebeM2,dotmapMbebeM2R2)
	#call replace(i11,j8-j9,j,j8,j9,MbebeM2,dotmapMbebeM2R3)
	#call replace(i12,`Q2'/2+j10-j11+j13-j3/2+j6/2-j8,j,j3,j6,j8,j10,j11,j13,MbebeM2,dotmapMbebeM2R4)
	#call replace(i13,-j12+j14-j2/2+j5/2-j7/2+j8-j9,j,j2,j5,j7,j8,j9,j12,j14,MbebeM2,dotmapMbebeM2R5)
	#call replace(i14,j11-j13,j,j11,j13,MbebeM2,dotmapMbebeM2R6)
	if (count(MbebeM2,1)) Multiply replace_(MbebeM2,Md167,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd167 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5 and change topology to d160
	if (count(MbebeM3,1)) Multiply replace_(i1,j4,i2,j2,i4,j1,i5,j3,i6,j7,i7,j5,i8,j6,i10,j8,i12,-j13,i14,-j12,i9,j9);
	#call replace(i3,`Q2'+2*j11+j4,j,j4,j11,MbebeM3,dotmapMbebeM3R1)
	#call replace(i11,`Q2'-j10-j8-j9,j,j8,j9,j10,MbebeM3,dotmapMbebeM3R2)
	#call replace(i13,-j11+j12+j14-j2/2-j4/2+j6/2-j7/2,j,j2,j4,j6,j7,j11,j12,j14,MbebeM3,dotmapMbebeM3R3)
	if (count(MbebeM3,1)) Multiply replace_(MbebeM3,Md160,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9,j10,i10,j11,-i11,j12,-i12,j13,i13,j14,-i14);
	#redefine HASTOPOd160 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d167
	if (count(MbebeM4,1)) Multiply replace_(i1,j3,i2,j1,i3,j6,i5,j2,i6,j5,i7,j7,i8,j4,i11,j9,i12,j13,i13,j14,i9,j11);
	#call replace(i4,`Q2'+j1-2*j11+2*j12+j2-2*j8,j,j1,j2,j8,j11,j12,MbebeM4,dotmapMbebeM4R1)
	#call replace(i10,`Q2'-j11-j8,j,j8,j11,MbebeM4,dotmapMbebeM4R2)
	#call replace(i14,`Q2'/2-j10-j13+j3/2-j6/2,j,j3,j6,j10,j13,MbebeM4,dotmapMbebeM4R3)
	if (count(MbebeM4,1)) Multiply replace_(MbebeM4,Md167,<j1,i1>,...,<j14,i14>);
	#redefine HASTOPOd167 "1"
#endif

#if `$M5'
* map dots to p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3,p1.p5 and change topology to d185
	if (count(MbebeM5,1)) Multiply replace_(i1,j3,i2,j1,i3,j6,i4,j2,i6,j4,i7,j7,i8,j5,i10,j8,i12,j13,i14,j10,i9,j11);
	#call replace(i5,`Q2'+j1-2*j11+2*j12+j2-2*j8,j,j1,j2,j8,j11,j12,MbebeM5,dotmapMbebeM5R1)
	#call replace(i11,`Q2'/2-j11+j3/2-j6/2-j9,j,j3,j6,j9,j11,MbebeM5,dotmapMbebeM5R2)
	#call replace(i13,-j1+j13-j14,j,j1,j13,j14,MbebeM5,dotmapMbebeM5R3)
	if (count(MbebeM5,1)) Multiply replace_(MbebeM5,Md185,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd185 "1"
#endif

#if `$M6'
* map dots to p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d176
	if (count(MbebeM6,1)) Multiply replace_(i1,j4,i2,j1,i3,j6,i4,j3,i5,j2,i7,j5,i8,j7,i12,j13,i14,j9,i9,j11);
	#call replace(i6,2*j10+2*j14+j2+j5-2*j8,j,j2,j5,j8,j10,j14,MbebeM6,dotmapMbebeM6R1)
	#call replace(i10,`Q2'/2+j1/2-j11+j12-j2/2+j3/2,j,j1,j2,j3,j11,j12,MbebeM6,dotmapMbebeM6R2)
	#call replace(i11,`Q2'/2-j1/2-j12+j2/2-j3/2-j8,j,j1,j2,j3,j8,j12,MbebeM6,dotmapMbebeM6R3)
	#call replace(i13,-j1+j11-j12-j14,j,j1,j11,j12,j14,MbebeM6,dotmapMbebeM6R4)
	if (count(MbebeM6,1)) Multiply replace_(MbebeM6,Md176,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd176 "1"
#endif

#if `$M7'
* map dots to p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d176
	if (count(MbebeM7,1)) Multiply replace_(i1,j6,i2,j3,i3,j4,i4,j1,i5,j2,i6,j5,i8,j7,i10,j11,i11,j8,i13,j10);
	#call replace(i7,2*j10+2*j14+j2+j5-2*j8,j,j2,j5,j8,j10,j14,MbebeM7,dotmapMbebeM7R1)
	#call replace(i9,`Q2'/2+j1/2-j11+j12-j2/2+j3/2,j,j1,j2,j3,j11,j12,MbebeM7,dotmapMbebeM7R2)
	#call replace(i12,`Q2'/2+j1/2-j11+j12-j2/2+j3/2-j9,j,j1,j2,j3,j9,j11,j12,MbebeM7,dotmapMbebeM7R3)
	#call replace(i14,j11-j13,j,j11,j13,MbebeM7,dotmapMbebeM7R4)
	if (count(MbebeM7,1)) Multiply replace_(MbebeM7,Md176,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd176 "1"
#endif

#if `$M8'
* map dots to p0.p5,p3.p4,p4.p5,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d184
	if (count(MbebeM8,1)) Multiply replace_(i1,j4,i2,j1,i3,j6,i4,j2,i5,j3,i6,j5,i7,j7,i11,j8,i12,j13,i13,j14,i9,j11);
	#call replace(i8,j1-2*j10-2*j13+2*j14+j4+j5,j,j1,j4,j5,j10,j13,j14,MbebeM8,dotmapMbebeM8R1)
	#call replace(i10,`Q2'/2-j1/2-j12+j2/2-j3/2,j,j1,j2,j3,j12,MbebeM8,dotmapMbebeM8R2)
	#call replace(i14,`Q2'/2-j13+j4/2-j6/2-j9,j,j4,j6,j9,j13,MbebeM8,dotmapMbebeM8R3)
	if (count(MbebeM8,1)) Multiply replace_(MbebeM8,Md184,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9,j10,-i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd184 "1"
#endif
.sort:reduce bebe;
#endif
#endprocedure

#procedure Reducebebe()
	#call Preparebebe()
	#if `$DOACTION'
		#call MtoZ(Mbebe,Zbebe,i,14)
		id Zbebe(n1?,...,n14?) = Zbebe(n1,...,n14) * 2^(n9+n10+n11+n12+n13+n14);
		.sort:convert bebe;
		#call Reduce(bebe)
		id Zbebe(n1?,...,n14?) = Zbebe(n1,...,n14) * 1/2^(n9+n10+n11+n12+n13+n14);
		#call ZtoM(Zbebe,Mbebe,i,14)
		#call Preparebebe()
	#endif
#endprocedure
*--#] reduce-bebe : 
*--#[ reduce-d213 :
#procedure Insertiond213()
* merge propagators with same momentum, and repeated dots
	if (count(Md213b,1)) Multiply replace_(Md213b,Md213c,i16,i8,i17,i9,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md213c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md213c,dotmapMd213cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md213c,dotmapMd213cR2)
	#call replace(i12,-`Q2'/2-j3/2+j5/2-j9,j,j3,j5,j9,Md213c,dotmapMd213cR3)
	#call replace(i13,-j2/2-j4/2+j7/2-j8,j,j2,j4,j7,j8,Md213c,dotmapMd213cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md213c,dotmapMd213cR5)
	#call replace(i15,`Q2'/2+j3/2-j5/2,j,j3,j5,Md213c,dotmapMd213cR6)
	#call replace(i16,j2/2+j4/2-j7/2,j,j2,j4,j7,Md213c,dotmapMd213cR7)
	#call replace(i17,`Q2'/2-j1/2+j2/2-j5/2+j6/2-j7/2+j8+j9,j,j1,j2,j5,j6,j7,j8,j9,Md213c,dotmapMd213cR8)
	if (count(Md213c,1)) Multiply replace_(Md213c,Md213d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Md213d,1)) Multiply replace_(i1,j5,i2,j1,i3,j4,i4,j6,i5,j3,i6,j7,i7,j2);
	#call replace(i8,-`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md213d,dotmapMd213dR1)
	#call replace(i9,-`Q2'/2-j1/2+j5/2-j9,j,j1,j5,j9,Md213d,dotmapMd213dR2)
	if (count(Md213d,1)) Multiply replace_(Md213d,Md144,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd144 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared213()
* Topology: 0-4 2-4 2-4 3-4 2-6 2-3 1-6 1-2 1-3 6-9
* Dots: p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md213*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd213 automorphism;

#call CheckRemovedPropagators(d213,8,6,3,4,5,6,7,8,1,2)
#if `$DOACTION' == 0
.sort:reduce d213;
#endif
#endprocedure

#procedure Reduced213()
	#call Prepared213()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd213'
		#call MtoZ(Md213,Zd213,i,14)
		#call Reduce(d213)
		#call ZtoM(Zd213,Md213,i,14)
		#call Prepared213()
#else
		#if `USETURBO'
			#call TurboMd213()
		#endif
		#call insertionS(Md213,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md213b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond213()
#endif
	#endif
#endprocedure
*--#] reduce-d213 : 
*--#[ reduce-d212 :
#procedure Insertiond212()
* merge propagators with same momentum, and repeated dots
	if (count(Md212b,1)) Multiply replace_(Md212b,Md212c,i2,i1,i3,i2,i4,i3,i5,i4,i1,i5,i6,i5,i7,i6,i8,-i7,i14,-i7,i9,-i8,i10,-i9,i16,-i9,i11,i10,i12,-i11,i13,i12,i15,i13);

* rewrite insertion dots
	if (count(Md212c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j2/2-j4/2+j7+j8,j,j2,j4,j7,j8,Md212c,dotmapMd212cR1)
	#call replace(i11,j1/2-j3/2+j6/2-j7+j9,j,j1,j3,j6,j7,j9,Md212c,dotmapMd212cR2)
	#call replace(i12,-`Q2'/2+j2/2+j5/2-j6/2+j7+j8,j,j2,j5,j6,j7,j8,Md212c,dotmapMd212cR3)
	#call replace(i13,`Q2'/2+j2/2-j4/2,j,j2,j4,Md212c,dotmapMd212cR4)
	if (count(Md212c,1)) Multiply replace_(Md212c,Md212d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p1.p2 and change topology to d94
	if (count(Md212d,1)) Multiply replace_(i1,j2,i2,j1,i3,j3,i4,j5,i5,j4,i6,j6,i7,j8,i9,j9);
	#call replace(i8,`Q2'/2-j1/2+j5/2+j7-j8,j,j1,j5,j7,j8,Md212d,dotmapMd212dR1)
	if (count(Md212d,1)) Multiply replace_(Md212d,Md94,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd94 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared212()
* Topology: 0-4 2-4 3-4 4-6 2-4 3-4 1-6 1-2 1-3 6-9
* Dots: p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md212*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n11,$n13,$n9,$n11,$n12,$n9,$n7,$n8,$n6,$n1,$n5,$n3,$n4,$n2)
	#call hash(1,$n14,$n13,$n10,$n14,$n10,$n12,$n7,$n8,$n6,$n4,$n2,$n3,$n1,$n5)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n6,$n2,$n1,$n3,$n5,$n4)
endif;
if (($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n10==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n11,$n13,$n9,$n14,$n10,$n12,$n7,$n8,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n10,$n11,$n12,$n9,$n7,$n8,$n6,$n1,$n2,$n3,$n4,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i4,i4,i5,i5,i1,i7,i8,i8,i7,i10,i12,i12,i9,i14,i11);
elseif ($bestiso == 1); Multiply replace_(i1,i5,i2,i1,i4,i2,i5,i4,i7,i8,i8,i7,i9,i12,i11,i14,i12,i10);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i2,i5,i4,i1,i5,i2,i9,i10,i10,i9);
elseif ($bestiso == 4); Multiply replace_(i2,i5,i5,i2,i9,i10,i10,i9);
elseif ($bestiso == 5); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i12,i11,i14,i12,i9,i14,i11);
elseif ($bestiso == 7); Multiply replace_(i1,i5,i2,i4,i4,i2,i5,i1,i7,i8,i8,i7,i10,i12,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd212 automorphism;

#call CheckRemovedPropagators(d212,8,3,6,7,8,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d212;
#endif
#endprocedure

#procedure Reduced212()
	#call Prepared212()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd212'
		#call MtoZ(Md212,Zd212,i,14)
		#call Reduce(d212)
		#call ZtoM(Zd212,Md212,i,14)
		#call Prepared212()
#else
		#if `USETURBO'
			#call TurboMd212()
		#endif
		#call insertionS(Md212,i1,i4,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md212b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond212()
#endif
	#endif
#endprocedure
*--#] reduce-d212 : 
*--#[ reduce-d211 :
#procedure Insertiond211()
* merge propagators with same momentum, and repeated dots
	if (count(Md211b,1)) Multiply replace_(Md211b,Md211c,i14,i8,i15,i9,i16,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md211c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j7/2,j,j1,j7,Md211c,dotmapMd211cR1)
	#call replace(i11,`Q2'/2+j2/2-j6/2,j,j2,j6,Md211c,dotmapMd211cR2)
	#call replace(i12,-j1/2-j2/2+j4/2-j5/2+j6/2+j8+j9,j,j1,j2,j4,j5,j6,j8,j9,Md211c,dotmapMd211cR3)
	#call replace(i13,-`Q2'/2-j1/2+j4/2-j5/2+j8+j9,j,j1,j4,j5,j8,j9,Md211c,dotmapMd211cR4)
	#call replace(i14,-`Q2'/2-j1/2+j7/2+j8+j9,j,j1,j7,j8,j9,Md211c,dotmapMd211cR5)
	#call replace(i15,-j1/2-j2/2-j3/2+j4/2+j8+j9,j,j1,j2,j3,j4,j8,j9,Md211c,dotmapMd211cR6)
	#call replace(i16,-`Q2'/2-j1/2-j3/2+j4/2+j6/2+j8+j9,j,j1,j3,j4,j6,j8,j9,Md211c,dotmapMd211cR7)
	#call replace(i17,j3/2+j5/2-j6/2,j,j3,j5,j6,Md211c,dotmapMd211cR8)
	if (count(Md211c,1)) Multiply replace_(Md211c,Md211d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Md211d,1)) Multiply replace_(i1,j2,i2,j1,i3,j7,i4,j6,i5,j4,i6,j5,i7,j3,i8,j9);
	#call replace(i9,`Q2'/2+j2/2+j4/2-j6/2+j8-j9,j,j2,j4,j6,j8,j9,Md211d,dotmapMd211dR1)
	if (count(Md211d,1)) Multiply replace_(Md211d,Md137,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd137 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared211()
* Topology: 0-1 1-2 2-7 2-4 2-5 4-5 4-7 1-5 1-7 7-9
* Dots: p1.p2,p1.p3,p0.p1,p0.p2,p0.p3,p0.p5
* Apply automorphisms
if (match(Md211*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n11,$n12,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n10+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i6,i7,i7,i6,i11,i12,i12,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd211 automorphism;

#call CheckRemovedPropagators(d211,8,7,1,2,3,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d211;
#endif
#endprocedure

#procedure Reduced211()
	#call Prepared211()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd211'
		#call MtoZ(Md211,Zd211,i,14)
		#call Reduce(d211)
		#call ZtoM(Zd211,Md211,i,14)
		#call Prepared211()
#else
		#if `USETURBO'
			#call TurboMd211()
		#endif
		#call MtoZ(Md211,Zd211,i,14)
		#call carpet(Zd211,0,8,0,0,0,3,11,1,2,3,5)
		#call ZtoM(Zd211b,Md211b,i,19)
		#call Insertiond211()
#endif
	#endif
#endprocedure
*--#] reduce-d211 : 
*--#[ reduce-cross :
#procedure Preparecross()
* Topology: 0-1 3-5 1-3 4-5 1-4 2-5 1-2 2-3 2-4 5-9
* Dots: p0.p1,p0.p2,p0.p3,p0.p4,p1.p4,p2.p3
* Apply automorphisms
if (match(Mcross*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n13,$n14,$n10,$n9,$n12,$n11,$n7,$n8,$n6,$n5,$n2,$n1,$n4,$n3)
	#call hash(2,$n13,$n14,$n11,$n12,$n9,$n10,$n8,$n7,$n5,$n6,$n3,$n4,$n1,$n2)
	#call hash(3,$n14,$n13,$n9,$n10,$n11,$n12,$n7,$n8,$n5,$n6,$n1,$n2,$n3,$n4)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i7,i8,i8,i7,i9,i11,i10,i12,i11,i9,i12,i10,i13,i14,i14,i13);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i6,i6,i5,i9,i10,i10,i9,i11,i12,i12,i11,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i5,i7,i8,i8,i7,i9,i12,i10,i11,i11,i10,i12,i9);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zcross automorphism;

#call CheckRemovedPropagators(cross,8,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5 and change topology to d160
	if (count(McrossM1,1)) Multiply replace_(i2,j1,i3,j5,i4,j3,i5,j4,i6,j2,i7,j6,i8,j7,i10,j8,i11,-j10);
	#call replace(i1,`Q2'+2*j10-2*j11-2*j14+j4+j5,j,j4,j5,j10,j11,j14,McrossM1,dotmapMcrossM1R1)
	#call replace(i9,`Q2'+j10-j11,j,j10,j11,McrossM1,dotmapMcrossM1R2)
	#call replace(i12,`Q2'-j8-j9,j,j8,j9,McrossM1,dotmapMcrossM1R3)
	#call replace(i13,`Q2'-j11+j12+j13-j3/2-j5/2+j7/2-j8-j9,j,j3,j5,j7,j8,j9,j11,j12,j13,McrossM1,dotmapMcrossM1R4)
	#call replace(i14,-`Q2'/2-j1/2-j10+j11-j12+j14-j4/2-j5/2+j6/2+j8,j,j1,j4,j5,j6,j8,j10,j11,j12,j14,McrossM1,dotmapMcrossM1R5)
	if (count(McrossM1,1)) Multiply replace_(McrossM1,Md160,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9,j10,-i10,j11,i11,j12,i12,j13,-i13,j14,-i14);
	#redefine HASTOPOd160 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5 and change topology to d160
	if (count(McrossM2,1)) Multiply replace_(i1,j1,i3,j3,i4,j5,i5,j2,i6,j4,i7,j6,i8,j7,i12,j10,i9,j8);
	#call replace(i2,`Q2'-2*j10-2*j11+2*j14+j4+j5,j,j4,j5,j10,j11,j14,McrossM2,dotmapMcrossM2R1)
	#call replace(i10,`Q2'-j10-j11,j,j10,j11,McrossM2,dotmapMcrossM2R2)
	#call replace(i11,`Q2'-j8-j9,j,j8,j9,McrossM2,dotmapMcrossM2R3)
	#call replace(i13,-`Q2'/2-j1/2+j10+j11-j12-j14-j4/2-j5/2+j6/2+j8,j,j1,j4,j5,j6,j8,j10,j11,j12,j14,McrossM2,dotmapMcrossM2R4)
	#call replace(i14,`Q2'-j11+j12+j13-j3/2-j5/2+j7/2-j8-j9,j,j3,j5,j7,j8,j9,j11,j12,j13,McrossM2,dotmapMcrossM2R5)
	if (count(McrossM2,1)) Multiply replace_(McrossM2,Md160,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd160 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5 and change topology to d160
	if (count(McrossM3,1)) Multiply replace_(i1,j5,i2,j3,i4,j1,i5,j4,i6,j2,i7,j7,i8,j6,i12,j8,i9,j10);
	#call replace(i3,`Q2'-2*j10-2*j11+2*j14+j4+j5,j,j4,j5,j10,j11,j14,McrossM3,dotmapMcrossM3R1)
	#call replace(i10,`Q2'-j8-j9,j,j8,j9,McrossM3,dotmapMcrossM3R2)
	#call replace(i11,`Q2'-j10-j11,j,j10,j11,McrossM3,dotmapMcrossM3R3)
	#call replace(i13,-`Q2'/2-j1/2+j10+j11-j12-j14-j4/2-j5/2+j6/2+j8,j,j1,j4,j5,j6,j8,j10,j11,j12,j14,McrossM3,dotmapMcrossM3R4)
	#call replace(i14,`Q2'-j11+j12+j13-j3/2-j5/2+j7/2-j8-j9,j,j3,j5,j7,j8,j9,j11,j12,j13,McrossM3,dotmapMcrossM3R5)
	if (count(McrossM3,1)) Multiply replace_(McrossM3,Md160,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd160 "1"
#endif

#if `$M4'
* map dots to p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5 and change topology to d160
	if (count(McrossM4,1)) Multiply replace_(i1,j3,i2,j5,i3,j1,i5,j2,i6,j4,i7,j7,i8,j6,i10,j10,i11,j8);
	#call replace(i4,`Q2'-2*j10-2*j11+2*j14+j4+j5,j,j4,j5,j10,j11,j14,McrossM4,dotmapMcrossM4R1)
	#call replace(i9,`Q2'-j8-j9,j,j8,j9,McrossM4,dotmapMcrossM4R2)
	#call replace(i12,`Q2'-j10-j11,j,j10,j11,McrossM4,dotmapMcrossM4R3)
	#call replace(i13,`Q2'-j11+j12+j13-j3/2-j5/2+j7/2-j8-j9,j,j3,j5,j7,j8,j9,j11,j12,j13,McrossM4,dotmapMcrossM4R4)
	#call replace(i14,-`Q2'/2-j1/2+j10+j11-j12-j14-j4/2-j5/2+j6/2+j8,j,j1,j4,j5,j6,j8,j10,j11,j12,j14,McrossM4,dotmapMcrossM4R5)
	if (count(McrossM4,1)) Multiply replace_(McrossM4,Md160,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9,j10,i10,j11,i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd160 "1"
#endif

#if `$M5'
* map dots to p0.p1,p0.p2,p0.p5,p1.p5,p0.p4,p1.p4,p4.p5 and change topology to d159
	if (count(McrossM5,1)) Multiply replace_(i1,j4,i2,j2,i3,j5,i4,j3,i6,j1,i7,j6,i8,j7,i10,j9,i11,-j10,i9,-j12);
	#call replace(i5,`Q2'+2*j10+2*j12+2*j14+j4+j5,j,j4,j5,j10,j12,j14,McrossM5,dotmapMcrossM5R1)
	#call replace(i12,`Q2'-j8-j9,j,j8,j9,McrossM5,dotmapMcrossM5R2)
	#call replace(i13,-j12+j13-j2/2-j4/2+j6/2,j,j2,j4,j6,j12,j13,McrossM5,dotmapMcrossM5R3)
	#call replace(i14,-j10+j11-j3/2-j5/2+j7/2,j,j3,j5,j7,j10,j11,McrossM5,dotmapMcrossM5R4)
	if (count(McrossM5,1)) Multiply replace_(McrossM5,Md159,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9,j10,i10,j11,-i11,j12,i12,j13,-i13,j14,i14);
	#redefine HASTOPOd159 "1"
#endif

#if `$M6'
* map dots to p0.p1,p0.p2,p0.p5,p1.p5,p0.p4,p1.p4,p4.p5 and change topology to d159
	if (count(McrossM6,1)) Multiply replace_(i1,j2,i2,j4,i3,j3,i4,j5,i5,j1,i7,j6,i8,j7,i10,j12,i12,j10,i9,j9);
	#call replace(i6,`Q2'-2*j10-2*j12+2*j14+j4+j5,j,j4,j5,j10,j12,j14,McrossM6,dotmapMcrossM6R1)
	#call replace(i11,`Q2'-j8-j9,j,j8,j9,McrossM6,dotmapMcrossM6R2)
	#call replace(i13,j10-j11-j3/2-j5/2+j7/2,j,j3,j5,j7,j10,j11,McrossM6,dotmapMcrossM6R3)
	#call replace(i14,j12-j13-j2/2-j4/2+j6/2,j,j2,j4,j6,j12,j13,McrossM6,dotmapMcrossM6R4)
	if (count(McrossM6,1)) Multiply replace_(McrossM6,Md159,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9,j10,-i10,j11,i11,j12,-i12,j13,i13,j14,i14);
	#redefine HASTOPOd159 "1"
#endif

#if `$M7'
* map dots to p0.p4,p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d181
	if (count(McrossM7,1)) Multiply replace_(i1,j4,i2,j1,i3,j7,i4,j3,i5,j6,i6,j2,i8,j5,i10,j11,i13,j10,i9,j8);
	#call replace(i7,j1-2*j13+j4,j,j1,j4,j13,McrossM7,dotmapMcrossM7R1)
	#call replace(i11,`Q2'/2+j1/2-j11+j12-j2/2+j3/2+j9,j,j1,j2,j3,j9,j11,j12,McrossM7,dotmapMcrossM7R2)
	#call replace(i12,`Q2'/2+j1/2-j11+j12-j2/2+j3/2,j,j1,j2,j3,j11,j12,McrossM7,dotmapMcrossM7R3)
	#call replace(i14,j12+j14,j,j12,j14,McrossM7,dotmapMcrossM7R4)
	if (count(McrossM7,1)) Multiply replace_(McrossM7,Md181,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd181 "1"
#endif

#if `$M8'
* map dots to p0.p4,p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5 and change topology to d181
	if (count(McrossM8,1)) Multiply replace_(i1,j7,i2,j3,i3,j4,i4,j1,i5,j6,i6,j2,i7,j5,i11,j8,i12,j11,i14,j10);
	#call replace(i8,j1-2*j13+j4,j,j1,j4,j13,McrossM8,dotmapMcrossM8R1)
	#call replace(i9,`Q2'/2+j1/2-j11+j12-j2/2+j3/2+j9,j,j1,j2,j3,j9,j11,j12,McrossM8,dotmapMcrossM8R2)
	#call replace(i10,`Q2'/2+j1/2-j11+j12-j2/2+j3/2,j,j1,j2,j3,j11,j12,McrossM8,dotmapMcrossM8R3)
	#call replace(i13,j12+j14,j,j12,j14,McrossM8,dotmapMcrossM8R4)
	if (count(McrossM8,1)) Multiply replace_(McrossM8,Md181,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9,j10,i10,j11,-i11,j12,i12,j13,i13,j14,-i14);
	#redefine HASTOPOd181 "1"
#endif
.sort:reduce cross;
#endif
#endprocedure

#procedure Reducecross()
	#call Preparecross()
	#if `$DOACTION'
		#call MtoZ(Mcross,Zcross,i,14)
		id Zcross(n1?,...,n14?) = Zcross(n1,...,n14) * 2^(n9+n10+n11+n12+n13+n14);
		.sort:convert cross;
		#call Reduce(cross)
		id Zcross(n1?,...,n14?) = Zcross(n1,...,n14) * 1/2^(n9+n10+n11+n12+n13+n14);
		#call ZtoM(Zcross,Mcross,i,14)
		#call Preparecross()
	#endif
#endprocedure
*--#] reduce-cross : 
*--#[ reduce-d209 :
#procedure Insertiond209()
* merge propagators with same momentum, and repeated dots
	if (count(Md209b,1)) Multiply replace_(Md209b,Md209c,i16,i8,i17,i9,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md209c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md209c,dotmapMd209cR1)
	#call replace(i11,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md209c,dotmapMd209cR2)
	#call replace(i12,j1/2+j3/2-j6/2-j9,j,j1,j3,j6,j9,Md209c,dotmapMd209cR3)
	#call replace(i13,j2/2+j4/2-j7/2-j8,j,j2,j4,j7,j8,Md209c,dotmapMd209cR4)
	#call replace(i14,`Q2'/2-j1/2-j2/2,j,j1,j2,Md209c,dotmapMd209cR5)
	#call replace(i15,-j1/2-j3/2+j6/2,j,j1,j3,j6,Md209c,dotmapMd209cR6)
	#call replace(i16,-j2/2-j4/2+j7/2,j,j2,j4,j7,Md209c,dotmapMd209cR7)
	#call replace(i17,-`Q2'/2+j1/2+j2/2+j5/2-j6/2-j7/2-j8-j9,j,j1,j2,j5,j6,j7,j8,j9,Md209c,dotmapMd209cR8)
	if (count(Md209c,1)) Multiply replace_(Md209c,Md209d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md209d,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j6,i5,j5,i6,j7,i7,j4);
	#call replace(i8,-`Q2'/2+j2/2-j4/2+j6/2-j8,j,j2,j4,j6,j8,Md209d,dotmapMd209dR1)
	#call replace(i9,-`Q2'/2+j1/2+j3/2-j7/2-j9,j,j1,j3,j7,j9,Md209d,dotmapMd209dR2)
	if (count(Md209d,1)) Multiply replace_(Md209d,Md118,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd118 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared209()
* Topology: 0-4 4-5 2-4 3-4 2-5 3-5 1-5 1-2 1-3 5-9
* Dots: p2.p5,p3.p4,p0.p2,p0.p3,p0.p4,p0.p5
* Apply automorphisms
if (match(Md209*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n13,$n14,$n11,$n12,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n2,$n3,$n1)
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9,i11,i12,i12,i11,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd209 automorphism;

#call CheckRemovedPropagators(d209,8,7,2,3,4,5,6,7,8,1)
#if `$DOACTION' == 0
.sort:reduce d209;
#endif
#endprocedure

#procedure Reduced209()
	#call Prepared209()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd209'
		#call MtoZ(Md209,Zd209,i,14)
		#call Reduce(d209)
		#call ZtoM(Zd209,Md209,i,14)
		#call Prepared209()
#else
		#if `USETURBO'
			#call TurboMd209()
		#endif
		#call MtoZ(Md209,Zd209,i,14)
		#call carpet(Zd209,0,1,0,0,0,3,11,2,3,4,5)
		#call ZtoM(Zd209b,Md209b,i,19)
		#call Insertiond209()
#endif
	#endif
#endprocedure
*--#] reduce-d209 : 
*--#[ reduce-d208 :
#procedure Insertiond208()
* merge propagators with same momentum, and repeated dots
	if (count(Md208b,1)) Multiply replace_(Md208b,Md208c,i15,i8,i17,i9,i16,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md208c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j4/2-j8,j,j3,j4,j8,Md208c,dotmapMd208cR1)
	#call replace(i11,`Q2'/2+j3/2-j4/2+j5/2-j6/2-j7/2-j8,j,j3,j4,j5,j6,j7,j8,Md208c,dotmapMd208cR2)
	#call replace(i12,-j2/2+j3/2-j7/2,j,j2,j3,j7,Md208c,dotmapMd208cR3)
	#call replace(i13,-j2/2+j3/2+j7/2,j,j2,j3,j7,Md208c,dotmapMd208cR4)
	#call replace(i14,`Q2'/2+j1/2-j6/2,j,j1,j6,Md208c,dotmapMd208cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md208c,dotmapMd208cR6)
	#call replace(i16,`Q2'/2+j3/2-j4/2+j5/2-j6/2-j7/2-j8+j9,j,j3,j4,j5,j6,j7,j8,j9,Md208c,dotmapMd208cR7)
	#call replace(i17,j2/2+j3/2-j7/2,j,j2,j3,j7,Md208c,dotmapMd208cR8)
	if (count(Md208c,1)) Multiply replace_(Md208c,Md208d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2 and change topology to fastar2
	if (count(Md208d,1)) Multiply replace_(i1,j5,i2,j7,i3,j3,i4,j4,i5,j6,i6,j1,i7,j2);
	#call replace(i8,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md208d,dotmapMd208dR1)
	#call replace(i9,`Q2'/2+j1/2+j2/2+j3/2-j4/2-j6/2-j8-j9,j,j1,j2,j3,j4,j6,j8,j9,Md208d,dotmapMd208dR2)
	if (count(Md208d,1)) Multiply replace_(Md208d,Mfastar2,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOfastar2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared208()
* Topology: 0-1 7-8 2-7 1-2 1-7 3-7 3-8 2-3 2-3 8-9
* Dots: p0.p2,p1.p2,p0.p7,p1.p7,p2.p7,p3.p7
* Apply automorphisms
if (match(Md208*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n9+$n10+$n13)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i7,i8,i8,i7);
elseif ($bestiso == 2); Multiply replace_(i7,i8,i8,i7);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n13)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd208 automorphism;

#call CheckRemovedPropagators(d208,8,6,1,2,3,4,5,6,7,8)
#if `$DOACTION' == 0
.sort:reduce d208;
#endif
#endprocedure

#procedure Reduced208()
	#call Prepared208()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd208'
		#call MtoZ(Md208,Zd208,i,14)
		#call Reduce(d208)
		#call ZtoM(Zd208,Md208,i,14)
		#call Prepared208()
#else
		#if `USETURBO'
			#call TurboMd208()
		#endif
		#call insertionS(Md208,i7,i8,i11,i12,i13,i14,i7,`Q2',i1,i2,i3,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md208b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond208()
#endif
	#endif
#endprocedure
*--#] reduce-d208 : 
*--#[ reduce-d207 :
#procedure Insertiond207()
* merge propagators with same momentum, and repeated dots
	if (count(Md207b,1)) Multiply replace_(Md207b,Md207c,i16,i8,i17,i9,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md207c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md207c,dotmapMd207cR1)
	#call replace(i11,`Q2'/2-j1/2+j4/2-j6/2-j8,j,j1,j4,j6,j8,Md207c,dotmapMd207cR2)
	#call replace(i12,`Q2'/2+j2/2+j4/2-j7/2-j8-j9,j,j2,j4,j7,j8,j9,Md207c,dotmapMd207cR3)
	#call replace(i13,-j4/2+j5/2-j6/2,j,j4,j5,j6,Md207c,dotmapMd207cR4)
	#call replace(i14,`Q2'/2+j1/2-j5/2,j,j1,j5,Md207c,dotmapMd207cR5)
	#call replace(i15,`Q2'/2+j2/2-j3/2,j,j2,j3,Md207c,dotmapMd207cR6)
	#call replace(i16,-j4/2-j5/2+j6/2+j8,j,j4,j5,j6,j8,Md207c,dotmapMd207cR7)
	#call replace(i17,-j3/2-j4/2+j7/2+j8,j,j3,j4,j7,j8,Md207c,dotmapMd207cR8)
	if (count(Md207c,1)) Multiply replace_(Md207c,Md207d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Md207d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j7,i5,j6,i6,j5,i7,j2,i8,j8);
	#call replace(i9,`Q2'/2+j1/2-j6/2-j9,j,j1,j6,j9,Md207d,dotmapMd207dR1)
	if (count(Md207d,1)) Multiply replace_(Md207d,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared207()
* Topology: 0-1 2-6 1-2 1-3 3-5 5-6 2-5 2-3 2-5 6-9
* Dots: p0.p4,p1.p2,p0.p6,p1.p6,p2.p6,p4.p6
* Apply automorphisms
if (match(Md207*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n5,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i6,i8,i8,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd207 automorphism;

#call CheckRemovedPropagators(d207,8,6,1,2,3,4,5,7,6,8)
#if `$DOACTION' == 0
.sort:reduce d207;
#endif
#endprocedure

#procedure Reduced207()
	#call Prepared207()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd207'
		#call MtoZ(Md207,Zd207,i,14)
		#call Reduce(d207)
		#call ZtoM(Zd207,Md207,i,14)
		#call Prepared207()
#else
		#if `USETURBO'
			#call TurboMd207()
		#endif
		#call insertionS(Md207,i6,i8,i11,i12,i13,i14,i6,`Q2',i1,i2,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md207b,1)) Multiply replace_(<i9,i8>,...,<i20,i19>);
		#call Insertiond207()
#endif
	#endif
#endprocedure
*--#] reduce-d207 : 
*--#[ reduce-d206 :
#procedure Insertiond206()
* merge propagators with same momentum, and repeated dots
	if (count(Md206b,1)) Multiply replace_(Md206b,Md206c,i14,i8,i16,i9,i15,i14,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md206c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j5/2-j9,j,j3,j5,j9,Md206c,dotmapMd206cR1)
	#call replace(i11,-j1/2-j2/2+j3/2-j5/2+j6/2+j8-j9,j,j1,j2,j3,j5,j6,j8,j9,Md206c,dotmapMd206cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md206c,dotmapMd206cR3)
	#call replace(i13,-j1/2+j3/2-j4/2,j,j1,j3,j4,Md206c,dotmapMd206cR4)
	#call replace(i14,`Q2'/2+j3/2-j5/2,j,j3,j5,Md206c,dotmapMd206cR5)
	#call replace(i15,-j1/2+j3/2+j4/2-j5/2+j6/2-j7/2+j8-j9,j,j1,j3,j4,j5,j6,j7,j8,j9,Md206c,dotmapMd206cR6)
	#call replace(i16,j2/2+j4/2-j7/2,j,j2,j4,j7,Md206c,dotmapMd206cR7)
	#call replace(i17,-j1/2+j3/2+j4/2,j,j1,j3,j4,Md206c,dotmapMd206cR8)
	if (count(Md206c,1)) Multiply replace_(Md206c,Md206d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Md206d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j7,i5,j1,i6,j6,i7,j2);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j8-j9,j,j1,j5,j8,j9,Md206d,dotmapMd206dR1)
	#call replace(i9,`Q2'/2-j1/2+j5/2-j9,j,j1,j5,j9,Md206d,dotmapMd206dR2)
	if (count(Md206d,1)) Multiply replace_(Md206d,Md135,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd135 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared206()
* Topology: 0-2 2-5 2-3 5-6 2-5 3-5 1-6 1-2 1-3 6-9
* Dots: p0.p2,p0.p5,p0.p1,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md206*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i4,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd206 automorphism;

#call CheckRemovedPropagators(d206,8,6,2,3,5,6,7,8,1,4)
#if `$DOACTION' == 0
.sort:reduce d206;
#endif
#endprocedure

#procedure Reduced206()
	#call Prepared206()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd206'
		#call MtoZ(Md206,Zd206,i,14)
		#call Reduce(d206)
		#call ZtoM(Zd206,Md206,i,14)
		#call Prepared206()
#else
		#if `USETURBO'
			#call TurboMd206()
		#endif
		#call insertionS(Md206,i1,i4,i11,i12,i13,i14,i1,`Q2',i2,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md206b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond206()
#endif
	#endif
#endprocedure
*--#] reduce-d206 : 
*--#[ reduce-d205 :
#procedure Insertiond205()
* merge propagators with same momentum, and repeated dots
	if (count(Md205b,1)) Multiply replace_(Md205b,Md205c,i15,i8,i16,i9,i17,i15,i18,i16,i19,i17);

* rewrite insertion dots
	if (count(Md205c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j8-j9,j,j8,j9,Md205c,dotmapMd205cR1)
	#call replace(i11,j2/2+j5/2-j7/2+j8-j9,j,j2,j5,j7,j8,j9,Md205c,dotmapMd205cR2)
	#call replace(i12,j3/2+j5/2-j6/2,j,j3,j5,j6,Md205c,dotmapMd205cR3)
	#call replace(i13,j3/2-j5/2-j6/2,j,j3,j5,j6,Md205c,dotmapMd205cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md205c,dotmapMd205cR5)
	#call replace(i15,j1/2+j3/2-j4/2,j,j1,j3,j4,Md205c,dotmapMd205cR6)
	#call replace(i16,j1/2-j2/2+j3/2-j4/2-j5/2+j7/2-j8+j9,j,j1,j2,j3,j4,j5,j7,j8,j9,Md205c,dotmapMd205cR7)
	#call replace(i17,j3/2-j5/2+j6/2,j,j3,j5,j6,Md205c,dotmapMd205cR8)
	if (count(Md205c,1)) Multiply replace_(Md205c,Md205d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Md205d,1)) Multiply replace_(i1,j6,i2,j7,i3,j4,i4,j1,i5,j5,i6,j2,i7,j3,i8,j8);
	#call replace(i9,j8-j9,j,j8,j9,Md205d,dotmapMd205dR1)
	if (count(Md205d,1)) Multiply replace_(Md205d,Mbustar5,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPObustar5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared205()
* Topology: 0-1 1-2 1-5 2-3 2-7 3-5 3-5 3-7 5-7 7-9
* Dots: p0.p3,p0.p7,p0.p5,p1.p5,p3.p5,p5.p7
* Apply automorphisms
if (match(Md205*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd205 automorphism;

#call CheckRemovedPropagators(d205,8,6,1,2,3,4,7,8,5,6)
#if `$DOACTION' == 0
.sort:reduce d205;
#endif
#endprocedure

#procedure Reduced205()
	#call Prepared205()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd205'
		#call MtoZ(Md205,Zd205,i,14)
		#call Reduce(d205)
		#call ZtoM(Zd205,Md205,i,14)
		#call Prepared205()
#else
		#if `USETURBO'
			#call TurboMd205()
		#endif
		#call insertionS(Md205,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i3,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md205b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond205()
#endif
	#endif
#endprocedure
*--#] reduce-d205 : 
*--#[ reduce-nostar5 :
#procedure Preparenostar5()
* Topology: 0-1 3-4 2-3 1-2 1-6 5-6* 4-5 3-6 2-5 4-9
* Dots: p0.p2
* Apply automorphisms
if (match(Mnostar5*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n7,$n8,$n4,$n5,$n6,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Znostar5 automorphism;

#call CheckRemovedPropagators(nostar5,8,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Mnostar5M1,1)) Multiply replace_(i2,j1,i3,j6,i4,j7,i5,j5,i6,j2,i7,j3,i8,j4);
	#call replace(i1,`Q2'+j2-2*j8+2*j9,j,j2,j8,j9,Mnostar5M1,dotmapMnostar5M1R1)
	#call replace(i9,`Q2'/2+j6/2-j7/2-j8,j,j6,j7,j8,Mnostar5M1,dotmapMnostar5M1R2)
	if (count(Mnostar5M1,1)) Multiply replace_(Mnostar5M1,Mbustar5,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPObustar5 "1"
#endif

#if `$M2'
* map dots to p1.p3,p0.p2 and change topology to fastar2
	if (count(Mnostar5M2,1)) Multiply replace_(i1,j5,i3,j4,i4,j3,i5,j2,i6,j1,i7,j7,i8,j6);
	#call replace(i2,-`Q2'-j1-j2-j3+j4+j5+j6+j7-2*j8-2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Mnostar5M2,dotmapMnostar5M2R1)
	#call replace(i9,-j1/2-j3/2+j4/2+j5/2-j9,j,j1,j3,j4,j5,j9,Mnostar5M2,dotmapMnostar5M2R2)
	if (count(Mnostar5M2,1)) Multiply replace_(Mnostar5M2,Mfastar2,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOfastar2 "1"
#endif

#if `$M3'
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Mnostar5M3,1)) Multiply replace_(i1,j6,i2,j1,i4,j2,i5,j5,i6,j7,i7,j4,i8,j3);
	#call replace(i3,`Q2'+j2+2*j8+2*j9,j,j2,j8,j9,Mnostar5M3,dotmapMnostar5M3R1)
	#call replace(i9,`Q2'/2+j6/2-j7/2+j8,j,j6,j7,j8,Mnostar5M3,dotmapMnostar5M3R2)
	if (count(Mnostar5M3,1)) Multiply replace_(Mnostar5M3,Mbustar5,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPObustar5 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Mnostar5M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i4,j1+j3-j5-2*j8+2*j9,j,j1,j3,j5,j8,j9,Mnostar5M4,dotmapMnostar5M4R1)
	if (count(Mnostar5M4,1)) Multiply replace_(Mnostar5M4,Md135,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd135 "1"
#endif

#if `$M6'
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Mnostar5M6,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j5,i5,j4,i7,j7,i8,j6,i9,j8);
	#call replace(i6,j1+j3-j5-2*j8-2*j9,j,j1,j3,j5,j8,j9,Mnostar5M6,dotmapMnostar5M6R1)
	if (count(Mnostar5M6,1)) Multiply replace_(Mnostar5M6,Md135,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd135 "1"
#endif

#if `$M7'
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Mnostar5M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7);
	#call replace(i7,j1+j2+j5-j6-j7+2*j8-2*j9,j,j1,j2,j5,j6,j7,j8,j9,Mnostar5M7,dotmapMnostar5M7R1)
	#call replace(i9,`Q2'/2+j3/2-j4/2-j8,j,j3,j4,j8,Mnostar5M7,dotmapMnostar5M7R2)
	if (count(Mnostar5M7,1)) Multiply replace_(Mnostar5M7,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
#endif

#if `$M8'
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Mnostar5M8,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j6,i5,j5,i6,j4,i7,j7);
	#call replace(i8,j1+j2+j5-j6-j7-2*j8-2*j9,j,j1,j2,j5,j6,j7,j8,j9,Mnostar5M8,dotmapMnostar5M8R1)
	#call replace(i9,`Q2'/2+j3/2-j4/2+j8,j,j3,j4,j8,Mnostar5M8,dotmapMnostar5M8R2)
	if (count(Mnostar5M8,1)) Multiply replace_(Mnostar5M8,Md128,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd128 "1"
#endif
.sort:reduce nostar5;
#endif
#endprocedure

#procedure Reducenostar5()
	#call Preparenostar5()
	#if `$DOACTION'
		#call MtoZ(Mnostar5,Znostar5,i,9)
		#call Reduce(nostar5)
		#call ZtoM(Znostar5,Mnostar5,i,9)
		#call Preparenostar5()
	#endif
#endprocedure
*--#] reduce-nostar5 : 
*--#[ reduce-nostar6 :
#procedure Preparenostar6()
* Topology: 0-1 3-4 2-3 1-2 1-6 5-6 4-5* 3-6 2-5 4-9
* Dots: p0.p2
* Apply automorphisms
if (match(Mnostar6*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n5,$n2,$n6,$n8,$n3,$n4,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9)*replace_(i2,i7,i3,i4,i4,i3,i5,i8,i7,i2,i8,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Znostar6 automorphism;

#call CheckRemovedPropagators(nostar6,8,1,6)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p7 and change topology to d136
	if (count(Mnostar6M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j5+2*j8-2*j9,j,j5,j8,j9,Mnostar6M1,dotmapMnostar6M1R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Mnostar6M1,dotmapMnostar6M1R2)
	if (count(Mnostar6M1,1)) Multiply replace_(Mnostar6M1,Md136,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd136 "1"
#endif

#if `$M2'
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Mnostar6M2,1)) Multiply replace_(i1,j5,i3,j4,i4,j3,i5,j2,i6,j1,i7,j7,i8,j6);
	#call replace(i2,-`Q2'-j1-j2-j3+j4+j5+j6+j7-2*j8-2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Mnostar6M2,dotmapMnostar6M2R1)
	#call replace(i9,-j1/2-j3/2+j4/2+j5/2-j9,j,j1,j3,j4,j5,j9,Mnostar6M2,dotmapMnostar6M2R2)
	if (count(Mnostar6M2,1)) Multiply replace_(Mnostar6M2,Mfastar3,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOfastar3 "1"
#endif

#if `$M3'
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Mnostar6M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i3,`Q2'+j3+2*j8+2*j9,j,j3,j8,j9,Mnostar6M3,dotmapMnostar6M3R1)
	#call replace(i9,`Q2'/2+j1/2-j5/2+j9,j,j1,j5,j9,Mnostar6M3,dotmapMnostar6M3R2)
	if (count(Mnostar6M3,1)) Multiply replace_(Mnostar6M3,Md127,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd127 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Mnostar6M4,1)) Multiply replace_(i1,j1,i2,j6,i3,j3,i5,j7,i6,j5,i7,j2,i8,j4,i9,j9);
	#call replace(i4,`Q2'+j3-2*j8-2*j9,j,j3,j8,j9,Mnostar6M4,dotmapMnostar6M4R1)
	if (count(Mnostar6M4,1)) Multiply replace_(Mnostar6M4,Md127,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd127 "1"
#endif

#if `$M5'
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Mnostar6M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i5,-`Q2'-j1-j2-j3+j4+j5+j6+j7+2*j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Mnostar6M5,dotmapMnostar6M5R1)
	if (count(Mnostar6M5,1)) Multiply replace_(Mnostar6M5,Md144,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd144 "1"
#endif

#if `$M7'
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Mnostar6M7,1)) Multiply replace_(i1,j5,i2,j7,i3,j3,i4,j4,i5,j6,i6,j1,i8,j2);
	#call replace(i7,-`Q2'-j1-j2-j3+j4+j5+j6+j7-2*j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Mnostar6M7,dotmapMnostar6M7R1)
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Mnostar6M7,dotmapMnostar6M7R2)
	if (count(Mnostar6M7,1)) Multiply replace_(Mnostar6M7,Mfastar3,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOfastar3 "1"
#endif

#if `$M8'
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Mnostar6M8,1)) Multiply replace_(i1,j1,i2,j6,i3,j4,i4,j3,i5,j7,i6,j5,i7,j2);
	#call replace(i8,-`Q2'-j1-j2-j3+j4+j5+j6+j7-2*j8+2*j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Mnostar6M8,dotmapMnostar6M8R1)
	#call replace(i9,`Q2'/2+j1/2-j5/2+j8,j,j1,j5,j8,Mnostar6M8,dotmapMnostar6M8R2)
	if (count(Mnostar6M8,1)) Multiply replace_(Mnostar6M8,Md144,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd144 "1"
#endif
.sort:reduce nostar6;
#endif
#endprocedure

#procedure Reducenostar6()
	#call Preparenostar6()
	#if `$DOACTION'
		#call MtoZ(Mnostar6,Znostar6,i,9)
		#call Reduce(nostar6)
		#call ZtoM(Znostar6,Mnostar6,i,9)
		#call Preparenostar6()
	#endif
#endprocedure
*--#] reduce-nostar6 : 
*--#[ reduce-nostar0 :
#procedure Preparenostar0()
* Topology: 0-1* 3-4 2-3 1-2 1-6 5-6 4-5 3-6 2-5 4-9
* Dots: p0.p2
* Apply automorphisms
if (match(Mnostar0*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0));
	#call hash(0,$n9,$n2,$n5,$n1,$n7,$n4,$n3,$n8,$n6)
	#call hash(1,$n9,$n5,$n2,$n6,$n8,$n3,$n4,$n7,$n1)
	#call hash(2,$n9,$n7,$n8,$n1,$n2,$n3,$n4,$n5,$n6)
	#call hash(3,$n9,$n2,$n5,$n3,$n8,$n6,$n1,$n7,$n4)
	#call hash(4,$n9,$n5,$n2,$n4,$n7,$n1,$n6,$n8,$n3)
	#call hash(5,$n9,$n8,$n7,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n4,$n5,$n6,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i2,i8,i5,i7,i6,i1,i7,i5,i8,i2);
elseif ($bestiso == 1); Multiply sign_($n9)*replace_(i2,i7,i3,i4,i4,i3,i5,i8,i7,i2,i8,i5);
elseif ($bestiso == 2); Multiply sign_($n9)*replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1,i7,i8,i8,i7);
elseif ($bestiso == 3); Multiply sign_($n9)*replace_(i1,i4,i2,i7,i3,i1,i4,i6,i5,i8,i6,i3,i7,i5,i8,i2);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i2,i8,i3,i6,i4,i1,i5,i7,i6,i4,i7,i2,i8,i5);
elseif ($bestiso == 5); Multiply sign_($n9)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Znostar0 automorphism;

#call CheckRemovedPropagators(nostar0,8,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Mnostar0M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j5+2*j8-2*j9,j,j5,j8,j9,Mnostar0M1,dotmapMnostar0M1R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Mnostar0M1,dotmapMnostar0M1R2)
	if (count(Mnostar0M1,1)) Multiply replace_(Mnostar0M1,Md118,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd118 "1"
#endif

#if `$M2'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Mnostar0M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i2,-`Q2'-j4+j6+j7-2*j8+2*j9,j,j4,j6,j7,j8,j9,Mnostar0M2,dotmapMnostar0M2R1)
	#call replace(i9,j1/2+j2/2-j3/2-j5/2-j8,j,j1,j2,j3,j5,j8,Mnostar0M2,dotmapMnostar0M2R2)
	if (count(Mnostar0M2,1)) Multiply replace_(Mnostar0M2,Md137,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd137 "1"
#endif

#if `$M3'
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Mnostar0M3,1)) Multiply replace_(i1,j2,i2,j1,i4,j5,i5,j4,i6,j3,i7,j7,i8,j6);
	#call replace(i3,`Q2'+j5+2*j8+2*j9,j,j5,j8,j9,Mnostar0M3,dotmapMnostar0M3R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Mnostar0M3,dotmapMnostar0M3R2)
	if (count(Mnostar0M3,1)) Multiply replace_(Mnostar0M3,Md118,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd118 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Mnostar0M4,1)) Multiply replace_(i1,j2,i2,j7,i3,j5,i5,j6,i6,j3,i7,j1,i8,j4,i9,j9);
	#call replace(i4,`Q2'+j5-2*j8-2*j9,j,j5,j8,j9,Mnostar0M4,dotmapMnostar0M4R1)
	if (count(Mnostar0M4,1)) Multiply replace_(Mnostar0M4,Md118,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd118 "1"
#endif

#if `$M5'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Mnostar0M5,1)) Multiply replace_(i1,j5,i2,j4,i3,j3,i4,j2,i6,j1,i7,j7,i8,j6,i9,j8);
	#call replace(i5,-`Q2'-j4+j6+j7+2*j8-2*j9,j,j4,j6,j7,j8,j9,Mnostar0M5,dotmapMnostar0M5R1)
	if (count(Mnostar0M5,1)) Multiply replace_(Mnostar0M5,Md137,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd137 "1"
#endif

#if `$M6'
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Mnostar0M6,1)) Multiply replace_(i1,j5,i2,j7,i3,j2,i4,j3,i5,j6,i7,j4,i8,j1,i9,j9);
	#call replace(i6,`Q2'+j5+2*j8-2*j9,j,j5,j8,j9,Mnostar0M6,dotmapMnostar0M6R1)
	if (count(Mnostar0M6,1)) Multiply replace_(Mnostar0M6,Md118,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd118 "1"
#endif

#if `$M7'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Mnostar0M7,1)) Multiply replace_(i1,j1,i2,j6,i3,j3,i4,j2,i5,j7,i6,j5,i8,j4);
	#call replace(i7,-`Q2'-j4+j6+j7+2*j8+2*j9,j,j4,j6,j7,j8,j9,Mnostar0M7,dotmapMnostar0M7R1)
	#call replace(i9,`Q2'/2-j2/2+j3/2-j8,j,j2,j3,j8,Mnostar0M7,dotmapMnostar0M7R2)
	if (count(Mnostar0M7,1)) Multiply replace_(Mnostar0M7,Md137,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd137 "1"
#endif

#if `$M8'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Mnostar0M8,1)) Multiply replace_(i1,j5,i2,j7,i3,j2,i4,j3,i5,j6,i6,j1,i7,j4);
	#call replace(i8,-`Q2'-j4+j6+j7-2*j8+2*j9,j,j4,j6,j7,j8,j9,Mnostar0M8,dotmapMnostar0M8R1)
	#call replace(i9,`Q2'/2-j1/2+j5/2+j8,j,j1,j5,j8,Mnostar0M8,dotmapMnostar0M8R2)
	if (count(Mnostar0M8,1)) Multiply replace_(Mnostar0M8,Md137,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd137 "1"
#endif
.sort:reduce nostar0;
#endif
#endprocedure

#procedure Reducenostar0()
	#call Preparenostar0()
	#if `$DOACTION'
		#call MtoZ(Mnostar0,Znostar0,i,9)
		#call Reduce(nostar0)
		#call ZtoM(Znostar0,Mnostar0,i,9)
		#call Preparenostar0()
	#endif
#endprocedure
*--#] reduce-nostar0 : 
*--#[ reduce-d201 :
#procedure Prepared201()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-6* 3-8 5-6 6-8 8-9
* Dots: p4.p5
* Apply automorphisms
if (match(Md201*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n3+$n7)
	#call hash(1,$n9,$n6,$n3,$n8,$n5,$n4,$n7,$n1,$n2,$n4+$n7+$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i7,i6,i8,i7,i3,i8,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd201 automorphism;

#call CheckRemovedPropagators(d201,8,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p1.p4 and change topology to d123
	if (count(Md201M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j1-2*j8,j,j1,j8,Md201M1,dotmapMd201M1R1)
	#call replace(i9,-j4/2-j6/2+j7/2-j9,j,j4,j6,j7,j9,Md201M1,dotmapMd201M1R2)
	if (count(Md201M1,1)) Multiply replace_(Md201M1,Md123,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd123 "1"
#endif

#if `$M2'
* map dots to p0.p1,p1.p4 and change topology to d123
	if (count(Md201M2,1)) Multiply replace_(i1,j1,i3,j6,i4,j3,i5,j4,i6,j7,i7,j2,i8,j5);
	#call replace(i2,`Q2'+j1-2*j8,j,j1,j8,Md201M2,dotmapMd201M2R1)
	#call replace(i9,-j4/2-j6/2+j7/2+j9,j,j4,j6,j7,j9,Md201M2,dotmapMd201M2R2)
	if (count(Md201M2,1)) Multiply replace_(Md201M2,Md123,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd123 "1"
#endif

#if `$M3'
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Md201M3,1)) Multiply replace_(i1,j4,i2,j3,i4,j2,i5,j5,i6,j1,i7,j7,i8,j6);
	#call replace(i3,`Q2'+j7-2*j8,j,j7,j8,Md201M3,dotmapMd201M3R1)
	#call replace(i9,-`Q2'/2-j2/2+j4/2-j5/2+j6/2+j9,j,j2,j4,j5,j6,j9,Md201M3,dotmapMd201M3R2)
	if (count(Md201M3,1)) Multiply replace_(Md201M3,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
#endif

#if `$M4'
* map dots to p1.p3,p1.p4 and change topology to d120
	if (count(Md201M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i4,j1+j3-2*j8,j,j1,j3,j8,Md201M4,dotmapMd201M4R1)
	#call replace(i9,-j3/2-j4/2+j5/2+j9,j,j3,j4,j5,j9,Md201M4,dotmapMd201M4R2)
	if (count(Md201M4,1)) Multiply replace_(Md201M4,Md120,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd120 "1"
#endif

#if `$M6'
* map dots to p0.p5,p1.p5 and change topology to d116
	if (count(Md201M6,1)) Multiply replace_(i1,j2,i2,j1,i3,j6,i4,j4,i5,j5,i7,j3,i8,j7);
	#call replace(i6,-j3+j6+j7-2*j8,j,j3,j6,j7,j8,Md201M6,dotmapMd201M6R1)
	#call replace(i9,-j3/2-j5/2+j7/2-j9,j,j3,j5,j7,j9,Md201M6,dotmapMd201M6R2)
	if (count(Md201M6,1)) Multiply replace_(Md201M6,Md116,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd116 "1"
#endif

#if `$M7'
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Md201M7,1)) Multiply replace_(i1,j3,i2,j4,i3,j7,i4,j2,i5,j5,i6,j6,i8,j1);
	#call replace(i7,`Q2'+j7-2*j8,j,j7,j8,Md201M7,dotmapMd201M7R1)
	#call replace(i9,-`Q2'/2-j2/2+j4/2-j5/2+j6/2+j9,j,j2,j4,j5,j6,j9,Md201M7,dotmapMd201M7R2)
	if (count(Md201M7,1)) Multiply replace_(Md201M7,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
#endif

#if `$M8'
* map dots to p0.p5,p1.p5 and change topology to d116
	if (count(Md201M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i7,j6);
	#call replace(i8,-j3+j6+j7+2*j8,j,j3,j6,j7,j8,Md201M8,dotmapMd201M8R1)
	#call replace(i9,-j3/2-j5/2+j7/2+j9,j,j3,j5,j7,j9,Md201M8,dotmapMd201M8R2)
	if (count(Md201M8,1)) Multiply replace_(Md201M8,Md116,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd116 "1"
#endif
.sort:reduce d201;
#endif
#endprocedure

#procedure Reduced201()
	#call Prepared201()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd201'
		#call MtoZ(Md201,Zd201,i,9)
		#call Reduce(d201)
		#call ZtoM(Zd201,Md201,i,9)
#else
		#if `USETURBO'
			#call TurboMd201()
		#endif
		#call triangleS(Md201,i1,i2,i4,i3,i7,i9,0,0)
#endif
		#call Prepared201()
	#endif
#endprocedure
*--#] reduce-d201 : 
*--#[ reduce-lastar5 :
#procedure Preparelastar5()
* Topology: 0-1 3-4 2-3 1-2 1-6 5-6* 4-5 3-5 2-6 4-9
* Dots: p1.p3
* Apply automorphisms
if (match(Mlastar5*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n7,$n8,$n4,$n5,$n6,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zlastar5 automorphism;

#call CheckRemovedPropagators(lastar5,8,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p5,p2.p5 and change topology to d114
	if (count(Mlastar5M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j5+2*j8,j,j5,j8,Mlastar5M1,dotmapMlastar5M1R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Mlastar5M1,dotmapMlastar5M1R2)
	if (count(Mlastar5M1,1)) Multiply replace_(Mlastar5M1,Md114,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd114 "1"
#endif

#if `$M2'
* map dots to p1.p3,p0.p2 and change topology to fastar2
	if (count(Mlastar5M2,1)) Multiply replace_(i1,j5,i3,j4,i4,j3,i5,j2,i6,j1,i7,j6,i8,j7);
	#call replace(i2,`Q2'+j2+2*j9,j,j2,j9,Mlastar5M2,dotmapMlastar5M2R1)
	#call replace(i9,-j1/2-j3/2+j4/2+j5/2-j8,j,j1,j3,j4,j5,j8,Mlastar5M2,dotmapMlastar5M2R2)
	if (count(Mlastar5M2,1)) Multiply replace_(Mlastar5M2,Mfastar2,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOfastar2 "1"
#endif

#if `$M3'
* map dots to p0.p5,p2.p5 and change topology to d114
	if (count(Mlastar5M3,1)) Multiply replace_(i1,j2,i2,j1,i4,j5,i5,j4,i6,j3,i7,j7,i8,j6);
	#call replace(i3,`Q2'+j5-2*j8,j,j5,j8,Mlastar5M3,dotmapMlastar5M3R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Mlastar5M3,dotmapMlastar5M3R2)
	if (count(Mlastar5M3,1)) Multiply replace_(Mlastar5M3,Md114,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd114 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3 and change topology to d115
	if (count(Mlastar5M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j9);
	#call replace(i4,`Q2'+j3-2*j8,j,j3,j8,Mlastar5M4,dotmapMlastar5M4R1)
	if (count(Mlastar5M4,1)) Multiply replace_(Mlastar5M4,Md115,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd115 "1"
#endif

#if `$M6'
* map dots to p0.p3,p1.p3 and change topology to d115
	if (count(Mlastar5M6,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j5,i5,j4,i7,j7,i8,j6,i9,j9);
	#call replace(i6,`Q2'+j3-2*j8,j,j3,j8,Mlastar5M6,dotmapMlastar5M6R1)
	if (count(Mlastar5M6,1)) Multiply replace_(Mlastar5M6,Md115,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd115 "1"
#endif

#if `$M7'
* map dots to p1.p2,p1.p3 and change topology to d119
	if (count(Mlastar5M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j9);
	#call replace(i7,j1+j2-2*j8,j,j1,j2,j8,Mlastar5M7,dotmapMlastar5M7R1)
	if (count(Mlastar5M7,1)) Multiply replace_(Mlastar5M7,Md119,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd119 "1"
#endif

#if `$M8'
* map dots to p1.p2,p1.p3 and change topology to d119
	if (count(Mlastar5M8,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j6,i5,j5,i6,j4,i7,j7,i9,j9);
	#call replace(i8,j1+j2-2*j8,j,j1,j2,j8,Mlastar5M8,dotmapMlastar5M8R1)
	if (count(Mlastar5M8,1)) Multiply replace_(Mlastar5M8,Md119,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd119 "1"
#endif
.sort:reduce lastar5;
#endif
#endprocedure

#procedure Reducelastar5()
	#call Preparelastar5()
	#if `$DOACTION'
		#call MtoZ(Mlastar5,Zlastar5,i,9)
		#call Reduce(lastar5)
		#call ZtoM(Zlastar5,Mlastar5,i,9)
		#call Preparelastar5()
	#endif
#endprocedure
*--#] reduce-lastar5 : 
*--#[ reduce-d199 :
#procedure Prepared199()
* Topology: 0-1 1-2 1-6 2-3 2-5 3-5 3-7* 5-6 6-7 7-9
* Dots: p0.p4
* Apply automorphisms
if (match(Md199*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd199 automorphism;

#call CheckRemovedPropagators(d199,8,1,6)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Md199M1,1)) Multiply replace_(i2,j2,i3,j7,i4,j3,i5,j4,i6,j5,i7,j6,i8,j1);
	#call replace(i1,-j1+j2+j5+2*j9,j,j1,j2,j5,j9,Md199M1,dotmapMd199M1R1)
	#call replace(i9,-j8+j9,j,j8,j9,Md199M1,dotmapMd199M1R2)
	if (count(Md199M1,1)) Multiply replace_(Md199M1,Md127,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd127 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2 and change topology to d126
	if (count(Md199M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i2,`Q2'+j1-2*j8,j,j1,j8,Md199M2,dotmapMd199M2R1)
	#call replace(i9,j8-j9,j,j8,j9,Md199M2,dotmapMd199M2R2)
	if (count(Md199M2,1)) Multiply replace_(Md199M2,Md126,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd126 "1"
#endif

#if `$M3'
* map dots to p0.p4,p1.p4 and change topology to d146
	if (count(Md199M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j4,i5,j5,i6,j3,i7,j6,i8,j7,i9,j8);
	#call replace(i3,j1+j4-2*j9,j,j1,j4,j9,Md199M3,dotmapMd199M3R1)
	if (count(Md199M3,1)) Multiply replace_(Md199M3,Md146,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd146 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3 and change topology to d131
	if (count(Md199M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i4,j1+j3-2*j9,j,j1,j3,j9,Md199M4,dotmapMd199M4R1)
	#call replace(i9,`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md199M4,dotmapMd199M4R2)
	if (count(Md199M4,1)) Multiply replace_(Md199M4,Md131,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd131 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3 and change topology to d130
	if (count(Md199M5,1)) Multiply replace_(i1,j5,i2,j7,i3,j3,i4,j4,i6,j1,i7,j2,i8,j6);
	#call replace(i5,j1+j3-2*j9,j,j1,j3,j9,Md199M5,dotmapMd199M5R1)
	#call replace(i9,`Q2'/2+j5/2-j7/2-j8,j,j5,j7,j8,Md199M5,dotmapMd199M5R2)
	if (count(Md199M5,1)) Multiply replace_(Md199M5,Md130,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd130 "1"
#endif

#if `$M7'
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Md199M7,1)) Multiply replace_(i1,j3,i2,j4,i3,j2,i4,j7,i5,j6,i6,j1,i8,j5);
	#call replace(i7,j1+j3-2*j8,j,j1,j3,j8,Md199M7,dotmapMd199M7R1)
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md199M7,dotmapMd199M7R2)
	if (count(Md199M7,1)) Multiply replace_(Md199M7,Mfastar3,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOfastar3 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p4 and change topology to d140
	if (count(Md199M8,1)) Multiply replace_(i1,j5,i2,j1,i3,j6,i4,j4,i5,j7,i6,j2,i7,j3,i9,j9);
	#call replace(i8,`Q2'+j2-2*j8,j,j2,j8,Md199M8,dotmapMd199M8R1)
	if (count(Md199M8,1)) Multiply replace_(Md199M8,Md140,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd140 "1"
#endif
.sort:reduce d199;
#endif
#endprocedure

#procedure Reduced199()
	#call Prepared199()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd199'
		#call MtoZ(Md199,Zd199,i,9)
		#call Reduce(d199)
		#call ZtoM(Zd199,Md199,i,9)
#else
		#if `USETURBO'
			#call TurboMd199()
		#endif
		#call triangleS(Md199,i3,i5,i4,i1,i7,i9,0,0)
#endif
		#call Prepared199()
	#endif
#endprocedure
*--#] reduce-d199 : 
*--#[ reduce-d198 :
#procedure Prepared198()
* Topology: 0-1 4-8 2-8 1-4 1-5 3-4 2-5* 2-3 3-5 8-9
* Dots: p0.p7
* Apply automorphisms
if (match(Md198*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n2+$n5)
	#call hash(1,$n9,$n7,$n8,$n6,$n5,$n2,$n1,$n4,$n3,$n8+$n4+$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd198 automorphism;

#call CheckRemovedPropagators(d198,8,1,6)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p5 and change topology to d134
	if (count(Md198M1,1)) Multiply replace_(i2,j4,i3,j1,i4,j2,i5,j3,i6,j5,i7,j6,i8,j7);
	#call replace(i1,j1-j2+j4+2*j8,j,j1,j2,j4,j8,Md198M1,dotmapMd198M1R1)
	#call replace(i9,-`Q2'/2+j1/2-j2/2+j8-j9,j,j1,j2,j8,j9,Md198M1,dotmapMd198M1R2)
	if (count(Md198M1,1)) Multiply replace_(Md198M1,Md134,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd134 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Md198M2,1)) Multiply replace_(i1,j6,i3,j1,i4,j5,i5,j2,i6,j4,i7,j3,i8,j7);
	#call replace(i2,-j1+j5+j6-2*j8,j,j1,j5,j6,j8,Md198M2,dotmapMd198M2R1)
	#call replace(i9,-`Q2'/2+j1/2-j5/2+j8-j9,j,j1,j5,j8,j9,Md198M2,dotmapMd198M2R2)
	if (count(Md198M2,1)) Multiply replace_(Md198M2,Md135,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd135 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p5 and change topology to d134
	if (count(Md198M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j4,i5,j3,i6,j5,i7,j7,i8,j6);
	#call replace(i3,j1-j2+j4+2*j8,j,j1,j2,j4,j8,Md198M3,dotmapMd198M3R1)
	#call replace(i9,-`Q2'/2+j1/2-j2/2-j9,j,j1,j2,j9,Md198M3,dotmapMd198M3R2)
	if (count(Md198M3,1)) Multiply replace_(Md198M3,Md134,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd134 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Md198M4,1)) Multiply replace_(i1,j1,i2,j5,i3,j6,i5,j2,i6,j4,i7,j7,i8,j3);
	#call replace(i4,-j1+j5+j6+2*j8,j,j1,j5,j6,j8,Md198M4,dotmapMd198M4R1)
	#call replace(i9,-`Q2'/2+j1/2-j5/2+j9,j,j1,j5,j9,Md198M4,dotmapMd198M4R2)
	if (count(Md198M4,1)) Multiply replace_(Md198M4,Md135,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd135 "1"
#endif

#if `$M5'
* map dots to p1.p3,p0.p2 and change topology to fastar2
	if (count(Md198M5,1)) Multiply replace_(i1,j5,i2,j1,i3,j4,i4,j3,i6,j2,i7,j6,i8,j7);
	#call replace(i5,j1+j3-2*j8,j,j1,j3,j8,Md198M5,dotmapMd198M5R1)
	#call replace(i9,-`Q2'/2-j1/2+j5/2-j9,j,j1,j5,j9,Md198M5,dotmapMd198M5R2)
	if (count(Md198M5,1)) Multiply replace_(Md198M5,Mfastar2,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOfastar2 "1"
#endif

#if `$M7'
* map dots to p0.p6,p3.p6 and change topology to d133
	if (count(Md198M7,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5,i6,j6,i8,j7);
	#call replace(i7,j4+j6+2*j8-2*j9,j,j4,j6,j8,j9,Md198M7,dotmapMd198M7R1)
	#call replace(i9,-`Q2'/2+j3/2-j4/2-j8,j,j3,j4,j8,Md198M7,dotmapMd198M7R2)
	if (count(Md198M7,1)) Multiply replace_(Md198M7,Md133,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd133 "1"
#endif

#if `$M8'
* map dots to p0.p6,p3.p6 and change topology to d133
	if (count(Md198M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,j4+j6+2*j8-2*j9,j,j4,j6,j8,j9,Md198M8,dotmapMd198M8R1)
	#call replace(i9,-`Q2'/2+j1/2-j2/2-j8,j,j1,j2,j8,Md198M8,dotmapMd198M8R2)
	if (count(Md198M8,1)) Multiply replace_(Md198M8,Md133,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd133 "1"
#endif
.sort:reduce d198;
#endif
#endprocedure

#procedure Reduced198()
	#call Prepared198()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd198'
		#call MtoZ(Md198,Zd198,i,9)
		#call Reduce(d198)
		#call ZtoM(Zd198,Md198,i,9)
#else
		#if `USETURBO'
			#call TurboMd198()
		#endif
		#call triangleS(Md198,i6,i8,i7,i2,i5,i9,1,0)
#endif
		#call Prepared198()
	#endif
#endprocedure
*--#] reduce-d198 : 
*--#[ reduce-d197 :
#procedure Prepared197()
* Topology: 0-1* 1-6 1-3 3-4 3-5 4-5 4-7 5-6 6-7 7-9
* Dots: p0.p3
* Apply automorphisms
if (match(Md197*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n3+$n2+$n6)
	#call hash(1,$n9,$n1,$n7,$n2,$n4,$n5,$n3,$n6,$n8,$n3+$n6+$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i8,i2,i6,i4,i5,i5,i4,i6,i2,i8,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd197 automorphism;

#call CheckRemovedPropagators(d197,8,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2 and change topology to d121
	if (count(Md197M1,1)) Multiply replace_(i2,j1,i3,j3,i4,j2,i5,j4,i6,j6,i7,j5,i8,j7);
	#call replace(i1,`Q2'+j1-2*j8,j,j1,j8,Md197M1,dotmapMd197M1R1)
	#call replace(i9,j8-j9,j,j8,j9,Md197M1,dotmapMd197M1R2)
	if (count(Md197M1,1)) Multiply replace_(Md197M1,Md121,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd121 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md197M2,1)) Multiply replace_(i1,j6,i3,j1,i4,j5,i5,j7,i6,j2,i7,j4,i8,j3);
	#call replace(i2,j2-j3+j6+2*j8,j,j2,j3,j6,j8,Md197M2,dotmapMd197M2R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Md197M2,dotmapMd197M2R2)
	if (count(Md197M2,1)) Multiply replace_(Md197M2,Md118,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd118 "1"
#endif

#if `$M3'
* map dots to p0.p3,p1.p3 and change topology to d190
	if (count(Md197M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i3,j2+j3-2*j8+2*j9,j,j2,j3,j8,j9,Md197M3,dotmapMd197M3R1)
	#call replace(i9,`Q2'/2-j1/2+j2/2-j8,j,j1,j2,j8,Md197M3,dotmapMd197M3R2)
	if (count(Md197M3,1)) Multiply replace_(Md197M3,Md190,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd190 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3 and change topology to d191
	if (count(Md197M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i4,j2+j3-2*j8+2*j9,j,j2,j3,j8,j9,Md197M4,dotmapMd197M4R1)
	if (count(Md197M4,1)) Multiply replace_(Md197M4,Md191,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd191 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3 and change topology to d191
	if (count(Md197M5,1)) Multiply replace_(i1,j7,i2,j5,i3,j3,i4,j4,i6,j2,i7,j6,i8,j1,i9,j8);
	#call replace(i5,j2+j3-2*j8+2*j9,j,j2,j3,j8,j9,Md197M5,dotmapMd197M5R1)
	if (count(Md197M5,1)) Multiply replace_(Md197M5,Md191,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd191 "1"
#endif

#if `$M6'
* map dots to p0.p4,p0.p7 and change topology to d118
	if (count(Md197M6,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j7,i5,j5,i7,j4,i8,j6);
	#call replace(i6,j2-j3+j6-2*j8,j,j2,j3,j6,j8,Md197M6,dotmapMd197M6R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Md197M6,dotmapMd197M6R2)
	if (count(Md197M6,1)) Multiply replace_(Md197M6,Md118,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd118 "1"
#endif

#if `$M7'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Md197M7,1)) Multiply replace_(i1,j2,i2,j3,i3,j4,i4,j6,i5,j7,i6,j5,i8,j1,i9,j8);
	#call replace(i7,j1+j2-2*j9,j,j1,j2,j9,Md197M7,dotmapMd197M7R1)
	if (count(Md197M7,1)) Multiply replace_(Md197M7,Md137,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd137 "1"
#endif

#if `$M8'
* map dots to p0.p1,p0.p2 and change topology to d121
	if (count(Md197M8,1)) Multiply replace_(i1,j7,i2,j6,i3,j3,i4,j4,i5,j2,i6,j1,i7,j5);
	#call replace(i8,`Q2'+j1-2*j8,j,j1,j8,Md197M8,dotmapMd197M8R1)
	#call replace(i9,j8+j9,j,j8,j9,Md197M8,dotmapMd197M8R2)
	if (count(Md197M8,1)) Multiply replace_(Md197M8,Md121,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd121 "1"
#endif
.sort:reduce d197;
#endif
#endprocedure

#procedure Reduced197()
	#call Prepared197()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd197'
		#call MtoZ(Md197,Zd197,i,9)
		#call Reduce(d197)
		#call ZtoM(Zd197,Md197,i,9)
#else
		#if `USETURBO'
			#call TurboMd197()
		#endif
		#call triangleS(Md197,i4,i5,i3,i2,i6,i9,0,0)
#endif
		#call Prepared197()
	#endif
#endprocedure
*--#] reduce-d197 : 
*--#[ reduce-d196 :
#procedure Prepared196()
* Topology: 0-1 1-2* 2-3 3-4 3-5 4-5 4-8 1-5 2-8 8-9
* Dots: p0.p3
* Apply automorphisms
if (match(Md196*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd196 automorphism;

#call CheckRemovedPropagators(d196,8,1,1)
#if `$DOACTION' == 0

#if `$M2'
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Md196M2,1)) Multiply replace_(i1,j5,i3,j7,i4,j6,i5,j2,i6,j3,i7,j1,i8,j4);
	#call replace(i2,j1+j3-2*j9,j,j1,j3,j9,Md196M2,dotmapMd196M2R1)
	#call replace(i9,`Q2'/2+j3/2-j4/2+j8,j,j3,j4,j8,Md196M2,dotmapMd196M2R2)
	if (count(Md196M2,1)) Multiply replace_(Md196M2,Md144,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd144 "1"
#endif

#if `$M3'
* map dots to p0.p3,p2.p3 and change topology to d143
	if (count(Md196M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i3,j2+j3-2*j9,j,j2,j3,j9,Md196M3,dotmapMd196M3R1)
	#call replace(i9,j1/2+j5/2-j6/2-j7/2-j8,j,j1,j5,j6,j7,j8,Md196M3,dotmapMd196M3R2)
	if (count(Md196M3,1)) Multiply replace_(Md196M3,Md143,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd143 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3 and change topology to d142
	if (count(Md196M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i4,j2+j4-j5+2*j8-2*j9,j,j2,j4,j5,j8,j9,Md196M4,dotmapMd196M4R1)
	if (count(Md196M4,1)) Multiply replace_(Md196M4,Md142,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd142 "1"
#endif

#if `$M5'
* map dots to p0.p3,p1.p3 and change topology to d141
	if (count(Md196M5,1)) Multiply replace_(i1,j1,i2,j6,i3,j3,i4,j4,i6,j5,i7,j2,i8,j7,i9,j8);
	#call replace(i5,j4+j5-j6-2*j8+2*j9,j,j4,j5,j6,j8,j9,Md196M5,dotmapMd196M5R1)
	if (count(Md196M5,1)) Multiply replace_(Md196M5,Md141,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd141 "1"
#endif

#if `$M6'
* map dots to p0.p4,p0.p6 and change topology to d127
	if (count(Md196M6,1)) Multiply replace_(i1,j5,i2,j4,i3,j3,i4,j6,i5,j2,i7,j1,i8,j7);
	#call replace(i6,j1-j5+j7+2*j8,j,j1,j5,j7,j8,Md196M6,dotmapMd196M6R1)
	#call replace(i9,j8-j9,j,j8,j9,Md196M6,dotmapMd196M6R2)
	if (count(Md196M6,1)) Multiply replace_(Md196M6,Md127,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd127 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p4 and change topology to d135
	if (count(Md196M7,1)) Multiply replace_(i1,j4,i2,j7,i3,j2,i4,j3,i5,j6,i6,j1,i8,j5,i9,j8);
	#call replace(i7,`Q2'+j4-2*j9,j,j4,j9,Md196M7,dotmapMd196M7R1)
	if (count(Md196M7,1)) Multiply replace_(Md196M7,Md135,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd135 "1"
#endif

#if `$M8'
* map dots to p0.p2,p0.p3 and change topology to d124
	if (count(Md196M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i9,j9);
	#call replace(i8,j1+j6-j7-2*j8,j,j1,j6,j7,j8,Md196M8,dotmapMd196M8R1)
	if (count(Md196M8,1)) Multiply replace_(Md196M8,Md124,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd124 "1"
#endif
.sort:reduce d196;
#endif
#endprocedure

#procedure Reduced196()
	#call Prepared196()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd196'
		#call MtoZ(Md196,Zd196,i,9)
		#call Reduce(d196)
		#call ZtoM(Zd196,Md196,i,9)
#else
		#if `USETURBO'
			#call TurboMd196()
		#endif
		#call triangleS(Md196,i4,i5,i3,i2,i6,i9,0,0)
#endif
		#call Prepared196()
	#endif
#endprocedure
*--#] reduce-d196 : 
*--#[ reduce-d195 :
#procedure Prepared195()
* Topology: 0-1 1-2 1-6 2-4* 2-8 4-6 4-7 6-7 7-8 8-9
* Dots: p0.p7
* Apply automorphisms
if (match(Md195*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n2+$n8)
	#call hash(1,$n9,$n2,$n7,$n5,$n6,$n1,$n3,$n8,$n4,$n7+$n8+$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i2,i8,i4,i1,i5,i6,i6,i5,i8,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd195 automorphism;

#call CheckRemovedPropagators(d195,8,1,3)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p4 and change topology to d140
	if (count(Md195M1,1)) Multiply replace_(i2,j3,i3,j2,i4,j1,i5,j7,i6,j6,i7,j4,i8,j5,i9,j9);
	#call replace(i1,j1+j3-j5+2*j8,j,j1,j3,j5,j8,Md195M1,dotmapMd195M1R1)
	if (count(Md195M1,1)) Multiply replace_(Md195M1,Md140,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd140 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Md195M2,1)) Multiply replace_(i1,j3,i3,j5,i4,j7,i5,j2,i6,j4,i7,j1,i8,j6);
	#call replace(i2,j3+j6-j7-2*j9,j,j3,j6,j7,j9,Md195M2,dotmapMd195M2R1)
	#call replace(i9,`Q2'/2+j6/2-j7/2-j8,j,j6,j7,j8,Md195M2,dotmapMd195M2R2)
	if (count(Md195M2,1)) Multiply replace_(Md195M2,Mbustar5,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPObustar5 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p4 and change topology to d140
	if (count(Md195M4,1)) Multiply replace_(i1,j1,i2,j5,i3,j2,i5,j6,i6,j7,i7,j4,i8,j3,i9,j9);
	#call replace(i4,j1+j3-j5-2*j8,j,j1,j3,j5,j8,Md195M4,dotmapMd195M4R1)
	if (count(Md195M4,1)) Multiply replace_(Md195M4,Md140,<j1,i1>,...,<j7,i7>,j8,-i8,j9,i9);
	#redefine HASTOPOd140 "1"
#endif

#if `$M5'
* map dots to p0.p5,p2.p5 and change topology to d175
	if (count(Md195M5,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i6,j5,i7,j7,i8,j6);
	#call replace(i5,j2+j5-2*j9,j,j2,j5,j9,Md195M5,dotmapMd195M5R1)
	#call replace(i9,`Q2'/2-j1/2+j6/2-j8,j,j1,j6,j8,Md195M5,dotmapMd195M5R2)
	if (count(Md195M5,1)) Multiply replace_(Md195M5,Md175,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd175 "1"
#endif

#if `$M6'
* map dots to p0.p5,p2.p5 and change topology to d175
	if (count(Md195M6,1)) Multiply replace_(i1,j1,i2,j6,i3,j2,i4,j4,i5,j5,i7,j7,i8,j3);
	#call replace(i6,j2+j5-2*j9,j,j2,j5,j9,Md195M6,dotmapMd195M6R1)
	#call replace(i9,`Q2'/2-j1/2+j6/2+j8,j,j1,j6,j8,Md195M6,dotmapMd195M6R2)
	if (count(Md195M6,1)) Multiply replace_(Md195M6,Md175,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd175 "1"
#endif

#if `$M7'
* map dots to p0.p5,p1.p5 and change topology to d138
	if (count(Md195M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7);
	#call replace(i7,j2+j5+2*j8-2*j9,j,j2,j5,j8,j9,Md195M7,dotmapMd195M7R1)
	#call replace(i9,`Q2'/2-j1/2+j2/2+j8,j,j1,j2,j8,Md195M7,dotmapMd195M7R2)
	if (count(Md195M7,1)) Multiply replace_(Md195M7,Md138,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd138 "1"
#endif

#if `$M8'
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Md195M8,1)) Multiply replace_(i1,j7,i2,j6,i3,j5,i4,j3,i5,j4,i6,j2,i7,j1);
	#call replace(i8,j3+j6-j7+2*j9,j,j3,j6,j7,j9,Md195M8,dotmapMd195M8R1)
	#call replace(i9,`Q2'/2+j6/2-j7/2+j8,j,j6,j7,j8,Md195M8,dotmapMd195M8R2)
	if (count(Md195M8,1)) Multiply replace_(Md195M8,Mbustar5,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPObustar5 "1"
#endif
.sort:reduce d195;
#endif
#endprocedure

#procedure Reduced195()
	#call Prepared195()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd195'
		#call MtoZ(Md195,Zd195,i,9)
		#call Reduce(d195)
		#call ZtoM(Zd195,Md195,i,9)
#else
		#if `USETURBO'
			#call TurboMd195()
		#endif
		#call triangleS(Md195,i5,i6,i7,i2,i8,i9,0,0)
#endif
		#call Prepared195()
	#endif
#endprocedure
*--#] reduce-d195 : 
*--#[ reduce-d194 :
#procedure Prepared194()
* Topology: 0-1 4-8 6-8 1-4 1-5 2-4 2-6* 2-5 5-6 8-9
* Dots: p0.p7
* Apply automorphisms
if (match(Md194*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd194 automorphism;

#call CheckRemovedPropagators(d194,8,1,6)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p5 and change topology to d147
	if (count(Md194M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j1+2*j8,j,j1,j8,Md194M1,dotmapMd194M1R1)
	#call replace(i9,-`Q2'/2+j2/2-j3/2-j8-j9,j,j2,j3,j8,j9,Md194M1,dotmapMd194M1R2)
	if (count(Md194M1,1)) Multiply replace_(Md194M1,Md147,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd147 "1"
#endif

#if `$M2'
* map dots to p0.p4,p0.p7 and change topology to d136
	if (count(Md194M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j7,i6,j5,i7,j4,i8,j6,i9,j8);
	#call replace(i2,j1-j2+j3-2*j9,j,j1,j2,j3,j9,Md194M2,dotmapMd194M2R1)
	if (count(Md194M2,1)) Multiply replace_(Md194M2,Md136,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd136 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p5 and change topology to d134
	if (count(Md194M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i3,`Q2'+j3-2*j8,j,j3,j8,Md194M3,dotmapMd194M3R1)
	#call replace(i9,`Q2'/2-j1/2+j2/2-j8-j9,j,j1,j2,j8,j9,Md194M3,dotmapMd194M3R2)
	if (count(Md194M3,1)) Multiply replace_(Md194M3,Md134,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd134 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p5 and change topology to bustar5
	if (count(Md194M4,1)) Multiply replace_(i1,j6,i2,j7,i3,j1,i5,j4,i6,j5,i7,j2,i8,j3);
	#call replace(i4,j1-j6+j7+2*j8,j,j1,j6,j7,j8,Md194M4,dotmapMd194M4R1)
	#call replace(i9,-j8-j9,j,j8,j9,Md194M4,dotmapMd194M4R2)
	if (count(Md194M4,1)) Multiply replace_(Md194M4,Mbustar5,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPObustar5 "1"
#endif

#if `$M5'
* map dots to p0.p7,p1.p3 and change topology to d128
	if (count(Md194M5,1)) Multiply replace_(i1,j1,i2,j6,i3,j4,i4,j3,i6,j5,i7,j2,i8,j7);
	#call replace(i5,-`Q2'+j4+j6+2*j9,j,j4,j6,j9,Md194M5,dotmapMd194M5R1)
	#call replace(i9,-`Q2'/2-j3/2+j4/2+j8,j,j3,j4,j8,Md194M5,dotmapMd194M5R2)
	if (count(Md194M5,1)) Multiply replace_(Md194M5,Md128,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd128 "1"
#endif

#if `$M7'
* map dots to p0.p6,p3.p6 and change topology to d133
	if (count(Md194M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7);
	#call replace(i7,-j2+j5+j7+2*j8-2*j9,j,j2,j5,j7,j8,j9,Md194M7,dotmapMd194M7R1)
	#call replace(i9,-j1/2+j2/2+j3/2-j4/2-j8,j,j1,j2,j3,j4,j8,Md194M7,dotmapMd194M7R2)
	if (count(Md194M7,1)) Multiply replace_(Md194M7,Md133,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd133 "1"
#endif

#if `$M8'
* map dots to p0.p6,p1.p6 and change topology to d145
	if (count(Md194M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,j2+j6-2*j8+2*j9,j,j2,j6,j8,j9,Md194M8,dotmapMd194M8R1)
	#call replace(i9,-j1/2+j2/2+j3/2-j4/2-j8,j,j1,j2,j3,j4,j8,Md194M8,dotmapMd194M8R2)
	if (count(Md194M8,1)) Multiply replace_(Md194M8,Md145,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd145 "1"
#endif
.sort:reduce d194;
#endif
#endprocedure

#procedure Reduced194()
	#call Prepared194()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd194'
		#call MtoZ(Md194,Zd194,i,9)
		#call Reduce(d194)
		#call ZtoM(Zd194,Md194,i,9)
#else
		#if `USETURBO'
			#call TurboMd194()
		#endif
		#call triangleS(Md194,i6,i8,i7,i5,i4,i9,1,0)
#endif
		#call Prepared194()
	#endif
#endprocedure
*--#] reduce-d194 : 
*--#[ reduce-d193 :
#procedure Prepared193()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4* 4-6 5-6 3-6 4-9
* Dots: p4.p5
* Apply automorphisms
if (match(Md193*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd193 automorphism;

#call CheckRemovedPropagators(d193,8,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p1.p4 and change topology to d122
	if (count(Md193M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j1-2*j8,j,j1,j8,Md193M1,dotmapMd193M1R1)
	#call replace(i9,`Q2'/2-j2/2-j5/2+j7/2-j9,j,j2,j5,j7,j9,Md193M1,dotmapMd193M1R2)
	if (count(Md193M1,1)) Multiply replace_(Md193M1,Md122,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd122 "1"
#endif

#if `$M2'
* map dots to p0.p1,p1.p4 and change topology to d125
	if (count(Md193M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i2,`Q2'+j1-2*j8,j,j1,j8,Md193M2,dotmapMd193M2R1)
	#call replace(i9,-j2/2-j4/2+j7/2+j9,j,j2,j4,j7,j9,Md193M2,dotmapMd193M2R2)
	if (count(Md193M2,1)) Multiply replace_(Md193M2,Md125,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd125 "1"
#endif

#if `$M3'
* map dots to p0.p2,p1.p3 and change topology to d144
	if (count(Md193M3,1)) Multiply replace_(i1,j4,i2,j3,i4,j7,i5,j5,i6,j1,i7,j2,i8,j6);
	#call replace(i3,`Q2'+j2-2*j8,j,j2,j8,Md193M3,dotmapMd193M3R1)
	#call replace(i9,-`Q2'/2-j1/2-j2/2-j3/2+j4/2+j6/2+j8-j9,j,j1,j2,j3,j4,j6,j8,j9,Md193M3,dotmapMd193M3R2)
	if (count(Md193M3,1)) Multiply replace_(Md193M3,Md144,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd144 "1"
#endif

#if `$M4'
* map dots to p1.p3,p1.p4 and change topology to d117
	if (count(Md193M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i4,j1+j3-2*j8,j,j1,j3,j8,Md193M4,dotmapMd193M4R1)
	#call replace(i9,-j3/2-j4/2+j7/2+j9,j,j3,j4,j7,j9,Md193M4,dotmapMd193M4R2)
	if (count(Md193M4,1)) Multiply replace_(Md193M4,Md117,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd117 "1"
#endif

#if `$M6'
* map dots to p0.p5,p1.p5 and change topology to d116
	if (count(Md193M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j7);
	#call replace(i6,`Q2'+j5-2*j8,j,j5,j8,Md193M6,dotmapMd193M6R1)
	#call replace(i9,-j3/2-j5/2+j7/2+j9,j,j3,j5,j7,j9,Md193M6,dotmapMd193M6R2)
	if (count(Md193M6,1)) Multiply replace_(Md193M6,Md116,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd116 "1"
#endif

#if `$M7'
* map dots to p1.p3,p0.p2 and change topology to fastar3
	if (count(Md193M7,1)) Multiply replace_(i1,j3,i2,j4,i3,j2,i4,j7,i5,j1,i6,j5,i8,j6);
	#call replace(i7,`Q2'+j2-2*j9,j,j2,j9,Md193M7,dotmapMd193M7R1)
	#call replace(i9,-j1/2-j2/2+j6/2+j8,j,j1,j2,j6,j8,Md193M7,dotmapMd193M7R2)
	if (count(Md193M7,1)) Multiply replace_(Md193M7,Mfastar3,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOfastar3 "1"
#endif

#if `$M8'
* map dots to p1.p5,p3.p5 and change topology to d150
	if (count(Md193M8,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i7,j6);
	#call replace(i8,j3+j5-2*j9,j,j3,j5,j9,Md193M8,dotmapMd193M8R1)
	#call replace(i9,j8-j9,j,j8,j9,Md193M8,dotmapMd193M8R2)
	if (count(Md193M8,1)) Multiply replace_(Md193M8,Md150,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd150 "1"
#endif
.sort:reduce d193;
#endif
#endprocedure

#procedure Reduced193()
	#call Prepared193()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd193'
		#call MtoZ(Md193,Zd193,i,9)
		#call Reduce(d193)
		#call ZtoM(Zd193,Md193,i,9)
#else
		#if `USETURBO'
			#call TurboMd193()
		#endif
		#call triangleS(Md193,i1,i2,i4,i3,i7,i9,0,0)
#endif
		#call Prepared193()
	#endif
#endprocedure
*--#] reduce-d193 : 
*--#[ reduce-d192 :
#procedure Prepared192()
* Topology: 0-1* 1-2 2-3 2-6 3-4 3-5 4-5 5-6 1-6 4-9
* Dots: p3.p4
* Apply automorphisms
if (match(Md192*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n3+$n2+$n7)
	#call hash(1,$n9,$n1,$n2,$n4,$n5,$n6,$n3,$n7,$n8,$n3+$n7+$n2)
	#call hash(2,$n9,$n6,$n7,$n8,$n3,$n1,$n5,$n2,$n4,$n5+$n2+$n7)
	#call hash(3,$n9,$n4,$n2,$n1,$n3,$n8,$n5,$n7,$n6,$n5+$n7+$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i8,i2,i7,i4,i6,i6,i4,i7,i2,i8,i1);
elseif ($bestiso == 2); Multiply sign_($n9)*replace_(i1,i4,i3,i5,i4,i1,i5,i3,i6,i8,i8,i6);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i2,i7,i3,i5,i4,i8,i5,i3,i6,i1,i7,i2,i8,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd192 automorphism;

#call CheckRemovedPropagators(d192,8,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p2.p3 and change topology to d148
	if (count(Md192M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j9);
	#call replace(i1,j1-j6+j7+2*j8,j,j1,j6,j7,j8,Md192M1,dotmapMd192M1R1)
	if (count(Md192M1,1)) Multiply replace_(Md192M1,Md148,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd148 "1"
#endif

#if `$M2'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Md192M2,1)) Multiply replace_(i1,j2,i3,j6,i4,j1,i5,j7,i6,j5,i7,j4,i8,j3);
	#call replace(i2,`Q2'+j4+2*j8,j,j4,j8,Md192M2,dotmapMd192M2R1)
	#call replace(i9,-`Q2'/2-j1/2-j4/2+j7/2-j8+j9,j,j1,j4,j7,j8,j9,Md192M2,dotmapMd192M2R2)
	if (count(Md192M2,1)) Multiply replace_(Md192M2,Md137,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd137 "1"
#endif

#if `$M3'
* map dots to p1.p2,p1.p3 and change topology to d149
	if (count(Md192M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i3,j1+j2-2*j8,j,j1,j2,j8,Md192M3,dotmapMd192M3R1)
	#call replace(i9,-j2/2-j3/2+j4/2+j9,j,j2,j3,j4,j9,Md192M3,dotmapMd192M3R2)
	if (count(Md192M3,1)) Multiply replace_(Md192M3,Md149,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd149 "1"
#endif

#if `$M4'
* map dots to p0.p2,p2.p3 and change topology to d148
	if (count(Md192M4,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i5,j2,i6,j7,i7,j6,i8,j5);
	#call replace(i4,j1-j6+j7-2*j8,j,j1,j6,j7,j8,Md192M4,dotmapMd192M4R1)
	#call replace(i9,-j1/2+j2/2+j3/2-j4/2+j6/2-j7/2+j8-j9,j,j1,j2,j3,j4,j6,j7,j8,j9,Md192M4,dotmapMd192M4R2)
	if (count(Md192M4,1)) Multiply replace_(Md192M4,Md148,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd148 "1"
#endif

#if `$M5'
* map dots to p1.p2,p1.p3 and change topology to d149
	if (count(Md192M5,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j1,i6,j7,i7,j6,i8,j5);
	#call replace(i5,j1+j2-2*j8,j,j1,j2,j8,Md192M5,dotmapMd192M5R1)
	#call replace(i9,-j8+j9,j,j8,j9,Md192M5,dotmapMd192M5R2)
	if (count(Md192M5,1)) Multiply replace_(Md192M5,Md149,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd149 "1"
#endif

#if `$M6'
* map dots to p0.p2,p2.p3 and change topology to d148
	if (count(Md192M6,1)) Multiply replace_(i1,j5,i2,j6,i3,j4,i4,j2,i5,j7,i7,j1,i8,j3);
	#call replace(i6,`Q2'+j2-2*j8,j,j2,j8,Md192M6,dotmapMd192M6R1)
	#call replace(i9,-j2/2-j6/2+j7/2+j8-j9,j,j2,j6,j7,j8,j9,Md192M6,dotmapMd192M6R2)
	if (count(Md192M6,1)) Multiply replace_(Md192M6,Md148,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd148 "1"
#endif

#if `$M7'
* map dots to p0.p4,p1.p2 and change topology to d137
	if (count(Md192M7,1)) Multiply replace_(i1,j3,i2,j4,i3,j6,i4,j5,i5,j7,i6,j1,i8,j2);
	#call replace(i7,`Q2'+j4-2*j8,j,j4,j8,Md192M7,dotmapMd192M7R1)
	#call replace(i9,-j1/2-j2/2+j3/2-j4/2+j7/2-j9,j,j1,j2,j3,j4,j7,j9,Md192M7,dotmapMd192M7R2)
	if (count(Md192M7,1)) Multiply replace_(Md192M7,Md137,<j1,i1>,...,<j7,i7>,j8,-i8,j9,-i9);
	#redefine HASTOPOd137 "1"
#endif

#if `$M8'
* map dots to p0.p2,p2.p3 and change topology to d148
	if (count(Md192M8,1)) Multiply replace_(i1,j2,i2,j6,i3,j7,i4,j5,i5,j4,i6,j3,i7,j1);
	#call replace(i8,`Q2'+j2-2*j8,j,j2,j8,Md192M8,dotmapMd192M8R1)
	#call replace(i9,j4/2-j5/2-j6/2+j8+j9,j,j4,j5,j6,j8,j9,Md192M8,dotmapMd192M8R2)
	if (count(Md192M8,1)) Multiply replace_(Md192M8,Md148,<j1,i1>,...,<j7,i7>,j8,i8,j9,-i9);
	#redefine HASTOPOd148 "1"
#endif
.sort:reduce d192;
#endif
#endprocedure

#procedure Reduced192()
	#call Prepared192()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd192'
		#call MtoZ(Md192,Zd192,i,9)
		#call Reduce(d192)
		#call ZtoM(Zd192,Md192,i,9)
#else
		#if `USETURBO'
			#call TurboMd192()
		#endif
		#call triangleS(Md192,i1,i8,i3,i2,i7,i9,0,0)
#endif
		#call Prepared192()
	#endif
#endprocedure
*--#] reduce-d192 : 
#call ReduceEdge(8,\
d291,d290,d289,d288,d287,d286,d285,d284,d283,d282,d281,d280,d279,d278,d277,d276\
,d275,d274,d273,d272,d271,d270,d269,d268,d267,d266,d265,d264,d263,d262,d261,\
d260,d259,d258,d257,d256,d255,d254,d253,d252,d251,d250,d249,d248,d247,d246,d245\
,d244,d243,d242,d241,d240,d239,d238,d237,d236,d235,d234,d233,d232,d231,d230,\
d229,d228,d227,d226,d225,d224,d223,d222,d221,d220,d219,d218,d217,d216,d215,bebe\
,d213,d212,d211,cross,d209,d208,d207,d206,d205,nostar5,nostar6,nostar0,d201,\
lastar5,d199,d198,d197,d196,d195,d194,d193,d192\
)
*--#] 8 edges : 
*--#[ 7 edges :
*--#[ reduce-d191 :
#procedure Insertiond191()
* merge propagators with same momentum, and repeated dots
	if (count(Md191b,1)) Multiply replace_(Md191b,Md191c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md191c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j3/2-j5/2,j,j3,j5,Md191c,dotmapMd191cR1)
	#call replace(i7,`Q2'/2-j2/2+j4/2-j5/2,j,j2,j4,j5,Md191c,dotmapMd191cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md191c,dotmapMd191cR3)
	if (count(Md191c,1)) Multiply replace_(Md191c,Md191d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md191d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5);
	if (count(Md191d,1)) Multiply replace_(Md191d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared191()
* Topology: 0-1* 1-6 1-3 3-4 3-4 4-7 3-6 6-7 7-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md191*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd191 automorphism;

#call CheckRemovedPropagators(d191,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d191;
#endif
#endprocedure

#procedure Reduced191()
	#call Prepared191()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd191'
		#call MtoZ(Md191,Zd191,i,9)
		#call Reduce(d191)
		#call ZtoM(Zd191,Md191,i,9)
		#call Prepared191()
#else
		#if `USETURBO'
			#call TurboMd191()
		#endif
		#call insertionS(Md191,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md191b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond191()
#endif
	#endif
#endprocedure
*--#] reduce-d191 : 
*--#[ reduce-d190 :
#procedure Insertiond190()
* merge propagators with same momentum, and repeated dots
	if (count(Md190b,1)) Multiply replace_(Md190b,Md190c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md190c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-j1/2+j2/2-j3/2+j5/2,j,j1,j2,j3,j5,Md190c,dotmapMd190cR1)
	#call replace(i7,-j1/2-j4/2+j5/2,j,j1,j4,j5,Md190c,dotmapMd190cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md190c,dotmapMd190cR3)
	if (count(Md190c,1)) Multiply replace_(Md190c,Md190d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star05
	if (count(Md190d,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j5,i5,j4);
	if (count(Md190d,1)) Multiply replace_(Md190d,Mt1star05,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star05 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared190()
* Topology: 0-1* 1-6 1-3 3-5 3-5 3-7 5-6 6-7 7-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md190*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
	#call hash(1,$n9,$n8,$n1,$n6,$n2,$n3,$n4,$n5,$n7)
endif;
if (($n9==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n1,$n6,$n2,$n4,$n3,$n5,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 1); Multiply sign_($n8+$n9)*replace_(i1,i7,i2,i5,i3,i4,i4,i3,i5,i2,i7,i1);
elseif ($bestiso == 3); Multiply sign_($n8+$n9)*replace_(i1,i7,i2,i5,i5,i2,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd190 automorphism;

#call CheckRemovedPropagators(d190,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d190;
#endif
#endprocedure

#procedure Reduced190()
	#call Prepared190()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd190'
		#call MtoZ(Md190,Zd190,i,9)
		#call Reduce(d190)
		#call ZtoM(Zd190,Md190,i,9)
		#call Prepared190()
#else
		#if `USETURBO'
			#call TurboMd190()
		#endif
		#call insertionS(Md190,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md190b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond190()
#endif
	#endif
#endprocedure
*--#] reduce-d190 : 
*--#[ reduce-d189 :
#procedure Insertiond189()
* merge propagators with same momentum, and repeated dots
	if (count(Md189b,1)) Multiply replace_(Md189b,Md189c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i11,i6,i8,i7,i13,i7,i9,i8,i14,i8,i10,i9,i16,i9,i12,i10,i15,i11);

* rewrite insertion dots
	if (count(Md189c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j2/2+j3/2,j,j2,j3,Md189c,dotmapMd189cR1)
	#call replace(i11,-`Q2'/2-j1/2-j4/2+j5/2-j6-j7,j,j1,j4,j5,j6,j7,Md189c,dotmapMd189cR2)
	if (count(Md189c,1)) Multiply replace_(Md189c,Md189d,<j1,i1>,...,<j9,i9>);
* map dots to p2.p5,p0.p1,p1.p2,p1.p5 and change topology to d32
	if (count(Md189d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i8,j8);
	#call replace(i7,-`Q2'/2+j1/2-j4/2+j5/2+j9,j,j1,j4,j5,j9,Md189d,dotmapMd189dR1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j6-j8,j,j2,j3,j6,j8,Md189d,dotmapMd189dR2)
	if (count(Md189d,1)) Multiply replace_(Md189d,Md32,<j1,i1>,...,<j5,i5>,j6,i6,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd32 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared189()
* Topology: 0-3 1-8 1-2 2-3 2-3 1-2 1-8 1-2 8-9
* Dots: p0.p2,p0.p5,p2.p3,p3.p5,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md189*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,47
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n14,$n11,$n10,$n9,$n9,$n2,$n6,$n7,$n3,$n4,$n5,$n1)
	#call hash(1,$n12,$n13,$n12,$n11,$n10,$n8,$n8,$n5,$n6,$n2,$n3,$n4,$n7,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n2,$n1,$n7,$n4,$n3,$n5,$n6)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n9,$n2,$n1,$n7,$n3,$n4,$n5,$n6)
	#call hash(4,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n5,$n1,$n2,$n4,$n3,$n7,$n6)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n8,$n8,$n5,$n1,$n2,$n3,$n4,$n7,$n6)
	#call hash(6,$n14,$n13,$n11,$n11,$n10,$n9,$n9,$n2,$n4,$n7,$n1,$n6,$n5,$n3)
	#call hash(7,$n10,$n13,$n12,$n11,$n10,$n8,$n8,$n5,$n4,$n2,$n1,$n6,$n7,$n3)
	#call hash(8,$n14,$n13,$n12,$n11,$n14,$n9,$n9,$n2,$n3,$n7,$n6,$n1,$n5,$n4)
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n9,$n2,$n3,$n7,$n1,$n6,$n5,$n4)
	#call hash(10,$n14,$n13,$n12,$n12,$n10,$n8,$n8,$n5,$n3,$n2,$n6,$n1,$n7,$n4)
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n8,$n8,$n5,$n3,$n2,$n1,$n6,$n7,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n1,$n7,$n3,$n4,$n2,$n6)
	#call hash(13,$n14,$n13,$n10,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n1,$n6,$n2,$n3)
	#call hash(14,$n14,$n13,$n12,$n11,$n12,$n9,$n8,$n5,$n3,$n7,$n6,$n1,$n2,$n4)
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n3,$n7,$n1,$n6,$n2,$n4)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(16,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
	#call hash(17,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n1,$n2,$n3,$n4,$n5,$n6)
	#call hash(18,$n11,$n13,$n10,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n1,$n6,$n2,$n3)
	#call hash(19,$n10,$n13,$n11,$n11,$n10,$n8,$n9,$n7,$n4,$n2,$n1,$n6,$n5,$n3)
	#call hash(20,$n14,$n13,$n12,$n14,$n12,$n9,$n8,$n7,$n3,$n5,$n6,$n1,$n2,$n4)
	#call hash(21,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n1,$n6,$n2,$n4)
	#call hash(22,$n14,$n13,$n12,$n12,$n14,$n8,$n9,$n7,$n3,$n2,$n6,$n1,$n5,$n4)
	#call hash(23,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
if (($n10==0)&&($n11==0)&&($n13==0));
	#call hash(24,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
	#call hash(25,$n12,$n13,$n14,$n11,$n10,$n8,$n9,$n7,$n6,$n2,$n3,$n4,$n5,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(26,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
	#call hash(27,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n1,$n2,$n4,$n3,$n5,$n6)
endif;
	#call hash(28,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(29,$n12,$n13,$n14,$n10,$n11,$n8,$n9,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
	#call hash(30,$n11,$n13,$n10,$n14,$n12,$n9,$n8,$n7,$n4,$n5,$n6,$n1,$n2,$n3)
	#call hash(31,$n10,$n13,$n11,$n12,$n14,$n8,$n9,$n7,$n4,$n2,$n6,$n1,$n5,$n3)
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(32,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n3,$n4,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(33,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n1,$n7,$n4,$n3,$n2,$n6)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(34,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
	#call hash(35,$n14,$n13,$n10,$n11,$n12,$n9,$n8,$n5,$n4,$n7,$n6,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(36,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n1,$n5,$n3,$n4,$n7,$n6)
	#call hash(37,$n11,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n4,$n5,$n1,$n6,$n7,$n3)
	#call hash(38,$n14,$n13,$n12,$n14,$n10,$n9,$n8,$n2,$n3,$n5,$n6,$n1,$n7,$n4)
	#call hash(39,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n3,$n5,$n1,$n6,$n7,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(40,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n3,$n4,$n7,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(41,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n1,$n5,$n4,$n3,$n7,$n6)
endif;
if (($n8==0)&&($n10==0)&&($n12==0));
	#call hash(42,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
	#call hash(43,$n11,$n13,$n12,$n14,$n10,$n9,$n8,$n2,$n4,$n5,$n6,$n1,$n7,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(44,$n14,$n13,$n14,$n11,$n11,$n9,$n9,$n2,$n6,$n7,$n4,$n3,$n5,$n1)
	#call hash(45,$n12,$n13,$n12,$n10,$n10,$n8,$n8,$n5,$n6,$n2,$n4,$n3,$n7,$n1)
	#call hash(46,$n14,$n13,$n11,$n11,$n14,$n9,$n9,$n2,$n4,$n7,$n6,$n1,$n5,$n3)
	#call hash(47,$n10,$n13,$n12,$n12,$n10,$n8,$n8,$n5,$n4,$n2,$n6,$n1,$n7,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,47
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i7,i7,i2,i8,i9,i12,i14);
elseif ($bestiso == 1); Multiply replace_(i2,i7,i3,i4,i4,i3,i5,i2,i7,i5,i9,i8,i14,i12);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i2,i5,i5,i7,i6,i1,i7,i2,i8,i9,i10,i11);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i7,i6,i1,i7,i2,i8,i9);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i2,i7,i5,i2,i6,i1,i7,i5,i9,i8,i11,i10);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i5,i2,i6,i1,i7,i5,i9,i8);
elseif ($bestiso == 6); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i5,i3,i6,i4,i1,i5,i7,i6,i4,i7,i2,i8,i9,i12,i11);
elseif ($bestiso == 7); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i7,i3,i6,i4,i1,i5,i2,i6,i4,i7,i5,i9,i8,i14,i10);
elseif ($bestiso == 8); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i5,i3,i1,i4,i6,i5,i7,i6,i3,i7,i2,i8,i9,i10,i14);
elseif ($bestiso == 9); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i7,i6,i3,i7,i2,i8,i9);
elseif ($bestiso == 10); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i7,i3,i1,i4,i6,i5,i2,i6,i3,i7,i5,i9,i8,i11,i12);
elseif ($bestiso == 11); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i7,i3,i6,i4,i1,i5,i2,i6,i3,i7,i5,i9,i8);
elseif ($bestiso == 12); Multiply replace_(i1,i6,i3,i4,i4,i3,i5,i7,i6,i1,i7,i5);
elseif ($bestiso == 13); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i3,i6,i4,i1,i5,i7,i6,i4,i7,i5,i12,i10);
elseif ($bestiso == 14); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i3,i1,i4,i6,i5,i7,i6,i3,i7,i5,i10,i12);
elseif ($bestiso == 15); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i3,i6,i4,i1,i5,i7,i6,i3,i7,i5);
elseif ($bestiso == 16); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 17); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1,i8,i9,i9,i8);
elseif ($bestiso == 18); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i3,i6,i4,i1,i6,i4,i12,i10,i14,i11);
elseif ($bestiso == 19); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i5,i3,i6,i4,i1,i5,i2,i6,i4,i8,i9,i9,i8,i12,i11,i14,i10);
elseif ($bestiso == 20); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i3,i1,i4,i6,i6,i3,i10,i12,i11,i14);
elseif ($bestiso == 21); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i3,i6,i4,i1,i6,i3);
elseif ($bestiso == 22); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i5,i3,i1,i4,i6,i5,i2,i6,i3,i8,i9,i9,i8,i10,i14,i11,i12);
elseif ($bestiso == 23); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i8,i9,i9,i8);
elseif ($bestiso == 24); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 25); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2,i8,i9,i9,i8,i12,i14,i14,i12);
elseif ($bestiso == 26); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 27); Multiply replace_(i1,i6,i2,i5,i5,i2,i6,i1,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 29); Multiply replace_(i2,i5,i5,i2,i8,i9,i9,i8,i10,i11,i11,i10,i12,i14,i14,i12);
elseif ($bestiso == 30); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i3,i1,i4,i6,i6,i4,i10,i12,i11,i14,i12,i10,i14,i11);
elseif ($bestiso == 31); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i5,i3,i1,i4,i6,i5,i2,i6,i4,i8,i9,i9,i8,i10,i14,i11,i12,i12,i11,i14,i10);
elseif ($bestiso == 32); Multiply replace_(i3,i4,i4,i3,i5,i7,i7,i5);
elseif ($bestiso == 33); Multiply replace_(i1,i6,i5,i7,i6,i1,i7,i5);
elseif ($bestiso == 34); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 35); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i3,i1,i4,i6,i5,i7,i6,i4,i7,i5,i10,i12,i12,i10);
elseif ($bestiso == 36); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i6,i1,i7,i2);
elseif ($bestiso == 37); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i7,i3,i6,i4,i1,i6,i4,i7,i2,i14,i11);
elseif ($bestiso == 38); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i7,i3,i1,i4,i6,i6,i3,i7,i2,i11,i14);
elseif ($bestiso == 39); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i4,i2,i7,i3,i6,i4,i1,i6,i3,i7,i2);
elseif ($bestiso == 40); Multiply replace_(i2,i7,i3,i4,i4,i3,i7,i2);
elseif ($bestiso == 41); Multiply replace_(i1,i6,i2,i7,i6,i1,i7,i2);
elseif ($bestiso == 42); Multiply replace_(i2,i7,i7,i2);
elseif ($bestiso == 43); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i7,i3,i1,i4,i6,i6,i4,i7,i2,i11,i14,i14,i11);
elseif ($bestiso == 44); Multiply replace_(i2,i5,i5,i7,i7,i2,i8,i9,i10,i11,i12,i14);
elseif ($bestiso == 45); Multiply replace_(i2,i7,i5,i2,i7,i5,i9,i8,i11,i10,i14,i12);
elseif ($bestiso == 46); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i5,i3,i1,i4,i6,i5,i7,i6,i4,i7,i2,i8,i9,i10,i14,i12,i11);
elseif ($bestiso == 47); Multiply sign_($n10+$n11+$n12+$n14)*replace_(i1,i3,i2,i7,i3,i1,i4,i6,i5,i2,i6,i4,i7,i5,i9,i8,i11,i12,i14,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso47>,$bestiso,$bestisov;
.sort:Zd189 automorphism;

#call CheckRemovedPropagators(d189,7,0,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d189;
#endif
#endprocedure

#procedure Reduced189()
	#call Prepared189()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd189'
		#call MtoZ(Md189,Zd189,i,14)
		#call Reduce(d189)
		#call ZtoM(Zd189,Md189,i,14)
		#call Prepared189()
#else
		#if `USETURBO'
			#call TurboMd189()
		#endif
		#call insertionS(Md189,i1,i6,i12,i13,i14,i1,i2,i3,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md189b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond189()
#endif
	#endif
#endprocedure
*--#] reduce-d189 : 
*--#[ reduce-d188 :
#procedure Insertiond188()
* merge propagators with same momentum, and repeated dots
	if (count(Md188b,1)) Multiply replace_(Md188b,Md188c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i12,i6,i8,i7,i13,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i16,i11);

* rewrite insertion dots
	if (count(Md188c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j3/2,j,j1,j3,Md188c,dotmapMd188cR1)
	#call replace(i11,-j1/2-j2/2-j4/2+j5/2+j8+j9,j,j1,j2,j4,j5,j8,j9,Md188c,dotmapMd188cR2)
	if (count(Md188c,1)) Multiply replace_(Md188c,Md188d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p3,p1.p3,p3.p5 and change topology to d33
	if (count(Md188d,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j4,i5,j5,i6,j7);
	#call replace(i7,`Q2'/2-j1/2+j2/2-j6-j7,j,j1,j2,j6,j7,Md188d,dotmapMd188dR1)
	#call replace(i8,j7-j8,j,j7,j8,Md188d,dotmapMd188dR2)
	#call replace(i9,j2/2-j3/2+j4/2-j5/2-j9,j,j2,j3,j4,j5,j9,Md188d,dotmapMd188dR3)
	if (count(Md188d,1)) Multiply replace_(Md188d,Md33,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd33 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared188()
* Topology: 0-1 1-2 1-2 2-3 3-4 2-4 3-4 3-4 4-9
* Dots: p0.p4,p0.p6,p3.p4,p3.p6,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md188*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n3,$n1,$n2)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n3,$n2,$n1)
	#call hash(11,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i7,i7,i4,i8,i9,i10,i11);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i4,i7,i6,i4,i7,i6,i9,i8,i11,i10);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 5); Multiply replace_(i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i6,i7,i7,i6);
elseif ($bestiso == 7); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i1,i4,i7,i7,i4);
elseif ($bestiso == 9); Multiply replace_(i4,i7,i7,i4);
elseif ($bestiso == 10); Multiply replace_(i4,i6,i6,i7,i7,i4,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 11); Multiply replace_(i4,i7,i6,i4,i7,i6,i9,i8,i11,i10,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd188 automorphism;

#call CheckRemovedPropagators(d188,7,1,3,1,2,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d188;
#endif
#endprocedure

#procedure Reduced188()
	#call Prepared188()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd188'
		#call MtoZ(Md188,Zd188,i,14)
		#call Reduce(d188)
		#call ZtoM(Zd188,Md188,i,14)
		#call Prepared188()
#else
		#if `USETURBO'
			#call TurboMd188()
		#endif
		#call insertionS(Md188,i1,i2,i12,i13,i14,i1,i3,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md188b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond188()
#endif
	#endif
#endprocedure
*--#] reduce-d188 : 
*--#[ reduce-d187 :
#procedure Insertiond187()
* merge propagators with same momentum, and repeated dots
	if (count(Md187b,1)) Multiply replace_(Md187b,Md187c,i14,i7,i16,i8,i19,i9,i15,i14,i17,i15,i18,i16);

* rewrite insertion dots
	if (count(Md187c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md187c,dotmapMd187cR1)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md187c,dotmapMd187cR2)
	#call replace(i12,-`Q2'/2+j2/2+j3/2,j,j2,j3,Md187c,dotmapMd187cR3)
	#call replace(i13,j8+j9,j,j8,j9,Md187c,dotmapMd187cR4)
	#call replace(i14,-`Q2'/2+j2/2-j3/2,j,j2,j3,Md187c,dotmapMd187cR5)
	#call replace(i15,j1/2+j2/2-j5/2-j7,j,j1,j2,j5,j7,Md187c,dotmapMd187cR6)
	#call replace(i16,-`Q2'/2-j1/2-j4/2+j6/2+j7+j8,j,j1,j4,j6,j7,j8,Md187c,dotmapMd187cR7)
	if (count(Md187c,1)) Multiply replace_(Md187c,Md187d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d76
	if (count(Md187d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5,i6,j6,i8,j7);
	#call replace(i7,`Q2'/2+j2/2+j3/2-j6/2-j7+j9,j,j2,j3,j6,j7,j9,Md187d,dotmapMd187dR1)
	#call replace(i9,-j7+j8,j,j7,j8,Md187d,dotmapMd187dR2)
	if (count(Md187d,1)) Multiply replace_(Md187d,Md76,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd76 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared187()
* Topology: 0-2 4-5 2-4 1-2 1-5 2-4 1-4 1-5 5-9
* Dots: p0.p1,p0.p4,p3.p4,p0.p2,p1.p2,p2.p3,p2.p4
* Apply automorphisms
if (match(Md187*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n10,$n9,$n10,$n9,$n8,$n2,$n6,$n7,$n5,$n1,$n4,$n3)
	#call hash(1,$n14,$n13,$n12,$n11,$n12,$n11,$n8,$n5,$n6,$n4,$n2,$n1,$n7,$n3)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n4,$n5,$n1,$n7,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n2,$n7,$n3,$n5,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
if (($n8==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n10,$n9,$n12,$n11,$n8,$n5,$n6,$n7,$n2,$n1,$n4,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n8+$n10+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i5,i5,i7,i7,i2,i11,i9,i12,i10);
elseif ($bestiso == 1); Multiply sign_($n8+$n10+$n12+$n13)*replace_(i1,i3,i2,i7,i3,i1,i4,i2,i5,i4,i7,i5,i9,i11,i10,i12);
elseif ($bestiso == 2); Multiply sign_($n8+$n10+$n12+$n13)*replace_(i1,i3,i2,i7,i3,i1,i4,i5,i5,i4,i7,i2);
elseif ($bestiso == 3); Multiply replace_(i2,i5,i4,i7,i5,i2,i7,i4);
elseif ($bestiso == 5); Multiply replace_(i4,i7,i7,i4);
elseif ($bestiso == 6); Multiply replace_(i2,i5,i5,i2);
elseif ($bestiso == 7); Multiply sign_($n8+$n10+$n12+$n13)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i7,i7,i5,i9,i11,i10,i12,i11,i9,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd187 automorphism;

#call CheckRemovedPropagators(d187,7,3,1,3,6,2,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d187;
#endif
#endprocedure

#procedure Reduced187()
	#call Prepared187()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd187'
		#call MtoZ(Md187,Zd187,i,14)
		#call Reduce(d187)
		#call ZtoM(Zd187,Md187,i,14)
		#call Prepared187()
#else
		#if `USETURBO'
			#call TurboMd187()
		#endif
		#call insertionS(Md187,i2,i5,i11,i12,i13,i14,i2,`Q2',i1,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md187b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond187()
#endif
	#endif
#endprocedure
*--#] reduce-d187 : 
*--#[ reduce-d186 :
#procedure Insertiond186()
* merge propagators with same momentum, and repeated dots
	if (count(Md186b,1)) Multiply replace_(Md186b,Md186c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,-i6,i11,i6,i8,i7,i15,i7,i9,-i8,i12,i8,i10,i9,i16,i9,i13,i10,i14,i11);

* rewrite insertion dots
	if (count(Md186c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2-j4/2+j5/2-j6-j7,j,j1,j4,j5,j6,j7,Md186c,dotmapMd186cR1)
	#call replace(i11,-`Q2'/2-j2/2+j3/2,j,j2,j3,Md186c,dotmapMd186cR2)
	if (count(Md186c,1)) Multiply replace_(Md186c,Md186d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p2,p1.p3 and change topology to d34
	if (count(Md186d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md186d,1)) Multiply replace_(Md186d,Md34,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd34 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared186()
* Topology: 0-3 1-5 2-5 2-3 2-3 1-2 1-2 1-5 1-9
* Dots: p0.p2,p0.p5,p2.p3,p3.p5,p0.p1,p1.p3,p1.p5
* Apply automorphisms
if (match(Md186*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n5,$n6,$n3,$n4,$n2,$n7)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n10==0)&&($n11==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n5,$n6,$n4,$n3,$n2,$n7)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i5,i6,i6,i5,i7,i1);
elseif ($bestiso == 1); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i1,i7,i7,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i7,i5,i6,i6,i5,i7,i1);
elseif ($bestiso == 7); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd186 automorphism;

#call CheckRemovedPropagators(d186,7,1,2,1,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d186;
#endif
#endprocedure

#procedure Reduced186()
	#call Prepared186()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd186'
		#call MtoZ(Md186,Zd186,i,14)
		#call Reduce(d186)
		#call ZtoM(Zd186,Md186,i,14)
		#call Prepared186()
#else
		#if `USETURBO'
			#call TurboMd186()
		#endif
		#call insertionS(Md186,i1,i7,i12,i13,i14,i1,`Q2',i3,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md186b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond186()
#endif
	#endif
#endprocedure
*--#] reduce-d186 : 
*--#[ reduce-d185 :
#procedure Insertiond185()
* merge propagators with same momentum, and repeated dots
	if (count(Md185b,1)) Multiply replace_(Md185b,Md185c,i14,i7,i16,i8,i17,i9,i15,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md185c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j5/2-j8,j,j3,j5,j8,Md185c,dotmapMd185cR1)
	#call replace(i11,j1/2+j2/2-j3/2+j5/2-j6/2+j7+j8,j,j1,j2,j3,j5,j6,j7,j8,Md185c,dotmapMd185cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md185c,dotmapMd185cR3)
	#call replace(i13,-j1/2+j3/2-j4/2,j,j1,j3,j4,Md185c,dotmapMd185cR4)
	#call replace(i14,`Q2'/2+j3/2-j5/2,j,j3,j5,Md185c,dotmapMd185cR5)
	#call replace(i15,-j1/2-j2/2+j3/2-j5/2+j6/2-j7-j8+j9,j,j1,j2,j3,j5,j6,j7,j8,j9,Md185c,dotmapMd185cR6)
	#call replace(i16,-j1/2+j3/2+j4/2,j,j1,j3,j4,Md185c,dotmapMd185cR7)
	if (count(Md185c,1)) Multiply replace_(Md185c,Md185d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d98
	if (count(Md185d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j6,i5,j3,i6,j5,i7,j7,i9,j9);
	#call replace(i8,-j1/2+j2/2-j3/2-j4/2+j5/2-j7+j8,j,j1,j2,j3,j4,j5,j7,j8,Md185d,dotmapMd185dR1)
	if (count(Md185d,1)) Multiply replace_(Md185d,Md98,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd98 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared185()
* Topology: 0-2 2-5 1-2 5-6 2-5 1-5 1-6 1-2 6-9
* Dots: p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md185*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n4,$n3,$n5,$n7,$n6,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n1,$n3,$n7,$n4)
	#call hash(4,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n1,$n3,$n5,$n7,$n6,$n4,$n2)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n4,$n3,$n5,$n2,$n6,$n1,$n7)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n3,$n5,$n2,$n6,$n4,$n7)
endif;
if (($n8==0)&&($n10==0)&&($n12==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n8+$n9+$n10+$n11+$n13)*replace_(i1,i2,i2,i1,i3,i6,i4,i7,i6,i3,i7,i4,i8,i11,i11,i8);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i2,i7,i4,i1,i7,i2);
elseif ($bestiso == 4); Multiply sign_($n8+$n9+$n10+$n11+$n13)*replace_(i1,i2,i2,i4,i3,i6,i4,i7,i6,i3,i7,i1,i11,i8);
elseif ($bestiso == 5); Multiply sign_($n8+$n9+$n10+$n11+$n13)*replace_(i1,i7,i2,i1,i3,i6,i4,i2,i6,i3,i7,i4,i8,i11);
elseif ($bestiso == 6); Multiply sign_($n8+$n9+$n10+$n11+$n13)*replace_(i1,i7,i2,i4,i3,i6,i4,i2,i6,i3,i7,i1);
elseif ($bestiso == 7); Multiply replace_(i2,i7,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd185 automorphism;

#call CheckRemovedPropagators(d185,7,3,3,5,6,1,2,4,7)
#if `$DOACTION' == 0
.sort:reduce d185;
#endif
#endprocedure

#procedure Reduced185()
	#call Prepared185()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd185'
		#call MtoZ(Md185,Zd185,i,14)
		#call Reduce(d185)
		#call ZtoM(Zd185,Md185,i,14)
		#call Prepared185()
#else
		#if `USETURBO'
			#call TurboMd185()
		#endif
		#call insertionS(Md185,i1,i4,i11,i12,i13,i14,i1,`Q2',i2,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md185b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond185()
#endif
	#endif
#endprocedure
*--#] reduce-d185 : 
*--#[ reduce-d184 :
#procedure Insertiond184()
* merge propagators with same momentum, and repeated dots
	if (count(Md184b,1)) Multiply replace_(Md184b,Md184c,i16,i7,i17,i8,i19,i9,i18,i16);

* rewrite insertion dots
	if (count(Md184c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md184c,dotmapMd184cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md184c,dotmapMd184cR2)
	#call replace(i12,-`Q2'/2-j3/2+j5/2-j8,j,j3,j5,j8,Md184c,dotmapMd184cR3)
	#call replace(i13,-j2/2-j4/2+j6/2-j7,j,j2,j4,j6,j7,Md184c,dotmapMd184cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md184c,dotmapMd184cR5)
	#call replace(i15,`Q2'/2+j3/2-j5/2,j,j3,j5,Md184c,dotmapMd184cR6)
	#call replace(i16,j2/2+j4/2-j6/2,j,j2,j4,j6,Md184c,dotmapMd184cR7)
	if (count(Md184c,1)) Multiply replace_(Md184c,Md184d,<j1,i1>,...,<j9,i9>);
* map dots to p1.p3,p0.p2,p2.p3 and change topology to d74
	if (count(Md184d,1)) Multiply replace_(i1,j5,i2,j1,i3,j3,i4,j2,i5,j4,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md184d,1)) Multiply replace_(Md184d,Md74,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd74 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared184()
* Topology: 0-4 1-4 1-4 3-4 1-6 1-3 1-6 1-3 6-9
* Dots: p0.p5,p3.p4,p4.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md184*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n6,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n6,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n13==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i6,i5,i7,i6,i4,i7,i5);
elseif ($bestiso == 1); Multiply replace_(i4,i6,i5,i7,i6,i4,i7,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4);
elseif ($bestiso == 4); Multiply replace_(i4,i6,i6,i4);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i5,i7,i7,i5);
elseif ($bestiso == 7); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd184 automorphism;

#call CheckRemovedPropagators(d184,7,1,3,1,2,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d184;
#endif
#endprocedure

#procedure Reduced184()
	#call Prepared184()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd184'
		#call MtoZ(Md184,Zd184,i,14)
		#call Reduce(d184)
		#call ZtoM(Zd184,Md184,i,14)
		#call Prepared184()
#else
		#if `USETURBO'
			#call TurboMd184()
		#endif
		#call insertionS(Md184,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md184b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond184()
#endif
	#endif
#endprocedure
*--#] reduce-d184 : 
*--#[ reduce-d183 :
#procedure Insertiond183()
* merge propagators with same momentum, and repeated dots
	if (count(Md183b,1)) Multiply replace_(Md183b,Md183c,i2,i1,i3,i2,i1,i3,i4,i3,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i15,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md183c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j3/2,j,j1,j3,Md183c,dotmapMd183cR1)
	#call replace(i11,j6-j8,j,j6,j8,Md183c,dotmapMd183cR2)
	#call replace(i12,j7-j9,j,j7,j9,Md183c,dotmapMd183cR3)
	#call replace(i13,-j1/2-j2/2-j4/2+j5/2+j8+j9,j,j1,j2,j4,j5,j8,j9,Md183c,dotmapMd183cR4)
	if (count(Md183c,1)) Multiply replace_(Md183c,Md183d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p2,p1.p2,p2.p5 and change topology to d35
	if (count(Md183d,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j4,i5,j5,i6,j7);
	#call replace(i7,`Q2'/2-j1/2+j3/2-j6-j7,j,j1,j3,j6,j7,Md183d,dotmapMd183dR1)
	#call replace(i8,j7-j8,j,j7,j8,Md183d,dotmapMd183dR2)
	#call replace(i9,-j2/2+j3/2+j4/2-j5/2-j9,j,j2,j3,j4,j5,j9,Md183d,dotmapMd183dR3)
	if (count(Md183d,1)) Multiply replace_(Md183d,Md35,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd35 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared183()
* Topology: 0-1 1-5 1-3 1-5 3-4 4-5 3-4 3-4 4-9
* Dots: p0.p4,p0.p6,p2.p4,p2.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md183*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n1,$n2,$n3)
	#call hash(1,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n3,$n2,$n1)
	#call hash(3,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
	#call hash(5,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n1,$n2,$n3)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i7,i7,i4,i8,i9,i10,i11);
elseif ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i4,i7,i6,i4,i7,i6,i9,i8,i11,i10);
elseif ($bestiso == 2); Multiply replace_(i4,i6,i6,i7,i7,i4,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 3); Multiply replace_(i4,i7,i6,i4,i7,i6,i9,i8,i11,i10,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 7); Multiply replace_(i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i3,i3,i1,i6,i7,i7,i6);
elseif ($bestiso == 9); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 10); Multiply replace_(i1,i3,i3,i1,i4,i7,i7,i4);
elseif ($bestiso == 11); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd183 automorphism;

#call CheckRemovedPropagators(d183,7,2,2,5,1,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d183;
#endif
#endprocedure

#procedure Reduced183()
	#call Prepared183()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd183'
		#call MtoZ(Md183,Zd183,i,14)
		#call Reduce(d183)
		#call ZtoM(Zd183,Md183,i,14)
		#call Prepared183()
#else
		#if `USETURBO'
			#call TurboMd183()
		#endif
		#call insertionS(Md183,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md183b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond183()
#endif
	#endif
#endprocedure
*--#] reduce-d183 : 
*--#[ reduce-d182 :
#procedure Insertiond182()
* merge propagators with same momentum, and repeated dots
	if (count(Md182b,1)) Multiply replace_(Md182b,Md182c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i15,i7,i9,i8,i12,i8,i10,i9,i13,i9,i11,i10,i16,i11);

* rewrite insertion dots
	if (count(Md182c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j3/2,j,j1,j3,Md182c,dotmapMd182cR1)
	#call replace(i11,-j1/2-j2/2-j4/2+j5/2+j8+j9,j,j1,j2,j4,j5,j8,j9,Md182c,dotmapMd182cR2)
	if (count(Md182c,1)) Multiply replace_(Md182c,Md182d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p2,p1.p2,p2.p5 and change topology to d36
	if (count(Md182d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i8,j8);
	#call replace(i7,`Q2'/2+j1/2-j3/2-j6-j7,j,j1,j3,j6,j7,Md182d,dotmapMd182dR1)
	#call replace(i9,j1/2-j2/2+j4/2-j5/2-j9,j,j1,j2,j4,j5,j9,Md182d,dotmapMd182dR2)
	if (count(Md182d,1)) Multiply replace_(Md182d,Md36,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd36 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared182()
* Topology: 0-1 1-2 2-3 1-2 3-4 1-4 3-4 3-4 4-9
* Dots: p0.p4,p0.p6,p2.p4,p2.p6,p0.p1,p1.p4,p1.p6
* Apply automorphisms
if (match(Md182*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n1,$n2,$n3)
	#call hash(1,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n3,$n2,$n1)
	#call hash(3,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
	#call hash(5,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n1,$n2,$n3)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i7,i7,i4,i8,i9,i10,i11);
elseif ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i4,i7,i6,i4,i7,i6,i9,i8,i11,i10);
elseif ($bestiso == 2); Multiply replace_(i4,i6,i6,i7,i7,i4,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 3); Multiply replace_(i4,i7,i6,i4,i7,i6,i9,i8,i11,i10,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 7); Multiply replace_(i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i3,i3,i1,i6,i7,i7,i6);
elseif ($bestiso == 9); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 10); Multiply replace_(i1,i3,i3,i1,i4,i7,i7,i4);
elseif ($bestiso == 11); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd182 automorphism;

#call CheckRemovedPropagators(d182,7,1,2,1,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d182;
#endif
#endprocedure

#procedure Reduced182()
	#call Prepared182()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd182'
		#call MtoZ(Md182,Zd182,i,14)
		#call Reduce(d182)
		#call ZtoM(Zd182,Md182,i,14)
		#call Prepared182()
#else
		#if `USETURBO'
			#call TurboMd182()
		#endif
		#call insertionS(Md182,i1,i3,i12,i13,i14,i1,`Q2',i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md182b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond182()
#endif
	#endif
#endprocedure
*--#] reduce-d182 : 
*--#[ reduce-d181 :
#procedure Insertiond181()
* merge propagators with same momentum, and repeated dots
	if (count(Md181b,1)) Multiply replace_(Md181b,Md181c,i15,i7,i16,i8,i17,i9,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md181c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md181c,dotmapMd181cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md181c,dotmapMd181cR2)
	#call replace(i12,-j7-j9,j,j7,j9,Md181c,dotmapMd181cR3)
	#call replace(i13,-j2/2-j4/2+j6/2-j8,j,j2,j4,j6,j8,Md181c,dotmapMd181cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md181c,dotmapMd181cR5)
	#call replace(i15,j2/2+j4/2-j6/2,j,j2,j4,j6,Md181c,dotmapMd181cR6)
	#call replace(i16,j1/2-j2/2+j3/2-j5/2+j6/2+j7-j8+j9,j,j1,j2,j3,j5,j6,j7,j8,j9,Md181c,dotmapMd181cR7)
	if (count(Md181c,1)) Multiply replace_(Md181c,Md181d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d71
	if (count(Md181d,1)) Multiply replace_(i1,j4,i2,j1,i3,j3,i4,j5,i5,j6,i6,j2,i7,j7,i9,j8);
	#call replace(i8,-j1/2+j2/2+j3/2+j4/2-j6/2+j7+j9,j,j1,j2,j3,j4,j6,j7,j9,Md181d,dotmapMd181dR1)
	if (count(Md181d,1)) Multiply replace_(Md181d,Md71,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd71 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared181()
* Topology: 0-4 2-4 2-4 3-4 1-2 2-3 1-2 1-3 1-9
* Dots: p0.p4,p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md181*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n12==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n3,$n2,$n5,$n1,$n7,$n6,$n4)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n1,$n2)
	#call hash(4,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n3,$n1,$n5,$n2,$n7,$n6,$n4)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n3,$n2,$n5,$n1,$n7,$n4,$n6)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n3,$n1,$n5,$n2,$n7,$n4,$n6)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9+$n14)*replace_(i1,i4,i2,i6,i3,i7,i4,i1,i6,i2,i7,i3,i8,i11,i11,i8);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4);
elseif ($bestiso == 4); Multiply sign_($n9+$n14)*replace_(i1,i4,i2,i6,i3,i7,i4,i2,i6,i1,i7,i3,i11,i8);
elseif ($bestiso == 5); Multiply sign_($n9+$n14)*replace_(i1,i6,i2,i4,i3,i7,i4,i1,i6,i2,i7,i3,i8,i11);
elseif ($bestiso == 6); Multiply sign_($n9+$n14)*replace_(i1,i6,i2,i4,i3,i7,i4,i2,i6,i1,i7,i3);
elseif ($bestiso == 7); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd181 automorphism;

#call CheckRemovedPropagators(d181,7,3,3,5,7,1,2,4,6)
#if `$DOACTION' == 0
.sort:reduce d181;
#endif
#endprocedure

#procedure Reduced181()
	#call Prepared181()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd181'
		#call MtoZ(Md181,Zd181,i,14)
		#call Reduce(d181)
		#call ZtoM(Zd181,Md181,i,14)
		#call Prepared181()
#else
		#if `USETURBO'
			#call TurboMd181()
		#endif
		#call insertionS(Md181,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md181b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond181()
#endif
	#endif
#endprocedure
*--#] reduce-d181 : 
*--#[ reduce-d180 :
#procedure Insertiond180()
* merge propagators with same momentum, and repeated dots
	if (count(Md180b,1)) Multiply replace_(Md180b,Md180c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i11,-i6,i8,i7,i12,-i7,i9,i8,i13,-i8,i10,i9,i16,i9,i14,i10,i15,i11);

* rewrite insertion dots
	if (count(Md180c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2+j2/2-j4/2-j6+j7,j,j1,j2,j4,j6,j7,Md180c,dotmapMd180cR1)
	#call replace(i11,-`Q2'/2-j1/2-j3/2+j5/2+j6+j8,j,j1,j3,j5,j6,j8,Md180c,dotmapMd180cR2)
	if (count(Md180c,1)) Multiply replace_(Md180c,Md180d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p1,p1.p2,p1.p3 and change topology to d37
	if (count(Md180d,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j4,i5,j5,i7,j6,i8,j7,i9,j8);
	#call replace(i6,`Q2'/2+j1/2+j3/2-j5/2-j7+j9,j,j1,j3,j5,j7,j9,Md180d,dotmapMd180dR1)
	if (count(Md180d,1)) Multiply replace_(Md180d,Md37,<j1,i1>,...,<j5,i5>,j6,-i6,j7,i7,j8,-i8,j9,i9);
	#redefine HASTOPOd37 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared180()
* Topology: 0-3 2-5 2-3 2-3 1-2 1-5 1-2 1-5 5-9
* Dots: p0.p1,p0.p4,p0.p5,p4.p5,p1.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md180*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n6,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n2,$n3,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i4,i6,i5,i7,i6,i4,i7,i5);
elseif ($bestiso == 1); Multiply replace_(i2,i3,i3,i2,i5,i7,i7,i5);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 4); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 5); Multiply replace_(i2,i3,i3,i2,i4,i6,i6,i4);
elseif ($bestiso == 6); Multiply replace_(i4,i6,i6,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i6,i5,i7,i6,i4,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd180 automorphism;

#call CheckRemovedPropagators(d180,7,0,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d180;
#endif
#endprocedure

#procedure Reduced180()
	#call Prepared180()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd180'
		#call MtoZ(Md180,Zd180,i,14)
		#call Reduce(d180)
		#call ZtoM(Zd180,Md180,i,14)
		#call Prepared180()
#else
		#if `USETURBO'
			#call TurboMd180()
		#endif
		#call insertionS(Md180,i2,i3,i12,i13,i14,i2,i1,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md180b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond180()
#endif
	#endif
#endprocedure
*--#] reduce-d180 : 
*--#[ reduce-d179 :
#procedure Insertiond179()
* merge propagators with same momentum, and repeated dots
	if (count(Md179b,1)) Multiply replace_(Md179b,Md179c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i15,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md179c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j7-j8,j,j7,j8,Md179c,dotmapMd179cR1)
	#call replace(i11,-`Q2'/2-j1/2-j4/2+j5/2+j6-j7-j8,j,j1,j4,j5,j6,j7,j8,Md179c,dotmapMd179cR2)
	#call replace(i12,-j2/2+j3/2-j4/2,j,j2,j3,j4,Md179c,dotmapMd179cR3)
	if (count(Md179c,1)) Multiply replace_(Md179c,Md179d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p3,p0.p2,p2.p3 and change topology to d38
	if (count(Md179d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j1,i5,j4,i6,j7,i7,j8,i9,j9);
	#call replace(i8,-j6-j8,j,j6,j8,Md179d,dotmapMd179dR1)
	if (count(Md179d,1)) Multiply replace_(Md179d,Md38,<j1,i1>,...,<j5,i5>,j6,i6,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd38 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared179()
* Topology: 0-1 1-6 1-3 3-5 3-5 5-6 1-6 1-3 3-9
* Dots: p0.p2,p0.p3,p0.p4,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md179*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n9,$n11,$n12,$n9,$n8,$n2,$n4,$n5,$n1,$n6,$n7,$n3)
	#call hash(1,$n14,$n13,$n10,$n11,$n10,$n12,$n8,$n2,$n3,$n5,$n6,$n1,$n7,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n11,$n9,$n11,$n12,$n9,$n8,$n7,$n4,$n5,$n1,$n6,$n2,$n3)
	#call hash(3,$n14,$n13,$n10,$n13,$n10,$n12,$n8,$n7,$n3,$n5,$n6,$n1,$n2,$n4)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
endif;
if (($n11==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n10==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n14,$n11,$n9,$n13,$n10,$n12,$n8,$n7,$n4,$n5,$n6,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n10,$n11,$n12,$n9,$n8,$n7,$n3,$n5,$n1,$n6,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n13==0));
	#call hash(10,$n14,$n13,$n9,$n11,$n10,$n12,$n8,$n2,$n4,$n5,$n6,$n1,$n7,$n3)
endif;
if (($n8==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n1,$n5,$n4,$n3,$n7,$n6)
	#call hash(12,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n2,$n1,$n5,$n3,$n4,$n7,$n6)
endif;
if (($n8==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n2,$n6,$n5,$n3,$n4,$n7,$n1)
endif;
if (($n8==0)&&($n11==0)&&($n13==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(15,$n14,$n13,$n10,$n11,$n12,$n9,$n8,$n2,$n3,$n5,$n1,$n6,$n7,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i7,i3,i6,i4,i1,i6,i4,i7,i2,i10,i12,i12,i9);
elseif ($bestiso == 1); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i7,i3,i1,i4,i6,i6,i3,i7,i2,i9,i12,i12,i10);
elseif ($bestiso == 2); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i3,i6,i4,i1,i6,i4,i10,i12,i12,i9,i13,i11);
elseif ($bestiso == 3); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i4,i3,i1,i4,i6,i6,i3,i9,i12,i11,i13,i12,i10);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1,i9,i10,i10,i9);
elseif ($bestiso == 6); Multiply replace_(i3,i4,i4,i3,i9,i10,i10,i9);
elseif ($bestiso == 7); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 8); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i3,i1,i4,i6,i6,i4,i9,i12,i11,i13,i12,i9,i13,i11);
elseif ($bestiso == 9); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i4,i3,i6,i4,i1,i6,i3,i10,i12,i12,i10);
elseif ($bestiso == 10); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i3,i2,i7,i3,i1,i4,i6,i6,i4,i7,i2,i9,i12,i12,i9);
elseif ($bestiso == 11); Multiply replace_(i1,i6,i2,i7,i6,i1,i7,i2);
elseif ($bestiso == 12); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i6,i1,i7,i2,i9,i10,i10,i9);
elseif ($bestiso == 13); Multiply replace_(i2,i7,i3,i4,i4,i3,i7,i2,i9,i10,i10,i9);
elseif ($bestiso == 14); Multiply replace_(i2,i7,i7,i2);
elseif ($bestiso == 15); Multiply sign_($n9+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i7,i3,i6,i4,i1,i6,i3,i7,i2,i10,i12,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd179 automorphism;

#call CheckRemovedPropagators(d179,7,1,5,1,2,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d179;
#endif
#endprocedure

#procedure Reduced179()
	#call Prepared179()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd179'
		#call MtoZ(Md179,Zd179,i,14)
		#call Reduce(d179)
		#call ZtoM(Zd179,Md179,i,14)
		#call Prepared179()
#else
		#if `USETURBO'
			#call TurboMd179()
		#endif
		#call insertionS(Md179,i1,i6,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md179b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond179()
#endif
	#endif
#endprocedure
*--#] reduce-d179 : 
*--#[ reduce-d178 :
#procedure Insertiond178()
* merge propagators with same momentum, and repeated dots
	if (count(Md178b,1)) Multiply replace_(Md178b,Md178c,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i11,i7,i9,i8,i15,i8,i10,i9,i13,i9,i12,i10,i16,i11);

* rewrite insertion dots
	if (count(Md178c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2+j2/2-j4/2-j6+j7,j,j1,j2,j4,j6,j7,Md178c,dotmapMd178cR1)
	#call replace(i11,-`Q2'/2-j1/2-j3/2+j5/2+j6+j8,j,j1,j3,j5,j6,j8,Md178c,dotmapMd178cR2)
	if (count(Md178c,1)) Multiply replace_(Md178c,Md178d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p1,p1.p3,p1.p4 and change topology to d39
	if (count(Md178d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j5,i5,j2,i7,j6,i8,j7,i9,j9);
	#call replace(i6,`Q2'/2+j1/2-j2/2+j3/2-j7+j8,j,j1,j2,j3,j7,j8,Md178d,dotmapMd178dR1)
	if (count(Md178d,1)) Multiply replace_(Md178d,Md39,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd39 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared178()
* Topology: 0-3 3-5 2-3 1-2 1-5 2-3 1-3 1-5 5-9
* Dots: p0.p1,p0.p3,p0.p4,p3.p4,p0.p2,p1.p2,p2.p4
* Apply automorphisms
if (match(Md178*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n2,$n7,$n3,$n5,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i4,i7,i5,i2,i7,i4);
elseif ($bestiso == 2); Multiply replace_(i4,i7,i7,i4);
elseif ($bestiso == 3); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd178 automorphism;

#call CheckRemovedPropagators(d178,7,1,3,1,2,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d178;
#endif
#endprocedure

#procedure Reduced178()
	#call Prepared178()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd178'
		#call MtoZ(Md178,Zd178,i,14)
		#call Reduce(d178)
		#call ZtoM(Zd178,Md178,i,14)
		#call Prepared178()
#else
		#if `USETURBO'
			#call TurboMd178()
		#endif
		#call insertionS(Md178,i2,i5,i12,i13,i14,i2,`Q2',i1,i4,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md178b,1)) Multiply replace_(<i6,i5>,...,<i17,i16>);
		#call Insertiond178()
#endif
	#endif
#endprocedure
*--#] reduce-d178 : 
*--#[ reduce-d177 :
#procedure Insertiond177()
* merge propagators with same momentum, and repeated dots
	if (count(Md177b,1)) Multiply replace_(Md177b,Md177c,i14,i7,i16,i8,i18,i9,i15,i14,i17,i15,i19,i16);

* rewrite insertion dots
	if (count(Md177c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md177c,dotmapMd177cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md177c,dotmapMd177cR2)
	#call replace(i12,j1/2-j2/2+j3/2,j,j1,j2,j3,Md177c,dotmapMd177cR3)
	#call replace(i13,j1/2+j4/2-j5/2,j,j1,j4,j5,Md177c,dotmapMd177cR4)
	#call replace(i14,`Q2'/2+j1/2-j6/2-j7,j,j1,j6,j7,Md177c,dotmapMd177cR5)
	#call replace(i15,j1/2-j2/2-j3/2,j,j1,j2,j3,Md177c,dotmapMd177cR6)
	#call replace(i16,j1/2+j4/2-j5/2-j9,j,j1,j4,j5,j9,Md177c,dotmapMd177cR7)
	if (count(Md177c,1)) Multiply replace_(Md177c,Md177d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d67
	if (count(Md177d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j8,i8,j7,i9,j9);
	if (count(Md177d,1)) Multiply replace_(Md177d,Md67,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd67 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared177()
* Topology: 0-1 1-2 2-3 2-3 3-7 3-7 1-2 1-7 7-9
* Dots: p0.p2,p0.p4,p2.p4,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md177*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n4,$n5,$n2,$n3,$n6)
	#call hash(1,$n14,$n10,$n12,$n9,$n10,$n9,$n8,$n7,$n5,$n1,$n6,$n2,$n3,$n4)
	#call hash(2,$n14,$n13,$n12,$n11,$n13,$n11,$n8,$n7,$n4,$n6,$n1,$n2,$n3,$n5)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n1,$n6,$n2,$n3,$n5)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n14==0));
	#call hash(4,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n4,$n5,$n3,$n2,$n6)
	#call hash(6,$n14,$n13,$n10,$n9,$n10,$n9,$n8,$n7,$n5,$n1,$n6,$n3,$n2,$n4)
	#call hash(7,$n14,$n13,$n12,$n11,$n12,$n11,$n8,$n7,$n4,$n6,$n1,$n3,$n2,$n5)
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n1,$n6,$n3,$n2,$n5)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n13==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(12,$n14,$n13,$n10,$n9,$n12,$n11,$n8,$n7,$n5,$n6,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n2,$n3,$n6)
endif;
if (($n8==0)&&($n10==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n8==0)&&($n12==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(15,$n14,$n10,$n12,$n9,$n13,$n11,$n8,$n7,$n5,$n6,$n1,$n2,$n3,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i2,i3,i3,i2,i4,i5,i5,i4,i6,i1);
elseif ($bestiso == 1); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i6,i5,i1,i6,i5,i11,i9,i13,i10);
elseif ($bestiso == 2); Multiply replace_(i1,i5,i2,i3,i3,i2,i4,i1,i5,i6,i6,i4,i9,i11,i10,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i5,i2,i3,i3,i2,i4,i6,i5,i1,i6,i4);
elseif ($bestiso == 4); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4,i12,i13,i13,i12);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i4,i5,i5,i4,i6,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i4,i4,i6,i5,i1,i6,i5,i11,i9,i12,i10);
elseif ($bestiso == 7); Multiply replace_(i1,i5,i4,i1,i5,i6,i6,i4,i9,i11,i10,i12);
elseif ($bestiso == 8); Multiply replace_(i1,i5,i4,i6,i5,i1,i6,i4);
elseif ($bestiso == 10); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 11); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 12); Multiply replace_(i1,i4,i4,i1,i5,i6,i6,i5,i9,i11,i10,i12,i11,i9,i12,i10);
elseif ($bestiso == 13); Multiply replace_(i1,i6,i2,i3,i3,i2,i6,i1);
elseif ($bestiso == 14); Multiply replace_(i2,i3,i3,i2,i12,i13,i13,i12);
elseif ($bestiso == 15); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i5,i9,i11,i10,i13,i11,i9,i13,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd177 automorphism;

#call CheckRemovedPropagators(d177,7,0,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d177;
#endif
#endprocedure

#procedure Reduced177()
	#call Prepared177()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd177'
		#call MtoZ(Md177,Zd177,i,14)
		#call Reduce(d177)
		#call ZtoM(Zd177,Md177,i,14)
		#call Prepared177()
#else
		#if `USETURBO'
			#call TurboMd177()
		#endif
		#call insertionS(Md177,i1,i6,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md177b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond177()
#endif
	#endif
#endprocedure
*--#] reduce-d177 : 
*--#[ reduce-d176 :
#procedure Insertiond176()
* merge propagators with same momentum, and repeated dots
	if (count(Md176b,1)) Multiply replace_(Md176b,Md176c,i16,i7,i17,i8,i18,i9,i19,i16);

* rewrite insertion dots
	if (count(Md176c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md176c,dotmapMd176cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md176c,dotmapMd176cR2)
	#call replace(i12,-`Q2'/2-j3/2+j5/2-j8,j,j3,j5,j8,Md176c,dotmapMd176cR3)
	#call replace(i13,-j7-j9,j,j7,j9,Md176c,dotmapMd176cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md176c,dotmapMd176cR5)
	#call replace(i15,`Q2'/2+j3/2-j5/2,j,j3,j5,Md176c,dotmapMd176cR6)
	#call replace(i16,-`Q2'/2+j1/2+j4/2+j5/2-j6/2+j7-j8+j9,j,j1,j4,j5,j6,j7,j8,j9,Md176c,dotmapMd176cR7)
	if (count(Md176c,1)) Multiply replace_(Md176c,Md176d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p1.p5,p2.p5 and change topology to d93
	if (count(Md176d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j5,i5,j3,i6,j6,i7,j7);
	#call replace(i8,-`Q2'/2+j1/2+j3/2+j5/2-j6/2-j8-j9,j,j1,j3,j5,j6,j8,j9,Md176d,dotmapMd176dR1)
	#call replace(i9,-j7-j8,j,j7,j8,Md176d,dotmapMd176dR2)
	if (count(Md176d,1)) Multiply replace_(Md176d,Md93,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,i9);
	#redefine HASTOPOd93 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared176()
* Topology: 0-4 2-4 2-4 1-4 2-6 1-2 1-6 1-2 6-9
* Dots: p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md176*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i5,i7,i7,i5);
elseif ($bestiso == 3); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd176 automorphism;

#call CheckRemovedPropagators(d176,7,3,3,4,6,1,2,5,7)
#if `$DOACTION' == 0
.sort:reduce d176;
#endif
#endprocedure

#procedure Reduced176()
	#call Prepared176()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd176'
		#call MtoZ(Md176,Zd176,i,14)
		#call Reduce(d176)
		#call ZtoM(Zd176,Md176,i,14)
		#call Prepared176()
#else
		#if `USETURBO'
			#call TurboMd176()
		#endif
		#call insertionS(Md176,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md176b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond176()
#endif
	#endif
#endprocedure
*--#] reduce-d176 : 
*--#[ reduce-d175 :
#procedure Insertiond175()
* merge propagators with same momentum, and repeated dots
	if (count(Md175b,1)) Multiply replace_(Md175b,Md175c,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md175c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j5/2,j,j1,j5,Md175c,dotmapMd175cR1)
	#call replace(i7,-j2/2+j3/2-j5/2,j,j2,j3,j5,Md175c,dotmapMd175cR2)
	#call replace(i8,j1/2+j3/2-j4/2-j5/2,j,j1,j3,j4,j5,Md175c,dotmapMd175cR3)
	if (count(Md175c,1)) Multiply replace_(Md175c,Md175d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star45
	if (count(Md175d,1)) Multiply replace_(i1,j1,i2,j5,i3,j3,i4,j2,i5,j4);
	if (count(Md175d,1)) Multiply replace_(Md175d,Mt1star45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared175()
* Topology: 0-1 7-8 2-7* 1-2 1-7 2-4 4-8 2-4 8-9
* Dots: p0.p5,p2.p5
* Apply automorphisms
if (match(Md175*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd175 automorphism;

#call CheckRemovedPropagators(d175,7,5,1,2,3,4,6,5,7)
#if `$DOACTION' == 0
.sort:reduce d175;
#endif
#endprocedure

#procedure Reduced175()
	#call Prepared175()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd175'
		#call MtoZ(Md175,Zd175,i,9)
		#call Reduce(d175)
		#call ZtoM(Zd175,Md175,i,9)
		#call Prepared175()
#else
		#if `USETURBO'
			#call TurboMd175()
		#endif
		#call insertionS(Md175,i5,i7,i8,i9,i5,`Q2',i2,i8,i9,i10,0,0)
		if (count(Md175b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond175()
#endif
	#endif
#endprocedure
*--#] reduce-d175 : 
*--#[ reduce-d174 :
#procedure Insertiond174()
* merge propagators with same momentum, and repeated dots
	if (count(Md174b,1)) Multiply replace_(Md174b,Md174c,i14,i7,i15,i8,i17,i9,i16,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md174c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md174c,dotmapMd174cR1)
	#call replace(i11,-j2/2+j5/2-j6/2+j7,j,j2,j5,j6,j7,Md174c,dotmapMd174cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md174c,dotmapMd174cR3)
	#call replace(i13,j1/2-j3/2+j4/2,j,j1,j3,j4,Md174c,dotmapMd174cR4)
	#call replace(i14,`Q2'/2+j1/2-j6/2-j8,j,j1,j6,j8,Md174c,dotmapMd174cR5)
	#call replace(i15,-j2/2+j5/2-j6/2+j7-j9,j,j2,j5,j6,j7,j9,Md174c,dotmapMd174cR6)
	#call replace(i16,j1/2-j3/2-j4/2,j,j1,j3,j4,Md174c,dotmapMd174cR7)
	if (count(Md174c,1)) Multiply replace_(Md174c,Md174d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d90
	if (count(Md174d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j5,i5,j6,i6,j1,i7,j8,i8,j7,i9,j9);
	if (count(Md174d,1)) Multiply replace_(Md174d,Md90,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd90 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared174()
* Topology: 0-1 1-3 1-7 3-4 3-4 1-3 1-7 4-7 4-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md174*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n1,$n3,$n4,$n6,$n5)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n12==0));
	#call hash(1,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n1,$n3,$n4,$n2,$n5)
endif;
if (($n9==0)&&($n10==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n1,$n4,$n3,$n6,$n5)
endif;
if (($n8==0)&&($n10==0)&&($n12==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i3,i5,i1,i6,i2);
elseif ($bestiso == 1); Multiply replace_(i2,i6,i3,i4,i4,i3,i6,i2,i13,i14,i14,i13);
elseif ($bestiso == 2); Multiply replace_(i1,i5,i3,i4,i4,i3,i5,i1);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3,i13,i14,i14,i13);
elseif ($bestiso == 5); Multiply replace_(i1,i5,i5,i1);
elseif ($bestiso == 6); Multiply replace_(i1,i5,i2,i6,i5,i1,i6,i2);
elseif ($bestiso == 7); Multiply replace_(i2,i6,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd174 automorphism;

#call CheckRemovedPropagators(d174,7,1,7,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d174;
#endif
#endprocedure

#procedure Reduced174()
	#call Prepared174()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd174'
		#call MtoZ(Md174,Zd174,i,14)
		#call Reduce(d174)
		#call ZtoM(Zd174,Md174,i,14)
		#call Prepared174()
#else
		#if `USETURBO'
			#call TurboMd174()
		#endif
		#call insertionS(Md174,i1,i5,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md174b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond174()
#endif
	#endif
#endprocedure
*--#] reduce-d174 : 
*--#[ reduce-d173 :
#procedure Insertiond173()
* merge propagators with same momentum, and repeated dots
	if (count(Md173b,1)) Multiply replace_(Md173b,Md173c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,-i6,i11,i6,i8,i7,i14,i7,i9,i8,i15,i8,i10,-i9,i12,i9,i13,i10,i16,i11);

* rewrite insertion dots
	if (count(Md173c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2-j3/2+j5/2-j6-j8,j,j1,j3,j5,j6,j8,Md173c,dotmapMd173cR1)
	#call replace(i11,j2/2+j3/2-j4/2,j,j2,j3,j4,Md173c,dotmapMd173cR2)
	if (count(Md173c,1)) Multiply replace_(Md173c,Md173d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4,p0.p1,p1.p2 and change topology to d41
	if (count(Md173d,1)) Multiply replace_(i1,j4,i2,j1,i3,j5,i4,j3,i5,j2,i6,j7,i7,j8);
	#call replace(i8,-`Q2'-j6-j7,j,j6,j7,Md173d,dotmapMd173dR1)
	#call replace(i9,-j1/2+j3/2-j5/2-j8-j9,j,j1,j3,j5,j8,j9,Md173d,dotmapMd173dR2)
	if (count(Md173d,1)) Multiply replace_(Md173d,Md41,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd41 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared173()
* Topology: 0-3 1-5 3-5 2-3 1-2 2-3 1-3 1-5 1-9
* Dots: p0.p2,p0.p3,p0.p4,p2.p3,p0.p1,p1.p3,p1.p4
* Apply automorphisms
if (match(Md173*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n11,$n13,$n9,$n14,$n8,$n12,$n10,$n5,$n6,$n7,$n2,$n1,$n4,$n3)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n3,$n4,$n5,$n2,$n7)
	#call hash(4,$n11,$n13,$n9,$n11,$n8,$n9,$n10,$n5,$n6,$n1,$n2,$n7,$n4,$n3)
	#call hash(5,$n14,$n13,$n12,$n14,$n8,$n12,$n10,$n3,$n6,$n7,$n2,$n1,$n4,$n5)
	#call hash(6,$n14,$n13,$n12,$n11,$n8,$n9,$n10,$n3,$n6,$n1,$n2,$n7,$n4,$n5)
endif;
if (($n9==0)&&($n11==0)&&($n13==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i7,i1);
elseif ($bestiso == 2); Multiply sign_($n8+$n10+$n11+$n14)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i7,i7,i5,i8,i10,i9,i12,i10,i8,i11,i14,i12,i9,i14,i11);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i3,i5,i5,i3,i7,i1);
elseif ($bestiso == 4); Multiply sign_($n8+$n10+$n11+$n14)*replace_(i1,i3,i2,i4,i3,i7,i4,i2,i5,i1,i7,i5,i8,i10,i10,i8,i12,i9,i14,i11);
elseif ($bestiso == 5); Multiply sign_($n8+$n10+$n11+$n14)*replace_(i1,i5,i2,i4,i3,i1,i4,i2,i5,i7,i7,i3,i8,i10,i9,i12,i10,i8,i11,i14);
elseif ($bestiso == 6); Multiply sign_($n8+$n10+$n11+$n14)*replace_(i1,i5,i2,i4,i3,i7,i4,i2,i5,i1,i7,i3,i8,i10,i10,i8);
elseif ($bestiso == 7); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd173 automorphism;

#call CheckRemovedPropagators(d173,7,2,2,4,1,3,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d173;
#endif
#endprocedure

#procedure Reduced173()
	#call Prepared173()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd173'
		#call MtoZ(Md173,Zd173,i,14)
		#call Reduce(d173)
		#call ZtoM(Zd173,Md173,i,14)
		#call Prepared173()
#else
		#if `USETURBO'
			#call TurboMd173()
		#endif
		#call insertionS(Md173,i1,i7,i12,i13,i14,i1,`Q2',i3,i4,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md173b,1)) Multiply replace_(<i8,i7>,...,<i17,i16>);
		#call Insertiond173()
#endif
	#endif
#endprocedure
*--#] reduce-d173 : 
*--#[ reduce-d172 :
#procedure Insertiond172()
* merge propagators with same momentum, and repeated dots
	if (count(Md172b,1)) Multiply replace_(Md172b,Md172c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i12,i6,i8,i7,i13,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i16,i11);

* rewrite insertion dots
	if (count(Md172c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j3/2,j,j1,j3,Md172c,dotmapMd172cR1)
	#call replace(i11,-j2/2-j3/2-j4/2+j5/2+j6+j7-j8-j9,j,j2,j3,j4,j5,j6,j7,j8,j9,Md172c,dotmapMd172cR2)
	if (count(Md172c,1)) Multiply replace_(Md172c,Md172d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p3,p1.p3,p3.p5 and change topology to d33
	if (count(Md172d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5,i6,j7,i8,j8);
	#call replace(i7,`Q2'/2-j1/2+j2/2-j6-j7,j,j1,j2,j6,j7,Md172d,dotmapMd172dR1)
	#call replace(i9,`Q2'/2-j1/2+j3/2-j4/2+j5/2-j6-j7+j9,j,j1,j3,j4,j5,j6,j7,j9,Md172d,dotmapMd172dR2)
	if (count(Md172d,1)) Multiply replace_(Md172d,Md33,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd33 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared172()
* Topology: 0-1 2-6 1-2 1-2 2-5 5-6 2-5 2-5 6-9
* Dots: p0.p4,p0.p6,p1.p4,p1.p6,p1.p2,p2.p4,p2.p6
* Apply automorphisms
if (match(Md172*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n2,$n3,$n1)
	#call hash(1,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n2,$n3,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
	#call hash(3,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n2,$n3,$n1)
endif;
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n2,$n3,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n4,$n7,$n5,$n6,$n3,$n2,$n1)
	#call hash(11,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n4,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i4,i6,i6,i7,i7,i4,i8,i9,i10,i11);
elseif ($bestiso == 1); Multiply replace_(i2,i3,i3,i2,i4,i7,i6,i4,i7,i6,i9,i8,i11,i10);
elseif ($bestiso == 2); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2,i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 5); Multiply replace_(i4,i6,i6,i4,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 6); Multiply replace_(i2,i3,i3,i2,i6,i7,i7,i6);
elseif ($bestiso == 7); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 8); Multiply replace_(i2,i3,i3,i2,i4,i7,i7,i4);
elseif ($bestiso == 9); Multiply replace_(i4,i7,i7,i4);
elseif ($bestiso == 10); Multiply replace_(i4,i6,i6,i7,i7,i4,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 11); Multiply replace_(i4,i7,i6,i4,i7,i6,i9,i8,i11,i10,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd172 automorphism;

#call CheckRemovedPropagators(d172,7,1,5,1,2,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d172;
#endif
#endprocedure

#procedure Reduced172()
	#call Prepared172()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd172'
		#call MtoZ(Md172,Zd172,i,14)
		#call Reduce(d172)
		#call ZtoM(Zd172,Md172,i,14)
		#call Prepared172()
#else
		#if `USETURBO'
			#call TurboMd172()
		#endif
		#call insertionS(Md172,i2,i3,i12,i13,i14,i2,i1,i4,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md172b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond172()
#endif
	#endif
#endprocedure
*--#] reduce-d172 : 
*--#[ reduce-d171 :
#procedure Insertiond171()
* merge propagators with same momentum, and repeated dots
	if (count(Md171b,1)) Multiply replace_(Md171b,Md171c,i15,i7,i16,i8,i19,i9,i17,i15,i18,i16);

* rewrite insertion dots
	if (count(Md171c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j4/2-j7,j,j2,j4,j7,Md171c,dotmapMd171cR1)
	#call replace(i11,j1/2+j2/2-j3/2,j,j1,j2,j3,Md171c,dotmapMd171cR2)
	#call replace(i12,-j1/2+j2/2-j3/2,j,j1,j2,j3,Md171c,dotmapMd171cR3)
	#call replace(i13,j4/2+j5/2-j6/2+j8-j9,j,j4,j5,j6,j8,j9,Md171c,dotmapMd171cR4)
	#call replace(i14,`Q2'/2+j2/2-j4/2,j,j2,j4,Md171c,dotmapMd171cR5)
	#call replace(i15,-j1/2+j2/2+j3/2,j,j1,j2,j3,Md171c,dotmapMd171cR6)
	#call replace(i16,j4/2+j5/2-j6/2+j8,j,j4,j5,j6,j8,Md171c,dotmapMd171cR7)
	if (count(Md171c,1)) Multiply replace_(Md171c,Md171d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p1,p1.p2 and change topology to d103
	if (count(Md171d,1)) Multiply replace_(i1,j4,i2,j6,i3,j2,i4,j5,i5,j1,i6,j3,i7,j7,i8,j8,i9,j9);
	if (count(Md171d,1)) Multiply replace_(Md171d,Md103,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd103 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared171()
* Topology: 0-2 2-5 5-6 2-5 2-5 1-6 1-2 1-2 6-9
* Dots: p0.p4,p0.p6,p4.p6,p0.p1,p1.p2,p1.p4,p1.p6
* Apply automorphisms
if (match(Md171*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n6,$n7,$n5,$n1,$n4,$n2,$n3)
	#call hash(1,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n1,$n2,$n4)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n6,$n7,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n12==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n10,$n13,$n12,$n8,$n14,$n9,$n11,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n14,$n9,$n11,$n7,$n6,$n5,$n1,$n4,$n2,$n3)
	#call hash(10,$n10,$n13,$n12,$n8,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n1,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i4,i4,i1,i6,i7,i7,i6,i8,i11);
elseif ($bestiso == 1); Multiply replace_(i1,i4,i3,i1,i4,i3,i6,i7,i7,i6,i11,i8);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1,i6,i7,i7,i6);
elseif ($bestiso == 5); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 6); Multiply replace_(i1,i4,i4,i1,i6,i7,i7,i6,i8,i11,i11,i8);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 8); Multiply replace_(i1,i4,i4,i1,i8,i11,i10,i14,i11,i8,i14,i10);
elseif ($bestiso == 9); Multiply replace_(i1,i3,i3,i4,i4,i1,i8,i11,i10,i14);
elseif ($bestiso == 10); Multiply replace_(i1,i4,i3,i1,i4,i3,i11,i8,i14,i10);
elseif ($bestiso == 11); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd171 automorphism;

#call CheckRemovedPropagators(d171,7,2,2,5,1,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d171;
#endif
#endprocedure

#procedure Reduced171()
	#call Prepared171()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd171'
		#call MtoZ(Md171,Zd171,i,14)
		#call Reduce(d171)
		#call ZtoM(Zd171,Md171,i,14)
		#call Prepared171()
#else
		#if `USETURBO'
			#call TurboMd171()
		#endif
		#call insertionS(Md171,i1,i3,i11,i12,i13,i14,i1,`Q2',i2,i4,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md171b,1)) Multiply replace_(<i4,i3>,...,<i20,i19>);
		#call Insertiond171()
#endif
	#endif
#endprocedure
*--#] reduce-d171 : 
*--#[ reduce-d170 :
#procedure Insertiond170()
* merge propagators with same momentum, and repeated dots
	if (count(Md170b,1)) Multiply replace_(Md170b,Md170c,i15,i7,i16,i8,i17,i9,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md170c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j2/2+j4/2-j7+j8,j,j2,j4,j7,j8,Md170c,dotmapMd170cR1)
	#call replace(i11,-j2+j4/2+j5/2-j6/2+j8-j9,j,j2,j4,j5,j6,j8,j9,Md170c,dotmapMd170cR2)
	#call replace(i12,-j1/2+j2/2-j3/2-j4/2+j6/2-j8,j,j1,j2,j3,j4,j6,j8,Md170c,dotmapMd170cR3)
	#call replace(i13,j1/2-j2/2-j3/2+j5/2-j9,j,j1,j2,j3,j5,j9,Md170c,dotmapMd170cR4)
	#call replace(i14,`Q2'/2+j2/2-j4/2,j,j2,j4,Md170c,dotmapMd170cR5)
	#call replace(i15,j4/2+j5/2-j6/2+j8,j,j4,j5,j6,j8,Md170c,dotmapMd170cR6)
	#call replace(i16,-j1/2+j2/2+j3/2-j4/2+j6/2-j8+j9,j,j1,j2,j3,j4,j6,j8,j9,Md170c,dotmapMd170cR7)
	if (count(Md170c,1)) Multiply replace_(Md170c,Md170d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md170d,1)) Multiply replace_(i1,j4,i2,j3,i3,j5,i4,j2,i5,j6,i6,j1);
	#call replace(i7,-`Q2'/2+j1/2+j4/2-j5/2+j8,j,j1,j4,j5,j8,Md170d,dotmapMd170dR1)
	#call replace(i8,j1/2-j2/2+j3/2+j4/2-j5/2+j7+j8,j,j1,j2,j3,j4,j5,j7,j8,Md170d,dotmapMd170dR2)
	#call replace(i9,-j3/2+j4/2-j5/2+j6/2+j8+j9,j,j3,j4,j5,j6,j8,j9,Md170d,dotmapMd170dR3)
	if (count(Md170d,1)) Multiply replace_(Md170d,Md86,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,i9);
	#redefine HASTOPOd86 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared170()
* Topology: 0-3 2-3 2-3 2-6 2-3 1-6 1-2 1-3 6-9
* Dots: p0.p4,p0.p6,p3.p4,p0.p1,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md170*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,5
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n12,$n9,$n11,$n7,$n6,$n5,$n1,$n3,$n4,$n2)
	#call hash(4,$n14,$n13,$n10,$n8,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n1,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i4,i1,i8,i11,i10,i12,i11,i8,i12,i10);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i4,i4,i1,i8,i11,i10,i12);
elseif ($bestiso == 4); Multiply replace_(i1,i4,i2,i1,i4,i2,i11,i8,i12,i10);
elseif ($bestiso == 5); Multiply replace_(i2,i4,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd170 automorphism;

#call CheckRemovedPropagators(d170,7,4,3,5,6,7,1,2,4)
#if `$DOACTION' == 0
.sort:reduce d170;
#endif
#endprocedure

#procedure Reduced170()
	#call Prepared170()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd170'
		#call MtoZ(Md170,Zd170,i,14)
		#call Reduce(d170)
		#call ZtoM(Zd170,Md170,i,14)
		#call Prepared170()
#else
		#if `USETURBO'
			#call TurboMd170()
		#endif
		#call insertionS(Md170,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md170b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond170()
#endif
	#endif
#endprocedure
*--#] reduce-d170 : 
*--#[ reduce-d169 :
#procedure Insertiond169()
* merge propagators with same momentum, and repeated dots
	if (count(Md169b,1)) Multiply replace_(Md169b,Md169c,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i15,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md169c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j2/2,j,j1,j2,Md169c,dotmapMd169cR1)
	#call replace(i11,j6-j8,j,j6,j8,Md169c,dotmapMd169cR2)
	#call replace(i12,j7-j9,j,j7,j9,Md169c,dotmapMd169cR3)
	#call replace(i13,-j2/2-j3/2-j4/2+j5/2+j6+j7-j8-j9,j,j2,j3,j4,j5,j6,j7,j8,j9,Md169c,dotmapMd169cR4)
	if (count(Md169c,1)) Multiply replace_(Md169c,Md169d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p2,p1.p2,p2.p5 and change topology to d36
	if (count(Md169d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i4,j4,i5,j5,i6,j7);
	#call replace(i7,`Q2'/2+j1/2-j3/2-j6-j7,j,j1,j3,j6,j7,Md169d,dotmapMd169dR1)
	#call replace(i8,j7-j8,j,j7,j8,Md169d,dotmapMd169dR2)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j4/2+j5/2-j6-j7+j9,j,j2,j3,j4,j5,j6,j7,j9,Md169d,dotmapMd169dR3)
	if (count(Md169d,1)) Multiply replace_(Md169d,Md36,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd36 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared169()
* Topology: 0-1 1-8 6-8 1-2 1-2 2-6 2-6 2-6 8-9
* Dots: p0.p5,p0.p6,p1.p5,p1.p6,p0.p3,p3.p5,p3.p6
* Apply automorphisms
if (match(Md169*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n5,$n7,$n6,$n3,$n4,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n5,$n7,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n5,$n7,$n6,$n4,$n3,$n2,$n1)
	#call hash(3,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n6,$n5,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n5,$n6,$n3,$n4,$n2,$n1)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i7,i7,i5,i8,i9,i10,i11);
elseif ($bestiso == 1); Multiply replace_(i3,i4,i4,i3,i5,i7,i6,i5,i7,i6,i9,i8,i11,i10);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i7,i7,i5,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 3); Multiply replace_(i5,i7,i6,i5,i7,i6,i9,i8,i11,i10,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i5,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 7); Multiply replace_(i5,i6,i6,i5,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i3,i4,i4,i3,i6,i7,i7,i6);
elseif ($bestiso == 9); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 10); Multiply replace_(i3,i4,i4,i3,i5,i7,i7,i5);
elseif ($bestiso == 11); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd169 automorphism;

#call CheckRemovedPropagators(d169,7,1,2,1,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d169;
#endif
#endprocedure

#procedure Reduced169()
	#call Prepared169()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd169'
		#call MtoZ(Md169,Zd169,i,14)
		#call Reduce(d169)
		#call ZtoM(Zd169,Md169,i,14)
		#call Prepared169()
#else
		#if `USETURBO'
			#call TurboMd169()
		#endif
		#call insertionS(Md169,i3,i4,i12,i13,i14,i3,`Q2',i5,i6,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md169b,1)) Multiply replace_(<i5,i4>,...,<i17,i16>);
		#call Insertiond169()
#endif
	#endif
#endprocedure
*--#] reduce-d169 : 
*--#[ reduce-d168 :
#procedure Insertiond168()
* merge propagators with same momentum, and repeated dots
	if (count(Md168b,1)) Multiply replace_(Md168b,Md168c,i15,i7,i16,i8,i19,i9,i17,i15,i18,i16);

* rewrite insertion dots
	if (count(Md168c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j5/2-j7,j,j1,j5,j7,Md168c,dotmapMd168cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2+j3/2-j7,j,j1,j2,j3,j7,Md168c,dotmapMd168cR2)
	#call replace(i12,-j2/2-j3/2+j5/2,j,j2,j3,j5,Md168c,dotmapMd168cR3)
	#call replace(i13,j4/2+j5/2-j6/2-j9,j,j4,j5,j6,j9,Md168c,dotmapMd168cR4)
	#call replace(i14,`Q2'/2+j1/2-j5/2,j,j1,j5,Md168c,dotmapMd168cR5)
	#call replace(i15,j2/2-j3/2-j5/2+j7,j,j2,j3,j5,j7,Md168c,dotmapMd168cR6)
	#call replace(i16,-j4/2-j5/2+j6/2+j8,j,j4,j5,j6,j8,Md168c,dotmapMd168cR7)
	if (count(Md168c,1)) Multiply replace_(Md168c,Md168d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p2.p4 and change topology to d65
	if (count(Md168d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7);
	#call replace(i7,`Q2'/2-j1/2+j5/2-j8,j,j1,j5,j8,Md168d,dotmapMd168dR1)
	#call replace(i9,j4/2+j5/2-j6/2-j9,j,j4,j5,j6,j9,Md168d,dotmapMd168dR2)
	if (count(Md168d,1)) Multiply replace_(Md168d,Md65,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd65 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared168()
* Topology: 0-1 1-8 1-2 1-2 1-2 2-4 4-8 2-4 8-9
* Dots: p0.p4,p0.p5,p4.p5,p0.p2,p1.p2,p2.p4,p2.p5
* Apply automorphisms
if (match(Md168*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n5,$n6,$n7,$n2,$n4,$n3,$n1)
	#call hash(1,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n5,$n6,$n7,$n3,$n2,$n4,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n3,$n4,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n5,$n6,$n7,$n2,$n3,$n4,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n12==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n10,$n13,$n12,$n8,$n14,$n9,$n11,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n14,$n9,$n11,$n7,$n6,$n5,$n2,$n4,$n3,$n1)
	#call hash(10,$n10,$n13,$n12,$n8,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n2,$n4,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i4,i4,i2,i5,i7,i7,i5,i8,i11);
elseif ($bestiso == 1); Multiply replace_(i2,i4,i3,i2,i4,i3,i5,i7,i7,i5,i11,i8);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i5,i7,i7,i5);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2,i5,i7,i7,i5);
elseif ($bestiso == 5); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 6); Multiply replace_(i2,i4,i4,i2,i5,i7,i7,i5,i8,i11,i11,i8);
elseif ($bestiso == 7); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 8); Multiply replace_(i2,i4,i4,i2,i8,i11,i10,i14,i11,i8,i14,i10);
elseif ($bestiso == 9); Multiply replace_(i2,i3,i3,i4,i4,i2,i8,i11,i10,i14);
elseif ($bestiso == 10); Multiply replace_(i2,i4,i3,i2,i4,i3,i11,i8,i14,i10);
elseif ($bestiso == 11); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd168 automorphism;

#call CheckRemovedPropagators(d168,7,1,6,1,2,3,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d168;
#endif
#endprocedure

#procedure Reduced168()
	#call Prepared168()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd168'
		#call MtoZ(Md168,Zd168,i,14)
		#call Reduce(d168)
		#call ZtoM(Zd168,Md168,i,14)
		#call Prepared168()
#else
		#if `USETURBO'
			#call TurboMd168()
		#endif
		#call insertionS(Md168,i2,i3,i11,i12,i13,i14,i2,`Q2',i1,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md168b,1)) Multiply replace_(<i4,i3>,...,<i20,i19>);
		#call Insertiond168()
#endif
	#endif
#endprocedure
*--#] reduce-d168 : 
*--#[ reduce-d167 :
#procedure Insertiond167()
* merge propagators with same momentum, and repeated dots
	if (count(Md167b,1)) Multiply replace_(Md167b,Md167c,i14,i7,i16,i8,i17,i9,i15,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md167c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j3/2-j5/2-j8,j,j3,j5,j8,Md167c,dotmapMd167cR1)
	#call replace(i11,-j2/2-j4/2+j6/2+j9,j,j2,j4,j6,j9,Md167c,dotmapMd167cR2)
	#call replace(i12,j1/2+j3/2-j4/2,j,j1,j3,j4,Md167c,dotmapMd167cR3)
	#call replace(i13,-j1/2+j3/2-j4/2,j,j1,j3,j4,Md167c,dotmapMd167cR4)
	#call replace(i14,`Q2'/2+j3/2-j5/2,j,j3,j5,Md167c,dotmapMd167cR5)
	#call replace(i15,j2/2+j4/2-j6/2,j,j2,j4,j6,Md167c,dotmapMd167cR6)
	#call replace(i16,-j1/2+j3/2+j4/2,j,j1,j3,j4,Md167c,dotmapMd167cR7)
	if (count(Md167c,1)) Multiply replace_(Md167c,Md167d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p4,p0.p2,p1.p2 and change topology to d94
	if (count(Md167d,1)) Multiply replace_(i1,j4,i2,j2,i3,j5,i4,j6,i5,j1,i6,j3,i7,j8);
	#call replace(i8,`Q2'/2-j1/2+j5/2-j7,j,j1,j5,j7,Md167d,dotmapMd167dR1)
	#call replace(i9,j8-j9,j,j8,j9,Md167d,dotmapMd167dR2)
	if (count(Md167d,1)) Multiply replace_(Md167d,Md94,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd94 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared167()
* Topology: 0-1 1-5 1-3 5-6 1-5 3-5 1-6 1-3 6-9
* Dots: p0.p2,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md167*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n1,$n3,$n7,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n12==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i2,i7,i4,i1,i7,i2);
elseif ($bestiso == 3); Multiply replace_(i2,i7,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd167 automorphism;

#call CheckRemovedPropagators(d167,7,2,3,5,1,2,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d167;
#endif
#endprocedure

#procedure Reduced167()
	#call Prepared167()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd167'
		#call MtoZ(Md167,Zd167,i,14)
		#call Reduce(d167)
		#call ZtoM(Zd167,Md167,i,14)
		#call Prepared167()
#else
		#if `USETURBO'
			#call TurboMd167()
		#endif
		#call insertionS(Md167,i1,i4,i11,i12,i13,i14,i1,`Q2',i2,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md167b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond167()
#endif
	#endif
#endprocedure
*--#] reduce-d167 : 
*--#[ reduce-d166 :
#procedure Insertiond166()
* merge propagators with same momentum, and repeated dots
	if (count(Md166b,1)) Multiply replace_(Md166b,Md166c,i14,i7,i15,i8,i16,i9,i17,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md166c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'-j8-j9,j,j8,j9,Md166c,dotmapMd166cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2+j5/2+j7-j8-j9,j,j1,j2,j5,j7,j8,j9,Md166c,dotmapMd166cR2)
	#call replace(i12,`Q2'/2-j1/2-j3/2+j4/2-j9,j,j1,j3,j4,j9,Md166c,dotmapMd166cR3)
	#call replace(i13,`Q2'/2-j1/2+j3/2-j4/2-j8,j,j1,j3,j4,j8,Md166c,dotmapMd166cR4)
	#call replace(i14,j2/2+j3/2-j6/2,j,j2,j3,j6,Md166c,dotmapMd166cR5)
	#call replace(i15,-`Q2'/2+j1/2-j3/2-j5/2+j6/2+j8+j9,j,j1,j3,j5,j6,j8,j9,Md166c,dotmapMd166cR6)
	#call replace(i16,-`Q2'/2+j1/2-j3/2-j4/2+j8+j9,j,j1,j3,j4,j8,j9,Md166c,dotmapMd166cR7)
	if (count(Md166c,1)) Multiply replace_(Md166c,Md166d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2,p0.p3 and change topology to d72
	if (count(Md166d,1)) Multiply replace_(i1,j4,i2,j5,i3,j1,i4,j6,i5,j3,i6,j2,i8,j7);
	#call replace(i7,j7-j8,j,j7,j8,Md166d,dotmapMd166dR1)
	#call replace(i9,-j8-j9,j,j8,j9,Md166d,dotmapMd166dR2)
	if (count(Md166d,1)) Multiply replace_(Md166d,Md72,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd72 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared166()
* Topology: 0-2 2-5 2-3 2-5 3-5 1-5 1-2 1-3 5-9
* Dots: p0.p2,p0.p4,p0.p5,p0.p1,p1.p2,p1.p4,p1.p5
* Apply automorphisms
if (match(Md166*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n5,$n6,$n2,$n1,$n4,$n3)
endif;
if (($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n12,$n13,$n11,$n10,$n8,$n9,$n7,$n5,$n6,$n2,$n3,$n4,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n8,$n9,$n10,$n7,$n4,$n2,$n6,$n1,$n5,$n3)
endif;
if (($n9==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n12,$n13,$n14,$n11,$n8,$n9,$n10,$n7,$n4,$n2,$n6,$n3,$n5,$n1)
endif;
if (($n8==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n2,$n4,$n5,$n1,$n6,$n3)
endif;
if (($n8==0)&&($n12==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n11,$n9,$n10,$n8,$n7,$n2,$n4,$n5,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n10+$n14)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i6,i6,i5,i8,i9,i9,i8);
elseif ($bestiso == 2); Multiply sign_($n10+$n14)*replace_(i2,i4,i4,i2,i5,i6,i6,i5,i8,i9,i9,i8,i12,i13,i13,i12);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 4); Multiply sign_($n9+$n13)*replace_(i1,i3,i2,i5,i3,i1,i4,i6,i5,i2,i6,i4,i8,i10,i10,i8);
elseif ($bestiso == 5); Multiply sign_($n9+$n13)*replace_(i2,i5,i4,i6,i5,i2,i6,i4,i8,i10,i10,i8,i12,i14,i14,i12);
elseif ($bestiso == 6); Multiply sign_($n8+$n12)*replace_(i1,i3,i2,i6,i3,i1,i4,i5,i5,i4,i6,i2,i9,i10,i10,i9);
elseif ($bestiso == 7); Multiply sign_($n8+$n12)*replace_(i2,i6,i4,i5,i5,i4,i6,i2,i9,i10,i10,i9,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd166 automorphism;

#call CheckRemovedPropagators(d166,7,5,2,4,5,6,7,1,3)
#if `$DOACTION' == 0
.sort:reduce d166;
#endif
#endprocedure

#procedure Reduced166()
	#call Prepared166()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd166'
		#call MtoZ(Md166,Zd166,i,14)
		#call Reduce(d166)
		#call ZtoM(Zd166,Md166,i,14)
		#call Prepared166()
#else
		#if `USETURBO'
			#call TurboMd166()
		#endif
		#call insertionS(Md166,i1,i3,i11,i12,i13,i14,i1,`Q2',i2,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md166b,1)) Multiply replace_(<i4,i3>,...,<i20,i19>);
		#call Insertiond166()
#endif
	#endif
#endprocedure
*--#] reduce-d166 : 
*--#[ reduce-d165 :
#procedure Insertiond165()
* merge propagators with same momentum, and repeated dots
	if (count(Md165b,1)) Multiply replace_(Md165b,Md165c,i15,i7,i16,i8,i17,i9,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md165c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j3/2-j8,j,j2,j3,j8,Md165c,dotmapMd165cR1)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md165c,dotmapMd165cR2)
	#call replace(i12,-j4/2-j5/2+j6/2+j9,j,j4,j5,j6,j9,Md165c,dotmapMd165cR3)
	#call replace(i13,-j1/2+j2/2-j5/2,j,j1,j2,j5,Md165c,dotmapMd165cR4)
	#call replace(i14,`Q2'/2+j2/2-j3/2,j,j2,j3,Md165c,dotmapMd165cR5)
	#call replace(i15,-j1/2+j2/2+j5/2,j,j1,j2,j5,Md165c,dotmapMd165cR6)
	#call replace(i16,j4/2+j5/2-j6/2,j,j4,j5,j6,Md165c,dotmapMd165cR7)
	if (count(Md165c,1)) Multiply replace_(Md165c,Md165d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p4,p1.p4 and change topology to d59
	if (count(Md165d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j8);
	#call replace(i8,`Q2'/2+j2/2-j3/2-j7,j,j2,j3,j7,Md165d,dotmapMd165dR1)
	#call replace(i9,j4/2+j5/2-j6/2+j9,j,j4,j5,j6,j9,Md165d,dotmapMd165dR2)
	if (count(Md165d,1)) Multiply replace_(Md165d,Md59,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd59 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared165()
* Topology: 0-1 2-7 1-2 1-7 2-7 2-4 4-7 2-4 7-9
* Dots: p0.p5,p0.p6,p2.p5,p0.p1,p1.p2,p1.p5,p1.p6
* Apply automorphisms
if (match(Md165*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i4,i1,i5,i7,i7,i5);
elseif ($bestiso == 3); Multiply replace_(i5,i7,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd165 automorphism;

#call CheckRemovedPropagators(d165,7,2,2,6,1,3,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d165;
#endif
#endprocedure

#procedure Reduced165()
	#call Prepared165()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd165'
		#call MtoZ(Md165,Zd165,i,14)
		#call Reduce(d165)
		#call ZtoM(Zd165,Md165,i,14)
		#call Prepared165()
#else
		#if `USETURBO'
			#call TurboMd165()
		#endif
		#call insertionS(Md165,i1,i4,i11,i12,i13,i14,i1,`Q2',i2,i5,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md165b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond165()
#endif
	#endif
#endprocedure
*--#] reduce-d165 : 
*--#[ reduce-d164 :
#procedure Insertiond164()
* merge propagators with same momentum, and repeated dots
	if (count(Md164b,1)) Multiply replace_(Md164b,Md164c,i14,i7,i15,i8,i16,i9,i17,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md164c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j8-j9,j,j8,j9,Md164c,dotmapMd164cR1)
	#call replace(i11,-j1/2-j4/2+j6/2,j,j1,j4,j6,Md164c,dotmapMd164cR2)
	#call replace(i12,j2/2+j4/2-j5/2,j,j2,j4,j5,Md164c,dotmapMd164cR3)
	#call replace(i13,j2/2-j4/2-j5/2,j,j2,j4,j5,Md164c,dotmapMd164cR4)
	#call replace(i14,-`Q2'/2-j1/2-j2/2+j3/2+j7+j8,j,j1,j2,j3,j7,j8,Md164c,dotmapMd164cR5)
	#call replace(i15,-`Q2'/2-j2/2+j3/2+j4/2-j6/2+j7+j8,j,j2,j3,j4,j6,j7,j8,Md164c,dotmapMd164cR6)
	#call replace(i16,j2/2-j4/2+j5/2,j,j2,j4,j5,Md164c,dotmapMd164cR7)
	if (count(Md164c,1)) Multiply replace_(Md164c,Md164d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d58
	if (count(Md164d,1)) Multiply replace_(i1,j6,i2,j4,i3,j1,i4,j5,i5,j2,i6,j3,i8,j9,i9,j7);
	#call replace(i7,j7+j8-j9,j,j7,j8,j9,Md164d,dotmapMd164dR1)
	if (count(Md164d,1)) Multiply replace_(Md164d,Md58,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd58 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared164()
* Topology: 0-1 1-5 1-3 1-7 3-5 3-5 3-7 5-7 7-9
* Dots: p0.p1,p0.p2,p0.p6,p0.p4,p1.p4,p2.p4,p4.p6
* Apply automorphisms
if (match(Md164*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n6,$n7,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n12,$n13,$n11,$n10,$n8,$n9,$n6,$n7,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n8,$n9,$n10,$n2,$n1,$n4,$n5,$n3,$n7,$n6)
endif;
if (($n9==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n12,$n13,$n14,$n11,$n8,$n9,$n10,$n2,$n1,$n5,$n4,$n3,$n7,$n6)
endif;
if (($n8==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n1,$n2,$n4,$n5,$n3,$n6,$n7)
endif;
if (($n8==0)&&($n12==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n11,$n9,$n10,$n8,$n1,$n2,$n5,$n4,$n3,$n6,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i2,i2,i1,i4,i5,i5,i4,i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 2); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i2,i2,i1,i6,i7,i7,i6,i8,i9,i9,i8,i12,i13,i13,i12);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i2,i7,i4,i5,i5,i4,i6,i1,i7,i2,i8,i10,i10,i8);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i2,i7,i6,i1,i7,i2,i8,i10,i10,i8,i12,i14,i14,i12);
elseif ($bestiso == 6); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i7,i2,i6,i4,i5,i5,i4,i6,i2,i7,i1,i9,i10,i10,i9);
elseif ($bestiso == 7); Multiply sign_($n11+$n12+$n13+$n14)*replace_(i1,i7,i2,i6,i6,i2,i7,i1,i9,i10,i10,i9,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd164 automorphism;

#call CheckRemovedPropagators(d164,7,4,1,2,6,7,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d164;
#endif
#endprocedure

#procedure Reduced164()
	#call Prepared164()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd164'
		#call MtoZ(Md164,Zd164,i,14)
		#call Reduce(d164)
		#call ZtoM(Zd164,Md164,i,14)
		#call Prepared164()
#else
		#if `USETURBO'
			#call TurboMd164()
		#endif
		#call insertionS(Md164,i4,i5,i11,i12,i13,i14,i4,`Q2',i1,i2,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md164b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond164()
#endif
	#endif
#endprocedure
*--#] reduce-d164 : 
*--#[ reduce-d163 :
#procedure Insertiond163()
* merge propagators with same momentum, and repeated dots
	if (count(Md163b,1)) Multiply replace_(Md163b,Md163c,i15,i7,i16,i8,i18,i9,i17,i15,i19,i16);

* rewrite insertion dots
	if (count(Md163c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md163c,dotmapMd163cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md163c,dotmapMd163cR2)
	#call replace(i12,-j2/2-j3/2+j6/2-j7,j,j2,j3,j6,j7,Md163c,dotmapMd163cR3)
	#call replace(i13,-j8-j9,j,j8,j9,Md163c,dotmapMd163cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md163c,dotmapMd163cR5)
	#call replace(i15,j2/2+j3/2-j6/2,j,j2,j3,j6,Md163c,dotmapMd163cR6)
	#call replace(i16,j4/2-j5/2+j6/2+j9,j,j4,j5,j6,j9,Md163c,dotmapMd163cR7)
	if (count(Md163c,1)) Multiply replace_(Md163c,Md163d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d73
	if (count(Md163d,1)) Multiply replace_(i1,j4,i2,j1,i3,j5,i4,j3,i5,j6,i6,j2,i8,j8,i9,j9);
	#call replace(i7,-`Q2'/2-j1/2+j4/2-j7,j,j1,j4,j7,Md163d,dotmapMd163dR1)
	if (count(Md163d,1)) Multiply replace_(Md163d,Md73,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd73 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared163()
* Topology: 0-4 2-4 2-4 3-4 2-3 1-2 1-2 1-3 2-9
* Dots: p0.p4,p0.p5,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md163*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd163 automorphism;

#call CheckRemovedPropagators(d163,7,2,3,7,1,2,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d163;
#endif
#endprocedure

#procedure Reduced163()
	#call Prepared163()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd163'
		#call MtoZ(Md163,Zd163,i,14)
		#call Reduce(d163)
		#call ZtoM(Zd163,Md163,i,14)
		#call Prepared163()
#else
		#if `USETURBO'
			#call TurboMd163()
		#endif
		#call insertionS(Md163,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md163b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond163()
#endif
	#endif
#endprocedure
*--#] reduce-d163 : 
*--#[ reduce-d162 :
#procedure Insertiond162()
* merge propagators with same momentum, and repeated dots
	if (count(Md162b,1)) Multiply replace_(Md162b,Md162c,i14,i7,i15,i8,i17,i9,i16,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md162c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md162c,dotmapMd162cR1)
	#call replace(i11,j2/2-j5/2+j6/2+j7,j,j2,j5,j6,j7,Md162c,dotmapMd162cR2)
	#call replace(i12,-j3/2+j4/2-j5/2+j8+j9,j,j3,j4,j5,j8,j9,Md162c,dotmapMd162cR3)
	#call replace(i13,`Q2'/2-j1/2+j2/2+j3/2-j4/2+j7-j8-j9,j,j1,j2,j3,j4,j7,j8,j9,Md162c,dotmapMd162cR4)
	#call replace(i14,`Q2'/2-j1/2+j6/2+j7-j8,j,j1,j6,j7,j8,Md162c,dotmapMd162cR5)
	#call replace(i15,j2/2+j5/2-j6/2-j9,j,j2,j5,j6,j9,Md162c,dotmapMd162cR6)
	#call replace(i16,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md162c,dotmapMd162cR7)
	if (count(Md162c,1)) Multiply replace_(Md162c,Md162d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d62
	if (count(Md162d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,j3/2-j4/2+j5/2-j8+j9,j,j3,j4,j5,j8,j9,Md162d,dotmapMd162dR1)
	if (count(Md162d,1)) Multiply replace_(Md162d,Md62,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd62 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared162()
* Topology: 0-1 1-2 2-3 3-4 3-4 2-4 1-3 1-2 2-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md162*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n3,$n4,$n2,$n7)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i7,i3,i4,i4,i3,i7,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i7,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd162 automorphism;

#call CheckRemovedPropagators(d162,7,2,5,6,1,2,3,4,7)
#if `$DOACTION' == 0
.sort:reduce d162;
#endif
#endprocedure

#procedure Reduced162()
	#call Prepared162()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd162'
		#call MtoZ(Md162,Zd162,i,14)
		#call Reduce(d162)
		#call ZtoM(Zd162,Md162,i,14)
		#call Prepared162()
#else
		#if `USETURBO'
			#call TurboMd162()
		#endif
		#call insertionS(Md162,i1,i7,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md162b,1)) Multiply replace_(<i8,i7>,...,<i20,i19>);
		#call Insertiond162()
#endif
	#endif
#endprocedure
*--#] reduce-d162 : 
*--#[ reduce-d161 :
#procedure Insertiond161()
* merge propagators with same momentum, and repeated dots
	if (count(Md161b,1)) Multiply replace_(Md161b,Md161c,i14,i7,i15,i8,i17,i9,i16,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md161c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j6/2,j,j1,j6,Md161c,dotmapMd161cR1)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md161c,dotmapMd161cR2)
	#call replace(i12,j3/2-j4/2+j5/2+j9,j,j3,j4,j5,j9,Md161c,dotmapMd161cR3)
	#call replace(i13,j1/2-j2/2-j3/2+j4/2-j9,j,j1,j2,j3,j4,j9,Md161c,dotmapMd161cR4)
	#call replace(i14,`Q2'/2+j1/2-j6/2-j7-j8,j,j1,j6,j7,j8,Md161c,dotmapMd161cR5)
	#call replace(i15,j1/2-j2/2-j5/2-j9,j,j1,j2,j5,j9,Md161c,dotmapMd161cR6)
	#call replace(i16,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md161c,dotmapMd161cR7)
	if (count(Md161c,1)) Multiply replace_(Md161c,Md161d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d68
	if (count(Md161d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8);
	#call replace(i9,-j3/2+j4/2-j5/2+j9,j,j3,j4,j5,j9,Md161d,dotmapMd161dR1)
	if (count(Md161d,1)) Multiply replace_(Md161d,Md68,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd68 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared161()
* Topology: 0-1 1-2 2-7 2-4 2-4 4-7 1-2 1-7 7-9
* Dots: p0.p2,p0.p3,p2.p3,p0.p1,p1.p2,p1.p3,p1.p4
* Apply automorphisms
if (match(Md161*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
endif;
if (($n9==0)&&($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i6,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd161 automorphism;

#call CheckRemovedPropagators(d161,7,1,5,1,2,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d161;
#endif
#endprocedure

#procedure Reduced161()
	#call Prepared161()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd161'
		#call MtoZ(Md161,Zd161,i,14)
		#call Reduce(d161)
		#call ZtoM(Zd161,Md161,i,14)
		#call Prepared161()
#else
		#if `USETURBO'
			#call TurboMd161()
		#endif
		#call insertionS(Md161,i1,i6,i11,i12,i13,i14,i1,`Q2',i2,i3,i4,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md161b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond161()
#endif
	#endif
#endprocedure
*--#] reduce-d161 : 
*--#[ reduce-d160 :
#procedure Insertiond160()
* merge propagators with same momentum, and repeated dots
	if (count(Md160b,1)) Multiply replace_(Md160b,Md160c,i14,i7,i15,i8,i16,i9,i17,i14,i18,i15,i19,i16);

* rewrite insertion dots
	if (count(Md160c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'-j7-j9,j,j7,j9,Md160c,dotmapMd160cR1)
	#call replace(i11,`Q2'/2-j1/2-j4/2+j5/2-j9,j,j1,j4,j5,j9,Md160c,dotmapMd160cR2)
	#call replace(i12,-j2/2-j4/2+j6/2,j,j2,j4,j6,Md160c,dotmapMd160cR3)
	#call replace(i13,`Q2'/2+j1/2-j4/2-j5/2-j7,j,j1,j4,j5,j7,Md160c,dotmapMd160cR4)
	#call replace(i14,`Q2'/2+j1/2+j2/2-j3/2-j7+j8,j,j1,j2,j3,j7,j8,Md160c,dotmapMd160cR5)
	#call replace(i15,-`Q2'/2-j1/2+j4/2-j5/2+j7+j9,j,j1,j4,j5,j7,j9,Md160c,dotmapMd160cR6)
	#call replace(i16,-`Q2'/2-j1/2+j3/2+j4/2-j6/2+j7,j,j1,j3,j4,j6,j7,Md160c,dotmapMd160cR7)
	if (count(Md160c,1)) Multiply replace_(Md160c,Md160d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md160d,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j5,i5,j6,i6,j4,i8,j8);
	#call replace(i7,`Q2'+j7+j8,j,j7,j8,Md160d,dotmapMd160dR1)
	#call replace(i9,-j7+j9,j,j7,j9,Md160d,dotmapMd160dR2)
	if (count(Md160d,1)) Multiply replace_(Md160d,Md57,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd57 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared160()
* Topology: 0-4 4-5 1-4 3-4 1-5 3-5 1-5 1-3 5-9
* Dots: p0.p1,p0.p2,p0.p5,p0.p4,p1.p4,p2.p4,p4.p5
* Apply automorphisms
if (match(Md160*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,1
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd160 automorphism;

#call CheckRemovedPropagators(d160,7,4,2,3,5,7,1,4,6)
#if `$DOACTION' == 0
.sort:reduce d160;
#endif
#endprocedure

#procedure Reduced160()
	#call Prepared160()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd160'
		#call MtoZ(Md160,Zd160,i,14)
		#call Reduce(d160)
		#call ZtoM(Zd160,Md160,i,14)
		#call Prepared160()
#else
		#if `USETURBO'
			#call TurboMd160()
		#endif
		#call insertionS(Md160,i4,i6,i11,i12,i13,i14,i4,`Q2',i1,i2,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md160b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond160()
#endif
	#endif
#endprocedure
*--#] reduce-d160 : 
*--#[ reduce-d159 :
#procedure Insertiond159()
* merge propagators with same momentum, and repeated dots
	if (count(Md159b,1)) Multiply replace_(Md159b,Md159c,i3,i2,i2,i3,i4,i3,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i11,i7,i9,i8,i15,i8,i10,i9,i16,i9,i12,i10,i13,i11);

* rewrite insertion dots
	if (count(Md159c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2-j3/2-j6-j7,j,j1,j2,j3,j6,j7,Md159c,dotmapMd159cR1)
	#call replace(i11,-j2/2-j4/2+j5/2-j8-j9,j,j2,j4,j5,j8,j9,Md159c,dotmapMd159cR2)
	if (count(Md159c,1)) Multiply replace_(Md159c,Md159d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4,p0.p1,p1.p2 and change topology to d41
	if (count(Md159d,1)) Multiply replace_(i1,j2,i2,j5,i3,j4,i4,j1,i5,j3,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md159d,1)) Multiply replace_(Md159d,Md41,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd41 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared159()
* Topology: 0-4 1-4 2-4 3-4 1-2 1-3 1-2 1-3 1-9
* Dots: p0.p1,p0.p2,p0.p5,p1.p5,p0.p4,p1.p4,p4.p5
* Apply automorphisms
if (match(Md159*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n11,$n10,$n11,$n10,$n9,$n8,$n4,$n7,$n6,$n5,$n2,$n3,$n1)
	#call hash(1,$n14,$n13,$n12,$n13,$n12,$n9,$n8,$n6,$n5,$n4,$n7,$n2,$n3,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n5,$n6,$n7,$n2,$n3,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n4,$n7,$n6,$n3,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
if (($n9==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n11,$n10,$n13,$n12,$n9,$n8,$n6,$n7,$n4,$n5,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i6,i6,i7,i7,i4,i12,i10,i13,i11);
elseif ($bestiso == 1); Multiply replace_(i2,i3,i3,i2,i4,i7,i5,i4,i6,i5,i7,i6,i10,i12,i11,i13);
elseif ($bestiso == 2); Multiply replace_(i2,i3,i3,i2,i4,i7,i5,i6,i6,i5,i7,i4);
elseif ($bestiso == 3); Multiply replace_(i4,i6,i5,i7,i6,i4,i7,i5);
elseif ($bestiso == 5); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 6); Multiply replace_(i4,i6,i6,i4);
elseif ($bestiso == 7); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4,i6,i7,i7,i6,i10,i12,i11,i13,i12,i10,i13,i11);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd159 automorphism;

#call CheckRemovedPropagators(d159,7,2,2,3,1,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d159;
#endif
#endprocedure

#procedure Reduced159()
	#call Prepared159()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd159'
		#call MtoZ(Md159,Zd159,i,14)
		#call Reduce(d159)
		#call ZtoM(Zd159,Md159,i,14)
		#call Prepared159()
#else
		#if `USETURBO'
			#call TurboMd159()
		#endif
		#call insertionS(Md159,i4,i6,i12,i13,i14,i4,`Q2',i1,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md159b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond159()
#endif
	#endif
#endprocedure
*--#] reduce-d159 : 
*--#[ reduce-d158 :
#procedure Insertiond158()
* merge propagators with same momentum, and repeated dots
	if (count(Md158b,1)) Multiply replace_(Md158b,Md158c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i15,i7,i9,i8,i10,i9,i16,i9,i11,i10,i12,i11,i13,i12);

* rewrite insertion dots
	if (count(Md158c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,j7+j8,j,j7,j8,Md158c,dotmapMd158cR1)
	#call replace(i11,-`Q2'/2-j1/2-j4/2+j5/2+j6+j7+j8,j,j1,j4,j5,j6,j7,j8,Md158c,dotmapMd158cR2)
	#call replace(i12,j2/2-j3/2+j4/2,j,j2,j3,j4,Md158c,dotmapMd158cR3)
	if (count(Md158c,1)) Multiply replace_(Md158c,Md158d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p3,p0.p2,p2.p3 and change topology to d38
	if (count(Md158d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j1,i5,j4,i6,j7,i7,j8,i9,j9);
	#call replace(i8,j6-j8,j,j6,j8,Md158d,dotmapMd158dR1)
	if (count(Md158d,1)) Multiply replace_(Md158d,Md38,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd38 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared158()
* Topology: 0-1 1-3 1-7 3-4 3-4 4-7 1-3 1-7 7-9
* Dots: p0.p2,p0.p3,p0.p4,p2.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md158*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,7
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
endif;
if (($n11==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n8==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n1,$n5,$n4,$n3,$n7,$n6)
	#call hash(5,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n2,$n1,$n5,$n3,$n4,$n7,$n6)
endif;
if (($n8==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n9,$n10,$n8,$n2,$n6,$n5,$n3,$n4,$n7,$n1)
endif;
if (($n8==0)&&($n11==0)&&($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1,i9,i10,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3,i9,i10,i10,i9);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i2,i7,i6,i1,i7,i2);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i2,i7,i3,i4,i4,i3,i6,i1,i7,i2,i9,i10,i10,i9);
elseif ($bestiso == 6); Multiply replace_(i2,i7,i3,i4,i4,i3,i7,i2,i9,i10,i10,i9);
elseif ($bestiso == 7); Multiply replace_(i2,i7,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd158 automorphism;

#call CheckRemovedPropagators(d158,7,1,5,1,2,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d158;
#endif
#endprocedure

#procedure Reduced158()
	#call Prepared158()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd158'
		#call MtoZ(Md158,Zd158,i,14)
		#call Reduce(d158)
		#call ZtoM(Zd158,Md158,i,14)
		#call Prepared158()
#else
		#if `USETURBO'
			#call TurboMd158()
		#endif
		#call insertionS(Md158,i1,i6,i12,i13,i14,i1,`Q2',i2,i3,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md158b,1)) Multiply replace_(<i7,i6>,...,<i17,i16>);
		#call Insertiond158()
#endif
	#endif
#endprocedure
*--#] reduce-d158 : 
*--#[ reduce-d157 :
#procedure Insertiond157()
* merge propagators with same momentum, and repeated dots
	if (count(Md157b,1)) Multiply replace_(Md157b,Md157c,i14,i7,i16,i8,i18,i9,i15,i14,i17,i15,i19,i16);

* rewrite insertion dots
	if (count(Md157c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j3/2-j7,j,j2,j3,j7,Md157c,dotmapMd157cR1)
	#call replace(i11,-j1/2+j2/2-j4/2,j,j1,j2,j4,Md157c,dotmapMd157cR2)
	#call replace(i12,-j1/2+j2/2+j4/2,j,j1,j2,j4,Md157c,dotmapMd157cR3)
	#call replace(i13,j4/2+j5/2-j6/2,j,j4,j5,j6,Md157c,dotmapMd157cR4)
	#call replace(i14,`Q2'/2+j2/2-j3/2,j,j2,j3,Md157c,dotmapMd157cR5)
	#call replace(i15,j1/2+j2/2-j4/2,j,j1,j2,j4,Md157c,dotmapMd157cR6)
	#call replace(i16,j4/2+j5/2-j6/2+j9,j,j4,j5,j6,j9,Md157c,dotmapMd157cR7)
	if (count(Md157c,1)) Multiply replace_(Md157c,Md157d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5,p1.p5 and change topology to d63
	if (count(Md157d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	if (count(Md157d,1)) Multiply replace_(Md157d,Md63,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd63 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared157()
* Topology: 0-1 2-7 1-2 1-7 3-7 3-7 2-3 2-3 7-9
* Dots: p0.p1,p0.p6,p1.p6,p0.p4,p1.p4,p2.p4,p4.p6
* Apply automorphisms
if (match(Md157*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,3
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i4,i5,i5,i4,i6,i7,i7,i6);
elseif ($bestiso == 2); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd157 automorphism;

#call CheckRemovedPropagators(d157,7,1,2,1,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d157;
#endif
#endprocedure

#procedure Reduced157()
	#call Prepared157()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd157'
		#call MtoZ(Md157,Zd157,i,14)
		#call Reduce(d157)
		#call ZtoM(Zd157,Md157,i,14)
		#call Prepared157()
#else
		#if `USETURBO'
			#call TurboMd157()
		#endif
		#call insertionS(Md157,i4,i5,i11,i12,i13,i14,i4,`Q2',i1,i2,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md157b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond157()
#endif
	#endif
#endprocedure
*--#] reduce-d157 : 
*--#[ reduce-d156 :
#procedure Insertiond156()
* merge propagators with same momentum, and repeated dots
	if (count(Md156b,1)) Multiply replace_(Md156b,Md156c,i16,i7,i17,i8,i18,i9,i19,i16);

* rewrite insertion dots
	if (count(Md156c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j1/2+j2/2-j3/2+j4/2-j7,j,j1,j2,j3,j4,j7,Md156c,dotmapMd156cR1)
	#call replace(i11,-j1+j8-j9,j,j1,j8,j9,Md156c,dotmapMd156cR2)
	#call replace(i12,-j1/2+j2/2+j5/2-j6/2-j9,j,j1,j2,j5,j6,j9,Md156c,dotmapMd156cR3)
	#call replace(i13,j1/2+j2/2-j5/2-j6/2-j8,j,j1,j2,j5,j6,j8,Md156c,dotmapMd156cR4)
	#call replace(i14,`Q2'/2+j1/2-j4/2,j,j1,j4,Md156c,dotmapMd156cR5)
	#call replace(i15,`Q2'/2+j2/2-j3/2,j,j2,j3,Md156c,dotmapMd156cR6)
	#call replace(i16,j1/2+j2/2-j5/2+j6/2-j8+j9,j,j1,j2,j5,j6,j8,j9,Md156c,dotmapMd156cR7)
	if (count(Md156c,1)) Multiply replace_(Md156c,Md156d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d66
	if (count(Md156d,1)) Multiply replace_(i1,j6,i2,j3,i3,j4,i4,j1,i5,j5,i6,j2,i7,j7);
	#call replace(i8,j2/2+j3/2-j5/2+j6/2+j7-j8-j9,j,j2,j3,j5,j6,j7,j8,j9,Md156d,dotmapMd156dR1)
	#call replace(i9,j7-j8,j,j7,j8,Md156d,dotmapMd156dR2)
	if (count(Md156d,1)) Multiply replace_(Md156d,Md66,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd66 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared156()
* Topology: 0-1 2-6 1-2 1-3 3-6 2-3 2-3 2-3 6-9
* Dots: p0.p7,p1.p2,p1.p7,p0.p5,p1.p5,p2.p5,p5.p7
* Apply automorphisms
if (match(Md156*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,23
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n5,$n7,$n6,$n1,$n2,$n3,$n4)
	#call hash(1,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n6,$n5,$n7,$n1,$n2,$n3,$n4)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n5,$n7,$n6,$n2,$n1,$n4,$n3)
	#call hash(3,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n6,$n5,$n7,$n2,$n1,$n4,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n1,$n2,$n3,$n4)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n2,$n1,$n4,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n1,$n2,$n3,$n4)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n2,$n1,$n4,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n2,$n3,$n4)
	#call hash(9,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n5,$n6,$n7,$n1,$n2,$n3,$n4)
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n1,$n4,$n3)
	#call hash(11,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n5,$n6,$n7,$n2,$n1,$n4,$n3)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n3,$n4,$n1,$n2)
endif;
if (($n10==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n1,$n2)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n13==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(16,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n12==0));
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(17,$n14,$n10,$n12,$n8,$n13,$n9,$n11,$n5,$n6,$n7,$n3,$n4,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(18,$n14,$n13,$n12,$n11,$n12,$n9,$n11,$n5,$n7,$n6,$n4,$n3,$n2,$n1)
	#call hash(19,$n14,$n13,$n10,$n8,$n10,$n9,$n8,$n6,$n5,$n7,$n4,$n3,$n2,$n1)
	#call hash(20,$n14,$n13,$n12,$n11,$n13,$n9,$n11,$n5,$n7,$n6,$n3,$n4,$n1,$n2)
	#call hash(21,$n14,$n10,$n12,$n8,$n10,$n9,$n8,$n6,$n5,$n7,$n3,$n4,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(22,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
	#call hash(23,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,23
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i7,i7,i5,i8,i11);
elseif ($bestiso == 1); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i7,i6,i5,i7,i6,i11,i8);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i6,i6,i7,i7,i5,i8,i11);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i7,i6,i5,i7,i6,i11,i8);
elseif ($bestiso == 4); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i6,i7,i7,i6);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i7,i7,i6);
elseif ($bestiso == 6); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i5);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i6,i6,i5);
elseif ($bestiso == 8); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 9); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i7,i7,i5,i8,i11,i11,i8);
elseif ($bestiso == 10); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2);
elseif ($bestiso == 11); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i7,i7,i5,i8,i11,i11,i8);
elseif ($bestiso == 12); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i6,i6,i5);
elseif ($bestiso == 14); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i12,i13,i13,i12);
elseif ($bestiso == 15); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 16); Multiply replace_(i5,i7,i7,i5,i8,i11,i10,i12,i11,i8,i12,i10);
elseif ($bestiso == 17); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i7,i7,i5,i8,i11,i10,i13,i11,i8,i13,i10);
elseif ($bestiso == 18); Multiply replace_(i5,i6,i6,i7,i7,i5,i8,i11,i10,i12);
elseif ($bestiso == 19); Multiply replace_(i5,i7,i6,i5,i7,i6,i11,i8,i12,i10);
elseif ($bestiso == 20); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i6,i6,i7,i7,i5,i8,i11,i10,i13);
elseif ($bestiso == 21); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i7,i6,i5,i7,i6,i11,i8,i13,i10);
elseif ($bestiso == 22); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 23); Multiply sign_($n8+$n10+$n11+$n12+$n13)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i6,i7,i7,i6,i12,i13,i13,i12);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso23>,$bestiso,$bestisov;
.sort:Zd156 automorphism;

#call CheckRemovedPropagators(d156,7,4,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d156;
#endif
#endprocedure

#procedure Reduced156()
	#call Prepared156()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd156'
		#call MtoZ(Md156,Zd156,i,14)
		#call Reduce(d156)
		#call ZtoM(Zd156,Md156,i,14)
		#call Prepared156()
#else
		#if `USETURBO'
			#call TurboMd156()
		#endif
		#call insertionS(Md156,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i2,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md156b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond156()
#endif
	#endif
#endprocedure
*--#] reduce-d156 : 
*--#[ reduce-d155 :
#procedure Insertiond155()
* merge propagators with same momentum, and repeated dots
	if (count(Md155b,1)) Multiply replace_(Md155b,Md155c,i15,i7,i16,i8,i18,i9,i17,i15,i19,i16);

* rewrite insertion dots
	if (count(Md155c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-j7-j8,j,j7,j8,Md155c,dotmapMd155cR1)
	#call replace(i11,j2/2+j3/2-j5/2-j7-j9,j,j2,j3,j5,j7,j9,Md155c,dotmapMd155cR2)
	#call replace(i12,-j3/2-j4/2+j6/2,j,j3,j4,j6,Md155c,dotmapMd155cR3)
	#call replace(i13,j3/2-j4/2-j6/2,j,j3,j4,j6,Md155c,dotmapMd155cR4)
	#call replace(i14,`Q2'/2+j1/2-j2/2,j,j1,j2,Md155c,dotmapMd155cR5)
	#call replace(i15,-j2/2-j3/2+j5/2+j7,j,j2,j3,j5,j7,Md155c,dotmapMd155cR6)
	#call replace(i16,-j3/2+j4/2-j6/2,j,j3,j4,j6,Md155c,dotmapMd155cR7)
	if (count(Md155c,1)) Multiply replace_(Md155c,Md155d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Md155d,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i5,j6,i6,j5,i7,j7);
	#call replace(i8,-j7-j8,j,j7,j8,Md155d,dotmapMd155dR1)
	#call replace(i9,j2/2+j3/2-j6/2-j7-j8+j9,j,j2,j3,j6,j7,j8,j9,Md155d,dotmapMd155dR2)
	if (count(Md155d,1)) Multiply replace_(Md155d,Md83,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd83 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared155()
* Topology: 0-1 1-2 1-3 3-5 2-5 2-5 2-3 2-5 2-9
* Dots: p0.p3,p0.p7,p1.p7,p0.p4,p1.p4,p3.p4,p4.p7
* Apply automorphisms
if (match(Md155*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,5
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n12,$n11,$n8,$n4,$n6,$n7,$n5,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n9,$n10,$n9,$n8,$n5,$n6,$n4,$n7,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n10,$n9,$n12,$n11,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i4,i5,i5,i7,i7,i4,i9,i11,i10,i12);
elseif ($bestiso == 1); Multiply replace_(i4,i7,i5,i4,i7,i5,i11,i9,i12,i10);
elseif ($bestiso == 3); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 4); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 5); Multiply replace_(i4,i7,i7,i4,i9,i11,i10,i12,i11,i9,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd155 automorphism;

#call CheckRemovedPropagators(d155,7,2,2,3,1,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d155;
#endif
#endprocedure

#procedure Reduced155()
	#call Prepared155()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd155'
		#call MtoZ(Md155,Zd155,i,14)
		#call Reduce(d155)
		#call ZtoM(Zd155,Md155,i,14)
		#call Prepared155()
#else
		#if `USETURBO'
			#call TurboMd155()
		#endif
		#call insertionS(Md155,i4,i5,i11,i12,i13,i14,i4,`Q2',i1,i3,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md155b,1)) Multiply replace_(<i6,i5>,...,<i20,i19>);
		#call Insertiond155()
#endif
	#endif
#endprocedure
*--#] reduce-d155 : 
*--#[ reduce-d154 :
#procedure Insertiond154()
* merge propagators with same momentum, and repeated dots
	if (count(Md154b,1)) Multiply replace_(Md154b,Md154c,i14,i7,i16,i8,i18,i9,i15,i14,i17,i15,i19,i16);

* rewrite insertion dots
	if (count(Md154c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2+j2/2-j3/2-j7-j8,j,j2,j3,j7,j8,Md154c,dotmapMd154cR1)
	#call replace(i11,-j1/2+j3/2-j4/2-j9,j,j1,j3,j4,j9,Md154c,dotmapMd154cR2)
	#call replace(i12,-`Q2'/2-j1/2+j2/2+j5/2-j6/2-j7-j8-j9,j,j1,j2,j5,j6,j7,j8,j9,Md154c,dotmapMd154cR3)
	#call replace(i13,j4/2-j5/2-j6/2,j,j4,j5,j6,Md154c,dotmapMd154cR4)
	#call replace(i14,`Q2'/2+j2/2-j3/2,j,j2,j3,Md154c,dotmapMd154cR5)
	#call replace(i15,j1/2+j3/2-j4/2+j7,j,j1,j3,j4,j7,Md154c,dotmapMd154cR6)
	#call replace(i16,j4/2-j5/2+j6/2+j8+j9,j,j4,j5,j6,j8,j9,Md154c,dotmapMd154cR7)
	if (count(Md154c,1)) Multiply replace_(Md154c,Md154d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p1,p0.p5,p1.p5 and change topology to d61
	if (count(Md154d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7);
	#call replace(i8,-`Q2'/2+j2/2-j3/2-j7-j8,j,j2,j3,j7,j8,Md154d,dotmapMd154dR1)
	#call replace(i9,-j1/2+j3/2-j4/2-j9,j,j1,j3,j4,j9,Md154d,dotmapMd154dR2)
	if (count(Md154d,1)) Multiply replace_(Md154d,Md61,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd61 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared154()
* Topology: 0-1 4-5 1-4 1-5 2-4 2-5 2-5 2-5 4-9
* Dots: p0.p1,p0.p7,p1.p7,p0.p5,p1.p5,p2.p5,p5.p7
* Apply automorphisms
if (match(Md154*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,5
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n12,$n11,$n8,$n5,$n7,$n6,$n4,$n3,$n2,$n1)
	#call hash(1,$n14,$n13,$n10,$n9,$n10,$n9,$n8,$n6,$n5,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n13==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n14,$n13,$n10,$n9,$n12,$n11,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i6,i6,i7,i7,i5,i9,i11,i10,i12);
elseif ($bestiso == 1); Multiply replace_(i5,i7,i6,i5,i7,i6,i11,i9,i12,i10);
elseif ($bestiso == 3); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 4); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 5); Multiply replace_(i5,i7,i7,i5,i9,i11,i10,i12,i11,i9,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd154 automorphism;

#call CheckRemovedPropagators(d154,7,2,3,4,1,2,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d154;
#endif
#endprocedure

#procedure Reduced154()
	#call Prepared154()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd154'
		#call MtoZ(Md154,Zd154,i,14)
		#call Reduce(d154)
		#call ZtoM(Zd154,Md154,i,14)
		#call Prepared154()
#else
		#if `USETURBO'
			#call TurboMd154()
		#endif
		#call insertionS(Md154,i5,i6,i11,i12,i13,i14,i5,`Q2',i1,i2,i7,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md154b,1)) Multiply replace_(<i7,i6>,...,<i20,i19>);
		#call Insertiond154()
#endif
	#endif
#endprocedure
*--#] reduce-d154 : 
*--#[ reduce-d153 :
#procedure Insertiond153()
* merge propagators with same momentum, and repeated dots
	if (count(Md153b,1)) Multiply replace_(Md153b,Md153c,i16,i7,i17,i8,i18,i9,i19,i16);

* rewrite insertion dots
	if (count(Md153c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md153c,dotmapMd153cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md153c,dotmapMd153cR2)
	#call replace(i12,-`Q2'/2-j3/2+j4/2-j8,j,j3,j4,j8,Md153c,dotmapMd153cR3)
	#call replace(i13,-j7-j9,j,j7,j9,Md153c,dotmapMd153cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md153c,dotmapMd153cR5)
	#call replace(i15,`Q2'/2+j3/2-j4/2,j,j3,j4,Md153c,dotmapMd153cR6)
	#call replace(i16,j4/2+j5/2-j6/2+j7,j,j4,j5,j6,j7,Md153c,dotmapMd153cR7)
	if (count(Md153c,1)) Multiply replace_(Md153c,Md153d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d75
	if (count(Md153d,1)) Multiply replace_(i1,j1,i2,j5,i3,j4,i4,j3,i5,j2,i6,j6,i7,j7);
	#call replace(i8,j1/2+j3/2-j4/2-j5/2+j9,j,j1,j3,j4,j5,j9,Md153d,dotmapMd153dR1)
	#call replace(i9,-j7-j8,j,j7,j8,Md153d,dotmapMd153dR2)
	if (count(Md153d,1)) Multiply replace_(Md153d,Md75,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd75 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared153()
* Topology: 0-4 2-4 2-4 2-4 2-6 1-6 1-2 1-2 6-9
* Dots: p0.p6,p3.p4,p3.p6,p0.p1,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md153*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n13,$n8,$n6,$n7,$n5,$n4,$n1,$n3,$n2)
	#call hash(1,$n14,$n9,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n2,$n1,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n14,$n13,$n8,$n7,$n6,$n5,$n4,$n1,$n3,$n2)
	#call hash(4,$n10,$n9,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n1,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n12==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n11==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n10,$n9,$n12,$n11,$n14,$n13,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n14==0));
	#call hash(11,$n14,$n9,$n12,$n11,$n10,$n13,$n8,$n6,$n7,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i3,i3,i1,i6,i7,i7,i6,i9,i13);
elseif ($bestiso == 1); Multiply replace_(i1,i3,i2,i1,i3,i2,i6,i7,i7,i6,i13,i9);
elseif ($bestiso == 2); Multiply replace_(i2,i3,i3,i2,i6,i7,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i3,i3,i1,i9,i13,i10,i14);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i2,i1,i3,i2,i13,i9,i14,i10);
elseif ($bestiso == 6); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 7); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 8); Multiply replace_(i1,i3,i3,i1,i9,i13,i10,i14,i13,i9,i14,i10);
elseif ($bestiso == 9); Multiply replace_(i1,i2,i2,i1,i6,i7,i7,i6);
elseif ($bestiso == 10); Multiply replace_(i6,i7,i7,i6);
elseif ($bestiso == 11); Multiply replace_(i1,i3,i3,i1,i6,i7,i7,i6,i9,i13,i13,i9);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd153 automorphism;

#call CheckRemovedPropagators(d153,7,1,5,1,2,3,4,6,7)
#if `$DOACTION' == 0
.sort:reduce d153;
#endif
#endprocedure

#procedure Reduced153()
	#call Prepared153()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd153'
		#call MtoZ(Md153,Zd153,i,14)
		#call Reduce(d153)
		#call ZtoM(Zd153,Md153,i,14)
		#call Prepared153()
#else
		#if `USETURBO'
			#call TurboMd153()
		#endif
		#call insertionS(Md153,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md153b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond153()
#endif
	#endif
#endprocedure
*--#] reduce-d153 : 
*--#[ reduce-d152 :
#procedure Insertiond152()
* merge propagators with same momentum, and repeated dots
	if (count(Md152b,1)) Multiply replace_(Md152b,Md152c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i14,i6,i8,i7,i15,i7,i9,i8,i10,i9,i11,i10,i12,i11,i13,i12,i16,i13);

* rewrite insertion dots
	if (count(Md152c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md152c,dotmapMd152cR1)
	#call replace(i11,j6-j8,j,j6,j8,Md152c,dotmapMd152cR2)
	#call replace(i12,j7-j9,j,j7,j9,Md152c,dotmapMd152cR3)
	#call replace(i13,-`Q2'/2-j2/2-j3/2+j5/2+j6+j7,j,j2,j3,j5,j6,j7,Md152c,dotmapMd152cR4)
	if (count(Md152c,1)) Multiply replace_(Md152c,Md152d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p2,p1.p3 and change topology to d42
	if (count(Md152d,1)) Multiply replace_(i1,j4,i2,j2,i3,j3,i4,j1,i5,j5,i6,j6,i7,j7);
	#call replace(i8,j6-j8,j,j6,j8,Md152d,dotmapMd152dR1)
	#call replace(i9,j7-j9,j,j7,j9,Md152d,dotmapMd152dR2)
	if (count(Md152d,1)) Multiply replace_(Md152d,Md42,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd42 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared152()
* Topology: 0-1 1-5 1-3 1-5 3-4 3-4 3-5 3-4 4-9
* Dots: p0.p4,p0.p5,p2.p4,p2.p5,p0.p1,p1.p4,p1.p5
* Apply automorphisms
if (match(Md152*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n4,$n6,$n7,$n5,$n1,$n2,$n3)
	#call hash(1,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n5,$n6,$n4,$n7,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n4,$n6,$n7,$n5,$n3,$n2,$n1)
	#call hash(3,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n5,$n6,$n4,$n7,$n3,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
	#call hash(5,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n1,$n2,$n3)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i7,i7,i4,i8,i9,i10,i11);
elseif ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i4,i7,i5,i4,i7,i5,i9,i8,i11,i10);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i7,i7,i4,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 3); Multiply replace_(i4,i7,i5,i4,i7,i5,i9,i8,i11,i10,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i3,i1);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 7); Multiply replace_(i4,i5,i5,i4,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i3,i3,i1,i5,i7,i7,i5);
elseif ($bestiso == 9); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 10); Multiply replace_(i1,i3,i3,i1,i4,i7,i7,i4);
elseif ($bestiso == 11); Multiply replace_(i4,i7,i7,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd152 automorphism;

#call CheckRemovedPropagators(d152,7,1,6,1,2,3,4,5,7)
#if `$DOACTION' == 0
.sort:reduce d152;
#endif
#endprocedure

#procedure Reduced152()
	#call Prepared152()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd152'
		#call MtoZ(Md152,Zd152,i,14)
		#call Reduce(d152)
		#call ZtoM(Zd152,Md152,i,14)
		#call Prepared152()
#else
		#if `USETURBO'
			#call TurboMd152()
		#endif
		#call insertionS(Md152,i1,i3,i12,i13,i14,i1,`Q2',i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md152b,1)) Multiply replace_(<i4,i3>,...,<i17,i16>);
		#call Insertiond152()
#endif
	#endif
#endprocedure
*--#] reduce-d152 : 
*--#[ reduce-d151 :
#procedure Insertiond151()
* merge propagators with same momentum, and repeated dots
	if (count(Md151b,1)) Multiply replace_(Md151b,Md151c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i12,i6,i8,i7,i13,i7,i9,i8,i14,i8,i10,i9,i15,i9,i11,i10,i16,i11);

* rewrite insertion dots
	if (count(Md151c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j1/2-j4/2,j,j1,j4,Md151c,dotmapMd151cR1)
	#call replace(i11,-`Q2'/2-j2/2-j3/2+j5/2+j6+j7,j,j2,j3,j5,j6,j7,Md151c,dotmapMd151cR2)
	if (count(Md151c,1)) Multiply replace_(Md151c,Md151d,<j1,i1>,...,<j9,i9>);
* map dots to p2.p5,p0.p1,p1.p2,p1.p5 and change topology to d32
	if (count(Md151d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5,i6,j7,i8,j8);
	#call replace(i7,`Q2'/2-j1/2+j4/2-j5/2-j9,j,j1,j4,j5,j9,Md151d,dotmapMd151dR1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j6-j8,j,j2,j3,j6,j8,Md151d,dotmapMd151dR2)
	if (count(Md151d,1)) Multiply replace_(Md151d,Md32,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd32 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared151()
* Topology: 0-1 1-2 1-2 2-3 3-4 3-4 2-3 3-4 4-9
* Dots: p0.p4,p0.p5,p3.p4,p3.p5,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md151*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,23
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n14,$n12,$n11,$n10,$n9,$n9,$n4,$n3,$n7,$n5,$n6,$n2,$n1)
	#call hash(1,$n13,$n13,$n12,$n11,$n10,$n8,$n8,$n5,$n3,$n4,$n7,$n6,$n2,$n1)
	#call hash(2,$n14,$n13,$n12,$n11,$n11,$n9,$n9,$n4,$n6,$n7,$n5,$n3,$n1,$n2)
	#call hash(3,$n14,$n13,$n12,$n10,$n10,$n8,$n8,$n5,$n6,$n4,$n7,$n3,$n1,$n2)
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n9,$n4,$n3,$n7,$n5,$n6,$n1,$n2)
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n8,$n8,$n5,$n3,$n4,$n7,$n6,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n3,$n7,$n4,$n6,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n1,$n2)
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n3,$n4,$n5,$n6,$n1,$n2)
endif;
if (($n10==0)&&($n11==0)&&($n12==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
	#call hash(10,$n13,$n14,$n12,$n11,$n10,$n8,$n9,$n7,$n3,$n4,$n5,$n6,$n2,$n1)
endif;
if (($n12==0)&&($n13==0)&&($n14==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(12,$n14,$n13,$n12,$n10,$n11,$n8,$n9,$n7,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n13,$n14,$n12,$n10,$n11,$n8,$n9,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n14==0));
	#call hash(15,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n3,$n7,$n4,$n6,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(16,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n11==0)&&($n14==0));
	#call hash(17,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n5,$n6,$n7,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(18,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n3,$n5,$n7,$n6,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0));
	#call hash(19,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n3,$n5,$n7,$n6,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(20,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(21,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n4,$n6,$n5,$n7,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(22,$n14,$n14,$n12,$n11,$n11,$n9,$n9,$n4,$n6,$n7,$n5,$n3,$n2,$n1)
	#call hash(23,$n13,$n13,$n12,$n10,$n10,$n8,$n8,$n5,$n6,$n4,$n7,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,23
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i6,i4,i5,i5,i7,i6,i3,i7,i4,i8,i9,i13,i14);
elseif ($bestiso == 1); Multiply replace_(i3,i6,i4,i7,i5,i4,i6,i3,i7,i5,i9,i8,i14,i13);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i7,i7,i4,i8,i9,i10,i11);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1,i4,i7,i5,i4,i7,i5,i9,i8,i11,i10);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i5,i5,i7,i6,i3,i7,i4,i8,i9);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i7,i5,i4,i6,i3,i7,i5,i9,i8);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i1,i3,i6,i5,i7,i6,i3,i7,i5);
elseif ($bestiso == 7); Multiply replace_(i1,i2,i2,i1,i3,i6,i6,i3);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i5,i5,i4,i6,i3,i8,i9,i9,i8);
elseif ($bestiso == 9); Multiply replace_(i3,i6,i6,i3);
elseif ($bestiso == 10); Multiply replace_(i3,i6,i4,i5,i5,i4,i6,i3,i8,i9,i9,i8,i13,i14,i14,i13);
elseif ($bestiso == 11); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 12); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i8,i9,i9,i8,i10,i11,i11,i10);
elseif ($bestiso == 14); Multiply replace_(i4,i5,i5,i4,i8,i9,i9,i8,i10,i11,i11,i10,i13,i14,i14,i13);
elseif ($bestiso == 15); Multiply replace_(i3,i6,i5,i7,i6,i3,i7,i5);
elseif ($bestiso == 16); Multiply replace_(i1,i2,i2,i1,i5,i7,i7,i5);
elseif ($bestiso == 17); Multiply replace_(i5,i7,i7,i5);
elseif ($bestiso == 18); Multiply replace_(i1,i2,i2,i1,i3,i6,i4,i7,i6,i3,i7,i4);
elseif ($bestiso == 19); Multiply replace_(i3,i6,i4,i7,i6,i3,i7,i4);
elseif ($bestiso == 20); Multiply replace_(i1,i2,i2,i1,i4,i7,i7,i4);
elseif ($bestiso == 21); Multiply replace_(i4,i7,i7,i4);
elseif ($bestiso == 22); Multiply replace_(i4,i5,i5,i7,i7,i4,i8,i9,i10,i11,i13,i14);
elseif ($bestiso == 23); Multiply replace_(i4,i7,i5,i4,i7,i5,i9,i8,i11,i10,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso23>,$bestiso,$bestisov;
.sort:Zd151 automorphism;

#call CheckRemovedPropagators(d151,7,0,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d151;
#endif
#endprocedure

#procedure Reduced151()
	#call Prepared151()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd151'
		#call MtoZ(Md151,Zd151,i,14)
		#call Reduce(d151)
		#call ZtoM(Zd151,Md151,i,14)
		#call Prepared151()
#else
		#if `USETURBO'
			#call TurboMd151()
		#endif
		#call insertionS(Md151,i1,i2,i12,i13,i14,i1,i3,i4,i5,i12,i13,i14,i15,i16,i17,0,0)
		if (count(Md151b,1)) Multiply replace_(<i3,i2>,...,<i17,i16>);
		#call Insertiond151()
#endif
	#endif
#endprocedure
*--#] reduce-d151 : 
*--#[ reduce-d150 :
#procedure Insertiond150()
* merge propagators with same momentum, and repeated dots
	if (count(Md150b,1)) Multiply replace_(Md150b,Md150c,i5,`Q2',i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md150c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md150c,dotmapMd150cR1)
	#call replace(i7,`Q2'/2+j3/2-j5/2,j,j3,j5,Md150c,dotmapMd150cR2)
	#call replace(i8,j1/2+j3/2-j4/2,j,j1,j3,j4,Md150c,dotmapMd150cR3)
	if (count(Md150c,1)) Multiply replace_(Md150c,Md150d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md150d,1)) Multiply replace_(i1,j3,i2,j4,i3,j5,i4,j2,i5,j1);
	if (count(Md150d,1)) Multiply replace_(Md150d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared150()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4* 3-5 3-4 4-9
* Dots: p1.p5,p3.p5
* Apply automorphisms
if (match(Md150*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9)*replace_(i1,i2,i2,i1,i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd150 automorphism;

#call CheckRemovedPropagators(d150,7,6,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d150;
#endif
#endprocedure

#procedure Reduced150()
	#call Prepared150()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd150'
		#call MtoZ(Md150,Zd150,i,9)
		#call Reduce(d150)
		#call ZtoM(Zd150,Md150,i,9)
		#call Prepared150()
#else
		#if `USETURBO'
			#call TurboMd150()
		#endif
		#call insertionS(Md150,i5,i7,i8,i9,i5,i1,i3,i8,i9,i10,1,0)
		if (count(Md150b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond150()
#endif
	#endif
#endprocedure
*--#] reduce-d150 : 
*--#[ reduce-d149 :
#procedure Insertiond149()
* merge propagators with same momentum, and repeated dots
	if (count(Md149b,1)) Multiply replace_(Md149b,Md149c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md149c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j5/2,j,j1,j5,Md149c,dotmapMd149cR1)
	#call replace(i7,`Q2'/2+j2/2-j4/2,j,j2,j4,Md149c,dotmapMd149cR2)
	#call replace(i8,j1/2+j2/2-j3/2,j,j1,j2,j3,Md149c,dotmapMd149cR3)
	if (count(Md149c,1)) Multiply replace_(Md149c,Md149d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md149d,1)) Multiply replace_(i1,j3,i2,j5,i3,j2,i4,j1,i5,j4);
	if (count(Md149d,1)) Multiply replace_(Md149d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared149()
* Topology: 0-1* 1-2 2-3 3-4 3-5 4-5 2-5 1-2 4-9
* Dots: p1.p2,p1.p3
* Apply automorphisms
if (match(Md149*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n1,$n6,$n5,$n4,$n3,$n2,$n7)
	#call hash(2,$n9,$n8,$n7,$n2,$n3,$n4,$n5,$n6,$n1)
	#call hash(3,$n9,$n8,$n1,$n2,$n3,$n4,$n5,$n6,$n7)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i7,i7,i1);
elseif ($bestiso == 2); Multiply sign_($n9)*replace_(i2,i6,i3,i5,i5,i3,i6,i2);
elseif ($bestiso == 3); Multiply sign_($n9)*replace_(i1,i7,i2,i6,i3,i5,i5,i3,i6,i2,i7,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd149 automorphism;

#call CheckRemovedPropagators(d149,7,5,2,3,4,5,6,1,7)
#if `$DOACTION' == 0
.sort:reduce d149;
#endif
#endprocedure

#procedure Reduced149()
	#call Prepared149()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd149'
		#call MtoZ(Md149,Zd149,i,9)
		#call Reduce(d149)
		#call ZtoM(Zd149,Md149,i,9)
		#call Prepared149()
#else
		#if `USETURBO'
			#call TurboMd149()
		#endif
		#call insertionS(Md149,i1,i7,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md149b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond149()
#endif
	#endif
#endprocedure
*--#] reduce-d149 : 
*--#[ reduce-d148 :
#procedure Insertiond148()
* merge propagators with same momentum, and repeated dots
	if (count(Md148b,1)) Multiply replace_(Md148b,Md148c,i3,i2,i4,i3,i5,i4,i2,i5,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md148c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j5/2,j,j1,j5,Md148c,dotmapMd148cR1)
	#call replace(i7,`Q2'/2-j1/2+j3/2-j4/2,j,j1,j3,j4,Md148c,dotmapMd148cR2)
	#call replace(i8,`Q2'/2+j2/2-j4/2,j,j2,j4,Md148c,dotmapMd148cR3)
	if (count(Md148c,1)) Multiply replace_(Md148c,Md148d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md148d,1)) Multiply replace_(i1,j5,i2,j1,i3,j3,i4,j2,i5,j4);
	if (count(Md148d,1)) Multiply replace_(Md148d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared148()
* Topology: 0-1* 1-3 1-6 3-4 3-5 4-5 5-6 1-6 4-9
* Dots: p0.p2,p2.p3
* Apply automorphisms
if (match(Md148*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n2,$n6,$n5,$n4,$n3,$n7,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i7,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd148 automorphism;

#call CheckRemovedPropagators(d148,7,5,1,3,4,5,6,2,7)
#if `$DOACTION' == 0
.sort:reduce d148;
#endif
#endprocedure

#procedure Reduced148()
	#call Prepared148()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd148'
		#call MtoZ(Md148,Zd148,i,9)
		#call Reduce(d148)
		#call ZtoM(Zd148,Md148,i,9)
		#call Prepared148()
#else
		#if `USETURBO'
			#call TurboMd148()
		#endif
		#call insertionS(Md148,i2,i7,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md148b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond148()
#endif
	#endif
#endprocedure
*--#] reduce-d148 : 
*--#[ reduce-d147 :
#procedure Insertiond147()
* merge propagators with same momentum, and repeated dots
	if (count(Md147b,1)) Multiply replace_(Md147b,Md147c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md147c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md147c,dotmapMd147cR1)
	#call replace(i7,j1/2-j2/2+j4/2-j5/2,j,j1,j2,j4,j5,Md147c,dotmapMd147cR2)
	#call replace(i8,-j1/2-j3/2+j5/2,j,j1,j3,j5,Md147c,dotmapMd147cR3)
	if (count(Md147c,1)) Multiply replace_(Md147c,Md147d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star05
	if (count(Md147d,1)) Multiply replace_(i1,j4,i2,j1,i3,j5,i4,j2,i5,j3);
	if (count(Md147d,1)) Multiply replace_(Md147d,Mt1star05,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star05 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared147()
* Topology: 0-1 4-6 1-4 1-5 2-4 2-6* 2-5 5-6 4-9
* Dots: p0.p1,p0.p5
* Apply automorphisms
if (match(Md147*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n6,$n7,$n5,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n8+$n9)*replace_(i1,i4,i4,i1,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd147 automorphism;

#call CheckRemovedPropagators(d147,7,6,1,3,4,5,6,7,2)
#if `$DOACTION' == 0
.sort:reduce d147;
#endif
#endprocedure

#procedure Reduced147()
	#call Prepared147()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd147'
		#call MtoZ(Md147,Zd147,i,9)
		#call Reduce(d147)
		#call ZtoM(Zd147,Md147,i,9)
		#call Prepared147()
#else
		#if `USETURBO'
			#call TurboMd147()
		#endif
		#call MtoZ(Md147,Zd147,i,9)
		#call carpet(Zd147,3,2,0,0,1,2,8,1,5)
		#call ZtoM(Zd147b,Md147b,i,9)
		#call Insertiond147()
#endif
	#endif
#endprocedure
*--#] reduce-d147 : 
*--#[ reduce-d146 :
#procedure Insertiond146()
* merge propagators with same momentum, and repeated dots
	if (count(Md146b,1)) Multiply replace_(Md146b,Md146c,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md146c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2-j2/2-j3/2+j5/2,j,j1,j2,j3,j5,Md146c,dotmapMd146cR1)
	#call replace(i7,j1/2-j3/2+j4/2,j,j1,j3,j4,Md146c,dotmapMd146cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md146c,dotmapMd146cR3)
	if (count(Md146c,1)) Multiply replace_(Md146c,Md146d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star45
	if (count(Md146d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j5,i5,j1);
	if (count(Md146d,1)) Multiply replace_(Md146d,Mt1star45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared146()
* Topology: 0-1 1-2 1-6 2-7* 2-5 2-5 5-6 6-7 7-9
* Dots: p0.p4,p1.p4
* Apply automorphisms
if (match(Md146*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd146 automorphism;

#call CheckRemovedPropagators(d146,7,5,1,2,3,6,7,4,5)
#if `$DOACTION' == 0
.sort:reduce d146;
#endif
#endprocedure

#procedure Reduced146()
	#call Prepared146()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd146'
		#call MtoZ(Md146,Zd146,i,9)
		#call Reduce(d146)
		#call ZtoM(Zd146,Md146,i,9)
		#call Prepared146()
#else
		#if `USETURBO'
			#call TurboMd146()
		#endif
		#call insertionS(Md146,i4,i5,i8,i9,i4,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md146b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond146()
#endif
	#endif
#endprocedure
*--#] reduce-d146 : 
*--#[ reduce-d145 :
#procedure Insertiond145()
* merge propagators with same momentum, and repeated dots
	if (count(Md145b,1)) Multiply replace_(Md145b,Md145c,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md145c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-j1/2+j2/2+j3/2-j4/2,j,j1,j2,j3,j4,Md145c,dotmapMd145cR1)
	#call replace(i7,-j1/2+j3/2-j5/2,j,j1,j3,j5,Md145c,dotmapMd145cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md145c,dotmapMd145cR3)
	if (count(Md145c,1)) Multiply replace_(Md145c,Md145d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star55
	if (count(Md145d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j3,i5,j5);
	if (count(Md145d,1)) Multiply replace_(Md145d,Mt1star55,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star55 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared145()
* Topology: 0-1 4-8 5-8 1-4 1-5 2-4 2-5* 2-5 8-9
* Dots: p0.p6,p1.p6
* Apply automorphisms
if (match(Md145*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n2,$n1,$n4,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n8+$n9)*replace_(i1,i3,i2,i4,i3,i1,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd145 automorphism;

#call CheckRemovedPropagators(d145,7,6,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d145;
#endif
#endprocedure

#procedure Reduced145()
	#call Prepared145()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd145'
		#call MtoZ(Md145,Zd145,i,9)
		#call Reduce(d145)
		#call ZtoM(Zd145,Md145,i,9)
		#call Prepared145()
#else
		#if `USETURBO'
			#call TurboMd145()
		#endif
		#call insertionS(Md145,i6,i7,i8,i9,i6,`Q2',i1,i8,i9,i10,1,0)
		if (count(Md145b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond145()
#endif
	#endif
#endprocedure
*--#] reduce-d145 : 
*--#[ reduce-d144 :
#procedure Prepared144()
* Topology: 0-1 3-4 2-3 1-2 1-5 4-5* 3-5 2-5 4-9
* Dots: p0.p2,p1.p3
* Apply automorphisms
if (match(Md144*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd144 automorphism;

#call CheckRemovedPropagators(d144,7,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md144M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i1,`Q2'+j4+2*j7,j,j4,j7,Md144M1,dotmapMd144M1R1)
	#call replace(i8,`Q2'/2+j1/2+j4/2-j5/2+j7-j8,j,j1,j4,j5,j7,j8,Md144M1,dotmapMd144M1R2)
	#call replace(i9,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Md144M1,dotmapMd144M1R3)
	if (count(Md144M1,1)) Multiply replace_(Md144M1,Md86,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd86 "1"
#endif

#if `$M2'
* map dots to p0.p5,p1.p5,p2.p5 and change topology to d93
	if (count(Md144M2,1)) Multiply replace_(i1,j4,i3,j3,i4,j2,i5,j1,i6,j5,i7,j6);
	#call replace(i2,j4+j5+2*j7+2*j8,j,j4,j5,j7,j8,Md144M2,dotmapMd144M2R1)
	#call replace(i8,`Q2'/2-j1/2+j4/2+j7,j,j1,j4,j7,Md144M2,dotmapMd144M2R2)
	#call replace(i9,j3/2+j4/2+j5/2-j6/2+j8+j9,j,j3,j4,j5,j6,j8,j9,Md144M2,dotmapMd144M2R3)
	if (count(Md144M2,1)) Multiply replace_(Md144M2,Md93,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd93 "1"
#endif

#if `$M3'
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d71
	if (count(Md144M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i3,`Q2'+j3-2*j7,j,j3,j7,Md144M3,dotmapMd144M3R1)
	#call replace(i8,`Q2'/2+j2/2+j3/2-j6/2-j7+j9,j,j2,j3,j6,j7,j9,Md144M3,dotmapMd144M3R2)
	#call replace(i9,`Q2'/2+j1/2-j4/2-j8,j,j1,j4,j8,Md144M3,dotmapMd144M3R3)
	if (count(Md144M3,1)) Multiply replace_(Md144M3,Md71,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd71 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d73
	if (count(Md144M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j7,i9,j9);
	#call replace(i4,`Q2'+j3-2*j8,j,j3,j8,Md144M4,dotmapMd144M4R1)
	if (count(Md144M4,1)) Multiply replace_(Md144M4,Md73,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd73 "1"
#endif

#if `$M6'
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d75
	if (count(Md144M6,1)) Multiply replace_(i1,j5,i2,j2,i3,j3,i4,j4,i5,j1,i7,j6,i8,j7);
	#call replace(i6,j2+j5-2*j7+2*j8,j,j2,j5,j7,j8,Md144M6,dotmapMd144M6R1)
	#call replace(i9,`Q2'/2+j3/2-j4/2-j9,j,j3,j4,j9,Md144M6,dotmapMd144M6R2)
	if (count(Md144M6,1)) Multiply replace_(Md144M6,Md75,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd75 "1"
#endif

#if `$M7'
* map dots to p1.p3,p0.p2,p2.p3 and change topology to d74
	if (count(Md144M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j8,i9,j7);
	#call replace(i7,j2+j3-2*j9,j,j2,j3,j9,Md144M7,dotmapMd144M7R1)
	if (count(Md144M7,1)) Multiply replace_(Md144M7,Md74,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd74 "1"
#endif
.sort:reduce d144;
#endif
#endprocedure

#procedure Reduced144()
	#call Prepared144()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd144'
		#call MtoZ(Md144,Zd144,i,9)
		#call Reduce(d144)
		#call ZtoM(Zd144,Md144,i,9)
#else
		#if `USETURBO'
			#call TurboMd144()
		#endif
		#call triangleS(Md144,i7,i6,i2,i3,i1,i8,0,0)
#endif
		#call Prepared144()
	#endif
#endprocedure
*--#] reduce-d144 : 
*--#[ reduce-d143 :
#procedure Insertiond143()
* merge propagators with same momentum, and repeated dots
	if (count(Md143b,1)) Multiply replace_(Md143b,Md143c,i5,i3,i6,i5,i7,-i6,i8,-i7,i9,i8);

* rewrite insertion dots
	if (count(Md143c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j3/2,j,j1,j3,Md143c,dotmapMd143cR1)
	#call replace(i7,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md143c,dotmapMd143cR2)
	#call replace(i8,j1/2-j3/2+j4/2-j5/2,j,j1,j3,j4,j5,Md143c,dotmapMd143cR3)
	if (count(Md143c,1)) Multiply replace_(Md143c,Md143d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d45
	if (count(Md143d,1)) Multiply replace_(i1,j1,i2,j5,i3,j4,i4,j3,i5,j2);
	if (count(Md143d,1)) Multiply replace_(Md143d,Md45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared143()
* Topology: 0-1 1-2* 2-3 3-5 3-5 3-8 1-5 2-8 8-9
* Dots: p0.p3,p2.p3
* Apply automorphisms
if (match(Md143*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd143 automorphism;

#call CheckRemovedPropagators(d143,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d143;
#endif
#endprocedure

#procedure Reduced143()
	#call Prepared143()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd143'
		#call MtoZ(Md143,Zd143,i,9)
		#call Reduce(d143)
		#call ZtoM(Zd143,Md143,i,9)
		#call Prepared143()
#else
		#if `USETURBO'
			#call TurboMd143()
		#endif
		#call insertionS(Md143,i3,i4,i8,i9,i3,`Q2',i2,i8,i9,i10,0,0)
		if (count(Md143b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond143()
#endif
	#endif
#endprocedure
*--#] reduce-d143 : 
*--#[ reduce-d142 :
#procedure Insertiond142()
* merge propagators with same momentum, and repeated dots
	if (count(Md142b,1)) Multiply replace_(Md142b,Md142c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md142c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j3/2-j5/2,j,j3,j5,Md142c,dotmapMd142cR1)
	#call replace(i7,`Q2'/2+j2/2-j4/2-j5/2,j,j2,j4,j5,Md142c,dotmapMd142cR2)
	#call replace(i8,`Q2'/2+j1/2-j4/2,j,j1,j4,Md142c,dotmapMd142cR3)
	if (count(Md142c,1)) Multiply replace_(Md142c,Md142d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star24
	if (count(Md142d,1)) Multiply replace_(i1,j2,i2,j5,i3,j4,i4,j3,i5,j1);
	if (count(Md142d,1)) Multiply replace_(Md142d,Mt1star24,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star24 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared142()
* Topology: 0-1 1-2* 2-3 3-4 3-4 4-8 1-3 2-8 8-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md142*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd142 automorphism;

#call CheckRemovedPropagators(d142,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d142;
#endif
#endprocedure

#procedure Reduced142()
	#call Prepared142()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd142'
		#call MtoZ(Md142,Zd142,i,9)
		#call Reduce(d142)
		#call ZtoM(Zd142,Md142,i,9)
		#call Prepared142()
#else
		#if `USETURBO'
			#call TurboMd142()
		#endif
		#call insertionS(Md142,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md142b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond142()
#endif
	#endif
#endprocedure
*--#] reduce-d142 : 
*--#[ reduce-d141 :
#procedure Insertiond141()
* merge propagators with same momentum, and repeated dots
	if (count(Md141b,1)) Multiply replace_(Md141b,Md141c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md141c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-j1/2+j2/2-j3/2+j5/2,j,j1,j2,j3,j5,Md141c,dotmapMd141cR1)
	#call replace(i7,-j1/2-j4/2+j5/2,j,j1,j4,j5,Md141c,dotmapMd141cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md141c,dotmapMd141cR3)
	if (count(Md141c,1)) Multiply replace_(Md141c,Md141d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star45
	if (count(Md141d,1)) Multiply replace_(i1,j4,i2,j1,i3,j2,i4,j5,i5,j3);
	if (count(Md141d,1)) Multiply replace_(Md141d,Mt1star45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared141()
* Topology: 0-1 1-6* 1-3 3-5 3-5 3-8 5-6 6-8 8-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md141*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd141 automorphism;

#call CheckRemovedPropagators(d141,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d141;
#endif
#endprocedure

#procedure Reduced141()
	#call Prepared141()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd141'
		#call MtoZ(Md141,Zd141,i,9)
		#call Reduce(d141)
		#call ZtoM(Zd141,Md141,i,9)
		#call Prepared141()
#else
		#if `USETURBO'
			#call TurboMd141()
		#endif
		#call insertionS(Md141,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md141b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond141()
#endif
	#endif
#endprocedure
*--#] reduce-d141 : 
*--#[ reduce-d140 :
#procedure Insertiond140()
* merge propagators with same momentum, and repeated dots
	if (count(Md140b,1)) Multiply replace_(Md140b,Md140c,i4,`Q2',i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md140c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md140c,dotmapMd140cR1)
	#call replace(i7,`Q2'/2+j3/2-j4/2,j,j3,j4,Md140c,dotmapMd140cR2)
	#call replace(i8,`Q2'/2-j2/2-j4/2+j5/2,j,j2,j4,j5,Md140c,dotmapMd140cR3)
	if (count(Md140c,1)) Multiply replace_(Md140c,Md140d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md140d,1)) Multiply replace_(i1,j4,i2,j5,i3,j1,i4,j2,i5,j3);
	if (count(Md140d,1)) Multiply replace_(Md140d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared140()
* Topology: 0-1 1-8 1-2* 1-3 3-4 4-8 2-4 2-3 8-9
* Dots: p0.p2,p0.p4
* Apply automorphisms
if (match(Md140*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd140 automorphism;

#call CheckRemovedPropagators(d140,7,6,2,3,4,5,6,7,1)
#if `$DOACTION' == 0
.sort:reduce d140;
#endif
#endprocedure

#procedure Reduced140()
	#call Prepared140()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd140'
		#call MtoZ(Md140,Zd140,i,9)
		#call Reduce(d140)
		#call ZtoM(Zd140,Md140,i,9)
		#call Prepared140()
#else
		#if `USETURBO'
			#call TurboMd140()
		#endif
		#call MtoZ(Md140,Zd140,i,9)
		#call carpet(Zd140,5,1,0,0,1,2,8,2,4)
		#call ZtoM(Zd140b,Md140b,i,9)
		#call Insertiond140()
#endif
	#endif
#endprocedure
*--#] reduce-d140 : 
*--#[ reduce-bustar5 :
#procedure Preparebustar5()
* Topology: 0-2 3-5 1-5 4-5 1-3 1-4* 2-3 2-4 5-9
* Dots: p0.p4,p0.p5
* Apply automorphisms
if (match(Mbustar5*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zbustar5 automorphism;

#call CheckRemovedPropagators(bustar5,7,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d89
	if (count(Mbustar5M1,1)) Multiply replace_(i2,j3,i3,j5,i4,j6,i5,j2,i6,j4,i7,j1,i9,j7);
	#call replace(i1,-j1-j2+j4+j5+j6-2*j7-2*j8+2*j9,j,j1,j2,j4,j5,j6,j7,j8,j9,Mbustar5M1,dotmapMbustar5M1R1)
	#call replace(i8,-j7-j8,j,j7,j8,Mbustar5M1,dotmapMbustar5M1R2)
	if (count(Mbustar5M1,1)) Multiply replace_(Mbustar5M1,Md89,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd89 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p1,p1.p2 and change topology to d103
	if (count(Mbustar5M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i2,`Q2'+j1+j2+2*j7+2*j8+2*j9,j,j1,j2,j7,j8,j9,Mbustar5M2,dotmapMbustar5M2R1)
	#call replace(i8,-`Q2'/2-j5/2+j6/2-j8,j,j5,j6,j8,Mbustar5M2,dotmapMbustar5M2R2)
	#call replace(i9,-`Q2'/2+j5/2-j6/2-j7,j,j5,j6,j7,Mbustar5M2,dotmapMbustar5M2R3)
	if (count(Mbustar5M2,1)) Multiply replace_(Mbustar5M2,Md103,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd103 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Mbustar5M3,1)) Multiply replace_(i1,j6,i2,j5,i4,j2,i5,j1,i6,j3,i7,j4,i8,j7,i9,j8);
	#call replace(i3,j1+j4+2*j8-2*j9,j,j1,j4,j8,j9,Mbustar5M3,dotmapMbustar5M3R1)
	if (count(Mbustar5M3,1)) Multiply replace_(Mbustar5M3,Md83,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd83 "1"
#endif

#if `$M4'
* map dots to p0.p1,p1.p3,p1.p4 and change topology to d104
	if (count(Mbustar5M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i4,j1+j5-2*j7+2*j8-2*j9,j,j1,j5,j7,j8,j9,Mbustar5M4,dotmapMbustar5M4R1)
	#call replace(i8,-`Q2'/2-j5/2+j6/2+j7,j,j5,j6,j7,Mbustar5M4,dotmapMbustar5M4R2)
	#call replace(i9,j1/2-j2/2+j3/2+j5/2-j6/2-j7+j8,j,j1,j2,j3,j5,j6,j7,j8,Mbustar5M4,dotmapMbustar5M4R3)
	if (count(Mbustar5M4,1)) Multiply replace_(Mbustar5M4,Md104,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd104 "1"
#endif

#if `$M6'
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d58
	if (count(Mbustar5M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j9);
	#call replace(i6,`Q2'+j6-2*j7-2*j8-2*j9,j,j6,j7,j8,j9,Mbustar5M6,dotmapMbustar5M6R1)
	#call replace(i9,-j7-j9,j,j7,j9,Mbustar5M6,dotmapMbustar5M6R2)
	if (count(Mbustar5M6,1)) Multiply replace_(Mbustar5M6,Md58,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd58 "1"
#endif

#if `$M7'
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Mbustar5M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j9);
	#call replace(i7,`Q2'+j6-2*j7+2*j9,j,j6,j7,j9,Mbustar5M7,dotmapMbustar5M7R1)
	#call replace(i9,-j8-j9,j,j8,j9,Mbustar5M7,dotmapMbustar5M7R2)
	if (count(Mbustar5M7,1)) Multiply replace_(Mbustar5M7,Md57,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd57 "1"
#endif
.sort:reduce bustar5;
#endif
#endprocedure

#procedure Reducebustar5()
	#call Preparebustar5()
	#if `$DOACTION'
		#call MtoZ(Mbustar5,Zbustar5,i,9)
		#call Reduce(bustar5)
		#call ZtoM(Zbustar5,Mbustar5,i,9)
		#call Preparebustar5()
	#endif
#endprocedure
*--#] reduce-bustar5 : 
*--#[ reduce-d138 :
#procedure Insertiond138()
* merge propagators with same momentum, and repeated dots
	if (count(Md138b,1)) Multiply replace_(Md138b,Md138c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md138c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2-j2/2-j3/2+j5/2,j,j1,j2,j3,j5,Md138c,dotmapMd138cR1)
	#call replace(i7,j1/2-j3/2+j4/2,j,j1,j3,j4,Md138c,dotmapMd138cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md138c,dotmapMd138cR3)
	if (count(Md138c,1)) Multiply replace_(Md138c,Md138d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star55
	if (count(Md138d,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j5,i5,j4);
	if (count(Md138d,1)) Multiply replace_(Md138d,Mt1star55,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star55 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared138()
* Topology: 0-1 1-2 1-6 2-4* 2-8 4-6 4-6 6-8 8-9
* Dots: p0.p5,p1.p5
* Apply automorphisms
if (match(Md138*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n2,$n5,$n6,$n1,$n3,$n7,$n4)
endif;
if (($n9==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n2,$n6,$n5,$n1,$n3,$n7,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 1); Multiply sign_($n8+$n9)*replace_(i1,i4,i2,i7,i4,i1,i5,i6,i6,i5,i7,i2);
elseif ($bestiso == 3); Multiply sign_($n8+$n9)*replace_(i1,i4,i2,i7,i4,i1,i7,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd138 automorphism;

#call CheckRemovedPropagators(d138,7,5,1,2,3,4,7,5,6)
#if `$DOACTION' == 0
.sort:reduce d138;
#endif
#endprocedure

#procedure Reduced138()
	#call Prepared138()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd138'
		#call MtoZ(Md138,Zd138,i,9)
		#call Reduce(d138)
		#call ZtoM(Zd138,Md138,i,9)
		#call Prepared138()
#else
		#if `USETURBO'
			#call TurboMd138()
		#endif
		#call insertionS(Md138,i5,i6,i8,i9,i5,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md138b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond138()
#endif
	#endif
#endprocedure
*--#] reduce-d138 : 
*--#[ reduce-d137 :
#procedure Prepared137()
* Topology: 0-1* 2-4 1-2 1-6 5-6 4-5 2-6 2-5 4-9
* Dots: p0.p4,p1.p2
* Apply automorphisms
if (match(Md137*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n4+$n5+$n3)
	#call hash(1,$n9,$n8,$n6,$n7,$n3,$n4,$n5,$n1,$n2,$n4+$n3+$n5)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i5,i5,i3,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd137 automorphism;

#call CheckRemovedPropagators(d137,7,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p4,p1.p4 and change topology to d77
	if (count(Md137M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,`Q2'+j4+2*j8,j,j4,j8,Md137M1,dotmapMd137M1R1)
	#call replace(i9,`Q2'/2+j1/2-j2/2+j9,j,j1,j2,j9,Md137M1,dotmapMd137M1R2)
	if (count(Md137M1,1)) Multiply replace_(Md137M1,Md77,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd77 "1"
#endif

#if `$M2'
* map dots to p0.p3,p0.p4,p1.p4 and change topology to d77
	if (count(Md137M2,1)) Multiply replace_(i1,j1,i3,j4,i4,j3,i5,j2,i6,j6,i7,j5,i8,j7);
	#call replace(i2,`Q2'+j4-2*j8,j,j4,j8,Md137M2,dotmapMd137M2R1)
	#call replace(i9,`Q2'/2+j1/2-j2/2-j9,j,j1,j2,j9,Md137M2,dotmapMd137M2R2)
	if (count(Md137M2,1)) Multiply replace_(Md137M2,Md77,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd77 "1"
#endif

#if `$M3'
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d81
	if (count(Md137M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i9,j8);
	#call replace(i3,`Q2'+j2-2*j7,j,j2,j7,Md137M3,dotmapMd137M3R1)
	#call replace(i8,-`Q2'/2-j2/2-j3/2+j5/2+j7-j9,j,j2,j3,j5,j7,j9,Md137M3,dotmapMd137M3R2)
	if (count(Md137M3,1)) Multiply replace_(Md137M3,Md81,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd81 "1"
#endif

#if `$M4'
* map dots to p0.p5,p1.p5,p2.p5 and change topology to d92
	if (count(Md137M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i4,j3+j5+2*j7-2*j9,j,j3,j5,j7,j9,Md137M4,dotmapMd137M4R1)
	#call replace(i8,-`Q2'/2+j2/2-j3/2-j7,j,j2,j3,j7,Md137M4,dotmapMd137M4R2)
	#call replace(i9,j1/2+j2/2+j5/2-j6/2+j8-j9,j,j1,j2,j5,j6,j8,j9,Md137M4,dotmapMd137M4R3)
	if (count(Md137M4,1)) Multiply replace_(Md137M4,Md92,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd92 "1"
#endif

#if `$M5'
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d81
	if (count(Md137M5,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i6,j6,i7,j5,i9,j8);
	#call replace(i5,`Q2'+j2-2*j7,j,j2,j7,Md137M5,dotmapMd137M5R1)
	#call replace(i8,-`Q2'/2-j2/2-j3/2+j5/2+j7+j9,j,j2,j3,j5,j7,j9,Md137M5,dotmapMd137M5R2)
	if (count(Md137M5,1)) Multiply replace_(Md137M5,Md81,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd81 "1"
#endif

#if `$M6'
* map dots to p0.p4,p1.p2,p2.p4 and change topology to d79
	if (count(Md137M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,-j7,i9,j8);
	#call replace(i6,j3+j4-2*j7+2*j9,j,j3,j4,j7,j9,Md137M6,dotmapMd137M6R1)
	if (count(Md137M6,1)) Multiply replace_(Md137M6,Md79,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd79 "1"
#endif

#if `$M7'
* map dots to p0.p4,p1.p2,p2.p4 and change topology to d79
	if (count(Md137M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j5,i4,j4,i5,j3,i6,j6,i8,j7,i9,j8);
	#call replace(i7,j3+j4+2*j7-2*j9,j,j3,j4,j7,j9,Md137M7,dotmapMd137M7R1)
	if (count(Md137M7,1)) Multiply replace_(Md137M7,Md79,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd79 "1"
#endif
.sort:reduce d137;
#endif
#endprocedure

#procedure Reduced137()
	#call Prepared137()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd137'
		#call MtoZ(Md137,Zd137,i,9)
		#call Reduce(d137)
		#call ZtoM(Zd137,Md137,i,9)
#else
		#if `USETURBO'
			#call TurboMd137()
		#endif
		#call triangleS(Md137,i7,i6,i4,i5,i3,i8,0,0)
#endif
		#call Prepared137()
	#endif
#endprocedure
*--#] reduce-d137 : 
*--#[ reduce-d136 :
#procedure Prepared136()
* Topology: 0-1 2-3 1-2 1-6 5-6 3-5* 3-6 2-5 3-9
* Dots: p0.p4,p0.p7
* Apply automorphisms
if (match(Md136*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n2+$n4)
	#call hash(1,$n8,$n9,$n4,$n1,$n5,$n7,$n2,$n3,$n6,$n4+$n3+$n7)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n8+$n9)*replace_(i1,i6,i2,i3,i3,i2,i4,i7,i6,i1,i7,i4,i8,i9,i9,i8);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd136 automorphism;

#call CheckRemovedPropagators(d136,7,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Md136M1,1)) Multiply replace_(i2,j4,i3,j3,i4,j2,i5,j1,i6,j6,i7,j5,i8,j7);
	#call replace(i1,-j2-j3+j4+j5+j6-2*j7+2*j8-2*j9,j,j2,j3,j4,j5,j6,j7,j8,j9,Md136M1,dotmapMd136M1R1)
	#call replace(i9,j7-j8,j,j7,j8,Md136M1,dotmapMd136M1R2)
	if (count(Md136M1,1)) Multiply replace_(Md136M1,Md83,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd83 "1"
#endif

#if `$M2'
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md136M2,1)) Multiply replace_(i1,j3,i3,j1,i4,j4,i5,j5,i6,j6,i7,j2,i8,j9,i9,j8);
	#call replace(i2,`Q2'+j1-2*j7,j,j1,j7,Md136M2,dotmapMd136M2R1)
	if (count(Md136M2,1)) Multiply replace_(Md136M2,Md57,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd57 "1"
#endif

#if `$M3'
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md136M3,1)) Multiply replace_(i1,j6,i2,j1,i4,j2,i5,j5,i6,j3,i7,j4,i8,-j8,i9,j9);
	#call replace(i3,`Q2'+j1-2*j7,j,j1,j7,Md136M3,dotmapMd136M3R1)
	if (count(Md136M3,1)) Multiply replace_(Md136M3,Md57,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd57 "1"
#endif

#if `$M4'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md136M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i4,j4+j6-2*j8+2*j9,j,j4,j6,j8,j9,Md136M4,dotmapMd136M4R1)
	#call replace(i8,-j1/2+j2/2-j3/2-j4/2+j5/2+j8,j,j1,j2,j3,j4,j5,j8,Md136M4,dotmapMd136M4R2)
	#call replace(i9,-j1/2+j2/2-j3/2-j4/2+j5/2-j7+j8,j,j1,j2,j3,j4,j5,j7,j8,Md136M4,dotmapMd136M4R3)
	if (count(Md136M4,1)) Multiply replace_(Md136M4,Md86,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd86 "1"
#endif

#if `$M6'
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Md136M6,1)) Multiply replace_(i1,j6,i2,j3,i3,j4,i4,j5,i5,j1,i7,j2,i9,j7);
	#call replace(i6,-j2-j3+j4+j5+j6+2*j7+2*j8-2*j9,j,j2,j3,j4,j5,j6,j7,j8,j9,Md136M6,dotmapMd136M6R1)
	#call replace(i8,j7+j8,j,j7,j8,Md136M6,dotmapMd136M6R2)
	if (count(Md136M6,1)) Multiply replace_(Md136M6,Md83,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd83 "1"
#endif

#if `$M7'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md136M7,1)) Multiply replace_(i1,j5,i2,j3,i3,j2,i4,j6,i5,j4,i6,j1);
	#call replace(i7,j4+j6-2*j8-2*j9,j,j4,j6,j8,j9,Md136M7,dotmapMd136M7R1)
	#call replace(i8,j1/2-j2/2+j3/2+j4/2-j5/2-j7-j8,j,j1,j2,j3,j4,j5,j7,j8,Md136M7,dotmapMd136M7R2)
	#call replace(i9,j1/2-j2/2+j3/2+j4/2-j5/2-j8,j,j1,j2,j3,j4,j5,j8,Md136M7,dotmapMd136M7R3)
	if (count(Md136M7,1)) Multiply replace_(Md136M7,Md86,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd86 "1"
#endif
.sort:reduce d136;
#endif
#endprocedure

#procedure Reduced136()
	#call Prepared136()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd136'
		#call MtoZ(Md136,Zd136,i,9)
		#call Reduce(d136)
		#call ZtoM(Zd136,Md136,i,9)
#else
		#if `USETURBO'
			#call TurboMd136()
		#endif
		#call triangleS(Md136,i1,i5,i7,i2,i4,i9,0,1)
#endif
		#call Prepared136()
	#endif
#endprocedure
*--#] reduce-d136 : 
*--#[ reduce-d135 :
#procedure Prepared135()
* Topology: 0-1 3-4 2-3 1-2 1-5* 4-5 1-3 2-5 4-9
* Dots: p0.p2,p0.p4
* Apply automorphisms
if (match(Md135*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd135 automorphism;

#call CheckRemovedPropagators(d135,7,1,4)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md135M1,1)) Multiply replace_(i2,j1,i3,j6,i4,j5,i5,j2,i6,j3,i7,j4,i8,j7);
	#call replace(i1,`Q2'+j2+2*j8,j,j2,j8,Md135M1,dotmapMd135M1R1)
	#call replace(i9,-j8-j9,j,j8,j9,Md135M1,dotmapMd135M1R2)
	if (count(Md135M1,1)) Multiply replace_(Md135M1,Md57,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd57 "1"
#endif

#if `$M2'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d98
	if (count(Md135M2,1)) Multiply replace_(i1,j3,i3,j4,i4,j1,i5,j2,i6,j5,i7,j6);
	#call replace(i2,j4+j6+2*j8+2*j9,j,j4,j6,j8,j9,Md135M2,dotmapMd135M2R1)
	#call replace(i8,j1/2-j2/2+j3/2+j4/2-j5/2+j8,j,j1,j2,j3,j4,j5,j8,Md135M2,dotmapMd135M2R2)
	#call replace(i9,`Q2'/2+j1/2+j4/2-j5/2-j7+j8,j,j1,j4,j5,j7,j8,Md135M2,dotmapMd135M2R3)
	if (count(Md135M2,1)) Multiply replace_(Md135M2,Md98,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd98 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p1,p1.p2 and change topology to d103
	if (count(Md135M3,1)) Multiply replace_(i1,j5,i2,j1,i4,j4,i5,j6,i6,j3,i7,j2,i8,j8);
	#call replace(i3,j1+j2+2*j9,j,j1,j2,j9,Md135M3,dotmapMd135M3R1)
	#call replace(i9,`Q2'/2-j5/2+j6/2-j7,j,j5,j6,j7,Md135M3,dotmapMd135M3R2)
	if (count(Md135M3,1)) Multiply replace_(Md135M3,Md103,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd103 "1"
#endif

#if `$M5'
* map dots to p0.p1,p0.p2,p0.p3 and change topology to d72
	if (count(Md135M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j8);
	#call replace(i5,`Q2'+j1-2*j7,j,j1,j7,Md135M5,dotmapMd135M5R1)
	#call replace(i9,`Q2'-j7+j8-j9,j,j7,j8,j9,Md135M5,dotmapMd135M5R2)
	if (count(Md135M5,1)) Multiply replace_(Md135M5,Md72,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd72 "1"
#endif

#if `$M6'
* map dots to p0.p4,p0.p2,p1.p2 and change topology to d94
	if (count(Md135M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,-j8,i9,j7);
	#call replace(i6,j1+j2+2*j9,j,j1,j2,j9,Md135M6,dotmapMd135M6R1)
	if (count(Md135M6,1)) Multiply replace_(Md135M6,Md94,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd94 "1"
#endif

#if `$M7'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md135M7,1)) Multiply replace_(i1,j2,i2,j6,i3,j5,i4,j4,i5,j3,i6,j1,i9,j7);
	#call replace(i7,j3+j4-2*j7+2*j9,j,j3,j4,j7,j9,Md135M7,dotmapMd135M7R1)
	#call replace(i8,-j1/2+j2/2-j3/2-j4/2+j5/2+j7-j8,j,j1,j2,j3,j4,j5,j7,j8,Md135M7,dotmapMd135M7R2)
	if (count(Md135M7,1)) Multiply replace_(Md135M7,Md86,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd86 "1"
#endif
.sort:reduce d135;
#endif
#endprocedure

#procedure Reduced135()
	#call Prepared135()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd135'
		#call MtoZ(Md135,Zd135,i,9)
		#call Reduce(d135)
		#call ZtoM(Zd135,Md135,i,9)
#else
		#if `USETURBO'
			#call TurboMd135()
		#endif
		#call triangleS(Md135,i3,i6,i2,i7,i1,i8,0,0)
#endif
		#call Prepared135()
	#endif
#endprocedure
*--#] reduce-d135 : 
*--#[ reduce-d134 :
#procedure Insertiond134()
* merge propagators with same momentum, and repeated dots
	if (count(Md134b,1)) Multiply replace_(Md134b,Md134c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md134c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md134c,dotmapMd134cR1)
	#call replace(i7,`Q2'/2+j3/2-j5/2,j,j3,j5,Md134c,dotmapMd134cR2)
	#call replace(i8,`Q2'/2-j2/2+j4/2-j5/2,j,j2,j4,j5,Md134c,dotmapMd134cR3)
	if (count(Md134c,1)) Multiply replace_(Md134c,Md134d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md134d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5);
	if (count(Md134d,1)) Multiply replace_(Md134d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared134()
* Topology: 0-1 1-8 6-8 1-5 1-2 2-6* 2-5 5-6 8-9
* Dots: p0.p3,p0.p5
* Apply automorphisms
if (match(Md134*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd134 automorphism;

#call CheckRemovedPropagators(d134,7,6,2,3,4,5,6,7,1)
#if `$DOACTION' == 0
.sort:reduce d134;
#endif
#endprocedure

#procedure Reduced134()
	#call Prepared134()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd134'
		#call MtoZ(Md134,Zd134,i,9)
		#call Reduce(d134)
		#call ZtoM(Zd134,Md134,i,9)
		#call Prepared134()
#else
		#if `USETURBO'
			#call TurboMd134()
		#endif
		#call MtoZ(Md134,Zd134,i,9)
		#call carpet(Zd134,2,1,0,0,1,2,8,3,5)
		#call ZtoM(Zd134b,Md134b,i,9)
		#call Insertiond134()
#endif
	#endif
#endprocedure
*--#] reduce-d134 : 
*--#[ reduce-d133 :
#procedure Insertiond133()
* merge propagators with same momentum, and repeated dots
	if (count(Md133b,1)) Multiply replace_(Md133b,Md133c,i6,i2,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md133c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j2/2,j,j1,j2,Md133c,dotmapMd133cR1)
	#call replace(i7,`Q2'/2-j1/2-j4/2+j5/2,j,j1,j4,j5,Md133c,dotmapMd133cR2)
	#call replace(i8,`Q2'/2+j3/2-j4/2,j,j3,j4,Md133c,dotmapMd133cR3)
	if (count(Md133c,1)) Multiply replace_(Md133c,Md133d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d47
	if (count(Md133d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j3,i5,j5);
	if (count(Md133d,1)) Multiply replace_(Md133d,Md47,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd47 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared133()
* Topology: 0-1 4-8 6-8 1-4 1-2 2-4 2-6* 2-6 8-9
* Dots: p0.p6,p3.p6
* Apply automorphisms
if (match(Md133*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd133 automorphism;

#call CheckRemovedPropagators(d133,7,6,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d133;
#endif
#endprocedure

#procedure Reduced133()
	#call Prepared133()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd133'
		#call MtoZ(Md133,Zd133,i,9)
		#call Reduce(d133)
		#call ZtoM(Zd133,Md133,i,9)
		#call Prepared133()
#else
		#if `USETURBO'
			#call TurboMd133()
		#endif
		#call insertionS(Md133,i6,i7,i8,i9,i6,`Q2',i3,i8,i9,i10,1,0)
		if (count(Md133b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond133()
#endif
	#endif
#endprocedure
*--#] reduce-d133 : 
*--#[ reduce-fastar2 :
#procedure Preparefastar2()
* Topology: 0-1 3-4 2-3* 1-2 1-5 4-5 3-5 2-5 4-9
* Dots: p1.p3,p0.p2
* Apply automorphisms
if (match(Mfastar2*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n6,$n7,$n4,$n5,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zfastar2 automorphism;

#call CheckRemovedPropagators(fastar2,7,1,2)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d98
	if (count(Mfastar2M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i1,`Q2'+j4+2*j7,j,j4,j7,Mfastar2M1,dotmapMfastar2M1R1)
	#call replace(i8,`Q2'/2+j2/2-j3/2+j9,j,j2,j3,j9,Mfastar2M1,dotmapMfastar2M1R2)
	#call replace(i9,`Q2'/2+j1/2+j4/2-j5/2+j7-j8,j,j1,j4,j5,j7,j8,Mfastar2M1,dotmapMfastar2M1R3)
	if (count(Mfastar2M1,1)) Multiply replace_(Mfastar2M1,Md98,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd98 "1"
#endif

#if `$M3'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d98
	if (count(Mfastar2M3,1)) Multiply replace_(i1,j2,i2,j1,i4,j4,i5,j3,i6,j6,i7,j5);
	#call replace(i3,`Q2'+j4-2*j7,j,j4,j7,Mfastar2M3,dotmapMfastar2M3R1)
	#call replace(i8,`Q2'/2+j2/2-j3/2-j9,j,j2,j3,j9,Mfastar2M3,dotmapMfastar2M3R2)
	#call replace(i9,`Q2'/2+j1/2+j4/2-j5/2-j7+j8,j,j1,j4,j5,j7,j8,Mfastar2M3,dotmapMfastar2M3R3)
	if (count(Mfastar2M3,1)) Multiply replace_(Mfastar2M3,Md98,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd98 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d89
	if (count(Mfastar2M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j9,i9,j7);
	#call replace(i4,`Q2'+j3-2*j8,j,j3,j8,Mfastar2M4,dotmapMfastar2M4R1)
	if (count(Mfastar2M4,1)) Multiply replace_(Mfastar2M4,Md89,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd89 "1"
#endif

#if `$M5'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d89
	if (count(Mfastar2M5,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j4,i6,j6,i7,j5,i8,j9,i9,j7);
	#call replace(i5,`Q2'+j3-2*j8,j,j3,j8,Mfastar2M5,dotmapMfastar2M5R1)
	if (count(Mfastar2M5,1)) Multiply replace_(Mfastar2M5,Md89,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd89 "1"
#endif

#if `$M6'
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d110
	if (count(Mfastar2M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j9,i9,j7);
	#call replace(i6,j1+j2-2*j8,j,j1,j2,j8,Mfastar2M6,dotmapMfastar2M6R1)
	if (count(Mfastar2M6,1)) Multiply replace_(Mfastar2M6,Md110,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd110 "1"
#endif

#if `$M7'
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d110
	if (count(Mfastar2M7,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j5,i5,j4,i6,j6,i8,j9,i9,j7);
	#call replace(i7,j1+j2-2*j8,j,j1,j2,j8,Mfastar2M7,dotmapMfastar2M7R1)
	if (count(Mfastar2M7,1)) Multiply replace_(Mfastar2M7,Md110,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd110 "1"
#endif
.sort:reduce fastar2;
#endif
#endprocedure

#procedure Reducefastar2()
	#call Preparefastar2()
	#if `$DOACTION'
		#call MtoZ(Mfastar2,Zfastar2,i,9)
		#call Reduce(fastar2)
		#call ZtoM(Zfastar2,Mfastar2,i,9)
		#call Preparefastar2()
	#endif
#endprocedure
*--#] reduce-fastar2 : 
*--#[ reduce-d131 :
#procedure Insertiond131()
* merge propagators with same momentum, and repeated dots
	if (count(Md131b,1)) Multiply replace_(Md131b,Md131c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md131c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j3/2-j5/2,j,j3,j5,Md131c,dotmapMd131cR1)
	#call replace(i7,j1/2+j3/2-j4/2,j,j1,j3,j4,Md131c,dotmapMd131cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md131c,dotmapMd131cR3)
	if (count(Md131c,1)) Multiply replace_(Md131c,Md131d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d47
	if (count(Md131d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j5,i5,j1);
	if (count(Md131d,1)) Multiply replace_(Md131d,Md47,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd47 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared131()
* Topology: 0-1 1-2 1-6 2-3 2-3 3-7* 2-6 6-7 7-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md131*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd131 automorphism;

#call CheckRemovedPropagators(d131,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d131;
#endif
#endprocedure

#procedure Reduced131()
	#call Prepared131()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd131'
		#call MtoZ(Md131,Zd131,i,9)
		#call Reduce(d131)
		#call ZtoM(Zd131,Md131,i,9)
		#call Prepared131()
#else
		#if `USETURBO'
			#call TurboMd131()
		#endif
		#call insertionS(Md131,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md131b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond131()
#endif
	#endif
#endprocedure
*--#] reduce-d131 : 
*--#[ reduce-d130 :
#procedure Insertiond130()
* merge propagators with same momentum, and repeated dots
	if (count(Md130b,1)) Multiply replace_(Md130b,Md130c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md130c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j3/2-j5/2,j,j3,j5,Md130c,dotmapMd130cR1)
	#call replace(i7,j1/2-j2/2+j3/2,j,j1,j2,j3,Md130c,dotmapMd130cR2)
	#call replace(i8,`Q2'/2+j1/2-j4/2,j,j1,j4,Md130c,dotmapMd130cR3)
	if (count(Md130c,1)) Multiply replace_(Md130c,Md130d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star34
	if (count(Md130d,1)) Multiply replace_(i1,j3,i2,j5,i3,j4,i4,j2,i5,j1);
	if (count(Md130d,1)) Multiply replace_(Md130d,Mt1star34,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star34 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared130()
* Topology: 0-1 1-2* 2-7 2-4 2-4 4-8 1-7 7-8 8-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md130*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd130 automorphism;

#call CheckRemovedPropagators(d130,7,5,1,2,5,6,7,3,4)
#if `$DOACTION' == 0
.sort:reduce d130;
#endif
#endprocedure

#procedure Reduced130()
	#call Prepared130()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd130'
		#call MtoZ(Md130,Zd130,i,9)
		#call Reduce(d130)
		#call ZtoM(Zd130,Md130,i,9)
		#call Prepared130()
#else
		#if `USETURBO'
			#call TurboMd130()
		#endif
		#call insertionS(Md130,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md130b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond130()
#endif
	#endif
#endprocedure
*--#] reduce-d130 : 
*--#[ reduce-fastar3 :
#procedure Preparefastar3()
* Topology: 0-1 3-4* 2-3 1-2 1-5 4-5 3-5 2-5 4-9
* Dots: p1.p3,p0.p2
* Apply automorphisms
if (match(Mfastar3*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zfastar3 automorphism;

#call CheckRemovedPropagators(fastar3,7,1,1)
#if `$DOACTION' == 0

#if `$M2'
* map dots to p0.p5,p1.p5,p2.p5 and change topology to d93
	if (count(Mfastar3M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i2,j1+j5+2*j8,j,j1,j5,j8,Mfastar3M2,dotmapMfastar3M2R1)
	#call replace(i8,j1/2+j2/2+j5/2-j6/2+j8-j9,j,j1,j2,j5,j6,j8,j9,Mfastar3M2,dotmapMfastar3M2R2)
	#call replace(i9,`Q2'/2+j1/2-j4/2+j7,j,j1,j4,j7,Mfastar3M2,dotmapMfastar3M2R3)
	if (count(Mfastar3M2,1)) Multiply replace_(Mfastar3M2,Md93,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd93 "1"
#endif

#if `$M3'
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d76
	if (count(Mfastar3M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i3,`Q2'+j3-2*j7,j,j3,j7,Mfastar3M3,dotmapMfastar3M3R1)
	#call replace(i8,`Q2'/2+j1/2-j4/2-j8,j,j1,j4,j8,Mfastar3M3,dotmapMfastar3M3R2)
	#call replace(i9,`Q2'/2+j2/2+j3/2-j6/2-j7+j9,j,j2,j3,j6,j7,j9,Mfastar3M3,dotmapMfastar3M3R3)
	if (count(Mfastar3M3,1)) Multiply replace_(Mfastar3M3,Md76,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd76 "1"
#endif

#if `$M4'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d69
	if (count(Mfastar3M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6,i8,j9,i9,j7);
	#call replace(i4,`Q2'+j3-2*j8,j,j3,j8,Mfastar3M4,dotmapMfastar3M4R1)
	if (count(Mfastar3M4,1)) Multiply replace_(Mfastar3M4,Md69,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd69 "1"
#endif

#if `$M5'
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Mfastar3M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j9,i9,j7);
	#call replace(i5,`Q2'+j1-2*j8,j,j1,j8,Mfastar3M5,dotmapMfastar3M5R1)
	if (count(Mfastar3M5,1)) Multiply replace_(Mfastar3M5,Md83,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd83 "1"
#endif

#if `$M6'
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d75
	if (count(Mfastar3M6,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i7,j6,i8,j9,i9,j7);
	#call replace(i6,j1+j2-2*j8,j,j1,j2,j8,Mfastar3M6,dotmapMfastar3M6R1)
	if (count(Mfastar3M6,1)) Multiply replace_(Mfastar3M6,Md75,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd75 "1"
#endif

#if `$M7'
* map dots to p1.p3,p0.p2,p2.p3 and change topology to d70
	if (count(Mfastar3M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i8,j7,i9,j8);
	#call replace(i7,j2+j3-2*j9,j,j2,j3,j9,Mfastar3M7,dotmapMfastar3M7R1)
	if (count(Mfastar3M7,1)) Multiply replace_(Mfastar3M7,Md70,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd70 "1"
#endif
.sort:reduce fastar3;
#endif
#endprocedure

#procedure Reducefastar3()
	#call Preparefastar3()
	#if `$DOACTION'
		#call MtoZ(Mfastar3,Zfastar3,i,9)
		#call Reduce(fastar3)
		#call ZtoM(Zfastar3,Mfastar3,i,9)
		#call Preparefastar3()
	#endif
#endprocedure
*--#] reduce-fastar3 : 
*--#[ reduce-d128 :
#procedure Prepared128()
* Topology: 0-1 3-4 2-3 1-2 1-3 3-5* 4-5 2-5 4-9
* Dots: p0.p7,p1.p3
* Apply automorphisms
if (match(Md128*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd128 automorphism;

#call CheckRemovedPropagators(d128,7,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2,p0.p1,p1.p3 and change topology to d83
	if (count(Md128M1,1)) Multiply replace_(i2,j6,i3,j3,i4,j4,i5,j1,i6,j5,i7,j2,i8,j7);
	#call replace(i1,`Q2'+j5-2*j7-2*j8,j,j5,j7,j8,Md128M1,dotmapMd128M1R1)
	#call replace(i9,`Q2'/2-j2/2-j4/2+j6/2-j9,j,j2,j4,j6,j9,Md128M1,dotmapMd128M1R2)
	if (count(Md128M1,1)) Multiply replace_(Md128M1,Md83,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd83 "1"
#endif

#if `$M2'
* map dots to p0.p2,p1.p2,p1.p3 and change topology to d110
	if (count(Md128M2,1)) Multiply replace_(i1,j4,i3,j1,i4,j5,i5,j2,i6,j3,i7,j6);
	#call replace(i2,j1+j6+2*j8+2*j9,j,j1,j6,j8,j9,Md128M2,dotmapMd128M2R1)
	#call replace(i8,`Q2'/2+j3/2-j4/2-j7,j,j3,j4,j7,Md128M2,dotmapMd128M2R2)
	#call replace(i9,`Q2'/2+j1/2-j5/2+j9,j,j1,j5,j9,Md128M2,dotmapMd128M2R3)
	if (count(Md128M2,1)) Multiply replace_(Md128M2,Md110,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd110 "1"
#endif

#if `$M3'
* map dots to p0.p1,p1.p3,p1.p4 and change topology to d104
	if (count(Md128M3,1)) Multiply replace_(i1,j5,i2,j1,i4,j2,i5,j4,i6,j6,i7,j3);
	#call replace(i3,j1+j3+2*j8,j,j1,j3,j8,Md128M3,dotmapMd128M3R1)
	#call replace(i8,`Q2'/2+j1/2-j2/2+j3/2-j7+j8,j,j1,j2,j3,j7,j8,Md128M3,dotmapMd128M3R2)
	#call replace(i9,`Q2'/2+j1/2-j2/2+j4/2-j6/2-j9,j,j1,j2,j4,j6,j9,Md128M3,dotmapMd128M3R3)
	if (count(Md128M3,1)) Multiply replace_(Md128M3,Md104,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd104 "1"
#endif

#if `$M4'
* map dots to p0.p4,p0.p2,p1.p2 and change topology to d94
	if (count(Md128M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i4,j1+j3-j5+2*j7+2*j8,j,j1,j3,j5,j7,j8,Md128M4,dotmapMd128M4R1)
	#call replace(i8,`Q2'/2-j1/2+j5/2-j7,j,j1,j5,j7,Md128M4,dotmapMd128M4R2)
	#call replace(i9,`Q2'/2-j1/2+j4/2-j6/2-j7-j9,j,j1,j4,j6,j7,j9,Md128M4,dotmapMd128M4R3)
	if (count(Md128M4,1)) Multiply replace_(Md128M4,Md94,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd94 "1"
#endif

#if `$M6'
* map dots to p0.p4,p1.p4,p2.p4 and change topology to d86
	if (count(Md128M6,1)) Multiply replace_(i1,j5,i2,j6,i3,j2,i4,j3,i5,j4,i7,j1);
	#call replace(i6,j1+j4+2*j8,j,j1,j4,j8,Md128M6,dotmapMd128M6R1)
	#call replace(i8,`Q2'/2+j1/2+j4/2-j5/2-j7+j8,j,j1,j4,j5,j7,j8,Md128M6,dotmapMd128M6R2)
	#call replace(i9,`Q2'/2-j1/2-j3/2+j6/2-j9,j,j1,j3,j6,j9,Md128M6,dotmapMd128M6R3)
	if (count(Md128M6,1)) Multiply replace_(Md128M6,Md86,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd86 "1"
#endif

#if `$M7'
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d66
	if (count(Md128M7,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6);
	#call replace(i7,j2+j3-2*j9,j,j2,j3,j9,Md128M7,dotmapMd128M7R1)
	#call replace(i8,`Q2'/2+j3/2-j4/2-j7,j,j3,j4,j7,Md128M7,dotmapMd128M7R2)
	#call replace(i9,`Q2'/2-j2/2-j4/2+j5/2-j6/2-j7+j8+j9,j,j2,j4,j5,j6,j7,j8,j9,Md128M7,dotmapMd128M7R3)
	if (count(Md128M7,1)) Multiply replace_(Md128M7,Md66,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd66 "1"
#endif
.sort:reduce d128;
#endif
#endprocedure

#procedure Reduced128()
	#call Prepared128()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd128'
		#call MtoZ(Md128,Zd128,i,9)
		#call Reduce(d128)
		#call ZtoM(Zd128,Md128,i,9)
#else
		#if `USETURBO'
			#call TurboMd128()
		#endif
		#call triangleS(Md128,i2,i5,i7,i3,i6,i8,0,1)
#endif
		#call Prepared128()
	#endif
#endprocedure
*--#] reduce-d128 : 
*--#[ reduce-d127 :
#procedure Prepared127()
* Topology: 0-1 3-4 1-3 1-6 5-6 4-5* 3-6 1-5 4-9
* Dots: p0.p4,p0.p6
* Apply automorphisms
if (match(Md127*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd127 automorphism;

#call CheckRemovedPropagators(d127,7,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1,p0.p2,p0.p4 and change topology to d57
	if (count(Md127M1,1)) Multiply replace_(i2,j3,i3,j1,i4,j4,i5,j5,i6,j6,i7,j2,i8,j9);
	#call replace(i1,`Q2'+j5-2*j8+2*j9,j,j5,j8,j9,Md127M1,dotmapMd127M1R1)
	#call replace(i9,-j7-j9,j,j7,j9,Md127M1,dotmapMd127M1R2)
	if (count(Md127M1,1)) Multiply replace_(Md127M1,Md57,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd57 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d69
	if (count(Md127M2,1)) Multiply replace_(i1,j4,i3,j3,i4,j2,i5,j1,i6,j6,i7,j5,i8,j7);
	#call replace(i2,-j1-j2+j4+j5+j6-2*j7-2*j8-2*j9,j,j1,j2,j4,j5,j6,j7,j8,j9,Md127M2,dotmapMd127M2R1)
	#call replace(i9,-j7-j8,j,j7,j8,Md127M2,dotmapMd127M2R2)
	if (count(Md127M2,1)) Multiply replace_(Md127M2,Md69,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,-i9);
	#redefine HASTOPOd69 "1"
#endif

#if `$M3'
* map dots to p0.p3,p0.p2,p2.p3 and change topology to d64
	if (count(Md127M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,-j7);
	#call replace(i3,-j4+j5+j6+2*j7-2*j9,j,j4,j5,j6,j7,j9,Md127M3,dotmapMd127M3R1)
	#call replace(i9,-`Q2'/2-j1/2+j4/2+j8,j,j1,j4,j8,Md127M3,dotmapMd127M3R2)
	if (count(Md127M3,1)) Multiply replace_(Md127M3,Md64,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd64 "1"
#endif

#if `$M4'
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d71
	if (count(Md127M4,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i5,j4,i6,j5,i7,j6);
	#call replace(i4,j3+j5-2*j8+2*j9,j,j3,j5,j8,j9,Md127M4,dotmapMd127M4R1)
	#call replace(i8,j1/2-j2/2-j3/2-j4/2+j6/2-j9,j,j1,j2,j3,j4,j6,j9,Md127M4,dotmapMd127M4R2)
	#call replace(i9,-j1/2+j2/2+j3/2+j4/2-j6/2-j7+j9,j,j1,j2,j3,j4,j6,j7,j9,Md127M4,dotmapMd127M4R3)
	if (count(Md127M4,1)) Multiply replace_(Md127M4,Md71,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd71 "1"
#endif

#if `$M6'
* map dots to p0.p3,p1.p3,p2.p3 and change topology to d76
	if (count(Md127M6,1)) Multiply replace_(i1,j4,i2,j3,i3,j6,i4,j5,i5,j1,i7,j2);
	#call replace(i6,j3+j4-2*j7-2*j8,j,j3,j4,j7,j8,Md127M6,dotmapMd127M6R1)
	#call replace(i8,-j1/2+j2/2+j3/2+j4/2-j6/2-j7+j9,j,j1,j2,j3,j4,j6,j7,j9,Md127M6,dotmapMd127M6R2)
	#call replace(i9,-`Q2'/2+j1/2-j4/2+j7,j,j1,j4,j7,Md127M6,dotmapMd127M6R3)
	if (count(Md127M6,1)) Multiply replace_(Md127M6,Md76,<j1,i1>,...,<j6,i6>,j7,i7,j8,-i8,j9,i9);
	#redefine HASTOPOd76 "1"
#endif

#if `$M7'
* map dots to p0.p2,p0.p3,p1.p3 and change topology to d73
	if (count(Md127M7,1)) Multiply replace_(i1,j1,i2,j5,i3,j3,i4,j6,i5,j4,i6,j2,i9,j7);
	#call replace(i7,-j1-j2+j4+j5+j6-2*j7-2*j8+2*j9,j,j1,j2,j4,j5,j6,j7,j8,j9,Md127M7,dotmapMd127M7R1)
	#call replace(i8,-j7-j8,j,j7,j8,Md127M7,dotmapMd127M7R2)
	if (count(Md127M7,1)) Multiply replace_(Md127M7,Md73,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd73 "1"
#endif
.sort:reduce d127;
#endif
#endprocedure

#procedure Reduced127()
	#call Prepared127()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd127'
		#call MtoZ(Md127,Zd127,i,9)
		#call Reduce(d127)
		#call ZtoM(Zd127,Md127,i,9)
#else
		#if `USETURBO'
			#call TurboMd127()
		#endif
		#call triangleS(Md127,i2,i3,i6,i1,i4,i9,0,0)
#endif
		#call Prepared127()
	#endif
#endprocedure
*--#] reduce-d127 : 
*--#[ reduce-d126 :
#procedure Insertiond126()
* merge propagators with same momentum, and repeated dots
	if (count(Md126b,1)) Multiply replace_(Md126b,Md126c,i5,`Q2',i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md126c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j5/2,j,j1,j5,Md126c,dotmapMd126cR1)
	#call replace(i7,`Q2'/2+j2/2-j4/2,j,j2,j4,Md126c,dotmapMd126cR2)
	#call replace(i8,j1/2+j2/2-j3/2,j,j1,j2,j3,Md126c,dotmapMd126cR3)
	if (count(Md126c,1)) Multiply replace_(Md126c,Md126d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md126d,1)) Multiply replace_(i1,j3,i2,j5,i3,j2,i4,j1,i5,j4);
	if (count(Md126d,1)) Multiply replace_(Md126d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared126()
* Topology: 0-1 1-2 2-3 2-5 3-5 3-7* 1-5 1-7 7-9
* Dots: p0.p1,p0.p2
* Apply automorphisms
if (match(Md126*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n1,$n5,$n2,$n3,$n4,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9)*replace_(i1,i6,i2,i4,i4,i2,i6,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd126 automorphism;

#call CheckRemovedPropagators(d126,7,6,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d126;
#endif
#endprocedure

#procedure Reduced126()
	#call Prepared126()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd126'
		#call MtoZ(Md126,Zd126,i,9)
		#call Reduce(d126)
		#call ZtoM(Zd126,Md126,i,9)
		#call Prepared126()
#else
		#if `USETURBO'
			#call TurboMd126()
		#endif
		#call MtoZ(Md126,Zd126,i,9)
		#call carpet(Zd126,5,7,1,0,0,2,8,1,2)
		#call ZtoM(Zd126b,Md126b,i,9)
		#call Insertiond126()
#endif
	#endif
#endprocedure
*--#] reduce-d126 : 
*--#[ reduce-d125 :
#procedure Insertiond125()
* merge propagators with same momentum, and repeated dots
	if (count(Md125b,1)) Multiply replace_(Md125b,Md125c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md125c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md125c,dotmapMd125cR1)
	#call replace(i7,j1/2+j2/2-j5/2,j,j1,j2,j5,Md125c,dotmapMd125cR2)
	#call replace(i8,`Q2'/2+j2/2-j3/2,j,j2,j3,Md125c,dotmapMd125cR3)
	if (count(Md125c,1)) Multiply replace_(Md125c,Md125d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star34
	if (count(Md125d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5);
	if (count(Md125d,1)) Multiply replace_(Md125d,Mt1star34,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star34 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared125()
* Topology: 0-1 1-2 2-3 1-2 3-4* 4-6 1-6 3-6 4-9
* Dots: p0.p1,p1.p4
* Apply automorphisms
if (match(Md125*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd125 automorphism;

#call CheckRemovedPropagators(d125,7,5,2,4,5,6,7,1,3)
#if `$DOACTION' == 0
.sort:reduce d125;
#endif
#endprocedure

#procedure Reduced125()
	#call Prepared125()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd125'
		#call MtoZ(Md125,Zd125,i,9)
		#call Reduce(d125)
		#call ZtoM(Zd125,Md125,i,9)
		#call Prepared125()
#else
		#if `USETURBO'
			#call TurboMd125()
		#endif
		#call insertionS(Md125,i1,i3,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md125b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond125()
#endif
	#endif
#endprocedure
*--#] reduce-d125 : 
*--#[ reduce-d124 :
#procedure Insertiond124()
* merge propagators with same momentum, and repeated dots
	if (count(Md124b,1)) Multiply replace_(Md124b,Md124c,i6,`Q2',i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md124c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2+j5/2,j,j1,j5,Md124c,dotmapMd124cR1)
	#call replace(i7,-j1/2+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,Md124c,dotmapMd124cR2)
	#call replace(i8,j1/2+j2/2-j3/2,j,j1,j2,j3,Md124c,dotmapMd124cR3)
	if (count(Md124c,1)) Multiply replace_(Md124c,Md124d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md124d,1)) Multiply replace_(i1,j5,i2,j2,i3,j3,i4,j4,i5,j1);
	if (count(Md124d,1)) Multiply replace_(Md124d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared124()
* Topology: 0-1 1-2* 2-3 3-4 3-5 4-5 2-4 1-5 2-9
* Dots: p0.p2,p0.p3
* Apply automorphisms
if (match(Md124*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n2,$n4,$n5,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9)*replace_(i2,i6,i4,i5,i5,i4,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd124 automorphism;

#call CheckRemovedPropagators(d124,7,7,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d124;
#endif
#endprocedure

#procedure Reduced124()
	#call Prepared124()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd124'
		#call MtoZ(Md124,Zd124,i,9)
		#call Reduce(d124)
		#call ZtoM(Zd124,Md124,i,9)
		#call Prepared124()
#else
		#if `USETURBO'
			#call TurboMd124()
		#endif
		#call MtoZ(Md124,Zd124,i,9)
		#call carpet(Zd124,7,1,0,1,0,2,8,2,3)
		#call ZtoM(Zd124b,Md124b,i,9)
		#call Insertiond124()
#endif
	#endif
#endprocedure
*--#] reduce-d124 : 
*--#[ reduce-d123 :
#procedure Insertiond123()
* merge propagators with same momentum, and repeated dots
	if (count(Md123b,1)) Multiply replace_(Md123b,Md123c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md123c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j4/2,j,j1,j4,Md123c,dotmapMd123cR1)
	#call replace(i7,-j2/2-j4/2+j5/2,j,j2,j4,j5,Md123c,dotmapMd123cR2)
	#call replace(i8,j1/2-j3/2-j4/2+j5/2,j,j1,j3,j4,j5,Md123c,dotmapMd123cR3)
	if (count(Md123c,1)) Multiply replace_(Md123c,Md123d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star45
	if (count(Md123d,1)) Multiply replace_(i1,j1,i2,j5,i3,j2,i4,j4,i5,j3);
	if (count(Md123d,1)) Multiply replace_(Md123d,Mt1star45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared123()
* Topology: 0-1 1-5 1-3 1-5 3-6* 3-8 5-6 6-8 8-9
* Dots: p0.p1,p1.p4
* Apply automorphisms
if (match(Md123*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd123 automorphism;

#call CheckRemovedPropagators(d123,7,5,2,4,5,6,7,1,3)
#if `$DOACTION' == 0
.sort:reduce d123;
#endif
#endprocedure

#procedure Reduced123()
	#call Prepared123()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd123'
		#call MtoZ(Md123,Zd123,i,9)
		#call Reduce(d123)
		#call ZtoM(Zd123,Md123,i,9)
		#call Prepared123()
#else
		#if `USETURBO'
			#call TurboMd123()
		#endif
		#call insertionS(Md123,i1,i3,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md123b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond123()
#endif
	#endif
#endprocedure
*--#] reduce-d123 : 
*--#[ reduce-d122 :
#procedure Insertiond122()
* merge propagators with same momentum, and repeated dots
	if (count(Md122b,1)) Multiply replace_(Md122b,Md122c,i2,i1,i3,i2,i4,i3,i1,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md122c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j4/2,j,j1,j4,Md122c,dotmapMd122cR1)
	#call replace(i7,`Q2'/2-j1/2-j3/2+j5/2,j,j1,j3,j5,Md122c,dotmapMd122cR2)
	#call replace(i8,`Q2'/2+j2/2-j3/2,j,j2,j3,Md122c,dotmapMd122cR3)
	if (count(Md122c,1)) Multiply replace_(Md122c,Md122d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star24
	if (count(Md122d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5);
	if (count(Md122d,1)) Multiply replace_(Md122d,Mt1star24,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star24 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared122()
* Topology: 0-1 1-5 1-3 1-5 3-4* 4-6 5-6 3-6 4-9
* Dots: p0.p1,p1.p4
* Apply automorphisms
if (match(Md122*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd122 automorphism;

#call CheckRemovedPropagators(d122,7,5,2,4,5,6,7,1,3)
#if `$DOACTION' == 0
.sort:reduce d122;
#endif
#endprocedure

#procedure Reduced122()
	#call Prepared122()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd122'
		#call MtoZ(Md122,Zd122,i,9)
		#call Reduce(d122)
		#call ZtoM(Zd122,Md122,i,9)
		#call Prepared122()
#else
		#if `USETURBO'
			#call TurboMd122()
		#endif
		#call insertionS(Md122,i1,i3,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md122b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond122()
#endif
	#endif
#endprocedure
*--#] reduce-d122 : 
*--#[ reduce-d121 :
#procedure Insertiond121()
* merge propagators with same momentum, and repeated dots
	if (count(Md121b,1)) Multiply replace_(Md121b,Md121c,i6,`Q2',i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md121c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2+j5/2,j,j1,j5,Md121c,dotmapMd121cR1)
	#call replace(i7,-j1/2+j3/2-j4/2+j5/2,j,j1,j3,j4,j5,Md121c,dotmapMd121cR2)
	#call replace(i8,j1/2+j2/2-j3/2,j,j1,j2,j3,Md121c,dotmapMd121cR3)
	if (count(Md121c,1)) Multiply replace_(Md121c,Md121d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md121d,1)) Multiply replace_(i1,j5,i2,j2,i3,j3,i4,j4,i5,j1);
	if (count(Md121d,1)) Multiply replace_(Md121d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared121()
* Topology: 0-1* 2-3 3-4 3-5 4-5 2-4 1-5 1-2 2-9
* Dots: p0.p1,p0.p2
* Apply automorphisms
if (match(Md121*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n1,$n3,$n4,$n2,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9)*replace_(i1,i5,i3,i4,i4,i3,i5,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd121 automorphism;

#call CheckRemovedPropagators(d121,7,6,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d121;
#endif
#endprocedure

#procedure Reduced121()
	#call Prepared121()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd121'
		#call MtoZ(Md121,Zd121,i,9)
		#call Reduce(d121)
		#call ZtoM(Zd121,Md121,i,9)
		#call Prepared121()
#else
		#if `USETURBO'
			#call TurboMd121()
		#endif
		#call MtoZ(Md121,Zd121,i,9)
		#call carpet(Zd121,6,7,0,0,0,2,8,1,2)
		#call ZtoM(Zd121b,Md121b,i,9)
		#call Insertiond121()
#endif
	#endif
#endprocedure
*--#] reduce-d121 : 
*--#[ reduce-d120 :
#procedure Insertiond120()
* merge propagators with same momentum, and repeated dots
	if (count(Md120b,1)) Multiply replace_(Md120b,Md120c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md120c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md120c,dotmapMd120cR1)
	#call replace(i7,j1/2-j3/2-j4/2+j5/2,j,j1,j3,j4,j5,Md120c,dotmapMd120cR2)
	#call replace(i8,j1/2+j2/2-j3/2,j,j1,j2,j3,Md120c,dotmapMd120cR3)
	if (count(Md120c,1)) Multiply replace_(Md120c,Md120d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star05
	if (count(Md120d,1)) Multiply replace_(i1,j2,i2,j5,i3,j1,i4,j3,i5,j4);
	if (count(Md120d,1)) Multiply replace_(Md120d,Mt1star05,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star05 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared120()
* Topology: 0-1 1-2 1-2 2-3 3-6* 3-8 2-6 6-8 8-9
* Dots: p1.p3,p1.p4
* Apply automorphisms
if (match(Md120*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(1,$n9,$n8,$n5,$n3,$n7,$n4,$n6,$n1,$n2)
endif;
if (($n8==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n5,$n3,$n7,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 1); Multiply sign_($n9)*replace_(i1,i2,i2,i1,i3,i6,i5,i7,i6,i3,i7,i5);
elseif ($bestiso == 3); Multiply sign_($n9)*replace_(i3,i6,i5,i7,i6,i3,i7,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd120 automorphism;

#call CheckRemovedPropagators(d120,7,5,3,4,5,6,7,1,2)
#if `$DOACTION' == 0
.sort:reduce d120;
#endif
#endprocedure

#procedure Reduced120()
	#call Prepared120()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd120'
		#call MtoZ(Md120,Zd120,i,9)
		#call Reduce(d120)
		#call ZtoM(Zd120,Md120,i,9)
		#call Prepared120()
#else
		#if `USETURBO'
			#call TurboMd120()
		#endif
		#call insertionS(Md120,i1,i2,i8,i9,i1,i3,i4,i8,i9,i10,0,0)
		if (count(Md120b,1)) Multiply replace_(<i3,i2>,...,<i10,i9>);
		#call Insertiond120()
#endif
	#endif
#endprocedure
*--#] reduce-d120 : 
*--#[ reduce-d119 :
#procedure Insertiond119()
* merge propagators with same momentum, and repeated dots
	if (count(Md119b,1)) Multiply replace_(Md119b,Md119c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md119c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md119c,dotmapMd119cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md119c,dotmapMd119cR2)
	#call replace(i8,j1/2+j2/2-j5/2,j,j1,j2,j5,Md119c,dotmapMd119cR3)
	if (count(Md119c,1)) Multiply replace_(Md119c,Md119d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md119d,1)) Multiply replace_(i1,j5,i2,j1,i3,j2,i4,j4,i5,j3);
	if (count(Md119d,1)) Multiply replace_(Md119d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared119()
* Topology: 0-1 3-4 2-3 1-2 1-6 3-6* 3-4 2-6 4-9
* Dots: p1.p2,p1.p3
* Apply automorphisms
if (match(Md119*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i6,i6,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd119 automorphism;

#call CheckRemovedPropagators(d119,7,5,2,3,4,5,7,1,6)
#if `$DOACTION' == 0
.sort:reduce d119;
#endif
#endprocedure

#procedure Reduced119()
	#call Prepared119()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd119'
		#call MtoZ(Md119,Zd119,i,9)
		#call Reduce(d119)
		#call ZtoM(Zd119,Md119,i,9)
		#call Prepared119()
#else
		#if `USETURBO'
			#call TurboMd119()
		#endif
		#call insertionS(Md119,i1,i6,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md119b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond119()
#endif
	#endif
#endprocedure
*--#] reduce-d119 : 
*--#[ reduce-d118 :
#procedure Prepared118()
* Topology: 0-1* 2-3 1-2 1-6 5-6 3-5 3-6 2-5 3-9
* Dots: p0.p4,p0.p7
* Apply automorphisms
if (match(Md118*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1,$n7+$n2+$n4)
	#call hash(1,$n8,$n9,$n4,$n1,$n5,$n7,$n2,$n3,$n6,$n4+$n3+$n7)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n8+$n9)*replace_(i1,i6,i2,i3,i3,i2,i4,i7,i6,i1,i7,i4,i8,i9,i9,i8);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd118 automorphism;

#call CheckRemovedPropagators(d118,7,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3,p0.p4,p1.p4 and change topology to d77
	if (count(Md118M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i1,j1-j2-j3+j5+j6-2*j7+2*j9,j,j1,j2,j3,j5,j6,j7,j9,Md118M1,dotmapMd118M1R1)
	#call replace(i9,j7-j8,j,j7,j8,Md118M1,dotmapMd118M1R2)
	if (count(Md118M1,1)) Multiply replace_(Md118M1,Md77,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd77 "1"
#endif

#if `$M2'
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d60
	if (count(Md118M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4,i6,j5,i7,j6,i8,j8);
	#call replace(i2,`Q2'+j2-2*j7,j,j2,j7,Md118M2,dotmapMd118M2R1)
	#call replace(i9,j8-j9,j,j8,j9,Md118M2,dotmapMd118M2R2)
	if (count(Md118M2,1)) Multiply replace_(Md118M2,Md60,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd60 "1"
#endif

#if `$M3'
* map dots to p0.p2,p0.p3,p0.p4 and change topology to d60
	if (count(Md118M3,1)) Multiply replace_(i1,j4,i2,j6,i4,j2,i5,j5,i6,j1,i7,j3,i8,-j7,i9,j8);
	#call replace(i3,`Q2'+j6-2*j8-2*j9,j,j6,j8,j9,Md118M3,dotmapMd118M3R1)
	if (count(Md118M3,1)) Multiply replace_(Md118M3,Md60,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd60 "1"
#endif

#if `$M4'
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d81
	if (count(Md118M4,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i5,j2,i6,j5,i7,j6);
	#call replace(i4,j2+j6+2*j7-2*j8-2*j9,j,j2,j6,j7,j8,j9,Md118M4,dotmapMd118M4R1)
	#call replace(i8,-j1/2-j2/2-j3/2+j4/2+j5/2+j9,j,j1,j2,j3,j4,j5,j9,Md118M4,dotmapMd118M4R2)
	#call replace(i9,-j1/2-j2/2-j3/2+j4/2+j5/2-j7+j9,j,j1,j2,j3,j4,j5,j7,j9,Md118M4,dotmapMd118M4R3)
	if (count(Md118M4,1)) Multiply replace_(Md118M4,Md81,<j1,i1>,...,<j6,i6>,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd81 "1"
#endif

#if `$M5'
* map dots to p0.p4,p0.p1,p1.p4 and change topology to d87
	if (count(Md118M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6,i8,j7);
	#call replace(i5,-j3+j5+j6-2*j7+2*j9,j,j3,j5,j6,j7,j9,Md118M5,dotmapMd118M5R1)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j8,j,j2,j3,j8,Md118M5,dotmapMd118M5R2)
	if (count(Md118M5,1)) Multiply replace_(Md118M5,Md87,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd87 "1"
#endif

#if `$M6'
* map dots to p0.p3,p0.p4,p1.p4 and change topology to d77
	if (count(Md118M6,1)) Multiply replace_(i1,j5,i2,j2,i3,j1,i4,j4,i5,j6,i7,j3,i8,-j8,i9,j7);
	#call replace(i6,j1+j4-2*j9,j,j1,j4,j9,Md118M6,dotmapMd118M6R1)
	if (count(Md118M6,1)) Multiply replace_(Md118M6,Md77,<j1,i1>,...,<j6,i6>,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd77 "1"
#endif

#if `$M7'
* map dots to p0.p2,p1.p2,p2.p3 and change topology to d81
	if (count(Md118M7,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j6,i5,j5,i6,j3);
	#call replace(i7,j1+j2-2*j8,j,j1,j2,j8,Md118M7,dotmapMd118M7R1)
	#call replace(i8,j1/2+j2/2+j3/2-j4/2-j5/2-j7-j9,j,j1,j2,j3,j4,j5,j7,j9,Md118M7,dotmapMd118M7R2)
	#call replace(i9,`Q2'/2+j1/2-j4/2-j7,j,j1,j4,j7,Md118M7,dotmapMd118M7R3)
	if (count(Md118M7,1)) Multiply replace_(Md118M7,Md81,<j1,i1>,...,<j6,i6>,j7,i7,j8,i8,j9,-i9);
	#redefine HASTOPOd81 "1"
#endif
.sort:reduce d118;
#endif
#endprocedure

#procedure Reduced118()
	#call Prepared118()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd118'
		#call MtoZ(Md118,Zd118,i,9)
		#call Reduce(d118)
		#call ZtoM(Zd118,Md118,i,9)
#else
		#if `USETURBO'
			#call TurboMd118()
		#endif
		#call triangleS(Md118,i1,i5,i7,i2,i4,i9,0,0)
#endif
		#call Prepared118()
	#endif
#endprocedure
*--#] reduce-d118 : 
*--#[ reduce-d117 :
#procedure Insertiond117()
* merge propagators with same momentum, and repeated dots
	if (count(Md117b,1)) Multiply replace_(Md117b,Md117c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md117c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md117c,dotmapMd117cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md117c,dotmapMd117cR2)
	#call replace(i8,j1/2+j2/2-j5/2,j,j1,j2,j5,Md117c,dotmapMd117cR3)
	if (count(Md117c,1)) Multiply replace_(Md117c,Md117d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md117d,1)) Multiply replace_(i1,j2,i2,j4,i3,j5,i4,j1,i5,j3);
	if (count(Md117d,1)) Multiply replace_(Md117d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared117()
* Topology: 0-1 1-2 1-2 2-3 3-4* 4-6 2-6 3-6 4-9
* Dots: p1.p3,p1.p4
* Apply automorphisms
if (match(Md117*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd117 automorphism;

#call CheckRemovedPropagators(d117,7,5,3,4,5,6,7,1,2)
#if `$DOACTION' == 0
.sort:reduce d117;
#endif
#endprocedure

#procedure Reduced117()
	#call Prepared117()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd117'
		#call MtoZ(Md117,Zd117,i,9)
		#call Reduce(d117)
		#call ZtoM(Zd117,Md117,i,9)
		#call Prepared117()
#else
		#if `USETURBO'
			#call TurboMd117()
		#endif
		#call insertionS(Md117,i1,i2,i8,i9,i1,i3,i4,i8,i9,i10,0,0)
		if (count(Md117b,1)) Multiply replace_(<i3,i2>,...,<i10,i9>);
		#call Insertiond117()
#endif
	#endif
#endprocedure
*--#] reduce-d117 : 
*--#[ reduce-d116 :
#procedure Insertiond116()
* merge propagators with same momentum, and repeated dots
	if (count(Md116b,1)) Multiply replace_(Md116b,Md116c,i4,i3,i3,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md116c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j4/2-j5/2,j,j4,j5,Md116c,dotmapMd116cR1)
	#call replace(i7,j1/2-j3/2+j4/2,j,j1,j3,j4,Md116c,dotmapMd116cR2)
	#call replace(i8,`Q2'/2+j1/2-j2/2,j,j1,j2,Md116c,dotmapMd116cR3)
	if (count(Md116c,1)) Multiply replace_(Md116c,Md116d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d47
	if (count(Md116d,1)) Multiply replace_(i1,j3,i2,j2,i3,j5,i4,j4,i5,j1);
	if (count(Md116d,1)) Multiply replace_(Md116d,Md47,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd47 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared116()
* Topology: 0-1 1-2 1-5 2-3 2-5 3-4* 4-5 3-4 4-9
* Dots: p0.p5,p1.p5
* Apply automorphisms
if (match(Md116*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd116 automorphism;

#call CheckRemovedPropagators(d116,7,6,1,2,3,4,5,6,7)
#if `$DOACTION' == 0
.sort:reduce d116;
#endif
#endprocedure

#procedure Reduced116()
	#call Prepared116()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd116'
		#call MtoZ(Md116,Zd116,i,9)
		#call Reduce(d116)
		#call ZtoM(Zd116,Md116,i,9)
		#call Prepared116()
#else
		#if `USETURBO'
			#call TurboMd116()
		#endif
		#call insertionS(Md116,i5,i7,i8,i9,i5,`Q2',i1,i8,i9,i10,1,0)
		if (count(Md116b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond116()
#endif
	#endif
#endprocedure
*--#] reduce-d116 : 
*--#[ reduce-d115 :
#procedure Insertiond115()
* merge propagators with same momentum, and repeated dots
	if (count(Md115b,1)) Multiply replace_(Md115b,Md115c,i3,i2,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md115c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2,j,j2,j3,Md115c,dotmapMd115cR1)
	#call replace(i7,j1/2+j2/2-j5/2,j,j1,j2,j5,Md115c,dotmapMd115cR2)
	#call replace(i8,`Q2'/2+j1/2-j4/2,j,j1,j4,Md115c,dotmapMd115cR3)
	if (count(Md115c,1)) Multiply replace_(Md115c,Md115d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d45
	if (count(Md115d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5);
	if (count(Md115d,1)) Multiply replace_(Md115d,Md45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared115()
* Topology: 0-1 3-4 2-3 1-2 1-5* 4-5 3-5 1-2 4-9
* Dots: p0.p3,p1.p3
* Apply automorphisms
if (match(Md115*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n3,$n6,$n5,$n4,$n7,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i7,i7,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd115 automorphism;

#call CheckRemovedPropagators(d115,7,5,1,2,4,5,6,3,7)
#if `$DOACTION' == 0
.sort:reduce d115;
#endif
#endprocedure

#procedure Reduced115()
	#call Prepared115()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd115'
		#call MtoZ(Md115,Zd115,i,9)
		#call Reduce(d115)
		#call ZtoM(Zd115,Md115,i,9)
		#call Prepared115()
#else
		#if `USETURBO'
			#call TurboMd115()
		#endif
		#call insertionS(Md115,i3,i7,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md115b,1)) Multiply replace_(<i8,i7>,...,<i10,i9>);
		#call Insertiond115()
#endif
	#endif
#endprocedure
*--#] reduce-d115 : 
*--#[ reduce-d114 :
#procedure Insertiond114()
* merge propagators with same momentum, and repeated dots
	if (count(Md114b,1)) Multiply replace_(Md114b,Md114c,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md114c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j1/2-j4/2,j,j1,j4,Md114c,dotmapMd114cR1)
	#call replace(i7,-`Q2'/2+j1/2+j3/2-j5/2,j,j1,j3,j5,Md114c,dotmapMd114cR2)
	#call replace(i8,`Q2'/2+j2/2-j3/2,j,j2,j3,Md114c,dotmapMd114cR3)
	if (count(Md114c,1)) Multiply replace_(Md114c,Md114d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d47
	if (count(Md114d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md114d,1)) Multiply replace_(Md114d,Md47,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd47 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared114()
* Topology: 0-1 2-3 1-2 1-6 5-6* 3-5 3-5 2-6 3-9
* Dots: p0.p5,p2.p5
* Apply automorphisms
if (match(Md114*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd114 automorphism;

#call CheckRemovedPropagators(d114,7,5,1,2,3,4,7,5,6)
#if `$DOACTION' == 0
.sort:reduce d114;
#endif
#endprocedure

#procedure Reduced114()
	#call Prepared114()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd114'
		#call MtoZ(Md114,Zd114,i,9)
		#call Reduce(d114)
		#call ZtoM(Zd114,Md114,i,9)
		#call Prepared114()
#else
		#if `USETURBO'
			#call TurboMd114()
		#endif
		#call insertionS(Md114,i5,i6,i8,i9,i5,`Q2',i2,i8,i9,i10,0,0)
		if (count(Md114b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond114()
#endif
	#endif
#endprocedure
*--#] reduce-d114 : 
#call ReduceEdge(7,\
d191,d190,d189,d188,d187,d186,d185,d184,d183,d182,d181,d180,d179,d178,d177,d176\
,d175,d174,d173,d172,d171,d170,d169,d168,d167,d166,d165,d164,d163,d162,d161,\
d160,d159,d158,d157,d156,d155,d154,d153,d152,d151,d150,d149,d148,d147,d146,d145\
,d144,d143,d142,d141,d140,bustar5,d138,d137,d136,d135,d134,d133,fastar2,d131,\
d130,fastar3,d128,d127,d126,d125,d124,d123,d122,d121,d120,d119,d118,d117,d116,\
d115,d114\
)
*--#] 7 edges : 
*--#[ 6 edges :
*--#[ reduce-d113 :
#procedure Insertiond113()
* merge propagators with same momentum, and repeated dots
	if (count(Md113b,1)) Multiply replace_(Md113b,Md113c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md113c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md113c,dotmapMd113cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md113c,dotmapMd113cR2)
	if (count(Md113c,1)) Multiply replace_(Md113c,Md113d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d12
	if (count(Md113d,1)) Multiply replace_(i1,j2,i2,j3,i3,j1,i4,j4,i5,j5);
	if (count(Md113d,1)) Multiply replace_(Md113d,Md12,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd12 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared113()
* Topology: 0-1 3-4 2-3 1-2 1-4* 3-4 1-2 4-9
* Dots: p0.p3,p0.p1,p1.p3
* Apply automorphisms
if (match(Md113*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n3,$n1,$n4,$n6,$n2,$n5)
	#call hash(1,$n9,$n7,$n7,$n1,$n6,$n4,$n5,$n2,$n3)
	#call hash(2,$n9,$n8,$n8,$n5,$n3,$n4,$n1,$n2,$n6)
	#call hash(3,$n9,$n8,$n7,$n1,$n3,$n4,$n5,$n2,$n6)
endif;
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(5,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n5,$n6,$n4,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i5,i3,i6,i5,i1,i6,i3);
elseif ($bestiso == 1); Multiply replace_(i1,i3,i3,i5,i5,i6,i6,i1,i8,i7);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i3,i1,i5,i3,i6,i5,i7,i8);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i3,i5,i5,i3,i6,i1);
elseif ($bestiso == 4); Multiply replace_(i3,i6,i6,i3);
elseif ($bestiso == 5); Multiply replace_(i1,i5,i5,i1);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i3,i1,i5,i6,i6,i5,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd113 automorphism;

#call CheckRemovedPropagators(d113,6,2,2,4,1,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d113;
#endif
#endprocedure

#procedure Reduced113()
	#call Prepared113()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd113'
		#call MtoZ(Md113,Zd113,i,9)
		#call Reduce(d113)
		#call ZtoM(Zd113,Md113,i,9)
		#call Prepared113()
#else
		#if `USETURBO'
			#call TurboMd113()
		#endif
		#call insertionS(Md113,i1,i5,i8,i9,i1,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md113b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond113()
#endif
	#endif
#endprocedure
*--#] reduce-d113 : 
*--#[ reduce-d112 :
#procedure Insertiond112()
* merge propagators with same momentum, and repeated dots
	if (count(Md112b,1)) Multiply replace_(Md112b,Md112c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md112c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md112c,dotmapMd112cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md112c,dotmapMd112cR2)
	if (count(Md112c,1)) Multiply replace_(Md112c,Md112d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p3 and change topology to d13
	if (count(Md112d,1)) Multiply replace_(i1,j4,i2,j1,i3,j2,i4,j3);
	#call replace(i5,`Q2'/2+j1/2-j2/2-j5,j,j1,j2,j5,Md112d,dotmapMd112dR1)
	if (count(Md112d,1)) Multiply replace_(Md112d,Md13,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd13 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared112()
* Topology: 0-1 3-4 2-3 1-2 1-2 2-3* 3-4 4-9
* Dots: p2.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md112*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
	#call hash(1,$n9,$n7,$n7,$n4,$n5,$n1,$n6,$n2,$n3)
	#call hash(2,$n9,$n8,$n8,$n3,$n5,$n6,$n1,$n2,$n4)
	#call hash(3,$n9,$n8,$n7,$n3,$n5,$n1,$n6,$n2,$n4)
endif;
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(5,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n4,$n5,$n6,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 1); Multiply replace_(i1,i3,i3,i6,i4,i1,i6,i4,i8,i7);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i3,i1,i4,i6,i6,i3,i7,i8);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i3,i6,i4,i1,i6,i3);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd112 automorphism;

#call CheckRemovedPropagators(d112,6,1,5,1,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d112;
#endif
#endprocedure

#procedure Reduced112()
	#call Prepared112()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd112'
		#call MtoZ(Md112,Zd112,i,9)
		#call Reduce(d112)
		#call ZtoM(Zd112,Md112,i,9)
		#call Prepared112()
#else
		#if `USETURBO'
			#call TurboMd112()
		#endif
		#call insertionS(Md112,i1,i6,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md112b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond112()
#endif
	#endif
#endprocedure
*--#] reduce-d112 : 
*--#[ reduce-d111 :
#procedure Insertiond111()
* merge propagators with same momentum, and repeated dots
	if (count(Md111b,1)) Multiply replace_(Md111b,Md111c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md111c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md111c,dotmapMd111cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md111c,dotmapMd111cR2)
	if (count(Md111c,1)) Multiply replace_(Md111c,Md111d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d14
	if (count(Md111d,1)) Multiply replace_(i1,j4,i2,j1,i3,j3,i4,j2,i5,j5);
	if (count(Md111d,1)) Multiply replace_(Md111d,Md14,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd14 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared111()
* Topology: 0-1 3-4 2-3 1-2 1-3* 3-4 1-2 4-9
* Dots: p0.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md111*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n3,$n1,$n4,$n6,$n2,$n5)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i5,i3,i6,i5,i1,i6,i3);
elseif ($bestiso == 2); Multiply replace_(i1,i5,i5,i1);
elseif ($bestiso == 3); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd111 automorphism;

#call CheckRemovedPropagators(d111,6,2,2,4,1,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d111;
#endif
#endprocedure

#procedure Reduced111()
	#call Prepared111()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd111'
		#call MtoZ(Md111,Zd111,i,9)
		#call Reduce(d111)
		#call ZtoM(Zd111,Md111,i,9)
		#call Prepared111()
#else
		#if `USETURBO'
			#call TurboMd111()
		#endif
		#call insertionS(Md111,i1,i5,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md111b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond111()
#endif
	#endif
#endprocedure
*--#] reduce-d111 : 
*--#[ reduce-d110 :
#procedure Insertiond110()
* merge propagators with same momentum, and repeated dots
	if (count(Md110b,1)) Multiply replace_(Md110b,Md110c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md110c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2,j,j2,j3,Md110c,dotmapMd110cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md110c,dotmapMd110cR2)
	if (count(Md110c,1)) Multiply replace_(Md110c,Md110d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d15
	if (count(Md110d,1)) Multiply replace_(i1,j4,i2,j2,i3,j1,i4,j3);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j5,j,j1,j2,j5,Md110d,dotmapMd110dR1)
	if (count(Md110d,1)) Multiply replace_(Md110d,Md15,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd15 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared110()
* Topology: 0-1 3-4 2-3* 1-2 1-3 3-4 2-3 4-9
* Dots: p0.p2,p1.p2,p1.p3
* Apply automorphisms
if (match(Md110*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i5,i5,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd110 automorphism;

#call CheckRemovedPropagators(d110,6,2,2,3,1,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d110;
#endif
#endprocedure

#procedure Reduced110()
	#call Prepared110()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd110'
		#call MtoZ(Md110,Zd110,i,9)
		#call Reduce(d110)
		#call ZtoM(Zd110,Md110,i,9)
		#call Prepared110()
#else
		#if `USETURBO'
			#call TurboMd110()
		#endif
		#call insertionS(Md110,i1,i5,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md110b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond110()
#endif
	#endif
#endprocedure
*--#] reduce-d110 : 
*--#[ reduce-d109 :
#procedure Insertiond109()
* merge propagators with same momentum, and repeated dots
	if (count(Md109b,1)) Multiply replace_(Md109b,Md109c,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md109c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j2/2,j,j1,j2,Md109c,dotmapMd109cR1)
	#call replace(i7,j2/2+j3/2-j4/2,j,j2,j3,j4,Md109c,dotmapMd109cR2)
	if (count(Md109c,1)) Multiply replace_(Md109c,Md109d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d16
	if (count(Md109d,1)) Multiply replace_(i1,j1,i2,j3,i3,j4,i4,j2);
	#call replace(i5,`Q2'/2-j1/2+j3/2-j5,j,j1,j3,j5,Md109d,dotmapMd109dR1)
	if (count(Md109d,1)) Multiply replace_(Md109d,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared109()
* Topology: 0-1 1-8 6-8 1-2 1-2 2-6* 2-6 8-9
* Dots: p0.p5,p0.p3,p3.p5
* Apply automorphisms
if (match(Md109*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd109 automorphism;

#call CheckRemovedPropagators(d109,6,2,2,5,1,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d109;
#endif
#endprocedure

#procedure Reduced109()
	#call Prepared109()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd109'
		#call MtoZ(Md109,Zd109,i,9)
		#call Reduce(d109)
		#call ZtoM(Zd109,Md109,i,9)
		#call Prepared109()
#else
		#if `USETURBO'
			#call TurboMd109()
		#endif
		#call insertionS(Md109,i3,i4,i8,i9,i3,`Q2',i5,i8,i9,i10,0,0)
		if (count(Md109b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond109()
#endif
	#endif
#endprocedure
*--#] reduce-d109 : 
*--#[ reduce-d108 :
#procedure Insertiond108()
* merge propagators with same momentum, and repeated dots
	if (count(Md108b,1)) Multiply replace_(Md108b,Md108c,i5,i2,i6,-i5,i9,-i5,i7,i6,i8,-i7);

* rewrite insertion dots
	if (count(Md108c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md108c,dotmapMd108cR1)
	#call replace(i7,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md108c,dotmapMd108cR2)
	if (count(Md108c,1)) Multiply replace_(Md108c,Md108d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d12
	if (count(Md108d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md108d,1)) Multiply replace_(Md108d,Md12,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd12 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared108()
* Topology: 0-1 1-2* 2-3 3-5 3-5 2-3 1-5 2-9
* Dots: p0.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md108*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n2,$n3,$n4,$n5,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd108 automorphism;

#call CheckRemovedPropagators(d108,6,2,1,6,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d108;
#endif
#endprocedure

#procedure Reduced108()
	#call Prepared108()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd108'
		#call MtoZ(Md108,Zd108,i,9)
		#call Reduce(d108)
		#call ZtoM(Zd108,Md108,i,9)
		#call Prepared108()
#else
		#if `USETURBO'
			#call TurboMd108()
		#endif
		#call insertionS(Md108,i2,i5,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md108b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond108()
#endif
	#endif
#endprocedure
*--#] reduce-d108 : 
*--#[ reduce-d107 :
#procedure Insertiond107()
* merge propagators with same momentum, and repeated dots
	if (count(Md107b,1)) Multiply replace_(Md107b,Md107c,i3,i2,i4,i3,i2,i4,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md107c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j4/2,j,j1,j4,Md107c,dotmapMd107cR1)
	#call replace(i7,-j1/2-j2/2+j3/2+j5,j,j1,j2,j3,j5,Md107c,dotmapMd107cR2)
	if (count(Md107c,1)) Multiply replace_(Md107c,Md107d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d14
	if (count(Md107d,1)) Multiply replace_(i1,j4,i2,j1,i3,j2,i4,j3,i5,j5);
	if (count(Md107d,1)) Multiply replace_(Md107d,Md14,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd14 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared107()
* Topology: 0-1* 1-3 1-6 3-4 3-4 4-6 1-6 4-9
* Dots: p0.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md107*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
	#call hash(1,$n9,$n7,$n7,$n4,$n1,$n2,$n6,$n3,$n5)
	#call hash(2,$n9,$n8,$n8,$n3,$n1,$n6,$n2,$n4,$n5)
	#call hash(3,$n9,$n8,$n7,$n3,$n1,$n2,$n6,$n4,$n5)
endif;
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(5,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n4,$n1,$n6,$n2,$n3,$n5)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i3,i4,i4,i3,i6,i2);
elseif ($bestiso == 1); Multiply replace_(i1,i5,i2,i3,i3,i6,i4,i2,i5,i1,i6,i4,i8,i7);
elseif ($bestiso == 2); Multiply replace_(i1,i5,i2,i4,i3,i2,i4,i6,i5,i1,i6,i3,i7,i8);
elseif ($bestiso == 3); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i2,i5,i1,i6,i3);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i2,i6,i6,i2);
elseif ($bestiso == 7); Multiply replace_(i1,i5,i2,i3,i3,i2,i4,i6,i5,i1,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd107 automorphism;

#call CheckRemovedPropagators(d107,6,2,1,5,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d107;
#endif
#endprocedure

#procedure Reduced107()
	#call Prepared107()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd107'
		#call MtoZ(Md107,Zd107,i,9)
		#call Reduce(d107)
		#call ZtoM(Zd107,Md107,i,9)
		#call Prepared107()
#else
		#if `USETURBO'
			#call TurboMd107()
		#endif
		#call insertionS(Md107,i2,i6,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md107b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond107()
#endif
	#endif
#endprocedure
*--#] reduce-d107 : 
*--#[ reduce-d106 :
#procedure Insertiond106()
* merge propagators with same momentum, and repeated dots
	if (count(Md106b,1)) Multiply replace_(Md106b,Md106c,i3,i2,i4,i3,i2,i4,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md106c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j4/2,j,j1,j4,Md106c,dotmapMd106cR1)
	#call replace(i7,-j2/2+j3/2-j4/2,j,j2,j3,j4,Md106c,dotmapMd106cR2)
	if (count(Md106c,1)) Multiply replace_(Md106c,Md106d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d17
	if (count(Md106d,1)) Multiply replace_(i1,j4,i2,j1,i3,j2,i4,j3,i5,j5);
	if (count(Md106d,1)) Multiply replace_(Md106d,Md17,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd17 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared106()
* Topology: 0-1* 1-3 1-6 3-5 3-5 5-6 1-6 3-9
* Dots: p0.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md106*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
	#call hash(1,$n9,$n7,$n7,$n4,$n5,$n2,$n6,$n3,$n1)
	#call hash(2,$n9,$n8,$n8,$n3,$n5,$n6,$n2,$n4,$n1)
	#call hash(3,$n9,$n8,$n7,$n3,$n5,$n2,$n6,$n4,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(5,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n4,$n5,$n6,$n2,$n3,$n1)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i3,i4,i4,i3,i6,i2);
elseif ($bestiso == 1); Multiply sign_($n7+$n8)*replace_(i2,i3,i3,i6,i4,i2,i6,i4,i8,i7);
elseif ($bestiso == 2); Multiply sign_($n7+$n8)*replace_(i2,i4,i3,i2,i4,i6,i6,i3,i7,i8);
elseif ($bestiso == 3); Multiply sign_($n7+$n8)*replace_(i2,i4,i3,i6,i4,i2,i6,i3);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i2,i6,i6,i2);
elseif ($bestiso == 7); Multiply sign_($n7+$n8)*replace_(i2,i3,i3,i2,i4,i6,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd106 automorphism;

#call CheckRemovedPropagators(d106,6,1,5,1,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d106;
#endif
#endprocedure

#procedure Reduced106()
	#call Prepared106()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd106'
		#call MtoZ(Md106,Zd106,i,9)
		#call Reduce(d106)
		#call ZtoM(Zd106,Md106,i,9)
		#call Prepared106()
#else
		#if `USETURBO'
			#call TurboMd106()
		#endif
		#call insertionS(Md106,i2,i6,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md106b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond106()
#endif
	#endif
#endprocedure
*--#] reduce-d106 : 
*--#[ reduce-d105 :
#procedure Insertiond105()
* merge propagators with same momentum, and repeated dots
	if (count(Md105b,1)) Multiply replace_(Md105b,Md105c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md105c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md105c,dotmapMd105cR1)
	#call replace(i7,`Q2'/2+j2/2-j4/2,j,j2,j4,Md105c,dotmapMd105cR2)
	if (count(Md105c,1)) Multiply replace_(Md105c,Md105d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p3 and change topology to d13
	if (count(Md105d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5);
	if (count(Md105d,1)) Multiply replace_(Md105d,Md13,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd13 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared105()
* Topology: 0-1 1-2 1-2 2-3 3-4* 2-3 3-4 4-9
* Dots: p3.p4,p1.p3,p1.p4
* Apply automorphisms
if (match(Md105*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n1,$n2)
endif;
if (($n8==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i3,i5,i5,i3);
elseif ($bestiso == 2); Multiply replace_(i3,i5,i5,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd105 automorphism;

#call CheckRemovedPropagators(d105,6,1,4,1,2,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d105;
#endif
#endprocedure

#procedure Reduced105()
	#call Prepared105()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd105'
		#call MtoZ(Md105,Zd105,i,9)
		#call Reduce(d105)
		#call ZtoM(Zd105,Md105,i,9)
		#call Prepared105()
#else
		#if `USETURBO'
			#call TurboMd105()
		#endif
		#call insertionS(Md105,i1,i2,i8,i9,i1,i3,i4,i8,i9,i10,0,0)
		if (count(Md105b,1)) Multiply replace_(<i3,i2>,...,<i10,i9>);
		#call Insertiond105()
#endif
	#endif
#endprocedure
*--#] reduce-d105 : 
*--#[ reduce-d104 :
#procedure Insertiond104()
* merge propagators with same momentum, and repeated dots
	if (count(Md104b,1)) Multiply replace_(Md104b,Md104c);

* rewrite insertion dots
	if (count(Md104c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md104c,dotmapMd104cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2,j,j1,j2,Md104c,dotmapMd104cR2)
	#call replace(i8,-j1/2-j3/2+j4/2,j,j1,j3,j4,Md104c,dotmapMd104cR3)
	#call replace(i9,`Q2'/2-j1/2+j2/2,j,j1,j2,Md104c,dotmapMd104cR4)
	#call replace(i10,-j1/2+j2/2+j4/2-j5/2,j,j1,j2,j4,j5,Md104c,dotmapMd104cR5)
	#call replace(i11,j2/2+j3/2-j5/2,j,j2,j3,j5,Md104c,dotmapMd104cR6)
	if (count(Md104c,1)) Multiply replace_(Md104c,Md104d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star45
	if (count(Md104d,1)) Multiply replace_(i1,j4,i2,j1,i3,j5,i4,j3,i5,j2);
	if (count(Md104d,1)) Multiply replace_(Md104d,Mt1star45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared104()
* Topology: 0-2 1-5 1-5 4-5 1-4* 1-2 2-4 5-9
* Dots: p0.p1,p1.p3,p1.p4
* Apply automorphisms
if (match(Md104*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd104 automorphism;

#call CheckRemovedPropagators(d104,6,4,3,4,5,6,1,2)
#if `$DOACTION' == 0
.sort:reduce d104;
#endif
#endprocedure

#procedure Reduced104()
	#call Prepared104()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd104'
		#call MtoZ(Md104,Zd104,i,9)
		#call Reduce(d104)
		#call ZtoM(Zd104,Md104,i,9)
		#call Prepared104()
#else
		#if `USETURBO'
			#call TurboMd104()
		#endif
		#call insertionS(Md104,i1,i2,i7,i8,i9,i1,`Q2',i3,i4,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md104b,1)) Multiply replace_(<i3,i2>,...,<i12,i11>);
		#call Insertiond104()
#endif
	#endif
#endprocedure
*--#] reduce-d104 : 
*--#[ reduce-d103 :
#procedure Insertiond103()
* merge propagators with same momentum, and repeated dots
	if (count(Md103b,1)) Multiply replace_(Md103b,Md103c,i2,i1,i3,i2,i1,i3,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md103c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j3/2+j4/2,j,j3,j4,Md103c,dotmapMd103cR1)
	#call replace(i7,-j1/2+j2/2-j4/2-j5,j,j1,j2,j4,j5,Md103c,dotmapMd103cR2)
	if (count(Md103c,1)) Multiply replace_(Md103c,Md103d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d18
	if (count(Md103d,1)) Multiply replace_(i1,j2,i2,j4,i3,j3,i4,j1,i5,j5);
	if (count(Md103d,1)) Multiply replace_(Md103d,Md18,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd18 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared103()
* Topology: 0-2 1-3 1-4 1-3 1-4* 2-3 2-4 1-9
* Dots: p0.p2,p0.p1,p1.p2
* Apply automorphisms
if (match(Md103*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd103 automorphism;

#call CheckRemovedPropagators(d103,6,3,4,5,6,1,2,3)
#if `$DOACTION' == 0
.sort:reduce d103;
#endif
#endprocedure

#procedure Reduced103()
	#call Prepared103()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd103'
		#call MtoZ(Md103,Zd103,i,9)
		#call Reduce(d103)
		#call ZtoM(Zd103,Md103,i,9)
		#call Prepared103()
#else
		#if `USETURBO'
			#call TurboMd103()
		#endif
		#call insertionS(Md103,i1,i3,i8,i9,i1,`Q2',i2,i8,i9,i10,0,0)
		if (count(Md103b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond103()
#endif
	#endif
#endprocedure
*--#] reduce-d103 : 
*--#[ reduce-d102 :
#procedure Insertiond102()
* merge propagators with same momentum, and repeated dots
	if (count(Md102b,1)) Multiply replace_(Md102b,Md102c,i15,i6,i16,i7,i17,i8,i18,i9,i19,i15);

* rewrite insertion dots
	if (count(Md102c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'/2+j2/2-j4/2-j6-j7,j,j2,j4,j6,j7,Md102c,dotmapMd102cR1)
	#call replace(i11,j2-j8-j9,j,j2,j8,j9,Md102c,dotmapMd102cR2)
	#call replace(i12,-j1/2+j2/2-j3/2+j5/2-j9,j,j1,j2,j3,j5,j9,Md102c,dotmapMd102cR3)
	#call replace(i13,-j1/2+j2/2+j3/2-j5/2-j8,j,j1,j2,j3,j5,j8,Md102c,dotmapMd102cR4)
	#call replace(i14,`Q2'/2+j2/2-j4/2,j,j2,j4,Md102c,dotmapMd102cR5)
	#call replace(i15,j1/2-j2/2-j3/2-j5/2+j8+j9,j,j1,j2,j3,j5,j8,j9,Md102c,dotmapMd102cR6)
	if (count(Md102c,1)) Multiply replace_(Md102c,Md102d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p1,p1.p2,p1.p5 and change topology to d51
	if (count(Md102d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5,i7,j6);
	#call replace(i6,`Q2'/2+j2/2-j3/2-j6-j7,j,j2,j3,j6,j7,Md102d,dotmapMd102dR1)
	#call replace(i8,-j1/2+j2/2+j4/2-j5/2-j9,j,j1,j2,j4,j5,j9,Md102d,dotmapMd102dR2)
	#call replace(i9,j1/2+j2/2-j4/2+j5/2-j8+j9,j,j1,j2,j4,j5,j8,j9,Md102d,dotmapMd102dR3)
	if (count(Md102d,1)) Multiply replace_(Md102d,Md51,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd51 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared102()
* Topology: 0-1 1-2 1-2 2-6 1-2 1-6 1-2 6-9
* Dots: p0.p4,p0.p6,p3.p4,p3.p6,p0.p1,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md102*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,23
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n12,$n10,$n11,$n8,$n1,$n5,$n6,$n3,$n4,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n12,$n7,$n11,$n4,$n5,$n1,$n3,$n6,$n2)
	#call hash(2,$n14,$n13,$n9,$n7,$n10,$n10,$n8,$n8,$n2,$n5,$n6,$n3,$n1,$n4)
	#call hash(3,$n13,$n13,$n9,$n7,$n12,$n9,$n11,$n7,$n1,$n5,$n2,$n3,$n6,$n4)
	#call hash(4,$n14,$n13,$n10,$n8,$n9,$n9,$n7,$n7,$n4,$n5,$n2,$n3,$n1,$n6)
	#call hash(5,$n14,$n14,$n10,$n8,$n10,$n12,$n8,$n11,$n2,$n5,$n1,$n3,$n4,$n6)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n14,$n12,$n11,$n10,$n10,$n8,$n8,$n2,$n5,$n6,$n3,$n4,$n1)
	#call hash(7,$n13,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n4,$n5,$n2,$n3,$n6,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(9,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
if (($n13==0)&&($n14==0));
	#call hash(10,$n13,$n13,$n9,$n7,$n12,$n10,$n11,$n8,$n1,$n5,$n6,$n3,$n2,$n4)
	#call hash(11,$n14,$n14,$n10,$n8,$n9,$n12,$n7,$n11,$n4,$n5,$n1,$n3,$n2,$n6)
endif;
if (($n14==0));
	#call hash(12,$n14,$n13,$n9,$n7,$n10,$n12,$n8,$n11,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(14,$n13,$n14,$n12,$n11,$n9,$n10,$n7,$n8,$n4,$n5,$n6,$n3,$n2,$n1)
if (($n13==0));
	#call hash(15,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(16,$n14,$n13,$n12,$n11,$n12,$n9,$n11,$n7,$n1,$n5,$n4,$n3,$n6,$n2)
	#call hash(17,$n14,$n13,$n10,$n8,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n1,$n6)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(18,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
	#call hash(19,$n14,$n13,$n9,$n7,$n10,$n12,$n8,$n11,$n2,$n5,$n1,$n3,$n6,$n4)
endif;
if (($n7==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(20,$n14,$n13,$n12,$n11,$n10,$n12,$n8,$n11,$n6,$n5,$n1,$n3,$n4,$n2)
	#call hash(21,$n14,$n13,$n9,$n7,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n1,$n4)
endif;
if (($n9==0)&&($n13==0)&&($n7==0));
	#call hash(22,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
	#call hash(23,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n1,$n5,$n2,$n3,$n4,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,23
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i4,i4,i6,i6,i1,i7,i8,i8,i11,i9,i10,i10,i12);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i6,i4,i1,i6,i4,i7,i11,i8,i7,i9,i12,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i2,i1,i4,i6,i6,i2,i7,i8,i9,i10,i11,i7,i12,i9);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i2,i6,i4,i2,i6,i1,i8,i11,i10,i12,i11,i7,i12,i9,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i6,i2,i1,i4,i2,i6,i4,i8,i7,i10,i9,i11,i8,i12,i10);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i2,i4,i4,i1,i6,i2,i7,i11,i9,i12,i11,i8,i12,i10,i13,i14);
elseif ($bestiso == 6); Multiply replace_(i2,i4,i4,i6,i6,i2,i7,i8,i9,i10,i13,i14);
elseif ($bestiso == 7); Multiply replace_(i2,i6,i4,i2,i6,i4,i8,i7,i10,i9,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 9); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 10); Multiply replace_(i1,i4,i4,i6,i6,i1,i7,i8,i8,i11,i9,i10,i10,i12,i11,i7,i12,i9,i14,i13);
elseif ($bestiso == 11); Multiply replace_(i1,i6,i4,i1,i6,i4,i7,i11,i8,i7,i9,i12,i10,i9,i11,i8,i12,i10,i13,i14);
elseif ($bestiso == 12); Multiply replace_(i1,i4,i4,i1,i7,i11,i9,i12,i11,i7,i12,i9);
elseif ($bestiso == 14); Multiply replace_(i4,i6,i6,i4,i7,i8,i8,i7,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 15); Multiply replace_(i1,i6,i6,i1,i8,i11,i10,i12,i11,i8,i12,i10);
elseif ($bestiso == 16); Multiply replace_(i1,i2,i2,i6,i6,i1,i8,i11,i10,i12);
elseif ($bestiso == 17); Multiply replace_(i1,i6,i2,i1,i6,i2,i11,i8,i12,i10);
elseif ($bestiso == 18); Multiply replace_(i2,i6,i6,i2);
elseif ($bestiso == 19); Multiply replace_(i1,i4,i2,i6,i4,i1,i6,i2,i7,i11,i9,i12,i11,i7,i12,i9);
elseif ($bestiso == 20); Multiply replace_(i1,i2,i2,i4,i4,i1,i7,i11,i9,i12);
elseif ($bestiso == 21); Multiply replace_(i1,i4,i2,i1,i4,i2,i11,i7,i12,i9);
elseif ($bestiso == 22); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 23); Multiply replace_(i1,i6,i2,i4,i4,i2,i6,i1,i8,i11,i10,i12,i11,i8,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso23>,$bestiso,$bestisov;
.sort:Zd102 automorphism;

#call CheckRemovedPropagators(d102,6,1,3,1,2,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d102;
#endif
#endprocedure

#procedure Reduced102()
	#call Prepared102()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd102'
		#call MtoZ(Md102,Zd102,i,14)
		#call Reduce(d102)
		#call ZtoM(Zd102,Md102,i,14)
		#call Prepared102()
#else
		#if `USETURBO'
			#call TurboMd102()
		#endif
		#call insertionS(Md102,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md102b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond102()
#endif
	#endif
#endprocedure
*--#] reduce-d102 : 
*--#[ reduce-d101 :
#procedure Insertiond101()
* merge propagators with same momentum, and repeated dots
	if (count(Md101b,1)) Multiply replace_(Md101b,Md101c,i15,i6,i16,i7,i17,i8,i18,i9,i19,i15);

* rewrite insertion dots
	if (count(Md101c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md101c,dotmapMd101cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md101c,dotmapMd101cR2)
	#call replace(i12,-j6-j8,j,j6,j8,Md101c,dotmapMd101cR3)
	#call replace(i13,-j7-j9,j,j7,j9,Md101c,dotmapMd101cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md101c,dotmapMd101cR5)
	#call replace(i15,-j1/2-j3/2-j4/2+j5/2-j6-j7-j8-j9,j,j1,j3,j4,j5,j6,j7,j8,j9,Md101c,dotmapMd101cR6)
	if (count(Md101c,1)) Multiply replace_(Md101c,Md101d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p2,p1.p2,p2.p5 and change topology to d36
	if (count(Md101d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5,i6,j7);
	#call replace(i7,-`Q2'/2-j1/2+j3/2-j6-j7,j,j1,j3,j6,j7,Md101d,dotmapMd101dR1)
	#call replace(i8,-j7-j8,j,j7,j8,Md101d,dotmapMd101dR2)
	#call replace(i9,`Q2'/2+j2/2-j3/2-j4/2+j5/2+j6+j7+j9,j,j2,j3,j4,j5,j6,j7,j9,Md101d,dotmapMd101dR3)
	if (count(Md101d,1)) Multiply replace_(Md101d,Md36,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd36 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared101()
* Topology: 0-4 2-4 2-4 1-4 1-2 1-2 1-2 1-9
* Dots: p0.p4,p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md101*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n10,$n8,$n8,$n4,$n6,$n5,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n5,$n4,$n6,$n3,$n1,$n2)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n14,$n12,$n11,$n10,$n10,$n8,$n8,$n4,$n6,$n5,$n3,$n2,$n1)
	#call hash(3,$n13,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n5,$n4,$n6,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(5,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n2,$n1)
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n7==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n13==0)&&($n7==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i6,i6,i4,i7,i8,i9,i10);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i4,i6,i5,i4,i6,i5,i8,i7,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i6,i6,i4,i7,i8,i9,i10,i13,i14);
elseif ($bestiso == 3); Multiply replace_(i4,i6,i5,i4,i6,i5,i8,i7,i10,i9,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 7); Multiply replace_(i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i1,i5,i6,i6,i5);
elseif ($bestiso == 9); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 10); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4);
elseif ($bestiso == 11); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd101 automorphism;

#call CheckRemovedPropagators(d101,6,0,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d101;
#endif
#endprocedure

#procedure Reduced101()
	#call Prepared101()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd101'
		#call MtoZ(Md101,Zd101,i,14)
		#call Reduce(d101)
		#call ZtoM(Zd101,Md101,i,14)
		#call Prepared101()
#else
		#if `USETURBO'
			#call TurboMd101()
		#endif
		#call insertionS(Md101,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md101b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond101()
#endif
	#endif
#endprocedure
*--#] reduce-d101 : 
*--#[ reduce-d100 :
#procedure Insertiond100()
* merge propagators with same momentum, and repeated dots
	if (count(Md100b,1)) Multiply replace_(Md100b,Md100c,i14,i6,i15,i7,i16,i8,i17,i9,i18,i14,i19,i15);

* rewrite insertion dots
	if (count(Md100c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'-j6+j7+j8,j,j6,j7,j8,Md100c,dotmapMd100cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2+j5/2-j7-j8,j,j1,j2,j5,j7,j8,Md100c,dotmapMd100cR2)
	#call replace(i12,j3/2-j4/2+j5/2-j7-j9,j,j3,j4,j5,j7,j9,Md100c,dotmapMd100cR3)
	#call replace(i13,-`Q2'/2+j1/2-j2/2-j3/2+j4/2-j6+j7+j9,j,j1,j2,j3,j4,j6,j7,j9,Md100c,dotmapMd100cR4)
	#call replace(i14,`Q2'/2-j1/2+j2/2+j5/2+j6-j7-j8-j9,j,j1,j2,j5,j6,j7,j8,j9,Md100c,dotmapMd100cR5)
	#call replace(i15,-j3/2-j4/2+j5/2,j,j3,j4,j5,Md100c,dotmapMd100cR6)
	if (count(Md100c,1)) Multiply replace_(Md100c,Md100d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p4,p0.p1,p1.p2 and change topology to d41
	if (count(Md100d,1)) Multiply replace_(i1,j4,i2,j2,i3,j1,i4,j3,i5,j5,i6,j6,i7,j8,i9,j9);
	#call replace(i8,`Q2'+j6+j7-j8,j,j6,j7,j8,Md100d,dotmapMd100dR1)
	if (count(Md100d,1)) Multiply replace_(Md100d,Md41,<j1,i1>,...,<j5,i5>,j6,i6,j7,i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd41 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared100()
* Topology: 0-3 2-3 2-3 2-3 1-2 1-2 1-3 2-9
* Dots: p0.p3,p0.p4,p0.p5,p3.p4,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md100*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n10==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n13,$n14,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
if (($n14==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n14,$n10,$n12,$n7,$n13,$n9,$n8,$n11,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
if (($n13==0));
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n10,$n13,$n12,$n7,$n14,$n8,$n9,$n11,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n7==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(6,$n14,$n13,$n12,$n11,$n13,$n9,$n8,$n11,$n6,$n5,$n4,$n1,$n3,$n2)
	#call hash(7,$n14,$n13,$n12,$n11,$n14,$n8,$n9,$n11,$n6,$n4,$n5,$n1,$n3,$n2)
	#call hash(8,$n14,$n10,$n12,$n7,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n1,$n3)
	#call hash(9,$n10,$n13,$n12,$n7,$n10,$n8,$n9,$n7,$n6,$n4,$n5,$n2,$n1,$n3)
endif;
if (($n10==0)&&($n12==0)&&($n7==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
	#call hash(11,$n13,$n14,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n4,$n5,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i8,i9,i9,i8);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4,i8,i9,i9,i8,i13,i14,i14,i13);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i3,i1,i7,i11,i10,i13,i11,i7,i13,i10);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i7,i11,i8,i9,i9,i8,i10,i14,i11,i7,i14,i10);
elseif ($bestiso == 6); Multiply replace_(i1,i2,i2,i3,i3,i1,i7,i11,i10,i13);
elseif ($bestiso == 7); Multiply replace_(i1,i2,i2,i3,i3,i1,i4,i5,i5,i4,i7,i11,i8,i9,i9,i8,i10,i14);
elseif ($bestiso == 8); Multiply replace_(i1,i3,i2,i1,i3,i2,i11,i7,i13,i10);
elseif ($bestiso == 9); Multiply replace_(i1,i3,i2,i1,i3,i2,i4,i5,i5,i4,i8,i9,i9,i8,i11,i7,i14,i10);
elseif ($bestiso == 10); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 11); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4,i8,i9,i9,i8,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd100 automorphism;

#call CheckRemovedPropagators(d100,6,1,6,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d100;
#endif
#endprocedure

#procedure Reduced100()
	#call Prepared100()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd100'
		#call MtoZ(Md100,Zd100,i,14)
		#call Reduce(d100)
		#call ZtoM(Zd100,Md100,i,14)
		#call Prepared100()
#else
		#if `USETURBO'
			#call TurboMd100()
		#endif
		#call insertionS(Md100,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md100b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond100()
#endif
	#endif
#endprocedure
*--#] reduce-d100 : 
*--#[ reduce-d99 :
#procedure Insertiond99()
* merge propagators with same momentum, and repeated dots
	if (count(Md99b,1)) Multiply replace_(Md99b,Md99c,i14,i6,i15,i7,i16,i8,i17,i9,i18,i14,i19,i15);

* rewrite insertion dots
	if (count(Md99c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'-j7-j8,j,j7,j8,Md99c,dotmapMd99cR1)
	#call replace(i11,-`Q2'/2+j1/2+j2/2-j5/2+j6+j7+j8,j,j1,j2,j5,j6,j7,j8,Md99c,dotmapMd99cR2)
	#call replace(i12,`Q2'/2-j1/2-j3/2+j4/2-j8,j,j1,j3,j4,j8,Md99c,dotmapMd99cR3)
	#call replace(i13,`Q2'/2-j1/2+j3/2-j4/2-j7,j,j1,j3,j4,j7,Md99c,dotmapMd99cR4)
	#call replace(i14,`Q2'/2-j1/2-j2/2+j5/2-j7-j8-j9,j,j1,j2,j5,j7,j8,j9,Md99c,dotmapMd99cR5)
	#call replace(i15,-`Q2'/2+j1/2-j3/2-j4/2+j7+j8,j,j1,j3,j4,j7,j8,Md99c,dotmapMd99cR6)
	if (count(Md99c,1)) Multiply replace_(Md99c,Md99d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p2,p1.p2,p2.p3 and change topology to d49
	if (count(Md99d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j7,i7,j6,i9,j9);
	#call replace(i8,`Q2'/2-j1/2-j2/2+j5/2-j6-j7+j8,j,j1,j2,j5,j6,j7,j8,Md99d,dotmapMd99dR1)
	if (count(Md99d,1)) Multiply replace_(Md99d,Md49,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,-i8,j9,i9);
	#redefine HASTOPOd49 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared99()
* Topology: 0-3 3-5 1-3 1-5 3-5 1-5 1-3 5-9
* Dots: p0.p2,p0.p3,p0.p5,p2.p3,p0.p1,p1.p2,p1.p3,p1.p5
* Apply automorphisms
if (match(Md99*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,15
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n7,$n8,$n8,$n5,$n2,$n1,$n6,$n3,$n4)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n9,$n3,$n6,$n1,$n2,$n5,$n4)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n12,$n13,$n13,$n11,$n10,$n7,$n8,$n8,$n5,$n2,$n4,$n6,$n3,$n1)
	#call hash(3,$n14,$n12,$n14,$n11,$n10,$n9,$n7,$n9,$n3,$n6,$n4,$n2,$n5,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n3,$n1,$n5,$n2,$n4)
endif;
if (($n10==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(6,$n13,$n14,$n12,$n11,$n10,$n8,$n9,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n5,$n6,$n1,$n2,$n3,$n4)
endif;
if (($n9==0)&&($n14==0));
	#call hash(5,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(9,$n14,$n12,$n13,$n11,$n10,$n9,$n7,$n8,$n5,$n6,$n4,$n2,$n3,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n7,$n8,$n9,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
if (($n8==0)&&($n10==0)&&($n13==0));
	#call hash(11,$n12,$n13,$n14,$n11,$n10,$n7,$n8,$n9,$n3,$n2,$n4,$n6,$n5,$n1)
endif;
if (($n7==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(12,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n1,$n3,$n6,$n4)
	#call hash(13,$n14,$n13,$n12,$n11,$n10,$n8,$n9,$n7,$n2,$n3,$n1,$n5,$n6,$n4)
endif;
if (($n10==0)&&($n12==0)&&($n7==0));
	#call hash(14,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
	#call hash(15,$n13,$n14,$n12,$n11,$n10,$n8,$n9,$n7,$n2,$n3,$n4,$n5,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i1,i4,i2,i3,i3,i6,i4,i1,i5,i2,i6,i5,i7,i8,i9,i7);
elseif ($bestiso == 1); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i1,i4,i2,i5,i3,i2,i4,i1,i5,i6,i6,i3,i7,i9,i8,i7);
elseif ($bestiso == 2); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i2,i3,i3,i6,i5,i2,i6,i5,i7,i8,i9,i7,i12,i13,i14,i12);
elseif ($bestiso == 3); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i2,i5,i3,i2,i5,i6,i6,i3,i7,i9,i8,i7,i12,i14,i13,i12);
elseif ($bestiso == 4); Multiply replace_(i1,i4,i3,i5,i4,i1,i5,i3,i8,i9,i9,i8);
elseif ($bestiso == 6); Multiply replace_(i3,i5,i5,i3,i8,i9,i9,i8,i13,i14,i14,i13);
elseif ($bestiso == 7); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 8); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i5,i7,i8,i8,i7);
elseif ($bestiso == 9); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i2,i3,i3,i2,i5,i6,i6,i5,i7,i8,i8,i7,i12,i13,i13,i12);
elseif ($bestiso == 10); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i7,i9,i9,i7);
elseif ($bestiso == 11); Multiply sign_($n7+$n8+$n9+$n12+$n13+$n14)*replace_(i2,i5,i3,i6,i5,i2,i6,i3,i7,i9,i9,i7,i12,i14,i14,i12);
elseif ($bestiso == 12); Multiply replace_(i1,i4,i2,i6,i4,i1,i6,i2);
elseif ($bestiso == 13); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i1,i5,i3,i6,i2,i8,i9,i9,i8);
elseif ($bestiso == 14); Multiply replace_(i2,i6,i6,i2);
elseif ($bestiso == 15); Multiply replace_(i2,i6,i3,i5,i5,i3,i6,i2,i8,i9,i9,i8,i13,i14,i14,i13);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd99 automorphism;

#call CheckRemovedPropagators(d99,6,0,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d99;
#endif
#endprocedure

#procedure Reduced99()
	#call Prepared99()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd99'
		#call MtoZ(Md99,Zd99,i,14)
		#call Reduce(d99)
		#call ZtoM(Zd99,Md99,i,14)
		#call Prepared99()
#else
		#if `USETURBO'
			#call TurboMd99()
		#endif
		#call insertionS(Md99,i1,i4,i11,i12,i13,i14,i1,`Q2',i2,i3,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md99b,1)) Multiply replace_(<i5,i4>,...,<i20,i19>);
		#call Insertiond99()
#endif
	#endif
#endprocedure
*--#] reduce-d99 : 
*--#[ reduce-d98 :
#procedure Insertiond98()
* merge propagators with same momentum, and repeated dots
	if (count(Md98b,1)) Multiply replace_(Md98b,Md98c);

* rewrite insertion dots
	if (count(Md98c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j1/2-j4/2,j,j1,j4,Md98c,dotmapMd98cR1)
	#call replace(i7,-`Q2'/2+j1/2+j4/2,j,j1,j4,Md98c,dotmapMd98cR2)
	#call replace(i8,-`Q2'/2+j1/2+j3/2-j5/2,j,j1,j3,j5,Md98c,dotmapMd98cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md98c,dotmapMd98cR4)
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md98c,dotmapMd98cR5)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md98c,dotmapMd98cR6)
	if (count(Md98c,1)) Multiply replace_(Md98c,Md98d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d45
	if (count(Md98d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md98d,1)) Multiply replace_(Md98d,Md45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared98()
* Topology: 0-1 2-3* 1-2 1-5 3-5 3-5 2-5 3-9
* Dots: p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md98*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd98 automorphism;

#call CheckRemovedPropagators(d98,6,4,1,2,3,6,4,5)
#if `$DOACTION' == 0
.sort:reduce d98;
#endif
#endprocedure

#procedure Reduced98()
	#call Prepared98()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd98'
		#call MtoZ(Md98,Zd98,i,9)
		#call Reduce(d98)
		#call ZtoM(Zd98,Md98,i,9)
		#call Prepared98()
#else
		#if `USETURBO'
			#call TurboMd98()
		#endif
		#call insertionS(Md98,i4,i5,i7,i8,i9,i4,`Q2',i1,i2,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md98b,1)) Multiply replace_(<i6,i5>,...,<i12,i11>);
		#call Insertiond98()
#endif
	#endif
#endprocedure
*--#] reduce-d98 : 
*--#[ reduce-d97 :
#procedure Insertiond97()
* merge propagators with same momentum, and repeated dots
	if (count(Md97b,1)) Multiply replace_(Md97b,Md97c,i15,i6,i16,i7,i17,i8,i18,i9,i19,i15);

* rewrite insertion dots
	if (count(Md97c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md97c,dotmapMd97cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md97c,dotmapMd97cR2)
	#call replace(i12,-j6-j8,j,j6,j8,Md97c,dotmapMd97cR3)
	#call replace(i13,-j7-j9,j,j7,j9,Md97c,dotmapMd97cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md97c,dotmapMd97cR5)
	#call replace(i15,-`Q2'/2-j3/2-j4/2+j5/2-j6-j7,j,j3,j4,j5,j6,j7,Md97c,dotmapMd97cR6)
	if (count(Md97c,1)) Multiply replace_(Md97c,Md97d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p2,p1.p3 and change topology to d42
	if (count(Md97d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j3,i5,j5,i6,j6,i7,j7);
	#call replace(i8,-j6-j8,j,j6,j8,Md97d,dotmapMd97dR1)
	#call replace(i9,-j7-j9,j,j7,j9,Md97d,dotmapMd97dR2)
	if (count(Md97d,1)) Multiply replace_(Md97d,Md42,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,i8,j9,i9);
	#redefine HASTOPOd42 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared97()
* Topology: 0-4 2-4 2-4 2-4 1-2 1-2 1-2 1-9
* Dots: p0.p4,p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md97*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,71
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n10,$n8,$n8,$n4,$n6,$n5,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n5,$n4,$n6,$n3,$n1,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n10,$n14,$n8,$n8,$n4,$n6,$n5,$n1,$n3,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n13,$n9,$n7,$n7,$n5,$n4,$n6,$n1,$n3,$n2)
	#call hash(4,$n14,$n10,$n12,$n11,$n10,$n9,$n8,$n8,$n4,$n6,$n5,$n2,$n1,$n3)
	#call hash(5,$n9,$n13,$n12,$n11,$n10,$n9,$n7,$n7,$n5,$n4,$n6,$n2,$n1,$n3)
	#call hash(6,$n13,$n13,$n12,$n7,$n10,$n9,$n11,$n7,$n3,$n1,$n2,$n6,$n5,$n4)
	#call hash(7,$n9,$n13,$n12,$n7,$n10,$n9,$n8,$n7,$n1,$n3,$n2,$n6,$n5,$n4)
	#call hash(8,$n13,$n9,$n12,$n7,$n10,$n9,$n11,$n7,$n2,$n1,$n3,$n6,$n5,$n4)
	#call hash(9,$n14,$n9,$n12,$n7,$n10,$n9,$n8,$n7,$n1,$n2,$n3,$n6,$n5,$n4)
	#call hash(10,$n13,$n13,$n12,$n7,$n14,$n9,$n11,$n7,$n3,$n1,$n2,$n5,$n6,$n4)
	#call hash(11,$n14,$n9,$n12,$n7,$n10,$n10,$n8,$n7,$n1,$n2,$n3,$n5,$n6,$n4)
	#call hash(12,$n14,$n14,$n12,$n8,$n10,$n9,$n8,$n11,$n3,$n2,$n1,$n6,$n4,$n5)
	#call hash(13,$n10,$n14,$n12,$n8,$n10,$n9,$n8,$n11,$n2,$n3,$n1,$n6,$n4,$n5)
	#call hash(14,$n10,$n13,$n12,$n8,$n10,$n9,$n8,$n7,$n1,$n3,$n2,$n6,$n4,$n5)
	#call hash(15,$n14,$n10,$n12,$n8,$n10,$n9,$n8,$n7,$n1,$n2,$n3,$n6,$n4,$n5)
	#call hash(16,$n14,$n14,$n12,$n8,$n10,$n13,$n8,$n11,$n3,$n2,$n1,$n4,$n6,$n5)
	#call hash(17,$n10,$n13,$n12,$n8,$n9,$n9,$n8,$n7,$n1,$n3,$n2,$n4,$n6,$n5)
	#call hash(18,$n14,$n13,$n12,$n11,$n10,$n14,$n8,$n11,$n3,$n2,$n1,$n5,$n4,$n6)
	#call hash(19,$n14,$n13,$n12,$n11,$n14,$n9,$n11,$n7,$n3,$n1,$n2,$n5,$n4,$n6)
	#call hash(20,$n14,$n13,$n12,$n11,$n14,$n10,$n11,$n7,$n2,$n1,$n3,$n5,$n4,$n6)
	#call hash(21,$n14,$n13,$n12,$n11,$n10,$n10,$n8,$n7,$n1,$n2,$n3,$n5,$n4,$n6)
	#call hash(22,$n14,$n13,$n12,$n11,$n10,$n13,$n8,$n11,$n3,$n2,$n1,$n4,$n5,$n6)
	#call hash(23,$n14,$n13,$n12,$n11,$n9,$n13,$n8,$n11,$n2,$n3,$n1,$n4,$n5,$n6)
	#call hash(24,$n14,$n13,$n12,$n11,$n13,$n9,$n11,$n7,$n3,$n1,$n2,$n4,$n5,$n6)
	#call hash(25,$n14,$n13,$n12,$n11,$n9,$n9,$n8,$n7,$n1,$n3,$n2,$n4,$n5,$n6)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(26,$n14,$n14,$n12,$n11,$n10,$n9,$n8,$n8,$n4,$n6,$n5,$n2,$n3,$n1)
	#call hash(27,$n13,$n13,$n12,$n11,$n10,$n9,$n7,$n7,$n5,$n4,$n6,$n2,$n3,$n1)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(28,$n14,$n14,$n12,$n11,$n10,$n10,$n8,$n8,$n4,$n6,$n5,$n3,$n2,$n1)
	#call hash(29,$n13,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n5,$n4,$n6,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(30,$n14,$n13,$n12,$n11,$n10,$n13,$n8,$n7,$n5,$n6,$n4,$n1,$n3,$n2)
	#call hash(31,$n14,$n9,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n2,$n1,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(32,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n2,$n3,$n1)
	#call hash(33,$n14,$n13,$n12,$n7,$n10,$n9,$n8,$n11,$n3,$n2,$n1,$n6,$n5,$n4)
	#call hash(34,$n9,$n13,$n12,$n7,$n10,$n9,$n8,$n11,$n2,$n3,$n1,$n6,$n5,$n4)
	#call hash(35,$n14,$n13,$n12,$n7,$n10,$n14,$n8,$n11,$n3,$n2,$n1,$n5,$n6,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(36,$n14,$n13,$n12,$n11,$n14,$n13,$n8,$n7,$n6,$n5,$n4,$n1,$n3,$n2)
	#call hash(37,$n14,$n13,$n12,$n11,$n13,$n14,$n7,$n8,$n6,$n4,$n5,$n1,$n3,$n2)
	#call hash(38,$n10,$n9,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n1,$n3)
	#call hash(39,$n9,$n10,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n4,$n5,$n2,$n1,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n12==0));
	#call hash(40,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
	#call hash(41,$n13,$n14,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n4,$n5,$n2,$n3,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(42,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(43,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
	#call hash(44,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(45,$n13,$n14,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n2,$n1)
if (($n11==0));
	#call hash(46,$n10,$n9,$n12,$n11,$n14,$n13,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
	#call hash(47,$n9,$n10,$n12,$n11,$n13,$n14,$n7,$n8,$n6,$n4,$n5,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(48,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(49,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n14==0));
	#call hash(50,$n14,$n9,$n12,$n11,$n10,$n13,$n8,$n7,$n5,$n6,$n4,$n1,$n2,$n3)
endif;
if (($n8==0)&&($n12==0));
	#call hash(51,$n9,$n13,$n12,$n7,$n10,$n14,$n8,$n11,$n2,$n3,$n1,$n5,$n6,$n4)
endif;
if (($n7==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(52,$n14,$n13,$n12,$n11,$n14,$n9,$n8,$n7,$n4,$n5,$n6,$n1,$n3,$n2)
	#call hash(53,$n10,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n2,$n1,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n7==0));
	#call hash(54,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n2,$n3,$n1)
	#call hash(55,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n7,$n3,$n1,$n2,$n6,$n4,$n5)
	#call hash(56,$n14,$n10,$n12,$n8,$n10,$n9,$n11,$n7,$n2,$n1,$n3,$n6,$n4,$n5)
	#call hash(57,$n14,$n13,$n12,$n8,$n13,$n9,$n11,$n7,$n3,$n1,$n2,$n4,$n6,$n5)
endif;
if (($n12==0)&&($n7==0));
	#call hash(58,$n14,$n10,$n12,$n8,$n13,$n9,$n11,$n7,$n2,$n1,$n3,$n4,$n6,$n5)
endif;
if (($n7==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(59,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n13==0)&&($n7==0));
	#call hash(60,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
if (($n9==0)&&($n11==0)&&($n13==0)&&($n7==0));
	#call hash(61,$n10,$n13,$n12,$n11,$n14,$n9,$n8,$n7,$n4,$n5,$n6,$n1,$n2,$n3)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n13==0)&&($n14==0));
	#call hash(62,$n14,$n10,$n12,$n11,$n10,$n14,$n8,$n8,$n4,$n6,$n5,$n1,$n2,$n3)
	#call hash(63,$n9,$n13,$n12,$n11,$n13,$n9,$n7,$n7,$n5,$n4,$n6,$n1,$n2,$n3)
endif;
if (($n7==0)&&($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(64,$n14,$n10,$n12,$n8,$n10,$n9,$n8,$n7,$n1,$n2,$n3,$n4,$n6,$n5)
	#call hash(65,$n14,$n13,$n12,$n11,$n13,$n9,$n11,$n7,$n2,$n1,$n3,$n4,$n5,$n6)
	#call hash(66,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n2,$n3,$n4,$n5,$n6)
endif;
if (($n8==0)&&($n11==0)&&($n12==0)&&($n7==0));
	#call hash(67,$n13,$n9,$n12,$n7,$n14,$n10,$n11,$n7,$n2,$n1,$n3,$n5,$n6,$n4)
	#call hash(68,$n10,$n14,$n12,$n8,$n9,$n13,$n8,$n11,$n2,$n3,$n1,$n4,$n6,$n5)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(69,$n9,$n13,$n12,$n7,$n10,$n9,$n8,$n7,$n1,$n3,$n2,$n5,$n6,$n4)
	#call hash(70,$n14,$n13,$n12,$n11,$n10,$n14,$n8,$n11,$n2,$n3,$n1,$n5,$n4,$n6)
	#call hash(71,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n1,$n3,$n2,$n5,$n4,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,71
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i6,i6,i4,i7,i8,i9,i10);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i4,i6,i5,i4,i6,i5,i8,i7,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i3,i3,i1,i4,i5,i5,i6,i6,i4,i7,i8,i9,i14);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i3,i3,i1,i4,i6,i5,i4,i6,i5,i8,i7,i10,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i2,i1,i3,i2,i4,i5,i5,i6,i6,i4,i7,i8,i13,i10);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i2,i1,i3,i2,i4,i6,i5,i4,i6,i5,i8,i7,i14,i9);
elseif ($bestiso == 6); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i2,i5,i1,i6,i3,i8,i11,i11,i7,i14,i13);
elseif ($bestiso == 7); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i2,i5,i3,i6,i1,i11,i7,i14,i9);
elseif ($bestiso == 8); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i3,i5,i1,i6,i2,i8,i11,i11,i7,i13,i9,i14,i13);
elseif ($bestiso == 9); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i3,i5,i2,i6,i1,i11,i7,i13,i9);
elseif ($bestiso == 10); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i2,i5,i1,i6,i3,i8,i11,i10,i14,i11,i7,i14,i13);
elseif ($bestiso == 11); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i3,i5,i2,i6,i1,i9,i10,i11,i7,i13,i9);
elseif ($bestiso == 12); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i1,i5,i2,i6,i3,i7,i11,i11,i8,i13,i14);
elseif ($bestiso == 13); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i1,i5,i3,i6,i2,i7,i11,i11,i8,i13,i14,i14,i10);
elseif ($bestiso == 14); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i2,i5,i3,i6,i1,i11,i8,i14,i10);
elseif ($bestiso == 15); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i3,i5,i2,i6,i1,i11,i8,i13,i10);
elseif ($bestiso == 16); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i1,i5,i2,i6,i3,i7,i11,i9,i13,i11,i8,i13,i14);
elseif ($bestiso == 17); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i2,i5,i3,i6,i1,i10,i9,i11,i8,i14,i10);
elseif ($bestiso == 18); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i1,i5,i2,i6,i3,i7,i11,i9,i14);
elseif ($bestiso == 19); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i2,i5,i1,i6,i3,i8,i11,i10,i14);
elseif ($bestiso == 20); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i3,i5,i1,i6,i2,i8,i11,i9,i10,i10,i14);
elseif ($bestiso == 21); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i3,i5,i2,i6,i1,i9,i10);
elseif ($bestiso == 22); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i1,i5,i2,i6,i3,i7,i11,i9,i13);
elseif ($bestiso == 23); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i1,i5,i3,i6,i2,i7,i11,i9,i13,i10,i9);
elseif ($bestiso == 24); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i2,i5,i1,i6,i3,i8,i11,i10,i13);
elseif ($bestiso == 25); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i2,i5,i3,i6,i1,i10,i9);
elseif ($bestiso == 26); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i6,i6,i4,i7,i8,i13,i14);
elseif ($bestiso == 27); Multiply replace_(i2,i3,i3,i2,i4,i6,i5,i4,i6,i5,i8,i7,i14,i13);
elseif ($bestiso == 28); Multiply replace_(i4,i5,i5,i6,i6,i4,i7,i8,i9,i10,i13,i14);
elseif ($bestiso == 29); Multiply replace_(i4,i6,i5,i4,i6,i5,i8,i7,i10,i9,i14,i13);
elseif ($bestiso == 30); Multiply replace_(i1,i2,i2,i3,i3,i1,i5,i6,i6,i5,i9,i13);
elseif ($bestiso == 31); Multiply replace_(i1,i3,i2,i1,i3,i2,i5,i6,i6,i5,i13,i9);
elseif ($bestiso == 32); Multiply replace_(i2,i3,i3,i2,i5,i6,i6,i5);
elseif ($bestiso == 33); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3,i7,i11,i11,i7);
elseif ($bestiso == 34); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i3,i6,i2,i7,i11,i11,i7,i14,i9);
elseif ($bestiso == 35); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i1,i5,i2,i6,i3,i7,i11,i9,i14,i11,i7);
elseif ($bestiso == 36); Multiply replace_(i1,i2,i2,i3,i3,i1,i9,i13,i10,i14);
elseif ($bestiso == 37); Multiply replace_(i1,i2,i2,i3,i3,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i14,i10,i13);
elseif ($bestiso == 38); Multiply replace_(i1,i3,i2,i1,i3,i2,i13,i9,i14,i10);
elseif ($bestiso == 39); Multiply replace_(i1,i3,i2,i1,i3,i2,i4,i5,i5,i4,i7,i8,i8,i7,i13,i10,i14,i9);
elseif ($bestiso == 40); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 41); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4,i7,i8,i8,i7,i13,i14,i14,i13);
elseif ($bestiso == 42); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 43); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 45); Multiply replace_(i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 46); Multiply replace_(i1,i3,i3,i1,i9,i13,i10,i14,i13,i9,i14,i10);
elseif ($bestiso == 47); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i14,i10,i13,i13,i10,i14,i9);
elseif ($bestiso == 48); Multiply replace_(i1,i2,i2,i1,i5,i6,i6,i5);
elseif ($bestiso == 49); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 50); Multiply replace_(i1,i3,i3,i1,i5,i6,i6,i5,i9,i13,i13,i9);
elseif ($bestiso == 51); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i1,i5,i3,i6,i2,i7,i11,i9,i14,i11,i7,i14,i9);
elseif ($bestiso == 52); Multiply replace_(i1,i2,i2,i3,i3,i1,i4,i6,i6,i4,i10,i14);
elseif ($bestiso == 53); Multiply replace_(i1,i3,i2,i1,i3,i2,i4,i6,i6,i4,i14,i10);
elseif ($bestiso == 54); Multiply replace_(i2,i3,i3,i2,i4,i6,i6,i4);
elseif ($bestiso == 55); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i2,i5,i1,i6,i3,i8,i11,i11,i8);
elseif ($bestiso == 56); Multiply replace_(i1,i5,i2,i4,i3,i6,i4,i3,i5,i1,i6,i2,i8,i11,i11,i8,i13,i10);
elseif ($bestiso == 57); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i2,i5,i1,i6,i3,i8,i11,i10,i13,i11,i8);
elseif ($bestiso == 58); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i3,i5,i1,i6,i2,i8,i11,i10,i13,i11,i8,i13,i10);
elseif ($bestiso == 59); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4);
elseif ($bestiso == 60); Multiply replace_(i4,i6,i6,i4);
elseif ($bestiso == 61); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i10,i14,i14,i10);
elseif ($bestiso == 62); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i6,i6,i4,i7,i8,i9,i14,i13,i10);
elseif ($bestiso == 63); Multiply replace_(i1,i3,i3,i1,i4,i6,i5,i4,i6,i5,i8,i7,i10,i13,i14,i9);
elseif ($bestiso == 64); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i3,i5,i2,i6,i1,i11,i8,i13,i10);
elseif ($bestiso == 65); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i1,i6,i2,i8,i11,i10,i13);
elseif ($bestiso == 66); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1);
elseif ($bestiso == 67); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i3,i5,i1,i6,i2,i8,i11,i9,i10,i10,i14,i11,i7,i13,i9,i14,i13);
elseif ($bestiso == 68); Multiply replace_(i1,i5,i2,i6,i3,i4,i4,i1,i5,i3,i6,i2,i7,i11,i9,i13,i10,i9,i11,i8,i13,i14,i14,i10);
elseif ($bestiso == 69); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i2,i5,i3,i6,i1,i11,i7,i14,i9);
elseif ($bestiso == 70); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i1,i5,i3,i6,i2,i7,i11,i9,i14);
elseif ($bestiso == 71); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i2,i5,i3,i6,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso71>,$bestiso,$bestisov;
.sort:Zd97 automorphism;

#call CheckRemovedPropagators(d97,6,0,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d97;
#endif
#endprocedure

#procedure Reduced97()
	#call Prepared97()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd97'
		#call MtoZ(Md97,Zd97,i,14)
		#call Reduce(d97)
		#call ZtoM(Zd97,Md97,i,14)
		#call Prepared97()
#else
		#if `USETURBO'
			#call TurboMd97()
		#endif
		#call insertionS(Md97,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md97b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond97()
#endif
	#endif
#endprocedure
*--#] reduce-d97 : 
*--#[ reduce-d96 :
#procedure Insertiond96()
* merge propagators with same momentum, and repeated dots
	if (count(Md96b,1)) Multiply replace_(Md96b,Md96c,i15,i6,i16,i7,i17,i8,i18,i9,i19,i15);

* rewrite insertion dots
	if (count(Md96c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md96c,dotmapMd96cR1)
	#call replace(i11,`Q2'/2-j1/2-j2/2,j,j1,j2,Md96c,dotmapMd96cR2)
	#call replace(i12,-j6-j8,j,j6,j8,Md96c,dotmapMd96cR3)
	#call replace(i13,-j7-j9,j,j7,j9,Md96c,dotmapMd96cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2,j,j1,j2,Md96c,dotmapMd96cR5)
	#call replace(i15,-j2/2-j3/2-j4/2+j5/2-j8-j9,j,j2,j3,j4,j5,j8,j9,Md96c,dotmapMd96cR6)
	if (count(Md96c,1)) Multiply replace_(Md96c,Md96d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p5,p0.p2,p1.p2,p2.p5 and change topology to d35
	if (count(Md96d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5,i6,j7);
	#call replace(i7,`Q2'/2-j1/2+j3/2-j6-j7,j,j1,j3,j6,j7,Md96d,dotmapMd96dR1)
	#call replace(i8,-j7-j8,j,j7,j8,Md96d,dotmapMd96dR2)
	#call replace(i9,j2/2-j3/2-j4/2+j5/2+j9,j,j2,j3,j4,j5,j9,Md96d,dotmapMd96dR3)
	if (count(Md96d,1)) Multiply replace_(Md96d,Md35,<j1,i1>,...,<j5,i5>,j6,i6,j7,i7,j8,-i8,j9,i9);
	#redefine HASTOPOd35 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared96()
* Topology: 0-4 2-4 2-4 1-4 1-2 1-2 1-2 2-9
* Dots: p0.p4,p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md96*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,11
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n10,$n10,$n8,$n8,$n4,$n6,$n5,$n3,$n1,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n5,$n4,$n6,$n3,$n1,$n2)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(2,$n14,$n14,$n12,$n11,$n10,$n10,$n8,$n8,$n4,$n6,$n5,$n3,$n2,$n1)
	#call hash(3,$n13,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n5,$n4,$n6,$n3,$n2,$n1)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(4,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(5,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
	#call hash(6,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n13,$n14,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n2,$n1)
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(8,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n1,$n2)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(9,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
if (($n7==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(10,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
if (($n9==0)&&($n13==0)&&($n7==0));
	#call hash(11,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i6,i6,i4,i7,i8,i9,i10);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i4,i6,i5,i4,i6,i5,i8,i7,i10,i9);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i6,i6,i4,i7,i8,i9,i10,i13,i14);
elseif ($bestiso == 3); Multiply replace_(i4,i6,i5,i4,i6,i5,i8,i7,i10,i9,i14,i13);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 7); Multiply replace_(i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i1,i5,i6,i6,i5);
elseif ($bestiso == 9); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 10); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4);
elseif ($bestiso == 11); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd96 automorphism;

#call CheckRemovedPropagators(d96,6,1,3,1,2,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d96;
#endif
#endprocedure

#procedure Reduced96()
	#call Prepared96()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd96'
		#call MtoZ(Md96,Zd96,i,14)
		#call Reduce(d96)
		#call ZtoM(Zd96,Md96,i,14)
		#call Prepared96()
#else
		#if `USETURBO'
			#call TurboMd96()
		#endif
		#call insertionS(Md96,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md96b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond96()
#endif
	#endif
#endprocedure
*--#] reduce-d96 : 
*--#[ reduce-d95 :
#procedure Insertiond95()
* merge propagators with same momentum, and repeated dots
	if (count(Md95b,1)) Multiply replace_(Md95b,Md95c,i15,i6,i16,i7,i17,i8,i18,i9,i19,i15);

* rewrite insertion dots
	if (count(Md95c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,-`Q2'-j6-j7,j,j6,j7,Md95c,dotmapMd95cR1)
	#call replace(i11,-`Q2'/2-j2/2+j4/2-j8-j9,j,j2,j4,j8,j9,Md95c,dotmapMd95cR2)
	#call replace(i12,`Q2'/2-j1/2-j3/2+j5/2+j7,j,j1,j3,j5,j7,Md95c,dotmapMd95cR3)
	#call replace(i13,`Q2'/2-j1/2+j3/2-j5/2+j6,j,j1,j3,j5,j6,Md95c,dotmapMd95cR4)
	#call replace(i14,`Q2'/2+j2/2-j4/2,j,j2,j4,Md95c,dotmapMd95cR5)
	#call replace(i15,-`Q2'/2+j1/2-j3/2-j5/2-j6-j7,j,j1,j3,j5,j6,j7,Md95c,dotmapMd95cR6)
	if (count(Md95c,1)) Multiply replace_(Md95c,Md95d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p2,p0.p3,p1.p2,p1.p3 and change topology to d34
	if (count(Md95d,1)) Multiply replace_(i1,j2,i2,j1,i3,j3,i4,j4,i5,j5,i6,j7,i8,j9);
	#call replace(i7,-`Q2'-j6-j7,j,j6,j7,Md95d,dotmapMd95dR1)
	#call replace(i9,-`Q2'/2-j1/2+j4/2-j8-j9,j,j1,j4,j8,j9,Md95d,dotmapMd95dR2)
	if (count(Md95d,1)) Multiply replace_(Md95d,Md34,<j1,i1>,...,<j5,i5>,j6,-i6,j7,-i7,j8,-i8,j9,-i9);
	#redefine HASTOPOd34 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared95()
* Topology: 0-3 1-3 1-3 1-6 1-3 1-6 1-3 6-9
* Dots: p0.p4,p0.p6,p3.p4,p3.p6,p0.p1,p1.p3,p1.p4,p1.p6
* Apply automorphisms
if (match(Md95*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,47
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n12,$n10,$n11,$n8,$n1,$n5,$n6,$n3,$n4,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n8,$n1,$n3,$n6,$n5,$n4,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n9,$n12,$n7,$n11,$n4,$n5,$n1,$n3,$n6,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n11,$n4,$n3,$n1,$n5,$n6,$n2)
	#call hash(4,$n14,$n13,$n9,$n7,$n10,$n10,$n8,$n8,$n2,$n5,$n6,$n3,$n1,$n4)
	#call hash(5,$n14,$n13,$n12,$n7,$n10,$n9,$n8,$n8,$n2,$n3,$n6,$n5,$n1,$n4)
	#call hash(6,$n13,$n13,$n9,$n7,$n12,$n9,$n11,$n7,$n1,$n5,$n2,$n3,$n6,$n4)
	#call hash(7,$n13,$n13,$n12,$n7,$n10,$n9,$n11,$n7,$n1,$n3,$n2,$n5,$n6,$n4)
	#call hash(8,$n14,$n13,$n10,$n8,$n9,$n9,$n7,$n7,$n4,$n5,$n2,$n3,$n1,$n6)
	#call hash(9,$n14,$n13,$n12,$n8,$n10,$n9,$n7,$n7,$n4,$n3,$n2,$n5,$n1,$n6)
	#call hash(10,$n14,$n14,$n10,$n8,$n10,$n12,$n8,$n11,$n2,$n5,$n1,$n3,$n4,$n6)
	#call hash(11,$n14,$n14,$n12,$n8,$n10,$n9,$n8,$n11,$n2,$n3,$n1,$n5,$n4,$n6)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(12,$n14,$n14,$n12,$n11,$n10,$n9,$n8,$n8,$n2,$n3,$n6,$n5,$n4,$n1)
	#call hash(13,$n13,$n13,$n12,$n11,$n10,$n9,$n7,$n7,$n4,$n3,$n2,$n5,$n6,$n1)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(14,$n14,$n14,$n12,$n11,$n10,$n10,$n8,$n8,$n2,$n5,$n6,$n3,$n4,$n1)
	#call hash(15,$n13,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n4,$n5,$n2,$n3,$n6,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(16,$n14,$n13,$n12,$n11,$n10,$n9,$n11,$n7,$n1,$n3,$n4,$n5,$n6,$n2)
	#call hash(17,$n14,$n13,$n12,$n8,$n10,$n9,$n8,$n7,$n2,$n3,$n4,$n5,$n1,$n6)
endif;
if (($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(18,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n3,$n4,$n5,$n6,$n1)
	#call hash(19,$n14,$n13,$n12,$n7,$n10,$n9,$n8,$n11,$n2,$n3,$n1,$n5,$n6,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(20,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n1,$n2)
	#call hash(21,$n14,$n13,$n12,$n11,$n10,$n9,$n7,$n8,$n4,$n3,$n6,$n5,$n1,$n2)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(22,$n13,$n13,$n12,$n7,$n10,$n9,$n11,$n8,$n1,$n3,$n6,$n5,$n2,$n4)
	#call hash(23,$n14,$n14,$n12,$n8,$n10,$n9,$n7,$n11,$n4,$n3,$n1,$n5,$n2,$n6)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(24,$n14,$n13,$n12,$n7,$n10,$n9,$n8,$n11,$n6,$n3,$n1,$n5,$n2,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n12==0));
	#call hash(25,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
	#call hash(26,$n13,$n14,$n12,$n11,$n10,$n9,$n7,$n8,$n4,$n3,$n6,$n5,$n2,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0));
	#call hash(27,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n7,$n1,$n3,$n4,$n5,$n2,$n6)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(28,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(29,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n4,$n5,$n6,$n3,$n1,$n2)
endif;
if (($n13==0)&&($n14==0));
	#call hash(30,$n13,$n13,$n9,$n7,$n12,$n10,$n11,$n8,$n1,$n5,$n6,$n3,$n2,$n4)
	#call hash(31,$n14,$n14,$n10,$n8,$n9,$n12,$n7,$n11,$n4,$n5,$n1,$n3,$n2,$n6)
endif;
if (($n14==0));
	#call hash(32,$n14,$n13,$n9,$n7,$n10,$n12,$n8,$n11,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
	#call hash(33,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(34,$n13,$n14,$n12,$n11,$n9,$n10,$n7,$n8,$n4,$n5,$n6,$n3,$n2,$n1)
if (($n13==0));
	#call hash(35,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(36,$n14,$n13,$n12,$n11,$n12,$n9,$n11,$n7,$n1,$n5,$n4,$n3,$n6,$n2)
	#call hash(37,$n14,$n13,$n10,$n8,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n1,$n6)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(38,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
	#call hash(39,$n14,$n13,$n9,$n7,$n10,$n12,$n8,$n11,$n2,$n5,$n1,$n3,$n6,$n4)
endif;
if (($n7==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(40,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n11,$n6,$n3,$n1,$n5,$n4,$n2)
	#call hash(41,$n14,$n13,$n12,$n7,$n10,$n9,$n8,$n7,$n6,$n3,$n2,$n5,$n1,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n7==0));
	#call hash(42,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n3,$n2,$n5,$n4,$n1)
	#call hash(43,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n7,$n1,$n3,$n2,$n5,$n4,$n6)
endif;
if (($n7==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(44,$n14,$n13,$n12,$n11,$n10,$n12,$n8,$n11,$n6,$n5,$n1,$n3,$n4,$n2)
	#call hash(45,$n14,$n13,$n9,$n7,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n1,$n4)
endif;
if (($n9==0)&&($n13==0)&&($n7==0));
	#call hash(46,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
	#call hash(47,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n1,$n5,$n2,$n3,$n4,$n6)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,47
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i4,i4,i6,i6,i1,i7,i8,i8,i11,i9,i10,i10,i12);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i4,i3,i5,i4,i6,i5,i3,i6,i1,i7,i8,i8,i11);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i6,i4,i1,i6,i4,i7,i11,i8,i7,i9,i12,i10,i9);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i6,i3,i5,i4,i1,i5,i3,i6,i4,i7,i11,i8,i7);
elseif ($bestiso == 4); Multiply replace_(i1,i4,i2,i1,i4,i6,i6,i2,i7,i8,i9,i10,i11,i7,i12,i9);
elseif ($bestiso == 5); Multiply replace_(i1,i4,i2,i1,i3,i5,i4,i6,i5,i3,i6,i2,i7,i8,i11,i7);
elseif ($bestiso == 6); Multiply replace_(i1,i4,i2,i6,i4,i2,i6,i1,i8,i11,i10,i12,i11,i7,i12,i9,i14,i13);
elseif ($bestiso == 7); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i2,i5,i3,i6,i1,i8,i11,i11,i7,i14,i13);
elseif ($bestiso == 8); Multiply replace_(i1,i6,i2,i1,i4,i2,i6,i4,i8,i7,i10,i9,i11,i8,i12,i10);
elseif ($bestiso == 9); Multiply replace_(i1,i6,i2,i1,i3,i5,i4,i2,i5,i3,i6,i4,i8,i7,i11,i8);
elseif ($bestiso == 10); Multiply replace_(i1,i6,i2,i4,i4,i1,i6,i2,i7,i11,i9,i12,i11,i8,i12,i10,i13,i14);
elseif ($bestiso == 11); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i1,i5,i3,i6,i2,i7,i11,i11,i8,i13,i14);
elseif ($bestiso == 12); Multiply replace_(i2,i4,i3,i5,i4,i6,i5,i3,i6,i2,i7,i8,i13,i14);
elseif ($bestiso == 13); Multiply replace_(i2,i6,i3,i5,i4,i2,i5,i3,i6,i4,i8,i7,i14,i13);
elseif ($bestiso == 14); Multiply replace_(i2,i4,i4,i6,i6,i2,i7,i8,i9,i10,i13,i14);
elseif ($bestiso == 15); Multiply replace_(i2,i6,i4,i2,i6,i4,i8,i7,i10,i9,i14,i13);
elseif ($bestiso == 16); Multiply replace_(i1,i2,i2,i6,i3,i5,i5,i3,i6,i1,i8,i11);
elseif ($bestiso == 17); Multiply replace_(i1,i6,i2,i1,i3,i5,i5,i3,i6,i2,i11,i8);
elseif ($bestiso == 18); Multiply replace_(i2,i6,i3,i5,i5,i3,i6,i2);
elseif ($bestiso == 19); Multiply replace_(i1,i4,i2,i6,i3,i5,i4,i1,i5,i3,i6,i2,i7,i11,i11,i7);
elseif ($bestiso == 20); Multiply replace_(i1,i2,i2,i1,i3,i5,i5,i3);
elseif ($bestiso == 21); Multiply replace_(i1,i2,i2,i1,i3,i5,i4,i6,i5,i3,i6,i4,i7,i8,i8,i7);
elseif ($bestiso == 22); Multiply replace_(i1,i4,i3,i5,i4,i6,i5,i3,i6,i1,i7,i8,i8,i11,i11,i7,i14,i13);
elseif ($bestiso == 23); Multiply replace_(i1,i6,i3,i5,i4,i1,i5,i3,i6,i4,i7,i11,i8,i7,i11,i8,i13,i14);
elseif ($bestiso == 24); Multiply replace_(i1,i4,i3,i5,i4,i1,i5,i3,i7,i11,i11,i7);
elseif ($bestiso == 25); Multiply replace_(i3,i5,i5,i3);
elseif ($bestiso == 26); Multiply replace_(i3,i5,i4,i6,i5,i3,i6,i4,i7,i8,i8,i7,i13,i14,i14,i13);
elseif ($bestiso == 27); Multiply replace_(i1,i6,i3,i5,i5,i3,i6,i1,i8,i11,i11,i8);
elseif ($bestiso == 28); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 29); Multiply replace_(i1,i2,i2,i1,i4,i6,i6,i4,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 30); Multiply replace_(i1,i4,i4,i6,i6,i1,i7,i8,i8,i11,i9,i10,i10,i12,i11,i7,i12,i9,i14,i13);
elseif ($bestiso == 31); Multiply replace_(i1,i6,i4,i1,i6,i4,i7,i11,i8,i7,i9,i12,i10,i9,i11,i8,i12,i10,i13,i14);
elseif ($bestiso == 32); Multiply replace_(i1,i4,i4,i1,i7,i11,i9,i12,i11,i7,i12,i9);
elseif ($bestiso == 34); Multiply replace_(i4,i6,i6,i4,i7,i8,i8,i7,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 35); Multiply replace_(i1,i6,i6,i1,i8,i11,i10,i12,i11,i8,i12,i10);
elseif ($bestiso == 36); Multiply replace_(i1,i2,i2,i6,i6,i1,i8,i11,i10,i12);
elseif ($bestiso == 37); Multiply replace_(i1,i6,i2,i1,i6,i2,i11,i8,i12,i10);
elseif ($bestiso == 38); Multiply replace_(i2,i6,i6,i2);
elseif ($bestiso == 39); Multiply replace_(i1,i4,i2,i6,i4,i1,i6,i2,i7,i11,i9,i12,i11,i7,i12,i9);
elseif ($bestiso == 40); Multiply replace_(i1,i2,i2,i4,i3,i5,i4,i1,i5,i3,i7,i11);
elseif ($bestiso == 41); Multiply replace_(i1,i4,i2,i1,i3,i5,i4,i2,i5,i3,i11,i7);
elseif ($bestiso == 42); Multiply replace_(i2,i4,i3,i5,i4,i2,i5,i3);
elseif ($bestiso == 43); Multiply replace_(i1,i6,i2,i4,i3,i5,i4,i2,i5,i3,i6,i1,i8,i11,i11,i8);
elseif ($bestiso == 44); Multiply replace_(i1,i2,i2,i4,i4,i1,i7,i11,i9,i12);
elseif ($bestiso == 45); Multiply replace_(i1,i4,i2,i1,i4,i2,i11,i7,i12,i9);
elseif ($bestiso == 46); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 47); Multiply replace_(i1,i6,i2,i4,i4,i2,i6,i1,i8,i11,i10,i12,i11,i8,i12,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso47>,$bestiso,$bestisov;
.sort:Zd95 automorphism;

#call CheckRemovedPropagators(d95,6,0,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d95;
#endif
#endprocedure

#procedure Reduced95()
	#call Prepared95()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd95'
		#call MtoZ(Md95,Zd95,i,14)
		#call Reduce(d95)
		#call ZtoM(Zd95,Md95,i,14)
		#call Prepared95()
#else
		#if `USETURBO'
			#call TurboMd95()
		#endif
		#call insertionS(Md95,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i6,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md95b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond95()
#endif
	#endif
#endprocedure
*--#] reduce-d95 : 
*--#[ reduce-d94 :
#procedure Insertiond94()
* merge propagators with same momentum, and repeated dots
	if (count(Md94b,1)) Multiply replace_(Md94b,Md94c,i3,i2,i4,i3,i2,i4,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md94c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j3/2-j5,j,j1,j3,j5,Md94c,dotmapMd94cR1)
	#call replace(i7,`Q2'/2-j1/2+j2/2-j4/2-j5,j,j1,j2,j4,j5,Md94c,dotmapMd94cR2)
	#call replace(i8,`Q2'/2+j1/2-j3/2,j,j1,j3,Md94c,dotmapMd94cR3)
	if (count(Md94c,1)) Multiply replace_(Md94c,Md94d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d19
	if (count(Md94d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5);
	if (count(Md94d,1)) Multiply replace_(Md94d,Md19,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd19 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared94()
* Topology: 0-1 1-4 1-2 1-2 1-5* 4-5 2-5 4-9
* Dots: p0.p4,p0.p2,p1.p2
* Apply automorphisms
if (match(Md94*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd94 automorphism;

#call CheckRemovedPropagators(d94,6,3,4,5,6,1,2,3)
#if `$DOACTION' == 0
.sort:reduce d94;
#endif
#endprocedure

#procedure Reduced94()
	#call Prepared94()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd94'
		#call MtoZ(Md94,Zd94,i,9)
		#call Reduce(d94)
		#call ZtoM(Zd94,Md94,i,9)
		#call Prepared94()
#else
		#if `USETURBO'
			#call TurboMd94()
		#endif
		#call insertionS(Md94,i2,i3,i8,i9,i2,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md94b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond94()
#endif
	#endif
#endprocedure
*--#] reduce-d94 : 
*--#[ reduce-d93 :
#procedure Insertiond93()
* merge propagators with same momentum, and repeated dots
	if (count(Md93b,1)) Multiply replace_(Md93b,Md93c);

* rewrite insertion dots
	if (count(Md93c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-j1/2+j2/2-j3/2+j4/2,j,j1,j2,j3,j4,Md93c,dotmapMd93cR1)
	#call replace(i7,-j1/2+j2/2-j5/2,j,j1,j2,j5,Md93c,dotmapMd93cR2)
	#call replace(i8,-j1/2+j2/2+j5/2,j,j1,j2,j5,Md93c,dotmapMd93cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md93c,dotmapMd93cR4)
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md93c,dotmapMd93cR5)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md93c,dotmapMd93cR6)
	if (count(Md93c,1)) Multiply replace_(Md93c,Md93d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star45
	if (count(Md93d,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i5,j5);
	if (count(Md93d,1)) Multiply replace_(Md93d,Mt1star45,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star45 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared93()
* Topology: 0-1 2-4* 1-2 1-5 4-5 2-5 2-5 4-9
* Dots: p0.p5,p1.p5,p2.p5
* Apply automorphisms
if (match(Md93*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd93 automorphism;

#call CheckRemovedPropagators(d93,6,4,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d93;
#endif
#endprocedure

#procedure Reduced93()
	#call Prepared93()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd93'
		#call MtoZ(Md93,Zd93,i,9)
		#call Reduce(d93)
		#call ZtoM(Zd93,Md93,i,9)
		#call Prepared93()
#else
		#if `USETURBO'
			#call TurboMd93()
		#endif
		#call insertionS(Md93,i5,i6,i7,i8,i9,i5,`Q2',i1,i2,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md93b,1)) Multiply replace_(<i7,i6>,...,<i12,i11>);
		#call Insertiond93()
#endif
	#endif
#endprocedure
*--#] reduce-d93 : 
*--#[ reduce-d92 :
#procedure Insertiond92()
* merge propagators with same momentum, and repeated dots
	if (count(Md92b,1)) Multiply replace_(Md92b,Md92c);

* rewrite insertion dots
	if (count(Md92c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-j1/2+j2/2-j3/2+j4/2,j,j1,j2,j3,j4,Md92c,dotmapMd92cR1)
	#call replace(i7,-j1/2+j2/2-j5/2,j,j1,j2,j5,Md92c,dotmapMd92cR2)
	#call replace(i8,-j1/2+j2/2+j5/2,j,j1,j2,j5,Md92c,dotmapMd92cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md92c,dotmapMd92cR4)
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md92c,dotmapMd92cR5)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md92c,dotmapMd92cR6)
	if (count(Md92c,1)) Multiply replace_(Md92c,Md92d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star05
	if (count(Md92d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md92d,1)) Multiply replace_(Md92d,Mt1star05,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star05 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared92()
* Topology: 0-1* 2-4 1-2 1-5 4-5 2-5 2-5 4-9
* Dots: p0.p5,p1.p5,p2.p5
* Apply automorphisms
if (match(Md92*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n5,$n6,$n1,$n2,$n3,$n4)
	#call hash(2,$n9,$n8,$n7,$n5,$n6,$n3,$n4,$n1,$n2)
	#call hash(3,$n9,$n8,$n7,$n5,$n6,$n2,$n1,$n4,$n3)
endif;
if (($n8==0)&&($n9==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n1,$n2,$n3,$n4)
	#call hash(5,$n9,$n8,$n7,$n6,$n5,$n2,$n1,$n4,$n3)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n8,$n9,$n7,$n6,$n5,$n3,$n4,$n1,$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i5,i6,i6,i5);
elseif ($bestiso == 1); Multiply sign_($n7+$n9)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i5);
elseif ($bestiso == 2); Multiply sign_($n7+$n8+$n9)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i6,i6,i5);
elseif ($bestiso == 3); Multiply sign_($n9)*replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i6,i6,i5);
elseif ($bestiso == 4); Multiply sign_($n7+$n9)*replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 5); Multiply sign_($n9)*replace_(i1,i3,i2,i4,i3,i1,i4,i2);
elseif ($bestiso == 7); Multiply sign_($n7+$n8+$n9)*replace_(i1,i2,i2,i1,i3,i4,i4,i3,i8,i9,i9,i8);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd92 automorphism;

#call CheckRemovedPropagators(d92,6,4,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d92;
#endif
#endprocedure

#procedure Reduced92()
	#call Prepared92()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd92'
		#call MtoZ(Md92,Zd92,i,9)
		#call Reduce(d92)
		#call ZtoM(Zd92,Md92,i,9)
		#call Prepared92()
#else
		#if `USETURBO'
			#call TurboMd92()
		#endif
		#call insertionS(Md92,i5,i6,i7,i8,i9,i5,`Q2',i1,i2,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md92b,1)) Multiply replace_(<i7,i6>,...,<i12,i11>);
		#call Insertiond92()
#endif
	#endif
#endprocedure
*--#] reduce-d92 : 
*--#[ reduce-d91 :
#procedure Insertiond91()
* merge propagators with same momentum, and repeated dots
	if (count(Md91b,1)) Multiply replace_(Md91b,Md91c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md91c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md91c,dotmapMd91cR1)
	#call replace(i7,-j2/2-j3/2+j4/2+j5,j,j2,j3,j4,j5,Md91c,dotmapMd91cR2)
	if (count(Md91c,1)) Multiply replace_(Md91c,Md91d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d17
	if (count(Md91d,1)) Multiply replace_(i1,j4,i2,j1,i3,j3,i4,j2,i5,j5);
	if (count(Md91d,1)) Multiply replace_(Md91d,Md17,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd17 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared91()
* Topology: 0-1 3-4 1-3 1-6 3-6* 3-4 1-6 4-9
* Dots: p0.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md91*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n3,$n1,$n4,$n6,$n2,$n5)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i5,i3,i6,i5,i1,i6,i3);
elseif ($bestiso == 2); Multiply replace_(i1,i5,i5,i1);
elseif ($bestiso == 3); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd91 automorphism;

#call CheckRemovedPropagators(d91,6,1,4,1,2,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d91;
#endif
#endprocedure

#procedure Reduced91()
	#call Prepared91()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd91'
		#call MtoZ(Md91,Zd91,i,9)
		#call Reduce(d91)
		#call ZtoM(Zd91,Md91,i,9)
		#call Prepared91()
#else
		#if `USETURBO'
			#call TurboMd91()
		#endif
		#call insertionS(Md91,i1,i5,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md91b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond91()
#endif
	#endif
#endprocedure
*--#] reduce-d91 : 
*--#[ reduce-d90 :
#procedure Insertiond90()
* merge propagators with same momentum, and repeated dots
	if (count(Md90b,1)) Multiply replace_(Md90b,Md90c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md90c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md90c,dotmapMd90cR1)
	#call replace(i7,j2/2+j3/2-j4/2+j5,j,j2,j3,j4,j5,Md90c,dotmapMd90cR2)
	if (count(Md90c,1)) Multiply replace_(Md90c,Md90d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d12
	if (count(Md90d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md90d,1)) Multiply replace_(Md90d,Md12,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd12 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared90()
* Topology: 0-1 2-3 1-2 1-5* 3-5 3-5 1-2 3-9
* Dots: p0.p4,p0.p2,p2.p4
* Apply automorphisms
if (match(Md90*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n2,$n4,$n5,$n3,$n6,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i4,i5,i5,i4,i6,i2);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 3); Multiply replace_(i2,i6,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd90 automorphism;

#call CheckRemovedPropagators(d90,6,2,1,3,2,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d90;
#endif
#endprocedure

#procedure Reduced90()
	#call Prepared90()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd90'
		#call MtoZ(Md90,Zd90,i,9)
		#call Reduce(d90)
		#call ZtoM(Zd90,Md90,i,9)
		#call Prepared90()
#else
		#if `USETURBO'
			#call TurboMd90()
		#endif
		#call insertionS(Md90,i2,i6,i8,i9,i2,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md90b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond90()
#endif
	#endif
#endprocedure
*--#] reduce-d90 : 
*--#[ reduce-d89 :
#procedure Insertiond89()
* merge propagators with same momentum, and repeated dots
	if (count(Md89b,1)) Multiply replace_(Md89b,Md89c,i3,i2,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md89c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2+j2/2-j4/2,j,j1,j2,j4,Md89c,dotmapMd89cR1)
	#call replace(i7,`Q2'/2+j1/2-j3/2,j,j1,j3,Md89c,dotmapMd89cR2)
	if (count(Md89c,1)) Multiply replace_(Md89c,Md89d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d20
	if (count(Md89d,1)) Multiply replace_(i1,j2,i2,j4,i3,j1,i4,j3);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j5,j,j1,j2,j5,Md89d,dotmapMd89dR1)
	if (count(Md89d,1)) Multiply replace_(Md89d,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared89()
* Topology: 0-1 3-4 2-3* 1-2 1-4 1-3 1-2 4-9
* Dots: p0.p2,p0.p3,p1.p3
* Apply automorphisms
if (match(Md89*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd89 automorphism;

#call CheckRemovedPropagators(d89,6,2,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d89;
#endif
#endprocedure

#procedure Reduced89()
	#call Prepared89()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd89'
		#call MtoZ(Md89,Zd89,i,9)
		#call Reduce(d89)
		#call ZtoM(Zd89,Md89,i,9)
		#call Prepared89()
#else
		#if `USETURBO'
			#call TurboMd89()
		#endif
		#call insertionS(Md89,i3,i6,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md89b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond89()
#endif
	#endif
#endprocedure
*--#] reduce-d89 : 
*--#[ reduce-d88 :
#procedure Insertiond88()
* merge propagators with same momentum, and repeated dots
	if (count(Md88b,1)) Multiply replace_(Md88b,Md88c,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md88c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j2/2,j,j1,j2,Md88c,dotmapMd88cR1)
	#call replace(i7,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md88c,dotmapMd88cR2)
	if (count(Md88c,1)) Multiply replace_(Md88c,Md88d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d21
	if (count(Md88d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5);
	if (count(Md88d,1)) Multiply replace_(Md88d,Md21,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd21 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared88()
* Topology: 0-1 1-3 1-6 5-6* 3-5 3-5 1-6 3-9
* Dots: p0.p4,p0.p2,p2.p4
* Apply automorphisms
if (match(Md88*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n2,$n4,$n5,$n3,$n6,$n1)
	#call hash(1,$n9,$n7,$n7,$n5,$n2,$n6,$n3,$n4,$n1)
	#call hash(2,$n9,$n8,$n8,$n4,$n6,$n2,$n3,$n5,$n1)
	#call hash(3,$n9,$n8,$n7,$n4,$n2,$n6,$n3,$n5,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(5,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n5,$n6,$n2,$n3,$n4,$n1)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i4,i5,i5,i4,i6,i2);
elseif ($bestiso == 1); Multiply sign_($n7+$n8)*replace_(i2,i4,i4,i6,i5,i2,i6,i5,i8,i7);
elseif ($bestiso == 2); Multiply sign_($n7+$n8)*replace_(i2,i5,i4,i2,i5,i6,i6,i4,i7,i8);
elseif ($bestiso == 3); Multiply sign_($n7+$n8)*replace_(i2,i5,i4,i6,i5,i2,i6,i4);
elseif ($bestiso == 4); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 5); Multiply replace_(i2,i6,i6,i2);
elseif ($bestiso == 7); Multiply sign_($n7+$n8)*replace_(i2,i4,i4,i2,i5,i6,i6,i5,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd88 automorphism;

#call CheckRemovedPropagators(d88,6,1,3,1,2,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d88;
#endif
#endprocedure

#procedure Reduced88()
	#call Prepared88()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd88'
		#call MtoZ(Md88,Zd88,i,9)
		#call Reduce(d88)
		#call ZtoM(Zd88,Md88,i,9)
		#call Prepared88()
#else
		#if `USETURBO'
			#call TurboMd88()
		#endif
		#call insertionS(Md88,i2,i6,i8,i9,i2,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md88b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond88()
#endif
	#endif
#endprocedure
*--#] reduce-d88 : 
*--#[ reduce-d87 :
#procedure Insertiond87()
* merge propagators with same momentum, and repeated dots
	if (count(Md87b,1)) Multiply replace_(Md87b,Md87c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md87c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md87c,dotmapMd87cR1)
	#call replace(i7,j2/2+j3/2-j4/2+j5,j,j2,j3,j4,j5,Md87c,dotmapMd87cR2)
	if (count(Md87c,1)) Multiply replace_(Md87c,Md87d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d14
	if (count(Md87d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5);
	if (count(Md87d,1)) Multiply replace_(Md87d,Md14,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd14 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared87()
* Topology: 0-1* 2-3 1-2 1-6 3-6 3-6 2-3 3-9
* Dots: p0.p4,p0.p1,p1.p4
* Apply automorphisms
if (match(Md87*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n1,$n4,$n5,$n3,$n2,$n6)
	#call hash(1,$n9,$n7,$n7,$n5,$n1,$n6,$n2,$n3,$n4)
	#call hash(2,$n9,$n8,$n8,$n4,$n6,$n1,$n2,$n3,$n5)
	#call hash(3,$n9,$n8,$n7,$n4,$n1,$n6,$n2,$n3,$n5)
endif;
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(5,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n7,$n8,$n5,$n6,$n1,$n2,$n3,$n4)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i4,i5,i5,i4,i6,i1);
elseif ($bestiso == 1); Multiply sign_($n7+$n8)*replace_(i1,i4,i2,i3,i3,i2,i4,i6,i5,i1,i6,i5,i8,i7);
elseif ($bestiso == 2); Multiply sign_($n7+$n8)*replace_(i1,i5,i2,i3,i3,i2,i4,i1,i5,i6,i6,i4,i7,i8);
elseif ($bestiso == 3); Multiply sign_($n7+$n8)*replace_(i1,i5,i2,i3,i3,i2,i4,i6,i5,i1,i6,i4);
elseif ($bestiso == 4); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 5); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 7); Multiply sign_($n7+$n8)*replace_(i1,i4,i2,i3,i3,i2,i4,i1,i5,i6,i6,i5,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd87 automorphism;

#call CheckRemovedPropagators(d87,6,2,2,3,1,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d87;
#endif
#endprocedure

#procedure Reduced87()
	#call Prepared87()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd87'
		#call MtoZ(Md87,Zd87,i,9)
		#call Reduce(d87)
		#call ZtoM(Zd87,Md87,i,9)
		#call Prepared87()
#else
		#if `USETURBO'
			#call TurboMd87()
		#endif
		#call insertionS(Md87,i1,i6,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md87b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond87()
#endif
	#endif
#endprocedure
*--#] reduce-d87 : 
*--#[ reduce-d86 :
#procedure Insertiond86()
* merge propagators with same momentum, and repeated dots
	if (count(Md86b,1)) Multiply replace_(Md86b,Md86c);

* rewrite insertion dots
	if (count(Md86c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j1/2-j4/2,j,j1,j4,Md86c,dotmapMd86cR1)
	#call replace(i7,-`Q2'/2+j1/2+j4/2,j,j1,j4,Md86c,dotmapMd86cR2)
	#call replace(i8,-`Q2'/2+j1/2+j3/2-j5/2,j,j1,j3,j5,Md86c,dotmapMd86cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md86c,dotmapMd86cR4)
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md86c,dotmapMd86cR5)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md86c,dotmapMd86cR6)
	if (count(Md86c,1)) Multiply replace_(Md86c,Md86d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d47
	if (count(Md86d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md86d,1)) Multiply replace_(Md86d,Md47,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd47 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared86()
* Topology: 0-1 2-3 1-2 1-5 3-5* 3-5 2-5 3-9
* Dots: p0.p4,p1.p4,p2.p4
* Apply automorphisms
if (match(Md86*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd86 automorphism;

#call CheckRemovedPropagators(d86,6,5,1,2,3,4,6,5)
#if `$DOACTION' == 0
.sort:reduce d86;
#endif
#endprocedure

#procedure Reduced86()
	#call Prepared86()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd86'
		#call MtoZ(Md86,Zd86,i,9)
		#call Reduce(d86)
		#call ZtoM(Zd86,Md86,i,9)
		#call Prepared86()
#else
		#if `USETURBO'
			#call TurboMd86()
		#endif
		#call insertionS(Md86,i4,i5,i7,i8,i9,i4,`Q2',i1,i2,i7,i8,i9,i10,i11,i12,1,0)
		if (count(Md86b,1)) Multiply replace_(<i6,i5>,...,<i12,i11>);
		#call Insertiond86()
#endif
	#endif
#endprocedure
*--#] reduce-d86 : 
*--#[ reduce-d85 :
#procedure Insertiond85()
* merge propagators with same momentum, and repeated dots
	if (count(Md85b,1)) Multiply replace_(Md85b,Md85c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md85c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md85c,dotmapMd85cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md85c,dotmapMd85cR2)
	if (count(Md85c,1)) Multiply replace_(Md85c,Md85d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d15
	if (count(Md85d,1)) Multiply replace_(i1,j2,i2,j4,i3,j1,i4,j3);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j5,j,j1,j2,j5,Md85d,dotmapMd85dR1)
	if (count(Md85d,1)) Multiply replace_(Md85d,Md15,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd15 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared85()
* Topology: 0-1 1-2 1-2 2-3 3-4* 2-4 3-4 4-9
* Dots: p0.p4,p1.p3,p1.p4
* Apply automorphisms
if (match(Md85*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd85 automorphism;

#call CheckRemovedPropagators(d85,6,2,3,4,1,2,5,6)
#if `$DOACTION' == 0
.sort:reduce d85;
#endif
#endprocedure

#procedure Reduced85()
	#call Prepared85()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd85'
		#call MtoZ(Md85,Zd85,i,9)
		#call Reduce(d85)
		#call ZtoM(Zd85,Md85,i,9)
		#call Prepared85()
#else
		#if `USETURBO'
			#call TurboMd85()
		#endif
		#call insertionS(Md85,i1,i2,i8,i9,i1,i3,i4,i8,i9,i10,0,0)
		if (count(Md85b,1)) Multiply replace_(<i3,i2>,...,<i10,i9>);
		#call Insertiond85()
#endif
	#endif
#endprocedure
*--#] reduce-d85 : 
*--#[ reduce-d84 :
#procedure Insertiond84()
* merge propagators with same momentum, and repeated dots
	if (count(Md84b,1)) Multiply replace_(Md84b,Md84c,i2,i1,i3,i2,i1,i3,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md84c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j3/2,j,j1,j3,Md84c,dotmapMd84cR1)
	#call replace(i7,-j1/2-j2/2+j4/2+j5,j,j1,j2,j4,j5,Md84c,dotmapMd84cR2)
	if (count(Md84c,1)) Multiply replace_(Md84c,Md84d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d18
	if (count(Md84d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j2);
	#call replace(i5,`Q2'/2+j1/2-j3/2-j5,j,j1,j3,j5,Md84d,dotmapMd84dR1)
	if (count(Md84d,1)) Multiply replace_(Md84d,Md18,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd18 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared84()
* Topology: 0-1 1-5 1-3 1-5 3-4* 4-5 3-4 4-9
* Dots: p0.p4,p0.p1,p1.p4
* Apply automorphisms
if (match(Md84*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd84 automorphism;

#call CheckRemovedPropagators(d84,6,3,2,4,5,1,3,6)
#if `$DOACTION' == 0
.sort:reduce d84;
#endif
#endprocedure

#procedure Reduced84()
	#call Prepared84()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd84'
		#call MtoZ(Md84,Zd84,i,9)
		#call Reduce(d84)
		#call ZtoM(Zd84,Md84,i,9)
		#call Prepared84()
#else
		#if `USETURBO'
			#call TurboMd84()
		#endif
		#call insertionS(Md84,i1,i3,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md84b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond84()
#endif
	#endif
#endprocedure
*--#] reduce-d84 : 
*--#[ reduce-d83 :
#procedure Insertiond83()
* merge propagators with same momentum, and repeated dots
	if (count(Md83b,1)) Multiply replace_(Md83b,Md83c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md83c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2+j2/2-j4/2,j,j1,j2,j4,Md83c,dotmapMd83cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md83c,dotmapMd83cR2)
	if (count(Md83c,1)) Multiply replace_(Md83c,Md83d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d20
	if (count(Md83d,1)) Multiply replace_(i1,j4,i2,j2,i3,j1,i4,j3);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j5,j,j1,j2,j5,Md83d,dotmapMd83dR1)
	if (count(Md83d,1)) Multiply replace_(Md83d,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared83()
* Topology: 0-1 3-4* 2-3 1-2 1-4 3-4 2-4 4-9
* Dots: p0.p2,p0.p1,p1.p3
* Apply automorphisms
if (match(Md83*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd83 automorphism;

#call CheckRemovedPropagators(d83,6,3,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d83;
#endif
#endprocedure

#procedure Reduced83()
	#call Prepared83()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd83'
		#call MtoZ(Md83,Zd83,i,9)
		#call Reduce(d83)
		#call ZtoM(Zd83,Md83,i,9)
		#call Prepared83()
#else
		#if `USETURBO'
			#call TurboMd83()
		#endif
		#call insertionS(Md83,i1,i5,i8,i9,i1,`Q2',i3,i8,i9,i10,1,0)
		if (count(Md83b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond83()
#endif
	#endif
#endprocedure
*--#] reduce-d83 : 
*--#[ reduce-d82 :
#procedure Insertiond82()
* merge propagators with same momentum, and repeated dots
	if (count(Md82b,1)) Multiply replace_(Md82b,Md82c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md82c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md82c,dotmapMd82cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md82c,dotmapMd82cR2)
	if (count(Md82c,1)) Multiply replace_(Md82c,Md82d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d16
	if (count(Md82d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2);
	#call replace(i5,`Q2'/2-j1/2+j3/2-j5,j,j1,j3,j5,Md82d,dotmapMd82dR1)
	if (count(Md82d,1)) Multiply replace_(Md82d,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared82()
* Topology: 0-1 1-2 2-3 1-2 3-4* 1-4 3-4 4-9
* Dots: p0.p4,p0.p1,p1.p4
* Apply automorphisms
if (match(Md82*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd82 automorphism;

#call CheckRemovedPropagators(d82,6,2,2,4,1,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d82;
#endif
#endprocedure

#procedure Reduced82()
	#call Prepared82()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd82'
		#call MtoZ(Md82,Zd82,i,9)
		#call Reduce(d82)
		#call ZtoM(Zd82,Md82,i,9)
		#call Prepared82()
#else
		#if `USETURBO'
			#call TurboMd82()
		#endif
		#call insertionS(Md82,i1,i3,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md82b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond82()
#endif
	#endif
#endprocedure
*--#] reduce-d82 : 
*--#[ reduce-d81 :
#procedure Insertiond81()
* merge propagators with same momentum, and repeated dots
	if (count(Md81b,1)) Multiply replace_(Md81b,Md81c);

* rewrite insertion dots
	if (count(Md81c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2,j,j2,j3,Md81c,dotmapMd81cR1)
	#call replace(i7,j1/2+j2/2-j5/2,j,j1,j2,j5,Md81c,dotmapMd81cR2)
	#call replace(i8,`Q2'/2-j2/2-j3/2,j,j2,j3,Md81c,dotmapMd81cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md81c,dotmapMd81cR4)
	#call replace(i10,`Q2'/2-j2/2+j3/2,j,j2,j3,Md81c,dotmapMd81cR5)
	#call replace(i11,`Q2'/2-j2/2-j4/2+j5/2,j,j2,j4,j5,Md81c,dotmapMd81cR6)
	if (count(Md81c,1)) Multiply replace_(Md81c,Md81d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md81d,1)) Multiply replace_(i1,j2,i2,j4,i3,j5,i4,j1,i5,j3);
	if (count(Md81d,1)) Multiply replace_(Md81d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared81()
* Topology: 0-1* 2-4 1-2 1-5 4-5 1-2 2-5 4-9
* Dots: p0.p2,p1.p2,p2.p3
* Apply automorphisms
if (match(Md81*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd81 automorphism;

#call CheckRemovedPropagators(d81,6,4,1,3,4,6,2,5)
#if `$DOACTION' == 0
.sort:reduce d81;
#endif
#endprocedure

#procedure Reduced81()
	#call Prepared81()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd81'
		#call MtoZ(Md81,Zd81,i,9)
		#call Reduce(d81)
		#call ZtoM(Zd81,Md81,i,9)
		#call Prepared81()
#else
		#if `USETURBO'
			#call TurboMd81()
		#endif
		#call insertionS(Md81,i2,i5,i7,i8,i9,i2,`Q2',i1,i3,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md81b,1)) Multiply replace_(<i6,i5>,...,<i12,i11>);
		#call Insertiond81()
#endif
	#endif
#endprocedure
*--#] reduce-d81 : 
*--#[ reduce-d80 :
#procedure Insertiond80()
* merge propagators with same momentum, and repeated dots
	if (count(Md80b,1)) Multiply replace_(Md80b,Md80c,i2,i1,i3,i2,i1,i3,i4,i3,i5,i4,i6,i5,i9,i5,i7,-i6,i8,-i7);

* rewrite insertion dots
	if (count(Md80c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j3/2-j4/2,j,j3,j4,Md80c,dotmapMd80cR1)
	#call replace(i7,-j1/2+j2/2-j3/2,j,j1,j2,j3,Md80c,dotmapMd80cR2)
	if (count(Md80c,1)) Multiply replace_(Md80c,Md80d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d17
	if (count(Md80d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md80d,1)) Multiply replace_(Md80d,Md17,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd17 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared80()
* Topology: 0-1* 2-3 3-5 3-5 2-3 1-5 1-2 2-9
* Dots: p0.p2,p0.p1,p1.p2
* Apply automorphisms
if (match(Md80*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n1,$n2,$n3,$n4)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i4,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd80 automorphism;

#call CheckRemovedPropagators(d80,6,1,5,1,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d80;
#endif
#endprocedure

#procedure Reduced80()
	#call Prepared80()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd80'
		#call MtoZ(Md80,Zd80,i,9)
		#call Reduce(d80)
		#call ZtoM(Zd80,Md80,i,9)
		#call Prepared80()
#else
		#if `USETURBO'
			#call TurboMd80()
		#endif
		#call insertionS(Md80,i1,i4,i8,i9,i1,`Q2',i2,i8,i9,i10,0,0)
		if (count(Md80b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond80()
#endif
	#endif
#endprocedure
*--#] reduce-d80 : 
*--#[ reduce-d79 :
#procedure Insertiond79()
* merge propagators with same momentum, and repeated dots
	if (count(Md79b,1)) Multiply replace_(Md79b,Md79c,i2,`Q2',i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md79c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md79c,dotmapMd79cR1)
	#call replace(i7,-j2/2-j3/2+j4/2+j5,j,j2,j3,j4,j5,Md79c,dotmapMd79cR2)
	if (count(Md79c,1)) Multiply replace_(Md79c,Md79d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d22
	if (count(Md79d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i4,j4,i5,j5);
	if (count(Md79d,1)) Multiply replace_(Md79d,Md22,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd22 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared79()
* Topology: 0-1* 2-4 1-2 1-2 2-5 4-5 2-5 4-9
* Dots: p0.p4,p1.p2,p2.p4
* Apply automorphisms
if (match(Md79*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n4,$n5,$n6,$n2,$n3,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i4,i6,i6,i4);
elseif ($bestiso == 2); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 3); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd79 automorphism;

#call CheckRemovedPropagators(d79,6,1,5,1,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d79;
#endif
#endprocedure

#procedure Reduced79()
	#call Prepared79()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd79'
		#call MtoZ(Md79,Zd79,i,9)
		#call Reduce(d79)
		#call ZtoM(Zd79,Md79,i,9)
		#call Prepared79()
#else
		#if `USETURBO'
			#call TurboMd79()
		#endif
		#call insertionS(Md79,i2,i3,i8,i9,i2,i1,i4,i8,i9,i10,0,0)
		if (count(Md79b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond79()
#endif
	#endif
#endprocedure
*--#] reduce-d79 : 
*--#[ reduce-d78 :
#procedure Insertiond78()
* merge propagators with same momentum, and repeated dots
	if (count(Md78b,1)) Multiply replace_(Md78b,Md78c,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,-i6,i8,-i7);

* rewrite insertion dots
	if (count(Md78c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j3/2+j4/2-j5,j,j3,j4,j5,Md78c,dotmapMd78cR1)
	#call replace(i7,-j1/2-j2/2+j3/2,j,j1,j2,j3,Md78c,dotmapMd78cR2)
	if (count(Md78c,1)) Multiply replace_(Md78c,Md78d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d15
	if (count(Md78d,1)) Multiply replace_(i1,j3,i2,j4,i3,j2,i4,j1,i5,j5);
	if (count(Md78d,1)) Multiply replace_(Md78d,Md15,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd15 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared78()
* Topology: 0-1* 2-3 3-4 3-4 2-4 1-3 1-2 2-9
* Dots: p0.p1,p0.p2,p1.p2
* Apply automorphisms
if (match(Md78*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd78 automorphism;

#call CheckRemovedPropagators(d78,6,2,4,5,1,2,3,6)
#if `$DOACTION' == 0
.sort:reduce d78;
#endif
#endprocedure

#procedure Reduced78()
	#call Prepared78()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd78'
		#call MtoZ(Md78,Zd78,i,9)
		#call Reduce(d78)
		#call ZtoM(Zd78,Md78,i,9)
		#call Prepared78()
#else
		#if `USETURBO'
			#call TurboMd78()
		#endif
		#call insertionS(Md78,i2,i3,i8,i9,i2,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md78b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond78()
#endif
	#endif
#endprocedure
*--#] reduce-d78 : 
*--#[ reduce-d77 :
#procedure Insertiond77()
* merge propagators with same momentum, and repeated dots
	if (count(Md77b,1)) Multiply replace_(Md77b,Md77c,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md77c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j2/2+j3/2-j4/2+j5,j,j2,j3,j4,j5,Md77c,dotmapMd77cR1)
	#call replace(i7,`Q2'/2+j1/2-j2/2,j,j1,j2,Md77c,dotmapMd77cR2)
	if (count(Md77c,1)) Multiply replace_(Md77c,Md77d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d15
	if (count(Md77d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3);
	#call replace(i5,-`Q2'/2+j1/2-j2/2-j5,j,j1,j2,j5,Md77d,dotmapMd77dR1)
	if (count(Md77d,1)) Multiply replace_(Md77d,Md15,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd15 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared77()
* Topology: 0-1* 1-2 1-6 5-6 2-5 2-6 2-5 2-9
* Dots: p0.p3,p0.p4,p1.p4
* Apply automorphisms
if (match(Md77*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd77 automorphism;

#call CheckRemovedPropagators(d77,6,2,2,3,1,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d77;
#endif
#endprocedure

#procedure Reduced77()
	#call Prepared77()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd77'
		#call MtoZ(Md77,Zd77,i,9)
		#call Reduce(d77)
		#call ZtoM(Zd77,Md77,i,9)
		#call Prepared77()
#else
		#if `USETURBO'
			#call TurboMd77()
		#endif
		#call insertionS(Md77,i4,i6,i8,i9,i4,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md77b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond77()
#endif
	#endif
#endprocedure
*--#] reduce-d77 : 
*--#[ reduce-d76 :
#procedure Insertiond76()
* merge propagators with same momentum, and repeated dots
	if (count(Md76b,1)) Multiply replace_(Md76b,Md76c);

* rewrite insertion dots
	if (count(Md76c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j2/2+j3/2,j,j2,j3,Md76c,dotmapMd76cR1)
	#call replace(i7,`Q2'/2-j2/2-j4/2+j5/2,j,j2,j4,j5,Md76c,dotmapMd76cR2)
	#call replace(i8,`Q2'/2-j2/2-j3/2,j,j2,j3,Md76c,dotmapMd76cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md76c,dotmapMd76cR4)
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md76c,dotmapMd76cR5)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md76c,dotmapMd76cR6)
	if (count(Md76c,1)) Multiply replace_(Md76c,Md76d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star24
	if (count(Md76d,1)) Multiply replace_(i1,j4,i2,j3,i3,j2,i4,j1,i5,j5);
	if (count(Md76d,1)) Multiply replace_(Md76d,Mt1star24,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star24 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared76()
* Topology: 0-1 3-4* 1-3 1-5 4-5 3-5 1-5 4-9
* Dots: p0.p3,p1.p3,p2.p3
* Apply automorphisms
if (match(Md76*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd76 automorphism;

#call CheckRemovedPropagators(d76,6,4,1,2,4,5,3,6)
#if `$DOACTION' == 0
.sort:reduce d76;
#endif
#endprocedure

#procedure Reduced76()
	#call Prepared76()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd76'
		#call MtoZ(Md76,Zd76,i,9)
		#call Reduce(d76)
		#call ZtoM(Zd76,Md76,i,9)
		#call Prepared76()
#else
		#if `USETURBO'
			#call TurboMd76()
		#endif
		#call insertionS(Md76,i3,i6,i7,i8,i9,i3,`Q2',i1,i2,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md76b,1)) Multiply replace_(<i7,i6>,...,<i12,i11>);
		#call Insertiond76()
#endif
	#endif
#endprocedure
*--#] reduce-d76 : 
*--#[ reduce-d75 :
#procedure Insertiond75()
* merge propagators with same momentum, and repeated dots
	if (count(Md75b,1)) Multiply replace_(Md75b,Md75c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md75c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2,j,j2,j3,Md75c,dotmapMd75cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md75c,dotmapMd75cR2)
	if (count(Md75c,1)) Multiply replace_(Md75c,Md75d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d22
	if (count(Md75d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md75d,1)) Multiply replace_(Md75d,Md22,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd22 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared75()
* Topology: 0-1 3-4* 2-3 1-2 1-3 3-4 2-3 4-9
* Dots: p0.p2,p1.p2,p1.p3
* Apply automorphisms
if (match(Md75*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i6,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd75 automorphism;

#call CheckRemovedPropagators(d75,6,2,1,3,2,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d75;
#endif
#endprocedure

#procedure Reduced75()
	#call Prepared75()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd75'
		#call MtoZ(Md75,Zd75,i,9)
		#call Reduce(d75)
		#call ZtoM(Zd75,Md75,i,9)
		#call Prepared75()
#else
		#if `USETURBO'
			#call TurboMd75()
		#endif
		#call insertionS(Md75,i1,i5,i8,i9,i1,i2,i3,i8,i9,i10,1,0)
		if (count(Md75b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond75()
#endif
	#endif
#endprocedure
*--#] reduce-d75 : 
*--#[ reduce-d74 :
#procedure Insertiond74()
* merge propagators with same momentum, and repeated dots
	if (count(Md74b,1)) Multiply replace_(Md74b,Md74c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md74c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md74c,dotmapMd74cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md74c,dotmapMd74cR2)
	if (count(Md74c,1)) Multiply replace_(Md74c,Md74d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p2 and change topology to d23
	if (count(Md74d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md74d,1)) Multiply replace_(Md74d,Md23,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd23 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared74()
* Topology: 0-1 3-4 2-3 1-2 1-2 2-4* 2-3 4-9
* Dots: p1.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md74*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i3,i4,i4,i3,i6,i2);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i2,i6,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd74 automorphism;

#call CheckRemovedPropagators(d74,6,2,1,5,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d74;
#endif
#endprocedure

#procedure Reduced74()
	#call Prepared74()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd74'
		#call MtoZ(Md74,Zd74,i,9)
		#call Reduce(d74)
		#call ZtoM(Zd74,Md74,i,9)
		#call Prepared74()
#else
		#if `USETURBO'
			#call TurboMd74()
		#endif
		#call insertionS(Md74,i2,i6,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md74b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond74()
#endif
	#endif
#endprocedure
*--#] reduce-d74 : 
*--#[ reduce-d73 :
#procedure Insertiond73()
* merge propagators with same momentum, and repeated dots
	if (count(Md73b,1)) Multiply replace_(Md73b,Md73c,i3,i2,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md73c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2+j2/2-j4/2,j,j1,j2,j4,Md73c,dotmapMd73cR1)
	#call replace(i7,`Q2'/2+j1/2-j3/2,j,j1,j3,Md73c,dotmapMd73cR2)
	if (count(Md73c,1)) Multiply replace_(Md73c,Md73d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d18
	if (count(Md73d,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j2);
	#call replace(i5,`Q2'/2+j1/2-j3/2-j5,j,j1,j3,j5,Md73d,dotmapMd73dR1)
	if (count(Md73d,1)) Multiply replace_(Md73d,Md18,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd18 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared73()
* Topology: 0-1 3-4 2-3 1-2 1-4* 1-3 1-2 4-9
* Dots: p0.p2,p0.p3,p1.p3
* Apply automorphisms
if (match(Md73*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd73 automorphism;

#call CheckRemovedPropagators(d73,6,3,1,2,4,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d73;
#endif
#endprocedure

#procedure Reduced73()
	#call Prepared73()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd73'
		#call MtoZ(Md73,Zd73,i,9)
		#call Reduce(d73)
		#call ZtoM(Zd73,Md73,i,9)
		#call Prepared73()
#else
		#if `USETURBO'
			#call TurboMd73()
		#endif
		#call insertionS(Md73,i3,i6,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md73b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond73()
#endif
	#endif
#endprocedure
*--#] reduce-d73 : 
*--#[ reduce-d72 :
#procedure Insertiond72()
* merge propagators with same momentum, and repeated dots
	if (count(Md72b,1)) Multiply replace_(Md72b,Md72c);

* rewrite insertion dots
	if (count(Md72c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j5/2,j,j1,j5,Md72c,dotmapMd72cR1)
	#call replace(i7,j1/2+j3/2-j4/2-j5/2,j,j1,j3,j4,j5,Md72c,dotmapMd72cR2)
	#call replace(i8,`Q2'/2+j3/2-j4/2,j,j3,j4,Md72c,dotmapMd72cR3)
	#call replace(i9,j1/2+j2/2-j4/2,j,j1,j2,j4,Md72c,dotmapMd72cR4)
	#call replace(i10,`Q2'/2+j2/2-j4/2-j5/2,j,j2,j4,j5,Md72c,dotmapMd72cR5)
	#call replace(i11,j2/2+j3/2-j5/2,j,j2,j3,j5,Md72c,dotmapMd72cR6)
	if (count(Md72c,1)) Multiply replace_(Md72c,Md72d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md72d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md72d,1)) Multiply replace_(Md72d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared72()
* Topology: 0-1 3-4 2-3 1-2 1-4* 1-3 2-4 4-9
* Dots: p0.p1,p0.p2,p0.p3
* Apply automorphisms
if (match(Md72*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n7,$n8,$n9,$n5,$n6,$n4,$n1,$n2,$n3)
if (($n9==0)&&($n7==0));
	#call hash(2,$n9,$n8,$n7,$n1,$n3,$n4,$n5,$n2,$n6)
	#call hash(3,$n9,$n8,$n7,$n3,$n1,$n4,$n6,$n2,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1,i5,i6,i6,i5,i7,i9,i9,i7);
elseif ($bestiso == 2); Multiply sign_($n8)*replace_(i1,i6,i3,i5,i5,i3,i6,i1);
elseif ($bestiso == 3); Multiply sign_($n8)*replace_(i1,i5,i3,i6,i5,i1,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd72 automorphism;

#call CheckRemovedPropagators(d72,6,6,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d72;
#endif
#endprocedure

#procedure Reduced72()
	#call Prepared72()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd72'
		#call MtoZ(Md72,Zd72,i,9)
		#call Reduce(d72)
		#call ZtoM(Zd72,Md72,i,9)
		#call Prepared72()
#else
		#if `USETURBO'
			#call TurboMd72()
		#endif
		#call MtoZ(Md72,Zd72,i,9)
		#call carpet(Zd72,0,4,0,1,0,2,7,1,2,3)
		#call ZtoM(Zd72b,Md72b,i,11)
		#call Insertiond72()
#endif
	#endif
#endprocedure
*--#] reduce-d72 : 
*--#[ reduce-d71 :
#procedure Insertiond71()
* merge propagators with same momentum, and repeated dots
	if (count(Md71b,1)) Multiply replace_(Md71b,Md71c);

* rewrite insertion dots
	if (count(Md71c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j2/2+j3/2,j,j2,j3,Md71c,dotmapMd71cR1)
	#call replace(i7,`Q2'/2-j2/2-j4/2+j5/2,j,j2,j4,j5,Md71c,dotmapMd71cR2)
	#call replace(i8,`Q2'/2-j2/2-j3/2,j,j2,j3,Md71c,dotmapMd71cR3)
	#call replace(i9,`Q2'/2+j1/2-j4/2,j,j1,j4,Md71c,dotmapMd71cR4)
	#call replace(i10,`Q2'/2+j2/2-j3/2,j,j2,j3,Md71c,dotmapMd71cR5)
	#call replace(i11,j1/2+j2/2-j5/2,j,j1,j2,j5,Md71c,dotmapMd71cR6)
	if (count(Md71c,1)) Multiply replace_(Md71c,Md71d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star34
	if (count(Md71d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md71d,1)) Multiply replace_(Md71d,Mt1star34,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star34 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared71()
* Topology: 0-1 3-4 1-3 1-5 4-5* 3-5 1-5 4-9
* Dots: p0.p3,p1.p3,p2.p3
* Apply automorphisms
if (match(Md71*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd71 automorphism;

#call CheckRemovedPropagators(d71,6,4,1,2,4,5,3,6)
#if `$DOACTION' == 0
.sort:reduce d71;
#endif
#endprocedure

#procedure Reduced71()
	#call Prepared71()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd71'
		#call MtoZ(Md71,Zd71,i,9)
		#call Reduce(d71)
		#call ZtoM(Zd71,Md71,i,9)
		#call Prepared71()
#else
		#if `USETURBO'
			#call TurboMd71()
		#endif
		#call insertionS(Md71,i3,i6,i7,i8,i9,i3,`Q2',i1,i2,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md71b,1)) Multiply replace_(<i7,i6>,...,<i12,i11>);
		#call Insertiond71()
#endif
	#endif
#endprocedure
*--#] reduce-d71 : 
*--#[ reduce-d70 :
#procedure Insertiond70()
* merge propagators with same momentum, and repeated dots
	if (count(Md70b,1)) Multiply replace_(Md70b,Md70c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md70c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md70c,dotmapMd70cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md70c,dotmapMd70cR2)
	if (count(Md70c,1)) Multiply replace_(Md70c,Md70d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p2 and change topology to d24
	if (count(Md70d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md70d,1)) Multiply replace_(Md70d,Md24,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd24 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared70()
* Topology: 0-1 3-4* 2-3 1-2 1-2 2-4 2-3 4-9
* Dots: p1.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md70*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n2,$n5,$n4,$n3,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i6,i3,i4,i4,i3,i6,i2);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i2,i6,i6,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd70 automorphism;

#call CheckRemovedPropagators(d70,6,1,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d70;
#endif
#endprocedure

#procedure Reduced70()
	#call Prepared70()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd70'
		#call MtoZ(Md70,Zd70,i,9)
		#call Reduce(d70)
		#call ZtoM(Zd70,Md70,i,9)
		#call Prepared70()
#else
		#if `USETURBO'
			#call TurboMd70()
		#endif
		#call insertionS(Md70,i2,i6,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md70b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond70()
#endif
	#endif
#endprocedure
*--#] reduce-d70 : 
*--#[ reduce-d69 :
#procedure Insertiond69()
* merge propagators with same momentum, and repeated dots
	if (count(Md69b,1)) Multiply replace_(Md69b,Md69c,i3,i2,i4,i3,i5,i4,i6,i5,i7,i5,i8,i6,i9,i7);

* rewrite insertion dots
	if (count(Md69c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2+j2/2-j4/2,j,j1,j2,j4,Md69c,dotmapMd69cR1)
	#call replace(i7,`Q2'/2+j1/2-j3/2,j,j1,j3,Md69c,dotmapMd69cR2)
	if (count(Md69c,1)) Multiply replace_(Md69c,Md69d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d16
	if (count(Md69d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2);
	#call replace(i5,`Q2'/2-j1/2+j3/2-j5,j,j1,j3,j5,Md69d,dotmapMd69dR1)
	if (count(Md69d,1)) Multiply replace_(Md69d,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared69()
* Topology: 0-1 3-4* 2-3 1-2 1-4 1-3 1-2 4-9
* Dots: p0.p2,p0.p3,p1.p3
* Apply automorphisms
if (match(Md69*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i6,i6,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd69 automorphism;

#call CheckRemovedPropagators(d69,6,2,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d69;
#endif
#endprocedure

#procedure Reduced69()
	#call Prepared69()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd69'
		#call MtoZ(Md69,Zd69,i,9)
		#call Reduce(d69)
		#call ZtoM(Zd69,Md69,i,9)
		#call Prepared69()
#else
		#if `USETURBO'
			#call TurboMd69()
		#endif
		#call insertionS(Md69,i3,i6,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md69b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond69()
#endif
	#endif
#endprocedure
*--#] reduce-d69 : 
*--#[ reduce-d68 :
#procedure Insertiond68()
* merge propagators with same momentum, and repeated dots
	if (count(Md68b,1)) Multiply replace_(Md68b,Md68c,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md68c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2-j5,j,j1,j4,j5,Md68c,dotmapMd68cR1)
	#call replace(i7,j1/2-j2/2+j3/2,j,j1,j2,j3,Md68c,dotmapMd68cR2)
	#call replace(i8,`Q2'/2+j1/2-j4/2,j,j1,j4,Md68c,dotmapMd68cR3)
	if (count(Md68c,1)) Multiply replace_(Md68c,Md68d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d16
	if (count(Md68d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j1,i5,j5);
	if (count(Md68d,1)) Multiply replace_(Md68d,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared68()
* Topology: 0-1 1-2* 2-7 2-4 2-4 4-7 1-7 7-9
* Dots: p0.p2,p0.p3,p1.p3
* Apply automorphisms
if (match(Md68*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd68 automorphism;

#call CheckRemovedPropagators(d68,6,2,1,5,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d68;
#endif
#endprocedure

#procedure Reduced68()
	#call Prepared68()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd68'
		#call MtoZ(Md68,Zd68,i,9)
		#call Reduce(d68)
		#call ZtoM(Zd68,Md68,i,9)
		#call Prepared68()
#else
		#if `USETURBO'
			#call TurboMd68()
		#endif
		#call insertionS(Md68,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md68b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond68()
#endif
	#endif
#endprocedure
*--#] reduce-d68 : 
*--#[ reduce-d67 :
#procedure Insertiond67()
* merge propagators with same momentum, and repeated dots
	if (count(Md67b,1)) Multiply replace_(Md67b,Md67c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md67c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md67c,dotmapMd67cR1)
	#call replace(i7,j1/2+j2/2-j3/2,j,j1,j2,j3,Md67c,dotmapMd67cR2)
	if (count(Md67c,1)) Multiply replace_(Md67c,Md67d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d21
	if (count(Md67d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j1,i5,j5);
	if (count(Md67d,1)) Multiply replace_(Md67d,Md21,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd21 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared67()
* Topology: 0-1 1-2* 2-3 2-3 3-7 3-7 1-7 7-9
* Dots: p0.p4,p0.p2,p2.p4
* Apply automorphisms
if (match(Md67*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n4,$n5,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4);
elseif ($bestiso == 2); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd67 automorphism;

#call CheckRemovedPropagators(d67,6,1,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d67;
#endif
#endprocedure

#procedure Reduced67()
	#call Prepared67()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd67'
		#call MtoZ(Md67,Zd67,i,9)
		#call Reduce(d67)
		#call ZtoM(Zd67,Md67,i,9)
		#call Prepared67()
#else
		#if `USETURBO'
			#call TurboMd67()
		#endif
		#call insertionS(Md67,i2,i3,i8,i9,i2,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md67b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond67()
#endif
	#endif
#endprocedure
*--#] reduce-d67 : 
*--#[ reduce-d66 :
#procedure Insertiond66()
* merge propagators with same momentum, and repeated dots
	if (count(Md66b,1)) Multiply replace_(Md66b,Md66c);

* rewrite insertion dots
	if (count(Md66c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,j1/2+j3/2-j4/2-j5/2,j,j1,j3,j4,j5,Md66c,dotmapMd66cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md66c,dotmapMd66cR2)
	#call replace(i8,j2/2+j3/2-j5/2,j,j2,j3,j5,Md66c,dotmapMd66cR3)
	#call replace(i9,`Q2'/2+j1/2-j5/2,j,j1,j5,Md66c,dotmapMd66cR4)
	#call replace(i10,`Q2'/2+j3/2-j4/2,j,j3,j4,Md66c,dotmapMd66cR5)
	#call replace(i11,`Q2'/2+j2/2-j4/2-j5/2,j,j2,j4,j5,Md66c,dotmapMd66cR6)
	if (count(Md66c,1)) Multiply replace_(Md66c,Md66d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star55
	if (count(Md66d,1)) Multiply replace_(i1,j4,i2,j5,i3,j2,i4,j3,i5,j1);
	if (count(Md66d,1)) Multiply replace_(Md66d,Mt1star55,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star55 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared66()
* Topology: 0-1 3-4 2-3 1-2 1-3 2-3* 2-4 4-9
* Dots: p0.p2,p1.p2,p2.p3
* Apply automorphisms
if (match(Md66*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
	#call hash(1,$n9,$n8,$n7,$n3,$n5,$n1,$n6,$n2,$n4)
endif;
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n8,$n9,$n7,$n4,$n5,$n6,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply sign_($n7+$n8+$n9)*replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 1); Multiply sign_($n7+$n8+$n9)*replace_(i1,i4,i3,i6,i4,i1,i6,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i8,i9,i9,i8);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd66 automorphism;

#call CheckRemovedPropagators(d66,6,5,1,3,4,5,6,2)
#if `$DOACTION' == 0
.sort:reduce d66;
#endif
#endprocedure

#procedure Reduced66()
	#call Prepared66()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd66'
		#call MtoZ(Md66,Zd66,i,9)
		#call Reduce(d66)
		#call ZtoM(Zd66,Md66,i,9)
		#call Prepared66()
#else
		#if `USETURBO'
			#call TurboMd66()
		#endif
		#call insertionS(Md66,i2,i5,i7,i8,i9,i2,`Q2',i1,i3,i7,i8,i9,i10,i11,i12,0,1)
		if (count(Md66b,1)) Multiply replace_(<i6,i5>,...,<i12,i11>);
		#call Insertiond66()
#endif
	#endif
#endprocedure
*--#] reduce-d66 : 
*--#[ reduce-d65 :
#procedure Insertiond65()
* merge propagators with same momentum, and repeated dots
	if (count(Md65b,1)) Multiply replace_(Md65b,Md65c,i3,i2,i2,i3,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md65c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j3/2,j,j1,j3,Md65c,dotmapMd65cR1)
	#call replace(i7,j2/2+j3/2-j4/2,j,j2,j3,j4,Md65c,dotmapMd65cR2)
	if (count(Md65c,1)) Multiply replace_(Md65c,Md65d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d21
	if (count(Md65d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md65d,1)) Multiply replace_(Md65d,Md21,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd21 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared65()
* Topology: 0-1 1-8 1-2* 1-2 2-4 4-8 2-4 8-9
* Dots: p0.p4,p0.p2,p2.p4
* Apply automorphisms
if (match(Md65*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd65 automorphism;

#call CheckRemovedPropagators(d65,6,2,2,5,1,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d65;
#endif
#endprocedure

#procedure Reduced65()
	#call Prepared65()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd65'
		#call MtoZ(Md65,Zd65,i,9)
		#call Reduce(d65)
		#call ZtoM(Zd65,Md65,i,9)
		#call Prepared65()
#else
		#if `USETURBO'
			#call TurboMd65()
		#endif
		#call insertionS(Md65,i2,i3,i8,i9,i2,`Q2',i4,i8,i9,i10,1,0)
		if (count(Md65b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond65()
#endif
	#endif
#endprocedure
*--#] reduce-d65 : 
*--#[ reduce-d64 :
#procedure Insertiond64()
* merge propagators with same momentum, and repeated dots
	if (count(Md64b,1)) Multiply replace_(Md64b,Md64c,i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md64c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md64c,dotmapMd64cR1)
	#call replace(i7,-j2/2-j3/2+j4/2+j5,j,j2,j3,j4,j5,Md64c,dotmapMd64cR2)
	if (count(Md64c,1)) Multiply replace_(Md64c,Md64d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d12
	if (count(Md64d,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4,i5,j5);
	if (count(Md64d,1)) Multiply replace_(Md64d,Md12,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd12 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared64()
* Topology: 0-1 3-4 1-3 1-5 4-5* 1-3 1-5 4-9
* Dots: p0.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md64*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n3,$n2,$n4,$n6,$n5,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n3,$n5,$n4,$n6,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i3,i6,i5,i2,i6,i3);
elseif ($bestiso == 2); Multiply replace_(i3,i6,i6,i3);
elseif ($bestiso == 3); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd64 automorphism;

#call CheckRemovedPropagators(d64,6,2,1,4,2,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d64;
#endif
#endprocedure

#procedure Reduced64()
	#call Prepared64()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd64'
		#call MtoZ(Md64,Zd64,i,9)
		#call Reduce(d64)
		#call ZtoM(Zd64,Md64,i,9)
		#call Prepared64()
#else
		#if `USETURBO'
			#call TurboMd64()
		#endif
		#call insertionS(Md64,i2,i5,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md64b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond64()
#endif
	#endif
#endprocedure
*--#] reduce-d64 : 
*--#[ reduce-d63 :
#procedure Insertiond63()
* merge propagators with same momentum, and repeated dots
	if (count(Md63b,1)) Multiply replace_(Md63b,Md63c,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md63c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2-j5,j,j2,j3,j5,Md63c,dotmapMd63cR1)
	#call replace(i7,-j1/2+j2/2-j4/2,j,j1,j2,j4,Md63c,dotmapMd63cR2)
	if (count(Md63c,1)) Multiply replace_(Md63c,Md63d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d20
	if (count(Md63d,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j4,i5,j5);
	if (count(Md63d,1)) Multiply replace_(Md63d,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared63()
* Topology: 0-1 2-7 1-2 1-7 3-7* 2-3 2-3 7-9
* Dots: p0.p1,p0.p5,p1.p5
* Apply automorphisms
if (match(Md63*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n5,$n6,$n4,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i5,i6,i6,i5);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd63 automorphism;

#call CheckRemovedPropagators(d63,6,2,2,4,1,3,5,6)
#if `$DOACTION' == 0
.sort:reduce d63;
#endif
#endprocedure

#procedure Reduced63()
	#call Prepared63()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd63'
		#call MtoZ(Md63,Zd63,i,9)
		#call Reduce(d63)
		#call ZtoM(Zd63,Md63,i,9)
		#call Prepared63()
#else
		#if `USETURBO'
			#call TurboMd63()
		#endif
		#call insertionS(Md63,i5,i6,i8,i9,i5,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md63b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond63()
#endif
	#endif
#endprocedure
*--#] reduce-d63 : 
*--#[ reduce-d62 :
#procedure Insertiond62()
* merge propagators with same momentum, and repeated dots
	if (count(Md62b,1)) Multiply replace_(Md62b,Md62c,i4,i3,i5,i4,i6,i5,i7,-i6,i8,-i7,i9,i8);

* rewrite insertion dots
	if (count(Md62c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j1/2-j4/2-j5,j,j1,j4,j5,Md62c,dotmapMd62cR1)
	#call replace(i7,-`Q2'/2+j1/2-j2/2+j3/2-j5,j,j1,j2,j3,j5,Md62c,dotmapMd62cR2)
	#call replace(i8,`Q2'/2+j1/2-j4/2,j,j1,j4,Md62c,dotmapMd62cR3)
	if (count(Md62c,1)) Multiply replace_(Md62c,Md62d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d18
	if (count(Md62d,1)) Multiply replace_(i1,j3,i2,j2,i3,j4,i4,j1,i5,j5);
	if (count(Md62d,1)) Multiply replace_(Md62d,Md18,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd18 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared62()
* Topology: 0-1 1-2* 2-3 3-4 3-4 2-4 1-3 2-9
* Dots: p0.p2,p0.p3,p1.p3
* Apply automorphisms
if (match(Md62*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd62 automorphism;

#call CheckRemovedPropagators(d62,6,3,1,5,6,2,3,4)
#if `$DOACTION' == 0
.sort:reduce d62;
#endif
#endprocedure

#procedure Reduced62()
	#call Prepared62()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd62'
		#call MtoZ(Md62,Zd62,i,9)
		#call Reduce(d62)
		#call ZtoM(Zd62,Md62,i,9)
		#call Prepared62()
#else
		#if `USETURBO'
			#call TurboMd62()
		#endif
		#call insertionS(Md62,i3,i4,i8,i9,i3,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md62b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond62()
#endif
	#endif
#endprocedure
*--#] reduce-d62 : 
*--#[ reduce-d61 :
#procedure Insertiond61()
* merge propagators with same momentum, and repeated dots
	if (count(Md61b,1)) Multiply replace_(Md61b,Md61c,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md61c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j2/2-j3/2-j5,j,j2,j3,j5,Md61c,dotmapMd61cR1)
	#call replace(i7,-j1/2+j3/2-j4/2,j,j1,j3,j4,Md61c,dotmapMd61cR2)
	if (count(Md61c,1)) Multiply replace_(Md61c,Md61d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d20
	if (count(Md61d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i4,j4,i5,j5);
	if (count(Md61d,1)) Multiply replace_(Md61d,Md20,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd20 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared61()
* Topology: 0-1 4-5 1-4 1-5 2-4 2-5* 2-5 4-9
* Dots: p0.p1,p0.p5,p1.p5
* Apply automorphisms
if (match(Md61*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd61 automorphism;

#call CheckRemovedPropagators(d61,6,3,3,4,5,1,2,6)
#if `$DOACTION' == 0
.sort:reduce d61;
#endif
#endprocedure

#procedure Reduced61()
	#call Prepared61()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd61'
		#call MtoZ(Md61,Zd61,i,9)
		#call Reduce(d61)
		#call ZtoM(Zd61,Md61,i,9)
		#call Prepared61()
#else
		#if `USETURBO'
			#call TurboMd61()
		#endif
		#call insertionS(Md61,i5,i6,i8,i9,i5,`Q2',i1,i8,i9,i10,1,0)
		if (count(Md61b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond61()
#endif
	#endif
#endprocedure
*--#] reduce-d61 : 
*--#[ reduce-d60 :
#procedure Insertiond60()
* merge propagators with same momentum, and repeated dots
	if (count(Md60b,1)) Multiply replace_(Md60b,Md60c);

* rewrite insertion dots
	if (count(Md60c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j5/2,j,j1,j5,Md60c,dotmapMd60cR1)
	#call replace(i7,-j1/2-j3/2+j4/2+j5/2,j,j1,j3,j4,j5,Md60c,dotmapMd60cR2)
	#call replace(i8,-`Q2'/2-j3/2+j4/2,j,j3,j4,Md60c,dotmapMd60cR3)
	#call replace(i9,-j1/2-j2/2+j4/2,j,j1,j2,j4,Md60c,dotmapMd60cR4)
	#call replace(i10,-`Q2'/2-j2/2+j4/2+j5/2,j,j2,j4,j5,Md60c,dotmapMd60cR5)
	#call replace(i11,j2/2+j3/2-j5/2,j,j2,j3,j5,Md60c,dotmapMd60cR6)
	if (count(Md60c,1)) Multiply replace_(Md60c,Md60d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d43
	if (count(Md60d,1)) Multiply replace_(i1,j4,i2,j2,i3,j5,i4,j1,i5,j3);
	if (count(Md60d,1)) Multiply replace_(Md60d,Md43,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd43 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared60()
* Topology: 0-1* 1-3 1-6 5-6 3-5 3-6 1-5 3-9
* Dots: p0.p2,p0.p3,p0.p4
* Apply automorphisms
if (match(Md60*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n7,$n8,$n9,$n5,$n6,$n2,$n3,$n4,$n1)
if (($n9==0)&&($n7==0));
	#call hash(2,$n9,$n8,$n7,$n2,$n4,$n5,$n3,$n6,$n1)
	#call hash(3,$n9,$n8,$n7,$n4,$n2,$n6,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n7+$n9)*replace_(i2,i4,i4,i2,i5,i6,i6,i5,i7,i9,i9,i7);
elseif ($bestiso == 2); Multiply sign_($n8)*replace_(i2,i6,i4,i5,i5,i4,i6,i2);
elseif ($bestiso == 3); Multiply sign_($n7+$n8+$n9)*replace_(i2,i5,i4,i6,i5,i2,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd60 automorphism;

#call CheckRemovedPropagators(d60,6,5,2,3,4,5,6,1)
#if `$DOACTION' == 0
.sort:reduce d60;
#endif
#endprocedure

#procedure Reduced60()
	#call Prepared60()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd60'
		#call MtoZ(Md60,Zd60,i,9)
		#call Reduce(d60)
		#call ZtoM(Zd60,Md60,i,9)
		#call Prepared60()
#else
		#if `USETURBO'
			#call TurboMd60()
		#endif
		#call MtoZ(Md60,Zd60,i,9)
		#call carpet(Zd60,0,1,0,0,0,2,7,2,3,4)
		#call ZtoM(Zd60b,Md60b,i,11)
		#call Insertiond60()
#endif
	#endif
#endprocedure
*--#] reduce-d60 : 
*--#[ reduce-d59 :
#procedure Insertiond59()
* merge propagators with same momentum, and repeated dots
	if (count(Md59b,1)) Multiply replace_(Md59b,Md59c,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md59c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2-j5,j,j2,j3,j5,Md59c,dotmapMd59cR1)
	#call replace(i7,-j1/2+j2/2-j4/2,j,j1,j2,j4,Md59c,dotmapMd59cR2)
	if (count(Md59c,1)) Multiply replace_(Md59c,Md59d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d19
	if (count(Md59d,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i4,j4,i5,j5);
	if (count(Md59d,1)) Multiply replace_(Md59d,Md19,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd19 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared59()
* Topology: 0-1 2-7* 1-2 1-7 2-4 4-7 2-4 7-9
* Dots: p0.p1,p0.p4,p1.p4
* Apply automorphisms
if (match(Md59*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n4,$n5,$n6,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i6,i6,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd59 automorphism;

#call CheckRemovedPropagators(d59,6,3,1,2,5,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d59;
#endif
#endprocedure

#procedure Reduced59()
	#call Prepared59()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd59'
		#call MtoZ(Md59,Zd59,i,9)
		#call Reduce(d59)
		#call ZtoM(Zd59,Md59,i,9)
		#call Prepared59()
#else
		#if `USETURBO'
			#call TurboMd59()
		#endif
		#call insertionS(Md59,i4,i6,i8,i9,i4,`Q2',i1,i8,i9,i10,0,0)
		if (count(Md59b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond59()
#endif
	#endif
#endprocedure
*--#] reduce-d59 : 
*--#[ reduce-d58 :
#procedure Insertiond58()
* merge propagators with same momentum, and repeated dots
	if (count(Md58b,1)) Multiply replace_(Md58b,Md58c);

* rewrite insertion dots
	if (count(Md58c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md58c,dotmapMd58cR1)
	#call replace(i7,`Q2'/2-j1/2+j2/2,j,j1,j2,Md58c,dotmapMd58cR2)
	#call replace(i8,-`Q2'/2-j3/2+j5/2,j,j3,j5,Md58c,dotmapMd58cR3)
	#call replace(i9,`Q2'/2-j1/2-j2/2,j,j1,j2,Md58c,dotmapMd58cR4)
	#call replace(i10,-j1/2-j3/2+j4/2,j,j1,j3,j4,Md58c,dotmapMd58cR5)
	#call replace(i11,-`Q2'/2+j1/2-j4/2+j5/2,j,j1,j4,j5,Md58c,dotmapMd58cR6)
	if (count(Md58c,1)) Multiply replace_(Md58c,Md58d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to t1star05
	if (count(Md58d,1)) Multiply replace_(i1,j1,i2,j4,i3,j2,i4,j5,i5,j3);
	if (count(Md58d,1)) Multiply replace_(Md58d,Mt1star05,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOt1star05 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared58()
* Topology: 0-2 2-5 1-5 4-5 1-2 1-4* 2-4 5-9
* Dots: p0.p2,p0.p3,p0.p4
* Apply automorphisms
if (match(Md58*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n7,$n8,$n4,$n5,$n6,$n2,$n3,$n1)
endif;
if (($n8==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n7,$n8,$n9,$n3,$n5,$n2,$n6,$n4,$n1)
endif;
if (($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n8,$n9,$n7,$n2,$n5,$n3,$n4,$n6,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply sign_($n9)*replace_(i2,i3,i3,i2,i4,i6,i6,i4,i7,i8,i8,i7);
elseif ($bestiso == 2); Multiply sign_($n7+$n9)*replace_(i2,i4,i3,i6,i4,i2,i6,i3,i7,i9,i9,i7);
elseif ($bestiso == 3); Multiply sign_($n8+$n9)*replace_(i2,i6,i3,i4,i4,i3,i6,i2,i8,i9,i9,i8);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd58 automorphism;

#call CheckRemovedPropagators(d58,6,5,2,3,4,5,6,1)
#if `$DOACTION' == 0
.sort:reduce d58;
#endif
#endprocedure

#procedure Reduced58()
	#call Prepared58()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd58'
		#call MtoZ(Md58,Zd58,i,9)
		#call Reduce(d58)
		#call ZtoM(Zd58,Md58,i,9)
		#call Prepared58()
#else
		#if `USETURBO'
			#call TurboMd58()
		#endif
		#call MtoZ(Md58,Zd58,i,9)
		#call carpet(Zd58,0,1,0,0,1,2,7,2,3,4)
		#call ZtoM(Zd58b,Md58b,i,11)
		#call Insertiond58()
#endif
	#endif
#endprocedure
*--#] reduce-d58 : 
*--#[ reduce-d57 :
#procedure Insertiond57()
* merge propagators with same momentum, and repeated dots
	if (count(Md57b,1)) Multiply replace_(Md57b,Md57c);

* rewrite insertion dots
	if (count(Md57c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md57c,dotmapMd57cR1)
	#call replace(i7,`Q2'/2-j1/2+j2/2,j,j1,j2,Md57c,dotmapMd57cR2)
	#call replace(i8,j1/2-j2/2+j4/2-j5/2,j,j1,j2,j4,j5,Md57c,dotmapMd57cR3)
	#call replace(i9,`Q2'/2-j1/2-j2/2,j,j1,j2,Md57c,dotmapMd57cR4)
	#call replace(i10,j1/2+j3/2-j5/2,j,j1,j3,j5,Md57c,dotmapMd57cR5)
	#call replace(i11,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md57c,dotmapMd57cR6)
	if (count(Md57c,1)) Multiply replace_(Md57c,Md57d,<j1,i1>,...,<j5,i5>);
* map dots to  and change topology to d30
	if (count(Md57d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md57d,1)) Multiply replace_(Md57d,Md30,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd30 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared57()
* Topology: 0-2 3-5 1-5 2-5 1-3 1-2* 2-3 5-9
* Dots: p0.p1,p0.p2,p0.p4
* Apply automorphisms
if (match(Md57*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
endif;
ModuleOption local,<$n1>,...,<$n9>;
.sort:Zd57 automorphism;

#call CheckRemovedPropagators(d57,6,5,1,2,4,5,6,3)
#if `$DOACTION' == 0
.sort:reduce d57;
#endif
#endprocedure

#procedure Reduced57()
	#call Prepared57()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd57'
		#call MtoZ(Md57,Zd57,i,9)
		#call Reduce(d57)
		#call ZtoM(Zd57,Md57,i,9)
		#call Prepared57()
#else
		#if `USETURBO'
			#call TurboMd57()
		#endif
		#call MtoZ(Md57,Zd57,i,9)
		#call carpet(Zd57,0,3,0,0,1,2,7,1,2,4)
		#call ZtoM(Zd57b,Md57b,i,11)
		#call Insertiond57()
#endif
	#endif
#endprocedure
*--#] reduce-d57 : 
*--#[ reduce-d56 :
#procedure Insertiond56()
* merge propagators with same momentum, and repeated dots
	if (count(Md56b,1)) Multiply replace_(Md56b,Md56c,i2,i1,i3,i2,i1,i3,i4,i3,i5,i4,i6,i5,i7,i6,i8,i7,i9,i8);

* rewrite insertion dots
	if (count(Md56c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j3/2,j,j1,j3,Md56c,dotmapMd56cR1)
	#call replace(i7,`Q2'/2+j2/2-j4/2-j5,j,j2,j4,j5,Md56c,dotmapMd56cR2)
	#call replace(i8,`Q2'/2+j2/2-j4/2,j,j2,j4,Md56c,dotmapMd56cR3)
	if (count(Md56c,1)) Multiply replace_(Md56c,Md56d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p2 and change topology to d25
	if (count(Md56d,1)) Multiply replace_(i1,j2,i2,j4,i3,j3,i4,j1);
	#call replace(i5,`Q2'/2+j2/2-j3/2-j5,j,j2,j3,j5,Md56d,dotmapMd56dR1)
	if (count(Md56d,1)) Multiply replace_(Md56d,Md25,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd25 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared56()
* Topology: 0-1 1-5 1-3 1-5 3-4* 3-5 3-4 4-9
* Dots: p2.p4,p0.p1,p1.p4
* Apply automorphisms
if (match(Md56*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd56 automorphism;

#call CheckRemovedPropagators(d56,6,2,4,5,1,2,3,6)
#if `$DOACTION' == 0
.sort:reduce d56;
#endif
#endprocedure

#procedure Reduced56()
	#call Prepared56()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd56'
		#call MtoZ(Md56,Zd56,i,9)
		#call Reduce(d56)
		#call ZtoM(Zd56,Md56,i,9)
		#call Prepared56()
#else
		#if `USETURBO'
			#call TurboMd56()
		#endif
		#call insertionS(Md56,i1,i3,i8,i9,i1,`Q2',i4,i8,i9,i10,0,0)
		if (count(Md56b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond56()
#endif
	#endif
#endprocedure
*--#] reduce-d56 : 
*--#[ reduce-d55 :
#procedure Insertiond55()
* merge propagators with same momentum, and repeated dots
	if (count(Md55b,1)) Multiply replace_(Md55b,Md55c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i8,i5,i7,i6,i9,i7);

* rewrite insertion dots
	if (count(Md55c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md55c,dotmapMd55cR1)
	#call replace(i7,j2/2-j3/2+j4/2+j5,j,j2,j3,j4,j5,Md55c,dotmapMd55cR2)
	if (count(Md55c,1)) Multiply replace_(Md55c,Md55d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d22
	if (count(Md55d,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i4,j2,i5,j5);
	if (count(Md55d,1)) Multiply replace_(Md55d,Md22,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd22 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared55()
* Topology: 0-1* 1-2 2-3 3-5 3-5 2-5 1-2 3-9
* Dots: p0.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md55*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 3); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd55 automorphism;

#call CheckRemovedPropagators(d55,6,1,5,1,2,3,4,6)
#if `$DOACTION' == 0
.sort:reduce d55;
#endif
#endprocedure

#procedure Reduced55()
	#call Prepared55()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd55'
		#call MtoZ(Md55,Zd55,i,9)
		#call Reduce(d55)
		#call ZtoM(Zd55,Md55,i,9)
		#call Prepared55()
#else
		#if `USETURBO'
			#call TurboMd55()
		#endif
		#call insertionS(Md55,i1,i6,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md55b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond55()
#endif
	#endif
#endprocedure
*--#] reduce-d55 : 
*--#[ reduce-d54 :
#procedure Insertiond54()
* merge propagators with same momentum, and repeated dots
	if (count(Md54b,1)) Multiply replace_(Md54b,Md54c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i6,i5,i9,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md54c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md54c,dotmapMd54cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2,j,j2,j3,Md54c,dotmapMd54cR2)
	if (count(Md54c,1)) Multiply replace_(Md54c,Md54d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p2 and change topology to d26
	if (count(Md54d,1)) Multiply replace_(i1,j2,i2,j1,i3,j4,i4,j3,i5,j5);
	if (count(Md54d,1)) Multiply replace_(Md54d,Md26,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd26 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared54()
* Topology: 0-1* 1-2 2-3 3-4 3-4 2-3 1-2 4-9
* Dots: p2.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md54*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,15
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n2,$n3,$n4,$n5,$n1)
	#call hash(1,$n9,$n8,$n7,$n1,$n5,$n3,$n4,$n2,$n6)
	#call hash(2,$n9,$n8,$n7,$n1,$n2,$n4,$n3,$n5,$n6)
	#call hash(3,$n9,$n8,$n7,$n1,$n2,$n3,$n4,$n5,$n6)
	#call hash(4,$n9,$n7,$n7,$n4,$n5,$n1,$n6,$n2,$n3)
	#call hash(5,$n9,$n8,$n7,$n4,$n2,$n1,$n6,$n5,$n3)
	#call hash(6,$n9,$n8,$n8,$n3,$n5,$n6,$n1,$n2,$n4)
	#call hash(7,$n9,$n8,$n7,$n3,$n5,$n1,$n6,$n2,$n4)
	#call hash(8,$n9,$n8,$n7,$n3,$n2,$n6,$n1,$n5,$n4)
	#call hash(9,$n9,$n8,$n7,$n3,$n2,$n1,$n6,$n5,$n4)
endif;
if (($n9==0)&&($n7==0));
	#call hash(10,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n7==0));
	#call hash(11,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
	#call hash(12,$n9,$n8,$n7,$n4,$n2,$n6,$n1,$n5,$n3)
endif;
if (($n8==0)&&($n9==0));
	#call hash(13,$n9,$n8,$n7,$n1,$n5,$n4,$n3,$n2,$n6)
endif;
	#call hash(14,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(15,$n9,$n7,$n8,$n4,$n5,$n6,$n1,$n2,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,15
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2);
elseif ($bestiso == 1); Multiply replace_(i1,i6,i3,i4,i4,i3,i6,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i6,i2,i5,i5,i2,i6,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i6,i2,i5,i3,i4,i4,i3,i5,i2,i6,i1);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i3,i6,i4,i1,i6,i4,i8,i7);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i2,i5,i3,i6,i4,i1,i5,i2,i6,i4);
elseif ($bestiso == 6); Multiply replace_(i1,i4,i3,i1,i4,i6,i6,i3,i7,i8);
elseif ($bestiso == 7); Multiply replace_(i1,i4,i3,i6,i4,i1,i6,i3);
elseif ($bestiso == 8); Multiply replace_(i1,i4,i2,i5,i3,i1,i4,i6,i5,i2,i6,i3);
elseif ($bestiso == 9); Multiply replace_(i1,i4,i2,i5,i3,i6,i4,i1,i5,i2,i6,i3);
elseif ($bestiso == 10); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 11); Multiply replace_(i2,i5,i5,i2);
elseif ($bestiso == 12); Multiply replace_(i1,i3,i2,i5,i3,i1,i4,i6,i5,i2,i6,i4);
elseif ($bestiso == 13); Multiply replace_(i1,i6,i6,i1);
elseif ($bestiso == 15); Multiply replace_(i1,i3,i3,i1,i4,i6,i6,i4,i7,i8,i8,i7);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso15>,$bestiso,$bestisov;
.sort:Zd54 automorphism;

#call CheckRemovedPropagators(d54,6,0,1,2,3,4,5,6)
#if `$DOACTION' == 0
.sort:reduce d54;
#endif
#endprocedure

#procedure Reduced54()
	#call Prepared54()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd54'
		#call MtoZ(Md54,Zd54,i,9)
		#call Reduce(d54)
		#call ZtoM(Zd54,Md54,i,9)
		#call Prepared54()
#else
		#if `USETURBO'
			#call TurboMd54()
		#endif
		#call insertionS(Md54,i1,i6,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md54b,1)) Multiply replace_(<i7,i6>,...,<i10,i9>);
		#call Insertiond54()
#endif
	#endif
#endprocedure
*--#] reduce-d54 : 
#call ReduceEdge(6,\
d113,d112,d111,d110,d109,d108,d107,d106,d105,d104,d103,d102,d101,d100,d99,d98,\
d97,d96,d95,d94,d93,d92,d91,d90,d89,d88,d87,d86,d85,d84,d83,d82,d81,d80,d79,d78\
,d77,d76,d75,d74,d73,d72,d71,d70,d69,d68,d67,d66,d65,d64,d63,d62,d61,d60,d59,\
d58,d57,d56,d55,d54\
)
*--#] 6 edges : 
*--#[ 5 edges :
*--#[ reduce-d53 :
#procedure Insertiond53()
* merge propagators with same momentum, and repeated dots
	if (count(Md53b,1)) Multiply replace_(Md53b,Md53c,i14,i5,i15,i6,i16,i7,i17,i8,i18,i9,i19,i14);

* rewrite insertion dots
	if (count(Md53c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5,i6,j6,i7,j7,i8,j8,i9,j9);
	#call replace(i10,`Q2'-j5-j6-j7,j,j5,j6,j7,Md53c,dotmapMd53cR1)
	#call replace(i11,-j2+j5-j8-j9,j,j2,j5,j8,j9,Md53c,dotmapMd53cR2)
	#call replace(i12,`Q2'/2-j1/2+j2/2-j3/2+j4/2-j5-j7+j9,j,j1,j2,j3,j4,j5,j7,j9,Md53c,dotmapMd53cR3)
	#call replace(i13,`Q2'/2-j1/2+j2/2+j3/2-j4/2-j5-j6+j8,j,j1,j2,j3,j4,j5,j6,j8,Md53c,dotmapMd53cR4)
	#call replace(i14,-`Q2'/2+j1/2-j2/2-j3/2-j4/2+j5+j6+j7-j8-j9,j,j1,j2,j3,j4,j5,j6,j7,j8,j9,Md53c,dotmapMd53cR5)
	if (count(Md53c,1)) Multiply replace_(Md53c,Md53d,<j1,i1>,...,<j9,i9>);
* map dots to p0.p3,p0.p4,p0.p1,p1.p3,p1.p4 and change topology to d27
	if (count(Md53d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i6,j5,i7,j6);
	#call replace(i5,`Q2'-j5-j6-j7,j,j5,j6,j7,Md53d,dotmapMd53dR1)
	#call replace(i8,`Q2'/2+j1/2-j2/2-j3/2+j4/2-j6-j7+j9,j,j1,j2,j3,j4,j6,j7,j9,Md53d,dotmapMd53dR2)
	#call replace(i9,`Q2'/2+j1/2-j2/2+j3/2-j4/2-j5-j7+j8,j,j1,j2,j3,j4,j5,j7,j8,Md53d,dotmapMd53dR3)
	if (count(Md53d,1)) Multiply replace_(Md53d,Md27,<j1,i1>,...,<j9,i9>);
	#redefine HASTOPOd27 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared53()
* Topology: 0-1 1-2 1-2 1-2 1-2 1-2 2-9
* Dots: p0.p3,p0.p4,p0.p5,p3.p4,p3.p5,p0.p1,p1.p3,p1.p4,p1.p5
* Apply automorphisms
if (match(Md53*<1/i1^n1?$n1>*...*<1/i14^n14?$n14>));
#do i=0,119
	$iso`i'=`HASHBASE'^16;
#enddo
if (($n6==0)&&($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(0,$n14,$n13,$n12,$n11,$n13,$n9,$n11,$n8,$n7,$n1,$n5,$n4,$n3,$n2)
	#call hash(1,$n14,$n13,$n12,$n11,$n10,$n14,$n7,$n11,$n8,$n4,$n1,$n5,$n3,$n2)
	#call hash(2,$n14,$n13,$n12,$n11,$n12,$n14,$n6,$n8,$n11,$n3,$n5,$n1,$n4,$n2)
	#call hash(3,$n14,$n13,$n12,$n11,$n14,$n10,$n11,$n6,$n8,$n1,$n3,$n5,$n4,$n2)
	#call hash(4,$n14,$n13,$n12,$n11,$n13,$n12,$n7,$n6,$n11,$n4,$n3,$n1,$n5,$n2)
	#call hash(5,$n14,$n13,$n12,$n11,$n9,$n13,$n6,$n11,$n7,$n3,$n1,$n4,$n5,$n2)
	#call hash(6,$n14,$n10,$n9,$n6,$n10,$n9,$n8,$n8,$n7,$n2,$n5,$n4,$n1,$n3)
	#call hash(7,$n9,$n13,$n10,$n6,$n10,$n9,$n7,$n7,$n8,$n4,$n2,$n5,$n1,$n3)
	#call hash(8,$n12,$n10,$n12,$n6,$n10,$n9,$n11,$n8,$n6,$n1,$n5,$n2,$n4,$n3)
	#call hash(9,$n14,$n12,$n10,$n6,$n10,$n14,$n8,$n11,$n8,$n2,$n1,$n5,$n4,$n3)
	#call hash(10,$n9,$n12,$n12,$n6,$n10,$n9,$n7,$n11,$n6,$n4,$n1,$n2,$n5,$n3)
	#call hash(11,$n12,$n13,$n9,$n6,$n13,$n9,$n11,$n7,$n7,$n1,$n2,$n4,$n5,$n3)
	#call hash(12,$n9,$n13,$n12,$n7,$n10,$n9,$n6,$n8,$n6,$n3,$n5,$n2,$n1,$n4)
	#call hash(13,$n14,$n9,$n12,$n7,$n10,$n10,$n8,$n6,$n8,$n2,$n3,$n5,$n1,$n4)
	#call hash(14,$n14,$n13,$n13,$n7,$n10,$n14,$n8,$n8,$n11,$n2,$n5,$n1,$n3,$n4)
	#call hash(15,$n13,$n13,$n12,$n7,$n14,$n9,$n11,$n7,$n8,$n1,$n2,$n5,$n3,$n4)
	#call hash(16,$n9,$n13,$n13,$n7,$n12,$n9,$n6,$n7,$n11,$n3,$n2,$n1,$n5,$n4)
	#call hash(17,$n13,$n9,$n12,$n7,$n10,$n9,$n11,$n6,$n6,$n1,$n3,$n2,$n5,$n4)
	#call hash(18,$n14,$n10,$n12,$n8,$n10,$n9,$n7,$n6,$n6,$n4,$n3,$n2,$n1,$n5)
	#call hash(19,$n10,$n13,$n12,$n8,$n9,$n9,$n6,$n7,$n7,$n3,$n2,$n4,$n1,$n5)
	#call hash(20,$n14,$n13,$n14,$n8,$n13,$n9,$n7,$n7,$n11,$n4,$n2,$n1,$n3,$n5)
	#call hash(21,$n14,$n14,$n12,$n8,$n10,$n13,$n8,$n11,$n7,$n2,$n1,$n4,$n3,$n5)
	#call hash(22,$n14,$n10,$n14,$n8,$n10,$n12,$n8,$n6,$n11,$n2,$n3,$n1,$n4,$n5)
	#call hash(23,$n10,$n14,$n12,$n8,$n10,$n9,$n6,$n11,$n6,$n3,$n1,$n2,$n4,$n5)
endif;
if (($n6==0)&&($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(24,$n14,$n14,$n13,$n11,$n10,$n9,$n8,$n8,$n7,$n2,$n5,$n4,$n3,$n1)
	#call hash(25,$n13,$n13,$n14,$n11,$n10,$n9,$n7,$n7,$n8,$n4,$n2,$n5,$n3,$n1)
	#call hash(26,$n12,$n14,$n12,$n11,$n10,$n9,$n6,$n8,$n6,$n3,$n5,$n2,$n4,$n1)
	#call hash(27,$n14,$n12,$n14,$n11,$n10,$n10,$n8,$n6,$n8,$n2,$n3,$n5,$n4,$n1)
	#call hash(28,$n13,$n12,$n12,$n11,$n10,$n9,$n7,$n6,$n6,$n4,$n3,$n2,$n5,$n1)
	#call hash(29,$n12,$n13,$n13,$n11,$n9,$n9,$n6,$n7,$n7,$n3,$n2,$n4,$n5,$n1)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(30,$n14,$n13,$n12,$n11,$n12,$n10,$n11,$n8,$n6,$n1,$n5,$n3,$n4,$n2)
	#call hash(31,$n14,$n13,$n12,$n11,$n9,$n12,$n7,$n11,$n6,$n4,$n1,$n3,$n5,$n2)
	#call hash(32,$n14,$n13,$n9,$n7,$n10,$n10,$n8,$n8,$n6,$n2,$n5,$n3,$n1,$n4)
	#call hash(33,$n13,$n13,$n9,$n7,$n12,$n9,$n11,$n7,$n6,$n1,$n2,$n3,$n5,$n4)
	#call hash(34,$n14,$n13,$n10,$n8,$n9,$n9,$n7,$n7,$n6,$n4,$n2,$n3,$n1,$n5)
	#call hash(35,$n14,$n14,$n10,$n8,$n10,$n12,$n8,$n11,$n6,$n2,$n1,$n3,$n4,$n5)
endif;
if (($n7==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n13==0)&&($n14==0));
	#call hash(36,$n14,$n14,$n12,$n11,$n10,$n10,$n8,$n8,$n6,$n2,$n5,$n3,$n4,$n1)
	#call hash(37,$n13,$n13,$n12,$n11,$n9,$n9,$n7,$n7,$n6,$n4,$n2,$n3,$n5,$n1)
	#call hash(38,$n14,$n10,$n12,$n6,$n10,$n14,$n8,$n8,$n11,$n2,$n5,$n1,$n4,$n3)
	#call hash(39,$n9,$n13,$n12,$n6,$n13,$n9,$n7,$n7,$n11,$n4,$n2,$n1,$n5,$n3)
endif;
if (($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(40,$n14,$n13,$n12,$n11,$n9,$n9,$n6,$n8,$n7,$n3,$n5,$n4,$n1,$n2)
	#call hash(41,$n14,$n13,$n12,$n11,$n10,$n10,$n7,$n6,$n8,$n4,$n3,$n5,$n1,$n2)
endif;
if (($n9==0)&&($n10==0));
	#call hash(42,$n12,$n14,$n13,$n11,$n9,$n9,$n6,$n8,$n7,$n3,$n5,$n4,$n2,$n1)
	#call hash(43,$n13,$n12,$n14,$n11,$n10,$n10,$n7,$n6,$n8,$n4,$n3,$n5,$n2,$n1)
endif;
if (($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(44,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n1,$n2)
endif;
if (($n10==0)&&($n14==0));
	#call hash(45,$n10,$n12,$n9,$n6,$n10,$n13,$n8,$n11,$n7,$n5,$n1,$n4,$n2,$n3)
	#call hash(46,$n14,$n9,$n13,$n7,$n14,$n12,$n8,$n6,$n11,$n5,$n3,$n1,$n2,$n4)
endif;
if (($n10==0));
	#call hash(47,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n6,$n7,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n10==0)&&($n12==0)&&($n13==0));
	#call hash(48,$n9,$n12,$n10,$n6,$n10,$n14,$n7,$n11,$n8,$n4,$n1,$n5,$n2,$n3)
	#call hash(49,$n9,$n13,$n13,$n7,$n12,$n14,$n6,$n8,$n11,$n3,$n5,$n1,$n2,$n4)
endif;
if (($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(50,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(51,$n14,$n13,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n1,$n2)
endif;
if (($n13==0)&&($n14==0));
	#call hash(52,$n13,$n13,$n9,$n7,$n12,$n10,$n11,$n8,$n6,$n1,$n5,$n3,$n2,$n4)
	#call hash(53,$n14,$n14,$n10,$n8,$n9,$n12,$n7,$n11,$n6,$n4,$n1,$n3,$n2,$n5)
endif;
if (($n14==0));
	#call hash(54,$n14,$n13,$n9,$n7,$n10,$n12,$n8,$n11,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
	#call hash(55,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(56,$n13,$n14,$n12,$n11,$n9,$n10,$n7,$n8,$n6,$n4,$n5,$n3,$n2,$n1)
	#call hash(57,$n10,$n9,$n12,$n6,$n14,$n13,$n8,$n7,$n11,$n5,$n4,$n1,$n2,$n3)
	#call hash(58,$n9,$n10,$n12,$n6,$n13,$n14,$n7,$n8,$n11,$n4,$n5,$n1,$n2,$n3)
if (($n13==0));
	#call hash(59,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
if (($n12==0));
	#call hash(60,$n9,$n13,$n12,$n7,$n10,$n14,$n6,$n11,$n8,$n3,$n1,$n5,$n2,$n4)
	#call hash(61,$n13,$n9,$n12,$n7,$n14,$n10,$n11,$n6,$n8,$n1,$n3,$n5,$n2,$n4)
	#call hash(62,$n10,$n14,$n12,$n8,$n9,$n13,$n6,$n11,$n7,$n3,$n1,$n4,$n2,$n5)
	#call hash(63,$n14,$n10,$n12,$n8,$n13,$n9,$n11,$n6,$n7,$n1,$n3,$n4,$n2,$n5)
endif;
if (($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(64,$n14,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n8,$n3,$n4,$n5,$n1,$n2)
endif;
if (($n9==0));
	#call hash(65,$n12,$n13,$n14,$n11,$n10,$n9,$n6,$n7,$n8,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n9==0)&&($n13==0));
	#call hash(66,$n12,$n9,$n10,$n6,$n14,$n9,$n11,$n7,$n8,$n1,$n4,$n5,$n2,$n3)
	#call hash(67,$n10,$n13,$n14,$n8,$n12,$n13,$n6,$n7,$n11,$n3,$n4,$n1,$n2,$n5)
endif;
if (($n9==0)&&($n12==0)&&($n14==0));
	#call hash(68,$n12,$n10,$n9,$n6,$n13,$n9,$n11,$n8,$n7,$n1,$n5,$n4,$n2,$n3)
	#call hash(69,$n14,$n10,$n14,$n8,$n13,$n12,$n7,$n6,$n11,$n4,$n3,$n1,$n2,$n5)
endif;
if (($n8==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(70,$n14,$n13,$n12,$n11,$n12,$n9,$n11,$n7,$n6,$n1,$n4,$n3,$n5,$n2)
	#call hash(71,$n14,$n13,$n12,$n11,$n13,$n9,$n11,$n6,$n7,$n1,$n3,$n4,$n5,$n2)
	#call hash(72,$n14,$n13,$n10,$n8,$n10,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n1,$n5)
	#call hash(73,$n14,$n10,$n12,$n8,$n10,$n9,$n8,$n6,$n7,$n2,$n3,$n4,$n1,$n5)
endif;
if (($n8==0)&&($n10==0)&&($n14==0));
	#call hash(74,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
	#call hash(75,$n14,$n12,$n13,$n11,$n10,$n9,$n8,$n6,$n7,$n2,$n3,$n4,$n5,$n1)
	#call hash(76,$n14,$n9,$n12,$n6,$n10,$n13,$n8,$n7,$n11,$n2,$n4,$n1,$n5,$n3)
	#call hash(77,$n14,$n12,$n9,$n6,$n10,$n13,$n8,$n11,$n7,$n2,$n1,$n4,$n5,$n3)
	#call hash(78,$n14,$n9,$n13,$n7,$n10,$n12,$n8,$n6,$n11,$n2,$n3,$n1,$n5,$n4)
	#call hash(79,$n14,$n13,$n9,$n7,$n10,$n12,$n8,$n11,$n6,$n2,$n1,$n3,$n5,$n4)
endif;
if (($n7==0)&&($n9==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(80,$n14,$n13,$n12,$n11,$n10,$n12,$n8,$n11,$n6,$n5,$n1,$n3,$n4,$n2)
	#call hash(81,$n14,$n13,$n12,$n11,$n10,$n14,$n6,$n11,$n8,$n3,$n1,$n5,$n4,$n2)
	#call hash(82,$n14,$n13,$n9,$n7,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n1,$n4)
	#call hash(83,$n9,$n13,$n12,$n7,$n10,$n9,$n6,$n7,$n8,$n3,$n2,$n5,$n1,$n4)
endif;
if (($n9==0)&&($n13==0)&&($n7==0));
	#call hash(84,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
	#call hash(85,$n12,$n13,$n14,$n11,$n10,$n9,$n6,$n7,$n8,$n3,$n2,$n5,$n4,$n1)
	#call hash(86,$n10,$n13,$n12,$n6,$n14,$n9,$n8,$n7,$n11,$n5,$n2,$n1,$n4,$n3)
	#call hash(87,$n12,$n13,$n10,$n6,$n14,$n9,$n11,$n7,$n8,$n1,$n2,$n5,$n4,$n3)
	#call hash(88,$n10,$n13,$n14,$n8,$n12,$n9,$n6,$n7,$n11,$n3,$n2,$n1,$n4,$n5)
	#call hash(89,$n14,$n13,$n10,$n8,$n12,$n9,$n11,$n7,$n6,$n1,$n2,$n3,$n4,$n5)
endif;
if (($n6==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(90,$n14,$n13,$n12,$n11,$n14,$n9,$n11,$n7,$n8,$n1,$n4,$n5,$n3,$n2)
	#call hash(91,$n14,$n13,$n12,$n11,$n12,$n13,$n6,$n7,$n11,$n3,$n4,$n1,$n5,$n2)
	#call hash(92,$n14,$n9,$n10,$n6,$n10,$n9,$n8,$n7,$n8,$n2,$n4,$n5,$n1,$n3)
	#call hash(93,$n12,$n9,$n12,$n6,$n10,$n9,$n11,$n7,$n6,$n1,$n4,$n2,$n5,$n3)
	#call hash(94,$n10,$n13,$n12,$n8,$n10,$n9,$n6,$n7,$n6,$n3,$n4,$n2,$n1,$n5)
	#call hash(95,$n14,$n13,$n14,$n8,$n10,$n13,$n8,$n7,$n11,$n2,$n4,$n1,$n3,$n5)
endif;
if (($n6==0)&&($n8==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n14==0));
	#call hash(96,$n14,$n13,$n14,$n11,$n10,$n9,$n8,$n7,$n8,$n2,$n4,$n5,$n3,$n1)
	#call hash(97,$n12,$n13,$n12,$n11,$n10,$n9,$n6,$n7,$n6,$n3,$n4,$n2,$n5,$n1)
	#call hash(98,$n14,$n13,$n12,$n7,$n10,$n14,$n8,$n11,$n8,$n2,$n1,$n5,$n3,$n4)
	#call hash(99,$n9,$n13,$n12,$n7,$n10,$n9,$n6,$n11,$n6,$n3,$n1,$n2,$n5,$n4)
endif;
if (($n6==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(100,$n14,$n13,$n12,$n11,$n14,$n13,$n8,$n7,$n11,$n5,$n4,$n1,$n3,$n2)
	#call hash(101,$n14,$n13,$n12,$n11,$n13,$n14,$n7,$n8,$n11,$n4,$n5,$n1,$n3,$n2)
	#call hash(102,$n10,$n9,$n12,$n6,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n1,$n3)
	#call hash(103,$n9,$n10,$n12,$n6,$n10,$n9,$n7,$n8,$n6,$n4,$n5,$n2,$n1,$n3)
endif;
if (($n6==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(104,$n13,$n13,$n12,$n7,$n10,$n9,$n11,$n8,$n6,$n1,$n5,$n2,$n3,$n4)
	#call hash(105,$n14,$n14,$n12,$n8,$n10,$n9,$n7,$n11,$n6,$n4,$n1,$n2,$n3,$n5)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n6==0)&&($n14==0));
	#call hash(106,$n14,$n13,$n12,$n7,$n10,$n9,$n8,$n11,$n6,$n5,$n1,$n2,$n3,$n4)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n6==0));
	#call hash(107,$n14,$n13,$n12,$n11,$n10,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
	#call hash(108,$n13,$n14,$n12,$n11,$n10,$n9,$n7,$n8,$n6,$n4,$n5,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n10==0)&&($n12==0)&&($n13==0)&&($n6==0));
	#call hash(109,$n14,$n13,$n12,$n8,$n10,$n9,$n11,$n7,$n6,$n1,$n4,$n2,$n3,$n5)
endif;
if (($n6==0)&&($n7==0)&&($n9==0)&&($n10==0)&&($n11==0)&&($n12==0)&&($n13==0)&&($n14==0));
	#call hash(110,$n14,$n13,$n12,$n11,$n10,$n13,$n8,$n11,$n7,$n5,$n1,$n4,$n3,$n2)
	#call hash(111,$n14,$n13,$n12,$n11,$n14,$n12,$n8,$n6,$n11,$n5,$n3,$n1,$n4,$n2)
	#call hash(112,$n10,$n13,$n9,$n6,$n10,$n9,$n8,$n7,$n7,$n5,$n2,$n4,$n1,$n3)
	#call hash(113,$n10,$n12,$n12,$n6,$n10,$n9,$n8,$n11,$n6,$n5,$n1,$n2,$n4,$n3)
	#call hash(114,$n14,$n9,$n12,$n7,$n10,$n9,$n8,$n6,$n6,$n5,$n3,$n2,$n1,$n4)
	#call hash(115,$n14,$n13,$n13,$n7,$n14,$n9,$n8,$n7,$n11,$n5,$n2,$n1,$n3,$n4)
endif;
if (($n6==0)&&($n7==0)&&($n9==0)&&($n10==0)&&($n12==0)&&($n13==0));
	#call hash(116,$n14,$n13,$n13,$n11,$n10,$n9,$n8,$n7,$n7,$n5,$n2,$n4,$n3,$n1)
	#call hash(117,$n14,$n12,$n12,$n11,$n10,$n9,$n8,$n6,$n6,$n5,$n3,$n2,$n4,$n1)
	#call hash(118,$n14,$n13,$n12,$n8,$n13,$n9,$n11,$n7,$n7,$n1,$n2,$n4,$n3,$n5)
	#call hash(119,$n14,$n10,$n12,$n8,$n10,$n9,$n11,$n6,$n6,$n1,$n3,$n2,$n4,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^16;
#do i=0,119
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i3,i3,i4,i4,i5,i5,i1,i6,i7,i7,i8,i8,i11,i10,i13);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i3,i3,i5,i4,i1,i5,i4,i6,i8,i7,i11,i8,i7,i9,i14);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i4,i3,i1,i4,i5,i5,i3,i6,i11,i7,i8,i8,i6,i9,i14,i10,i12);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i4,i3,i5,i4,i3,i5,i1,i6,i8,i7,i6,i8,i11,i9,i10,i10,i14);
elseif ($bestiso == 4); Multiply replace_(i1,i2,i2,i5,i3,i1,i4,i3,i5,i4,i6,i11,i7,i6,i8,i7,i9,i12,i10,i13);
elseif ($bestiso == 5); Multiply replace_(i1,i2,i2,i5,i3,i4,i4,i1,i5,i3,i6,i7,i7,i11,i8,i6,i9,i13,i10,i9);
elseif ($bestiso == 6); Multiply replace_(i1,i3,i2,i1,i3,i4,i4,i5,i5,i2,i6,i7,i7,i8,i11,i6,i12,i9,i13,i10);
elseif ($bestiso == 7); Multiply replace_(i1,i3,i2,i1,i3,i5,i4,i2,i5,i4,i6,i8,i8,i7,i11,i6,i12,i10,i14,i9);
elseif ($bestiso == 8); Multiply replace_(i1,i3,i2,i4,i3,i2,i4,i5,i5,i1,i7,i8,i8,i11,i11,i6,i13,i10,i14,i12);
elseif ($bestiso == 9); Multiply replace_(i1,i3,i2,i4,i3,i5,i4,i1,i5,i2,i6,i8,i7,i11,i9,i14,i11,i6,i12,i10,i13,i12);
elseif ($bestiso == 10); Multiply replace_(i1,i3,i2,i5,i3,i2,i4,i1,i5,i4,i7,i11,i8,i7,i11,i6,i13,i12,i14,i9);
elseif ($bestiso == 11); Multiply replace_(i1,i3,i2,i5,i3,i4,i4,i2,i5,i1,i6,i7,i8,i11,i10,i13,i11,i6,i12,i9,i14,i12);
elseif ($bestiso == 12); Multiply replace_(i1,i4,i2,i1,i3,i2,i4,i5,i5,i3,i7,i8,i8,i6,i11,i7,i14,i9);
elseif ($bestiso == 13); Multiply replace_(i1,i4,i2,i1,i3,i5,i4,i3,i5,i2,i6,i8,i7,i6,i9,i10,i11,i7,i13,i9);
elseif ($bestiso == 14); Multiply replace_(i1,i4,i2,i3,i3,i1,i4,i5,i5,i2,i6,i11,i7,i8,i9,i14,i11,i7,i12,i13);
elseif ($bestiso == 15); Multiply replace_(i1,i4,i2,i3,i3,i5,i4,i2,i5,i1,i6,i8,i8,i11,i10,i14,i11,i7,i14,i13);
elseif ($bestiso == 16); Multiply replace_(i1,i4,i2,i5,i3,i1,i4,i2,i5,i3,i6,i11,i8,i6,i10,i12,i11,i7,i12,i13,i14,i9);
elseif ($bestiso == 17); Multiply replace_(i1,i4,i2,i5,i3,i2,i4,i3,i5,i1,i7,i6,i8,i11,i11,i7,i13,i9,i14,i13);
elseif ($bestiso == 18); Multiply replace_(i1,i5,i2,i1,i3,i2,i4,i3,i5,i4,i7,i6,i8,i7,i11,i8,i13,i10);
elseif ($bestiso == 19); Multiply replace_(i1,i5,i2,i1,i3,i4,i4,i2,i5,i3,i6,i7,i8,i6,i10,i9,i11,i8,i14,i10);
elseif ($bestiso == 20); Multiply replace_(i1,i5,i2,i3,i3,i1,i4,i2,i5,i4,i6,i11,i8,i7,i10,i13,i11,i8,i12,i14);
elseif ($bestiso == 21); Multiply replace_(i1,i5,i2,i3,i3,i4,i4,i1,i5,i2,i6,i7,i7,i11,i9,i13,i11,i8,i13,i14);
elseif ($bestiso == 22); Multiply replace_(i1,i5,i2,i4,i3,i1,i4,i3,i5,i2,i6,i11,i7,i6,i9,i12,i11,i8,i12,i14,i13,i10);
elseif ($bestiso == 23); Multiply replace_(i1,i5,i2,i4,i3,i2,i4,i1,i5,i3,i7,i11,i8,i6,i11,i8,i13,i14,i14,i10);
elseif ($bestiso == 24); Multiply replace_(i2,i3,i3,i4,i4,i5,i5,i2,i6,i7,i7,i8,i12,i13,i13,i14);
elseif ($bestiso == 25); Multiply replace_(i2,i3,i3,i5,i4,i2,i5,i4,i6,i8,i8,i7,i12,i14,i14,i13);
elseif ($bestiso == 26); Multiply replace_(i2,i4,i3,i2,i4,i5,i5,i3,i7,i8,i8,i6,i13,i14,i14,i12);
elseif ($bestiso == 27); Multiply replace_(i2,i4,i3,i5,i4,i3,i5,i2,i6,i8,i7,i6,i9,i10,i12,i14,i13,i12);
elseif ($bestiso == 28); Multiply replace_(i2,i5,i3,i2,i4,i3,i5,i4,i7,i6,i8,i7,i13,i12,i14,i13);
elseif ($bestiso == 29); Multiply replace_(i2,i5,i3,i4,i4,i2,i5,i3,i6,i7,i8,i6,i10,i9,i12,i13,i14,i12);
elseif ($bestiso == 30); Multiply replace_(i1,i2,i2,i4,i4,i5,i5,i1,i7,i8,i8,i11,i9,i10,i10,i12);
elseif ($bestiso == 31); Multiply replace_(i1,i2,i2,i5,i4,i1,i5,i4,i7,i11,i8,i7,i9,i12,i10,i9);
elseif ($bestiso == 32); Multiply replace_(i1,i4,i2,i1,i4,i5,i5,i2,i7,i8,i9,i10,i11,i7,i12,i9);
elseif ($bestiso == 33); Multiply replace_(i1,i4,i2,i5,i4,i2,i5,i1,i8,i11,i10,i12,i11,i7,i12,i9,i14,i13);
elseif ($bestiso == 34); Multiply replace_(i1,i5,i2,i1,i4,i2,i5,i4,i8,i7,i10,i9,i11,i8,i12,i10);
elseif ($bestiso == 35); Multiply replace_(i1,i5,i2,i4,i4,i1,i5,i2,i7,i11,i9,i12,i11,i8,i12,i10,i13,i14);
elseif ($bestiso == 36); Multiply replace_(i2,i4,i4,i5,i5,i2,i7,i8,i9,i10,i13,i14);
elseif ($bestiso == 37); Multiply replace_(i2,i5,i4,i2,i5,i4,i8,i7,i10,i9,i14,i13);
elseif ($bestiso == 38); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i5,i5,i2,i6,i11,i7,i8,i9,i14,i11,i6,i13,i10);
elseif ($bestiso == 39); Multiply replace_(i1,i3,i2,i5,i3,i1,i4,i2,i5,i4,i6,i11,i8,i7,i10,i13,i11,i6,i14,i9);
elseif ($bestiso == 40); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i5,i5,i3,i6,i7,i7,i8,i8,i6,i10,i9);
elseif ($bestiso == 41); Multiply replace_(i1,i2,i2,i1,i3,i5,i4,i3,i5,i4,i6,i8,i7,i6,i8,i7,i9,i10);
elseif ($bestiso == 42); Multiply replace_(i3,i4,i4,i5,i5,i3,i6,i7,i7,i8,i8,i6,i10,i9,i12,i13,i13,i14,i14,i12);
elseif ($bestiso == 43); Multiply replace_(i3,i5,i4,i3,i5,i4,i6,i8,i7,i6,i8,i7,i9,i10,i12,i14,i13,i12,i14,i13);
elseif ($bestiso == 44); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3,i6,i7,i7,i6);
elseif ($bestiso == 45); Multiply replace_(i1,i3,i3,i4,i4,i1,i6,i7,i7,i11,i9,i13,i11,i6,i12,i9,i13,i12,i14,i10);
elseif ($bestiso == 46); Multiply replace_(i1,i4,i3,i1,i4,i3,i6,i11,i7,i6,i9,i12,i10,i14,i11,i7,i12,i13,i13,i9);
elseif ($bestiso == 47); Multiply replace_(i3,i4,i4,i3,i6,i7,i7,i6,i12,i13,i13,i12);
elseif ($bestiso == 48); Multiply replace_(i1,i3,i3,i5,i4,i1,i5,i4,i6,i8,i7,i11,i8,i7,i9,i14,i11,i6,i12,i10,i13,i12,i14,i9);
elseif ($bestiso == 49); Multiply replace_(i1,i4,i3,i1,i4,i5,i5,i3,i6,i11,i7,i8,i8,i6,i9,i14,i10,i12,i11,i7,i12,i13,i14,i9);
elseif ($bestiso == 50); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 51); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9);
elseif ($bestiso == 52); Multiply replace_(i1,i4,i4,i5,i5,i1,i7,i8,i8,i11,i9,i10,i10,i12,i11,i7,i12,i9,i14,i13);
elseif ($bestiso == 53); Multiply replace_(i1,i5,i4,i1,i5,i4,i7,i11,i8,i7,i9,i12,i10,i9,i11,i8,i12,i10,i13,i14);
elseif ($bestiso == 54); Multiply replace_(i1,i4,i4,i1,i7,i11,i9,i12,i11,i7,i12,i9);
elseif ($bestiso == 56); Multiply replace_(i4,i5,i5,i4,i7,i8,i8,i7,i9,i10,i10,i9,i13,i14,i14,i13);
elseif ($bestiso == 57); Multiply replace_(i1,i3,i3,i1,i6,i11,i9,i13,i10,i14,i11,i6,i13,i9,i14,i10);
elseif ($bestiso == 58); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4,i6,i11,i7,i8,i8,i7,i9,i14,i10,i13,i11,i6,i13,i10,i14,i9);
elseif ($bestiso == 59); Multiply replace_(i1,i5,i5,i1,i8,i11,i10,i12,i11,i8,i12,i10);
elseif ($bestiso == 60); Multiply replace_(i1,i4,i3,i5,i4,i1,i5,i3,i6,i8,i7,i11,i8,i6,i9,i14,i11,i7,i14,i9);
elseif ($bestiso == 61); Multiply replace_(i1,i4,i3,i5,i4,i3,i5,i1,i6,i8,i7,i6,i8,i11,i9,i10,i10,i14,i11,i7,i13,i9,i14,i13);
elseif ($bestiso == 62); Multiply replace_(i1,i5,i3,i4,i4,i1,i5,i3,i6,i7,i7,i11,i8,i6,i9,i13,i10,i9,i11,i8,i13,i14,i14,i10);
elseif ($bestiso == 63); Multiply replace_(i1,i5,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i8,i11,i10,i13,i11,i8,i13,i10);
elseif ($bestiso == 64); Multiply replace_(i1,i2,i2,i1,i3,i5,i5,i3,i6,i8,i8,i6);
elseif ($bestiso == 65); Multiply replace_(i3,i5,i5,i3,i6,i8,i8,i6,i12,i14,i14,i12);
elseif ($bestiso == 66); Multiply replace_(i1,i3,i3,i5,i5,i1,i6,i8,i8,i11,i10,i14,i11,i6,i12,i10,i13,i9,i14,i12);
elseif ($bestiso == 67); Multiply replace_(i1,i5,i3,i1,i5,i3,i6,i11,i8,i6,i9,i13,i10,i12,i11,i8,i12,i14,i14,i10);
elseif ($bestiso == 68); Multiply replace_(i1,i3,i3,i4,i4,i5,i5,i1,i6,i7,i7,i8,i8,i11,i10,i13,i11,i6,i12,i9,i13,i10,i14,i12);
elseif ($bestiso == 69); Multiply replace_(i1,i5,i3,i1,i4,i3,i5,i4,i6,i11,i7,i6,i8,i7,i9,i12,i10,i13,i11,i8,i12,i14,i13,i10);
elseif ($bestiso == 70); Multiply replace_(i1,i2,i2,i5,i5,i1,i8,i11,i10,i12);
elseif ($bestiso == 71); Multiply replace_(i1,i2,i2,i5,i3,i4,i4,i3,i5,i1,i6,i7,i7,i6,i8,i11,i10,i13);
elseif ($bestiso == 72); Multiply replace_(i1,i5,i2,i1,i5,i2,i11,i8,i12,i10);
elseif ($bestiso == 73); Multiply replace_(i1,i5,i2,i1,i3,i4,i4,i3,i5,i2,i6,i7,i7,i6,i11,i8,i13,i10);
elseif ($bestiso == 74); Multiply replace_(i2,i5,i5,i2);
elseif ($bestiso == 75); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2,i6,i7,i7,i6,i12,i13,i13,i12);
elseif ($bestiso == 76); Multiply replace_(i1,i3,i2,i5,i3,i1,i5,i2,i6,i11,i9,i13,i11,i6,i13,i9);
elseif ($bestiso == 77); Multiply replace_(i1,i3,i2,i5,i3,i4,i4,i1,i5,i2,i6,i7,i7,i11,i9,i13,i11,i6,i12,i9,i13,i12);
elseif ($bestiso == 78); Multiply replace_(i1,i4,i2,i5,i3,i1,i4,i3,i5,i2,i6,i11,i7,i6,i9,i12,i11,i7,i12,i13,i13,i9);
elseif ($bestiso == 79); Multiply replace_(i1,i4,i2,i5,i4,i1,i5,i2,i7,i11,i9,i12,i11,i7,i12,i9);
elseif ($bestiso == 80); Multiply replace_(i1,i2,i2,i4,i4,i1,i7,i11,i9,i12);
elseif ($bestiso == 81); Multiply replace_(i1,i2,i2,i4,i3,i5,i4,i1,i5,i3,i6,i8,i7,i11,i8,i6,i9,i14);
elseif ($bestiso == 82); Multiply replace_(i1,i4,i2,i1,i4,i2,i11,i7,i12,i9);
elseif ($bestiso == 83); Multiply replace_(i1,i4,i2,i1,i3,i5,i4,i2,i5,i3,i6,i8,i8,i6,i11,i7,i14,i9);
elseif ($bestiso == 84); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 85); Multiply replace_(i2,i4,i3,i5,i4,i2,i5,i3,i6,i8,i8,i6,i12,i14,i14,i12);
elseif ($bestiso == 86); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i6,i11,i10,i14,i11,i6,i14,i10);
elseif ($bestiso == 87); Multiply replace_(i1,i3,i2,i4,i3,i5,i4,i2,i5,i1,i6,i8,i8,i11,i10,i14,i11,i6,i12,i10,i14,i12);
elseif ($bestiso == 88); Multiply replace_(i1,i5,i2,i4,i3,i1,i4,i2,i5,i3,i6,i11,i8,i6,i10,i12,i11,i8,i12,i14,i14,i10);
elseif ($bestiso == 89); Multiply replace_(i1,i5,i2,i4,i4,i2,i5,i1,i8,i11,i10,i12,i11,i8,i12,i10);
elseif ($bestiso == 90); Multiply replace_(i1,i2,i2,i3,i3,i5,i5,i1,i6,i8,i8,i11,i10,i14);
elseif ($bestiso == 91); Multiply replace_(i1,i2,i2,i5,i3,i1,i5,i3,i6,i11,i8,i6,i9,i13,i10,i12);
elseif ($bestiso == 92); Multiply replace_(i1,i3,i2,i1,i3,i5,i5,i2,i6,i8,i11,i6,i12,i10,i13,i9);
elseif ($bestiso == 93); Multiply replace_(i1,i3,i2,i5,i3,i2,i5,i1,i8,i11,i11,i6,i13,i9,i14,i12);
elseif ($bestiso == 94); Multiply replace_(i1,i5,i2,i1,i3,i2,i5,i3,i8,i6,i11,i8,i14,i10);
elseif ($bestiso == 95); Multiply replace_(i1,i5,i2,i3,i3,i1,i5,i2,i6,i11,i9,i13,i11,i8,i12,i14);
elseif ($bestiso == 96); Multiply replace_(i2,i3,i3,i5,i5,i2,i6,i8,i12,i14);
elseif ($bestiso == 97); Multiply replace_(i2,i5,i3,i2,i5,i3,i8,i6,i14,i12);
elseif ($bestiso == 98); Multiply replace_(i1,i4,i2,i3,i3,i5,i4,i1,i5,i2,i6,i8,i7,i11,i9,i14,i11,i7);
elseif ($bestiso == 99); Multiply replace_(i1,i4,i2,i5,i3,i2,i4,i1,i5,i3,i7,i11,i8,i6,i11,i7,i14,i9);
elseif ($bestiso == 100); Multiply replace_(i1,i2,i2,i3,i3,i1,i6,i11,i9,i13,i10,i14);
elseif ($bestiso == 101); Multiply replace_(i1,i2,i2,i3,i3,i1,i4,i5,i5,i4,i6,i11,i7,i8,i8,i7,i9,i14,i10,i13);
elseif ($bestiso == 102); Multiply replace_(i1,i3,i2,i1,i3,i2,i11,i6,i13,i9,i14,i10);
elseif ($bestiso == 103); Multiply replace_(i1,i3,i2,i1,i3,i2,i4,i5,i5,i4,i7,i8,i8,i7,i11,i6,i13,i10,i14,i9);
elseif ($bestiso == 104); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i5,i5,i1,i7,i8,i8,i11,i11,i7,i14,i13);
elseif ($bestiso == 105); Multiply replace_(i1,i5,i2,i3,i3,i2,i4,i1,i5,i4,i7,i11,i8,i7,i11,i8,i13,i14);
elseif ($bestiso == 106); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1,i7,i11,i11,i7);
elseif ($bestiso == 107); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 108); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4,i7,i8,i8,i7,i13,i14,i14,i13);
elseif ($bestiso == 109); Multiply replace_(i1,i5,i2,i3,i3,i2,i5,i1,i8,i11,i11,i8);
elseif ($bestiso == 110); Multiply replace_(i1,i2,i2,i3,i3,i4,i4,i1,i6,i7,i7,i11,i9,i13);
elseif ($bestiso == 111); Multiply replace_(i1,i2,i2,i4,i3,i1,i4,i3,i6,i11,i7,i6,i9,i12,i10,i14);
elseif ($bestiso == 112); Multiply replace_(i1,i3,i2,i1,i3,i4,i4,i2,i6,i7,i11,i6,i12,i9,i14,i10);
elseif ($bestiso == 113); Multiply replace_(i1,i3,i2,i4,i3,i2,i4,i1,i7,i11,i11,i6,i13,i12,i14,i10);
elseif ($bestiso == 114); Multiply replace_(i1,i4,i2,i1,i3,i2,i4,i3,i7,i6,i11,i7,i13,i9);
elseif ($bestiso == 115); Multiply replace_(i1,i4,i2,i3,i3,i1,i4,i2,i6,i11,i10,i14,i11,i7,i12,i13);
elseif ($bestiso == 116); Multiply replace_(i2,i3,i3,i4,i4,i2,i6,i7,i12,i13);
elseif ($bestiso == 117); Multiply replace_(i2,i4,i3,i2,i4,i3,i7,i6,i13,i12);
elseif ($bestiso == 118); Multiply replace_(i1,i5,i2,i3,i3,i4,i4,i2,i5,i1,i6,i7,i8,i11,i10,i13,i11,i8);
elseif ($bestiso == 119); Multiply replace_(i1,i5,i2,i4,i3,i2,i4,i3,i5,i1,i7,i6,i8,i11,i11,i8,i13,i10);
endif;
endif;
ModuleOption local,<$n1>,...,<$n14>,<$iso0>,...,<$iso119>,$bestiso,$bestisov;
.sort:Zd53 automorphism;

#call CheckRemovedPropagators(d53,5,0,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d53;
#endif
#endprocedure

#procedure Reduced53()
	#call Prepared53()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd53'
		#call MtoZ(Md53,Zd53,i,14)
		#call Reduce(d53)
		#call ZtoM(Zd53,Md53,i,14)
		#call Prepared53()
#else
		#if `USETURBO'
			#call TurboMd53()
		#endif
		#call insertionS(Md53,i1,i2,i11,i12,i13,i14,i1,`Q2',i3,i4,i5,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,0,0)
		if (count(Md53b,1)) Multiply replace_(<i3,i2>,...,<i20,i19>);
		#call Insertiond53()
#endif
	#endif
#endprocedure
*--#] reduce-d53 : 
*--#[ reduce-d52 :
#procedure Insertiond52()
* merge propagators with same momentum, and repeated dots
	if (count(Md52b,1)) Multiply replace_(Md52b,Md52c,i2,i1,i3,i2,i4,i3,i5,i4,i7,i4,i6,i5,i9,i5,i8,i6);

* rewrite insertion dots
	if (count(Md52c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2-j2/2+j3/2+j4+j5,j,j1,j2,j3,j4,j5,Md52c,dotmapMd52cR1)
	if (count(Md52c,1)) Multiply replace_(Md52c,Md52d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d8
	if (count(Md52d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i5,j4);
	#call replace(i4,`Q2'/2+j1/2-j2/2+j3/2-j4+j5,j,j1,j2,j3,j4,j5,Md52d,dotmapMd52dR1)
	if (count(Md52d,1)) Multiply replace_(Md52d,Md8,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd8 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared52()
* Topology: 0-1 3-4* 1-3 1-4 3-4 1-4 4-9
* Dots: p0.p2,p0.p3,p0.p1,p1.p3
* Apply automorphisms
if (match(Md52*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd52 automorphism;

#call CheckRemovedPropagators(d52,5,2,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d52;
#endif
#endprocedure

#procedure Reduced52()
	#call Prepared52()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd52'
		#call MtoZ(Md52,Zd52,i,9)
		#call Reduce(d52)
		#call ZtoM(Zd52,Md52,i,9)
		#call Prepared52()
#else
		#if `USETURBO'
			#call TurboMd52()
		#endif
		#call insertionS(Md52,i1,i4,i8,i9,i1,`Q2',i3,i8,i9,i10,1,0)
		if (count(Md52b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond52()
#endif
	#endif
#endprocedure
*--#] reduce-d52 : 
*--#[ reduce-d51 :
#procedure Insertiond51()
* merge propagators with same momentum, and repeated dots
	if (count(Md51b,1)) Multiply replace_(Md51b,Md51c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md51c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j2/2-j3/2-j5,j,j2,j3,j5,Md51c,dotmapMd51cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md51c,dotmapMd51cR2)
	#call replace(i8,-j1/2+j2/2-j4/2,j,j1,j2,j4,Md51c,dotmapMd51cR3)
	#call replace(i9,`Q2'/2+j2/2-j3/2,j,j2,j3,Md51c,dotmapMd51cR4)
	#call replace(i10,-j1/2+j2/2+j4/2,j,j1,j2,j4,Md51c,dotmapMd51cR5)
	if (count(Md51c,1)) Multiply replace_(Md51c,Md51d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d20
	if (count(Md51d,1)) Multiply replace_(i1,j4,i2,j2,i3,j1,i4,j3,i5,j5);
	if (count(Md51d,1)) Multiply replace_(Md51d,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared51()
* Topology: 0-1 2-4* 1-2 1-4 2-4 2-4 4-9
* Dots: p0.p5,p0.p1,p1.p2,p1.p5
* Apply automorphisms
if (match(Md51*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n9==0)&&($n6==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd51 automorphism;

#call CheckRemovedPropagators(d51,5,2,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d51;
#endif
#endprocedure

#procedure Reduced51()
	#call Prepared51()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd51'
		#call MtoZ(Md51,Zd51,i,9)
		#call Reduce(d51)
		#call ZtoM(Zd51,Md51,i,9)
		#call Prepared51()
#else
		#if `USETURBO'
			#call TurboMd51()
		#endif
		#call insertionS(Md51,i1,i4,i7,i8,i9,i1,`Q2',i2,i5,i7,i8,i9,i10,i11,i12,1,0)
		if (count(Md51b,1)) Multiply replace_(<i5,i4>,...,<i12,i11>);
		#call Insertiond51()
#endif
	#endif
#endprocedure
*--#] reduce-d51 : 
*--#[ reduce-d50 :
#procedure Insertiond50()
* merge propagators with same momentum, and repeated dots
	if (count(Md50b,1)) Multiply replace_(Md50b,Md50c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md50c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md50c,dotmapMd50cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2,j,j1,j2,Md50c,dotmapMd50cR2)
	#call replace(i8,j2/2+j3/2-j4/2+j5,j,j2,j3,j4,j5,Md50c,dotmapMd50cR3)
	#call replace(i9,`Q2'/2-j1/2+j2/2,j,j1,j2,Md50c,dotmapMd50cR4)
	#call replace(i10,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md50c,dotmapMd50cR5)
	if (count(Md50c,1)) Multiply replace_(Md50c,Md50d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d14
	if (count(Md50d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5);
	if (count(Md50d,1)) Multiply replace_(Md50d,Md14,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd14 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared50()
* Topology: 0-1* 1-2 1-5 2-5 1-2 2-5 2-9
* Dots: p0.p3,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md50*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n3,$n1,$n5,$n2,$n4)
endif;
if (($n9==0)&&($n6==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i4,i3,i5,i4,i1,i5,i3);
elseif ($bestiso == 2); Multiply replace_(i3,i5,i5,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i4,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd50 automorphism;

#call CheckRemovedPropagators(d50,5,1,2,1,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d50;
#endif
#endprocedure

#procedure Reduced50()
	#call Prepared50()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd50'
		#call MtoZ(Md50,Zd50,i,9)
		#call Reduce(d50)
		#call ZtoM(Zd50,Md50,i,9)
		#call Prepared50()
#else
		#if `USETURBO'
			#call TurboMd50()
		#endif
		#call insertionS(Md50,i1,i4,i7,i8,i9,i1,`Q2',i2,i3,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md50b,1)) Multiply replace_(<i5,i4>,...,<i12,i11>);
		#call Insertiond50()
#endif
	#endif
#endprocedure
*--#] reduce-d50 : 
*--#[ reduce-d49 :
#procedure Insertiond49()
* merge propagators with same momentum, and repeated dots
	if (count(Md49b,1)) Multiply replace_(Md49b,Md49c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md49c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j2/2,j,j1,j2,Md49c,dotmapMd49cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2,j,j1,j2,Md49c,dotmapMd49cR2)
	#call replace(i8,-j2/2-j3/2+j4/2,j,j2,j3,j4,Md49c,dotmapMd49cR3)
	#call replace(i9,`Q2'/2+j1/2-j2/2,j,j1,j2,Md49c,dotmapMd49cR4)
	#call replace(i10,j2/2+j3/2-j4/2+j5,j,j2,j3,j4,j5,Md49c,dotmapMd49cR5)
	if (count(Md49c,1)) Multiply replace_(Md49c,Md49d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d12
	if (count(Md49d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	if (count(Md49d,1)) Multiply replace_(Md49d,Md12,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd12 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared49()
* Topology: 0-1 1-3* 1-5 3-5 3-5 1-5 3-9
* Dots: p0.p3,p0.p2,p1.p2,p2.p3
* Apply automorphisms
if (match(Md49*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n2,$n3,$n4,$n5,$n1)
	#call hash(1,$n9,$n8,$n6,$n6,$n4,$n2,$n5,$n3,$n1)
	#call hash(2,$n9,$n8,$n7,$n7,$n3,$n5,$n2,$n4,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n3,$n2,$n5,$n4,$n1)
endif;
if (($n9==0)&&($n6==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(6,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
if (($n8==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n8,$n6,$n7,$n4,$n5,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2);
elseif ($bestiso == 1); Multiply sign_($n6+$n7+$n8)*replace_(i2,i3,i3,i5,i4,i2,i5,i4,i7,i6);
elseif ($bestiso == 2); Multiply sign_($n6+$n7+$n8)*replace_(i2,i4,i3,i2,i4,i5,i5,i3,i6,i7);
elseif ($bestiso == 3); Multiply sign_($n6+$n7+$n8)*replace_(i2,i4,i3,i5,i4,i2,i5,i3);
elseif ($bestiso == 5); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 6); Multiply replace_(i2,i5,i5,i2);
elseif ($bestiso == 7); Multiply sign_($n6+$n7+$n8)*replace_(i2,i3,i3,i2,i4,i5,i5,i4,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd49 automorphism;

#call CheckRemovedPropagators(d49,5,1,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d49;
#endif
#endprocedure

#procedure Reduced49()
	#call Prepared49()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd49'
		#call MtoZ(Md49,Zd49,i,9)
		#call Reduce(d49)
		#call ZtoM(Zd49,Md49,i,9)
		#call Prepared49()
#else
		#if `USETURBO'
			#call TurboMd49()
		#endif
		#call insertionS(Md49,i2,i5,i7,i8,i9,i2,`Q2',i1,i3,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md49b,1)) Multiply replace_(<i6,i5>,...,<i12,i11>);
		#call Insertiond49()
#endif
	#endif
#endprocedure
*--#] reduce-d49 : 
*--#[ reduce-t1star34 :
#procedure Preparet1star34()
* Topology: 0-1 2-3 1-2 1-4* 3-4* 2-4 3-9
* Dots: 
* Apply automorphisms
if (match(Mt1star34*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n3,$n4,$n1,$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zt1star34 automorphism;

#call CheckRemovedPropagators(t1star34,5,2,3,4)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2 and change topology to d16
	if (count(Mt1star34M1,1)) Multiply replace_(i2,j1,i3,j3,i4,j4,i5,j2);
	#call replace(i1,j1-j3+j4-2*j5,j,j1,j3,j4,j5,Mt1star34M1,dotmapMt1star34M1R1)
	if (count(Mt1star34M1,1)) Multiply replace_(Mt1star34M1,Md16,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd16 "1"
#endif

#if `$M2'
* map dots to p0.p2 and change topology to d16
	if (count(Mt1star34M2,1)) Multiply replace_(i1,j1,i3,j4,i4,j3,i5,j2);
	#call replace(i2,j1-j3+j4+2*j5,j,j1,j3,j4,j5,Mt1star34M2,dotmapMt1star34M2R1)
	if (count(Mt1star34M2,1)) Multiply replace_(Mt1star34M2,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
#endif

#if `$M5'
* map dots to p1.p2 and change topology to d25
	if (count(Mt1star34M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4);
	#call replace(i5,j1+j2-2*j5,j,j1,j2,j5,Mt1star34M5,dotmapMt1star34M5R1)
	if (count(Mt1star34M5,1)) Multiply replace_(Mt1star34M5,Md25,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd25 "1"
#endif
.sort:reduce t1star34;
#endif
#endprocedure

#procedure Reducet1star34()
	#call Preparet1star34()
	#if `$DOACTION'
		#call MtoZ(Mt1star34,Zt1star34,i,5)
		#call Reduce(t1star34)
		#call ZtoM(Zt1star34,Mt1star34,i,5)
		#call Preparet1star34()
	#endif
#endprocedure
*--#] reduce-t1star34 : 
*--#[ reduce-d47 :
#procedure Prepared47()
* Topology: 0-1 2-3 1-2 1-5 3-5** 2-5 3-9
* Dots: 
* Apply automorphisms
if (match(Md47*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zd47 automorphism;

#call CheckRemovedPropagators(d47,5,1,4)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3 and change topology to d20
	if (count(Md47M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j4,i5,j3);
	#call replace(i1,j1-j2+j4-2*j5,j,j1,j2,j4,j5,Md47M1,dotmapMd47M1R1)
	if (count(Md47M1,1)) Multiply replace_(Md47M1,Md20,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd20 "1"
#endif

#if `$M2'
* map dots to p0.p2 and change topology to d21
	if (count(Md47M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i2,`Q2'+j2-2*j5,j,j2,j5,Md47M2,dotmapMd47M2R1)
	if (count(Md47M2,1)) Multiply replace_(Md47M2,Md21,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd21 "1"
#endif

#if `$M3'
* map dots to p0.p2 and change topology to d29
	if (count(Md47M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4);
	#call replace(i3,`Q2'+j2-2*j5,j,j2,j5,Md47M3,dotmapMd47M3R1)
	if (count(Md47M3,1)) Multiply replace_(Md47M3,Md29,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd29 "1"
#endif

#if `$M5'
* map dots to p1.p2 and change topology to d24
	if (count(Md47M5,1)) Multiply replace_(i1,j4,i2,j2,i3,j3,i4,j1);
	#call replace(i5,-`Q2'+j3+j4+2*j5,j,j3,j4,j5,Md47M5,dotmapMd47M5R1)
	if (count(Md47M5,1)) Multiply replace_(Md47M5,Md24,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd24 "1"
#endif
.sort:reduce d47;
#endif
#endprocedure

#procedure Reduced47()
	#call Prepared47()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd47'
		#call MtoZ(Md47,Zd47,i,5)
		#call Reduce(d47)
		#call ZtoM(Zd47,Md47,i,5)
#else
		#if `USETURBO'
			#call TurboMd47()
		#endif
		#call triangleS(Md47,i1,i4,i5,i2,i3,0,2)
#endif
		#call Prepared47()
	#endif
#endprocedure
*--#] reduce-d47 : 
*--#[ reduce-t1star24 :
#procedure Preparet1star24()
* Topology: 0-1 2-3 1-2* 1-4 3-4* 2-4 3-9
* Dots: 
* Apply automorphisms
if (match(Mt1star24*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n2,$n1,$n4,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zt1star24 automorphism;

#call CheckRemovedPropagators(t1star24,5,2,2,4)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p2 and change topology to d18
	if (count(Mt1star24M1,1)) Multiply replace_(i2,j3,i3,j1,i4,j4,i5,j2);
	#call replace(i1,-j1+j3+j4-2*j5,j,j1,j3,j4,j5,Mt1star24M1,dotmapMt1star24M1R1)
	if (count(Mt1star24M1,1)) Multiply replace_(Mt1star24M1,Md18,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd18 "1"
#endif

#if `$M3'
* map dots to p0.p2 and change topology to d18
	if (count(Mt1star24M3,1)) Multiply replace_(i1,j1,i2,j4,i4,j3,i5,j2);
	#call replace(i3,-j1+j3+j4+2*j5,j,j1,j3,j4,j5,Mt1star24M3,dotmapMt1star24M3R1)
	if (count(Mt1star24M3,1)) Multiply replace_(Mt1star24M3,Md18,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd18 "1"
#endif

#if `$M5'
* map dots to p1.p2 and change topology to d25
	if (count(Mt1star24M5,1)) Multiply replace_(i1,j1,i2,j3,i3,j2,i4,j4);
	#call replace(i5,-`Q2'+j3+j4+2*j5,j,j3,j4,j5,Mt1star24M5,dotmapMt1star24M5R1)
	if (count(Mt1star24M5,1)) Multiply replace_(Mt1star24M5,Md25,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd25 "1"
#endif
.sort:reduce t1star24;
#endif
#endprocedure

#procedure Reducet1star24()
	#call Preparet1star24()
	#if `$DOACTION'
		#call MtoZ(Mt1star24,Zt1star24,i,5)
		#call Reduce(t1star24)
		#call ZtoM(Zt1star24,Mt1star24,i,5)
		#call Preparet1star24()
	#endif
#endprocedure
*--#] reduce-t1star24 : 
*--#[ reduce-d45 :
#procedure Prepared45()
* Topology: 0-1 2-3* 1-2 1-5 3-5* 2-5 3-9
* Dots: 
* Apply automorphisms
if (match(Md45*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1,$n5+$n2+$n3)
	#call hash(1,$n5,$n1,$n2,$n3,$n4,$n5+$n3+$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd45 automorphism;

#call CheckRemovedPropagators(d45,5,2,1,4)
#if `$DOACTION' == 0

#if `$M2'
* map dots to p0.p3 and change topology to d12
	if (count(Md45M2,1)) Multiply replace_(i1,j1,i3,j3,i4,j2,i5,j4);
	#call replace(i2,`Q2'+j3-2*j5,j,j3,j5,Md45M2,dotmapMd45M2R1)
	if (count(Md45M2,1)) Multiply replace_(Md45M2,Md12,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd12 "1"
#endif

#if `$M3'
* map dots to p0.p3 and change topology to d12
	if (count(Md45M3,1)) Multiply replace_(i1,j2,i2,j3,i4,j1,i5,j4);
	#call replace(i3,`Q2'+j3-2*j5,j,j3,j5,Md45M3,dotmapMd45M3R1)
	if (count(Md45M3,1)) Multiply replace_(Md45M3,Md12,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd12 "1"
#endif

#if `$M5'
* map dots to p1.p2 and change topology to d23
	if (count(Md45M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4);
	#call replace(i5,j1+j2-2*j5,j,j1,j2,j5,Md45M5,dotmapMd45M5R1)
	if (count(Md45M5,1)) Multiply replace_(Md45M5,Md23,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd23 "1"
#endif
.sort:reduce d45;
#endif
#endprocedure

#procedure Reduced45()
	#call Prepared45()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd45'
		#call MtoZ(Md45,Zd45,i,5)
		#call Reduce(d45)
		#call ZtoM(Zd45,Md45,i,5)
#else
		#if `USETURBO'
			#call TurboMd45()
		#endif
		#call triangleS(Md45,i1,i4,i5,i2,i3,1,1)
#endif
		#call Prepared45()
	#endif
#endprocedure
*--#] reduce-d45 : 
*--#[ reduce-t1star55 :
#procedure Preparet1star55()
* Topology: 0-1 2-3 1-2 1-4 3-4 2-4** 3-9
* Dots: 
* Apply automorphisms
if (match(Mt1star55*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,3
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n1,$n2,$n3,$n4)
	#call hash(2,$n5,$n3,$n4,$n1,$n2)
	#call hash(3,$n5,$n2,$n1,$n4,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zt1star55 automorphism;

#call CheckRemovedPropagators(t1star55,5,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3 and change topology to d20
	if (count(Mt1star55M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i1,`Q2'+j3+2*j5,j,j3,j5,Mt1star55M1,dotmapMt1star55M1R1)
	if (count(Mt1star55M1,1)) Multiply replace_(Mt1star55M1,Md20,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd20 "1"
#endif

#if `$M2'
* map dots to p0.p3 and change topology to d20
	if (count(Mt1star55M2,1)) Multiply replace_(i1,j1,i3,j3,i4,j2,i5,j4);
	#call replace(i2,`Q2'+j3-2*j5,j,j3,j5,Mt1star55M2,dotmapMt1star55M2R1)
	if (count(Mt1star55M2,1)) Multiply replace_(Mt1star55M2,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
#endif

#if `$M3'
* map dots to p0.p3 and change topology to d20
	if (count(Mt1star55M3,1)) Multiply replace_(i1,j2,i2,j3,i4,j1,i5,j4);
	#call replace(i3,`Q2'+j3-2*j5,j,j3,j5,Mt1star55M3,dotmapMt1star55M3R1)
	if (count(Mt1star55M3,1)) Multiply replace_(Mt1star55M3,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
#endif

#if `$M4'
* map dots to p0.p3 and change topology to d20
	if (count(Mt1star55M4,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i5,j4);
	#call replace(i4,`Q2'+j3-2*j5,j,j3,j5,Mt1star55M4,dotmapMt1star55M4R1)
	if (count(Mt1star55M4,1)) Multiply replace_(Mt1star55M4,Md20,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd20 "1"
#endif
.sort:reduce t1star55;
#endif
#endprocedure

#procedure Reducet1star55()
	#call Preparet1star55()
	#if `$DOACTION'
		#call MtoZ(Mt1star55,Zt1star55,i,5)
		#call Reduce(t1star55)
		#call ZtoM(Zt1star55,Mt1star55,i,5)
		#call Preparet1star55()
	#endif
#endprocedure
*--#] reduce-t1star55 : 
*--#[ reduce-d43 :
#procedure Prepared43()
* Topology: 0-1** 3-4 2-3 1-2 1-3 2-4 4-9
* Dots: 
* Apply automorphisms
if (match(Md43*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,3
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1,$n2+$n3+$n4)
	#call hash(1,$n1,$n3,$n4,$n2,$n5,$n2+$n4+$n3)
	#call hash(2,$n3,$n1,$n5,$n2,$n4,$n2+$n5+$n1)
	#call hash(3,$n4,$n5,$n1,$n2,$n3,$n2+$n1+$n5)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i5,i3,i4,i4,i3,i5,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i3,i5,i4,i1,i5,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i3,i1,i4,i5,i5,i4);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd43 automorphism;

#call CheckRemovedPropagators(d43,5,0)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1 and change topology to d22
	if (count(Md43M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i1,-j2+j3+j4+2*j5,j,j2,j3,j4,j5,Md43M1,dotmapMd43M1R1)
	if (count(Md43M1,1)) Multiply replace_(Md43M1,Md22,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd22 "1"
#endif

#if `$M2'
* map dots to p1.p2 and change topology to d26
	if (count(Md43M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i2,-`Q2'+j3+j4+2*j5,j,j3,j4,j5,Md43M2,dotmapMd43M2R1)
	if (count(Md43M2,1)) Multiply replace_(Md43M2,Md26,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd26 "1"
#endif

#if `$M3'
* map dots to p0.p1 and change topology to d22
	if (count(Md43M3,1)) Multiply replace_(i1,j2,i2,j1,i4,j4,i5,j3);
	#call replace(i3,-j2+j3+j4+2*j5,j,j2,j3,j4,j5,Md43M3,dotmapMd43M3R1)
	if (count(Md43M3,1)) Multiply replace_(Md43M3,Md22,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd22 "1"
#endif

#if `$M4'
* map dots to p0.p1 and change topology to d22
	if (count(Md43M4,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i5,j2);
	#call replace(i4,-j2+j3+j4+2*j5,j,j2,j3,j4,j5,Md43M4,dotmapMd43M4R1)
	if (count(Md43M4,1)) Multiply replace_(Md43M4,Md22,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd22 "1"
#endif

#if `$M5'
* map dots to p0.p1 and change topology to d22
	if (count(Md43M5,1)) Multiply replace_(i1,j1,i2,j4,i3,j3,i4,j2);
	#call replace(i5,`Q2'+j1+2*j5,j,j1,j5,Md43M5,dotmapMd43M5R1)
	if (count(Md43M5,1)) Multiply replace_(Md43M5,Md22,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd22 "1"
#endif
.sort:reduce d43;
#endif
#endprocedure

#procedure Reduced43()
	#call Prepared43()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd43'
		#call MtoZ(Md43,Zd43,i,5)
		#call Reduce(d43)
		#call ZtoM(Zd43,Md43,i,5)
#else
		#if `USETURBO'
			#call TurboMd43()
		#endif
		#call triangleS(Md43,i5,i1,i2,i3,i4,0,0)
#endif
		#call Prepared43()
	#endif
#endprocedure
*--#] reduce-d43 : 
*--#[ reduce-d42 :
#procedure Insertiond42()
* merge propagators with same momentum, and repeated dots
	if (count(Md42b,1)) Multiply replace_(Md42b,Md42c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i7,i4,i6,i5,i8,i5,i9,i6);

* rewrite insertion dots
	if (count(Md42c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2-j2/2+j3/2+j4+j5,j,j1,j2,j3,j4,j5,Md42c,dotmapMd42cR1)
	if (count(Md42c,1)) Multiply replace_(Md42c,Md42d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d9
	if (count(Md42d,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j3/2-j5,j,j1,j2,j3,j5,Md42d,dotmapMd42dR1)
	if (count(Md42d,1)) Multiply replace_(Md42d,Md9,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd9 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared42()
* Topology: 0-1 3-4* 1-3 1-3 3-4 1-3 4-9
* Dots: p0.p2,p0.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md42*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,5
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n9,$n7,$n7,$n2,$n4,$n5,$n3,$n1)
	#call hash(1,$n8,$n8,$n6,$n6,$n3,$n4,$n2,$n5,$n1)
endif;
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n8,$n9,$n6,$n7,$n5,$n4,$n2,$n3,$n1)
if (($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
if (($n8==0)&&($n6==0));
	#call hash(5,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i5,i5,i2,i6,i7,i8,i9);
elseif ($bestiso == 1); Multiply replace_(i2,i5,i3,i2,i5,i3,i7,i6,i9,i8);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2,i6,i7,i7,i6,i8,i9,i9,i8);
elseif ($bestiso == 4); Multiply replace_(i3,i5,i5,i3);
elseif ($bestiso == 5); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd42 automorphism;

#call CheckRemovedPropagators(d42,5,1,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d42;
#endif
#endprocedure

#procedure Reduced42()
	#call Prepared42()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd42'
		#call MtoZ(Md42,Zd42,i,9)
		#call Reduce(d42)
		#call ZtoM(Zd42,Md42,i,9)
		#call Prepared42()
#else
		#if `USETURBO'
			#call TurboMd42()
		#endif
		#call insertionS(Md42,i1,i4,i8,i9,i1,i2,i3,i8,i9,i10,1,0)
		if (count(Md42b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond42()
#endif
	#endif
#endprocedure
*--#] reduce-d42 : 
*--#[ reduce-d41 :
#procedure Insertiond41()
* merge propagators with same momentum, and repeated dots
	if (count(Md41b,1)) Multiply replace_(Md41b,Md41c,i4,i1,i5,i4,i9,i4,i6,i5,i7,i6,i8,i7);

* rewrite insertion dots
	if (count(Md41c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'-j4-j5,j,j4,j5,Md41c,dotmapMd41cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2+j3/2+j5,j,j1,j2,j3,j5,Md41c,dotmapMd41cR2)
	if (count(Md41c,1)) Multiply replace_(Md41c,Md41d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d10
	if (count(Md41d,1)) Multiply replace_(i1,j2,i2,j1,i3,j3,i4,j4);
	#call replace(i5,-`Q2'/2-j1/2+j2/2-j3/2-j4-j5,j,j1,j2,j3,j4,j5,Md41d,dotmapMd41dR1)
	if (count(Md41d,1)) Multiply replace_(Md41d,Md10,<j1,i1>,...,<j3,i3>,j4,-i4,j5,i5);
	#redefine HASTOPOd10 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared41()
* Topology: 0-2 1-3 1-2 1-3 1-2* 2-3 1-9
* Dots: p0.p2,p0.p4,p0.p1,p1.p2
* Apply automorphisms
if (match(Md41*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd41 automorphism;

#call CheckRemovedPropagators(d41,5,2,4,5,1,2,3)
#if `$DOACTION' == 0
.sort:reduce d41;
#endif
#endprocedure

#procedure Reduced41()
	#call Prepared41()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd41'
		#call MtoZ(Md41,Zd41,i,9)
		#call Reduce(d41)
		#call ZtoM(Zd41,Md41,i,9)
		#call Prepared41()
#else
		#if `USETURBO'
			#call TurboMd41()
		#endif
		#call insertionS(Md41,i1,i3,i8,i9,i1,`Q2',i2,i8,i9,i10,0,0)
		if (count(Md41b,1)) Multiply replace_(<i4,i3>,...,<i10,i9>);
		#call Insertiond41()
#endif
	#endif
#endprocedure
*--#] reduce-d41 : 
*--#[ reduce-t1star45 :
#procedure Preparet1star45()
* Topology: 0-1 2-3 1-2 1-4 3-4* 2-4* 3-9
* Dots: 
* Apply automorphisms
if (match(Mt1star45*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zt1star45 automorphism;

#call CheckRemovedPropagators(t1star45,5,2,4,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3 and change topology to d19
	if (count(Mt1star45M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i1,`Q2'+j3+2*j5,j,j3,j5,Mt1star45M1,dotmapMt1star45M1R1)
	if (count(Mt1star45M1,1)) Multiply replace_(Mt1star45M1,Md19,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd19 "1"
#endif

#if `$M2'
* map dots to p0.p2 and change topology to d16
	if (count(Mt1star45M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i2,`Q2'+j2-2*j5,j,j2,j5,Mt1star45M2,dotmapMt1star45M2R1)
	if (count(Mt1star45M2,1)) Multiply replace_(Mt1star45M2,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
#endif

#if `$M3'
* map dots to p0.p2 and change topology to d18
	if (count(Mt1star45M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4);
	#call replace(i3,`Q2'+j2-2*j5,j,j2,j5,Mt1star45M3,dotmapMt1star45M3R1)
	if (count(Mt1star45M3,1)) Multiply replace_(Mt1star45M3,Md18,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd18 "1"
#endif
.sort:reduce t1star45;
#endif
#endprocedure

#procedure Reducet1star45()
	#call Preparet1star45()
	#if `$DOACTION'
		#call MtoZ(Mt1star45,Zt1star45,i,5)
		#call Reduce(t1star45)
		#call ZtoM(Zt1star45,Mt1star45,i,5)
		#call Preparet1star45()
	#endif
#endprocedure
*--#] reduce-t1star45 : 
*--#[ reduce-d39 :
#procedure Insertiond39()
* merge propagators with same momentum, and repeated dots
	if (count(Md39b,1)) Multiply replace_(Md39b,Md39c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md39c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j2/2,j,j1,j2,Md39c,dotmapMd39cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2,j,j1,j2,Md39c,dotmapMd39cR2)
	#call replace(i8,-j1/2-j3/2+j4/2,j,j1,j3,j4,Md39c,dotmapMd39cR3)
	#call replace(i9,`Q2'/2-j1/2+j2/2,j,j1,j2,Md39c,dotmapMd39cR4)
	#call replace(i10,j1/2+j3/2-j4/2+j5,j,j1,j3,j4,j5,Md39c,dotmapMd39cR5)
	if (count(Md39c,1)) Multiply replace_(Md39c,Md39d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d16
	if (count(Md39d,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i4,j2);
	#call replace(i5,-`Q2'/2+j1/2-j3/2-j5,j,j1,j3,j5,Md39d,dotmapMd39dR1)
	if (count(Md39d,1)) Multiply replace_(Md39d,Md16,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd16 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared39()
* Topology: 0-2 1-5 1-5 2-5 1-2* 1-2 5-9
* Dots: p0.p4,p0.p1,p1.p3,p1.p4
* Apply automorphisms
if (match(Md39*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,1
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd39 automorphism;

#call CheckRemovedPropagators(d39,5,1,4,1,2,3,5)
#if `$DOACTION' == 0
.sort:reduce d39;
#endif
#endprocedure

#procedure Reduced39()
	#call Prepared39()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd39'
		#call MtoZ(Md39,Zd39,i,9)
		#call Reduce(d39)
		#call ZtoM(Zd39,Md39,i,9)
		#call Prepared39()
#else
		#if `USETURBO'
			#call TurboMd39()
		#endif
		#call insertionS(Md39,i1,i2,i7,i8,i9,i1,`Q2',i3,i4,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md39b,1)) Multiply replace_(<i3,i2>,...,<i12,i11>);
		#call Insertiond39()
#endif
	#endif
#endprocedure
*--#] reduce-d39 : 
*--#[ reduce-d38 :
#procedure Insertiond38()
* merge propagators with same momentum, and repeated dots
	if (count(Md38b,1)) Multiply replace_(Md38b,Md38c,i2,i1,i3,i2,i4,i3,i5,i4,i7,i4,i6,i5,i9,i5,i8,i6);

* rewrite insertion dots
	if (count(Md38c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2-j2/2+j3/2+j4+j5,j,j1,j2,j3,j4,j5,Md38c,dotmapMd38cR1)
	if (count(Md38c,1)) Multiply replace_(Md38c,Md38d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d8
	if (count(Md38d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i5,j4);
	#call replace(i4,`Q2'/2+j1/2-j2/2+j3/2-j4+j5,j,j1,j2,j3,j4,j5,Md38d,dotmapMd38dR1)
	if (count(Md38d,1)) Multiply replace_(Md38d,Md8,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd8 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared38()
* Topology: 0-1 2-3* 1-2 1-3 1-3 1-2 3-9
* Dots: p0.p1,p0.p3,p0.p2,p2.p3
* Apply automorphisms
if (match(Md38*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n2,$n3,$n4,$n5,$n1)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i5,i3,i4,i4,i3,i5,i2);
elseif ($bestiso == 2); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i2,i5,i5,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd38 automorphism;

#call CheckRemovedPropagators(d38,5,1,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d38;
#endif
#endprocedure

#procedure Reduced38()
	#call Prepared38()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd38'
		#call MtoZ(Md38,Zd38,i,9)
		#call Reduce(d38)
		#call ZtoM(Zd38,Md38,i,9)
		#call Prepared38()
#else
		#if `USETURBO'
			#call TurboMd38()
		#endif
		#call insertionS(Md38,i2,i5,i8,i9,i2,`Q2',i3,i8,i9,i10,0,0)
		if (count(Md38b,1)) Multiply replace_(<i6,i5>,...,<i10,i9>);
		#call Insertiond38()
#endif
	#endif
#endprocedure
*--#] reduce-d38 : 
*--#[ reduce-d37 :
#procedure Insertiond37()
* merge propagators with same momentum, and repeated dots
	if (count(Md37b,1)) Multiply replace_(Md37b,Md37c,i9,i5,i10,i9,i11,i10);

* rewrite insertion dots
	if (count(Md37c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2,j,j1,j3,Md37c,dotmapMd37cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md37c,dotmapMd37cR2)
	#call replace(i8,`Q2'/2-j1/2-j3/2,j,j1,j3,Md37c,dotmapMd37cR3)
	#call replace(i9,`Q2'/2-j1/2+j3/2,j,j1,j3,Md37c,dotmapMd37cR4)
	#call replace(i10,-j1/2-j2/2+j4/2+j5,j,j1,j2,j4,j5,Md37c,dotmapMd37cR5)
	if (count(Md37c,1)) Multiply replace_(Md37c,Md37d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1 and change topology to d17
	if (count(Md37d,1)) Multiply replace_(i1,j3,i2,j1,i3,j4,i4,j2,i5,j5);
	if (count(Md37d,1)) Multiply replace_(Md37d,Md17,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd17 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared37()
* Topology: 0-1* 2-4 1-2 1-4 1-2 2-4 4-9
* Dots: p0.p2,p0.p1,p1.p2,p1.p3
* Apply automorphisms
if (match(Md37*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,7
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n1,$n2,$n3,$n4,$n5)
	#call hash(1,$n9,$n8,$n6,$n6,$n4,$n1,$n3,$n5,$n2)
	#call hash(2,$n9,$n8,$n7,$n7,$n2,$n5,$n3,$n1,$n4)
	#call hash(3,$n9,$n8,$n7,$n6,$n2,$n1,$n3,$n5,$n4)
endif;
if (($n8==0)&&($n6==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(6,$n9,$n8,$n7,$n6,$n1,$n4,$n3,$n2,$n5)
endif;
if (($n9==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n8,$n6,$n7,$n4,$n5,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i5,i2,i4,i4,i2,i5,i1);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i5,i4,i1,i5,i4,i7,i6);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i2,i1,i4,i5,i5,i2,i6,i7);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i2,i5,i4,i1,i5,i2);
elseif ($bestiso == 5); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 6); Multiply replace_(i1,i5,i5,i1);
elseif ($bestiso == 7); Multiply replace_(i1,i2,i2,i1,i4,i5,i5,i4,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd37 automorphism;

#call CheckRemovedPropagators(d37,5,0,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d37;
#endif
#endprocedure

#procedure Reduced37()
	#call Prepared37()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd37'
		#call MtoZ(Md37,Zd37,i,9)
		#call Reduce(d37)
		#call ZtoM(Zd37,Md37,i,9)
		#call Prepared37()
#else
		#if `USETURBO'
			#call TurboMd37()
		#endif
		#call insertionS(Md37,i1,i5,i7,i8,i9,i1,`Q2',i2,i3,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md37b,1)) Multiply replace_(<i6,i5>,...,<i12,i11>);
		#call Insertiond37()
#endif
	#endif
#endprocedure
*--#] reduce-d37 : 
*--#[ reduce-d36 :
#procedure Insertiond36()
* merge propagators with same momentum, and repeated dots
	if (count(Md36b,1)) Multiply replace_(Md36b,Md36c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md36c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j3/2-j5,j,j1,j3,j5,Md36c,dotmapMd36cR1)
	#call replace(i7,j1/2+j2/2-j4/2,j,j1,j2,j4,Md36c,dotmapMd36cR2)
	#call replace(i8,j1/2-j2/2-j4/2,j,j1,j2,j4,Md36c,dotmapMd36cR3)
	#call replace(i9,`Q2'/2+j1/2-j3/2,j,j1,j3,Md36c,dotmapMd36cR4)
	#call replace(i10,j1/2-j2/2+j4/2,j,j1,j2,j4,Md36c,dotmapMd36cR5)
	if (count(Md36c,1)) Multiply replace_(Md36c,Md36d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d16
	if (count(Md36d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5);
	if (count(Md36d,1)) Multiply replace_(Md36d,Md16,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd16 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared36()
* Topology: 0-1 2-4* 1-2 1-4 1-2 1-2 4-9
* Dots: p0.p5,p0.p2,p1.p2,p2.p5
* Apply automorphisms
if (match(Md36*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,5
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n7,$n2,$n5,$n3,$n4,$n1)
	#call hash(1,$n9,$n8,$n6,$n6,$n4,$n2,$n3,$n5,$n1)
endif;
if (($n9==0)&&($n6==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
if (($n8==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n9,$n8,$n6,$n7,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i4,i4,i5,i5,i2,i6,i7);
elseif ($bestiso == 1); Multiply replace_(i2,i5,i4,i2,i5,i4,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 4); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 5); Multiply replace_(i2,i5,i5,i2,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd36 automorphism;

#call CheckRemovedPropagators(d36,5,1,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d36;
#endif
#endprocedure

#procedure Reduced36()
	#call Prepared36()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd36'
		#call MtoZ(Md36,Zd36,i,9)
		#call Reduce(d36)
		#call ZtoM(Zd36,Md36,i,9)
		#call Prepared36()
#else
		#if `USETURBO'
			#call TurboMd36()
		#endif
		#call insertionS(Md36,i2,i4,i7,i8,i9,i2,`Q2',i1,i5,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md36b,1)) Multiply replace_(<i5,i4>,...,<i12,i11>);
		#call Insertiond36()
#endif
	#endif
#endprocedure
*--#] reduce-d36 : 
*--#[ reduce-d35 :
#procedure Insertiond35()
* merge propagators with same momentum, and repeated dots
	if (count(Md35b,1)) Multiply replace_(Md35b,Md35c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md35c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2-j1/2+j3/2-j5,j,j1,j3,j5,Md35c,dotmapMd35cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2+j4/2-j5,j,j1,j2,j4,j5,Md35c,dotmapMd35cR2)
	#call replace(i8,-j2/2+j3/2-j4/2,j,j2,j3,j4,Md35c,dotmapMd35cR3)
	#call replace(i9,`Q2'/2+j1/2-j3/2,j,j1,j3,Md35c,dotmapMd35cR4)
	#call replace(i10,j2/2-j3/2-j4/2+j5,j,j2,j3,j4,j5,Md35c,dotmapMd35cR5)
	if (count(Md35c,1)) Multiply replace_(Md35c,Md35d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p2 and change topology to d18
	if (count(Md35d,1)) Multiply replace_(i1,j3,i2,j4,i3,j1,i4,j2,i5,j5);
	if (count(Md35d,1)) Multiply replace_(Md35d,Md18,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd18 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared35()
* Topology: 0-1 1-4* 1-5 4-5 1-5 1-5 4-9
* Dots: p0.p5,p0.p2,p1.p2,p2.p5
* Apply automorphisms
if (match(Md35*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,5
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n7,$n2,$n5,$n3,$n4,$n1)
	#call hash(1,$n9,$n8,$n6,$n6,$n4,$n2,$n3,$n5,$n1)
endif;
if (($n9==0)&&($n6==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
if (($n8==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n9,$n8,$n6,$n7,$n2,$n4,$n3,$n5,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i4,i4,i5,i5,i2,i6,i7);
elseif ($bestiso == 1); Multiply replace_(i2,i5,i4,i2,i5,i4,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 4); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 5); Multiply replace_(i2,i5,i5,i2,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd35 automorphism;

#call CheckRemovedPropagators(d35,5,2,1,3,2,4,5)
#if `$DOACTION' == 0
.sort:reduce d35;
#endif
#endprocedure

#procedure Reduced35()
	#call Prepared35()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd35'
		#call MtoZ(Md35,Zd35,i,9)
		#call Reduce(d35)
		#call ZtoM(Zd35,Md35,i,9)
		#call Prepared35()
#else
		#if `USETURBO'
			#call TurboMd35()
		#endif
		#call insertionS(Md35,i2,i4,i7,i8,i9,i2,`Q2',i1,i5,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md35b,1)) Multiply replace_(<i5,i4>,...,<i12,i11>);
		#call Insertiond35()
#endif
	#endif
#endprocedure
*--#] reduce-d35 : 
*--#[ reduce-d34 :
#procedure Insertiond34()
* merge propagators with same momentum, and repeated dots
	if (count(Md34b,1)) Multiply replace_(Md34b,Md34c,i1,`Q2',i2,i1,i3,i2,i4,i3,i5,i4,i7,i4,i6,i5,i8,i5,i9,i6);

* rewrite insertion dots
	if (count(Md34c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2-j1/2-j2/2+j3/2+j4+j5,j,j1,j2,j3,j4,j5,Md34c,dotmapMd34cR1)
	if (count(Md34c,1)) Multiply replace_(Md34c,Md34d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d11
	if (count(Md34d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i5,j4);
	#call replace(i4,`Q2'/2+j1/2-j2/2+j3/2-j4+j5,j,j1,j2,j3,j4,j5,Md34d,dotmapMd34dR1)
	if (count(Md34d,1)) Multiply replace_(Md34d,Md11,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd11 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared34()
* Topology: 0-1 3-4 1-3* 1-3 3-4 1-3 4-9
* Dots: p0.p2,p0.p3,p1.p2,p1.p3
* Apply automorphisms
if (match(Md34*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,3
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n6,$n3,$n1,$n5,$n2,$n4)
endif;
if (($n8==0)&&($n9==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n9==0)&&($n7==0));
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i4,i3,i5,i4,i1,i5,i3);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 3); Multiply replace_(i3,i5,i5,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd34 automorphism;

#call CheckRemovedPropagators(d34,5,1,2,1,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d34;
#endif
#endprocedure

#procedure Reduced34()
	#call Prepared34()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd34'
		#call MtoZ(Md34,Zd34,i,9)
		#call Reduce(d34)
		#call ZtoM(Zd34,Md34,i,9)
		#call Prepared34()
#else
		#if `USETURBO'
			#call TurboMd34()
		#endif
		#call insertionS(Md34,i1,i4,i8,i9,i1,i2,i3,i8,i9,i10,0,0)
		if (count(Md34b,1)) Multiply replace_(<i5,i4>,...,<i10,i9>);
		#call Insertiond34()
#endif
	#endif
#endprocedure
*--#] reduce-d34 : 
*--#[ reduce-d33 :
#procedure Insertiond33()
* merge propagators with same momentum, and repeated dots
	if (count(Md33b,1)) Multiply replace_(Md33b,Md33c,i10,i5,i11,i10);

* rewrite insertion dots
	if (count(Md33c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,-`Q2'/2+j1/2-j2/2-j5,j,j1,j2,j5,Md33c,dotmapMd33cR1)
	#call replace(i7,-`Q2'/2+j1/2+j3/2-j4/2-j5,j,j1,j3,j4,j5,Md33c,dotmapMd33cR2)
	#call replace(i8,j2/2-j3/2-j4/2,j,j2,j3,j4,Md33c,dotmapMd33cR3)
	#call replace(i9,`Q2'/2+j1/2-j2/2,j,j1,j2,Md33c,dotmapMd33cR4)
	#call replace(i10,j2/2-j3/2+j4/2+j5,j,j2,j3,j4,j5,Md33c,dotmapMd33cR5)
	if (count(Md33c,1)) Multiply replace_(Md33c,Md33d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p3 and change topology to d15
	if (count(Md33d,1)) Multiply replace_(i1,j1,i2,j2,i3,j4,i4,j3,i5,j5);
	if (count(Md33d,1)) Multiply replace_(Md33d,Md15,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd15 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared33()
* Topology: 0-1* 1-2 1-5 2-5 2-5 2-5 2-9
* Dots: p0.p5,p0.p3,p1.p3,p3.p5
* Apply automorphisms
if (match(Md33*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,5
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n7,$n3,$n5,$n4,$n2,$n1)
	#call hash(1,$n9,$n8,$n6,$n6,$n4,$n3,$n5,$n2,$n1)
endif;
if (($n9==0)&&($n6==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(3,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(4,$n9,$n8,$n7,$n6,$n5,$n3,$n4,$n2,$n1)
endif;
if (($n8==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(5,$n9,$n8,$n6,$n7,$n3,$n4,$n5,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i3,i4,i4,i5,i5,i3,i6,i7);
elseif ($bestiso == 1); Multiply replace_(i3,i5,i4,i3,i5,i4,i7,i6);
elseif ($bestiso == 3); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3);
elseif ($bestiso == 5); Multiply replace_(i3,i5,i5,i3,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd33 automorphism;

#call CheckRemovedPropagators(d33,5,1,2,1,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d33;
#endif
#endprocedure

#procedure Reduced33()
	#call Prepared33()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd33'
		#call MtoZ(Md33,Zd33,i,9)
		#call Reduce(d33)
		#call ZtoM(Zd33,Md33,i,9)
		#call Prepared33()
#else
		#if `USETURBO'
			#call TurboMd33()
		#endif
		#call insertionS(Md33,i3,i4,i7,i8,i9,i3,`Q2',i1,i5,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md33b,1)) Multiply replace_(<i5,i4>,...,<i12,i11>);
		#call Insertiond33()
#endif
	#endif
#endprocedure
*--#] reduce-d33 : 
*--#[ reduce-d32 :
#procedure Insertiond32()
* merge propagators with same momentum, and repeated dots
	if (count(Md32b,1)) Multiply replace_(Md32b,Md32c,i11,i5);

* rewrite insertion dots
	if (count(Md32c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'/2+j1/2-j4/2,j,j1,j4,Md32c,dotmapMd32cR1)
	#call replace(i7,`Q2'/2+j2/2-j3/2-j5,j,j2,j3,j5,Md32c,dotmapMd32cR2)
	#call replace(i8,`Q2'/2-j1/2-j4/2,j,j1,j4,Md32c,dotmapMd32cR3)
	#call replace(i9,`Q2'/2+j2/2-j3/2,j,j2,j3,Md32c,dotmapMd32cR4)
	#call replace(i10,`Q2'/2-j1/2+j4/2,j,j1,j4,Md32c,dotmapMd32cR5)
	if (count(Md32c,1)) Multiply replace_(Md32c,Md32d,<j1,i1>,...,<j5,i5>);
* map dots to p1.p3 and change topology to d13
	if (count(Md32d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i4,j4);
	#call replace(i5,`Q2'/2+j1/2-j2/2-j5,j,j1,j2,j5,Md32d,dotmapMd32dR1)
	if (count(Md32d,1)) Multiply replace_(Md32d,Md13,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd13 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared32()
* Topology: 0-1* 2-4 1-2 1-2 2-4 2-4 4-9
* Dots: p2.p5,p0.p1,p1.p2,p1.p5
* Apply automorphisms
if (match(Md32*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,11
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n8,$n1,$n5,$n3,$n2,$n4)
	#call hash(1,$n9,$n8,$n7,$n6,$n5,$n1,$n2,$n3,$n4)
	#call hash(2,$n9,$n8,$n7,$n6,$n1,$n5,$n2,$n3,$n4)
	#call hash(3,$n9,$n6,$n7,$n6,$n4,$n1,$n3,$n2,$n5)
	#call hash(4,$n9,$n8,$n7,$n6,$n4,$n1,$n2,$n3,$n5)
endif;
if (($n8==0)&&($n9==0)&&($n6==0));
	#call hash(5,$n9,$n8,$n7,$n6,$n4,$n5,$n2,$n3,$n1)
endif;
if (($n9==0)&&($n6==0));
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n9,$n8,$n7,$n6,$n4,$n5,$n3,$n2,$n1)
endif;
if (($n8==0)&&($n6==0));
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(8,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
if (($n8==0)&&($n6==0)&&($n7==0));
	#call hash(9,$n9,$n8,$n7,$n6,$n1,$n4,$n2,$n3,$n5)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(10,$n9,$n8,$n7,$n6,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n7==0));
	#call hash(6,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(11,$n9,$n6,$n7,$n8,$n1,$n4,$n3,$n2,$n5)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,11
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i4,i4,i5,i5,i1,i6,i8);
elseif ($bestiso == 1); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i5,i5,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i5,i4,i1,i5,i4,i8,i6);
elseif ($bestiso == 4); Multiply replace_(i1,i5,i2,i3,i3,i2,i4,i1,i5,i4);
elseif ($bestiso == 5); Multiply replace_(i2,i3,i3,i2,i4,i5,i5,i4);
elseif ($bestiso == 7); Multiply replace_(i4,i5,i5,i4);
elseif ($bestiso == 8); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 9); Multiply replace_(i1,i5,i2,i3,i3,i2,i5,i1);
elseif ($bestiso == 10); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 11); Multiply replace_(i1,i5,i5,i1,i6,i8,i8,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso11>,$bestiso,$bestisov;
.sort:Zd32 automorphism;

#call CheckRemovedPropagators(d32,5,0,1,2,3,4,5)
#if `$DOACTION' == 0
.sort:reduce d32;
#endif
#endprocedure

#procedure Reduced32()
	#call Prepared32()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd32'
		#call MtoZ(Md32,Zd32,i,9)
		#call Reduce(d32)
		#call ZtoM(Zd32,Md32,i,9)
		#call Prepared32()
#else
		#if `USETURBO'
			#call TurboMd32()
		#endif
		#call insertionS(Md32,i1,i4,i7,i8,i9,i1,`Q2',i2,i5,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md32b,1)) Multiply replace_(<i5,i4>,...,<i12,i11>);
		#call Insertiond32()
#endif
	#endif
#endprocedure
*--#] reduce-d32 : 
*--#[ reduce-t1star05 :
#procedure Preparet1star05()
* Topology: 0-1* 2-3 1-2 1-4 3-4 2-4* 3-9
* Dots: 
* Apply automorphisms
if (match(Mt1star05*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,3
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n1,$n2,$n3,$n4)
	#call hash(2,$n5,$n3,$n4,$n1,$n2)
	#call hash(3,$n5,$n2,$n1,$n4,$n3)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zt1star05 automorphism;

#call CheckRemovedPropagators(t1star05,5,1,5)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p3 and change topology to d15
	if (count(Mt1star05M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i1,`Q2'+j3+2*j5,j,j3,j5,Mt1star05M1,dotmapMt1star05M1R1)
	if (count(Mt1star05M1,1)) Multiply replace_(Mt1star05M1,Md15,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd15 "1"
#endif

#if `$M2'
* map dots to p0.p3 and change topology to d15
	if (count(Mt1star05M2,1)) Multiply replace_(i1,j1,i3,j3,i4,j2,i5,j4);
	#call replace(i2,`Q2'+j3-2*j5,j,j3,j5,Mt1star05M2,dotmapMt1star05M2R1)
	if (count(Mt1star05M2,1)) Multiply replace_(Mt1star05M2,Md15,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd15 "1"
#endif

#if `$M3'
* map dots to p0.p3 and change topology to d15
	if (count(Mt1star05M3,1)) Multiply replace_(i1,j2,i2,j3,i4,j1,i5,j4);
	#call replace(i3,`Q2'+j3-2*j5,j,j3,j5,Mt1star05M3,dotmapMt1star05M3R1)
	if (count(Mt1star05M3,1)) Multiply replace_(Mt1star05M3,Md15,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd15 "1"
#endif

#if `$M4'
* map dots to p0.p3 and change topology to d15
	if (count(Mt1star05M4,1)) Multiply replace_(i1,j3,i2,j2,i3,j1,i5,j4);
	#call replace(i4,`Q2'+j3-2*j5,j,j3,j5,Mt1star05M4,dotmapMt1star05M4R1)
	if (count(Mt1star05M4,1)) Multiply replace_(Mt1star05M4,Md15,<j1,i1>,...,<j4,i4>,j5,-i5);
	#redefine HASTOPOd15 "1"
#endif
.sort:reduce t1star05;
#endif
#endprocedure

#procedure Reducet1star05()
	#call Preparet1star05()
	#if `$DOACTION'
		#call MtoZ(Mt1star05,Zt1star05,i,5)
		#call Reduce(t1star05)
		#call ZtoM(Zt1star05,Mt1star05,i,5)
		#call Preparet1star05()
	#endif
#endprocedure
*--#] reduce-t1star05 : 
*--#[ reduce-d30 :
#procedure Prepared30()
* Topology: 0-2* 3-5 1-5 1-3 1-2* 2-3 5-9
* Dots: 
* Apply automorphisms
if (match(Md30*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zd30 automorphism;

#call CheckRemovedPropagators(d30,5,1,4)
#if `$DOACTION' == 0

#if `$M1'
* map dots to p0.p1 and change topology to d17
	if (count(Md30M1,1)) Multiply replace_(i2,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i1,`Q2'+j1-2*j5,j,j1,j5,Md30M1,dotmapMd30M1R1)
	if (count(Md30M1,1)) Multiply replace_(Md30M1,Md17,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd17 "1"
#endif

#if `$M2'
* map dots to p0.p1 and change topology to d14
	if (count(Md30M2,1)) Multiply replace_(i1,j1,i3,j2,i4,j3,i5,j4);
	#call replace(i2,`Q2'+j1+2*j5,j,j1,j5,Md30M2,dotmapMd30M2R1)
	if (count(Md30M2,1)) Multiply replace_(Md30M2,Md14,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd14 "1"
#endif

#if `$M3'
* map dots to p1.p3 and change topology to d13
	if (count(Md30M3,1)) Multiply replace_(i1,j1,i2,j2,i4,j3,i5,j4);
	#call replace(i3,-`Q2'+j2+j4-2*j5,j,j2,j4,j5,Md30M3,dotmapMd30M3R1)
	if (count(Md30M3,1)) Multiply replace_(Md30M3,Md13,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd13 "1"
#endif

#if `$M5'
* map dots to p0.p3 and change topology to d15
	if (count(Md30M5,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4);
	#call replace(i5,j1-j2+j4-2*j5,j,j1,j2,j4,j5,Md30M5,dotmapMd30M5R1)
	if (count(Md30M5,1)) Multiply replace_(Md30M5,Md15,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd15 "1"
#endif
.sort:reduce d30;
#endif
#endprocedure

#procedure Reduced30()
	#call Prepared30()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd30'
		#call MtoZ(Md30,Zd30,i,5)
		#call Reduce(d30)
		#call ZtoM(Zd30,Md30,i,5)
#else
		#if `USETURBO'
			#call TurboMd30()
		#endif
		#call triangleS(Md30,i4,i5,i3,i2,i1,1,0)
#endif
		#call Prepared30()
	#endif
#endprocedure
*--#] reduce-d30 : 
#call ReduceEdge(5,\
d53,d52,d51,d50,d49,t1star34,d47,t1star24,d45,t1star55,d43,d42,d41,t1star45,d39\
,d38,d37,d36,d35,d34,d33,d32,t1star05,d30\
)
*--#] 5 edges : 
*--#[ 4 edges :
*--#[ reduce-d29 :
#procedure Insertiond29()
* merge propagators with same momentum, and repeated dots
	if (count(Md29b,1)) Multiply replace_(Md29b,Md29c,i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md29c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md29c,dotmapMd29cR1)
	if (count(Md29c,1)) Multiply replace_(Md29c,Md29d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d2
	if (count(Md29d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md29d,1)) Multiply replace_(Md29d,Md2,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared29()
* Topology: 0-1 2-3 1-2 1-3** 1-2 3-9
* Dots: p0.p2
* Apply automorphisms
if (match(Md29*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n2,$n3,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i4,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd29 automorphism;

#call CheckRemovedPropagators(d29,4,2,1,3,2,4)
#if `$DOACTION' == 0
.sort:reduce d29;
#endif
#endprocedure

#procedure Reduced29()
	#call Prepared29()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd29'
		#call MtoZ(Md29,Zd29,i,5)
		#call Reduce(d29)
		#call ZtoM(Zd29,Md29,i,5)
		#call Prepared29()
#else
		#if `USETURBO'
			#call TurboMd29()
		#endif
		#call insertionS(Md29,i2,i4,i5,i2,`Q2',i5,0,0)
		if (count(Md29b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond29()
#endif
	#endif
#endprocedure
*--#] reduce-d29 : 
*--#[ reduce-d28 :
#procedure Insertiond28()
* merge propagators with same momentum, and repeated dots
	if (count(Md28b,1)) Multiply replace_(Md28b,Md28c,i9,i4,i10,i5,i11,i9);

* rewrite insertion dots
	if (count(Md28c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'-j4-j5,j,j4,j5,Md28c,dotmapMd28cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2+j3/2-j5,j,j1,j2,j3,j5,Md28c,dotmapMd28cR2)
	#call replace(i8,`Q2'/2-j1/2+j2/2-j3/2-j4,j,j1,j2,j3,j4,Md28c,dotmapMd28cR3)
	#call replace(i9,-`Q2'/2+j1/2-j2/2-j3/2+j4+j5,j,j1,j2,j3,j4,j5,Md28c,dotmapMd28cR4)
	if (count(Md28c,1)) Multiply replace_(Md28c,Md28d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d11
	if (count(Md28d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i4,j4);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j3/2-j5,j,j1,j2,j3,j5,Md28d,dotmapMd28dR1)
	if (count(Md28d,1)) Multiply replace_(Md28d,Md11,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd11 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared28()
* Topology: 0-1* 1-2 1-2 1-2 1-2 2-9
* Dots: p0.p3,p0.p4,p0.p1,p1.p3,p1.p4
* Apply automorphisms
if (match(Md28*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,23
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n5==0)&&($n6==0)&&($n7==0));
	#call hash(0,$n9,$n8,$n7,$n7,$n6,$n1,$n4,$n3,$n2)
	#call hash(1,$n9,$n8,$n7,$n5,$n7,$n3,$n1,$n4,$n2)
	#call hash(2,$n9,$n8,$n5,$n6,$n6,$n2,$n4,$n1,$n3)
	#call hash(3,$n8,$n8,$n5,$n7,$n5,$n1,$n2,$n4,$n3)
	#call hash(4,$n9,$n8,$n6,$n5,$n5,$n3,$n2,$n1,$n4)
	#call hash(5,$n9,$n9,$n6,$n6,$n7,$n2,$n1,$n3,$n4)
endif;
if (($n8==0)&&($n9==0)&&($n5==0)&&($n6==0));
	#call hash(6,$n9,$n9,$n7,$n6,$n6,$n2,$n4,$n3,$n1)
	#call hash(7,$n8,$n8,$n7,$n5,$n5,$n3,$n2,$n4,$n1)
endif;
if (($n8==0)&&($n9==0)&&($n6==0)&&($n7==0));
	#call hash(8,$n9,$n8,$n7,$n7,$n5,$n1,$n3,$n4,$n2)
	#call hash(9,$n9,$n8,$n6,$n6,$n5,$n2,$n3,$n1,$n4)
endif;
if (($n9==0)&&($n6==0));
	#call hash(10,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
	#call hash(11,$n9,$n8,$n5,$n6,$n7,$n2,$n1,$n4,$n3)
endif;
if (($n8==0)&&($n9==0)&&($n7==0));
	#call hash(12,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n1,$n2)
	#call hash(13,$n9,$n8,$n7,$n5,$n6,$n3,$n4,$n1,$n2)
endif;
if (($n8==0)&&($n9==0));
	#call hash(14,$n8,$n8,$n5,$n7,$n6,$n1,$n4,$n2,$n3)
	#call hash(15,$n9,$n9,$n6,$n5,$n7,$n3,$n1,$n2,$n4)
endif;
if (($n9==0));
	#call hash(16,$n9,$n8,$n5,$n6,$n7,$n4,$n1,$n2,$n3)
endif;
	#call hash(17,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(18,$n8,$n9,$n7,$n5,$n6,$n3,$n4,$n2,$n1)
if (($n8==0));
	#call hash(19,$n9,$n8,$n6,$n7,$n5,$n1,$n3,$n2,$n4)
endif;
if (($n8==0)&&($n9==0)&&($n5==0)&&($n7==0));
	#call hash(20,$n9,$n8,$n7,$n6,$n7,$n4,$n1,$n3,$n2)
	#call hash(21,$n9,$n8,$n5,$n6,$n5,$n4,$n2,$n1,$n3)
endif;
if (($n8==0)&&($n5==0));
	#call hash(22,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
	#call hash(23,$n9,$n8,$n6,$n7,$n5,$n1,$n2,$n3,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,23
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i3,i3,i4,i4,i1,i5,i6,i6,i7);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i4,i3,i1,i4,i3,i5,i7,i6,i5);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i2,i1,i3,i4,i4,i2,i5,i6,i7,i5);
elseif ($bestiso == 3); Multiply replace_(i1,i3,i2,i4,i3,i2,i4,i1,i6,i7,i7,i5,i9,i8);
elseif ($bestiso == 4); Multiply replace_(i1,i4,i2,i1,i3,i2,i4,i3,i6,i5,i7,i6);
elseif ($bestiso == 5); Multiply replace_(i1,i4,i2,i3,i3,i1,i4,i2,i5,i7,i7,i6,i8,i9);
elseif ($bestiso == 6); Multiply replace_(i2,i3,i3,i4,i4,i2,i5,i6,i8,i9);
elseif ($bestiso == 7); Multiply replace_(i2,i4,i3,i2,i4,i3,i6,i5,i9,i8);
elseif ($bestiso == 8); Multiply replace_(i1,i2,i2,i4,i4,i1,i6,i7);
elseif ($bestiso == 9); Multiply replace_(i1,i4,i2,i1,i4,i2,i7,i6);
elseif ($bestiso == 10); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 11); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2,i5,i7,i7,i5);
elseif ($bestiso == 12); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 13); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3,i5,i6,i6,i5);
elseif ($bestiso == 14); Multiply replace_(i1,i3,i3,i4,i4,i1,i5,i6,i6,i7,i7,i5,i9,i8);
elseif ($bestiso == 15); Multiply replace_(i1,i4,i3,i1,i4,i3,i5,i7,i6,i5,i7,i6,i8,i9);
elseif ($bestiso == 16); Multiply replace_(i1,i3,i3,i1,i5,i7,i7,i5);
elseif ($bestiso == 18); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i5,i8,i9,i9,i8);
elseif ($bestiso == 19); Multiply replace_(i1,i4,i4,i1,i6,i7,i7,i6);
elseif ($bestiso == 20); Multiply replace_(i1,i2,i2,i3,i3,i1,i5,i7);
elseif ($bestiso == 21); Multiply replace_(i1,i3,i2,i1,i3,i2,i7,i5);
elseif ($bestiso == 22); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 23); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1,i6,i7,i7,i6);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso23>,$bestiso,$bestisov;
.sort:Zd28 automorphism;

#call CheckRemovedPropagators(d28,4,0,1,2,3,4)
#if `$DOACTION' == 0
.sort:reduce d28;
#endif
#endprocedure

#procedure Reduced28()
	#call Prepared28()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd28'
		#call MtoZ(Md28,Zd28,i,9)
		#call Reduce(d28)
		#call ZtoM(Zd28,Md28,i,9)
		#call Prepared28()
#else
		#if `USETURBO'
			#call TurboMd28()
		#endif
		#call insertionS(Md28,i1,i2,i7,i8,i9,i1,`Q2',i3,i4,i7,i8,i9,i10,i11,i12,0,0)
		if (count(Md28b,1)) Multiply replace_(<i3,i2>,...,<i12,i11>);
		#call Insertiond28()
#endif
	#endif
#endprocedure
*--#] reduce-d28 : 
*--#[ reduce-d27 :
#procedure Insertiond27()
* merge propagators with same momentum, and repeated dots
	if (count(Md27b,1)) Multiply replace_(Md27b,Md27c,i9,i4,i10,i5,i11,i9);

* rewrite insertion dots
	if (count(Md27c,1)) Multiply replace_(i1,j1,i2,j2,i3,j3,i4,j4,i5,j5);
	#call replace(i6,`Q2'-j4-j5,j,j4,j5,Md27c,dotmapMd27cR1)
	#call replace(i7,`Q2'/2-j1/2-j2/2+j3/2-j5,j,j1,j2,j3,j5,Md27c,dotmapMd27cR2)
	#call replace(i8,`Q2'/2-j1/2+j2/2-j3/2-j4,j,j1,j2,j3,j4,Md27c,dotmapMd27cR3)
	#call replace(i9,-`Q2'/2+j1/2-j2/2-j3/2+j4+j5,j,j1,j2,j3,j4,j5,Md27c,dotmapMd27cR4)
	if (count(Md27c,1)) Multiply replace_(Md27c,Md27d,<j1,i1>,...,<j5,i5>);
* map dots to p0.p1,p1.p3 and change topology to d8
	if (count(Md27d,1)) Multiply replace_(i1,j3,i2,j1,i3,j2,i4,j4);
	#call replace(i5,`Q2'/2-j1/2+j2/2-j3/2-j5,j,j1,j2,j3,j5,Md27d,dotmapMd27dR1)
	if (count(Md27d,1)) Multiply replace_(Md27d,Md8,<j1,i1>,...,<j5,i5>);
	#redefine HASTOPOd8 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared27()
* Topology: 0-1 1-4* 1-4 1-4 1-4 4-9
* Dots: p0.p3,p0.p4,p0.p1,p1.p3,p1.p4
* Apply automorphisms
if (match(Md27*<1/i1^n1?$n1>*...*<1/i9^n9?$n9>));
#do i=0,5
	$iso`i'=`HASHBASE'^11;
#enddo
if (($n8==0)&&($n9==0)&&($n5==0)&&($n6==0));
	#call hash(0,$n9,$n9,$n7,$n6,$n6,$n2,$n4,$n3,$n1)
	#call hash(1,$n8,$n8,$n7,$n5,$n5,$n3,$n2,$n4,$n1)
endif;
if (($n9==0)&&($n6==0));
	#call hash(2,$n9,$n8,$n7,$n6,$n5,$n2,$n3,$n4,$n1)
endif;
	#call hash(3,$n9,$n8,$n7,$n6,$n5,$n4,$n3,$n2,$n1)
	#call hash(4,$n8,$n9,$n7,$n5,$n6,$n3,$n4,$n2,$n1)
if (($n8==0)&&($n5==0));
	#call hash(5,$n9,$n8,$n7,$n6,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^11;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i4,i4,i2,i5,i6,i8,i9);
elseif ($bestiso == 1); Multiply replace_(i2,i4,i3,i2,i4,i3,i6,i5,i9,i8);
elseif ($bestiso == 2); Multiply replace_(i2,i4,i4,i2);
elseif ($bestiso == 4); Multiply replace_(i3,i4,i4,i3,i5,i6,i6,i5,i8,i9,i9,i8);
elseif ($bestiso == 5); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n9>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd27 automorphism;

#call CheckRemovedPropagators(d27,4,1,1,2,3,4)
#if `$DOACTION' == 0
.sort:reduce d27;
#endif
#endprocedure

#procedure Reduced27()
	#call Prepared27()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd27'
		#call MtoZ(Md27,Zd27,i,9)
		#call Reduce(d27)
		#call ZtoM(Zd27,Md27,i,9)
		#call Prepared27()
#else
		#if `USETURBO'
			#call TurboMd27()
		#endif
		#call insertionS(Md27,i1,i2,i7,i8,i9,i1,`Q2',i3,i4,i7,i8,i9,i10,i11,i12,1,0)
		if (count(Md27b,1)) Multiply replace_(<i3,i2>,...,<i12,i11>);
		#call Insertiond27()
#endif
	#endif
#endprocedure
*--#] reduce-d27 : 
*--#[ reduce-d26 :
#procedure Insertiond26()
* merge propagators with same momentum, and repeated dots
	if (count(Md26b,1)) Multiply replace_(Md26b,Md26c,i1,`Q2',i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md26c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md26c,dotmapMd26cR1)
	if (count(Md26c,1)) Multiply replace_(Md26c,Md26d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d3
	if (count(Md26d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md26d,1)) Multiply replace_(Md26d,Md3,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd3 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared26()
* Topology: 0-1** 2-4 1-2 1-2 2-4 4-9
* Dots: p1.p2
* Apply automorphisms
if (match(Md26*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,7
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n2,$n3,$n1)
	#call hash(1,$n5,$n1,$n3,$n2,$n4)
	#call hash(2,$n5,$n1,$n2,$n3,$n4)
	#call hash(3,$n5,$n3,$n1,$n4,$n2)
	#call hash(4,$n5,$n2,$n4,$n1,$n3)
	#call hash(5,$n5,$n2,$n1,$n4,$n3)
endif;
	#call hash(6,$n5,$n4,$n3,$n2,$n1)
	#call hash(7,$n5,$n3,$n4,$n1,$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,7
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 1); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i2,i2,i4,i3,i1,i4,i3);
elseif ($bestiso == 4); Multiply replace_(i1,i3,i2,i1,i3,i4,i4,i2);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i2,i4,i3,i1,i4,i2);
elseif ($bestiso == 7); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso7>,$bestiso,$bestisov;
.sort:Zd26 automorphism;

#call CheckRemovedPropagators(d26,4,0,1,2,3,4)
#if `$DOACTION' == 0
.sort:reduce d26;
#endif
#endprocedure

#procedure Reduced26()
	#call Prepared26()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd26'
		#call MtoZ(Md26,Zd26,i,5)
		#call Reduce(d26)
		#call ZtoM(Zd26,Md26,i,5)
		#call Prepared26()
#else
		#if `USETURBO'
			#call TurboMd26()
		#endif
		#call insertionS(Md26,i1,i4,i5,i1,i2,i5,0,0)
		if (count(Md26b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond26()
#endif
	#endif
#endprocedure
*--#] reduce-d26 : 
*--#[ reduce-d25 :
#procedure Insertiond25()
* merge propagators with same momentum, and repeated dots
	if (count(Md25b,1)) Multiply replace_(Md25b,Md25c,i1,`Q2',i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md25c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md25c,dotmapMd25cR1)
	if (count(Md25c,1)) Multiply replace_(Md25c,Md25d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d4
	if (count(Md25d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md25d,1)) Multiply replace_(Md25d,Md4,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd4 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared25()
* Topology: 0-1 2-3 1-2 1-2* 2-3* 3-9
* Dots: p1.p2
* Apply automorphisms
if (match(Md25*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n3,$n4,$n1,$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1,i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd25 automorphism;

#call CheckRemovedPropagators(d25,4,2,3,4,1,2)
#if `$DOACTION' == 0
.sort:reduce d25;
#endif
#endprocedure

#procedure Reduced25()
	#call Prepared25()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd25'
		#call MtoZ(Md25,Zd25,i,5)
		#call Reduce(d25)
		#call ZtoM(Zd25,Md25,i,5)
		#call Prepared25()
#else
		#if `USETURBO'
			#call TurboMd25()
		#endif
		#call insertionS(Md25,i1,i4,i5,i1,i2,i5,0,1)
		if (count(Md25b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond25()
#endif
	#endif
#endprocedure
*--#] reduce-d25 : 
*--#[ reduce-d24 :
#procedure Insertiond24()
* merge propagators with same momentum, and repeated dots
	if (count(Md24b,1)) Multiply replace_(Md24b,Md24c,i1,`Q2',i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md24c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md24c,dotmapMd24cR1)
	if (count(Md24c,1)) Multiply replace_(Md24c,Md24d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d3
	if (count(Md24d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md24d,1)) Multiply replace_(Md24d,Md3,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd3 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared24()
* Topology: 0-1 2-4** 1-2 1-2 2-4 4-9
* Dots: p1.p2
* Apply automorphisms
if (match(Md24*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n4,$n2,$n3,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd24 automorphism;

#call CheckRemovedPropagators(d24,4,1,1,2,3,4)
#if `$DOACTION' == 0
.sort:reduce d24;
#endif
#endprocedure

#procedure Reduced24()
	#call Prepared24()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd24'
		#call MtoZ(Md24,Zd24,i,5)
		#call Reduce(d24)
		#call ZtoM(Zd24,Md24,i,5)
		#call Prepared24()
#else
		#if `USETURBO'
			#call TurboMd24()
		#endif
		#call insertionS(Md24,i1,i4,i5,i1,i2,i5,2,0)
		if (count(Md24b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond24()
#endif
	#endif
#endprocedure
*--#] reduce-d24 : 
*--#[ reduce-d23 :
#procedure Insertiond23()
* merge propagators with same momentum, and repeated dots
	if (count(Md23b,1)) Multiply replace_(Md23b,Md23c,i1,`Q2',i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md23c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md23c,dotmapMd23cR1)
	if (count(Md23c,1)) Multiply replace_(Md23c,Md23d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d3
	if (count(Md23d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md23d,1)) Multiply replace_(Md23d,Md3,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd3 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared23()
* Topology: 0-1 2-3* 1-2 1-2 2-3* 3-9
* Dots: p1.p2
* Apply automorphisms
if (match(Md23*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,3
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n4,$n2,$n3,$n1)
	#call hash(2,$n5,$n1,$n3,$n2,$n4)
	#call hash(3,$n5,$n1,$n2,$n3,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,3
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 2); Multiply replace_(i1,i4,i4,i1);
elseif ($bestiso == 3); Multiply replace_(i1,i4,i2,i3,i3,i2,i4,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso3>,$bestiso,$bestisov;
.sort:Zd23 automorphism;

#call CheckRemovedPropagators(d23,4,2,1,4,2,3)
#if `$DOACTION' == 0
.sort:reduce d23;
#endif
#endprocedure

#procedure Reduced23()
	#call Prepared23()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd23'
		#call MtoZ(Md23,Zd23,i,5)
		#call Reduce(d23)
		#call ZtoM(Zd23,Md23,i,5)
		#call Prepared23()
#else
		#if `USETURBO'
			#call TurboMd23()
		#endif
		#call insertionS(Md23,i1,i4,i5,i1,i2,i5,1,1)
		if (count(Md23b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond23()
#endif
	#endif
#endprocedure
*--#] reduce-d23 : 
*--#[ reduce-d22 :
#procedure Insertiond22()
* merge propagators with same momentum, and repeated dots
	if (count(Md22b,1)) Multiply replace_(Md22b,Md22c,i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md22c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md22c,dotmapMd22cR1)
	if (count(Md22c,1)) Multiply replace_(Md22c,Md22d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d4
	if (count(Md22d,1)) Multiply replace_(i1,j2,i2,j1);
	if (count(Md22d,1)) Multiply replace_(Md22d,Md4,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd4 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared22()
* Topology: 0-1** 2-3 1-2 1-3 2-3 3-9
* Dots: p0.p1
* Apply automorphisms
if (match(Md22*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n1,$n3,$n2,$n4)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i4,i4,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd22 automorphism;

#call CheckRemovedPropagators(d22,4,1,2,1,3,4)
#if `$DOACTION' == 0
.sort:reduce d22;
#endif
#endprocedure

#procedure Reduced22()
	#call Prepared22()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd22'
		#call MtoZ(Md22,Zd22,i,5)
		#call Reduce(d22)
		#call ZtoM(Zd22,Md22,i,5)
		#call Prepared22()
#else
		#if `USETURBO'
			#call TurboMd22()
		#endif
		#call insertionS(Md22,i1,i4,i5,i1,`Q2',i5,0,0)
		if (count(Md22b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond22()
#endif
	#endif
#endprocedure
*--#] reduce-d22 : 
*--#[ reduce-d21 :
#procedure Insertiond21()
* merge propagators with same momentum, and repeated dots
	if (count(Md21b,1)) Multiply replace_(Md21b,Md21c,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md21c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2-j1/2+j2/2,j,j1,j2,Md21c,dotmapMd21cR1)
	if (count(Md21c,1)) Multiply replace_(Md21c,Md21d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d5
	if (count(Md21d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md21d,1)) Multiply replace_(Md21d,Md5,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared21()
* Topology: 0-1 1-3 1-5 3-5** 1-5 3-9
* Dots: p0.p2
* Apply automorphisms
if (match(Md21*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n2,$n3,$n4,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i2,i4,i4,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd21 automorphism;

#call CheckRemovedPropagators(d21,4,1,3,1,2,4)
#if `$DOACTION' == 0
.sort:reduce d21;
#endif
#endprocedure

#procedure Reduced21()
	#call Prepared21()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd21'
		#call MtoZ(Md21,Zd21,i,5)
		#call Reduce(d21)
		#call ZtoM(Zd21,Md21,i,5)
		#call Prepared21()
#else
		#if `USETURBO'
			#call TurboMd21()
		#endif
		#call insertionS(Md21,i2,i4,i5,i2,`Q2',i5,0,0)
		if (count(Md21b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond21()
#endif
	#endif
#endprocedure
*--#] reduce-d21 : 
*--#[ reduce-d20 :
#procedure Insertiond20()
* merge propagators with same momentum, and repeated dots
	if (count(Md20b,1)) Multiply replace_(Md20b,Md20c,i3,i2,i4,-i3);

* rewrite insertion dots
	if (count(Md20c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2-j1/2+j2/2,j,j1,j2,Md20c,dotmapMd20cR1)
	if (count(Md20c,1)) Multiply replace_(Md20c,Md20d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d5
	if (count(Md20d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md20d,1)) Multiply replace_(Md20d,Md5,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared20()
* Topology: 0-1 1-2 1-4 2-4 2-4** 2-9
* Dots: p0.p3
* Apply automorphisms
if (match(Md20*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zd20 automorphism;

#call CheckRemovedPropagators(d20,4,2,2,4,1,3)
#if `$DOACTION' == 0
.sort:reduce d20;
#endif
#endprocedure

#procedure Reduced20()
	#call Prepared20()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd20'
		#call MtoZ(Md20,Zd20,i,5)
		#call Reduce(d20)
		#call ZtoM(Zd20,Md20,i,5)
		#call Prepared20()
#else
		#if `USETURBO'
			#call TurboMd20()
		#endif
		#call insertionS(Md20,i3,i4,i5,i3,`Q2',i5,0,2)
		if (count(Md20b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond20()
#endif
	#endif
#endprocedure
*--#] reduce-d20 : 
*--#[ reduce-d19 :
#procedure Insertiond19()
* merge propagators with same momentum, and repeated dots
	if (count(Md19b,1)) Multiply replace_(Md19b,Md19c,i3,i2,i4,-i3);

* rewrite insertion dots
	if (count(Md19c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2-j1/2+j2/2,j,j1,j2,Md19c,dotmapMd19cR1)
	if (count(Md19c,1)) Multiply replace_(Md19c,Md19d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d5
	if (count(Md19d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md19d,1)) Multiply replace_(Md19d,Md5,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared19()
* Topology: 0-1 1-2 1-4 2-4* 2-4* 2-9
* Dots: p0.p3
* Apply automorphisms
if (match(Md19*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd19 automorphism;

#call CheckRemovedPropagators(d19,4,3,2,3,4,1)
#if `$DOACTION' == 0
.sort:reduce d19;
#endif
#endprocedure

#procedure Reduced19()
	#call Prepared19()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd19'
		#call MtoZ(Md19,Zd19,i,5)
		#call Reduce(d19)
		#call ZtoM(Zd19,Md19,i,5)
		#call Prepared19()
#else
		#if `USETURBO'
			#call TurboMd19()
		#endif
		#call insertionS(Md19,i3,i4,i5,i3,`Q2',i5,1,1)
		if (count(Md19b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond19()
#endif
	#endif
#endprocedure
*--#] reduce-d19 : 
*--#[ reduce-d18 :
#procedure Insertiond18()
* merge propagators with same momentum, and repeated dots
	if (count(Md18b,1)) Multiply replace_(Md18b,Md18c,i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md18c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md18c,dotmapMd18cR1)
	if (count(Md18c,1)) Multiply replace_(Md18c,Md18d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d2
	if (count(Md18d,1)) Multiply replace_(i1,j2,i2,j1);
	if (count(Md18d,1)) Multiply replace_(Md18d,Md2,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared18()
* Topology: 0-1 2-3 1-2 1-3* 1-2* 3-9
* Dots: p0.p2
* Apply automorphisms
if (match(Md18*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zd18 automorphism;

#call CheckRemovedPropagators(d18,4,3,1,3,4,2)
#if `$DOACTION' == 0
.sort:reduce d18;
#endif
#endprocedure

#procedure Reduced18()
	#call Prepared18()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd18'
		#call MtoZ(Md18,Zd18,i,5)
		#call Reduce(d18)
		#call ZtoM(Zd18,Md18,i,5)
		#call Prepared18()
#else
		#if `USETURBO'
			#call TurboMd18()
		#endif
		#call insertionS(Md18,i2,i4,i5,i2,`Q2',i5,0,1)
		if (count(Md18b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond18()
#endif
	#endif
#endprocedure
*--#] reduce-d18 : 
*--#[ reduce-d17 :
#procedure Insertiond17()
* merge propagators with same momentum, and repeated dots
	if (count(Md17b,1)) Multiply replace_(Md17b,Md17c,i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md17c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md17c,dotmapMd17cR1)
	if (count(Md17c,1)) Multiply replace_(Md17c,Md17d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d6
	if (count(Md17d,1)) Multiply replace_(i1,j2,i2,j1);
	if (count(Md17d,1)) Multiply replace_(Md17d,Md6,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd6 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared17()
* Topology: 0-2* 1-3 1-3 1-2* 2-3 3-9
* Dots: p0.p1
* Apply automorphisms
if (match(Md17*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd17 automorphism;

#call CheckRemovedPropagators(d17,4,1,3,1,2,4)
#if `$DOACTION' == 0
.sort:reduce d17;
#endif
#endprocedure

#procedure Reduced17()
	#call Prepared17()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd17'
		#call MtoZ(Md17,Zd17,i,5)
		#call Reduce(d17)
		#call ZtoM(Zd17,Md17,i,5)
		#call Prepared17()
#else
		#if `USETURBO'
			#call TurboMd17()
		#endif
		#call insertionS(Md17,i1,i2,i5,i1,`Q2',i5,0,0)
		if (count(Md17b,1)) Multiply replace_(<i3,i2>,...,<i5,i4>);
		#call Insertiond17()
#endif
	#endif
#endprocedure
*--#] reduce-d17 : 
*--#[ reduce-d16 :
#procedure Insertiond16()
* merge propagators with same momentum, and repeated dots
	if (count(Md16b,1)) Multiply replace_(Md16b,Md16c,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md16c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2-j1/2+j2/2,j,j1,j2,Md16c,dotmapMd16cR1)
	if (count(Md16c,1)) Multiply replace_(Md16c,Md16d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d5
	if (count(Md16d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md16d,1)) Multiply replace_(Md16d,Md5,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd5 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared16()
* Topology: 0-1 1-3 1-4 3-4* 1-4* 3-9
* Dots: p0.p2
* Apply automorphisms
if (match(Md16*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zd16 automorphism;

#call CheckRemovedPropagators(d16,4,2,3,4,1,2)
#if `$DOACTION' == 0
.sort:reduce d16;
#endif
#endprocedure

#procedure Reduced16()
	#call Prepared16()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd16'
		#call MtoZ(Md16,Zd16,i,5)
		#call Reduce(d16)
		#call ZtoM(Zd16,Md16,i,5)
		#call Prepared16()
#else
		#if `USETURBO'
			#call TurboMd16()
		#endif
		#call insertionS(Md16,i2,i4,i5,i2,`Q2',i5,0,1)
		if (count(Md16b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond16()
#endif
	#endif
#endprocedure
*--#] reduce-d16 : 
*--#[ reduce-d15 :
#procedure Insertiond15()
* merge propagators with same momentum, and repeated dots
	if (count(Md15b,1)) Multiply replace_(Md15b,Md15c,i3,i2,i4,-i3);

* rewrite insertion dots
	if (count(Md15c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2-j1/2+j2/2,j,j1,j2,Md15c,dotmapMd15cR1)
	if (count(Md15c,1)) Multiply replace_(Md15c,Md15d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d6
	if (count(Md15d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md15d,1)) Multiply replace_(Md15d,Md6,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd6 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared15()
* Topology: 0-1* 1-2 1-4 2-4 2-4* 2-9
* Dots: p0.p3
* Apply automorphisms
if (match(Md15*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
endif;
ModuleOption local,<$n1>,...,<$n5>;
.sort:Zd15 automorphism;

#call CheckRemovedPropagators(d15,4,2,2,4,1,3)
#if `$DOACTION' == 0
.sort:reduce d15;
#endif
#endprocedure

#procedure Reduced15()
	#call Prepared15()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd15'
		#call MtoZ(Md15,Zd15,i,5)
		#call Reduce(d15)
		#call ZtoM(Zd15,Md15,i,5)
		#call Prepared15()
#else
		#if `USETURBO'
			#call TurboMd15()
		#endif
		#call insertionS(Md15,i3,i4,i5,i3,`Q2',i5,0,1)
		if (count(Md15b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond15()
#endif
	#endif
#endprocedure
*--#] reduce-d15 : 
*--#[ reduce-d14 :
#procedure Insertiond14()
* merge propagators with same momentum, and repeated dots
	if (count(Md14b,1)) Multiply replace_(Md14b,Md14c,i3,i1,i4,i3);

* rewrite insertion dots
	if (count(Md14c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md14c,dotmapMd14cR1)
	if (count(Md14c,1)) Multiply replace_(Md14c,Md14d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d7
	if (count(Md14d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md14d,1)) Multiply replace_(Md14d,Md7,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd7 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared14()
* Topology: 0-2* 1-3 1-3 1-2* 2-3 1-9
* Dots: p0.p1
* Apply automorphisms
if (match(Md14*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd14 automorphism;

#call CheckRemovedPropagators(d14,4,2,3,4,1,2)
#if `$DOACTION' == 0
.sort:reduce d14;
#endif
#endprocedure

#procedure Reduced14()
	#call Prepared14()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd14'
		#call MtoZ(Md14,Zd14,i,5)
		#call Reduce(d14)
		#call ZtoM(Zd14,Md14,i,5)
		#call Prepared14()
#else
		#if `USETURBO'
			#call TurboMd14()
		#endif
		#call insertionS(Md14,i1,i2,i5,i1,`Q2',i5,0,0)
		if (count(Md14b,1)) Multiply replace_(<i3,i2>,...,<i5,i4>);
		#call Insertiond14()
#endif
	#endif
#endprocedure
*--#] reduce-d14 : 
*--#[ reduce-d13 :
#procedure Insertiond13()
* merge propagators with same momentum, and repeated dots
	if (count(Md13b,1)) Multiply replace_(Md13b,Md13c,i1,`Q2',i2,i1,i3,i2,i4,i3);

* rewrite insertion dots
	if (count(Md13c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,-`Q2'/2-j1/2+j2/2,j,j1,j2,Md13c,dotmapMd13cR1)
	if (count(Md13c,1)) Multiply replace_(Md13c,Md13d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d4
	if (count(Md13d,1)) Multiply replace_(i1,j2,i2,j1);
	if (count(Md13d,1)) Multiply replace_(Md13d,Md4,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd4 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared13()
* Topology: 0-2* 1-5 1-5 1-2* 1-2 5-9
* Dots: p1.p3
* Apply automorphisms
if (match(Md13*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n4,$n3,$n1,$n2)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd13 automorphism;

#call CheckRemovedPropagators(d13,4,1,3,1,2,4)
#if `$DOACTION' == 0
.sort:reduce d13;
#endif
#endprocedure

#procedure Reduced13()
	#call Prepared13()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd13'
		#call MtoZ(Md13,Zd13,i,5)
		#call Reduce(d13)
		#call ZtoM(Zd13,Md13,i,5)
		#call Prepared13()
#else
		#if `USETURBO'
			#call TurboMd13()
		#endif
		#call insertionS(Md13,i1,i2,i5,i1,i3,i5,0,0)
		if (count(Md13b,1)) Multiply replace_(<i3,i2>,...,<i5,i4>);
		#call Insertiond13()
#endif
	#endif
#endprocedure
*--#] reduce-d13 : 
*--#[ reduce-d12 :
#procedure Insertiond12()
* merge propagators with same momentum, and repeated dots
	if (count(Md12b,1)) Multiply replace_(Md12b,Md12c,i3,i2,i4,-i3);

* rewrite insertion dots
	if (count(Md12c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2-j1/2+j2/2,j,j1,j2,Md12c,dotmapMd12cR1)
	if (count(Md12c,1)) Multiply replace_(Md12c,Md12d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d2
	if (count(Md12d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md12d,1)) Multiply replace_(Md12d,Md2,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared12()
* Topology: 0-1 1-3* 1-5* 3-5 3-5 3-9
* Dots: p0.p3
* Apply automorphisms
if (match(Md12*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n3,$n2,$n1)
	#call hash(1,$n5,$n3,$n4,$n2,$n1)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i3,i4,i4,i3);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd12 automorphism;

#call CheckRemovedPropagators(d12,4,2,1,2,3,4)
#if `$DOACTION' == 0
.sort:reduce d12;
#endif
#endprocedure

#procedure Reduced12()
	#call Prepared12()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd12'
		#call MtoZ(Md12,Zd12,i,5)
		#call Reduce(d12)
		#call ZtoM(Zd12,Md12,i,5)
		#call Prepared12()
#else
		#if `USETURBO'
			#call TurboMd12()
		#endif
		#call insertionS(Md12,i3,i4,i5,i3,`Q2',i5,0,0)
		if (count(Md12b,1)) Multiply replace_(<i5,i4>,...,<i5,i4>);
		#call Insertiond12()
#endif
	#endif
#endprocedure
*--#] reduce-d12 : 
#call ReduceEdge(4,\
d29,d28,d27,d26,d25,d24,d23,d22,d21,d20,d19,d18,d17,d16,d15,d14,d13,d12\
)
*--#] 4 edges : 
*--#[ 3 edges :
*--#[ reduce-d11 :
#procedure Insertiond11()
* merge propagators with same momentum, and repeated dots
	if (count(Md11b,1)) Multiply replace_(Md11b,Md11c);

* rewrite insertion dots
	if (count(Md11c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md11c,dotmapMd11cR1)
	#call replace(i4,`Q2'/2-j1/2-j2/2,j,j1,j2,Md11c,dotmapMd11cR2)
	#call replace(i5,`Q2'/2-j1/2+j2/2,j,j1,j2,Md11c,dotmapMd11cR3)
	if (count(Md11c,1)) Multiply replace_(Md11c,Md11d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d7
	if (count(Md11d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md11d,1)) Multiply replace_(Md11d,Md7,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd7 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared11()
* Topology: 0-1* 1-2 1-2 1-2* 2-9
* Dots: p0.p1,p1.p3
* Apply automorphisms
if (match(Md11*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n4==0)&&($n5==0));
	#call hash(0,$n5,$n4,$n3,$n1,$n2)
endif;
	#call hash(1,$n5,$n4,$n3,$n2,$n1)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd11 automorphism;

#call CheckRemovedPropagators(d11,3,1,3,1,2)
#if `$DOACTION' == 0
.sort:reduce d11;
#endif
#endprocedure

#procedure Reduced11()
	#call Prepared11()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd11'
		#call MtoZ(Md11,Zd11,i,5)
		#call Reduce(d11)
		#call ZtoM(Zd11,Md11,i,5)
		#call Prepared11()
#else
		#if `USETURBO'
			#call TurboMd11()
		#endif
		#call insertionS(Md11,i1,i2,i4,i5,i1,`Q2',i3,i4,i5,i6,0,0)
		if (count(Md11b,1)) Multiply replace_(<i3,i2>,...,<i6,i5>);
		#call Insertiond11()
#endif
	#endif
#endprocedure
*--#] reduce-d11 : 
*--#[ reduce-d10 :
#procedure Insertiond10()
* merge propagators with same momentum, and repeated dots
	if (count(Md10b,1)) Multiply replace_(Md10b,Md10c);

* rewrite insertion dots
	if (count(Md10c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md10c,dotmapMd10cR1)
	#call replace(i4,`Q2'/2-j1/2-j2/2,j,j1,j2,Md10c,dotmapMd10cR2)
	#call replace(i5,`Q2'/2-j1/2+j2/2,j,j1,j2,Md10c,dotmapMd10cR3)
	if (count(Md10c,1)) Multiply replace_(Md10c,Md10d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d2
	if (count(Md10d,1)) Multiply replace_(i1,j2,i2,j1);
	if (count(Md10d,1)) Multiply replace_(Md10d,Md2,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared10()
* Topology: 0-1 1-2 1-2* 1-2* 2-9
* Dots: p0.p1,p1.p3
* Apply automorphisms
if (match(Md10*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n5==0));
	#call hash(0,$n5,$n4,$n2,$n3,$n1)
endif;
	#call hash(1,$n5,$n4,$n3,$n2,$n1)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i2,i3,i3,i2);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd10 automorphism;

#call CheckRemovedPropagators(d10,3,2,2,3,1)
#if `$DOACTION' == 0
.sort:reduce d10;
#endif
#endprocedure

#procedure Reduced10()
	#call Prepared10()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd10'
		#call MtoZ(Md10,Zd10,i,5)
		#call Reduce(d10)
		#call ZtoM(Zd10,Md10,i,5)
		#call Prepared10()
#else
		#if `USETURBO'
			#call TurboMd10()
		#endif
		#call insertionS(Md10,i1,i2,i4,i5,i1,`Q2',i3,i4,i5,i6,0,1)
		if (count(Md10b,1)) Multiply replace_(<i3,i2>,...,<i6,i5>);
		#call Insertiond10()
#endif
	#endif
#endprocedure
*--#] reduce-d10 : 
*--#[ reduce-d9 :
#procedure Insertiond9()
* merge propagators with same momentum, and repeated dots
	if (count(Md9b,1)) Multiply replace_(Md9b,Md9c);

* rewrite insertion dots
	if (count(Md9c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md9c,dotmapMd9cR1)
	#call replace(i4,`Q2'/2-j1/2-j2/2,j,j1,j2,Md9c,dotmapMd9cR2)
	#call replace(i5,`Q2'/2-j1/2+j2/2,j,j1,j2,Md9c,dotmapMd9cR3)
	if (count(Md9c,1)) Multiply replace_(Md9c,Md9d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d4
	if (count(Md9d,1)) Multiply replace_(i1,j2,i2,j1);
	if (count(Md9d,1)) Multiply replace_(Md9d,Md4,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd4 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared9()
* Topology: 0-1** 1-3 1-3 1-3 3-9
* Dots: p0.p1,p1.p3
* Apply automorphisms
if (match(Md9*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,5
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n4==0)&&($n5==0));
	#call hash(0,$n5,$n4,$n3,$n1,$n2)
	#call hash(1,$n5,$n4,$n1,$n3,$n2)
	#call hash(2,$n5,$n4,$n2,$n1,$n3)
endif;
if (($n5==0));
	#call hash(3,$n5,$n4,$n2,$n3,$n1)
endif;
	#call hash(4,$n5,$n4,$n3,$n2,$n1)
if (($n4==0));
	#call hash(5,$n5,$n4,$n1,$n2,$n3)
endif;
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,5
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
elseif ($bestiso == 1); Multiply replace_(i1,i2,i2,i3,i3,i1);
elseif ($bestiso == 2); Multiply replace_(i1,i3,i2,i1,i3,i2);
elseif ($bestiso == 3); Multiply replace_(i2,i3,i3,i2);
elseif ($bestiso == 5); Multiply replace_(i1,i3,i3,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso5>,$bestiso,$bestisov;
.sort:Zd9 automorphism;

#call CheckRemovedPropagators(d9,3,0,1,2,3)
#if `$DOACTION' == 0
.sort:reduce d9;
#endif
#endprocedure

#procedure Reduced9()
	#call Prepared9()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd9'
		#call MtoZ(Md9,Zd9,i,5)
		#call Reduce(d9)
		#call ZtoM(Zd9,Md9,i,5)
		#call Prepared9()
#else
		#if `USETURBO'
			#call TurboMd9()
		#endif
		#call insertionS(Md9,i1,i2,i4,i5,i1,`Q2',i3,i4,i5,i6,0,0)
		if (count(Md9b,1)) Multiply replace_(<i3,i2>,...,<i6,i5>);
		#call Insertiond9()
#endif
	#endif
#endprocedure
*--#] reduce-d9 : 
*--#[ reduce-d8 :
#procedure Insertiond8()
* merge propagators with same momentum, and repeated dots
	if (count(Md8b,1)) Multiply replace_(Md8b,Md8c);

* rewrite insertion dots
	if (count(Md8c,1)) Multiply replace_(i1,j1,i2,j2);
	#call replace(i3,`Q2'/2+j1/2-j2/2,j,j1,j2,Md8c,dotmapMd8cR1)
	#call replace(i4,`Q2'/2-j1/2-j2/2,j,j1,j2,Md8c,dotmapMd8cR2)
	#call replace(i5,`Q2'/2-j1/2+j2/2,j,j1,j2,Md8c,dotmapMd8cR3)
	if (count(Md8c,1)) Multiply replace_(Md8c,Md8d,<j1,i1>,...,<j2,i2>);
* map dots to  and change topology to d2
	if (count(Md8d,1)) Multiply replace_(i1,j1,i2,j2);
	if (count(Md8d,1)) Multiply replace_(Md8d,Md2,<j1,i1>,...,<j2,i2>);
	#redefine HASTOPOd2 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared8()
* Topology: 0-1 1-2 1-2 1-2** 2-9
* Dots: p0.p1,p1.p3
* Apply automorphisms
if (match(Md8*<1/i1^n1?$n1>*...*<1/i5^n5?$n5>));
#do i=0,1
	$iso`i'=`HASHBASE'^7;
#enddo
if (($n4==0)&&($n5==0));
	#call hash(0,$n5,$n4,$n3,$n1,$n2)
endif;
	#call hash(1,$n5,$n4,$n3,$n2,$n1)
$bestiso=-1;
$bestisov=`HASHBASE'^7;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 0); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n5>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd8 automorphism;

#call CheckRemovedPropagators(d8,3,1,3,1,2)
#if `$DOACTION' == 0
.sort:reduce d8;
#endif
#endprocedure

#procedure Reduced8()
	#call Prepared8()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd8'
		#call MtoZ(Md8,Zd8,i,5)
		#call Reduce(d8)
		#call ZtoM(Zd8,Md8,i,5)
		#call Prepared8()
#else
		#if `USETURBO'
			#call TurboMd8()
		#endif
		#call insertionS(Md8,i1,i2,i4,i5,i1,`Q2',i3,i4,i5,i6,0,0)
		if (count(Md8b,1)) Multiply replace_(<i3,i2>,...,<i6,i5>);
		#call Insertiond8()
#endif
	#endif
#endprocedure
*--#] reduce-d8 : 
#call ReduceEdge(3,\
d11,d10,d9,d8\
)
*--#] 3 edges : 
*--#[ 2 edges :
*--#[ reduce-d7 :
#procedure Insertiond7()
* merge propagators with same momentum, and repeated dots
	if (count(Md7b,1)) Multiply replace_(Md7b,Md7c,i1,`Q2');

* rewrite insertion dots
	id Md7c = Md7d;
	id Md7d = Md1;
	#redefine HASTOPOd1 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared7()
* Topology: 0-1* 1-2* 1-2* 2-9
* Dots: 
* Apply automorphisms
if (match(Md7*<1/i1^n1?$n1>*...*<1/i2^n2?$n2>));
#do i=0,1
	$iso`i'=`HASHBASE'^4;
#enddo
	#call hash(0,$n2,$n1)
	#call hash(1,$n1,$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^4;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n2>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd7 automorphism;

#call CheckRemovedPropagators(d7,2,2,1,2)
#if `$DOACTION' == 0
.sort:reduce d7;
#endif
#endprocedure

#procedure Reduced7()
	#call Prepared7()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd7'
		#call MtoZ(Md7,Zd7,i,2)
		#call Reduce(d7)
		#call ZtoM(Zd7,Md7,i,2)
		#call Prepared7()
#else
		#if `USETURBO'
			#call TurboMd7()
		#endif
		#call insertionS(Md7,i1,i2,i1,1,1)
		#call Insertiond7()
#endif
	#endif
#endprocedure
*--#] reduce-d7 : 
*--#[ reduce-d6 :
#procedure Insertiond6()
* merge propagators with same momentum, and repeated dots
	if (count(Md6b,1)) Multiply replace_(Md6b,Md6c,i1,`Q2');

* rewrite insertion dots
	id Md6c = Md6d;
	id Md6d = Md1;
	#redefine HASTOPOd1 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared6()
* Topology: 0-1* 1-2 1-2** 2-9
* Dots: 
* Apply automorphisms
if (match(Md6*<1/i1^n1?$n1>*...*<1/i2^n2?$n2>));
endif;
ModuleOption local,<$n1>,...,<$n2>,<$iso0>,...,<$iso0>,$bestiso,$bestisov;
.sort:Zd6 automorphism;

#call CheckRemovedPropagators(d6,2,1,2,1)
#if `$DOACTION' == 0
.sort:reduce d6;
#endif
#endprocedure

#procedure Reduced6()
	#call Prepared6()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd6'
		#call MtoZ(Md6,Zd6,i,2)
		#call Reduce(d6)
		#call ZtoM(Zd6,Md6,i,2)
		#call Prepared6()
#else
		#if `USETURBO'
			#call TurboMd6()
		#endif
		#call insertionS(Md6,i1,i2,i1,0,2)
		#call Insertiond6()
#endif
	#endif
#endprocedure
*--#] reduce-d6 : 
*--#[ reduce-d5 :
#procedure Insertiond5()
* merge propagators with same momentum, and repeated dots
	if (count(Md5b,1)) Multiply replace_(Md5b,Md5c,i1,`Q2');

* rewrite insertion dots
	id Md5c = Md5d;
	id Md5d = Md1;
	#redefine HASTOPOd1 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared5()
* Topology: 0-1 1-2 1-2*** 2-9
* Dots: 
* Apply automorphisms
if (match(Md5*<1/i1^n1?$n1>*...*<1/i2^n2?$n2>));
endif;
ModuleOption local,<$n1>,...,<$n2>,<$iso0>,...,<$iso0>,$bestiso,$bestisov;
.sort:Zd5 automorphism;

#call CheckRemovedPropagators(d5,2,1,2,1)
#if `$DOACTION' == 0
.sort:reduce d5;
#endif
#endprocedure

#procedure Reduced5()
	#call Prepared5()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd5'
		#call MtoZ(Md5,Zd5,i,2)
		#call Reduce(d5)
		#call ZtoM(Zd5,Md5,i,2)
		#call Prepared5()
#else
		#if `USETURBO'
			#call TurboMd5()
		#endif
		#call insertionS(Md5,i1,i2,i1,0,3)
		#call Insertiond5()
#endif
	#endif
#endprocedure
*--#] reduce-d5 : 
*--#[ reduce-d4 :
#procedure Insertiond4()
* merge propagators with same momentum, and repeated dots
	if (count(Md4b,1)) Multiply replace_(Md4b,Md4c,i1,`Q2');

* rewrite insertion dots
	id Md4c = Md4d;
	id Md4d = Md1;
	#redefine HASTOPOd1 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared4()
* Topology: 0-1** 1-2 1-2* 2-9
* Dots: 
* Apply automorphisms
if (match(Md4*<1/i1^n1?$n1>*...*<1/i2^n2?$n2>));
endif;
ModuleOption local,<$n1>,...,<$n2>,<$iso0>,...,<$iso0>,$bestiso,$bestisov;
.sort:Zd4 automorphism;

#call CheckRemovedPropagators(d4,2,1,2,1)
#if `$DOACTION' == 0
.sort:reduce d4;
#endif
#endprocedure

#procedure Reduced4()
	#call Prepared4()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd4'
		#call MtoZ(Md4,Zd4,i,2)
		#call Reduce(d4)
		#call ZtoM(Zd4,Md4,i,2)
		#call Prepared4()
#else
		#if `USETURBO'
			#call TurboMd4()
		#endif
		#call insertionS(Md4,i1,i2,i1,0,1)
		#call Insertiond4()
#endif
	#endif
#endprocedure
*--#] reduce-d4 : 
*--#[ reduce-d3 :
#procedure Insertiond3()
* merge propagators with same momentum, and repeated dots
	if (count(Md3b,1)) Multiply replace_(Md3b,Md3c,i1,`Q2');

* rewrite insertion dots
	id Md3c = Md3d;
	id Md3d = Md1;
	#redefine HASTOPOd1 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared3()
* Topology: 0-1*** 1-2 1-2 2-9
* Dots: 
* Apply automorphisms
if (match(Md3*<1/i1^n1?$n1>*...*<1/i2^n2?$n2>));
#do i=0,1
	$iso`i'=`HASHBASE'^4;
#enddo
	#call hash(0,$n2,$n1)
	#call hash(1,$n1,$n2)
$bestiso=-1;
$bestisov=`HASHBASE'^4;
#do i=0,1
if ($iso`i' < $bestisov);
	$bestiso=`i';
	$bestisov=$iso`i';
endif;
#enddo
if ($bestiso == 1); Multiply replace_(i1,i2,i2,i1);
endif;
endif;
ModuleOption local,<$n1>,...,<$n2>,<$iso0>,...,<$iso1>,$bestiso,$bestisov;
.sort:Zd3 automorphism;

#call CheckRemovedPropagators(d3,2,0,1,2)
#if `$DOACTION' == 0
.sort:reduce d3;
#endif
#endprocedure

#procedure Reduced3()
	#call Prepared3()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd3'
		#call MtoZ(Md3,Zd3,i,2)
		#call Reduce(d3)
		#call ZtoM(Zd3,Md3,i,2)
		#call Prepared3()
#else
		#if `USETURBO'
			#call TurboMd3()
		#endif
		#call insertionS(Md3,i1,i2,i1,0,0)
		#call Insertiond3()
#endif
	#endif
#endprocedure
*--#] reduce-d3 : 
*--#[ reduce-d2 :
#procedure Insertiond2()
* merge propagators with same momentum, and repeated dots
	if (count(Md2b,1)) Multiply replace_(Md2b,Md2c,i1,`Q2');

* rewrite insertion dots
	id Md2c = Md2d;
	id Md2d = Md1;
	#redefine HASTOPOd1 "1"
.sort:end insertion;
#endprocedure

#procedure Prepared2()
* Topology: 0-1 1-2* 1-2** 2-9
* Dots: 
* Apply automorphisms
if (match(Md2*<1/i1^n1?$n1>*...*<1/i2^n2?$n2>));
endif;
ModuleOption local,<$n1>,...,<$n2>,<$iso0>,...,<$iso0>,$bestiso,$bestisov;
.sort:Zd2 automorphism;

#call CheckRemovedPropagators(d2,2,2,1,2)
#if `$DOACTION' == 0
.sort:reduce d2;
#endif
#endprocedure

#procedure Reduced2()
	#call Prepared2()
	#if `$DOACTION'
#ifdef `HASSCHEMEZd2'
		#call MtoZ(Md2,Zd2,i,2)
		#call Reduce(d2)
		#call ZtoM(Zd2,Md2,i,2)
		#call Prepared2()
#else
		#if `USETURBO'
			#call TurboMd2()
		#endif
		#call insertionS(Md2,i1,i2,i1,1,2)
		#call Insertiond2()
#endif
	#endif
#endprocedure
*--#] reduce-d2 : 
#call ReduceEdge(2,\
d7,d6,d5,d4,d3,d2\
)
*--#] 2 edges : 
*--#[ 0 edges :
*--#[ reduce-d1 :
#procedure Prepared1()
* Topology: 0-9****
* Dots: 
	id Md1 = 1;
.sort:reduce d1;
#endprocedure

#procedure Reduced1()
	#call Prepared1()
#endprocedure
*--#] reduce-d1 : 
#call ReduceEdge(0,\
d1\
)
*--#] 0 edges : 
#call EnablePolyratfun()
.sort:DoForcer end;
#endprocedure

*--#] DoForcer : 
#endif
* vim: ft=form et ts=8 sts=2 sw=2 fdm=marker fmr=#[,#] fdc=4
